// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/city"
	"tkserver/internal/store/ent/itemcategory"
	"tkserver/internal/store/ent/kcuserclass"
	"tkserver/internal/store/ent/kcusercourse"
	"tkserver/internal/store/ent/message"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkuserexamscorerecord"
	"tkserver/internal/store/ent/tkuserquestionbankrecord"
	"tkserver/internal/store/ent/tkuserquestionrecord"
	"tkserver/internal/store/ent/user"
	"tkserver/internal/store/ent/useraskanswer"
	"tkserver/internal/store/ent/usercourseappraise"
	"tkserver/internal/store/ent/userloginlog"
	"tkserver/internal/store/ent/videorecord"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where adds a new predicate for the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.predicates = append(uu.mutation.predicates, ps...)
	return uu
}

// SetUUID sets the "uuid" field.
func (uu *UserUpdate) SetUUID(s string) *UserUpdate {
	uu.mutation.SetUUID(s)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetSalt sets the "salt" field.
func (uu *UserUpdate) SetSalt(s string) *UserUpdate {
	uu.mutation.SetSalt(s)
	return uu
}

// SetBossUserID sets the "boss_user_id" field.
func (uu *UserUpdate) SetBossUserID(i int) *UserUpdate {
	uu.mutation.ResetBossUserID()
	uu.mutation.SetBossUserID(i)
	return uu
}

// SetNillableBossUserID sets the "boss_user_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBossUserID(i *int) *UserUpdate {
	if i != nil {
		uu.SetBossUserID(*i)
	}
	return uu
}

// AddBossUserID adds i to the "boss_user_id" field.
func (uu *UserUpdate) AddBossUserID(i int) *UserUpdate {
	uu.mutation.AddBossUserID(i)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// SetNickname sets the "nickname" field.
func (uu *UserUpdate) SetNickname(s string) *UserUpdate {
	uu.mutation.SetNickname(s)
	return uu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNickname(s *string) *UserUpdate {
	if s != nil {
		uu.SetNickname(*s)
	}
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(u uint8) *UserUpdate {
	uu.mutation.ResetStatus()
	uu.mutation.SetStatus(u)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(u *uint8) *UserUpdate {
	if u != nil {
		uu.SetStatus(*u)
	}
	return uu
}

// AddStatus adds u to the "status" field.
func (uu *UserUpdate) AddStatus(u uint8) *UserUpdate {
	uu.mutation.AddStatus(u)
	return uu
}

// SetSex sets the "sex" field.
func (uu *UserUpdate) SetSex(u uint8) *UserUpdate {
	uu.mutation.ResetSex()
	uu.mutation.SetSex(u)
	return uu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSex(u *uint8) *UserUpdate {
	if u != nil {
		uu.SetSex(*u)
	}
	return uu
}

// AddSex adds u to the "sex" field.
func (uu *UserUpdate) AddSex(u uint8) *UserUpdate {
	uu.mutation.AddSex(u)
	return uu
}

// SetRegFrom sets the "reg_from" field.
func (uu *UserUpdate) SetRegFrom(u uint8) *UserUpdate {
	uu.mutation.ResetRegFrom()
	uu.mutation.SetRegFrom(u)
	return uu
}

// SetNillableRegFrom sets the "reg_from" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRegFrom(u *uint8) *UserUpdate {
	if u != nil {
		uu.SetRegFrom(*u)
	}
	return uu
}

// AddRegFrom adds u to the "reg_from" field.
func (uu *UserUpdate) AddRegFrom(u uint8) *UserUpdate {
	uu.mutation.AddRegFrom(u)
	return uu
}

// SetCardType sets the "card_type" field.
func (uu *UserUpdate) SetCardType(u uint8) *UserUpdate {
	uu.mutation.ResetCardType()
	uu.mutation.SetCardType(u)
	return uu
}

// SetNillableCardType sets the "card_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCardType(u *uint8) *UserUpdate {
	if u != nil {
		uu.SetCardType(*u)
	}
	return uu
}

// AddCardType adds u to the "card_type" field.
func (uu *UserUpdate) AddCardType(u uint8) *UserUpdate {
	uu.mutation.AddCardType(u)
	return uu
}

// SetIDCard sets the "id_card" field.
func (uu *UserUpdate) SetIDCard(s string) *UserUpdate {
	uu.mutation.SetIDCard(s)
	return uu
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIDCard(s *string) *UserUpdate {
	if s != nil {
		uu.SetIDCard(*s)
	}
	return uu
}

// SetFromCityID sets the "from_city_id" field.
func (uu *UserUpdate) SetFromCityID(i int) *UserUpdate {
	uu.mutation.ResetFromCityID()
	uu.mutation.SetFromCityID(i)
	return uu
}

// SetNillableFromCityID sets the "from_city_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFromCityID(i *int) *UserUpdate {
	if i != nil {
		uu.SetFromCityID(*i)
	}
	return uu
}

// ClearFromCityID clears the value of the "from_city_id" field.
func (uu *UserUpdate) ClearFromCityID() *UserUpdate {
	uu.mutation.ClearFromCityID()
	return uu
}

// SetFromItemCategoryID sets the "from_item_category_id" field.
func (uu *UserUpdate) SetFromItemCategoryID(i int) *UserUpdate {
	uu.mutation.ResetFromItemCategoryID()
	uu.mutation.SetFromItemCategoryID(i)
	return uu
}

// SetNillableFromItemCategoryID sets the "from_item_category_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFromItemCategoryID(i *int) *UserUpdate {
	if i != nil {
		uu.SetFromItemCategoryID(*i)
	}
	return uu
}

// ClearFromItemCategoryID clears the value of the "from_item_category_id" field.
func (uu *UserUpdate) ClearFromItemCategoryID() *UserUpdate {
	uu.mutation.ClearFromItemCategoryID()
	return uu
}

// SetBirthday sets the "birthday" field.
func (uu *UserUpdate) SetBirthday(t time.Time) *UserUpdate {
	uu.mutation.SetBirthday(t)
	return uu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthday(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBirthday(*t)
	}
	return uu
}

// ClearBirthday clears the value of the "birthday" field.
func (uu *UserUpdate) ClearBirthday() *UserUpdate {
	uu.mutation.ClearBirthday()
	return uu
}

// SetSignRemark sets the "sign_remark" field.
func (uu *UserUpdate) SetSignRemark(s string) *UserUpdate {
	uu.mutation.SetSignRemark(s)
	return uu
}

// SetNillableSignRemark sets the "sign_remark" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSignRemark(s *string) *UserUpdate {
	if s != nil {
		uu.SetSignRemark(*s)
	}
	return uu
}

// ClearSignRemark clears the value of the "sign_remark" field.
func (uu *UserUpdate) ClearSignRemark() *UserUpdate {
	uu.mutation.ClearSignRemark()
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// AddLoginLogIDs adds the "login_log" edge to the UserLoginLog entity by IDs.
func (uu *UserUpdate) AddLoginLogIDs(ids ...int) *UserUpdate {
	uu.mutation.AddLoginLogIDs(ids...)
	return uu
}

// AddLoginLog adds the "login_log" edges to the UserLoginLog entity.
func (uu *UserUpdate) AddLoginLog(u ...*UserLoginLog) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddLoginLogIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (uu *UserUpdate) AddMessageIDs(ids ...int) *UserUpdate {
	uu.mutation.AddMessageIDs(ids...)
	return uu
}

// AddMessages adds the "messages" edges to the Message entity.
func (uu *UserUpdate) AddMessages(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMessageIDs(ids...)
}

// AddUserCourseIDs adds the "user_courses" edge to the KcUserCourse entity by IDs.
func (uu *UserUpdate) AddUserCourseIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserCourseIDs(ids...)
	return uu
}

// AddUserCourses adds the "user_courses" edges to the KcUserCourse entity.
func (uu *UserUpdate) AddUserCourses(k ...*KcUserCourse) *UserUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uu.AddUserCourseIDs(ids...)
}

// AddUserClassIDs adds the "user_classes" edge to the KcUserClass entity by IDs.
func (uu *UserUpdate) AddUserClassIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserClassIDs(ids...)
	return uu
}

// AddUserClasses adds the "user_classes" edges to the KcUserClass entity.
func (uu *UserUpdate) AddUserClasses(k ...*KcUserClass) *UserUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uu.AddUserClassIDs(ids...)
}

// AddUserExamsRecordIDs adds the "user_exams_records" edge to the TkUserExamScoreRecord entity by IDs.
func (uu *UserUpdate) AddUserExamsRecordIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserExamsRecordIDs(ids...)
	return uu
}

// AddUserExamsRecords adds the "user_exams_records" edges to the TkUserExamScoreRecord entity.
func (uu *UserUpdate) AddUserExamsRecords(t ...*TkUserExamScoreRecord) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddUserExamsRecordIDs(ids...)
}

// AddUserQuestionBankRecordIDs adds the "user_question_bank_records" edge to the TkUserQuestionBankRecord entity by IDs.
func (uu *UserUpdate) AddUserQuestionBankRecordIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserQuestionBankRecordIDs(ids...)
	return uu
}

// AddUserQuestionBankRecords adds the "user_question_bank_records" edges to the TkUserQuestionBankRecord entity.
func (uu *UserUpdate) AddUserQuestionBankRecords(t ...*TkUserQuestionBankRecord) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddUserQuestionBankRecordIDs(ids...)
}

// AddUserQuestionRecordIDs adds the "user_question_records" edge to the TkUserQuestionRecord entity by IDs.
func (uu *UserUpdate) AddUserQuestionRecordIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserQuestionRecordIDs(ids...)
	return uu
}

// AddUserQuestionRecords adds the "user_question_records" edges to the TkUserQuestionRecord entity.
func (uu *UserUpdate) AddUserQuestionRecords(t ...*TkUserQuestionRecord) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddUserQuestionRecordIDs(ids...)
}

// AddAskUserIDs adds the "ask_users" edge to the UserAskAnswer entity by IDs.
func (uu *UserUpdate) AddAskUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAskUserIDs(ids...)
	return uu
}

// AddAskUsers adds the "ask_users" edges to the UserAskAnswer entity.
func (uu *UserUpdate) AddAskUsers(u ...*UserAskAnswer) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddAskUserIDs(ids...)
}

// AddCourseAppraiseUserIDs adds the "course_appraise_users" edge to the UserCourseAppraise entity by IDs.
func (uu *UserUpdate) AddCourseAppraiseUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCourseAppraiseUserIDs(ids...)
	return uu
}

// AddCourseAppraiseUsers adds the "course_appraise_users" edges to the UserCourseAppraise entity.
func (uu *UserUpdate) AddCourseAppraiseUsers(u ...*UserCourseAppraise) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddCourseAppraiseUserIDs(ids...)
}

// AddUserVideoRecordIDs adds the "user_video_record" edge to the VideoRecord entity by IDs.
func (uu *UserUpdate) AddUserVideoRecordIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserVideoRecordIDs(ids...)
	return uu
}

// AddUserVideoRecord adds the "user_video_record" edges to the VideoRecord entity.
func (uu *UserUpdate) AddUserVideoRecord(v ...*VideoRecord) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddUserVideoRecordIDs(ids...)
}

// SetCityID sets the "city" edge to the City entity by ID.
func (uu *UserUpdate) SetCityID(id int) *UserUpdate {
	uu.mutation.SetCityID(id)
	return uu
}

// SetNillableCityID sets the "city" edge to the City entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCityID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetCityID(*id)
	}
	return uu
}

// SetCity sets the "city" edge to the City entity.
func (uu *UserUpdate) SetCity(c *City) *UserUpdate {
	return uu.SetCityID(c.ID)
}

// SetCateID sets the "cate" edge to the ItemCategory entity by ID.
func (uu *UserUpdate) SetCateID(id int) *UserUpdate {
	uu.mutation.SetCateID(id)
	return uu
}

// SetNillableCateID sets the "cate" edge to the ItemCategory entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCateID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetCateID(*id)
	}
	return uu
}

// SetCate sets the "cate" edge to the ItemCategory entity.
func (uu *UserUpdate) SetCate(i *ItemCategory) *UserUpdate {
	return uu.SetCateID(i.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearLoginLog clears all "login_log" edges to the UserLoginLog entity.
func (uu *UserUpdate) ClearLoginLog() *UserUpdate {
	uu.mutation.ClearLoginLog()
	return uu
}

// RemoveLoginLogIDs removes the "login_log" edge to UserLoginLog entities by IDs.
func (uu *UserUpdate) RemoveLoginLogIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveLoginLogIDs(ids...)
	return uu
}

// RemoveLoginLog removes "login_log" edges to UserLoginLog entities.
func (uu *UserUpdate) RemoveLoginLog(u ...*UserLoginLog) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveLoginLogIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (uu *UserUpdate) ClearMessages() *UserUpdate {
	uu.mutation.ClearMessages()
	return uu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (uu *UserUpdate) RemoveMessageIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveMessageIDs(ids...)
	return uu
}

// RemoveMessages removes "messages" edges to Message entities.
func (uu *UserUpdate) RemoveMessages(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMessageIDs(ids...)
}

// ClearUserCourses clears all "user_courses" edges to the KcUserCourse entity.
func (uu *UserUpdate) ClearUserCourses() *UserUpdate {
	uu.mutation.ClearUserCourses()
	return uu
}

// RemoveUserCourseIDs removes the "user_courses" edge to KcUserCourse entities by IDs.
func (uu *UserUpdate) RemoveUserCourseIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserCourseIDs(ids...)
	return uu
}

// RemoveUserCourses removes "user_courses" edges to KcUserCourse entities.
func (uu *UserUpdate) RemoveUserCourses(k ...*KcUserCourse) *UserUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uu.RemoveUserCourseIDs(ids...)
}

// ClearUserClasses clears all "user_classes" edges to the KcUserClass entity.
func (uu *UserUpdate) ClearUserClasses() *UserUpdate {
	uu.mutation.ClearUserClasses()
	return uu
}

// RemoveUserClassIDs removes the "user_classes" edge to KcUserClass entities by IDs.
func (uu *UserUpdate) RemoveUserClassIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserClassIDs(ids...)
	return uu
}

// RemoveUserClasses removes "user_classes" edges to KcUserClass entities.
func (uu *UserUpdate) RemoveUserClasses(k ...*KcUserClass) *UserUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uu.RemoveUserClassIDs(ids...)
}

// ClearUserExamsRecords clears all "user_exams_records" edges to the TkUserExamScoreRecord entity.
func (uu *UserUpdate) ClearUserExamsRecords() *UserUpdate {
	uu.mutation.ClearUserExamsRecords()
	return uu
}

// RemoveUserExamsRecordIDs removes the "user_exams_records" edge to TkUserExamScoreRecord entities by IDs.
func (uu *UserUpdate) RemoveUserExamsRecordIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserExamsRecordIDs(ids...)
	return uu
}

// RemoveUserExamsRecords removes "user_exams_records" edges to TkUserExamScoreRecord entities.
func (uu *UserUpdate) RemoveUserExamsRecords(t ...*TkUserExamScoreRecord) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveUserExamsRecordIDs(ids...)
}

// ClearUserQuestionBankRecords clears all "user_question_bank_records" edges to the TkUserQuestionBankRecord entity.
func (uu *UserUpdate) ClearUserQuestionBankRecords() *UserUpdate {
	uu.mutation.ClearUserQuestionBankRecords()
	return uu
}

// RemoveUserQuestionBankRecordIDs removes the "user_question_bank_records" edge to TkUserQuestionBankRecord entities by IDs.
func (uu *UserUpdate) RemoveUserQuestionBankRecordIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserQuestionBankRecordIDs(ids...)
	return uu
}

// RemoveUserQuestionBankRecords removes "user_question_bank_records" edges to TkUserQuestionBankRecord entities.
func (uu *UserUpdate) RemoveUserQuestionBankRecords(t ...*TkUserQuestionBankRecord) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveUserQuestionBankRecordIDs(ids...)
}

// ClearUserQuestionRecords clears all "user_question_records" edges to the TkUserQuestionRecord entity.
func (uu *UserUpdate) ClearUserQuestionRecords() *UserUpdate {
	uu.mutation.ClearUserQuestionRecords()
	return uu
}

// RemoveUserQuestionRecordIDs removes the "user_question_records" edge to TkUserQuestionRecord entities by IDs.
func (uu *UserUpdate) RemoveUserQuestionRecordIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserQuestionRecordIDs(ids...)
	return uu
}

// RemoveUserQuestionRecords removes "user_question_records" edges to TkUserQuestionRecord entities.
func (uu *UserUpdate) RemoveUserQuestionRecords(t ...*TkUserQuestionRecord) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveUserQuestionRecordIDs(ids...)
}

// ClearAskUsers clears all "ask_users" edges to the UserAskAnswer entity.
func (uu *UserUpdate) ClearAskUsers() *UserUpdate {
	uu.mutation.ClearAskUsers()
	return uu
}

// RemoveAskUserIDs removes the "ask_users" edge to UserAskAnswer entities by IDs.
func (uu *UserUpdate) RemoveAskUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAskUserIDs(ids...)
	return uu
}

// RemoveAskUsers removes "ask_users" edges to UserAskAnswer entities.
func (uu *UserUpdate) RemoveAskUsers(u ...*UserAskAnswer) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveAskUserIDs(ids...)
}

// ClearCourseAppraiseUsers clears all "course_appraise_users" edges to the UserCourseAppraise entity.
func (uu *UserUpdate) ClearCourseAppraiseUsers() *UserUpdate {
	uu.mutation.ClearCourseAppraiseUsers()
	return uu
}

// RemoveCourseAppraiseUserIDs removes the "course_appraise_users" edge to UserCourseAppraise entities by IDs.
func (uu *UserUpdate) RemoveCourseAppraiseUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCourseAppraiseUserIDs(ids...)
	return uu
}

// RemoveCourseAppraiseUsers removes "course_appraise_users" edges to UserCourseAppraise entities.
func (uu *UserUpdate) RemoveCourseAppraiseUsers(u ...*UserCourseAppraise) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveCourseAppraiseUserIDs(ids...)
}

// ClearUserVideoRecord clears all "user_video_record" edges to the VideoRecord entity.
func (uu *UserUpdate) ClearUserVideoRecord() *UserUpdate {
	uu.mutation.ClearUserVideoRecord()
	return uu
}

// RemoveUserVideoRecordIDs removes the "user_video_record" edge to VideoRecord entities by IDs.
func (uu *UserUpdate) RemoveUserVideoRecordIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserVideoRecordIDs(ids...)
	return uu
}

// RemoveUserVideoRecord removes "user_video_record" edges to VideoRecord entities.
func (uu *UserUpdate) RemoveUserVideoRecord(v ...*VideoRecord) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveUserVideoRecordIDs(ids...)
}

// ClearCity clears the "city" edge to the City entity.
func (uu *UserUpdate) ClearCity() *UserUpdate {
	uu.mutation.ClearCity()
	return uu
}

// ClearCate clears the "cate" edge to the ItemCategory entity.
func (uu *UserUpdate) ClearCate() *UserUpdate {
	uu.mutation.ClearCate()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uu.defaults()
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok && !uu.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUUID,
		})
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldDeletedAt,
		})
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldDeletedAt,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSalt,
		})
	}
	if value, ok := uu.mutation.BossUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldBossUserID,
		})
	}
	if value, ok := uu.mutation.AddedBossUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldBossUserID,
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNickname,
		})
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldStatus,
		})
	}
	if value, ok := uu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldStatus,
		})
	}
	if value, ok := uu.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldSex,
		})
	}
	if value, ok := uu.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldSex,
		})
	}
	if value, ok := uu.mutation.RegFrom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldRegFrom,
		})
	}
	if value, ok := uu.mutation.AddedRegFrom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldRegFrom,
		})
	}
	if value, ok := uu.mutation.CardType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldCardType,
		})
	}
	if value, ok := uu.mutation.AddedCardType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldCardType,
		})
	}
	if value, ok := uu.mutation.IDCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIDCard,
		})
	}
	if value, ok := uu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldBirthday,
		})
	}
	if uu.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldBirthday,
		})
	}
	if value, ok := uu.mutation.SignRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSignRemark,
		})
	}
	if uu.mutation.SignRemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldSignRemark,
		})
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatar,
		})
	}
	if uu.mutation.LoginLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoginLogTable,
			Columns: []string{user.LoginLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLoginLogIDs(); len(nodes) > 0 && !uu.mutation.LoginLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoginLogTable,
			Columns: []string{user.LoginLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LoginLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoginLogTable,
			Columns: []string{user.LoginLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: user.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !uu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: user.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: user.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCoursesTable,
			Columns: []string{user.UserCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcusercourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserCoursesIDs(); len(nodes) > 0 && !uu.mutation.UserCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCoursesTable,
			Columns: []string{user.UserCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcusercourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCoursesTable,
			Columns: []string{user.UserCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcusercourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserClassesTable,
			Columns: []string{user.UserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserClassesIDs(); len(nodes) > 0 && !uu.mutation.UserClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserClassesTable,
			Columns: []string{user.UserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserClassesTable,
			Columns: []string{user.UserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserExamsRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserExamsRecordsTable,
			Columns: []string{user.UserExamsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserExamsRecordsIDs(); len(nodes) > 0 && !uu.mutation.UserExamsRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserExamsRecordsTable,
			Columns: []string{user.UserExamsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserExamsRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserExamsRecordsTable,
			Columns: []string{user.UserExamsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserQuestionBankRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionBankRecordsTable,
			Columns: []string{user.UserQuestionBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserQuestionBankRecordsIDs(); len(nodes) > 0 && !uu.mutation.UserQuestionBankRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionBankRecordsTable,
			Columns: []string{user.UserQuestionBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserQuestionBankRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionBankRecordsTable,
			Columns: []string{user.UserQuestionBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserQuestionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionRecordsTable,
			Columns: []string{user.UserQuestionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserQuestionRecordsIDs(); len(nodes) > 0 && !uu.mutation.UserQuestionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionRecordsTable,
			Columns: []string{user.UserQuestionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserQuestionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionRecordsTable,
			Columns: []string{user.UserQuestionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AskUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AskUsersTable,
			Columns: []string{user.AskUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAskUsersIDs(); len(nodes) > 0 && !uu.mutation.AskUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AskUsersTable,
			Columns: []string{user.AskUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AskUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AskUsersTable,
			Columns: []string{user.AskUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CourseAppraiseUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CourseAppraiseUsersTable,
			Columns: []string{user.CourseAppraiseUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCourseAppraiseUsersIDs(); len(nodes) > 0 && !uu.mutation.CourseAppraiseUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CourseAppraiseUsersTable,
			Columns: []string{user.CourseAppraiseUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CourseAppraiseUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CourseAppraiseUsersTable,
			Columns: []string{user.CourseAppraiseUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserVideoRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVideoRecordTable,
			Columns: []string{user.UserVideoRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserVideoRecordIDs(); len(nodes) > 0 && !uu.mutation.UserVideoRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVideoRecordTable,
			Columns: []string{user.UserVideoRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserVideoRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVideoRecordTable,
			Columns: []string{user.UserVideoRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CityTable,
			Columns: []string{user.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CityTable,
			Columns: []string{user.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CateTable,
			Columns: []string{user.CateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CateTable,
			Columns: []string{user.CateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUUID sets the "uuid" field.
func (uuo *UserUpdateOne) SetUUID(s string) *UserUpdateOne {
	uuo.mutation.SetUUID(s)
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetSalt sets the "salt" field.
func (uuo *UserUpdateOne) SetSalt(s string) *UserUpdateOne {
	uuo.mutation.SetSalt(s)
	return uuo
}

// SetBossUserID sets the "boss_user_id" field.
func (uuo *UserUpdateOne) SetBossUserID(i int) *UserUpdateOne {
	uuo.mutation.ResetBossUserID()
	uuo.mutation.SetBossUserID(i)
	return uuo
}

// SetNillableBossUserID sets the "boss_user_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBossUserID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetBossUserID(*i)
	}
	return uuo
}

// AddBossUserID adds i to the "boss_user_id" field.
func (uuo *UserUpdateOne) AddBossUserID(i int) *UserUpdateOne {
	uuo.mutation.AddBossUserID(i)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// SetNickname sets the "nickname" field.
func (uuo *UserUpdateOne) SetNickname(s string) *UserUpdateOne {
	uuo.mutation.SetNickname(s)
	return uuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNickname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNickname(*s)
	}
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(u uint8) *UserUpdateOne {
	uuo.mutation.ResetStatus()
	uuo.mutation.SetStatus(u)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(u *uint8) *UserUpdateOne {
	if u != nil {
		uuo.SetStatus(*u)
	}
	return uuo
}

// AddStatus adds u to the "status" field.
func (uuo *UserUpdateOne) AddStatus(u uint8) *UserUpdateOne {
	uuo.mutation.AddStatus(u)
	return uuo
}

// SetSex sets the "sex" field.
func (uuo *UserUpdateOne) SetSex(u uint8) *UserUpdateOne {
	uuo.mutation.ResetSex()
	uuo.mutation.SetSex(u)
	return uuo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSex(u *uint8) *UserUpdateOne {
	if u != nil {
		uuo.SetSex(*u)
	}
	return uuo
}

// AddSex adds u to the "sex" field.
func (uuo *UserUpdateOne) AddSex(u uint8) *UserUpdateOne {
	uuo.mutation.AddSex(u)
	return uuo
}

// SetRegFrom sets the "reg_from" field.
func (uuo *UserUpdateOne) SetRegFrom(u uint8) *UserUpdateOne {
	uuo.mutation.ResetRegFrom()
	uuo.mutation.SetRegFrom(u)
	return uuo
}

// SetNillableRegFrom sets the "reg_from" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRegFrom(u *uint8) *UserUpdateOne {
	if u != nil {
		uuo.SetRegFrom(*u)
	}
	return uuo
}

// AddRegFrom adds u to the "reg_from" field.
func (uuo *UserUpdateOne) AddRegFrom(u uint8) *UserUpdateOne {
	uuo.mutation.AddRegFrom(u)
	return uuo
}

// SetCardType sets the "card_type" field.
func (uuo *UserUpdateOne) SetCardType(u uint8) *UserUpdateOne {
	uuo.mutation.ResetCardType()
	uuo.mutation.SetCardType(u)
	return uuo
}

// SetNillableCardType sets the "card_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCardType(u *uint8) *UserUpdateOne {
	if u != nil {
		uuo.SetCardType(*u)
	}
	return uuo
}

// AddCardType adds u to the "card_type" field.
func (uuo *UserUpdateOne) AddCardType(u uint8) *UserUpdateOne {
	uuo.mutation.AddCardType(u)
	return uuo
}

// SetIDCard sets the "id_card" field.
func (uuo *UserUpdateOne) SetIDCard(s string) *UserUpdateOne {
	uuo.mutation.SetIDCard(s)
	return uuo
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIDCard(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetIDCard(*s)
	}
	return uuo
}

// SetFromCityID sets the "from_city_id" field.
func (uuo *UserUpdateOne) SetFromCityID(i int) *UserUpdateOne {
	uuo.mutation.ResetFromCityID()
	uuo.mutation.SetFromCityID(i)
	return uuo
}

// SetNillableFromCityID sets the "from_city_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFromCityID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetFromCityID(*i)
	}
	return uuo
}

// ClearFromCityID clears the value of the "from_city_id" field.
func (uuo *UserUpdateOne) ClearFromCityID() *UserUpdateOne {
	uuo.mutation.ClearFromCityID()
	return uuo
}

// SetFromItemCategoryID sets the "from_item_category_id" field.
func (uuo *UserUpdateOne) SetFromItemCategoryID(i int) *UserUpdateOne {
	uuo.mutation.ResetFromItemCategoryID()
	uuo.mutation.SetFromItemCategoryID(i)
	return uuo
}

// SetNillableFromItemCategoryID sets the "from_item_category_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFromItemCategoryID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetFromItemCategoryID(*i)
	}
	return uuo
}

// ClearFromItemCategoryID clears the value of the "from_item_category_id" field.
func (uuo *UserUpdateOne) ClearFromItemCategoryID() *UserUpdateOne {
	uuo.mutation.ClearFromItemCategoryID()
	return uuo
}

// SetBirthday sets the "birthday" field.
func (uuo *UserUpdateOne) SetBirthday(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBirthday(t)
	return uuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthday(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBirthday(*t)
	}
	return uuo
}

// ClearBirthday clears the value of the "birthday" field.
func (uuo *UserUpdateOne) ClearBirthday() *UserUpdateOne {
	uuo.mutation.ClearBirthday()
	return uuo
}

// SetSignRemark sets the "sign_remark" field.
func (uuo *UserUpdateOne) SetSignRemark(s string) *UserUpdateOne {
	uuo.mutation.SetSignRemark(s)
	return uuo
}

// SetNillableSignRemark sets the "sign_remark" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSignRemark(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSignRemark(*s)
	}
	return uuo
}

// ClearSignRemark clears the value of the "sign_remark" field.
func (uuo *UserUpdateOne) ClearSignRemark() *UserUpdateOne {
	uuo.mutation.ClearSignRemark()
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// AddLoginLogIDs adds the "login_log" edge to the UserLoginLog entity by IDs.
func (uuo *UserUpdateOne) AddLoginLogIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddLoginLogIDs(ids...)
	return uuo
}

// AddLoginLog adds the "login_log" edges to the UserLoginLog entity.
func (uuo *UserUpdateOne) AddLoginLog(u ...*UserLoginLog) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddLoginLogIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (uuo *UserUpdateOne) AddMessageIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddMessageIDs(ids...)
	return uuo
}

// AddMessages adds the "messages" edges to the Message entity.
func (uuo *UserUpdateOne) AddMessages(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMessageIDs(ids...)
}

// AddUserCourseIDs adds the "user_courses" edge to the KcUserCourse entity by IDs.
func (uuo *UserUpdateOne) AddUserCourseIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserCourseIDs(ids...)
	return uuo
}

// AddUserCourses adds the "user_courses" edges to the KcUserCourse entity.
func (uuo *UserUpdateOne) AddUserCourses(k ...*KcUserCourse) *UserUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uuo.AddUserCourseIDs(ids...)
}

// AddUserClassIDs adds the "user_classes" edge to the KcUserClass entity by IDs.
func (uuo *UserUpdateOne) AddUserClassIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserClassIDs(ids...)
	return uuo
}

// AddUserClasses adds the "user_classes" edges to the KcUserClass entity.
func (uuo *UserUpdateOne) AddUserClasses(k ...*KcUserClass) *UserUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uuo.AddUserClassIDs(ids...)
}

// AddUserExamsRecordIDs adds the "user_exams_records" edge to the TkUserExamScoreRecord entity by IDs.
func (uuo *UserUpdateOne) AddUserExamsRecordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserExamsRecordIDs(ids...)
	return uuo
}

// AddUserExamsRecords adds the "user_exams_records" edges to the TkUserExamScoreRecord entity.
func (uuo *UserUpdateOne) AddUserExamsRecords(t ...*TkUserExamScoreRecord) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddUserExamsRecordIDs(ids...)
}

// AddUserQuestionBankRecordIDs adds the "user_question_bank_records" edge to the TkUserQuestionBankRecord entity by IDs.
func (uuo *UserUpdateOne) AddUserQuestionBankRecordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserQuestionBankRecordIDs(ids...)
	return uuo
}

// AddUserQuestionBankRecords adds the "user_question_bank_records" edges to the TkUserQuestionBankRecord entity.
func (uuo *UserUpdateOne) AddUserQuestionBankRecords(t ...*TkUserQuestionBankRecord) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddUserQuestionBankRecordIDs(ids...)
}

// AddUserQuestionRecordIDs adds the "user_question_records" edge to the TkUserQuestionRecord entity by IDs.
func (uuo *UserUpdateOne) AddUserQuestionRecordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserQuestionRecordIDs(ids...)
	return uuo
}

// AddUserQuestionRecords adds the "user_question_records" edges to the TkUserQuestionRecord entity.
func (uuo *UserUpdateOne) AddUserQuestionRecords(t ...*TkUserQuestionRecord) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddUserQuestionRecordIDs(ids...)
}

// AddAskUserIDs adds the "ask_users" edge to the UserAskAnswer entity by IDs.
func (uuo *UserUpdateOne) AddAskUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAskUserIDs(ids...)
	return uuo
}

// AddAskUsers adds the "ask_users" edges to the UserAskAnswer entity.
func (uuo *UserUpdateOne) AddAskUsers(u ...*UserAskAnswer) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddAskUserIDs(ids...)
}

// AddCourseAppraiseUserIDs adds the "course_appraise_users" edge to the UserCourseAppraise entity by IDs.
func (uuo *UserUpdateOne) AddCourseAppraiseUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCourseAppraiseUserIDs(ids...)
	return uuo
}

// AddCourseAppraiseUsers adds the "course_appraise_users" edges to the UserCourseAppraise entity.
func (uuo *UserUpdateOne) AddCourseAppraiseUsers(u ...*UserCourseAppraise) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddCourseAppraiseUserIDs(ids...)
}

// AddUserVideoRecordIDs adds the "user_video_record" edge to the VideoRecord entity by IDs.
func (uuo *UserUpdateOne) AddUserVideoRecordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserVideoRecordIDs(ids...)
	return uuo
}

// AddUserVideoRecord adds the "user_video_record" edges to the VideoRecord entity.
func (uuo *UserUpdateOne) AddUserVideoRecord(v ...*VideoRecord) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddUserVideoRecordIDs(ids...)
}

// SetCityID sets the "city" edge to the City entity by ID.
func (uuo *UserUpdateOne) SetCityID(id int) *UserUpdateOne {
	uuo.mutation.SetCityID(id)
	return uuo
}

// SetNillableCityID sets the "city" edge to the City entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCityID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCityID(*id)
	}
	return uuo
}

// SetCity sets the "city" edge to the City entity.
func (uuo *UserUpdateOne) SetCity(c *City) *UserUpdateOne {
	return uuo.SetCityID(c.ID)
}

// SetCateID sets the "cate" edge to the ItemCategory entity by ID.
func (uuo *UserUpdateOne) SetCateID(id int) *UserUpdateOne {
	uuo.mutation.SetCateID(id)
	return uuo
}

// SetNillableCateID sets the "cate" edge to the ItemCategory entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCateID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCateID(*id)
	}
	return uuo
}

// SetCate sets the "cate" edge to the ItemCategory entity.
func (uuo *UserUpdateOne) SetCate(i *ItemCategory) *UserUpdateOne {
	return uuo.SetCateID(i.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearLoginLog clears all "login_log" edges to the UserLoginLog entity.
func (uuo *UserUpdateOne) ClearLoginLog() *UserUpdateOne {
	uuo.mutation.ClearLoginLog()
	return uuo
}

// RemoveLoginLogIDs removes the "login_log" edge to UserLoginLog entities by IDs.
func (uuo *UserUpdateOne) RemoveLoginLogIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveLoginLogIDs(ids...)
	return uuo
}

// RemoveLoginLog removes "login_log" edges to UserLoginLog entities.
func (uuo *UserUpdateOne) RemoveLoginLog(u ...*UserLoginLog) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveLoginLogIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (uuo *UserUpdateOne) ClearMessages() *UserUpdateOne {
	uuo.mutation.ClearMessages()
	return uuo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (uuo *UserUpdateOne) RemoveMessageIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveMessageIDs(ids...)
	return uuo
}

// RemoveMessages removes "messages" edges to Message entities.
func (uuo *UserUpdateOne) RemoveMessages(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMessageIDs(ids...)
}

// ClearUserCourses clears all "user_courses" edges to the KcUserCourse entity.
func (uuo *UserUpdateOne) ClearUserCourses() *UserUpdateOne {
	uuo.mutation.ClearUserCourses()
	return uuo
}

// RemoveUserCourseIDs removes the "user_courses" edge to KcUserCourse entities by IDs.
func (uuo *UserUpdateOne) RemoveUserCourseIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserCourseIDs(ids...)
	return uuo
}

// RemoveUserCourses removes "user_courses" edges to KcUserCourse entities.
func (uuo *UserUpdateOne) RemoveUserCourses(k ...*KcUserCourse) *UserUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uuo.RemoveUserCourseIDs(ids...)
}

// ClearUserClasses clears all "user_classes" edges to the KcUserClass entity.
func (uuo *UserUpdateOne) ClearUserClasses() *UserUpdateOne {
	uuo.mutation.ClearUserClasses()
	return uuo
}

// RemoveUserClassIDs removes the "user_classes" edge to KcUserClass entities by IDs.
func (uuo *UserUpdateOne) RemoveUserClassIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserClassIDs(ids...)
	return uuo
}

// RemoveUserClasses removes "user_classes" edges to KcUserClass entities.
func (uuo *UserUpdateOne) RemoveUserClasses(k ...*KcUserClass) *UserUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uuo.RemoveUserClassIDs(ids...)
}

// ClearUserExamsRecords clears all "user_exams_records" edges to the TkUserExamScoreRecord entity.
func (uuo *UserUpdateOne) ClearUserExamsRecords() *UserUpdateOne {
	uuo.mutation.ClearUserExamsRecords()
	return uuo
}

// RemoveUserExamsRecordIDs removes the "user_exams_records" edge to TkUserExamScoreRecord entities by IDs.
func (uuo *UserUpdateOne) RemoveUserExamsRecordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserExamsRecordIDs(ids...)
	return uuo
}

// RemoveUserExamsRecords removes "user_exams_records" edges to TkUserExamScoreRecord entities.
func (uuo *UserUpdateOne) RemoveUserExamsRecords(t ...*TkUserExamScoreRecord) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveUserExamsRecordIDs(ids...)
}

// ClearUserQuestionBankRecords clears all "user_question_bank_records" edges to the TkUserQuestionBankRecord entity.
func (uuo *UserUpdateOne) ClearUserQuestionBankRecords() *UserUpdateOne {
	uuo.mutation.ClearUserQuestionBankRecords()
	return uuo
}

// RemoveUserQuestionBankRecordIDs removes the "user_question_bank_records" edge to TkUserQuestionBankRecord entities by IDs.
func (uuo *UserUpdateOne) RemoveUserQuestionBankRecordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserQuestionBankRecordIDs(ids...)
	return uuo
}

// RemoveUserQuestionBankRecords removes "user_question_bank_records" edges to TkUserQuestionBankRecord entities.
func (uuo *UserUpdateOne) RemoveUserQuestionBankRecords(t ...*TkUserQuestionBankRecord) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveUserQuestionBankRecordIDs(ids...)
}

// ClearUserQuestionRecords clears all "user_question_records" edges to the TkUserQuestionRecord entity.
func (uuo *UserUpdateOne) ClearUserQuestionRecords() *UserUpdateOne {
	uuo.mutation.ClearUserQuestionRecords()
	return uuo
}

// RemoveUserQuestionRecordIDs removes the "user_question_records" edge to TkUserQuestionRecord entities by IDs.
func (uuo *UserUpdateOne) RemoveUserQuestionRecordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserQuestionRecordIDs(ids...)
	return uuo
}

// RemoveUserQuestionRecords removes "user_question_records" edges to TkUserQuestionRecord entities.
func (uuo *UserUpdateOne) RemoveUserQuestionRecords(t ...*TkUserQuestionRecord) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveUserQuestionRecordIDs(ids...)
}

// ClearAskUsers clears all "ask_users" edges to the UserAskAnswer entity.
func (uuo *UserUpdateOne) ClearAskUsers() *UserUpdateOne {
	uuo.mutation.ClearAskUsers()
	return uuo
}

// RemoveAskUserIDs removes the "ask_users" edge to UserAskAnswer entities by IDs.
func (uuo *UserUpdateOne) RemoveAskUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAskUserIDs(ids...)
	return uuo
}

// RemoveAskUsers removes "ask_users" edges to UserAskAnswer entities.
func (uuo *UserUpdateOne) RemoveAskUsers(u ...*UserAskAnswer) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveAskUserIDs(ids...)
}

// ClearCourseAppraiseUsers clears all "course_appraise_users" edges to the UserCourseAppraise entity.
func (uuo *UserUpdateOne) ClearCourseAppraiseUsers() *UserUpdateOne {
	uuo.mutation.ClearCourseAppraiseUsers()
	return uuo
}

// RemoveCourseAppraiseUserIDs removes the "course_appraise_users" edge to UserCourseAppraise entities by IDs.
func (uuo *UserUpdateOne) RemoveCourseAppraiseUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCourseAppraiseUserIDs(ids...)
	return uuo
}

// RemoveCourseAppraiseUsers removes "course_appraise_users" edges to UserCourseAppraise entities.
func (uuo *UserUpdateOne) RemoveCourseAppraiseUsers(u ...*UserCourseAppraise) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveCourseAppraiseUserIDs(ids...)
}

// ClearUserVideoRecord clears all "user_video_record" edges to the VideoRecord entity.
func (uuo *UserUpdateOne) ClearUserVideoRecord() *UserUpdateOne {
	uuo.mutation.ClearUserVideoRecord()
	return uuo
}

// RemoveUserVideoRecordIDs removes the "user_video_record" edge to VideoRecord entities by IDs.
func (uuo *UserUpdateOne) RemoveUserVideoRecordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserVideoRecordIDs(ids...)
	return uuo
}

// RemoveUserVideoRecord removes "user_video_record" edges to VideoRecord entities.
func (uuo *UserUpdateOne) RemoveUserVideoRecord(v ...*VideoRecord) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveUserVideoRecordIDs(ids...)
}

// ClearCity clears the "city" edge to the City entity.
func (uuo *UserUpdateOne) ClearCity() *UserUpdateOne {
	uuo.mutation.ClearCity()
	return uuo
}

// ClearCate clears the "cate" edge to the ItemCategory entity.
func (uuo *UserUpdateOne) ClearCate() *UserUpdateOne {
	uuo.mutation.ClearCate()
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uuo.defaults()
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok && !uuo.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUUID,
		})
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldDeletedAt,
		})
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldDeletedAt,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSalt,
		})
	}
	if value, ok := uuo.mutation.BossUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldBossUserID,
		})
	}
	if value, ok := uuo.mutation.AddedBossUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldBossUserID,
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNickname,
		})
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldStatus,
		})
	}
	if value, ok := uuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldStatus,
		})
	}
	if value, ok := uuo.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldSex,
		})
	}
	if value, ok := uuo.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldSex,
		})
	}
	if value, ok := uuo.mutation.RegFrom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldRegFrom,
		})
	}
	if value, ok := uuo.mutation.AddedRegFrom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldRegFrom,
		})
	}
	if value, ok := uuo.mutation.CardType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldCardType,
		})
	}
	if value, ok := uuo.mutation.AddedCardType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: user.FieldCardType,
		})
	}
	if value, ok := uuo.mutation.IDCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIDCard,
		})
	}
	if value, ok := uuo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldBirthday,
		})
	}
	if uuo.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldBirthday,
		})
	}
	if value, ok := uuo.mutation.SignRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSignRemark,
		})
	}
	if uuo.mutation.SignRemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldSignRemark,
		})
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatar,
		})
	}
	if uuo.mutation.LoginLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoginLogTable,
			Columns: []string{user.LoginLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLoginLogIDs(); len(nodes) > 0 && !uuo.mutation.LoginLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoginLogTable,
			Columns: []string{user.LoginLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LoginLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoginLogTable,
			Columns: []string{user.LoginLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: user.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !uuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: user.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: user.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCoursesTable,
			Columns: []string{user.UserCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcusercourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserCoursesIDs(); len(nodes) > 0 && !uuo.mutation.UserCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCoursesTable,
			Columns: []string{user.UserCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcusercourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCoursesTable,
			Columns: []string{user.UserCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcusercourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserClassesTable,
			Columns: []string{user.UserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserClassesIDs(); len(nodes) > 0 && !uuo.mutation.UserClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserClassesTable,
			Columns: []string{user.UserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserClassesTable,
			Columns: []string{user.UserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserExamsRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserExamsRecordsTable,
			Columns: []string{user.UserExamsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserExamsRecordsIDs(); len(nodes) > 0 && !uuo.mutation.UserExamsRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserExamsRecordsTable,
			Columns: []string{user.UserExamsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserExamsRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserExamsRecordsTable,
			Columns: []string{user.UserExamsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserQuestionBankRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionBankRecordsTable,
			Columns: []string{user.UserQuestionBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserQuestionBankRecordsIDs(); len(nodes) > 0 && !uuo.mutation.UserQuestionBankRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionBankRecordsTable,
			Columns: []string{user.UserQuestionBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserQuestionBankRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionBankRecordsTable,
			Columns: []string{user.UserQuestionBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserQuestionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionRecordsTable,
			Columns: []string{user.UserQuestionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserQuestionRecordsIDs(); len(nodes) > 0 && !uuo.mutation.UserQuestionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionRecordsTable,
			Columns: []string{user.UserQuestionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserQuestionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserQuestionRecordsTable,
			Columns: []string{user.UserQuestionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AskUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AskUsersTable,
			Columns: []string{user.AskUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAskUsersIDs(); len(nodes) > 0 && !uuo.mutation.AskUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AskUsersTable,
			Columns: []string{user.AskUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AskUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AskUsersTable,
			Columns: []string{user.AskUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CourseAppraiseUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CourseAppraiseUsersTable,
			Columns: []string{user.CourseAppraiseUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCourseAppraiseUsersIDs(); len(nodes) > 0 && !uuo.mutation.CourseAppraiseUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CourseAppraiseUsersTable,
			Columns: []string{user.CourseAppraiseUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CourseAppraiseUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CourseAppraiseUsersTable,
			Columns: []string{user.CourseAppraiseUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserVideoRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVideoRecordTable,
			Columns: []string{user.UserVideoRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserVideoRecordIDs(); len(nodes) > 0 && !uuo.mutation.UserVideoRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVideoRecordTable,
			Columns: []string{user.UserVideoRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserVideoRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserVideoRecordTable,
			Columns: []string{user.UserVideoRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CityTable,
			Columns: []string{user.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CityTable,
			Columns: []string{user.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CateTable,
			Columns: []string{user.CateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CateTable,
			Columns: []string{user.CateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

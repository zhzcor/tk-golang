// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkuserquestionbankrecord"
	"tkserver/internal/store/ent/user"

	"entgo.io/ent/dialect/sql"
)

// TkUserQuestionBankRecord is the model entity for the TkUserQuestionBankRecord schema.
type TkUserQuestionBankRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// RecordCount holds the value of the "record_count" field.
	// 刷题总数
	RecordCount int `json:"record_count"`
	// CorrectCount holds the value of the "correct_count" field.
	// 正确题数
	CorrectCount int `json:"correct_count"`
	// WrongCount holds the value of the "wrong_count" field.
	// 错误题数
	WrongCount int `json:"wrong_count"`
	// CorrectRate holds the value of the "correct_rate" field.
	// 正确率
	CorrectRate float64 `json:"correct_rate"`
	// FinishRate holds the value of the "finish_rate" field.
	// 完成率
	FinishRate float64 `json:"finish_rate"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int `json:"user_id"`
	// QuestionBankID holds the value of the "question_bank_id" field.
	// 题库id
	QuestionBankID int `json:"question_bank_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkUserQuestionBankRecordQuery when eager-loading is set.
	Edges TkUserQuestionBankRecordEdges `json:"edges"`
}

// TkUserQuestionBankRecordEdges holds the relations/edges for other nodes in the graph.
type TkUserQuestionBankRecordEdges struct {
	// QuestionBank holds the value of the question_bank edge.
	QuestionBank *TkQuestionBank `json:"question_bank,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionBankOrErr returns the QuestionBank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserQuestionBankRecordEdges) QuestionBankOrErr() (*TkQuestionBank, error) {
	if e.loadedTypes[0] {
		if e.QuestionBank == nil {
			// The edge question_bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestionbank.Label}
		}
		return e.QuestionBank, nil
	}
	return nil, &NotLoadedError{edge: "question_bank"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserQuestionBankRecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkUserQuestionBankRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkuserquestionbankrecord.FieldCorrectRate, tkuserquestionbankrecord.FieldFinishRate:
			values[i] = new(sql.NullFloat64)
		case tkuserquestionbankrecord.FieldID, tkuserquestionbankrecord.FieldRecordCount, tkuserquestionbankrecord.FieldCorrectCount, tkuserquestionbankrecord.FieldWrongCount, tkuserquestionbankrecord.FieldUserID, tkuserquestionbankrecord.FieldQuestionBankID:
			values[i] = new(sql.NullInt64)
		case tkuserquestionbankrecord.FieldUUID:
			values[i] = new(sql.NullString)
		case tkuserquestionbankrecord.FieldCreatedAt, tkuserquestionbankrecord.FieldUpdatedAt, tkuserquestionbankrecord.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkUserQuestionBankRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkUserQuestionBankRecord fields.
func (tuqbr *TkUserQuestionBankRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkuserquestionbankrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tuqbr.ID = int(value.Int64)
		case tkuserquestionbankrecord.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tuqbr.UUID = value.String
			}
		case tkuserquestionbankrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tuqbr.CreatedAt = new(time.Time)
				*tuqbr.CreatedAt = value.Time
			}
		case tkuserquestionbankrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tuqbr.UpdatedAt = new(time.Time)
				*tuqbr.UpdatedAt = value.Time
			}
		case tkuserquestionbankrecord.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tuqbr.DeletedAt = new(time.Time)
				*tuqbr.DeletedAt = value.Time
			}
		case tkuserquestionbankrecord.FieldRecordCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field record_count", values[i])
			} else if value.Valid {
				tuqbr.RecordCount = int(value.Int64)
			}
		case tkuserquestionbankrecord.FieldCorrectCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field correct_count", values[i])
			} else if value.Valid {
				tuqbr.CorrectCount = int(value.Int64)
			}
		case tkuserquestionbankrecord.FieldWrongCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wrong_count", values[i])
			} else if value.Valid {
				tuqbr.WrongCount = int(value.Int64)
			}
		case tkuserquestionbankrecord.FieldCorrectRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field correct_rate", values[i])
			} else if value.Valid {
				tuqbr.CorrectRate = value.Float64
			}
		case tkuserquestionbankrecord.FieldFinishRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field finish_rate", values[i])
			} else if value.Valid {
				tuqbr.FinishRate = value.Float64
			}
		case tkuserquestionbankrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tuqbr.UserID = int(value.Int64)
			}
		case tkuserquestionbankrecord.FieldQuestionBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_bank_id", values[i])
			} else if value.Valid {
				tuqbr.QuestionBankID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestionBank queries the "question_bank" edge of the TkUserQuestionBankRecord entity.
func (tuqbr *TkUserQuestionBankRecord) QueryQuestionBank() *TkQuestionBankQuery {
	return (&TkUserQuestionBankRecordClient{config: tuqbr.config}).QueryQuestionBank(tuqbr)
}

// QueryUser queries the "user" edge of the TkUserQuestionBankRecord entity.
func (tuqbr *TkUserQuestionBankRecord) QueryUser() *UserQuery {
	return (&TkUserQuestionBankRecordClient{config: tuqbr.config}).QueryUser(tuqbr)
}

// Update returns a builder for updating this TkUserQuestionBankRecord.
// Note that you need to call TkUserQuestionBankRecord.Unwrap() before calling this method if this TkUserQuestionBankRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (tuqbr *TkUserQuestionBankRecord) Update() *TkUserQuestionBankRecordUpdateOne {
	return (&TkUserQuestionBankRecordClient{config: tuqbr.config}).UpdateOne(tuqbr)
}

// Unwrap unwraps the TkUserQuestionBankRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tuqbr *TkUserQuestionBankRecord) Unwrap() *TkUserQuestionBankRecord {
	tx, ok := tuqbr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkUserQuestionBankRecord is not a transactional entity")
	}
	tuqbr.config.driver = tx.drv
	return tuqbr
}

// String implements the fmt.Stringer.
func (tuqbr *TkUserQuestionBankRecord) String() string {
	var builder strings.Builder
	builder.WriteString("TkUserQuestionBankRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", tuqbr.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tuqbr.UUID)
	if v := tuqbr.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tuqbr.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tuqbr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", record_count=")
	builder.WriteString(fmt.Sprintf("%v", tuqbr.RecordCount))
	builder.WriteString(", correct_count=")
	builder.WriteString(fmt.Sprintf("%v", tuqbr.CorrectCount))
	builder.WriteString(", wrong_count=")
	builder.WriteString(fmt.Sprintf("%v", tuqbr.WrongCount))
	builder.WriteString(", correct_rate=")
	builder.WriteString(fmt.Sprintf("%v", tuqbr.CorrectRate))
	builder.WriteString(", finish_rate=")
	builder.WriteString(fmt.Sprintf("%v", tuqbr.FinishRate))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", tuqbr.UserID))
	builder.WriteString(", question_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", tuqbr.QuestionBankID))
	builder.WriteByte(')')
	return builder.String()
}

// TkUserQuestionBankRecords is a parsable slice of TkUserQuestionBankRecord.
type TkUserQuestionBankRecords []*TkUserQuestionBankRecord

func (tuqbr TkUserQuestionBankRecords) config(cfg config) {
	for _i := range tuqbr {
		tuqbr[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkquestion"
	"gserver/internal/store/ent/tkuserwrongquestionrecode"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserWrongQuestionRecodeUpdate is the builder for updating TkUserWrongQuestionRecode entities.
type TkUserWrongQuestionRecodeUpdate struct {
	config
	hooks    []Hook
	mutation *TkUserWrongQuestionRecodeMutation
}

// Where adds a new predicate for the TkUserWrongQuestionRecodeUpdate builder.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) Where(ps ...predicate.TkUserWrongQuestionRecode) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.predicates = append(tuwqru.mutation.predicates, ps...)
	return tuwqru
}

// SetUUID sets the "uuid" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetUUID(s string) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.SetUUID(s)
	return tuwqru
}

// SetUpdatedAt sets the "updated_at" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetUpdatedAt(t time.Time) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.SetUpdatedAt(t)
	return tuwqru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) ClearUpdatedAt() *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ClearUpdatedAt()
	return tuwqru
}

// SetDeletedAt sets the "deleted_at" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetDeletedAt(t time.Time) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.SetDeletedAt(t)
	return tuwqru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetNillableDeletedAt(t *time.Time) *TkUserWrongQuestionRecodeUpdate {
	if t != nil {
		tuwqru.SetDeletedAt(*t)
	}
	return tuwqru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) ClearDeletedAt() *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ClearDeletedAt()
	return tuwqru
}

// SetUserID sets the "user_id" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetUserID(i int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ResetUserID()
	tuwqru.mutation.SetUserID(i)
	return tuwqru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetNillableUserID(i *int) *TkUserWrongQuestionRecodeUpdate {
	if i != nil {
		tuwqru.SetUserID(*i)
	}
	return tuwqru
}

// AddUserID adds i to the "user_id" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) AddUserID(i int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.AddUserID(i)
	return tuwqru
}

// ClearUserID clears the value of the "user_id" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) ClearUserID() *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ClearUserID()
	return tuwqru
}

// SetQuestionID sets the "question_id" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetQuestionID(i int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ResetQuestionID()
	tuwqru.mutation.SetQuestionID(i)
	return tuwqru
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetNillableQuestionID(i *int) *TkUserWrongQuestionRecodeUpdate {
	if i != nil {
		tuwqru.SetQuestionID(*i)
	}
	return tuwqru
}

// ClearQuestionID clears the value of the "question_id" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) ClearQuestionID() *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ClearQuestionID()
	return tuwqru
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetQuestionBankID(i int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ResetQuestionBankID()
	tuwqru.mutation.SetQuestionBankID(i)
	return tuwqru
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetNillableQuestionBankID(i *int) *TkUserWrongQuestionRecodeUpdate {
	if i != nil {
		tuwqru.SetQuestionBankID(*i)
	}
	return tuwqru
}

// AddQuestionBankID adds i to the "question_bank_id" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) AddQuestionBankID(i int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.AddQuestionBankID(i)
	return tuwqru
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) ClearQuestionBankID() *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ClearQuestionBankID()
	return tuwqru
}

// SetAnswer sets the "answer" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetAnswer(s string) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.SetAnswer(s)
	return tuwqru
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetNillableAnswer(s *string) *TkUserWrongQuestionRecodeUpdate {
	if s != nil {
		tuwqru.SetAnswer(*s)
	}
	return tuwqru
}

// ClearAnswer clears the value of the "answer" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) ClearAnswer() *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ClearAnswer()
	return tuwqru
}

// SetWrongExamType sets the "wrong_exam_type" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetWrongExamType(i int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ResetWrongExamType()
	tuwqru.mutation.SetWrongExamType(i)
	return tuwqru
}

// SetNillableWrongExamType sets the "wrong_exam_type" field if the given value is not nil.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetNillableWrongExamType(i *int) *TkUserWrongQuestionRecodeUpdate {
	if i != nil {
		tuwqru.SetWrongExamType(*i)
	}
	return tuwqru
}

// AddWrongExamType adds i to the "wrong_exam_type" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) AddWrongExamType(i int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.AddWrongExamType(i)
	return tuwqru
}

// SetWrongQuestionType sets the "wrong_question_type" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetWrongQuestionType(i int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ResetWrongQuestionType()
	tuwqru.mutation.SetWrongQuestionType(i)
	return tuwqru
}

// SetNillableWrongQuestionType sets the "wrong_question_type" field if the given value is not nil.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetNillableWrongQuestionType(i *int) *TkUserWrongQuestionRecodeUpdate {
	if i != nil {
		tuwqru.SetWrongQuestionType(*i)
	}
	return tuwqru
}

// AddWrongQuestionType adds i to the "wrong_question_type" field.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) AddWrongQuestionType(i int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.AddWrongQuestionType(i)
	return tuwqru
}

// SetQuestionWrongID sets the "question_wrong" edge to the TkQuestion entity by ID.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetQuestionWrongID(id int) *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.SetQuestionWrongID(id)
	return tuwqru
}

// SetNillableQuestionWrongID sets the "question_wrong" edge to the TkQuestion entity by ID if the given value is not nil.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetNillableQuestionWrongID(id *int) *TkUserWrongQuestionRecodeUpdate {
	if id != nil {
		tuwqru = tuwqru.SetQuestionWrongID(*id)
	}
	return tuwqru
}

// SetQuestionWrong sets the "question_wrong" edge to the TkQuestion entity.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SetQuestionWrong(t *TkQuestion) *TkUserWrongQuestionRecodeUpdate {
	return tuwqru.SetQuestionWrongID(t.ID)
}

// Mutation returns the TkUserWrongQuestionRecodeMutation object of the builder.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) Mutation() *TkUserWrongQuestionRecodeMutation {
	return tuwqru.mutation
}

// ClearQuestionWrong clears the "question_wrong" edge to the TkQuestion entity.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) ClearQuestionWrong() *TkUserWrongQuestionRecodeUpdate {
	tuwqru.mutation.ClearQuestionWrong()
	return tuwqru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tuwqru.defaults()
	if len(tuwqru.hooks) == 0 {
		affected, err = tuwqru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserWrongQuestionRecodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuwqru.mutation = mutation
			affected, err = tuwqru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tuwqru.hooks) - 1; i >= 0; i-- {
			mut = tuwqru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuwqru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) SaveX(ctx context.Context) int {
	affected, err := tuwqru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) Exec(ctx context.Context) error {
	_, err := tuwqru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) ExecX(ctx context.Context) {
	if err := tuwqru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuwqru *TkUserWrongQuestionRecodeUpdate) defaults() {
	if _, ok := tuwqru.mutation.UpdatedAt(); !ok && !tuwqru.mutation.UpdatedAtCleared() {
		v := tkuserwrongquestionrecode.UpdateDefaultUpdatedAt()
		tuwqru.mutation.SetUpdatedAt(v)
	}
}

func (tuwqru *TkUserWrongQuestionRecodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserwrongquestionrecode.Table,
			Columns: tkuserwrongquestionrecode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserwrongquestionrecode.FieldID,
			},
		},
	}
	if ps := tuwqru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuwqru.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldUUID,
		})
	}
	if tuwqru.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserwrongquestionrecode.FieldCreatedAt,
		})
	}
	if value, ok := tuwqru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldUpdatedAt,
		})
	}
	if tuwqru.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserwrongquestionrecode.FieldUpdatedAt,
		})
	}
	if value, ok := tuwqru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldDeletedAt,
		})
	}
	if tuwqru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserwrongquestionrecode.FieldDeletedAt,
		})
	}
	if value, ok := tuwqru.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldUserID,
		})
	}
	if value, ok := tuwqru.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldUserID,
		})
	}
	if tuwqru.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tkuserwrongquestionrecode.FieldUserID,
		})
	}
	if value, ok := tuwqru.mutation.QuestionBankID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldQuestionBankID,
		})
	}
	if value, ok := tuwqru.mutation.AddedQuestionBankID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldQuestionBankID,
		})
	}
	if tuwqru.mutation.QuestionBankIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tkuserwrongquestionrecode.FieldQuestionBankID,
		})
	}
	if value, ok := tuwqru.mutation.Answer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldAnswer,
		})
	}
	if tuwqru.mutation.AnswerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tkuserwrongquestionrecode.FieldAnswer,
		})
	}
	if value, ok := tuwqru.mutation.WrongExamType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldWrongExamType,
		})
	}
	if value, ok := tuwqru.mutation.AddedWrongExamType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldWrongExamType,
		})
	}
	if value, ok := tuwqru.mutation.WrongQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldWrongQuestionType,
		})
	}
	if value, ok := tuwqru.mutation.AddedWrongQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldWrongQuestionType,
		})
	}
	if tuwqru.mutation.QuestionWrongCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserwrongquestionrecode.QuestionWrongTable,
			Columns: []string{tkuserwrongquestionrecode.QuestionWrongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuwqru.mutation.QuestionWrongIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserwrongquestionrecode.QuestionWrongTable,
			Columns: []string{tkuserwrongquestionrecode.QuestionWrongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tuwqru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserwrongquestionrecode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkUserWrongQuestionRecodeUpdateOne is the builder for updating a single TkUserWrongQuestionRecode entity.
type TkUserWrongQuestionRecodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkUserWrongQuestionRecodeMutation
}

// SetUUID sets the "uuid" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetUUID(s string) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.SetUUID(s)
	return tuwqruo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetUpdatedAt(t time.Time) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.SetUpdatedAt(t)
	return tuwqruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) ClearUpdatedAt() *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ClearUpdatedAt()
	return tuwqruo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetDeletedAt(t time.Time) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.SetDeletedAt(t)
	return tuwqruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetNillableDeletedAt(t *time.Time) *TkUserWrongQuestionRecodeUpdateOne {
	if t != nil {
		tuwqruo.SetDeletedAt(*t)
	}
	return tuwqruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) ClearDeletedAt() *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ClearDeletedAt()
	return tuwqruo
}

// SetUserID sets the "user_id" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetUserID(i int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ResetUserID()
	tuwqruo.mutation.SetUserID(i)
	return tuwqruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetNillableUserID(i *int) *TkUserWrongQuestionRecodeUpdateOne {
	if i != nil {
		tuwqruo.SetUserID(*i)
	}
	return tuwqruo
}

// AddUserID adds i to the "user_id" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) AddUserID(i int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.AddUserID(i)
	return tuwqruo
}

// ClearUserID clears the value of the "user_id" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) ClearUserID() *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ClearUserID()
	return tuwqruo
}

// SetQuestionID sets the "question_id" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetQuestionID(i int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ResetQuestionID()
	tuwqruo.mutation.SetQuestionID(i)
	return tuwqruo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetNillableQuestionID(i *int) *TkUserWrongQuestionRecodeUpdateOne {
	if i != nil {
		tuwqruo.SetQuestionID(*i)
	}
	return tuwqruo
}

// ClearQuestionID clears the value of the "question_id" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) ClearQuestionID() *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ClearQuestionID()
	return tuwqruo
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetQuestionBankID(i int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ResetQuestionBankID()
	tuwqruo.mutation.SetQuestionBankID(i)
	return tuwqruo
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetNillableQuestionBankID(i *int) *TkUserWrongQuestionRecodeUpdateOne {
	if i != nil {
		tuwqruo.SetQuestionBankID(*i)
	}
	return tuwqruo
}

// AddQuestionBankID adds i to the "question_bank_id" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) AddQuestionBankID(i int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.AddQuestionBankID(i)
	return tuwqruo
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) ClearQuestionBankID() *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ClearQuestionBankID()
	return tuwqruo
}

// SetAnswer sets the "answer" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetAnswer(s string) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.SetAnswer(s)
	return tuwqruo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetNillableAnswer(s *string) *TkUserWrongQuestionRecodeUpdateOne {
	if s != nil {
		tuwqruo.SetAnswer(*s)
	}
	return tuwqruo
}

// ClearAnswer clears the value of the "answer" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) ClearAnswer() *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ClearAnswer()
	return tuwqruo
}

// SetWrongExamType sets the "wrong_exam_type" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetWrongExamType(i int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ResetWrongExamType()
	tuwqruo.mutation.SetWrongExamType(i)
	return tuwqruo
}

// SetNillableWrongExamType sets the "wrong_exam_type" field if the given value is not nil.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetNillableWrongExamType(i *int) *TkUserWrongQuestionRecodeUpdateOne {
	if i != nil {
		tuwqruo.SetWrongExamType(*i)
	}
	return tuwqruo
}

// AddWrongExamType adds i to the "wrong_exam_type" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) AddWrongExamType(i int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.AddWrongExamType(i)
	return tuwqruo
}

// SetWrongQuestionType sets the "wrong_question_type" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetWrongQuestionType(i int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ResetWrongQuestionType()
	tuwqruo.mutation.SetWrongQuestionType(i)
	return tuwqruo
}

// SetNillableWrongQuestionType sets the "wrong_question_type" field if the given value is not nil.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetNillableWrongQuestionType(i *int) *TkUserWrongQuestionRecodeUpdateOne {
	if i != nil {
		tuwqruo.SetWrongQuestionType(*i)
	}
	return tuwqruo
}

// AddWrongQuestionType adds i to the "wrong_question_type" field.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) AddWrongQuestionType(i int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.AddWrongQuestionType(i)
	return tuwqruo
}

// SetQuestionWrongID sets the "question_wrong" edge to the TkQuestion entity by ID.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetQuestionWrongID(id int) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.SetQuestionWrongID(id)
	return tuwqruo
}

// SetNillableQuestionWrongID sets the "question_wrong" edge to the TkQuestion entity by ID if the given value is not nil.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetNillableQuestionWrongID(id *int) *TkUserWrongQuestionRecodeUpdateOne {
	if id != nil {
		tuwqruo = tuwqruo.SetQuestionWrongID(*id)
	}
	return tuwqruo
}

// SetQuestionWrong sets the "question_wrong" edge to the TkQuestion entity.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SetQuestionWrong(t *TkQuestion) *TkUserWrongQuestionRecodeUpdateOne {
	return tuwqruo.SetQuestionWrongID(t.ID)
}

// Mutation returns the TkUserWrongQuestionRecodeMutation object of the builder.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) Mutation() *TkUserWrongQuestionRecodeMutation {
	return tuwqruo.mutation
}

// ClearQuestionWrong clears the "question_wrong" edge to the TkQuestion entity.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) ClearQuestionWrong() *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.mutation.ClearQuestionWrong()
	return tuwqruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) Select(field string, fields ...string) *TkUserWrongQuestionRecodeUpdateOne {
	tuwqruo.fields = append([]string{field}, fields...)
	return tuwqruo
}

// Save executes the query and returns the updated TkUserWrongQuestionRecode entity.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) Save(ctx context.Context) (*TkUserWrongQuestionRecode, error) {
	var (
		err  error
		node *TkUserWrongQuestionRecode
	)
	tuwqruo.defaults()
	if len(tuwqruo.hooks) == 0 {
		node, err = tuwqruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserWrongQuestionRecodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuwqruo.mutation = mutation
			node, err = tuwqruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuwqruo.hooks) - 1; i >= 0; i-- {
			mut = tuwqruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuwqruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) SaveX(ctx context.Context) *TkUserWrongQuestionRecode {
	node, err := tuwqruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) Exec(ctx context.Context) error {
	_, err := tuwqruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) ExecX(ctx context.Context) {
	if err := tuwqruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) defaults() {
	if _, ok := tuwqruo.mutation.UpdatedAt(); !ok && !tuwqruo.mutation.UpdatedAtCleared() {
		v := tkuserwrongquestionrecode.UpdateDefaultUpdatedAt()
		tuwqruo.mutation.SetUpdatedAt(v)
	}
}

func (tuwqruo *TkUserWrongQuestionRecodeUpdateOne) sqlSave(ctx context.Context) (_node *TkUserWrongQuestionRecode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserwrongquestionrecode.Table,
			Columns: tkuserwrongquestionrecode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserwrongquestionrecode.FieldID,
			},
		},
	}
	id, ok := tuwqruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkUserWrongQuestionRecode.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuwqruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkuserwrongquestionrecode.FieldID)
		for _, f := range fields {
			if !tkuserwrongquestionrecode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkuserwrongquestionrecode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuwqruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuwqruo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldUUID,
		})
	}
	if tuwqruo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserwrongquestionrecode.FieldCreatedAt,
		})
	}
	if value, ok := tuwqruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldUpdatedAt,
		})
	}
	if tuwqruo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserwrongquestionrecode.FieldUpdatedAt,
		})
	}
	if value, ok := tuwqruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldDeletedAt,
		})
	}
	if tuwqruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserwrongquestionrecode.FieldDeletedAt,
		})
	}
	if value, ok := tuwqruo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldUserID,
		})
	}
	if value, ok := tuwqruo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldUserID,
		})
	}
	if tuwqruo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tkuserwrongquestionrecode.FieldUserID,
		})
	}
	if value, ok := tuwqruo.mutation.QuestionBankID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldQuestionBankID,
		})
	}
	if value, ok := tuwqruo.mutation.AddedQuestionBankID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldQuestionBankID,
		})
	}
	if tuwqruo.mutation.QuestionBankIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tkuserwrongquestionrecode.FieldQuestionBankID,
		})
	}
	if value, ok := tuwqruo.mutation.Answer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldAnswer,
		})
	}
	if tuwqruo.mutation.AnswerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tkuserwrongquestionrecode.FieldAnswer,
		})
	}
	if value, ok := tuwqruo.mutation.WrongExamType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldWrongExamType,
		})
	}
	if value, ok := tuwqruo.mutation.AddedWrongExamType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldWrongExamType,
		})
	}
	if value, ok := tuwqruo.mutation.WrongQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldWrongQuestionType,
		})
	}
	if value, ok := tuwqruo.mutation.AddedWrongQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserwrongquestionrecode.FieldWrongQuestionType,
		})
	}
	if tuwqruo.mutation.QuestionWrongCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserwrongquestionrecode.QuestionWrongTable,
			Columns: []string{tkuserwrongquestionrecode.QuestionWrongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuwqruo.mutation.QuestionWrongIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserwrongquestionrecode.QuestionWrongTable,
			Columns: []string{tkuserwrongquestionrecode.QuestionWrongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkUserWrongQuestionRecode{config: tuwqruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuwqruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserwrongquestionrecode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

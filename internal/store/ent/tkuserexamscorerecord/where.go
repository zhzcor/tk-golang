// Code generated by entc, DO NOT EDIT.

package tkuserexamscorerecord

import (
	"time"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// SubjectiveQuestionScore applies equality check predicate on the "subjective_question_score" field. It's identical to SubjectiveQuestionScoreEQ.
func SubjectiveQuestionScore(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectiveQuestionScore), v))
	})
}

// ObjectiveQuestionScore applies equality check predicate on the "objective_question_score" field. It's identical to ObjectiveQuestionScoreEQ.
func ObjectiveQuestionScore(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectiveQuestionScore), v))
	})
}

// TotalScore applies equality check predicate on the "total_score" field. It's identical to TotalScoreEQ.
func TotalScore(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalScore), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// RightCount applies equality check predicate on the "right_count" field. It's identical to RightCountEQ.
func RightCount(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightCount), v))
	})
}

// WrongCount applies equality check predicate on the "wrong_count" field. It's identical to WrongCountEQ.
func WrongCount(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWrongCount), v))
	})
}

// TotalCount applies equality check predicate on the "total_count" field. It's identical to TotalCountEQ.
func TotalCount(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalCount), v))
	})
}

// NoAnswerCount applies equality check predicate on the "no_answer_count" field. It's identical to NoAnswerCountEQ.
func NoAnswerCount(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoAnswerCount), v))
	})
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// OrderStatus applies equality check predicate on the "order_status" field. It's identical to OrderStatusEQ.
func OrderStatus(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderStatus), v))
	})
}

// ExamPaperID applies equality check predicate on the "exam_paper_id" field. It's identical to ExamPaperIDEQ.
func ExamPaperID(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamPaperID), v))
	})
}

// SectionID applies equality check predicate on the "section_id" field. It's identical to SectionIDEQ.
func SectionID(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSectionID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// OperationTeacherID applies equality check predicate on the "operation_teacher_id" field. It's identical to OperationTeacherIDEQ.
func OperationTeacherID(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperationTeacherID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// SubjectiveQuestionScoreEQ applies the EQ predicate on the "subjective_question_score" field.
func SubjectiveQuestionScoreEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectiveQuestionScore), v))
	})
}

// SubjectiveQuestionScoreNEQ applies the NEQ predicate on the "subjective_question_score" field.
func SubjectiveQuestionScoreNEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubjectiveQuestionScore), v))
	})
}

// SubjectiveQuestionScoreIn applies the In predicate on the "subjective_question_score" field.
func SubjectiveQuestionScoreIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubjectiveQuestionScore), v...))
	})
}

// SubjectiveQuestionScoreNotIn applies the NotIn predicate on the "subjective_question_score" field.
func SubjectiveQuestionScoreNotIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubjectiveQuestionScore), v...))
	})
}

// SubjectiveQuestionScoreGT applies the GT predicate on the "subjective_question_score" field.
func SubjectiveQuestionScoreGT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubjectiveQuestionScore), v))
	})
}

// SubjectiveQuestionScoreGTE applies the GTE predicate on the "subjective_question_score" field.
func SubjectiveQuestionScoreGTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubjectiveQuestionScore), v))
	})
}

// SubjectiveQuestionScoreLT applies the LT predicate on the "subjective_question_score" field.
func SubjectiveQuestionScoreLT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubjectiveQuestionScore), v))
	})
}

// SubjectiveQuestionScoreLTE applies the LTE predicate on the "subjective_question_score" field.
func SubjectiveQuestionScoreLTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubjectiveQuestionScore), v))
	})
}

// ObjectiveQuestionScoreEQ applies the EQ predicate on the "objective_question_score" field.
func ObjectiveQuestionScoreEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectiveQuestionScore), v))
	})
}

// ObjectiveQuestionScoreNEQ applies the NEQ predicate on the "objective_question_score" field.
func ObjectiveQuestionScoreNEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObjectiveQuestionScore), v))
	})
}

// ObjectiveQuestionScoreIn applies the In predicate on the "objective_question_score" field.
func ObjectiveQuestionScoreIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldObjectiveQuestionScore), v...))
	})
}

// ObjectiveQuestionScoreNotIn applies the NotIn predicate on the "objective_question_score" field.
func ObjectiveQuestionScoreNotIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldObjectiveQuestionScore), v...))
	})
}

// ObjectiveQuestionScoreGT applies the GT predicate on the "objective_question_score" field.
func ObjectiveQuestionScoreGT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObjectiveQuestionScore), v))
	})
}

// ObjectiveQuestionScoreGTE applies the GTE predicate on the "objective_question_score" field.
func ObjectiveQuestionScoreGTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObjectiveQuestionScore), v))
	})
}

// ObjectiveQuestionScoreLT applies the LT predicate on the "objective_question_score" field.
func ObjectiveQuestionScoreLT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObjectiveQuestionScore), v))
	})
}

// ObjectiveQuestionScoreLTE applies the LTE predicate on the "objective_question_score" field.
func ObjectiveQuestionScoreLTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObjectiveQuestionScore), v))
	})
}

// TotalScoreEQ applies the EQ predicate on the "total_score" field.
func TotalScoreEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalScore), v))
	})
}

// TotalScoreNEQ applies the NEQ predicate on the "total_score" field.
func TotalScoreNEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalScore), v))
	})
}

// TotalScoreIn applies the In predicate on the "total_score" field.
func TotalScoreIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalScore), v...))
	})
}

// TotalScoreNotIn applies the NotIn predicate on the "total_score" field.
func TotalScoreNotIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalScore), v...))
	})
}

// TotalScoreGT applies the GT predicate on the "total_score" field.
func TotalScoreGT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalScore), v))
	})
}

// TotalScoreGTE applies the GTE predicate on the "total_score" field.
func TotalScoreGTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalScore), v))
	})
}

// TotalScoreLT applies the LT predicate on the "total_score" field.
func TotalScoreLT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalScore), v))
	})
}

// TotalScoreLTE applies the LTE predicate on the "total_score" field.
func TotalScoreLTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalScore), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// RightCountEQ applies the EQ predicate on the "right_count" field.
func RightCountEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightCount), v))
	})
}

// RightCountNEQ applies the NEQ predicate on the "right_count" field.
func RightCountNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRightCount), v))
	})
}

// RightCountIn applies the In predicate on the "right_count" field.
func RightCountIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRightCount), v...))
	})
}

// RightCountNotIn applies the NotIn predicate on the "right_count" field.
func RightCountNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRightCount), v...))
	})
}

// RightCountGT applies the GT predicate on the "right_count" field.
func RightCountGT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRightCount), v))
	})
}

// RightCountGTE applies the GTE predicate on the "right_count" field.
func RightCountGTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRightCount), v))
	})
}

// RightCountLT applies the LT predicate on the "right_count" field.
func RightCountLT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRightCount), v))
	})
}

// RightCountLTE applies the LTE predicate on the "right_count" field.
func RightCountLTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRightCount), v))
	})
}

// WrongCountEQ applies the EQ predicate on the "wrong_count" field.
func WrongCountEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWrongCount), v))
	})
}

// WrongCountNEQ applies the NEQ predicate on the "wrong_count" field.
func WrongCountNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWrongCount), v))
	})
}

// WrongCountIn applies the In predicate on the "wrong_count" field.
func WrongCountIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWrongCount), v...))
	})
}

// WrongCountNotIn applies the NotIn predicate on the "wrong_count" field.
func WrongCountNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWrongCount), v...))
	})
}

// WrongCountGT applies the GT predicate on the "wrong_count" field.
func WrongCountGT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWrongCount), v))
	})
}

// WrongCountGTE applies the GTE predicate on the "wrong_count" field.
func WrongCountGTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWrongCount), v))
	})
}

// WrongCountLT applies the LT predicate on the "wrong_count" field.
func WrongCountLT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWrongCount), v))
	})
}

// WrongCountLTE applies the LTE predicate on the "wrong_count" field.
func WrongCountLTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWrongCount), v))
	})
}

// TotalCountEQ applies the EQ predicate on the "total_count" field.
func TotalCountEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalCount), v))
	})
}

// TotalCountNEQ applies the NEQ predicate on the "total_count" field.
func TotalCountNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalCount), v))
	})
}

// TotalCountIn applies the In predicate on the "total_count" field.
func TotalCountIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalCount), v...))
	})
}

// TotalCountNotIn applies the NotIn predicate on the "total_count" field.
func TotalCountNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalCount), v...))
	})
}

// TotalCountGT applies the GT predicate on the "total_count" field.
func TotalCountGT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalCount), v))
	})
}

// TotalCountGTE applies the GTE predicate on the "total_count" field.
func TotalCountGTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalCount), v))
	})
}

// TotalCountLT applies the LT predicate on the "total_count" field.
func TotalCountLT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalCount), v))
	})
}

// TotalCountLTE applies the LTE predicate on the "total_count" field.
func TotalCountLTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalCount), v))
	})
}

// NoAnswerCountEQ applies the EQ predicate on the "no_answer_count" field.
func NoAnswerCountEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoAnswerCount), v))
	})
}

// NoAnswerCountNEQ applies the NEQ predicate on the "no_answer_count" field.
func NoAnswerCountNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoAnswerCount), v))
	})
}

// NoAnswerCountIn applies the In predicate on the "no_answer_count" field.
func NoAnswerCountIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoAnswerCount), v...))
	})
}

// NoAnswerCountNotIn applies the NotIn predicate on the "no_answer_count" field.
func NoAnswerCountNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoAnswerCount), v...))
	})
}

// NoAnswerCountGT applies the GT predicate on the "no_answer_count" field.
func NoAnswerCountGT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoAnswerCount), v))
	})
}

// NoAnswerCountGTE applies the GTE predicate on the "no_answer_count" field.
func NoAnswerCountGTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoAnswerCount), v))
	})
}

// NoAnswerCountLT applies the LT predicate on the "no_answer_count" field.
func NoAnswerCountLT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoAnswerCount), v))
	})
}

// NoAnswerCountLTE applies the LTE predicate on the "no_answer_count" field.
func NoAnswerCountLTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoAnswerCount), v))
	})
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRank), v))
	})
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRank), v...))
	})
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRank), v...))
	})
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRank), v))
	})
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRank), v))
	})
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRank), v))
	})
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRank), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// OrderStatusEQ applies the EQ predicate on the "order_status" field.
func OrderStatusEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusNEQ applies the NEQ predicate on the "order_status" field.
func OrderStatusNEQ(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusIn applies the In predicate on the "order_status" field.
func OrderStatusIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderStatus), v...))
	})
}

// OrderStatusNotIn applies the NotIn predicate on the "order_status" field.
func OrderStatusNotIn(vs ...uint8) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderStatus), v...))
	})
}

// OrderStatusGT applies the GT predicate on the "order_status" field.
func OrderStatusGT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusGTE applies the GTE predicate on the "order_status" field.
func OrderStatusGTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusLT applies the LT predicate on the "order_status" field.
func OrderStatusLT(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusLTE applies the LTE predicate on the "order_status" field.
func OrderStatusLTE(v uint8) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderStatus), v))
	})
}

// ExamPaperIDEQ applies the EQ predicate on the "exam_paper_id" field.
func ExamPaperIDEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamPaperID), v))
	})
}

// ExamPaperIDNEQ applies the NEQ predicate on the "exam_paper_id" field.
func ExamPaperIDNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExamPaperID), v))
	})
}

// ExamPaperIDIn applies the In predicate on the "exam_paper_id" field.
func ExamPaperIDIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExamPaperID), v...))
	})
}

// ExamPaperIDNotIn applies the NotIn predicate on the "exam_paper_id" field.
func ExamPaperIDNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExamPaperID), v...))
	})
}

// ExamPaperIDIsNil applies the IsNil predicate on the "exam_paper_id" field.
func ExamPaperIDIsNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExamPaperID)))
	})
}

// ExamPaperIDNotNil applies the NotNil predicate on the "exam_paper_id" field.
func ExamPaperIDNotNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExamPaperID)))
	})
}

// SectionIDEQ applies the EQ predicate on the "section_id" field.
func SectionIDEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSectionID), v))
	})
}

// SectionIDNEQ applies the NEQ predicate on the "section_id" field.
func SectionIDNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSectionID), v))
	})
}

// SectionIDIn applies the In predicate on the "section_id" field.
func SectionIDIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSectionID), v...))
	})
}

// SectionIDNotIn applies the NotIn predicate on the "section_id" field.
func SectionIDNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSectionID), v...))
	})
}

// SectionIDIsNil applies the IsNil predicate on the "section_id" field.
func SectionIDIsNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSectionID)))
	})
}

// SectionIDNotNil applies the NotNil predicate on the "section_id" field.
func SectionIDNotNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSectionID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// OperationTeacherIDEQ applies the EQ predicate on the "operation_teacher_id" field.
func OperationTeacherIDEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperationTeacherID), v))
	})
}

// OperationTeacherIDNEQ applies the NEQ predicate on the "operation_teacher_id" field.
func OperationTeacherIDNEQ(v int) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperationTeacherID), v))
	})
}

// OperationTeacherIDIn applies the In predicate on the "operation_teacher_id" field.
func OperationTeacherIDIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperationTeacherID), v...))
	})
}

// OperationTeacherIDNotIn applies the NotIn predicate on the "operation_teacher_id" field.
func OperationTeacherIDNotIn(vs ...int) predicate.TkUserExamScoreRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperationTeacherID), v...))
	})
}

// OperationTeacherIDIsNil applies the IsNil predicate on the "operation_teacher_id" field.
func OperationTeacherIDIsNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperationTeacherID)))
	})
}

// OperationTeacherIDNotNil applies the NotNil predicate on the "operation_teacher_id" field.
func OperationTeacherIDNotNil() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperationTeacherID)))
	})
}

// HasExamPaper applies the HasEdge predicate on the "exam_paper" edge.
func HasExamPaper() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPaperTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamPaperTable, ExamPaperColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamPaperWith applies the HasEdge predicate on the "exam_paper" edge with a given conditions (other predicates).
func HasExamPaperWith(preds ...predicate.TkExamPaper) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPaperInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamPaperTable, ExamPaperColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSection applies the HasEdge predicate on the "section" edge.
func HasSection() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SectionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SectionTable, SectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSectionWith applies the HasEdge predicate on the "section" edge with a given conditions (other predicates).
func HasSectionWith(preds ...predicate.TkSection) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SectionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SectionTable, SectionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeacher applies the HasEdge predicate on the "teacher" edge.
func HasTeacher() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeacherWith applies the HasEdge predicate on the "teacher" edge with a given conditions (other predicates).
func HasTeacherWith(preds ...predicate.Teacher) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserExamDetails applies the HasEdge predicate on the "user_exam_details" edge.
func HasUserExamDetails() predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserExamDetailsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserExamDetailsTable, UserExamDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserExamDetailsWith applies the HasEdge predicate on the "user_exam_details" edge with a given conditions (other predicates).
func HasUserExamDetailsWith(preds ...predicate.TkUserSimulationTeacherMark) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserExamDetailsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserExamDetailsTable, UserExamDetailsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TkUserExamScoreRecord) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TkUserExamScoreRecord) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TkUserExamScoreRecord) predicate.TkUserExamScoreRecord {
	return predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}

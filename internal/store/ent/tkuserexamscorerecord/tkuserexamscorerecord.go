// Code generated by entc, DO NOT EDIT.

package tkuserexamscorerecord

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the tkuserexamscorerecord type in the database.
	Label = "tk_user_exam_score_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldSubjectiveQuestionScore holds the string denoting the subjective_question_score field in the database.
	FieldSubjectiveQuestionScore = "subjective_question_score"
	// FieldObjectiveQuestionScore holds the string denoting the objective_question_score field in the database.
	FieldObjectiveQuestionScore = "objective_question_score"
	// FieldTotalScore holds the string denoting the total_score field in the database.
	FieldTotalScore = "total_score"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldRightCount holds the string denoting the right_count field in the database.
	FieldRightCount = "right_count"
	// FieldWrongCount holds the string denoting the wrong_count field in the database.
	FieldWrongCount = "wrong_count"
	// FieldTotalCount holds the string denoting the total_count field in the database.
	FieldTotalCount = "total_count"
	// FieldNoAnswerCount holds the string denoting the no_answer_count field in the database.
	FieldNoAnswerCount = "no_answer_count"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOrderStatus holds the string denoting the order_status field in the database.
	FieldOrderStatus = "order_status"
	// FieldExamPaperID holds the string denoting the exam_paper_id field in the database.
	FieldExamPaperID = "exam_paper_id"
	// FieldSectionID holds the string denoting the section_id field in the database.
	FieldSectionID = "section_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOperationTeacherID holds the string denoting the operation_teacher_id field in the database.
	FieldOperationTeacherID = "operation_teacher_id"
	// EdgeExamPaper holds the string denoting the exam_paper edge name in mutations.
	EdgeExamPaper = "exam_paper"
	// EdgeSection holds the string denoting the section edge name in mutations.
	EdgeSection = "section"
	// EdgeTeacher holds the string denoting the teacher edge name in mutations.
	EdgeTeacher = "teacher"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeUserExamDetails holds the string denoting the user_exam_details edge name in mutations.
	EdgeUserExamDetails = "user_exam_details"
	// Table holds the table name of the tkuserexamscorerecord in the database.
	Table = "tk_user_exam_score_records"
	// ExamPaperTable is the table the holds the exam_paper relation/edge.
	ExamPaperTable = "tk_user_exam_score_records"
	// ExamPaperInverseTable is the table name for the TkExamPaper entity.
	// It exists in this package in order to avoid circular dependency with the "tkexampaper" package.
	ExamPaperInverseTable = "tk_exam_papers"
	// ExamPaperColumn is the table column denoting the exam_paper relation/edge.
	ExamPaperColumn = "exam_paper_id"
	// SectionTable is the table the holds the section relation/edge.
	SectionTable = "tk_user_exam_score_records"
	// SectionInverseTable is the table name for the TkSection entity.
	// It exists in this package in order to avoid circular dependency with the "tksection" package.
	SectionInverseTable = "tk_sections"
	// SectionColumn is the table column denoting the section relation/edge.
	SectionColumn = "section_id"
	// TeacherTable is the table the holds the teacher relation/edge.
	TeacherTable = "tk_user_exam_score_records"
	// TeacherInverseTable is the table name for the Teacher entity.
	// It exists in this package in order to avoid circular dependency with the "teacher" package.
	TeacherInverseTable = "teachers"
	// TeacherColumn is the table column denoting the teacher relation/edge.
	TeacherColumn = "operation_teacher_id"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "tk_user_exam_score_records"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// UserExamDetailsTable is the table the holds the user_exam_details relation/edge.
	UserExamDetailsTable = "tk_user_simulation_teacher_marks"
	// UserExamDetailsInverseTable is the table name for the TkUserSimulationTeacherMark entity.
	// It exists in this package in order to avoid circular dependency with the "tkusersimulationteachermark" package.
	UserExamDetailsInverseTable = "tk_user_simulation_teacher_marks"
	// UserExamDetailsColumn is the table column denoting the user_exam_details relation/edge.
	UserExamDetailsColumn = "user_exam_record_id"
)

// Columns holds all SQL columns for tkuserexamscorerecord fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldSubjectiveQuestionScore,
	FieldObjectiveQuestionScore,
	FieldTotalScore,
	FieldDuration,
	FieldRightCount,
	FieldWrongCount,
	FieldTotalCount,
	FieldNoAnswerCount,
	FieldRank,
	FieldStatus,
	FieldOrderStatus,
	FieldExamPaperID,
	FieldSectionID,
	FieldUserID,
	FieldOperationTeacherID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "gserver/internal/store/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSubjectiveQuestionScore holds the default value on creation for the "subjective_question_score" field.
	DefaultSubjectiveQuestionScore uint8
	// DefaultObjectiveQuestionScore holds the default value on creation for the "objective_question_score" field.
	DefaultObjectiveQuestionScore uint8
	// DefaultTotalScore holds the default value on creation for the "total_score" field.
	DefaultTotalScore uint8
	// DefaultDuration holds the default value on creation for the "duration" field.
	DefaultDuration int
	// DefaultRightCount holds the default value on creation for the "right_count" field.
	DefaultRightCount int
	// DefaultWrongCount holds the default value on creation for the "wrong_count" field.
	DefaultWrongCount int
	// DefaultTotalCount holds the default value on creation for the "total_count" field.
	DefaultTotalCount int
	// DefaultNoAnswerCount holds the default value on creation for the "no_answer_count" field.
	DefaultNoAnswerCount int
	// DefaultRank holds the default value on creation for the "rank" field.
	DefaultRank int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultOrderStatus holds the default value on creation for the "order_status" field.
	DefaultOrderStatus uint8
)

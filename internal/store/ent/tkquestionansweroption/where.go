// Code generated by entc, DO NOT EDIT.

package tkquestionansweroption

import (
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// OptionName applies equality check predicate on the "option_name" field. It's identical to OptionNameEQ.
func OptionName(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOptionName), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// IsRight applies equality check predicate on the "is_right" field. It's identical to IsRightEQ.
func IsRight(v uint8) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRight), v))
	})
}

// QuestionID applies equality check predicate on the "question_id" field. It's identical to QuestionIDEQ.
func QuestionID(v int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// OptionNameEQ applies the EQ predicate on the "option_name" field.
func OptionNameEQ(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOptionName), v))
	})
}

// OptionNameNEQ applies the NEQ predicate on the "option_name" field.
func OptionNameNEQ(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOptionName), v))
	})
}

// OptionNameIn applies the In predicate on the "option_name" field.
func OptionNameIn(vs ...string) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOptionName), v...))
	})
}

// OptionNameNotIn applies the NotIn predicate on the "option_name" field.
func OptionNameNotIn(vs ...string) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOptionName), v...))
	})
}

// OptionNameGT applies the GT predicate on the "option_name" field.
func OptionNameGT(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOptionName), v))
	})
}

// OptionNameGTE applies the GTE predicate on the "option_name" field.
func OptionNameGTE(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOptionName), v))
	})
}

// OptionNameLT applies the LT predicate on the "option_name" field.
func OptionNameLT(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOptionName), v))
	})
}

// OptionNameLTE applies the LTE predicate on the "option_name" field.
func OptionNameLTE(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOptionName), v))
	})
}

// OptionNameContains applies the Contains predicate on the "option_name" field.
func OptionNameContains(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOptionName), v))
	})
}

// OptionNameHasPrefix applies the HasPrefix predicate on the "option_name" field.
func OptionNameHasPrefix(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOptionName), v))
	})
}

// OptionNameHasSuffix applies the HasSuffix predicate on the "option_name" field.
func OptionNameHasSuffix(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOptionName), v))
	})
}

// OptionNameEqualFold applies the EqualFold predicate on the "option_name" field.
func OptionNameEqualFold(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOptionName), v))
	})
}

// OptionNameContainsFold applies the ContainsFold predicate on the "option_name" field.
func OptionNameContainsFold(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOptionName), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// IsRightEQ applies the EQ predicate on the "is_right" field.
func IsRightEQ(v uint8) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRight), v))
	})
}

// IsRightNEQ applies the NEQ predicate on the "is_right" field.
func IsRightNEQ(v uint8) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsRight), v))
	})
}

// IsRightIn applies the In predicate on the "is_right" field.
func IsRightIn(vs ...uint8) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsRight), v...))
	})
}

// IsRightNotIn applies the NotIn predicate on the "is_right" field.
func IsRightNotIn(vs ...uint8) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsRight), v...))
	})
}

// IsRightGT applies the GT predicate on the "is_right" field.
func IsRightGT(v uint8) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsRight), v))
	})
}

// IsRightGTE applies the GTE predicate on the "is_right" field.
func IsRightGTE(v uint8) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsRight), v))
	})
}

// IsRightLT applies the LT predicate on the "is_right" field.
func IsRightLT(v uint8) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsRight), v))
	})
}

// IsRightLTE applies the LTE predicate on the "is_right" field.
func IsRightLTE(v uint8) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsRight), v))
	})
}

// QuestionIDEQ applies the EQ predicate on the "question_id" field.
func QuestionIDEQ(v int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionID), v))
	})
}

// QuestionIDNEQ applies the NEQ predicate on the "question_id" field.
func QuestionIDNEQ(v int) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionID), v))
	})
}

// QuestionIDIn applies the In predicate on the "question_id" field.
func QuestionIDIn(vs ...int) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionID), v...))
	})
}

// QuestionIDNotIn applies the NotIn predicate on the "question_id" field.
func QuestionIDNotIn(vs ...int) predicate.TkQuestionAnswerOption {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionID), v...))
	})
}

// QuestionIDIsNil applies the IsNil predicate on the "question_id" field.
func QuestionIDIsNil() predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuestionID)))
	})
}

// QuestionIDNotNil applies the NotNil predicate on the "question_id" field.
func QuestionIDNotNil() predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuestionID)))
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.TkQuestion) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TkQuestionAnswerOption) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TkQuestionAnswerOption) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TkQuestionAnswerOption) predicate.TkQuestionAnswerOption {
	return predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
		p(s.Not())
	})
}

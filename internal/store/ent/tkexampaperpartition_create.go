// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkexampaperpartition"
	"tkserver/internal/store/ent/tkexampaperpartitionscore"
	"tkserver/internal/store/ent/tkexampartitionquestionlink"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperPartitionCreate is the builder for creating a TkExamPaperPartition entity.
type TkExamPaperPartitionCreate struct {
	config
	mutation *TkExamPaperPartitionMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (teppc *TkExamPaperPartitionCreate) SetUUID(s string) *TkExamPaperPartitionCreate {
	teppc.mutation.SetUUID(s)
	return teppc
}

// SetCreatedAt sets the "created_at" field.
func (teppc *TkExamPaperPartitionCreate) SetCreatedAt(t time.Time) *TkExamPaperPartitionCreate {
	teppc.mutation.SetCreatedAt(t)
	return teppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (teppc *TkExamPaperPartitionCreate) SetNillableCreatedAt(t *time.Time) *TkExamPaperPartitionCreate {
	if t != nil {
		teppc.SetCreatedAt(*t)
	}
	return teppc
}

// SetUpdatedAt sets the "updated_at" field.
func (teppc *TkExamPaperPartitionCreate) SetUpdatedAt(t time.Time) *TkExamPaperPartitionCreate {
	teppc.mutation.SetUpdatedAt(t)
	return teppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (teppc *TkExamPaperPartitionCreate) SetNillableUpdatedAt(t *time.Time) *TkExamPaperPartitionCreate {
	if t != nil {
		teppc.SetUpdatedAt(*t)
	}
	return teppc
}

// SetDeletedAt sets the "deleted_at" field.
func (teppc *TkExamPaperPartitionCreate) SetDeletedAt(t time.Time) *TkExamPaperPartitionCreate {
	teppc.mutation.SetDeletedAt(t)
	return teppc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teppc *TkExamPaperPartitionCreate) SetNillableDeletedAt(t *time.Time) *TkExamPaperPartitionCreate {
	if t != nil {
		teppc.SetDeletedAt(*t)
	}
	return teppc
}

// SetName sets the "name" field.
func (teppc *TkExamPaperPartitionCreate) SetName(s string) *TkExamPaperPartitionCreate {
	teppc.mutation.SetName(s)
	return teppc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (teppc *TkExamPaperPartitionCreate) SetNillableName(s *string) *TkExamPaperPartitionCreate {
	if s != nil {
		teppc.SetName(*s)
	}
	return teppc
}

// SetDesc sets the "desc" field.
func (teppc *TkExamPaperPartitionCreate) SetDesc(s string) *TkExamPaperPartitionCreate {
	teppc.mutation.SetDesc(s)
	return teppc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (teppc *TkExamPaperPartitionCreate) SetNillableDesc(s *string) *TkExamPaperPartitionCreate {
	if s != nil {
		teppc.SetDesc(*s)
	}
	return teppc
}

// SetDuration sets the "duration" field.
func (teppc *TkExamPaperPartitionCreate) SetDuration(i int) *TkExamPaperPartitionCreate {
	teppc.mutation.SetDuration(i)
	return teppc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (teppc *TkExamPaperPartitionCreate) SetNillableDuration(i *int) *TkExamPaperPartitionCreate {
	if i != nil {
		teppc.SetDuration(*i)
	}
	return teppc
}

// SetType sets the "type" field.
func (teppc *TkExamPaperPartitionCreate) SetType(i int) *TkExamPaperPartitionCreate {
	teppc.mutation.SetType(i)
	return teppc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (teppc *TkExamPaperPartitionCreate) SetNillableType(i *int) *TkExamPaperPartitionCreate {
	if i != nil {
		teppc.SetType(*i)
	}
	return teppc
}

// SetQuestionCount sets the "question_count" field.
func (teppc *TkExamPaperPartitionCreate) SetQuestionCount(u uint8) *TkExamPaperPartitionCreate {
	teppc.mutation.SetQuestionCount(u)
	return teppc
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (teppc *TkExamPaperPartitionCreate) SetNillableQuestionCount(u *uint8) *TkExamPaperPartitionCreate {
	if u != nil {
		teppc.SetQuestionCount(*u)
	}
	return teppc
}

// SetExamPaperID sets the "exam_paper_id" field.
func (teppc *TkExamPaperPartitionCreate) SetExamPaperID(i int) *TkExamPaperPartitionCreate {
	teppc.mutation.SetExamPaperID(i)
	return teppc
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (teppc *TkExamPaperPartitionCreate) SetNillableExamPaperID(i *int) *TkExamPaperPartitionCreate {
	if i != nil {
		teppc.SetExamPaperID(*i)
	}
	return teppc
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (teppc *TkExamPaperPartitionCreate) SetExamPaper(t *TkExamPaper) *TkExamPaperPartitionCreate {
	return teppc.SetExamPaperID(t.ID)
}

// AddExamPartitionLinkIDs adds the "exam_partition_links" edge to the TkExamPartitionQuestionLink entity by IDs.
func (teppc *TkExamPaperPartitionCreate) AddExamPartitionLinkIDs(ids ...int) *TkExamPaperPartitionCreate {
	teppc.mutation.AddExamPartitionLinkIDs(ids...)
	return teppc
}

// AddExamPartitionLinks adds the "exam_partition_links" edges to the TkExamPartitionQuestionLink entity.
func (teppc *TkExamPaperPartitionCreate) AddExamPartitionLinks(t ...*TkExamPartitionQuestionLink) *TkExamPaperPartitionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppc.AddExamPartitionLinkIDs(ids...)
}

// AddExamPartitionScoreIDs adds the "exam_partition_scores" edge to the TkExamPaperPartitionScore entity by IDs.
func (teppc *TkExamPaperPartitionCreate) AddExamPartitionScoreIDs(ids ...int) *TkExamPaperPartitionCreate {
	teppc.mutation.AddExamPartitionScoreIDs(ids...)
	return teppc
}

// AddExamPartitionScores adds the "exam_partition_scores" edges to the TkExamPaperPartitionScore entity.
func (teppc *TkExamPaperPartitionCreate) AddExamPartitionScores(t ...*TkExamPaperPartitionScore) *TkExamPaperPartitionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppc.AddExamPartitionScoreIDs(ids...)
}

// Mutation returns the TkExamPaperPartitionMutation object of the builder.
func (teppc *TkExamPaperPartitionCreate) Mutation() *TkExamPaperPartitionMutation {
	return teppc.mutation
}

// Save creates the TkExamPaperPartition in the database.
func (teppc *TkExamPaperPartitionCreate) Save(ctx context.Context) (*TkExamPaperPartition, error) {
	var (
		err  error
		node *TkExamPaperPartition
	)
	teppc.defaults()
	if len(teppc.hooks) == 0 {
		if err = teppc.check(); err != nil {
			return nil, err
		}
		node, err = teppc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperPartitionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = teppc.check(); err != nil {
				return nil, err
			}
			teppc.mutation = mutation
			node, err = teppc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teppc.hooks) - 1; i >= 0; i-- {
			mut = teppc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teppc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (teppc *TkExamPaperPartitionCreate) SaveX(ctx context.Context) *TkExamPaperPartition {
	v, err := teppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (teppc *TkExamPaperPartitionCreate) defaults() {
	if _, ok := teppc.mutation.CreatedAt(); !ok {
		v := tkexampaperpartition.DefaultCreatedAt()
		teppc.mutation.SetCreatedAt(v)
	}
	if _, ok := teppc.mutation.UpdatedAt(); !ok {
		v := tkexampaperpartition.DefaultUpdatedAt()
		teppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := teppc.mutation.Name(); !ok {
		v := tkexampaperpartition.DefaultName
		teppc.mutation.SetName(v)
	}
	if _, ok := teppc.mutation.Desc(); !ok {
		v := tkexampaperpartition.DefaultDesc
		teppc.mutation.SetDesc(v)
	}
	if _, ok := teppc.mutation.Duration(); !ok {
		v := tkexampaperpartition.DefaultDuration
		teppc.mutation.SetDuration(v)
	}
	if _, ok := teppc.mutation.GetType(); !ok {
		v := tkexampaperpartition.DefaultType
		teppc.mutation.SetType(v)
	}
	if _, ok := teppc.mutation.QuestionCount(); !ok {
		v := tkexampaperpartition.DefaultQuestionCount
		teppc.mutation.SetQuestionCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (teppc *TkExamPaperPartitionCreate) check() error {
	if _, ok := teppc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := teppc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := teppc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New("ent: missing required field \"desc\"")}
	}
	if _, ok := teppc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New("ent: missing required field \"duration\"")}
	}
	if _, ok := teppc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := teppc.mutation.QuestionCount(); !ok {
		return &ValidationError{Name: "question_count", err: errors.New("ent: missing required field \"question_count\"")}
	}
	return nil
}

func (teppc *TkExamPaperPartitionCreate) sqlSave(ctx context.Context) (*TkExamPaperPartition, error) {
	_node, _spec := teppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, teppc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (teppc *TkExamPaperPartitionCreate) createSpec() (*TkExamPaperPartition, *sqlgraph.CreateSpec) {
	var (
		_node = &TkExamPaperPartition{config: teppc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkexampaperpartition.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaperpartition.FieldID,
			},
		}
	)
	if value, ok := teppc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartition.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := teppc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartition.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := teppc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartition.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := teppc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartition.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := teppc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartition.FieldName,
		})
		_node.Name = value
	}
	if value, ok := teppc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartition.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := teppc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := teppc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldType,
		})
		_node.Type = value
	}
	if value, ok := teppc.mutation.QuestionCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartition.FieldQuestionCount,
		})
		_node.QuestionCount = value
	}
	if nodes := teppc.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartition.ExamPaperTable,
			Columns: []string{tkexampaperpartition.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamPaperID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := teppc.mutation.ExamPartitionLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionLinksTable,
			Columns: []string{tkexampaperpartition.ExamPartitionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampartitionquestionlink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := teppc.mutation.ExamPartitionScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionScoresTable,
			Columns: []string{tkexampaperpartition.ExamPartitionScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartitionscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkExamPaperPartitionCreateBulk is the builder for creating many TkExamPaperPartition entities in bulk.
type TkExamPaperPartitionCreateBulk struct {
	config
	builders []*TkExamPaperPartitionCreate
}

// Save creates the TkExamPaperPartition entities in the database.
func (teppcb *TkExamPaperPartitionCreateBulk) Save(ctx context.Context) ([]*TkExamPaperPartition, error) {
	specs := make([]*sqlgraph.CreateSpec, len(teppcb.builders))
	nodes := make([]*TkExamPaperPartition, len(teppcb.builders))
	mutators := make([]Mutator, len(teppcb.builders))
	for i := range teppcb.builders {
		func(i int, root context.Context) {
			builder := teppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkExamPaperPartitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, teppcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, teppcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, teppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (teppcb *TkExamPaperPartitionCreateBulk) SaveX(ctx context.Context) []*TkExamPaperPartition {
	v, err := teppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

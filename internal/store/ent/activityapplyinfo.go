// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/activity"
	"tkserver/internal/store/ent/activityapplyinfo"

	"entgo.io/ent/dialect/sql"
)

// ActivityApplyInfo is the model entity for the ActivityApplyInfo schema.
type ActivityApplyInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 学员姓名
	Name string `json:"name"`
	// Phone holds the value of the "phone" field.
	// 手机号
	Phone string `json:"phone"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark"`
	// IsOurStudent holds the value of the "is_our_student" field.
	// 是否明德学员，0：否，1：是
	IsOurStudent uint8 `json:"is_our_student"`
	// ActivityID holds the value of the "activity_id" field.
	// 活动id
	ActivityID int `json:"activity_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityApplyInfoQuery when eager-loading is set.
	Edges ActivityApplyInfoEdges `json:"edges"`
}

// ActivityApplyInfoEdges holds the relations/edges for other nodes in the graph.
type ActivityApplyInfoEdges struct {
	// Activity holds the value of the activity edge.
	Activity *Activity `json:"activity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActivityOrErr returns the Activity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityApplyInfoEdges) ActivityOrErr() (*Activity, error) {
	if e.loadedTypes[0] {
		if e.Activity == nil {
			// The edge activity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: activity.Label}
		}
		return e.Activity, nil
	}
	return nil, &NotLoadedError{edge: "activity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActivityApplyInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case activityapplyinfo.FieldID, activityapplyinfo.FieldIsOurStudent, activityapplyinfo.FieldActivityID:
			values[i] = new(sql.NullInt64)
		case activityapplyinfo.FieldUUID, activityapplyinfo.FieldName, activityapplyinfo.FieldPhone, activityapplyinfo.FieldRemark:
			values[i] = new(sql.NullString)
		case activityapplyinfo.FieldCreatedAt, activityapplyinfo.FieldUpdatedAt, activityapplyinfo.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ActivityApplyInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActivityApplyInfo fields.
func (aai *ActivityApplyInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activityapplyinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aai.ID = int(value.Int64)
		case activityapplyinfo.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				aai.UUID = value.String
			}
		case activityapplyinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aai.CreatedAt = new(time.Time)
				*aai.CreatedAt = value.Time
			}
		case activityapplyinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aai.UpdatedAt = new(time.Time)
				*aai.UpdatedAt = value.Time
			}
		case activityapplyinfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				aai.DeletedAt = new(time.Time)
				*aai.DeletedAt = value.Time
			}
		case activityapplyinfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				aai.Name = value.String
			}
		case activityapplyinfo.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				aai.Phone = value.String
			}
		case activityapplyinfo.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				aai.Remark = value.String
			}
		case activityapplyinfo.FieldIsOurStudent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_our_student", values[i])
			} else if value.Valid {
				aai.IsOurStudent = uint8(value.Int64)
			}
		case activityapplyinfo.FieldActivityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_id", values[i])
			} else if value.Valid {
				aai.ActivityID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryActivity queries the "activity" edge of the ActivityApplyInfo entity.
func (aai *ActivityApplyInfo) QueryActivity() *ActivityQuery {
	return (&ActivityApplyInfoClient{config: aai.config}).QueryActivity(aai)
}

// Update returns a builder for updating this ActivityApplyInfo.
// Note that you need to call ActivityApplyInfo.Unwrap() before calling this method if this ActivityApplyInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (aai *ActivityApplyInfo) Update() *ActivityApplyInfoUpdateOne {
	return (&ActivityApplyInfoClient{config: aai.config}).UpdateOne(aai)
}

// Unwrap unwraps the ActivityApplyInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aai *ActivityApplyInfo) Unwrap() *ActivityApplyInfo {
	tx, ok := aai.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActivityApplyInfo is not a transactional entity")
	}
	aai.config.driver = tx.drv
	return aai
}

// String implements the fmt.Stringer.
func (aai *ActivityApplyInfo) String() string {
	var builder strings.Builder
	builder.WriteString("ActivityApplyInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", aai.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(aai.UUID)
	if v := aai.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := aai.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := aai.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(aai.Name)
	builder.WriteString(", phone=")
	builder.WriteString(aai.Phone)
	builder.WriteString(", remark=")
	builder.WriteString(aai.Remark)
	builder.WriteString(", is_our_student=")
	builder.WriteString(fmt.Sprintf("%v", aai.IsOurStudent))
	builder.WriteString(", activity_id=")
	builder.WriteString(fmt.Sprintf("%v", aai.ActivityID))
	builder.WriteByte(')')
	return builder.String()
}

// ActivityApplyInfos is a parsable slice of ActivityApplyInfo.
type ActivityApplyInfos []*ActivityApplyInfo

func (aai ActivityApplyInfos) config(cfg config) {
	for _i := range aai {
		aai[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/tkexamquestiontype"
	"gserver/internal/store/ent/tkquestionbank"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TkExamQuestionType is the model entity for the TkExamQuestionType schema.
type TkExamQuestionType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// ExamQuestionType holds the value of the "exam_question_type" field.
	// 试卷题目分类，1：模拟考试，2：考点练习，3：历年真题，4：通关必做300题，5：考前密押卷
	ExamQuestionType uint8 `json:"exam_question_type"`
	// QuestionCount holds the value of the "question_count" field.
	// 题目总数
	QuestionCount int `json:"question_count"`
	// AnsweredCount holds the value of the "answered_count" field.
	// 已作答数
	AnsweredCount int `json:"answered_count"`
	// AnsweredUserCount holds the value of the "answered_user_count" field.
	// 总答题人数
	AnsweredUserCount int `json:"answered_user_count"`
	// QuestionBankID holds the value of the "question_bank_id" field.
	// 题库id
	QuestionBankID int `json:"question_bank_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkExamQuestionTypeQuery when eager-loading is set.
	Edges TkExamQuestionTypeEdges `json:"edges"`
}

// TkExamQuestionTypeEdges holds the relations/edges for other nodes in the graph.
type TkExamQuestionTypeEdges struct {
	// QuestionBank holds the value of the question_bank edge.
	QuestionBank *TkQuestionBank `json:"question_bank,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionBankOrErr returns the QuestionBank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkExamQuestionTypeEdges) QuestionBankOrErr() (*TkQuestionBank, error) {
	if e.loadedTypes[0] {
		if e.QuestionBank == nil {
			// The edge question_bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestionbank.Label}
		}
		return e.QuestionBank, nil
	}
	return nil, &NotLoadedError{edge: "question_bank"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkExamQuestionType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkexamquestiontype.FieldID, tkexamquestiontype.FieldExamQuestionType, tkexamquestiontype.FieldQuestionCount, tkexamquestiontype.FieldAnsweredCount, tkexamquestiontype.FieldAnsweredUserCount, tkexamquestiontype.FieldQuestionBankID:
			values[i] = new(sql.NullInt64)
		case tkexamquestiontype.FieldUUID:
			values[i] = new(sql.NullString)
		case tkexamquestiontype.FieldCreatedAt, tkexamquestiontype.FieldUpdatedAt, tkexamquestiontype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkExamQuestionType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkExamQuestionType fields.
func (teqt *TkExamQuestionType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkexamquestiontype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			teqt.ID = int(value.Int64)
		case tkexamquestiontype.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				teqt.UUID = value.String
			}
		case tkexamquestiontype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				teqt.CreatedAt = new(time.Time)
				*teqt.CreatedAt = value.Time
			}
		case tkexamquestiontype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				teqt.UpdatedAt = new(time.Time)
				*teqt.UpdatedAt = value.Time
			}
		case tkexamquestiontype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				teqt.DeletedAt = new(time.Time)
				*teqt.DeletedAt = value.Time
			}
		case tkexamquestiontype.FieldExamQuestionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_question_type", values[i])
			} else if value.Valid {
				teqt.ExamQuestionType = uint8(value.Int64)
			}
		case tkexamquestiontype.FieldQuestionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_count", values[i])
			} else if value.Valid {
				teqt.QuestionCount = int(value.Int64)
			}
		case tkexamquestiontype.FieldAnsweredCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field answered_count", values[i])
			} else if value.Valid {
				teqt.AnsweredCount = int(value.Int64)
			}
		case tkexamquestiontype.FieldAnsweredUserCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field answered_user_count", values[i])
			} else if value.Valid {
				teqt.AnsweredUserCount = int(value.Int64)
			}
		case tkexamquestiontype.FieldQuestionBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_bank_id", values[i])
			} else if value.Valid {
				teqt.QuestionBankID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestionBank queries the "question_bank" edge of the TkExamQuestionType entity.
func (teqt *TkExamQuestionType) QueryQuestionBank() *TkQuestionBankQuery {
	return (&TkExamQuestionTypeClient{config: teqt.config}).QueryQuestionBank(teqt)
}

// Update returns a builder for updating this TkExamQuestionType.
// Note that you need to call TkExamQuestionType.Unwrap() before calling this method if this TkExamQuestionType
// was returned from a transaction, and the transaction was committed or rolled back.
func (teqt *TkExamQuestionType) Update() *TkExamQuestionTypeUpdateOne {
	return (&TkExamQuestionTypeClient{config: teqt.config}).UpdateOne(teqt)
}

// Unwrap unwraps the TkExamQuestionType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (teqt *TkExamQuestionType) Unwrap() *TkExamQuestionType {
	tx, ok := teqt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkExamQuestionType is not a transactional entity")
	}
	teqt.config.driver = tx.drv
	return teqt
}

// String implements the fmt.Stringer.
func (teqt *TkExamQuestionType) String() string {
	var builder strings.Builder
	builder.WriteString("TkExamQuestionType(")
	builder.WriteString(fmt.Sprintf("id=%v", teqt.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(teqt.UUID)
	if v := teqt.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := teqt.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := teqt.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", exam_question_type=")
	builder.WriteString(fmt.Sprintf("%v", teqt.ExamQuestionType))
	builder.WriteString(", question_count=")
	builder.WriteString(fmt.Sprintf("%v", teqt.QuestionCount))
	builder.WriteString(", answered_count=")
	builder.WriteString(fmt.Sprintf("%v", teqt.AnsweredCount))
	builder.WriteString(", answered_user_count=")
	builder.WriteString(fmt.Sprintf("%v", teqt.AnsweredUserCount))
	builder.WriteString(", question_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", teqt.QuestionBankID))
	builder.WriteByte(')')
	return builder.String()
}

// TkExamQuestionTypes is a parsable slice of TkExamQuestionType.
type TkExamQuestionTypes []*TkExamQuestionType

func (teqt TkExamQuestionTypes) config(cfg config) {
	for _i := range teqt {
		teqt[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionerrorfeedback"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionErrorFeedbackUpdate is the builder for updating TkQuestionErrorFeedback entities.
type TkQuestionErrorFeedbackUpdate struct {
	config
	hooks    []Hook
	mutation *TkQuestionErrorFeedbackMutation
}

// Where adds a new predicate for the TkQuestionErrorFeedbackUpdate builder.
func (tqefu *TkQuestionErrorFeedbackUpdate) Where(ps ...predicate.TkQuestionErrorFeedback) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.predicates = append(tqefu.mutation.predicates, ps...)
	return tqefu
}

// SetUUID sets the "uuid" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetUUID(s string) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.SetUUID(s)
	return tqefu
}

// SetUpdatedAt sets the "updated_at" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetUpdatedAt(t time.Time) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.SetUpdatedAt(t)
	return tqefu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) ClearUpdatedAt() *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ClearUpdatedAt()
	return tqefu
}

// SetDeletedAt sets the "deleted_at" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetDeletedAt(t time.Time) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.SetDeletedAt(t)
	return tqefu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillableDeletedAt(t *time.Time) *TkQuestionErrorFeedbackUpdate {
	if t != nil {
		tqefu.SetDeletedAt(*t)
	}
	return tqefu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) ClearDeletedAt() *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ClearDeletedAt()
	return tqefu
}

// SetUsername sets the "username" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetUsername(s string) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.SetUsername(s)
	return tqefu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillableUsername(s *string) *TkQuestionErrorFeedbackUpdate {
	if s != nil {
		tqefu.SetUsername(*s)
	}
	return tqefu
}

// SetPhone sets the "phone" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetPhone(s string) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.SetPhone(s)
	return tqefu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillablePhone(s *string) *TkQuestionErrorFeedbackUpdate {
	if s != nil {
		tqefu.SetPhone(*s)
	}
	return tqefu
}

// SetErrorDesc sets the "error_desc" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetErrorDesc(s string) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.SetErrorDesc(s)
	return tqefu
}

// SetNillableErrorDesc sets the "error_desc" field if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillableErrorDesc(s *string) *TkQuestionErrorFeedbackUpdate {
	if s != nil {
		tqefu.SetErrorDesc(*s)
	}
	return tqefu
}

// SetErrorType sets the "error_type" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetErrorType(u uint8) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ResetErrorType()
	tqefu.mutation.SetErrorType(u)
	return tqefu
}

// SetNillableErrorType sets the "error_type" field if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillableErrorType(u *uint8) *TkQuestionErrorFeedbackUpdate {
	if u != nil {
		tqefu.SetErrorType(*u)
	}
	return tqefu
}

// AddErrorType adds u to the "error_type" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) AddErrorType(u uint8) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.AddErrorType(u)
	return tqefu
}

// SetStatus sets the "status" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetStatus(u uint8) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ResetStatus()
	tqefu.mutation.SetStatus(u)
	return tqefu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillableStatus(u *uint8) *TkQuestionErrorFeedbackUpdate {
	if u != nil {
		tqefu.SetStatus(*u)
	}
	return tqefu
}

// AddStatus adds u to the "status" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) AddStatus(u uint8) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.AddStatus(u)
	return tqefu
}

// SetDealRemark sets the "deal_remark" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetDealRemark(s string) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.SetDealRemark(s)
	return tqefu
}

// SetNillableDealRemark sets the "deal_remark" field if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillableDealRemark(s *string) *TkQuestionErrorFeedbackUpdate {
	if s != nil {
		tqefu.SetDealRemark(*s)
	}
	return tqefu
}

// SetOperatorAdminID sets the "operator_admin_id" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetOperatorAdminID(i int) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ResetOperatorAdminID()
	tqefu.mutation.SetOperatorAdminID(i)
	return tqefu
}

// SetNillableOperatorAdminID sets the "operator_admin_id" field if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillableOperatorAdminID(i *int) *TkQuestionErrorFeedbackUpdate {
	if i != nil {
		tqefu.SetOperatorAdminID(*i)
	}
	return tqefu
}

// ClearOperatorAdminID clears the value of the "operator_admin_id" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) ClearOperatorAdminID() *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ClearOperatorAdminID()
	return tqefu
}

// SetQuestionID sets the "question_id" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetQuestionID(i int) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ResetQuestionID()
	tqefu.mutation.SetQuestionID(i)
	return tqefu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillableQuestionID(i *int) *TkQuestionErrorFeedbackUpdate {
	if i != nil {
		tqefu.SetQuestionID(*i)
	}
	return tqefu
}

// ClearQuestionID clears the value of the "question_id" field.
func (tqefu *TkQuestionErrorFeedbackUpdate) ClearQuestionID() *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ClearQuestionID()
	return tqefu
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetQuestion(t *TkQuestion) *TkQuestionErrorFeedbackUpdate {
	return tqefu.SetQuestionID(t.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetAdminID(id int) *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.SetAdminID(id)
	return tqefu
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetNillableAdminID(id *int) *TkQuestionErrorFeedbackUpdate {
	if id != nil {
		tqefu = tqefu.SetAdminID(*id)
	}
	return tqefu
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (tqefu *TkQuestionErrorFeedbackUpdate) SetAdmin(a *Admin) *TkQuestionErrorFeedbackUpdate {
	return tqefu.SetAdminID(a.ID)
}

// Mutation returns the TkQuestionErrorFeedbackMutation object of the builder.
func (tqefu *TkQuestionErrorFeedbackUpdate) Mutation() *TkQuestionErrorFeedbackMutation {
	return tqefu.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tqefu *TkQuestionErrorFeedbackUpdate) ClearQuestion() *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ClearQuestion()
	return tqefu
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (tqefu *TkQuestionErrorFeedbackUpdate) ClearAdmin() *TkQuestionErrorFeedbackUpdate {
	tqefu.mutation.ClearAdmin()
	return tqefu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqefu *TkQuestionErrorFeedbackUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tqefu.defaults()
	if len(tqefu.hooks) == 0 {
		affected, err = tqefu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionErrorFeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqefu.mutation = mutation
			affected, err = tqefu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tqefu.hooks) - 1; i >= 0; i-- {
			mut = tqefu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqefu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqefu *TkQuestionErrorFeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := tqefu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqefu *TkQuestionErrorFeedbackUpdate) Exec(ctx context.Context) error {
	_, err := tqefu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqefu *TkQuestionErrorFeedbackUpdate) ExecX(ctx context.Context) {
	if err := tqefu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqefu *TkQuestionErrorFeedbackUpdate) defaults() {
	if _, ok := tqefu.mutation.UpdatedAt(); !ok && !tqefu.mutation.UpdatedAtCleared() {
		v := tkquestionerrorfeedback.UpdateDefaultUpdatedAt()
		tqefu.mutation.SetUpdatedAt(v)
	}
}

func (tqefu *TkQuestionErrorFeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionerrorfeedback.Table,
			Columns: tkquestionerrorfeedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionerrorfeedback.FieldID,
			},
		},
	}
	if ps := tqefu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqefu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldUUID,
		})
	}
	if tqefu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionerrorfeedback.FieldCreatedAt,
		})
	}
	if value, ok := tqefu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldUpdatedAt,
		})
	}
	if tqefu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionerrorfeedback.FieldUpdatedAt,
		})
	}
	if value, ok := tqefu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldDeletedAt,
		})
	}
	if tqefu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionerrorfeedback.FieldDeletedAt,
		})
	}
	if value, ok := tqefu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldUsername,
		})
	}
	if value, ok := tqefu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldPhone,
		})
	}
	if value, ok := tqefu.mutation.ErrorDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldErrorDesc,
		})
	}
	if value, ok := tqefu.mutation.ErrorType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldErrorType,
		})
	}
	if value, ok := tqefu.mutation.AddedErrorType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldErrorType,
		})
	}
	if value, ok := tqefu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldStatus,
		})
	}
	if value, ok := tqefu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldStatus,
		})
	}
	if value, ok := tqefu.mutation.DealRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldDealRemark,
		})
	}
	if tqefu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.QuestionTable,
			Columns: []string{tkquestionerrorfeedback.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqefu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.QuestionTable,
			Columns: []string{tkquestionerrorfeedback.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqefu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.AdminTable,
			Columns: []string{tkquestionerrorfeedback.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqefu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.AdminTable,
			Columns: []string{tkquestionerrorfeedback.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqefu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionerrorfeedback.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkQuestionErrorFeedbackUpdateOne is the builder for updating a single TkQuestionErrorFeedback entity.
type TkQuestionErrorFeedbackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkQuestionErrorFeedbackMutation
}

// SetUUID sets the "uuid" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetUUID(s string) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.SetUUID(s)
	return tqefuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetUpdatedAt(t time.Time) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.SetUpdatedAt(t)
	return tqefuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) ClearUpdatedAt() *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ClearUpdatedAt()
	return tqefuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetDeletedAt(t time.Time) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.SetDeletedAt(t)
	return tqefuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillableDeletedAt(t *time.Time) *TkQuestionErrorFeedbackUpdateOne {
	if t != nil {
		tqefuo.SetDeletedAt(*t)
	}
	return tqefuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) ClearDeletedAt() *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ClearDeletedAt()
	return tqefuo
}

// SetUsername sets the "username" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetUsername(s string) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.SetUsername(s)
	return tqefuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillableUsername(s *string) *TkQuestionErrorFeedbackUpdateOne {
	if s != nil {
		tqefuo.SetUsername(*s)
	}
	return tqefuo
}

// SetPhone sets the "phone" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetPhone(s string) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.SetPhone(s)
	return tqefuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillablePhone(s *string) *TkQuestionErrorFeedbackUpdateOne {
	if s != nil {
		tqefuo.SetPhone(*s)
	}
	return tqefuo
}

// SetErrorDesc sets the "error_desc" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetErrorDesc(s string) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.SetErrorDesc(s)
	return tqefuo
}

// SetNillableErrorDesc sets the "error_desc" field if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillableErrorDesc(s *string) *TkQuestionErrorFeedbackUpdateOne {
	if s != nil {
		tqefuo.SetErrorDesc(*s)
	}
	return tqefuo
}

// SetErrorType sets the "error_type" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetErrorType(u uint8) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ResetErrorType()
	tqefuo.mutation.SetErrorType(u)
	return tqefuo
}

// SetNillableErrorType sets the "error_type" field if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillableErrorType(u *uint8) *TkQuestionErrorFeedbackUpdateOne {
	if u != nil {
		tqefuo.SetErrorType(*u)
	}
	return tqefuo
}

// AddErrorType adds u to the "error_type" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) AddErrorType(u uint8) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.AddErrorType(u)
	return tqefuo
}

// SetStatus sets the "status" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetStatus(u uint8) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ResetStatus()
	tqefuo.mutation.SetStatus(u)
	return tqefuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillableStatus(u *uint8) *TkQuestionErrorFeedbackUpdateOne {
	if u != nil {
		tqefuo.SetStatus(*u)
	}
	return tqefuo
}

// AddStatus adds u to the "status" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) AddStatus(u uint8) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.AddStatus(u)
	return tqefuo
}

// SetDealRemark sets the "deal_remark" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetDealRemark(s string) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.SetDealRemark(s)
	return tqefuo
}

// SetNillableDealRemark sets the "deal_remark" field if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillableDealRemark(s *string) *TkQuestionErrorFeedbackUpdateOne {
	if s != nil {
		tqefuo.SetDealRemark(*s)
	}
	return tqefuo
}

// SetOperatorAdminID sets the "operator_admin_id" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetOperatorAdminID(i int) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ResetOperatorAdminID()
	tqefuo.mutation.SetOperatorAdminID(i)
	return tqefuo
}

// SetNillableOperatorAdminID sets the "operator_admin_id" field if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillableOperatorAdminID(i *int) *TkQuestionErrorFeedbackUpdateOne {
	if i != nil {
		tqefuo.SetOperatorAdminID(*i)
	}
	return tqefuo
}

// ClearOperatorAdminID clears the value of the "operator_admin_id" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) ClearOperatorAdminID() *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ClearOperatorAdminID()
	return tqefuo
}

// SetQuestionID sets the "question_id" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetQuestionID(i int) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ResetQuestionID()
	tqefuo.mutation.SetQuestionID(i)
	return tqefuo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillableQuestionID(i *int) *TkQuestionErrorFeedbackUpdateOne {
	if i != nil {
		tqefuo.SetQuestionID(*i)
	}
	return tqefuo
}

// ClearQuestionID clears the value of the "question_id" field.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) ClearQuestionID() *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ClearQuestionID()
	return tqefuo
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetQuestion(t *TkQuestion) *TkQuestionErrorFeedbackUpdateOne {
	return tqefuo.SetQuestionID(t.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetAdminID(id int) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.SetAdminID(id)
	return tqefuo
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetNillableAdminID(id *int) *TkQuestionErrorFeedbackUpdateOne {
	if id != nil {
		tqefuo = tqefuo.SetAdminID(*id)
	}
	return tqefuo
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SetAdmin(a *Admin) *TkQuestionErrorFeedbackUpdateOne {
	return tqefuo.SetAdminID(a.ID)
}

// Mutation returns the TkQuestionErrorFeedbackMutation object of the builder.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) Mutation() *TkQuestionErrorFeedbackMutation {
	return tqefuo.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) ClearQuestion() *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ClearQuestion()
	return tqefuo
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) ClearAdmin() *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.mutation.ClearAdmin()
	return tqefuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) Select(field string, fields ...string) *TkQuestionErrorFeedbackUpdateOne {
	tqefuo.fields = append([]string{field}, fields...)
	return tqefuo
}

// Save executes the query and returns the updated TkQuestionErrorFeedback entity.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) Save(ctx context.Context) (*TkQuestionErrorFeedback, error) {
	var (
		err  error
		node *TkQuestionErrorFeedback
	)
	tqefuo.defaults()
	if len(tqefuo.hooks) == 0 {
		node, err = tqefuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionErrorFeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqefuo.mutation = mutation
			node, err = tqefuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tqefuo.hooks) - 1; i >= 0; i-- {
			mut = tqefuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqefuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) SaveX(ctx context.Context) *TkQuestionErrorFeedback {
	node, err := tqefuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := tqefuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := tqefuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqefuo *TkQuestionErrorFeedbackUpdateOne) defaults() {
	if _, ok := tqefuo.mutation.UpdatedAt(); !ok && !tqefuo.mutation.UpdatedAtCleared() {
		v := tkquestionerrorfeedback.UpdateDefaultUpdatedAt()
		tqefuo.mutation.SetUpdatedAt(v)
	}
}

func (tqefuo *TkQuestionErrorFeedbackUpdateOne) sqlSave(ctx context.Context) (_node *TkQuestionErrorFeedback, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionerrorfeedback.Table,
			Columns: tkquestionerrorfeedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionerrorfeedback.FieldID,
			},
		},
	}
	id, ok := tqefuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkQuestionErrorFeedback.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tqefuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkquestionerrorfeedback.FieldID)
		for _, f := range fields {
			if !tkquestionerrorfeedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkquestionerrorfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tqefuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqefuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldUUID,
		})
	}
	if tqefuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionerrorfeedback.FieldCreatedAt,
		})
	}
	if value, ok := tqefuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldUpdatedAt,
		})
	}
	if tqefuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionerrorfeedback.FieldUpdatedAt,
		})
	}
	if value, ok := tqefuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldDeletedAt,
		})
	}
	if tqefuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionerrorfeedback.FieldDeletedAt,
		})
	}
	if value, ok := tqefuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldUsername,
		})
	}
	if value, ok := tqefuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldPhone,
		})
	}
	if value, ok := tqefuo.mutation.ErrorDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldErrorDesc,
		})
	}
	if value, ok := tqefuo.mutation.ErrorType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldErrorType,
		})
	}
	if value, ok := tqefuo.mutation.AddedErrorType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldErrorType,
		})
	}
	if value, ok := tqefuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldStatus,
		})
	}
	if value, ok := tqefuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldStatus,
		})
	}
	if value, ok := tqefuo.mutation.DealRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldDealRemark,
		})
	}
	if tqefuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.QuestionTable,
			Columns: []string{tkquestionerrorfeedback.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqefuo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.QuestionTable,
			Columns: []string{tkquestionerrorfeedback.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqefuo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.AdminTable,
			Columns: []string{tkquestionerrorfeedback.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqefuo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.AdminTable,
			Columns: []string{tkquestionerrorfeedback.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkQuestionErrorFeedback{config: tqefuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tqefuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionerrorfeedback.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

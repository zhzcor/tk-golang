// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/itemcategory"
	"gserver/internal/store/ent/kcclass"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/tkquestionbank"
	"gserver/internal/store/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemCategoryCreate is the builder for creating a ItemCategory entity.
type ItemCategoryCreate struct {
	config
	mutation *ItemCategoryMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (icc *ItemCategoryCreate) SetUUID(s string) *ItemCategoryCreate {
	icc.mutation.SetUUID(s)
	return icc
}

// SetCreatedAt sets the "created_at" field.
func (icc *ItemCategoryCreate) SetCreatedAt(t time.Time) *ItemCategoryCreate {
	icc.mutation.SetCreatedAt(t)
	return icc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableCreatedAt(t *time.Time) *ItemCategoryCreate {
	if t != nil {
		icc.SetCreatedAt(*t)
	}
	return icc
}

// SetUpdatedAt sets the "updated_at" field.
func (icc *ItemCategoryCreate) SetUpdatedAt(t time.Time) *ItemCategoryCreate {
	icc.mutation.SetUpdatedAt(t)
	return icc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableUpdatedAt(t *time.Time) *ItemCategoryCreate {
	if t != nil {
		icc.SetUpdatedAt(*t)
	}
	return icc
}

// SetDeletedAt sets the "deleted_at" field.
func (icc *ItemCategoryCreate) SetDeletedAt(t time.Time) *ItemCategoryCreate {
	icc.mutation.SetDeletedAt(t)
	return icc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableDeletedAt(t *time.Time) *ItemCategoryCreate {
	if t != nil {
		icc.SetDeletedAt(*t)
	}
	return icc
}

// SetName sets the "name" field.
func (icc *ItemCategoryCreate) SetName(s string) *ItemCategoryCreate {
	icc.mutation.SetName(s)
	return icc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableName(s *string) *ItemCategoryCreate {
	if s != nil {
		icc.SetName(*s)
	}
	return icc
}

// SetStatus sets the "status" field.
func (icc *ItemCategoryCreate) SetStatus(u uint8) *ItemCategoryCreate {
	icc.mutation.SetStatus(u)
	return icc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableStatus(u *uint8) *ItemCategoryCreate {
	if u != nil {
		icc.SetStatus(*u)
	}
	return icc
}

// SetCode sets the "code" field.
func (icc *ItemCategoryCreate) SetCode(s string) *ItemCategoryCreate {
	icc.mutation.SetCode(s)
	return icc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableCode(s *string) *ItemCategoryCreate {
	if s != nil {
		icc.SetCode(*s)
	}
	return icc
}

// SetDesc sets the "desc" field.
func (icc *ItemCategoryCreate) SetDesc(s string) *ItemCategoryCreate {
	icc.mutation.SetDesc(s)
	return icc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableDesc(s *string) *ItemCategoryCreate {
	if s != nil {
		icc.SetDesc(*s)
	}
	return icc
}

// SetPid sets the "pid" field.
func (icc *ItemCategoryCreate) SetPid(i int) *ItemCategoryCreate {
	icc.mutation.SetPid(i)
	return icc
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillablePid(i *int) *ItemCategoryCreate {
	if i != nil {
		icc.SetPid(*i)
	}
	return icc
}

// SetSortOrder sets the "sort_order" field.
func (icc *ItemCategoryCreate) SetSortOrder(i int) *ItemCategoryCreate {
	icc.mutation.SetSortOrder(i)
	return icc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableSortOrder(i *int) *ItemCategoryCreate {
	if i != nil {
		icc.SetSortOrder(*i)
	}
	return icc
}

// AddItemQuestionBankIDs adds the "item_question_banks" edge to the TkQuestionBank entity by IDs.
func (icc *ItemCategoryCreate) AddItemQuestionBankIDs(ids ...int) *ItemCategoryCreate {
	icc.mutation.AddItemQuestionBankIDs(ids...)
	return icc
}

// AddItemQuestionBanks adds the "item_question_banks" edges to the TkQuestionBank entity.
func (icc *ItemCategoryCreate) AddItemQuestionBanks(t ...*TkQuestionBank) *ItemCategoryCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return icc.AddItemQuestionBankIDs(ids...)
}

// SetKcClassID sets the "kc_class" edge to the KcClass entity by ID.
func (icc *ItemCategoryCreate) SetKcClassID(id int) *ItemCategoryCreate {
	icc.mutation.SetKcClassID(id)
	return icc
}

// SetNillableKcClassID sets the "kc_class" edge to the KcClass entity by ID if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableKcClassID(id *int) *ItemCategoryCreate {
	if id != nil {
		icc = icc.SetKcClassID(*id)
	}
	return icc
}

// SetKcClass sets the "kc_class" edge to the KcClass entity.
func (icc *ItemCategoryCreate) SetKcClass(k *KcClass) *ItemCategoryCreate {
	return icc.SetKcClassID(k.ID)
}

// AddCourseIDs adds the "course" edge to the KcCourse entity by IDs.
func (icc *ItemCategoryCreate) AddCourseIDs(ids ...int) *ItemCategoryCreate {
	icc.mutation.AddCourseIDs(ids...)
	return icc
}

// AddCourse adds the "course" edges to the KcCourse entity.
func (icc *ItemCategoryCreate) AddCourse(k ...*KcCourse) *ItemCategoryCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return icc.AddCourseIDs(ids...)
}

// AddUserItemCateIDs adds the "user_item_cate" edge to the User entity by IDs.
func (icc *ItemCategoryCreate) AddUserItemCateIDs(ids ...int) *ItemCategoryCreate {
	icc.mutation.AddUserItemCateIDs(ids...)
	return icc
}

// AddUserItemCate adds the "user_item_cate" edges to the User entity.
func (icc *ItemCategoryCreate) AddUserItemCate(u ...*User) *ItemCategoryCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return icc.AddUserItemCateIDs(ids...)
}

// SetParentID sets the "parent" edge to the ItemCategory entity by ID.
func (icc *ItemCategoryCreate) SetParentID(id int) *ItemCategoryCreate {
	icc.mutation.SetParentID(id)
	return icc
}

// SetNillableParentID sets the "parent" edge to the ItemCategory entity by ID if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableParentID(id *int) *ItemCategoryCreate {
	if id != nil {
		icc = icc.SetParentID(*id)
	}
	return icc
}

// SetParent sets the "parent" edge to the ItemCategory entity.
func (icc *ItemCategoryCreate) SetParent(i *ItemCategory) *ItemCategoryCreate {
	return icc.SetParentID(i.ID)
}

// AddChildIDs adds the "children" edge to the ItemCategory entity by IDs.
func (icc *ItemCategoryCreate) AddChildIDs(ids ...int) *ItemCategoryCreate {
	icc.mutation.AddChildIDs(ids...)
	return icc
}

// AddChildren adds the "children" edges to the ItemCategory entity.
func (icc *ItemCategoryCreate) AddChildren(i ...*ItemCategory) *ItemCategoryCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icc.AddChildIDs(ids...)
}

// Mutation returns the ItemCategoryMutation object of the builder.
func (icc *ItemCategoryCreate) Mutation() *ItemCategoryMutation {
	return icc.mutation
}

// Save creates the ItemCategory in the database.
func (icc *ItemCategoryCreate) Save(ctx context.Context) (*ItemCategory, error) {
	var (
		err  error
		node *ItemCategory
	)
	icc.defaults()
	if len(icc.hooks) == 0 {
		if err = icc.check(); err != nil {
			return nil, err
		}
		node, err = icc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = icc.check(); err != nil {
				return nil, err
			}
			icc.mutation = mutation
			node, err = icc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(icc.hooks) - 1; i >= 0; i-- {
			mut = icc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (icc *ItemCategoryCreate) SaveX(ctx context.Context) *ItemCategory {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (icc *ItemCategoryCreate) defaults() {
	if _, ok := icc.mutation.CreatedAt(); !ok {
		v := itemcategory.DefaultCreatedAt()
		icc.mutation.SetCreatedAt(v)
	}
	if _, ok := icc.mutation.UpdatedAt(); !ok {
		v := itemcategory.DefaultUpdatedAt()
		icc.mutation.SetUpdatedAt(v)
	}
	if _, ok := icc.mutation.Name(); !ok {
		v := itemcategory.DefaultName
		icc.mutation.SetName(v)
	}
	if _, ok := icc.mutation.Status(); !ok {
		v := itemcategory.DefaultStatus
		icc.mutation.SetStatus(v)
	}
	if _, ok := icc.mutation.Code(); !ok {
		v := itemcategory.DefaultCode
		icc.mutation.SetCode(v)
	}
	if _, ok := icc.mutation.Desc(); !ok {
		v := itemcategory.DefaultDesc
		icc.mutation.SetDesc(v)
	}
	if _, ok := icc.mutation.SortOrder(); !ok {
		v := itemcategory.DefaultSortOrder
		icc.mutation.SetSortOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *ItemCategoryCreate) check() error {
	if _, ok := icc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := icc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := icc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := icc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := icc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New("ent: missing required field \"desc\"")}
	}
	if _, ok := icc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New("ent: missing required field \"sort_order\"")}
	}
	return nil
}

func (icc *ItemCategoryCreate) sqlSave(ctx context.Context) (*ItemCategory, error) {
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (icc *ItemCategoryCreate) createSpec() (*ItemCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &ItemCategory{config: icc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: itemcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemcategory.FieldID,
			},
		}
	)
	if value, ok := icc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := icc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := icc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := icc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := icc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldName,
		})
		_node.Name = value
	}
	if value, ok := icc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: itemcategory.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := icc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := icc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := icc.mutation.SortOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemcategory.FieldSortOrder,
		})
		_node.SortOrder = value
	}
	if nodes := icc.mutation.ItemQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemQuestionBanksTable,
			Columns: []string{itemcategory.ItemQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.KcClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   itemcategory.KcClassTable,
			Columns: []string{itemcategory.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.CourseTable,
			Columns: []string{itemcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.UserItemCateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.UserItemCateTable,
			Columns: []string{itemcategory.UserItemCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemcategory.ParentTable,
			Columns: []string{itemcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Pid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ChildrenTable,
			Columns: []string{itemcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemCategoryCreateBulk is the builder for creating many ItemCategory entities in bulk.
type ItemCategoryCreateBulk struct {
	config
	builders []*ItemCategoryCreate
}

// Save creates the ItemCategory entities in the database.
func (iccb *ItemCategoryCreateBulk) Save(ctx context.Context) ([]*ItemCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*ItemCategory, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *ItemCategoryCreateBulk) SaveX(ctx context.Context) []*ItemCategory {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

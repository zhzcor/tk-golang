// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionansweroption"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionAnswerOptionUpdate is the builder for updating TkQuestionAnswerOption entities.
type TkQuestionAnswerOptionUpdate struct {
	config
	hooks    []Hook
	mutation *TkQuestionAnswerOptionMutation
}

// Where adds a new predicate for the TkQuestionAnswerOptionUpdate builder.
func (tqaou *TkQuestionAnswerOptionUpdate) Where(ps ...predicate.TkQuestionAnswerOption) *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.predicates = append(tqaou.mutation.predicates, ps...)
	return tqaou
}

// SetUUID sets the "uuid" field.
func (tqaou *TkQuestionAnswerOptionUpdate) SetUUID(s string) *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.SetUUID(s)
	return tqaou
}

// SetUpdatedAt sets the "updated_at" field.
func (tqaou *TkQuestionAnswerOptionUpdate) SetUpdatedAt(t time.Time) *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.SetUpdatedAt(t)
	return tqaou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqaou *TkQuestionAnswerOptionUpdate) ClearUpdatedAt() *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.ClearUpdatedAt()
	return tqaou
}

// SetDeletedAt sets the "deleted_at" field.
func (tqaou *TkQuestionAnswerOptionUpdate) SetDeletedAt(t time.Time) *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.SetDeletedAt(t)
	return tqaou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqaou *TkQuestionAnswerOptionUpdate) SetNillableDeletedAt(t *time.Time) *TkQuestionAnswerOptionUpdate {
	if t != nil {
		tqaou.SetDeletedAt(*t)
	}
	return tqaou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqaou *TkQuestionAnswerOptionUpdate) ClearDeletedAt() *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.ClearDeletedAt()
	return tqaou
}

// SetOptionName sets the "option_name" field.
func (tqaou *TkQuestionAnswerOptionUpdate) SetOptionName(s string) *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.SetOptionName(s)
	return tqaou
}

// SetNillableOptionName sets the "option_name" field if the given value is not nil.
func (tqaou *TkQuestionAnswerOptionUpdate) SetNillableOptionName(s *string) *TkQuestionAnswerOptionUpdate {
	if s != nil {
		tqaou.SetOptionName(*s)
	}
	return tqaou
}

// SetContent sets the "content" field.
func (tqaou *TkQuestionAnswerOptionUpdate) SetContent(s string) *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.SetContent(s)
	return tqaou
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tqaou *TkQuestionAnswerOptionUpdate) SetNillableContent(s *string) *TkQuestionAnswerOptionUpdate {
	if s != nil {
		tqaou.SetContent(*s)
	}
	return tqaou
}

// SetIsRight sets the "is_right" field.
func (tqaou *TkQuestionAnswerOptionUpdate) SetIsRight(u uint8) *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.ResetIsRight()
	tqaou.mutation.SetIsRight(u)
	return tqaou
}

// SetNillableIsRight sets the "is_right" field if the given value is not nil.
func (tqaou *TkQuestionAnswerOptionUpdate) SetNillableIsRight(u *uint8) *TkQuestionAnswerOptionUpdate {
	if u != nil {
		tqaou.SetIsRight(*u)
	}
	return tqaou
}

// AddIsRight adds u to the "is_right" field.
func (tqaou *TkQuestionAnswerOptionUpdate) AddIsRight(u uint8) *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.AddIsRight(u)
	return tqaou
}

// SetQuestionID sets the "question_id" field.
func (tqaou *TkQuestionAnswerOptionUpdate) SetQuestionID(i int) *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.ResetQuestionID()
	tqaou.mutation.SetQuestionID(i)
	return tqaou
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqaou *TkQuestionAnswerOptionUpdate) SetNillableQuestionID(i *int) *TkQuestionAnswerOptionUpdate {
	if i != nil {
		tqaou.SetQuestionID(*i)
	}
	return tqaou
}

// ClearQuestionID clears the value of the "question_id" field.
func (tqaou *TkQuestionAnswerOptionUpdate) ClearQuestionID() *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.ClearQuestionID()
	return tqaou
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tqaou *TkQuestionAnswerOptionUpdate) SetQuestion(t *TkQuestion) *TkQuestionAnswerOptionUpdate {
	return tqaou.SetQuestionID(t.ID)
}

// Mutation returns the TkQuestionAnswerOptionMutation object of the builder.
func (tqaou *TkQuestionAnswerOptionUpdate) Mutation() *TkQuestionAnswerOptionMutation {
	return tqaou.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tqaou *TkQuestionAnswerOptionUpdate) ClearQuestion() *TkQuestionAnswerOptionUpdate {
	tqaou.mutation.ClearQuestion()
	return tqaou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqaou *TkQuestionAnswerOptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tqaou.defaults()
	if len(tqaou.hooks) == 0 {
		affected, err = tqaou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionAnswerOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqaou.mutation = mutation
			affected, err = tqaou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tqaou.hooks) - 1; i >= 0; i-- {
			mut = tqaou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqaou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqaou *TkQuestionAnswerOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := tqaou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqaou *TkQuestionAnswerOptionUpdate) Exec(ctx context.Context) error {
	_, err := tqaou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqaou *TkQuestionAnswerOptionUpdate) ExecX(ctx context.Context) {
	if err := tqaou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqaou *TkQuestionAnswerOptionUpdate) defaults() {
	if _, ok := tqaou.mutation.UpdatedAt(); !ok && !tqaou.mutation.UpdatedAtCleared() {
		v := tkquestionansweroption.UpdateDefaultUpdatedAt()
		tqaou.mutation.SetUpdatedAt(v)
	}
}

func (tqaou *TkQuestionAnswerOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionansweroption.Table,
			Columns: tkquestionansweroption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionansweroption.FieldID,
			},
		},
	}
	if ps := tqaou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqaou.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionansweroption.FieldUUID,
		})
	}
	if tqaou.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionansweroption.FieldCreatedAt,
		})
	}
	if value, ok := tqaou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionansweroption.FieldUpdatedAt,
		})
	}
	if tqaou.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionansweroption.FieldUpdatedAt,
		})
	}
	if value, ok := tqaou.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionansweroption.FieldDeletedAt,
		})
	}
	if tqaou.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionansweroption.FieldDeletedAt,
		})
	}
	if value, ok := tqaou.mutation.OptionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionansweroption.FieldOptionName,
		})
	}
	if value, ok := tqaou.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionansweroption.FieldContent,
		})
	}
	if value, ok := tqaou.mutation.IsRight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionansweroption.FieldIsRight,
		})
	}
	if value, ok := tqaou.mutation.AddedIsRight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionansweroption.FieldIsRight,
		})
	}
	if tqaou.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionansweroption.QuestionTable,
			Columns: []string{tkquestionansweroption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqaou.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionansweroption.QuestionTable,
			Columns: []string{tkquestionansweroption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqaou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionansweroption.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkQuestionAnswerOptionUpdateOne is the builder for updating a single TkQuestionAnswerOption entity.
type TkQuestionAnswerOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkQuestionAnswerOptionMutation
}

// SetUUID sets the "uuid" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetUUID(s string) *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.SetUUID(s)
	return tqaouo
}

// SetUpdatedAt sets the "updated_at" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetUpdatedAt(t time.Time) *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.SetUpdatedAt(t)
	return tqaouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) ClearUpdatedAt() *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.ClearUpdatedAt()
	return tqaouo
}

// SetDeletedAt sets the "deleted_at" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetDeletedAt(t time.Time) *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.SetDeletedAt(t)
	return tqaouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetNillableDeletedAt(t *time.Time) *TkQuestionAnswerOptionUpdateOne {
	if t != nil {
		tqaouo.SetDeletedAt(*t)
	}
	return tqaouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) ClearDeletedAt() *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.ClearDeletedAt()
	return tqaouo
}

// SetOptionName sets the "option_name" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetOptionName(s string) *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.SetOptionName(s)
	return tqaouo
}

// SetNillableOptionName sets the "option_name" field if the given value is not nil.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetNillableOptionName(s *string) *TkQuestionAnswerOptionUpdateOne {
	if s != nil {
		tqaouo.SetOptionName(*s)
	}
	return tqaouo
}

// SetContent sets the "content" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetContent(s string) *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.SetContent(s)
	return tqaouo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetNillableContent(s *string) *TkQuestionAnswerOptionUpdateOne {
	if s != nil {
		tqaouo.SetContent(*s)
	}
	return tqaouo
}

// SetIsRight sets the "is_right" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetIsRight(u uint8) *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.ResetIsRight()
	tqaouo.mutation.SetIsRight(u)
	return tqaouo
}

// SetNillableIsRight sets the "is_right" field if the given value is not nil.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetNillableIsRight(u *uint8) *TkQuestionAnswerOptionUpdateOne {
	if u != nil {
		tqaouo.SetIsRight(*u)
	}
	return tqaouo
}

// AddIsRight adds u to the "is_right" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) AddIsRight(u uint8) *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.AddIsRight(u)
	return tqaouo
}

// SetQuestionID sets the "question_id" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetQuestionID(i int) *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.ResetQuestionID()
	tqaouo.mutation.SetQuestionID(i)
	return tqaouo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetNillableQuestionID(i *int) *TkQuestionAnswerOptionUpdateOne {
	if i != nil {
		tqaouo.SetQuestionID(*i)
	}
	return tqaouo
}

// ClearQuestionID clears the value of the "question_id" field.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) ClearQuestionID() *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.ClearQuestionID()
	return tqaouo
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SetQuestion(t *TkQuestion) *TkQuestionAnswerOptionUpdateOne {
	return tqaouo.SetQuestionID(t.ID)
}

// Mutation returns the TkQuestionAnswerOptionMutation object of the builder.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) Mutation() *TkQuestionAnswerOptionMutation {
	return tqaouo.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) ClearQuestion() *TkQuestionAnswerOptionUpdateOne {
	tqaouo.mutation.ClearQuestion()
	return tqaouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) Select(field string, fields ...string) *TkQuestionAnswerOptionUpdateOne {
	tqaouo.fields = append([]string{field}, fields...)
	return tqaouo
}

// Save executes the query and returns the updated TkQuestionAnswerOption entity.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) Save(ctx context.Context) (*TkQuestionAnswerOption, error) {
	var (
		err  error
		node *TkQuestionAnswerOption
	)
	tqaouo.defaults()
	if len(tqaouo.hooks) == 0 {
		node, err = tqaouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionAnswerOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqaouo.mutation = mutation
			node, err = tqaouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tqaouo.hooks) - 1; i >= 0; i-- {
			mut = tqaouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqaouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) SaveX(ctx context.Context) *TkQuestionAnswerOption {
	node, err := tqaouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := tqaouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) ExecX(ctx context.Context) {
	if err := tqaouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqaouo *TkQuestionAnswerOptionUpdateOne) defaults() {
	if _, ok := tqaouo.mutation.UpdatedAt(); !ok && !tqaouo.mutation.UpdatedAtCleared() {
		v := tkquestionansweroption.UpdateDefaultUpdatedAt()
		tqaouo.mutation.SetUpdatedAt(v)
	}
}

func (tqaouo *TkQuestionAnswerOptionUpdateOne) sqlSave(ctx context.Context) (_node *TkQuestionAnswerOption, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionansweroption.Table,
			Columns: tkquestionansweroption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionansweroption.FieldID,
			},
		},
	}
	id, ok := tqaouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkQuestionAnswerOption.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tqaouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkquestionansweroption.FieldID)
		for _, f := range fields {
			if !tkquestionansweroption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkquestionansweroption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tqaouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqaouo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionansweroption.FieldUUID,
		})
	}
	if tqaouo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionansweroption.FieldCreatedAt,
		})
	}
	if value, ok := tqaouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionansweroption.FieldUpdatedAt,
		})
	}
	if tqaouo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionansweroption.FieldUpdatedAt,
		})
	}
	if value, ok := tqaouo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionansweroption.FieldDeletedAt,
		})
	}
	if tqaouo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionansweroption.FieldDeletedAt,
		})
	}
	if value, ok := tqaouo.mutation.OptionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionansweroption.FieldOptionName,
		})
	}
	if value, ok := tqaouo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionansweroption.FieldContent,
		})
	}
	if value, ok := tqaouo.mutation.IsRight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionansweroption.FieldIsRight,
		})
	}
	if value, ok := tqaouo.mutation.AddedIsRight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionansweroption.FieldIsRight,
		})
	}
	if tqaouo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionansweroption.QuestionTable,
			Columns: []string{tkquestionansweroption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqaouo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionansweroption.QuestionTable,
			Columns: []string{tkquestionansweroption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkQuestionAnswerOption{config: tqaouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tqaouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionansweroption.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/city"
	"gserver/internal/store/ent/kcclass"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CityCreate is the builder for creating a City entity.
type CityCreate struct {
	config
	mutation *CityMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (cc *CityCreate) SetUUID(s string) *CityCreate {
	cc.mutation.SetUUID(s)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CityCreate) SetCreatedAt(t time.Time) *CityCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CityCreate) SetNillableCreatedAt(t *time.Time) *CityCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CityCreate) SetUpdatedAt(t time.Time) *CityCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CityCreate) SetNillableUpdatedAt(t *time.Time) *CityCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CityCreate) SetDeletedAt(t time.Time) *CityCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CityCreate) SetNillableDeletedAt(t *time.Time) *CityCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CityCreate) SetName(s string) *CityCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CityCreate) SetNillableName(s *string) *CityCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CityCreate) SetStatus(u uint8) *CityCreate {
	cc.mutation.SetStatus(u)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CityCreate) SetNillableStatus(u *uint8) *CityCreate {
	if u != nil {
		cc.SetStatus(*u)
	}
	return cc
}

// SetCode sets the "code" field.
func (cc *CityCreate) SetCode(s string) *CityCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cc *CityCreate) SetNillableCode(s *string) *CityCreate {
	if s != nil {
		cc.SetCode(*s)
	}
	return cc
}

// SetDesc sets the "desc" field.
func (cc *CityCreate) SetDesc(s string) *CityCreate {
	cc.mutation.SetDesc(s)
	return cc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cc *CityCreate) SetNillableDesc(s *string) *CityCreate {
	if s != nil {
		cc.SetDesc(*s)
	}
	return cc
}

// SetSortOrder sets the "sort_order" field.
func (cc *CityCreate) SetSortOrder(i int) *CityCreate {
	cc.mutation.SetSortOrder(i)
	return cc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (cc *CityCreate) SetNillableSortOrder(i *int) *CityCreate {
	if i != nil {
		cc.SetSortOrder(*i)
	}
	return cc
}

// AddKcClasIDs adds the "kc_class" edge to the KcClass entity by IDs.
func (cc *CityCreate) AddKcClasIDs(ids ...int) *CityCreate {
	cc.mutation.AddKcClasIDs(ids...)
	return cc
}

// AddKcClass adds the "kc_class" edges to the KcClass entity.
func (cc *CityCreate) AddKcClass(k ...*KcClass) *CityCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cc.AddKcClasIDs(ids...)
}

// AddCourseIDs adds the "course" edge to the KcCourse entity by IDs.
func (cc *CityCreate) AddCourseIDs(ids ...int) *CityCreate {
	cc.mutation.AddCourseIDs(ids...)
	return cc
}

// AddCourse adds the "course" edges to the KcCourse entity.
func (cc *CityCreate) AddCourse(k ...*KcCourse) *CityCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cc.AddCourseIDs(ids...)
}

// AddUserCityIDs adds the "user_city" edge to the User entity by IDs.
func (cc *CityCreate) AddUserCityIDs(ids ...int) *CityCreate {
	cc.mutation.AddUserCityIDs(ids...)
	return cc
}

// AddUserCity adds the "user_city" edges to the User entity.
func (cc *CityCreate) AddUserCity(u ...*User) *CityCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddUserCityIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cc *CityCreate) Mutation() *CityMutation {
	return cc.mutation
}

// Save creates the City in the database.
func (cc *CityCreate) Save(ctx context.Context) (*City, error) {
	var (
		err  error
		node *City
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CityCreate) SaveX(ctx context.Context) *City {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *CityCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := city.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := city.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Name(); !ok {
		v := city.DefaultName
		cc.mutation.SetName(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := city.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.Code(); !ok {
		v := city.DefaultCode
		cc.mutation.SetCode(v)
	}
	if _, ok := cc.mutation.Desc(); !ok {
		v := city.DefaultDesc
		cc.mutation.SetDesc(v)
	}
	if _, ok := cc.mutation.SortOrder(); !ok {
		v := city.DefaultSortOrder
		cc.mutation.SetSortOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CityCreate) check() error {
	if _, ok := cc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := cc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New("ent: missing required field \"desc\"")}
	}
	if _, ok := cc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New("ent: missing required field \"sort_order\"")}
	}
	return nil
}

func (cc *CityCreate) sqlSave(ctx context.Context) (*City, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CityCreate) createSpec() (*City, *sqlgraph.CreateSpec) {
	var (
		_node = &City{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: city.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: city.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: city.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := cc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := cc.mutation.SortOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldSortOrder,
		})
		_node.SortOrder = value
	}
	if nodes := cc.mutation.KcClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.KcClassTable,
			Columns: []string{city.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CourseTable,
			Columns: []string{city.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UserCityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.UserCityTable,
			Columns: []string{city.UserCityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CityCreateBulk is the builder for creating many City entities in bulk.
type CityCreateBulk struct {
	config
	builders []*CityCreate
}

// Save creates the City entities in the database.
func (ccb *CityCreateBulk) Save(ctx context.Context) ([]*City, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*City, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CityCreateBulk) SaveX(ctx context.Context) []*City {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

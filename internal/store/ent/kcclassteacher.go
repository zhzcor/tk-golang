// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kcclassteacher"
	"tkserver/internal/store/ent/teacher"

	"entgo.io/ent/dialect/sql"
)

// KcClassTeacher is the model entity for the KcClassTeacher schema.
type KcClassTeacher struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ShowStatus holds the value of the "show_status" field.
	// 显示状态：1：显示，2：不显示
	ShowStatus uint8 `json:"show_status"`
	// SortOrder holds the value of the "sort_order" field.
	// 排序
	SortOrder int `json:"sort_order"`
	// ClassID holds the value of the "class_id" field.
	// 班级
	ClassID int `json:"class_id"`
	// TeacherID holds the value of the "teacher_id" field.
	// 老师id
	TeacherID int `json:"teacher_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KcClassTeacherQuery when eager-loading is set.
	Edges KcClassTeacherEdges `json:"edges"`
}

// KcClassTeacherEdges holds the relations/edges for other nodes in the graph.
type KcClassTeacherEdges struct {
	// Teacher holds the value of the teacher edge.
	Teacher *Teacher `json:"teacher,omitempty"`
	// Class holds the value of the class edge.
	Class *KcClass `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcClassTeacherEdges) TeacherOrErr() (*Teacher, error) {
	if e.loadedTypes[0] {
		if e.Teacher == nil {
			// The edge teacher was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.Teacher, nil
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcClassTeacherEdges) ClassOrErr() (*KcClass, error) {
	if e.loadedTypes[1] {
		if e.Class == nil {
			// The edge class was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kcclass.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KcClassTeacher) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kcclassteacher.FieldID, kcclassteacher.FieldShowStatus, kcclassteacher.FieldSortOrder, kcclassteacher.FieldClassID, kcclassteacher.FieldTeacherID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KcClassTeacher", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KcClassTeacher fields.
func (kct *KcClassTeacher) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kcclassteacher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kct.ID = int(value.Int64)
		case kcclassteacher.FieldShowStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field show_status", values[i])
			} else if value.Valid {
				kct.ShowStatus = uint8(value.Int64)
			}
		case kcclassteacher.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				kct.SortOrder = int(value.Int64)
			}
		case kcclassteacher.FieldClassID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field class_id", values[i])
			} else if value.Valid {
				kct.ClassID = int(value.Int64)
			}
		case kcclassteacher.FieldTeacherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_id", values[i])
			} else if value.Valid {
				kct.TeacherID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTeacher queries the "teacher" edge of the KcClassTeacher entity.
func (kct *KcClassTeacher) QueryTeacher() *TeacherQuery {
	return (&KcClassTeacherClient{config: kct.config}).QueryTeacher(kct)
}

// QueryClass queries the "class" edge of the KcClassTeacher entity.
func (kct *KcClassTeacher) QueryClass() *KcClassQuery {
	return (&KcClassTeacherClient{config: kct.config}).QueryClass(kct)
}

// Update returns a builder for updating this KcClassTeacher.
// Note that you need to call KcClassTeacher.Unwrap() before calling this method if this KcClassTeacher
// was returned from a transaction, and the transaction was committed or rolled back.
func (kct *KcClassTeacher) Update() *KcClassTeacherUpdateOne {
	return (&KcClassTeacherClient{config: kct.config}).UpdateOne(kct)
}

// Unwrap unwraps the KcClassTeacher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kct *KcClassTeacher) Unwrap() *KcClassTeacher {
	tx, ok := kct.config.driver.(*txDriver)
	if !ok {
		panic("ent: KcClassTeacher is not a transactional entity")
	}
	kct.config.driver = tx.drv
	return kct
}

// String implements the fmt.Stringer.
func (kct *KcClassTeacher) String() string {
	var builder strings.Builder
	builder.WriteString("KcClassTeacher(")
	builder.WriteString(fmt.Sprintf("id=%v", kct.ID))
	builder.WriteString(", show_status=")
	builder.WriteString(fmt.Sprintf("%v", kct.ShowStatus))
	builder.WriteString(", sort_order=")
	builder.WriteString(fmt.Sprintf("%v", kct.SortOrder))
	builder.WriteString(", class_id=")
	builder.WriteString(fmt.Sprintf("%v", kct.ClassID))
	builder.WriteString(", teacher_id=")
	builder.WriteString(fmt.Sprintf("%v", kct.TeacherID))
	builder.WriteByte(')')
	return builder.String()
}

// KcClassTeachers is a parsable slice of KcClassTeacher.
type KcClassTeachers []*KcClassTeacher

func (kct KcClassTeachers) config(cfg config) {
	for _i := range kct {
		kct[_i].config = cfg
	}
}

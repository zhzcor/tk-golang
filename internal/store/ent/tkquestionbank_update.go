// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/itemcategory"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/level"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkchapter"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkexamquestiontype"
	"tkserver/internal/store/ent/tkknowledgepoint"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkquestionbankcity"
	"tkserver/internal/store/ent/tkquestionbankmajor"
	"tkserver/internal/store/ent/tkuserquestionbankrecord"
	"tkserver/internal/store/ent/tkuserquestionrecord"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionBankUpdate is the builder for updating TkQuestionBank entities.
type TkQuestionBankUpdate struct {
	config
	hooks    []Hook
	mutation *TkQuestionBankMutation
}

// Where adds a new predicate for the TkQuestionBankUpdate builder.
func (tqbu *TkQuestionBankUpdate) Where(ps ...predicate.TkQuestionBank) *TkQuestionBankUpdate {
	tqbu.mutation.predicates = append(tqbu.mutation.predicates, ps...)
	return tqbu
}

// SetUUID sets the "uuid" field.
func (tqbu *TkQuestionBankUpdate) SetUUID(s string) *TkQuestionBankUpdate {
	tqbu.mutation.SetUUID(s)
	return tqbu
}

// SetUpdatedAt sets the "updated_at" field.
func (tqbu *TkQuestionBankUpdate) SetUpdatedAt(t time.Time) *TkQuestionBankUpdate {
	tqbu.mutation.SetUpdatedAt(t)
	return tqbu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqbu *TkQuestionBankUpdate) ClearUpdatedAt() *TkQuestionBankUpdate {
	tqbu.mutation.ClearUpdatedAt()
	return tqbu
}

// SetDeletedAt sets the "deleted_at" field.
func (tqbu *TkQuestionBankUpdate) SetDeletedAt(t time.Time) *TkQuestionBankUpdate {
	tqbu.mutation.SetDeletedAt(t)
	return tqbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqbu *TkQuestionBankUpdate) SetNillableDeletedAt(t *time.Time) *TkQuestionBankUpdate {
	if t != nil {
		tqbu.SetDeletedAt(*t)
	}
	return tqbu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqbu *TkQuestionBankUpdate) ClearDeletedAt() *TkQuestionBankUpdate {
	tqbu.mutation.ClearDeletedAt()
	return tqbu
}

// SetName sets the "name" field.
func (tqbu *TkQuestionBankUpdate) SetName(s string) *TkQuestionBankUpdate {
	tqbu.mutation.SetName(s)
	return tqbu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tqbu *TkQuestionBankUpdate) SetNillableName(s *string) *TkQuestionBankUpdate {
	if s != nil {
		tqbu.SetName(*s)
	}
	return tqbu
}

// SetStatus sets the "status" field.
func (tqbu *TkQuestionBankUpdate) SetStatus(u uint8) *TkQuestionBankUpdate {
	tqbu.mutation.ResetStatus()
	tqbu.mutation.SetStatus(u)
	return tqbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tqbu *TkQuestionBankUpdate) SetNillableStatus(u *uint8) *TkQuestionBankUpdate {
	if u != nil {
		tqbu.SetStatus(*u)
	}
	return tqbu
}

// AddStatus adds u to the "status" field.
func (tqbu *TkQuestionBankUpdate) AddStatus(u uint8) *TkQuestionBankUpdate {
	tqbu.mutation.AddStatus(u)
	return tqbu
}

// SetQuestionCount sets the "question_count" field.
func (tqbu *TkQuestionBankUpdate) SetQuestionCount(i int) *TkQuestionBankUpdate {
	tqbu.mutation.ResetQuestionCount()
	tqbu.mutation.SetQuestionCount(i)
	return tqbu
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tqbu *TkQuestionBankUpdate) SetNillableQuestionCount(i *int) *TkQuestionBankUpdate {
	if i != nil {
		tqbu.SetQuestionCount(*i)
	}
	return tqbu
}

// AddQuestionCount adds i to the "question_count" field.
func (tqbu *TkQuestionBankUpdate) AddQuestionCount(i int) *TkQuestionBankUpdate {
	tqbu.mutation.AddQuestionCount(i)
	return tqbu
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (tqbu *TkQuestionBankUpdate) SetCreatedAdminID(i int) *TkQuestionBankUpdate {
	tqbu.mutation.ResetCreatedAdminID()
	tqbu.mutation.SetCreatedAdminID(i)
	return tqbu
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (tqbu *TkQuestionBankUpdate) SetNillableCreatedAdminID(i *int) *TkQuestionBankUpdate {
	if i != nil {
		tqbu.SetCreatedAdminID(*i)
	}
	return tqbu
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (tqbu *TkQuestionBankUpdate) ClearCreatedAdminID() *TkQuestionBankUpdate {
	tqbu.mutation.ClearCreatedAdminID()
	return tqbu
}

// SetItemCategoryID sets the "item_category_id" field.
func (tqbu *TkQuestionBankUpdate) SetItemCategoryID(i int) *TkQuestionBankUpdate {
	tqbu.mutation.ResetItemCategoryID()
	tqbu.mutation.SetItemCategoryID(i)
	return tqbu
}

// SetNillableItemCategoryID sets the "item_category_id" field if the given value is not nil.
func (tqbu *TkQuestionBankUpdate) SetNillableItemCategoryID(i *int) *TkQuestionBankUpdate {
	if i != nil {
		tqbu.SetItemCategoryID(*i)
	}
	return tqbu
}

// ClearItemCategoryID clears the value of the "item_category_id" field.
func (tqbu *TkQuestionBankUpdate) ClearItemCategoryID() *TkQuestionBankUpdate {
	tqbu.mutation.ClearItemCategoryID()
	return tqbu
}

// SetLevelID sets the "level_id" field.
func (tqbu *TkQuestionBankUpdate) SetLevelID(i int) *TkQuestionBankUpdate {
	tqbu.mutation.ResetLevelID()
	tqbu.mutation.SetLevelID(i)
	return tqbu
}

// SetNillableLevelID sets the "level_id" field if the given value is not nil.
func (tqbu *TkQuestionBankUpdate) SetNillableLevelID(i *int) *TkQuestionBankUpdate {
	if i != nil {
		tqbu.SetLevelID(*i)
	}
	return tqbu
}

// ClearLevelID clears the value of the "level_id" field.
func (tqbu *TkQuestionBankUpdate) ClearLevelID() *TkQuestionBankUpdate {
	tqbu.mutation.ClearLevelID()
	return tqbu
}

// SetItemCategory sets the "item_category" edge to the ItemCategory entity.
func (tqbu *TkQuestionBankUpdate) SetItemCategory(i *ItemCategory) *TkQuestionBankUpdate {
	return tqbu.SetItemCategoryID(i.ID)
}

// SetLevel sets the "level" edge to the Level entity.
func (tqbu *TkQuestionBankUpdate) SetLevel(l *Level) *TkQuestionBankUpdate {
	return tqbu.SetLevelID(l.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (tqbu *TkQuestionBankUpdate) SetAdminID(id int) *TkQuestionBankUpdate {
	tqbu.mutation.SetAdminID(id)
	return tqbu
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (tqbu *TkQuestionBankUpdate) SetNillableAdminID(id *int) *TkQuestionBankUpdate {
	if id != nil {
		tqbu = tqbu.SetAdminID(*id)
	}
	return tqbu
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (tqbu *TkQuestionBankUpdate) SetAdmin(a *Admin) *TkQuestionBankUpdate {
	return tqbu.SetAdminID(a.ID)
}

// AddQuestionChapterIDs adds the "question_chapters" edge to the TkChapter entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddQuestionChapterIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddQuestionChapterIDs(ids...)
	return tqbu
}

// AddQuestionChapters adds the "question_chapters" edges to the TkChapter entity.
func (tqbu *TkQuestionBankUpdate) AddQuestionChapters(t ...*TkChapter) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.AddQuestionChapterIDs(ids...)
}

// AddQuestionBankCourseIDs adds the "question_bank_courses" edge to the KcCourse entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddQuestionBankCourseIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddQuestionBankCourseIDs(ids...)
	return tqbu
}

// AddQuestionBankCourses adds the "question_bank_courses" edges to the KcCourse entity.
func (tqbu *TkQuestionBankUpdate) AddQuestionBankCourses(k ...*KcCourse) *TkQuestionBankUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tqbu.AddQuestionBankCourseIDs(ids...)
}

// AddQuestionIDs adds the "questions" edge to the TkQuestion entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddQuestionIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddQuestionIDs(ids...)
	return tqbu
}

// AddQuestions adds the "questions" edges to the TkQuestion entity.
func (tqbu *TkQuestionBankUpdate) AddQuestions(t ...*TkQuestion) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.AddQuestionIDs(ids...)
}

// AddExamPaperIDs adds the "exam_papers" edge to the TkExamPaper entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddExamPaperIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddExamPaperIDs(ids...)
	return tqbu
}

// AddExamPapers adds the "exam_papers" edges to the TkExamPaper entity.
func (tqbu *TkQuestionBankUpdate) AddExamPapers(t ...*TkExamPaper) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.AddExamPaperIDs(ids...)
}

// AddExamQuestionTypeIDs adds the "exam_question_types" edge to the TkExamQuestionType entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddExamQuestionTypeIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddExamQuestionTypeIDs(ids...)
	return tqbu
}

// AddExamQuestionTypes adds the "exam_question_types" edges to the TkExamQuestionType entity.
func (tqbu *TkQuestionBankUpdate) AddExamQuestionTypes(t ...*TkExamQuestionType) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.AddExamQuestionTypeIDs(ids...)
}

// AddUserQuestionBankIDs adds the "user_question_bank" edge to the TkUserQuestionBankRecord entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddUserQuestionBankIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddUserQuestionBankIDs(ids...)
	return tqbu
}

// AddUserQuestionBank adds the "user_question_bank" edges to the TkUserQuestionBankRecord entity.
func (tqbu *TkQuestionBankUpdate) AddUserQuestionBank(t ...*TkUserQuestionBankRecord) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.AddUserQuestionBankIDs(ids...)
}

// AddUserBankRecordIDs adds the "user_bank_records" edge to the TkUserQuestionRecord entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddUserBankRecordIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddUserBankRecordIDs(ids...)
	return tqbu
}

// AddUserBankRecords adds the "user_bank_records" edges to the TkUserQuestionRecord entity.
func (tqbu *TkQuestionBankUpdate) AddUserBankRecords(t ...*TkUserQuestionRecord) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.AddUserBankRecordIDs(ids...)
}

// AddKnowledgePointIDs adds the "knowledge_points" edge to the TkKnowledgePoint entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddKnowledgePointIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddKnowledgePointIDs(ids...)
	return tqbu
}

// AddKnowledgePoints adds the "knowledge_points" edges to the TkKnowledgePoint entity.
func (tqbu *TkQuestionBankUpdate) AddKnowledgePoints(t ...*TkKnowledgePoint) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.AddKnowledgePointIDs(ids...)
}

// AddCityQuestionBankIDs adds the "city_question_banks" edge to the TkQuestionBankCity entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddCityQuestionBankIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddCityQuestionBankIDs(ids...)
	return tqbu
}

// AddCityQuestionBanks adds the "city_question_banks" edges to the TkQuestionBankCity entity.
func (tqbu *TkQuestionBankUpdate) AddCityQuestionBanks(t ...*TkQuestionBankCity) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.AddCityQuestionBankIDs(ids...)
}

// AddMajorQuestionBankIDs adds the "major_question_banks" edge to the TkQuestionBankMajor entity by IDs.
func (tqbu *TkQuestionBankUpdate) AddMajorQuestionBankIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.AddMajorQuestionBankIDs(ids...)
	return tqbu
}

// AddMajorQuestionBanks adds the "major_question_banks" edges to the TkQuestionBankMajor entity.
func (tqbu *TkQuestionBankUpdate) AddMajorQuestionBanks(t ...*TkQuestionBankMajor) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.AddMajorQuestionBankIDs(ids...)
}

// Mutation returns the TkQuestionBankMutation object of the builder.
func (tqbu *TkQuestionBankUpdate) Mutation() *TkQuestionBankMutation {
	return tqbu.mutation
}

// ClearItemCategory clears the "item_category" edge to the ItemCategory entity.
func (tqbu *TkQuestionBankUpdate) ClearItemCategory() *TkQuestionBankUpdate {
	tqbu.mutation.ClearItemCategory()
	return tqbu
}

// ClearLevel clears the "level" edge to the Level entity.
func (tqbu *TkQuestionBankUpdate) ClearLevel() *TkQuestionBankUpdate {
	tqbu.mutation.ClearLevel()
	return tqbu
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (tqbu *TkQuestionBankUpdate) ClearAdmin() *TkQuestionBankUpdate {
	tqbu.mutation.ClearAdmin()
	return tqbu
}

// ClearQuestionChapters clears all "question_chapters" edges to the TkChapter entity.
func (tqbu *TkQuestionBankUpdate) ClearQuestionChapters() *TkQuestionBankUpdate {
	tqbu.mutation.ClearQuestionChapters()
	return tqbu
}

// RemoveQuestionChapterIDs removes the "question_chapters" edge to TkChapter entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveQuestionChapterIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveQuestionChapterIDs(ids...)
	return tqbu
}

// RemoveQuestionChapters removes "question_chapters" edges to TkChapter entities.
func (tqbu *TkQuestionBankUpdate) RemoveQuestionChapters(t ...*TkChapter) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.RemoveQuestionChapterIDs(ids...)
}

// ClearQuestionBankCourses clears all "question_bank_courses" edges to the KcCourse entity.
func (tqbu *TkQuestionBankUpdate) ClearQuestionBankCourses() *TkQuestionBankUpdate {
	tqbu.mutation.ClearQuestionBankCourses()
	return tqbu
}

// RemoveQuestionBankCourseIDs removes the "question_bank_courses" edge to KcCourse entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveQuestionBankCourseIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveQuestionBankCourseIDs(ids...)
	return tqbu
}

// RemoveQuestionBankCourses removes "question_bank_courses" edges to KcCourse entities.
func (tqbu *TkQuestionBankUpdate) RemoveQuestionBankCourses(k ...*KcCourse) *TkQuestionBankUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tqbu.RemoveQuestionBankCourseIDs(ids...)
}

// ClearQuestions clears all "questions" edges to the TkQuestion entity.
func (tqbu *TkQuestionBankUpdate) ClearQuestions() *TkQuestionBankUpdate {
	tqbu.mutation.ClearQuestions()
	return tqbu
}

// RemoveQuestionIDs removes the "questions" edge to TkQuestion entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveQuestionIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveQuestionIDs(ids...)
	return tqbu
}

// RemoveQuestions removes "questions" edges to TkQuestion entities.
func (tqbu *TkQuestionBankUpdate) RemoveQuestions(t ...*TkQuestion) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.RemoveQuestionIDs(ids...)
}

// ClearExamPapers clears all "exam_papers" edges to the TkExamPaper entity.
func (tqbu *TkQuestionBankUpdate) ClearExamPapers() *TkQuestionBankUpdate {
	tqbu.mutation.ClearExamPapers()
	return tqbu
}

// RemoveExamPaperIDs removes the "exam_papers" edge to TkExamPaper entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveExamPaperIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveExamPaperIDs(ids...)
	return tqbu
}

// RemoveExamPapers removes "exam_papers" edges to TkExamPaper entities.
func (tqbu *TkQuestionBankUpdate) RemoveExamPapers(t ...*TkExamPaper) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.RemoveExamPaperIDs(ids...)
}

// ClearExamQuestionTypes clears all "exam_question_types" edges to the TkExamQuestionType entity.
func (tqbu *TkQuestionBankUpdate) ClearExamQuestionTypes() *TkQuestionBankUpdate {
	tqbu.mutation.ClearExamQuestionTypes()
	return tqbu
}

// RemoveExamQuestionTypeIDs removes the "exam_question_types" edge to TkExamQuestionType entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveExamQuestionTypeIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveExamQuestionTypeIDs(ids...)
	return tqbu
}

// RemoveExamQuestionTypes removes "exam_question_types" edges to TkExamQuestionType entities.
func (tqbu *TkQuestionBankUpdate) RemoveExamQuestionTypes(t ...*TkExamQuestionType) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.RemoveExamQuestionTypeIDs(ids...)
}

// ClearUserQuestionBank clears all "user_question_bank" edges to the TkUserQuestionBankRecord entity.
func (tqbu *TkQuestionBankUpdate) ClearUserQuestionBank() *TkQuestionBankUpdate {
	tqbu.mutation.ClearUserQuestionBank()
	return tqbu
}

// RemoveUserQuestionBankIDs removes the "user_question_bank" edge to TkUserQuestionBankRecord entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveUserQuestionBankIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveUserQuestionBankIDs(ids...)
	return tqbu
}

// RemoveUserQuestionBank removes "user_question_bank" edges to TkUserQuestionBankRecord entities.
func (tqbu *TkQuestionBankUpdate) RemoveUserQuestionBank(t ...*TkUserQuestionBankRecord) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.RemoveUserQuestionBankIDs(ids...)
}

// ClearUserBankRecords clears all "user_bank_records" edges to the TkUserQuestionRecord entity.
func (tqbu *TkQuestionBankUpdate) ClearUserBankRecords() *TkQuestionBankUpdate {
	tqbu.mutation.ClearUserBankRecords()
	return tqbu
}

// RemoveUserBankRecordIDs removes the "user_bank_records" edge to TkUserQuestionRecord entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveUserBankRecordIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveUserBankRecordIDs(ids...)
	return tqbu
}

// RemoveUserBankRecords removes "user_bank_records" edges to TkUserQuestionRecord entities.
func (tqbu *TkQuestionBankUpdate) RemoveUserBankRecords(t ...*TkUserQuestionRecord) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.RemoveUserBankRecordIDs(ids...)
}

// ClearKnowledgePoints clears all "knowledge_points" edges to the TkKnowledgePoint entity.
func (tqbu *TkQuestionBankUpdate) ClearKnowledgePoints() *TkQuestionBankUpdate {
	tqbu.mutation.ClearKnowledgePoints()
	return tqbu
}

// RemoveKnowledgePointIDs removes the "knowledge_points" edge to TkKnowledgePoint entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveKnowledgePointIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveKnowledgePointIDs(ids...)
	return tqbu
}

// RemoveKnowledgePoints removes "knowledge_points" edges to TkKnowledgePoint entities.
func (tqbu *TkQuestionBankUpdate) RemoveKnowledgePoints(t ...*TkKnowledgePoint) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.RemoveKnowledgePointIDs(ids...)
}

// ClearCityQuestionBanks clears all "city_question_banks" edges to the TkQuestionBankCity entity.
func (tqbu *TkQuestionBankUpdate) ClearCityQuestionBanks() *TkQuestionBankUpdate {
	tqbu.mutation.ClearCityQuestionBanks()
	return tqbu
}

// RemoveCityQuestionBankIDs removes the "city_question_banks" edge to TkQuestionBankCity entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveCityQuestionBankIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveCityQuestionBankIDs(ids...)
	return tqbu
}

// RemoveCityQuestionBanks removes "city_question_banks" edges to TkQuestionBankCity entities.
func (tqbu *TkQuestionBankUpdate) RemoveCityQuestionBanks(t ...*TkQuestionBankCity) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.RemoveCityQuestionBankIDs(ids...)
}

// ClearMajorQuestionBanks clears all "major_question_banks" edges to the TkQuestionBankMajor entity.
func (tqbu *TkQuestionBankUpdate) ClearMajorQuestionBanks() *TkQuestionBankUpdate {
	tqbu.mutation.ClearMajorQuestionBanks()
	return tqbu
}

// RemoveMajorQuestionBankIDs removes the "major_question_banks" edge to TkQuestionBankMajor entities by IDs.
func (tqbu *TkQuestionBankUpdate) RemoveMajorQuestionBankIDs(ids ...int) *TkQuestionBankUpdate {
	tqbu.mutation.RemoveMajorQuestionBankIDs(ids...)
	return tqbu
}

// RemoveMajorQuestionBanks removes "major_question_banks" edges to TkQuestionBankMajor entities.
func (tqbu *TkQuestionBankUpdate) RemoveMajorQuestionBanks(t ...*TkQuestionBankMajor) *TkQuestionBankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbu.RemoveMajorQuestionBankIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqbu *TkQuestionBankUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tqbu.defaults()
	if len(tqbu.hooks) == 0 {
		affected, err = tqbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionBankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqbu.mutation = mutation
			affected, err = tqbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tqbu.hooks) - 1; i >= 0; i-- {
			mut = tqbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqbu *TkQuestionBankUpdate) SaveX(ctx context.Context) int {
	affected, err := tqbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqbu *TkQuestionBankUpdate) Exec(ctx context.Context) error {
	_, err := tqbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqbu *TkQuestionBankUpdate) ExecX(ctx context.Context) {
	if err := tqbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqbu *TkQuestionBankUpdate) defaults() {
	if _, ok := tqbu.mutation.UpdatedAt(); !ok && !tqbu.mutation.UpdatedAtCleared() {
		v := tkquestionbank.UpdateDefaultUpdatedAt()
		tqbu.mutation.SetUpdatedAt(v)
	}
}

func (tqbu *TkQuestionBankUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionbank.Table,
			Columns: tkquestionbank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionbank.FieldID,
			},
		},
	}
	if ps := tqbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqbu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionbank.FieldUUID,
		})
	}
	if tqbu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbank.FieldCreatedAt,
		})
	}
	if value, ok := tqbu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbank.FieldUpdatedAt,
		})
	}
	if tqbu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbank.FieldUpdatedAt,
		})
	}
	if value, ok := tqbu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbank.FieldDeletedAt,
		})
	}
	if tqbu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbank.FieldDeletedAt,
		})
	}
	if value, ok := tqbu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionbank.FieldName,
		})
	}
	if value, ok := tqbu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionbank.FieldStatus,
		})
	}
	if value, ok := tqbu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionbank.FieldStatus,
		})
	}
	if value, ok := tqbu.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkquestionbank.FieldQuestionCount,
		})
	}
	if value, ok := tqbu.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkquestionbank.FieldQuestionCount,
		})
	}
	if tqbu.mutation.ItemCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.ItemCategoryTable,
			Columns: []string{tkquestionbank.ItemCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.ItemCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.ItemCategoryTable,
			Columns: []string{tkquestionbank.ItemCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.LevelTable,
			Columns: []string{tkquestionbank.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: level.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.LevelTable,
			Columns: []string{tkquestionbank.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: level.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.AdminTable,
			Columns: []string{tkquestionbank.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.AdminTable,
			Columns: []string{tkquestionbank.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.QuestionChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionChaptersTable,
			Columns: []string{tkquestionbank.QuestionChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedQuestionChaptersIDs(); len(nodes) > 0 && !tqbu.mutation.QuestionChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionChaptersTable,
			Columns: []string{tkquestionbank.QuestionChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.QuestionChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionChaptersTable,
			Columns: []string{tkquestionbank.QuestionChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.QuestionBankCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionBankCoursesTable,
			Columns: []string{tkquestionbank.QuestionBankCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedQuestionBankCoursesIDs(); len(nodes) > 0 && !tqbu.mutation.QuestionBankCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionBankCoursesTable,
			Columns: []string{tkquestionbank.QuestionBankCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.QuestionBankCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionBankCoursesTable,
			Columns: []string{tkquestionbank.QuestionBankCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionsTable,
			Columns: []string{tkquestionbank.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !tqbu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionsTable,
			Columns: []string{tkquestionbank.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionsTable,
			Columns: []string{tkquestionbank.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.ExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamPapersTable,
			Columns: []string{tkquestionbank.ExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedExamPapersIDs(); len(nodes) > 0 && !tqbu.mutation.ExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamPapersTable,
			Columns: []string{tkquestionbank.ExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.ExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamPapersTable,
			Columns: []string{tkquestionbank.ExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.ExamQuestionTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamQuestionTypesTable,
			Columns: []string{tkquestionbank.ExamQuestionTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexamquestiontype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedExamQuestionTypesIDs(); len(nodes) > 0 && !tqbu.mutation.ExamQuestionTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamQuestionTypesTable,
			Columns: []string{tkquestionbank.ExamQuestionTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexamquestiontype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.ExamQuestionTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamQuestionTypesTable,
			Columns: []string{tkquestionbank.ExamQuestionTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexamquestiontype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.UserQuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserQuestionBankTable,
			Columns: []string{tkquestionbank.UserQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedUserQuestionBankIDs(); len(nodes) > 0 && !tqbu.mutation.UserQuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserQuestionBankTable,
			Columns: []string{tkquestionbank.UserQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.UserQuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserQuestionBankTable,
			Columns: []string{tkquestionbank.UserQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.UserBankRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserBankRecordsTable,
			Columns: []string{tkquestionbank.UserBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedUserBankRecordsIDs(); len(nodes) > 0 && !tqbu.mutation.UserBankRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserBankRecordsTable,
			Columns: []string{tkquestionbank.UserBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.UserBankRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserBankRecordsTable,
			Columns: []string{tkquestionbank.UserBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.KnowledgePointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.KnowledgePointsTable,
			Columns: []string{tkquestionbank.KnowledgePointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkknowledgepoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedKnowledgePointsIDs(); len(nodes) > 0 && !tqbu.mutation.KnowledgePointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.KnowledgePointsTable,
			Columns: []string{tkquestionbank.KnowledgePointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkknowledgepoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.KnowledgePointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.KnowledgePointsTable,
			Columns: []string{tkquestionbank.KnowledgePointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkknowledgepoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.CityQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.CityQuestionBanksTable,
			Columns: []string{tkquestionbank.CityQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedCityQuestionBanksIDs(); len(nodes) > 0 && !tqbu.mutation.CityQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.CityQuestionBanksTable,
			Columns: []string{tkquestionbank.CityQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.CityQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.CityQuestionBanksTable,
			Columns: []string{tkquestionbank.CityQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbu.mutation.MajorQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.MajorQuestionBanksTable,
			Columns: []string{tkquestionbank.MajorQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankmajor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.RemovedMajorQuestionBanksIDs(); len(nodes) > 0 && !tqbu.mutation.MajorQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.MajorQuestionBanksTable,
			Columns: []string{tkquestionbank.MajorQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankmajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbu.mutation.MajorQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.MajorQuestionBanksTable,
			Columns: []string{tkquestionbank.MajorQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankmajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionbank.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkQuestionBankUpdateOne is the builder for updating a single TkQuestionBank entity.
type TkQuestionBankUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkQuestionBankMutation
}

// SetUUID sets the "uuid" field.
func (tqbuo *TkQuestionBankUpdateOne) SetUUID(s string) *TkQuestionBankUpdateOne {
	tqbuo.mutation.SetUUID(s)
	return tqbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tqbuo *TkQuestionBankUpdateOne) SetUpdatedAt(t time.Time) *TkQuestionBankUpdateOne {
	tqbuo.mutation.SetUpdatedAt(t)
	return tqbuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqbuo *TkQuestionBankUpdateOne) ClearUpdatedAt() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearUpdatedAt()
	return tqbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tqbuo *TkQuestionBankUpdateOne) SetDeletedAt(t time.Time) *TkQuestionBankUpdateOne {
	tqbuo.mutation.SetDeletedAt(t)
	return tqbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqbuo *TkQuestionBankUpdateOne) SetNillableDeletedAt(t *time.Time) *TkQuestionBankUpdateOne {
	if t != nil {
		tqbuo.SetDeletedAt(*t)
	}
	return tqbuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqbuo *TkQuestionBankUpdateOne) ClearDeletedAt() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearDeletedAt()
	return tqbuo
}

// SetName sets the "name" field.
func (tqbuo *TkQuestionBankUpdateOne) SetName(s string) *TkQuestionBankUpdateOne {
	tqbuo.mutation.SetName(s)
	return tqbuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tqbuo *TkQuestionBankUpdateOne) SetNillableName(s *string) *TkQuestionBankUpdateOne {
	if s != nil {
		tqbuo.SetName(*s)
	}
	return tqbuo
}

// SetStatus sets the "status" field.
func (tqbuo *TkQuestionBankUpdateOne) SetStatus(u uint8) *TkQuestionBankUpdateOne {
	tqbuo.mutation.ResetStatus()
	tqbuo.mutation.SetStatus(u)
	return tqbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tqbuo *TkQuestionBankUpdateOne) SetNillableStatus(u *uint8) *TkQuestionBankUpdateOne {
	if u != nil {
		tqbuo.SetStatus(*u)
	}
	return tqbuo
}

// AddStatus adds u to the "status" field.
func (tqbuo *TkQuestionBankUpdateOne) AddStatus(u uint8) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddStatus(u)
	return tqbuo
}

// SetQuestionCount sets the "question_count" field.
func (tqbuo *TkQuestionBankUpdateOne) SetQuestionCount(i int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.ResetQuestionCount()
	tqbuo.mutation.SetQuestionCount(i)
	return tqbuo
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tqbuo *TkQuestionBankUpdateOne) SetNillableQuestionCount(i *int) *TkQuestionBankUpdateOne {
	if i != nil {
		tqbuo.SetQuestionCount(*i)
	}
	return tqbuo
}

// AddQuestionCount adds i to the "question_count" field.
func (tqbuo *TkQuestionBankUpdateOne) AddQuestionCount(i int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddQuestionCount(i)
	return tqbuo
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (tqbuo *TkQuestionBankUpdateOne) SetCreatedAdminID(i int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.ResetCreatedAdminID()
	tqbuo.mutation.SetCreatedAdminID(i)
	return tqbuo
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (tqbuo *TkQuestionBankUpdateOne) SetNillableCreatedAdminID(i *int) *TkQuestionBankUpdateOne {
	if i != nil {
		tqbuo.SetCreatedAdminID(*i)
	}
	return tqbuo
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (tqbuo *TkQuestionBankUpdateOne) ClearCreatedAdminID() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearCreatedAdminID()
	return tqbuo
}

// SetItemCategoryID sets the "item_category_id" field.
func (tqbuo *TkQuestionBankUpdateOne) SetItemCategoryID(i int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.ResetItemCategoryID()
	tqbuo.mutation.SetItemCategoryID(i)
	return tqbuo
}

// SetNillableItemCategoryID sets the "item_category_id" field if the given value is not nil.
func (tqbuo *TkQuestionBankUpdateOne) SetNillableItemCategoryID(i *int) *TkQuestionBankUpdateOne {
	if i != nil {
		tqbuo.SetItemCategoryID(*i)
	}
	return tqbuo
}

// ClearItemCategoryID clears the value of the "item_category_id" field.
func (tqbuo *TkQuestionBankUpdateOne) ClearItemCategoryID() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearItemCategoryID()
	return tqbuo
}

// SetLevelID sets the "level_id" field.
func (tqbuo *TkQuestionBankUpdateOne) SetLevelID(i int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.ResetLevelID()
	tqbuo.mutation.SetLevelID(i)
	return tqbuo
}

// SetNillableLevelID sets the "level_id" field if the given value is not nil.
func (tqbuo *TkQuestionBankUpdateOne) SetNillableLevelID(i *int) *TkQuestionBankUpdateOne {
	if i != nil {
		tqbuo.SetLevelID(*i)
	}
	return tqbuo
}

// ClearLevelID clears the value of the "level_id" field.
func (tqbuo *TkQuestionBankUpdateOne) ClearLevelID() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearLevelID()
	return tqbuo
}

// SetItemCategory sets the "item_category" edge to the ItemCategory entity.
func (tqbuo *TkQuestionBankUpdateOne) SetItemCategory(i *ItemCategory) *TkQuestionBankUpdateOne {
	return tqbuo.SetItemCategoryID(i.ID)
}

// SetLevel sets the "level" edge to the Level entity.
func (tqbuo *TkQuestionBankUpdateOne) SetLevel(l *Level) *TkQuestionBankUpdateOne {
	return tqbuo.SetLevelID(l.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (tqbuo *TkQuestionBankUpdateOne) SetAdminID(id int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.SetAdminID(id)
	return tqbuo
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (tqbuo *TkQuestionBankUpdateOne) SetNillableAdminID(id *int) *TkQuestionBankUpdateOne {
	if id != nil {
		tqbuo = tqbuo.SetAdminID(*id)
	}
	return tqbuo
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (tqbuo *TkQuestionBankUpdateOne) SetAdmin(a *Admin) *TkQuestionBankUpdateOne {
	return tqbuo.SetAdminID(a.ID)
}

// AddQuestionChapterIDs adds the "question_chapters" edge to the TkChapter entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddQuestionChapterIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddQuestionChapterIDs(ids...)
	return tqbuo
}

// AddQuestionChapters adds the "question_chapters" edges to the TkChapter entity.
func (tqbuo *TkQuestionBankUpdateOne) AddQuestionChapters(t ...*TkChapter) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.AddQuestionChapterIDs(ids...)
}

// AddQuestionBankCourseIDs adds the "question_bank_courses" edge to the KcCourse entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddQuestionBankCourseIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddQuestionBankCourseIDs(ids...)
	return tqbuo
}

// AddQuestionBankCourses adds the "question_bank_courses" edges to the KcCourse entity.
func (tqbuo *TkQuestionBankUpdateOne) AddQuestionBankCourses(k ...*KcCourse) *TkQuestionBankUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tqbuo.AddQuestionBankCourseIDs(ids...)
}

// AddQuestionIDs adds the "questions" edge to the TkQuestion entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddQuestionIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddQuestionIDs(ids...)
	return tqbuo
}

// AddQuestions adds the "questions" edges to the TkQuestion entity.
func (tqbuo *TkQuestionBankUpdateOne) AddQuestions(t ...*TkQuestion) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.AddQuestionIDs(ids...)
}

// AddExamPaperIDs adds the "exam_papers" edge to the TkExamPaper entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddExamPaperIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddExamPaperIDs(ids...)
	return tqbuo
}

// AddExamPapers adds the "exam_papers" edges to the TkExamPaper entity.
func (tqbuo *TkQuestionBankUpdateOne) AddExamPapers(t ...*TkExamPaper) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.AddExamPaperIDs(ids...)
}

// AddExamQuestionTypeIDs adds the "exam_question_types" edge to the TkExamQuestionType entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddExamQuestionTypeIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddExamQuestionTypeIDs(ids...)
	return tqbuo
}

// AddExamQuestionTypes adds the "exam_question_types" edges to the TkExamQuestionType entity.
func (tqbuo *TkQuestionBankUpdateOne) AddExamQuestionTypes(t ...*TkExamQuestionType) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.AddExamQuestionTypeIDs(ids...)
}

// AddUserQuestionBankIDs adds the "user_question_bank" edge to the TkUserQuestionBankRecord entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddUserQuestionBankIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddUserQuestionBankIDs(ids...)
	return tqbuo
}

// AddUserQuestionBank adds the "user_question_bank" edges to the TkUserQuestionBankRecord entity.
func (tqbuo *TkQuestionBankUpdateOne) AddUserQuestionBank(t ...*TkUserQuestionBankRecord) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.AddUserQuestionBankIDs(ids...)
}

// AddUserBankRecordIDs adds the "user_bank_records" edge to the TkUserQuestionRecord entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddUserBankRecordIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddUserBankRecordIDs(ids...)
	return tqbuo
}

// AddUserBankRecords adds the "user_bank_records" edges to the TkUserQuestionRecord entity.
func (tqbuo *TkQuestionBankUpdateOne) AddUserBankRecords(t ...*TkUserQuestionRecord) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.AddUserBankRecordIDs(ids...)
}

// AddKnowledgePointIDs adds the "knowledge_points" edge to the TkKnowledgePoint entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddKnowledgePointIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddKnowledgePointIDs(ids...)
	return tqbuo
}

// AddKnowledgePoints adds the "knowledge_points" edges to the TkKnowledgePoint entity.
func (tqbuo *TkQuestionBankUpdateOne) AddKnowledgePoints(t ...*TkKnowledgePoint) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.AddKnowledgePointIDs(ids...)
}

// AddCityQuestionBankIDs adds the "city_question_banks" edge to the TkQuestionBankCity entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddCityQuestionBankIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddCityQuestionBankIDs(ids...)
	return tqbuo
}

// AddCityQuestionBanks adds the "city_question_banks" edges to the TkQuestionBankCity entity.
func (tqbuo *TkQuestionBankUpdateOne) AddCityQuestionBanks(t ...*TkQuestionBankCity) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.AddCityQuestionBankIDs(ids...)
}

// AddMajorQuestionBankIDs adds the "major_question_banks" edge to the TkQuestionBankMajor entity by IDs.
func (tqbuo *TkQuestionBankUpdateOne) AddMajorQuestionBankIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.AddMajorQuestionBankIDs(ids...)
	return tqbuo
}

// AddMajorQuestionBanks adds the "major_question_banks" edges to the TkQuestionBankMajor entity.
func (tqbuo *TkQuestionBankUpdateOne) AddMajorQuestionBanks(t ...*TkQuestionBankMajor) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.AddMajorQuestionBankIDs(ids...)
}

// Mutation returns the TkQuestionBankMutation object of the builder.
func (tqbuo *TkQuestionBankUpdateOne) Mutation() *TkQuestionBankMutation {
	return tqbuo.mutation
}

// ClearItemCategory clears the "item_category" edge to the ItemCategory entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearItemCategory() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearItemCategory()
	return tqbuo
}

// ClearLevel clears the "level" edge to the Level entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearLevel() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearLevel()
	return tqbuo
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearAdmin() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearAdmin()
	return tqbuo
}

// ClearQuestionChapters clears all "question_chapters" edges to the TkChapter entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearQuestionChapters() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearQuestionChapters()
	return tqbuo
}

// RemoveQuestionChapterIDs removes the "question_chapters" edge to TkChapter entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveQuestionChapterIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveQuestionChapterIDs(ids...)
	return tqbuo
}

// RemoveQuestionChapters removes "question_chapters" edges to TkChapter entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveQuestionChapters(t ...*TkChapter) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.RemoveQuestionChapterIDs(ids...)
}

// ClearQuestionBankCourses clears all "question_bank_courses" edges to the KcCourse entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearQuestionBankCourses() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearQuestionBankCourses()
	return tqbuo
}

// RemoveQuestionBankCourseIDs removes the "question_bank_courses" edge to KcCourse entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveQuestionBankCourseIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveQuestionBankCourseIDs(ids...)
	return tqbuo
}

// RemoveQuestionBankCourses removes "question_bank_courses" edges to KcCourse entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveQuestionBankCourses(k ...*KcCourse) *TkQuestionBankUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tqbuo.RemoveQuestionBankCourseIDs(ids...)
}

// ClearQuestions clears all "questions" edges to the TkQuestion entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearQuestions() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearQuestions()
	return tqbuo
}

// RemoveQuestionIDs removes the "questions" edge to TkQuestion entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveQuestionIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveQuestionIDs(ids...)
	return tqbuo
}

// RemoveQuestions removes "questions" edges to TkQuestion entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveQuestions(t ...*TkQuestion) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.RemoveQuestionIDs(ids...)
}

// ClearExamPapers clears all "exam_papers" edges to the TkExamPaper entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearExamPapers() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearExamPapers()
	return tqbuo
}

// RemoveExamPaperIDs removes the "exam_papers" edge to TkExamPaper entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveExamPaperIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveExamPaperIDs(ids...)
	return tqbuo
}

// RemoveExamPapers removes "exam_papers" edges to TkExamPaper entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveExamPapers(t ...*TkExamPaper) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.RemoveExamPaperIDs(ids...)
}

// ClearExamQuestionTypes clears all "exam_question_types" edges to the TkExamQuestionType entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearExamQuestionTypes() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearExamQuestionTypes()
	return tqbuo
}

// RemoveExamQuestionTypeIDs removes the "exam_question_types" edge to TkExamQuestionType entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveExamQuestionTypeIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveExamQuestionTypeIDs(ids...)
	return tqbuo
}

// RemoveExamQuestionTypes removes "exam_question_types" edges to TkExamQuestionType entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveExamQuestionTypes(t ...*TkExamQuestionType) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.RemoveExamQuestionTypeIDs(ids...)
}

// ClearUserQuestionBank clears all "user_question_bank" edges to the TkUserQuestionBankRecord entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearUserQuestionBank() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearUserQuestionBank()
	return tqbuo
}

// RemoveUserQuestionBankIDs removes the "user_question_bank" edge to TkUserQuestionBankRecord entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveUserQuestionBankIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveUserQuestionBankIDs(ids...)
	return tqbuo
}

// RemoveUserQuestionBank removes "user_question_bank" edges to TkUserQuestionBankRecord entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveUserQuestionBank(t ...*TkUserQuestionBankRecord) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.RemoveUserQuestionBankIDs(ids...)
}

// ClearUserBankRecords clears all "user_bank_records" edges to the TkUserQuestionRecord entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearUserBankRecords() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearUserBankRecords()
	return tqbuo
}

// RemoveUserBankRecordIDs removes the "user_bank_records" edge to TkUserQuestionRecord entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveUserBankRecordIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveUserBankRecordIDs(ids...)
	return tqbuo
}

// RemoveUserBankRecords removes "user_bank_records" edges to TkUserQuestionRecord entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveUserBankRecords(t ...*TkUserQuestionRecord) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.RemoveUserBankRecordIDs(ids...)
}

// ClearKnowledgePoints clears all "knowledge_points" edges to the TkKnowledgePoint entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearKnowledgePoints() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearKnowledgePoints()
	return tqbuo
}

// RemoveKnowledgePointIDs removes the "knowledge_points" edge to TkKnowledgePoint entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveKnowledgePointIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveKnowledgePointIDs(ids...)
	return tqbuo
}

// RemoveKnowledgePoints removes "knowledge_points" edges to TkKnowledgePoint entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveKnowledgePoints(t ...*TkKnowledgePoint) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.RemoveKnowledgePointIDs(ids...)
}

// ClearCityQuestionBanks clears all "city_question_banks" edges to the TkQuestionBankCity entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearCityQuestionBanks() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearCityQuestionBanks()
	return tqbuo
}

// RemoveCityQuestionBankIDs removes the "city_question_banks" edge to TkQuestionBankCity entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveCityQuestionBankIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveCityQuestionBankIDs(ids...)
	return tqbuo
}

// RemoveCityQuestionBanks removes "city_question_banks" edges to TkQuestionBankCity entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveCityQuestionBanks(t ...*TkQuestionBankCity) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.RemoveCityQuestionBankIDs(ids...)
}

// ClearMajorQuestionBanks clears all "major_question_banks" edges to the TkQuestionBankMajor entity.
func (tqbuo *TkQuestionBankUpdateOne) ClearMajorQuestionBanks() *TkQuestionBankUpdateOne {
	tqbuo.mutation.ClearMajorQuestionBanks()
	return tqbuo
}

// RemoveMajorQuestionBankIDs removes the "major_question_banks" edge to TkQuestionBankMajor entities by IDs.
func (tqbuo *TkQuestionBankUpdateOne) RemoveMajorQuestionBankIDs(ids ...int) *TkQuestionBankUpdateOne {
	tqbuo.mutation.RemoveMajorQuestionBankIDs(ids...)
	return tqbuo
}

// RemoveMajorQuestionBanks removes "major_question_banks" edges to TkQuestionBankMajor entities.
func (tqbuo *TkQuestionBankUpdateOne) RemoveMajorQuestionBanks(t ...*TkQuestionBankMajor) *TkQuestionBankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tqbuo.RemoveMajorQuestionBankIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tqbuo *TkQuestionBankUpdateOne) Select(field string, fields ...string) *TkQuestionBankUpdateOne {
	tqbuo.fields = append([]string{field}, fields...)
	return tqbuo
}

// Save executes the query and returns the updated TkQuestionBank entity.
func (tqbuo *TkQuestionBankUpdateOne) Save(ctx context.Context) (*TkQuestionBank, error) {
	var (
		err  error
		node *TkQuestionBank
	)
	tqbuo.defaults()
	if len(tqbuo.hooks) == 0 {
		node, err = tqbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionBankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqbuo.mutation = mutation
			node, err = tqbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tqbuo.hooks) - 1; i >= 0; i-- {
			mut = tqbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqbuo *TkQuestionBankUpdateOne) SaveX(ctx context.Context) *TkQuestionBank {
	node, err := tqbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tqbuo *TkQuestionBankUpdateOne) Exec(ctx context.Context) error {
	_, err := tqbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqbuo *TkQuestionBankUpdateOne) ExecX(ctx context.Context) {
	if err := tqbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqbuo *TkQuestionBankUpdateOne) defaults() {
	if _, ok := tqbuo.mutation.UpdatedAt(); !ok && !tqbuo.mutation.UpdatedAtCleared() {
		v := tkquestionbank.UpdateDefaultUpdatedAt()
		tqbuo.mutation.SetUpdatedAt(v)
	}
}

func (tqbuo *TkQuestionBankUpdateOne) sqlSave(ctx context.Context) (_node *TkQuestionBank, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionbank.Table,
			Columns: tkquestionbank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionbank.FieldID,
			},
		},
	}
	id, ok := tqbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkQuestionBank.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tqbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkquestionbank.FieldID)
		for _, f := range fields {
			if !tkquestionbank.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkquestionbank.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tqbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqbuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionbank.FieldUUID,
		})
	}
	if tqbuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbank.FieldCreatedAt,
		})
	}
	if value, ok := tqbuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbank.FieldUpdatedAt,
		})
	}
	if tqbuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbank.FieldUpdatedAt,
		})
	}
	if value, ok := tqbuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbank.FieldDeletedAt,
		})
	}
	if tqbuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbank.FieldDeletedAt,
		})
	}
	if value, ok := tqbuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionbank.FieldName,
		})
	}
	if value, ok := tqbuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionbank.FieldStatus,
		})
	}
	if value, ok := tqbuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionbank.FieldStatus,
		})
	}
	if value, ok := tqbuo.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkquestionbank.FieldQuestionCount,
		})
	}
	if value, ok := tqbuo.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkquestionbank.FieldQuestionCount,
		})
	}
	if tqbuo.mutation.ItemCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.ItemCategoryTable,
			Columns: []string{tkquestionbank.ItemCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.ItemCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.ItemCategoryTable,
			Columns: []string{tkquestionbank.ItemCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.LevelTable,
			Columns: []string{tkquestionbank.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: level.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.LevelTable,
			Columns: []string{tkquestionbank.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: level.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.AdminTable,
			Columns: []string{tkquestionbank.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbank.AdminTable,
			Columns: []string{tkquestionbank.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.QuestionChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionChaptersTable,
			Columns: []string{tkquestionbank.QuestionChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedQuestionChaptersIDs(); len(nodes) > 0 && !tqbuo.mutation.QuestionChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionChaptersTable,
			Columns: []string{tkquestionbank.QuestionChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.QuestionChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionChaptersTable,
			Columns: []string{tkquestionbank.QuestionChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.QuestionBankCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionBankCoursesTable,
			Columns: []string{tkquestionbank.QuestionBankCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedQuestionBankCoursesIDs(); len(nodes) > 0 && !tqbuo.mutation.QuestionBankCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionBankCoursesTable,
			Columns: []string{tkquestionbank.QuestionBankCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.QuestionBankCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionBankCoursesTable,
			Columns: []string{tkquestionbank.QuestionBankCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionsTable,
			Columns: []string{tkquestionbank.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !tqbuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionsTable,
			Columns: []string{tkquestionbank.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.QuestionsTable,
			Columns: []string{tkquestionbank.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.ExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamPapersTable,
			Columns: []string{tkquestionbank.ExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedExamPapersIDs(); len(nodes) > 0 && !tqbuo.mutation.ExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamPapersTable,
			Columns: []string{tkquestionbank.ExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.ExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamPapersTable,
			Columns: []string{tkquestionbank.ExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.ExamQuestionTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamQuestionTypesTable,
			Columns: []string{tkquestionbank.ExamQuestionTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexamquestiontype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedExamQuestionTypesIDs(); len(nodes) > 0 && !tqbuo.mutation.ExamQuestionTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamQuestionTypesTable,
			Columns: []string{tkquestionbank.ExamQuestionTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexamquestiontype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.ExamQuestionTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.ExamQuestionTypesTable,
			Columns: []string{tkquestionbank.ExamQuestionTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexamquestiontype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.UserQuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserQuestionBankTable,
			Columns: []string{tkquestionbank.UserQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedUserQuestionBankIDs(); len(nodes) > 0 && !tqbuo.mutation.UserQuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserQuestionBankTable,
			Columns: []string{tkquestionbank.UserQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.UserQuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserQuestionBankTable,
			Columns: []string{tkquestionbank.UserQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionbankrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.UserBankRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserBankRecordsTable,
			Columns: []string{tkquestionbank.UserBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedUserBankRecordsIDs(); len(nodes) > 0 && !tqbuo.mutation.UserBankRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserBankRecordsTable,
			Columns: []string{tkquestionbank.UserBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.UserBankRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.UserBankRecordsTable,
			Columns: []string{tkquestionbank.UserBankRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.KnowledgePointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.KnowledgePointsTable,
			Columns: []string{tkquestionbank.KnowledgePointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkknowledgepoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedKnowledgePointsIDs(); len(nodes) > 0 && !tqbuo.mutation.KnowledgePointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.KnowledgePointsTable,
			Columns: []string{tkquestionbank.KnowledgePointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkknowledgepoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.KnowledgePointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.KnowledgePointsTable,
			Columns: []string{tkquestionbank.KnowledgePointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkknowledgepoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.CityQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.CityQuestionBanksTable,
			Columns: []string{tkquestionbank.CityQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedCityQuestionBanksIDs(); len(nodes) > 0 && !tqbuo.mutation.CityQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.CityQuestionBanksTable,
			Columns: []string{tkquestionbank.CityQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.CityQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.CityQuestionBanksTable,
			Columns: []string{tkquestionbank.CityQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbuo.mutation.MajorQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.MajorQuestionBanksTable,
			Columns: []string{tkquestionbank.MajorQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankmajor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.RemovedMajorQuestionBanksIDs(); len(nodes) > 0 && !tqbuo.mutation.MajorQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.MajorQuestionBanksTable,
			Columns: []string{tkquestionbank.MajorQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankmajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbuo.mutation.MajorQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkquestionbank.MajorQuestionBanksTable,
			Columns: []string{tkquestionbank.MajorQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankmajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkQuestionBank{config: tqbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tqbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionbank.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/major"
	"tkserver/internal/store/ent/majordetail"
	"tkserver/internal/store/ent/majordetailtag"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MajorDetailUpdate is the builder for updating MajorDetail entities.
type MajorDetailUpdate struct {
	config
	hooks    []Hook
	mutation *MajorDetailMutation
}

// Where adds a new predicate for the MajorDetailUpdate builder.
func (mdu *MajorDetailUpdate) Where(ps ...predicate.MajorDetail) *MajorDetailUpdate {
	mdu.mutation.predicates = append(mdu.mutation.predicates, ps...)
	return mdu
}

// SetUUID sets the "uuid" field.
func (mdu *MajorDetailUpdate) SetUUID(s string) *MajorDetailUpdate {
	mdu.mutation.SetUUID(s)
	return mdu
}

// SetUpdatedAt sets the "updated_at" field.
func (mdu *MajorDetailUpdate) SetUpdatedAt(t time.Time) *MajorDetailUpdate {
	mdu.mutation.SetUpdatedAt(t)
	return mdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mdu *MajorDetailUpdate) ClearUpdatedAt() *MajorDetailUpdate {
	mdu.mutation.ClearUpdatedAt()
	return mdu
}

// SetDeletedAt sets the "deleted_at" field.
func (mdu *MajorDetailUpdate) SetDeletedAt(t time.Time) *MajorDetailUpdate {
	mdu.mutation.SetDeletedAt(t)
	return mdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableDeletedAt(t *time.Time) *MajorDetailUpdate {
	if t != nil {
		mdu.SetDeletedAt(*t)
	}
	return mdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mdu *MajorDetailUpdate) ClearDeletedAt() *MajorDetailUpdate {
	mdu.mutation.ClearDeletedAt()
	return mdu
}

// SetName sets the "name" field.
func (mdu *MajorDetailUpdate) SetName(s string) *MajorDetailUpdate {
	mdu.mutation.SetName(s)
	return mdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableName(s *string) *MajorDetailUpdate {
	if s != nil {
		mdu.SetName(*s)
	}
	return mdu
}

// SetDesc sets the "desc" field.
func (mdu *MajorDetailUpdate) SetDesc(s string) *MajorDetailUpdate {
	mdu.mutation.SetDesc(s)
	return mdu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableDesc(s *string) *MajorDetailUpdate {
	if s != nil {
		mdu.SetDesc(*s)
	}
	return mdu
}

// ClearDesc clears the value of the "desc" field.
func (mdu *MajorDetailUpdate) ClearDesc() *MajorDetailUpdate {
	mdu.mutation.ClearDesc()
	return mdu
}

// SetSubjectCount sets the "subject_count" field.
func (mdu *MajorDetailUpdate) SetSubjectCount(u uint8) *MajorDetailUpdate {
	mdu.mutation.ResetSubjectCount()
	mdu.mutation.SetSubjectCount(u)
	return mdu
}

// SetNillableSubjectCount sets the "subject_count" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableSubjectCount(u *uint8) *MajorDetailUpdate {
	if u != nil {
		mdu.SetSubjectCount(*u)
	}
	return mdu
}

// AddSubjectCount adds u to the "subject_count" field.
func (mdu *MajorDetailUpdate) AddSubjectCount(u uint8) *MajorDetailUpdate {
	mdu.mutation.AddSubjectCount(u)
	return mdu
}

// SetStar sets the "star" field.
func (mdu *MajorDetailUpdate) SetStar(s string) *MajorDetailUpdate {
	mdu.mutation.SetStar(s)
	return mdu
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableStar(s *string) *MajorDetailUpdate {
	if s != nil {
		mdu.SetStar(*s)
	}
	return mdu
}

// SetPassRate sets the "pass_rate" field.
func (mdu *MajorDetailUpdate) SetPassRate(u uint8) *MajorDetailUpdate {
	mdu.mutation.ResetPassRate()
	mdu.mutation.SetPassRate(u)
	return mdu
}

// SetNillablePassRate sets the "pass_rate" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillablePassRate(u *uint8) *MajorDetailUpdate {
	if u != nil {
		mdu.SetPassRate(*u)
	}
	return mdu
}

// AddPassRate adds u to the "pass_rate" field.
func (mdu *MajorDetailUpdate) AddPassRate(u uint8) *MajorDetailUpdate {
	mdu.mutation.AddPassRate(u)
	return mdu
}

// SetStudentCount sets the "student_count" field.
func (mdu *MajorDetailUpdate) SetStudentCount(u uint32) *MajorDetailUpdate {
	mdu.mutation.ResetStudentCount()
	mdu.mutation.SetStudentCount(u)
	return mdu
}

// SetNillableStudentCount sets the "student_count" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableStudentCount(u *uint32) *MajorDetailUpdate {
	if u != nil {
		mdu.SetStudentCount(*u)
	}
	return mdu
}

// AddStudentCount adds u to the "student_count" field.
func (mdu *MajorDetailUpdate) AddStudentCount(u uint32) *MajorDetailUpdate {
	mdu.mutation.AddStudentCount(u)
	return mdu
}

// SetStudyDuration sets the "study_duration" field.
func (mdu *MajorDetailUpdate) SetStudyDuration(u uint8) *MajorDetailUpdate {
	mdu.mutation.ResetStudyDuration()
	mdu.mutation.SetStudyDuration(u)
	return mdu
}

// SetNillableStudyDuration sets the "study_duration" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableStudyDuration(u *uint8) *MajorDetailUpdate {
	if u != nil {
		mdu.SetStudyDuration(*u)
	}
	return mdu
}

// AddStudyDuration adds u to the "study_duration" field.
func (mdu *MajorDetailUpdate) AddStudyDuration(u uint8) *MajorDetailUpdate {
	mdu.mutation.AddStudyDuration(u)
	return mdu
}

// SetMajorID sets the "major_id" field.
func (mdu *MajorDetailUpdate) SetMajorID(i int) *MajorDetailUpdate {
	mdu.mutation.ResetMajorID()
	mdu.mutation.SetMajorID(i)
	return mdu
}

// SetNillableMajorID sets the "major_id" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableMajorID(i *int) *MajorDetailUpdate {
	if i != nil {
		mdu.SetMajorID(*i)
	}
	return mdu
}

// ClearMajorID clears the value of the "major_id" field.
func (mdu *MajorDetailUpdate) ClearMajorID() *MajorDetailUpdate {
	mdu.mutation.ClearMajorID()
	return mdu
}

// SetCoverImgID sets the "cover_img_id" field.
func (mdu *MajorDetailUpdate) SetCoverImgID(i int) *MajorDetailUpdate {
	mdu.mutation.ResetCoverImgID()
	mdu.mutation.SetCoverImgID(i)
	return mdu
}

// SetNillableCoverImgID sets the "cover_img_id" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableCoverImgID(i *int) *MajorDetailUpdate {
	if i != nil {
		mdu.SetCoverImgID(*i)
	}
	return mdu
}

// ClearCoverImgID clears the value of the "cover_img_id" field.
func (mdu *MajorDetailUpdate) ClearCoverImgID() *MajorDetailUpdate {
	mdu.mutation.ClearCoverImgID()
	return mdu
}

// SetSubjectImgID sets the "subject_img_id" field.
func (mdu *MajorDetailUpdate) SetSubjectImgID(i int) *MajorDetailUpdate {
	mdu.mutation.ResetSubjectImgID()
	mdu.mutation.SetSubjectImgID(i)
	return mdu
}

// SetNillableSubjectImgID sets the "subject_img_id" field if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableSubjectImgID(i *int) *MajorDetailUpdate {
	if i != nil {
		mdu.SetSubjectImgID(*i)
	}
	return mdu
}

// ClearSubjectImgID clears the value of the "subject_img_id" field.
func (mdu *MajorDetailUpdate) ClearSubjectImgID() *MajorDetailUpdate {
	mdu.mutation.ClearSubjectImgID()
	return mdu
}

// AddMajorDetailTagIDs adds the "major_detail_tags" edge to the MajorDetailTag entity by IDs.
func (mdu *MajorDetailUpdate) AddMajorDetailTagIDs(ids ...int) *MajorDetailUpdate {
	mdu.mutation.AddMajorDetailTagIDs(ids...)
	return mdu
}

// AddMajorDetailTags adds the "major_detail_tags" edges to the MajorDetailTag entity.
func (mdu *MajorDetailUpdate) AddMajorDetailTags(m ...*MajorDetailTag) *MajorDetailUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mdu.AddMajorDetailTagIDs(ids...)
}

// SetCoverAttachmentID sets the "cover_attachment" edge to the Attachment entity by ID.
func (mdu *MajorDetailUpdate) SetCoverAttachmentID(id int) *MajorDetailUpdate {
	mdu.mutation.SetCoverAttachmentID(id)
	return mdu
}

// SetNillableCoverAttachmentID sets the "cover_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableCoverAttachmentID(id *int) *MajorDetailUpdate {
	if id != nil {
		mdu = mdu.SetCoverAttachmentID(*id)
	}
	return mdu
}

// SetCoverAttachment sets the "cover_attachment" edge to the Attachment entity.
func (mdu *MajorDetailUpdate) SetCoverAttachment(a *Attachment) *MajorDetailUpdate {
	return mdu.SetCoverAttachmentID(a.ID)
}

// SetSubjectAttachmentID sets the "subject_attachment" edge to the Attachment entity by ID.
func (mdu *MajorDetailUpdate) SetSubjectAttachmentID(id int) *MajorDetailUpdate {
	mdu.mutation.SetSubjectAttachmentID(id)
	return mdu
}

// SetNillableSubjectAttachmentID sets the "subject_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (mdu *MajorDetailUpdate) SetNillableSubjectAttachmentID(id *int) *MajorDetailUpdate {
	if id != nil {
		mdu = mdu.SetSubjectAttachmentID(*id)
	}
	return mdu
}

// SetSubjectAttachment sets the "subject_attachment" edge to the Attachment entity.
func (mdu *MajorDetailUpdate) SetSubjectAttachment(a *Attachment) *MajorDetailUpdate {
	return mdu.SetSubjectAttachmentID(a.ID)
}

// AddTeacherAttachmentIDs adds the "teacher_attachments" edge to the Attachment entity by IDs.
func (mdu *MajorDetailUpdate) AddTeacherAttachmentIDs(ids ...int) *MajorDetailUpdate {
	mdu.mutation.AddTeacherAttachmentIDs(ids...)
	return mdu
}

// AddTeacherAttachments adds the "teacher_attachments" edges to the Attachment entity.
func (mdu *MajorDetailUpdate) AddTeacherAttachments(a ...*Attachment) *MajorDetailUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mdu.AddTeacherAttachmentIDs(ids...)
}

// AddServiceAttachmentIDs adds the "service_attachments" edge to the Attachment entity by IDs.
func (mdu *MajorDetailUpdate) AddServiceAttachmentIDs(ids ...int) *MajorDetailUpdate {
	mdu.mutation.AddServiceAttachmentIDs(ids...)
	return mdu
}

// AddServiceAttachments adds the "service_attachments" edges to the Attachment entity.
func (mdu *MajorDetailUpdate) AddServiceAttachments(a ...*Attachment) *MajorDetailUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mdu.AddServiceAttachmentIDs(ids...)
}

// SetMajor sets the "major" edge to the Major entity.
func (mdu *MajorDetailUpdate) SetMajor(m *Major) *MajorDetailUpdate {
	return mdu.SetMajorID(m.ID)
}

// Mutation returns the MajorDetailMutation object of the builder.
func (mdu *MajorDetailUpdate) Mutation() *MajorDetailMutation {
	return mdu.mutation
}

// ClearMajorDetailTags clears all "major_detail_tags" edges to the MajorDetailTag entity.
func (mdu *MajorDetailUpdate) ClearMajorDetailTags() *MajorDetailUpdate {
	mdu.mutation.ClearMajorDetailTags()
	return mdu
}

// RemoveMajorDetailTagIDs removes the "major_detail_tags" edge to MajorDetailTag entities by IDs.
func (mdu *MajorDetailUpdate) RemoveMajorDetailTagIDs(ids ...int) *MajorDetailUpdate {
	mdu.mutation.RemoveMajorDetailTagIDs(ids...)
	return mdu
}

// RemoveMajorDetailTags removes "major_detail_tags" edges to MajorDetailTag entities.
func (mdu *MajorDetailUpdate) RemoveMajorDetailTags(m ...*MajorDetailTag) *MajorDetailUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mdu.RemoveMajorDetailTagIDs(ids...)
}

// ClearCoverAttachment clears the "cover_attachment" edge to the Attachment entity.
func (mdu *MajorDetailUpdate) ClearCoverAttachment() *MajorDetailUpdate {
	mdu.mutation.ClearCoverAttachment()
	return mdu
}

// ClearSubjectAttachment clears the "subject_attachment" edge to the Attachment entity.
func (mdu *MajorDetailUpdate) ClearSubjectAttachment() *MajorDetailUpdate {
	mdu.mutation.ClearSubjectAttachment()
	return mdu
}

// ClearTeacherAttachments clears all "teacher_attachments" edges to the Attachment entity.
func (mdu *MajorDetailUpdate) ClearTeacherAttachments() *MajorDetailUpdate {
	mdu.mutation.ClearTeacherAttachments()
	return mdu
}

// RemoveTeacherAttachmentIDs removes the "teacher_attachments" edge to Attachment entities by IDs.
func (mdu *MajorDetailUpdate) RemoveTeacherAttachmentIDs(ids ...int) *MajorDetailUpdate {
	mdu.mutation.RemoveTeacherAttachmentIDs(ids...)
	return mdu
}

// RemoveTeacherAttachments removes "teacher_attachments" edges to Attachment entities.
func (mdu *MajorDetailUpdate) RemoveTeacherAttachments(a ...*Attachment) *MajorDetailUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mdu.RemoveTeacherAttachmentIDs(ids...)
}

// ClearServiceAttachments clears all "service_attachments" edges to the Attachment entity.
func (mdu *MajorDetailUpdate) ClearServiceAttachments() *MajorDetailUpdate {
	mdu.mutation.ClearServiceAttachments()
	return mdu
}

// RemoveServiceAttachmentIDs removes the "service_attachments" edge to Attachment entities by IDs.
func (mdu *MajorDetailUpdate) RemoveServiceAttachmentIDs(ids ...int) *MajorDetailUpdate {
	mdu.mutation.RemoveServiceAttachmentIDs(ids...)
	return mdu
}

// RemoveServiceAttachments removes "service_attachments" edges to Attachment entities.
func (mdu *MajorDetailUpdate) RemoveServiceAttachments(a ...*Attachment) *MajorDetailUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mdu.RemoveServiceAttachmentIDs(ids...)
}

// ClearMajor clears the "major" edge to the Major entity.
func (mdu *MajorDetailUpdate) ClearMajor() *MajorDetailUpdate {
	mdu.mutation.ClearMajor()
	return mdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mdu *MajorDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mdu.defaults()
	if len(mdu.hooks) == 0 {
		affected, err = mdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MajorDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mdu.mutation = mutation
			affected, err = mdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mdu.hooks) - 1; i >= 0; i-- {
			mut = mdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mdu *MajorDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := mdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdu *MajorDetailUpdate) Exec(ctx context.Context) error {
	_, err := mdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdu *MajorDetailUpdate) ExecX(ctx context.Context) {
	if err := mdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mdu *MajorDetailUpdate) defaults() {
	if _, ok := mdu.mutation.UpdatedAt(); !ok && !mdu.mutation.UpdatedAtCleared() {
		v := majordetail.UpdateDefaultUpdatedAt()
		mdu.mutation.SetUpdatedAt(v)
	}
}

func (mdu *MajorDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   majordetail.Table,
			Columns: majordetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: majordetail.FieldID,
			},
		},
	}
	if ps := mdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mdu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldUUID,
		})
	}
	if mdu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetail.FieldCreatedAt,
		})
	}
	if value, ok := mdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetail.FieldUpdatedAt,
		})
	}
	if mdu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetail.FieldUpdatedAt,
		})
	}
	if value, ok := mdu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetail.FieldDeletedAt,
		})
	}
	if mdu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetail.FieldDeletedAt,
		})
	}
	if value, ok := mdu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldName,
		})
	}
	if value, ok := mdu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldDesc,
		})
	}
	if mdu.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: majordetail.FieldDesc,
		})
	}
	if value, ok := mdu.mutation.SubjectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldSubjectCount,
		})
	}
	if value, ok := mdu.mutation.AddedSubjectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldSubjectCount,
		})
	}
	if value, ok := mdu.mutation.Star(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldStar,
		})
	}
	if value, ok := mdu.mutation.PassRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldPassRate,
		})
	}
	if value, ok := mdu.mutation.AddedPassRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldPassRate,
		})
	}
	if value, ok := mdu.mutation.StudentCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: majordetail.FieldStudentCount,
		})
	}
	if value, ok := mdu.mutation.AddedStudentCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: majordetail.FieldStudentCount,
		})
	}
	if value, ok := mdu.mutation.StudyDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldStudyDuration,
		})
	}
	if value, ok := mdu.mutation.AddedStudyDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldStudyDuration,
		})
	}
	if mdu.mutation.MajorDetailTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   majordetail.MajorDetailTagsTable,
			Columns: []string{majordetail.MajorDetailTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetailtag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.RemovedMajorDetailTagsIDs(); len(nodes) > 0 && !mdu.mutation.MajorDetailTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   majordetail.MajorDetailTagsTable,
			Columns: []string{majordetail.MajorDetailTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetailtag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.MajorDetailTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   majordetail.MajorDetailTagsTable,
			Columns: []string{majordetail.MajorDetailTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetailtag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mdu.mutation.CoverAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.CoverAttachmentTable,
			Columns: []string{majordetail.CoverAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.CoverAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.CoverAttachmentTable,
			Columns: []string{majordetail.CoverAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mdu.mutation.SubjectAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.SubjectAttachmentTable,
			Columns: []string{majordetail.SubjectAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.SubjectAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.SubjectAttachmentTable,
			Columns: []string{majordetail.SubjectAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mdu.mutation.TeacherAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.TeacherAttachmentsTable,
			Columns: majordetail.TeacherAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.RemovedTeacherAttachmentsIDs(); len(nodes) > 0 && !mdu.mutation.TeacherAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.TeacherAttachmentsTable,
			Columns: majordetail.TeacherAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.TeacherAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.TeacherAttachmentsTable,
			Columns: majordetail.TeacherAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mdu.mutation.ServiceAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.ServiceAttachmentsTable,
			Columns: majordetail.ServiceAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.RemovedServiceAttachmentsIDs(); len(nodes) > 0 && !mdu.mutation.ServiceAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.ServiceAttachmentsTable,
			Columns: majordetail.ServiceAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.ServiceAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.ServiceAttachmentsTable,
			Columns: majordetail.ServiceAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mdu.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   majordetail.MajorTable,
			Columns: []string{majordetail.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   majordetail.MajorTable,
			Columns: []string{majordetail.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{majordetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MajorDetailUpdateOne is the builder for updating a single MajorDetail entity.
type MajorDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MajorDetailMutation
}

// SetUUID sets the "uuid" field.
func (mduo *MajorDetailUpdateOne) SetUUID(s string) *MajorDetailUpdateOne {
	mduo.mutation.SetUUID(s)
	return mduo
}

// SetUpdatedAt sets the "updated_at" field.
func (mduo *MajorDetailUpdateOne) SetUpdatedAt(t time.Time) *MajorDetailUpdateOne {
	mduo.mutation.SetUpdatedAt(t)
	return mduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mduo *MajorDetailUpdateOne) ClearUpdatedAt() *MajorDetailUpdateOne {
	mduo.mutation.ClearUpdatedAt()
	return mduo
}

// SetDeletedAt sets the "deleted_at" field.
func (mduo *MajorDetailUpdateOne) SetDeletedAt(t time.Time) *MajorDetailUpdateOne {
	mduo.mutation.SetDeletedAt(t)
	return mduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableDeletedAt(t *time.Time) *MajorDetailUpdateOne {
	if t != nil {
		mduo.SetDeletedAt(*t)
	}
	return mduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mduo *MajorDetailUpdateOne) ClearDeletedAt() *MajorDetailUpdateOne {
	mduo.mutation.ClearDeletedAt()
	return mduo
}

// SetName sets the "name" field.
func (mduo *MajorDetailUpdateOne) SetName(s string) *MajorDetailUpdateOne {
	mduo.mutation.SetName(s)
	return mduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableName(s *string) *MajorDetailUpdateOne {
	if s != nil {
		mduo.SetName(*s)
	}
	return mduo
}

// SetDesc sets the "desc" field.
func (mduo *MajorDetailUpdateOne) SetDesc(s string) *MajorDetailUpdateOne {
	mduo.mutation.SetDesc(s)
	return mduo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableDesc(s *string) *MajorDetailUpdateOne {
	if s != nil {
		mduo.SetDesc(*s)
	}
	return mduo
}

// ClearDesc clears the value of the "desc" field.
func (mduo *MajorDetailUpdateOne) ClearDesc() *MajorDetailUpdateOne {
	mduo.mutation.ClearDesc()
	return mduo
}

// SetSubjectCount sets the "subject_count" field.
func (mduo *MajorDetailUpdateOne) SetSubjectCount(u uint8) *MajorDetailUpdateOne {
	mduo.mutation.ResetSubjectCount()
	mduo.mutation.SetSubjectCount(u)
	return mduo
}

// SetNillableSubjectCount sets the "subject_count" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableSubjectCount(u *uint8) *MajorDetailUpdateOne {
	if u != nil {
		mduo.SetSubjectCount(*u)
	}
	return mduo
}

// AddSubjectCount adds u to the "subject_count" field.
func (mduo *MajorDetailUpdateOne) AddSubjectCount(u uint8) *MajorDetailUpdateOne {
	mduo.mutation.AddSubjectCount(u)
	return mduo
}

// SetStar sets the "star" field.
func (mduo *MajorDetailUpdateOne) SetStar(s string) *MajorDetailUpdateOne {
	mduo.mutation.SetStar(s)
	return mduo
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableStar(s *string) *MajorDetailUpdateOne {
	if s != nil {
		mduo.SetStar(*s)
	}
	return mduo
}

// SetPassRate sets the "pass_rate" field.
func (mduo *MajorDetailUpdateOne) SetPassRate(u uint8) *MajorDetailUpdateOne {
	mduo.mutation.ResetPassRate()
	mduo.mutation.SetPassRate(u)
	return mduo
}

// SetNillablePassRate sets the "pass_rate" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillablePassRate(u *uint8) *MajorDetailUpdateOne {
	if u != nil {
		mduo.SetPassRate(*u)
	}
	return mduo
}

// AddPassRate adds u to the "pass_rate" field.
func (mduo *MajorDetailUpdateOne) AddPassRate(u uint8) *MajorDetailUpdateOne {
	mduo.mutation.AddPassRate(u)
	return mduo
}

// SetStudentCount sets the "student_count" field.
func (mduo *MajorDetailUpdateOne) SetStudentCount(u uint32) *MajorDetailUpdateOne {
	mduo.mutation.ResetStudentCount()
	mduo.mutation.SetStudentCount(u)
	return mduo
}

// SetNillableStudentCount sets the "student_count" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableStudentCount(u *uint32) *MajorDetailUpdateOne {
	if u != nil {
		mduo.SetStudentCount(*u)
	}
	return mduo
}

// AddStudentCount adds u to the "student_count" field.
func (mduo *MajorDetailUpdateOne) AddStudentCount(u uint32) *MajorDetailUpdateOne {
	mduo.mutation.AddStudentCount(u)
	return mduo
}

// SetStudyDuration sets the "study_duration" field.
func (mduo *MajorDetailUpdateOne) SetStudyDuration(u uint8) *MajorDetailUpdateOne {
	mduo.mutation.ResetStudyDuration()
	mduo.mutation.SetStudyDuration(u)
	return mduo
}

// SetNillableStudyDuration sets the "study_duration" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableStudyDuration(u *uint8) *MajorDetailUpdateOne {
	if u != nil {
		mduo.SetStudyDuration(*u)
	}
	return mduo
}

// AddStudyDuration adds u to the "study_duration" field.
func (mduo *MajorDetailUpdateOne) AddStudyDuration(u uint8) *MajorDetailUpdateOne {
	mduo.mutation.AddStudyDuration(u)
	return mduo
}

// SetMajorID sets the "major_id" field.
func (mduo *MajorDetailUpdateOne) SetMajorID(i int) *MajorDetailUpdateOne {
	mduo.mutation.ResetMajorID()
	mduo.mutation.SetMajorID(i)
	return mduo
}

// SetNillableMajorID sets the "major_id" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableMajorID(i *int) *MajorDetailUpdateOne {
	if i != nil {
		mduo.SetMajorID(*i)
	}
	return mduo
}

// ClearMajorID clears the value of the "major_id" field.
func (mduo *MajorDetailUpdateOne) ClearMajorID() *MajorDetailUpdateOne {
	mduo.mutation.ClearMajorID()
	return mduo
}

// SetCoverImgID sets the "cover_img_id" field.
func (mduo *MajorDetailUpdateOne) SetCoverImgID(i int) *MajorDetailUpdateOne {
	mduo.mutation.ResetCoverImgID()
	mduo.mutation.SetCoverImgID(i)
	return mduo
}

// SetNillableCoverImgID sets the "cover_img_id" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableCoverImgID(i *int) *MajorDetailUpdateOne {
	if i != nil {
		mduo.SetCoverImgID(*i)
	}
	return mduo
}

// ClearCoverImgID clears the value of the "cover_img_id" field.
func (mduo *MajorDetailUpdateOne) ClearCoverImgID() *MajorDetailUpdateOne {
	mduo.mutation.ClearCoverImgID()
	return mduo
}

// SetSubjectImgID sets the "subject_img_id" field.
func (mduo *MajorDetailUpdateOne) SetSubjectImgID(i int) *MajorDetailUpdateOne {
	mduo.mutation.ResetSubjectImgID()
	mduo.mutation.SetSubjectImgID(i)
	return mduo
}

// SetNillableSubjectImgID sets the "subject_img_id" field if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableSubjectImgID(i *int) *MajorDetailUpdateOne {
	if i != nil {
		mduo.SetSubjectImgID(*i)
	}
	return mduo
}

// ClearSubjectImgID clears the value of the "subject_img_id" field.
func (mduo *MajorDetailUpdateOne) ClearSubjectImgID() *MajorDetailUpdateOne {
	mduo.mutation.ClearSubjectImgID()
	return mduo
}

// AddMajorDetailTagIDs adds the "major_detail_tags" edge to the MajorDetailTag entity by IDs.
func (mduo *MajorDetailUpdateOne) AddMajorDetailTagIDs(ids ...int) *MajorDetailUpdateOne {
	mduo.mutation.AddMajorDetailTagIDs(ids...)
	return mduo
}

// AddMajorDetailTags adds the "major_detail_tags" edges to the MajorDetailTag entity.
func (mduo *MajorDetailUpdateOne) AddMajorDetailTags(m ...*MajorDetailTag) *MajorDetailUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mduo.AddMajorDetailTagIDs(ids...)
}

// SetCoverAttachmentID sets the "cover_attachment" edge to the Attachment entity by ID.
func (mduo *MajorDetailUpdateOne) SetCoverAttachmentID(id int) *MajorDetailUpdateOne {
	mduo.mutation.SetCoverAttachmentID(id)
	return mduo
}

// SetNillableCoverAttachmentID sets the "cover_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableCoverAttachmentID(id *int) *MajorDetailUpdateOne {
	if id != nil {
		mduo = mduo.SetCoverAttachmentID(*id)
	}
	return mduo
}

// SetCoverAttachment sets the "cover_attachment" edge to the Attachment entity.
func (mduo *MajorDetailUpdateOne) SetCoverAttachment(a *Attachment) *MajorDetailUpdateOne {
	return mduo.SetCoverAttachmentID(a.ID)
}

// SetSubjectAttachmentID sets the "subject_attachment" edge to the Attachment entity by ID.
func (mduo *MajorDetailUpdateOne) SetSubjectAttachmentID(id int) *MajorDetailUpdateOne {
	mduo.mutation.SetSubjectAttachmentID(id)
	return mduo
}

// SetNillableSubjectAttachmentID sets the "subject_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (mduo *MajorDetailUpdateOne) SetNillableSubjectAttachmentID(id *int) *MajorDetailUpdateOne {
	if id != nil {
		mduo = mduo.SetSubjectAttachmentID(*id)
	}
	return mduo
}

// SetSubjectAttachment sets the "subject_attachment" edge to the Attachment entity.
func (mduo *MajorDetailUpdateOne) SetSubjectAttachment(a *Attachment) *MajorDetailUpdateOne {
	return mduo.SetSubjectAttachmentID(a.ID)
}

// AddTeacherAttachmentIDs adds the "teacher_attachments" edge to the Attachment entity by IDs.
func (mduo *MajorDetailUpdateOne) AddTeacherAttachmentIDs(ids ...int) *MajorDetailUpdateOne {
	mduo.mutation.AddTeacherAttachmentIDs(ids...)
	return mduo
}

// AddTeacherAttachments adds the "teacher_attachments" edges to the Attachment entity.
func (mduo *MajorDetailUpdateOne) AddTeacherAttachments(a ...*Attachment) *MajorDetailUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mduo.AddTeacherAttachmentIDs(ids...)
}

// AddServiceAttachmentIDs adds the "service_attachments" edge to the Attachment entity by IDs.
func (mduo *MajorDetailUpdateOne) AddServiceAttachmentIDs(ids ...int) *MajorDetailUpdateOne {
	mduo.mutation.AddServiceAttachmentIDs(ids...)
	return mduo
}

// AddServiceAttachments adds the "service_attachments" edges to the Attachment entity.
func (mduo *MajorDetailUpdateOne) AddServiceAttachments(a ...*Attachment) *MajorDetailUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mduo.AddServiceAttachmentIDs(ids...)
}

// SetMajor sets the "major" edge to the Major entity.
func (mduo *MajorDetailUpdateOne) SetMajor(m *Major) *MajorDetailUpdateOne {
	return mduo.SetMajorID(m.ID)
}

// Mutation returns the MajorDetailMutation object of the builder.
func (mduo *MajorDetailUpdateOne) Mutation() *MajorDetailMutation {
	return mduo.mutation
}

// ClearMajorDetailTags clears all "major_detail_tags" edges to the MajorDetailTag entity.
func (mduo *MajorDetailUpdateOne) ClearMajorDetailTags() *MajorDetailUpdateOne {
	mduo.mutation.ClearMajorDetailTags()
	return mduo
}

// RemoveMajorDetailTagIDs removes the "major_detail_tags" edge to MajorDetailTag entities by IDs.
func (mduo *MajorDetailUpdateOne) RemoveMajorDetailTagIDs(ids ...int) *MajorDetailUpdateOne {
	mduo.mutation.RemoveMajorDetailTagIDs(ids...)
	return mduo
}

// RemoveMajorDetailTags removes "major_detail_tags" edges to MajorDetailTag entities.
func (mduo *MajorDetailUpdateOne) RemoveMajorDetailTags(m ...*MajorDetailTag) *MajorDetailUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mduo.RemoveMajorDetailTagIDs(ids...)
}

// ClearCoverAttachment clears the "cover_attachment" edge to the Attachment entity.
func (mduo *MajorDetailUpdateOne) ClearCoverAttachment() *MajorDetailUpdateOne {
	mduo.mutation.ClearCoverAttachment()
	return mduo
}

// ClearSubjectAttachment clears the "subject_attachment" edge to the Attachment entity.
func (mduo *MajorDetailUpdateOne) ClearSubjectAttachment() *MajorDetailUpdateOne {
	mduo.mutation.ClearSubjectAttachment()
	return mduo
}

// ClearTeacherAttachments clears all "teacher_attachments" edges to the Attachment entity.
func (mduo *MajorDetailUpdateOne) ClearTeacherAttachments() *MajorDetailUpdateOne {
	mduo.mutation.ClearTeacherAttachments()
	return mduo
}

// RemoveTeacherAttachmentIDs removes the "teacher_attachments" edge to Attachment entities by IDs.
func (mduo *MajorDetailUpdateOne) RemoveTeacherAttachmentIDs(ids ...int) *MajorDetailUpdateOne {
	mduo.mutation.RemoveTeacherAttachmentIDs(ids...)
	return mduo
}

// RemoveTeacherAttachments removes "teacher_attachments" edges to Attachment entities.
func (mduo *MajorDetailUpdateOne) RemoveTeacherAttachments(a ...*Attachment) *MajorDetailUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mduo.RemoveTeacherAttachmentIDs(ids...)
}

// ClearServiceAttachments clears all "service_attachments" edges to the Attachment entity.
func (mduo *MajorDetailUpdateOne) ClearServiceAttachments() *MajorDetailUpdateOne {
	mduo.mutation.ClearServiceAttachments()
	return mduo
}

// RemoveServiceAttachmentIDs removes the "service_attachments" edge to Attachment entities by IDs.
func (mduo *MajorDetailUpdateOne) RemoveServiceAttachmentIDs(ids ...int) *MajorDetailUpdateOne {
	mduo.mutation.RemoveServiceAttachmentIDs(ids...)
	return mduo
}

// RemoveServiceAttachments removes "service_attachments" edges to Attachment entities.
func (mduo *MajorDetailUpdateOne) RemoveServiceAttachments(a ...*Attachment) *MajorDetailUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mduo.RemoveServiceAttachmentIDs(ids...)
}

// ClearMajor clears the "major" edge to the Major entity.
func (mduo *MajorDetailUpdateOne) ClearMajor() *MajorDetailUpdateOne {
	mduo.mutation.ClearMajor()
	return mduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mduo *MajorDetailUpdateOne) Select(field string, fields ...string) *MajorDetailUpdateOne {
	mduo.fields = append([]string{field}, fields...)
	return mduo
}

// Save executes the query and returns the updated MajorDetail entity.
func (mduo *MajorDetailUpdateOne) Save(ctx context.Context) (*MajorDetail, error) {
	var (
		err  error
		node *MajorDetail
	)
	mduo.defaults()
	if len(mduo.hooks) == 0 {
		node, err = mduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MajorDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mduo.mutation = mutation
			node, err = mduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mduo.hooks) - 1; i >= 0; i-- {
			mut = mduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mduo *MajorDetailUpdateOne) SaveX(ctx context.Context) *MajorDetail {
	node, err := mduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mduo *MajorDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := mduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mduo *MajorDetailUpdateOne) ExecX(ctx context.Context) {
	if err := mduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mduo *MajorDetailUpdateOne) defaults() {
	if _, ok := mduo.mutation.UpdatedAt(); !ok && !mduo.mutation.UpdatedAtCleared() {
		v := majordetail.UpdateDefaultUpdatedAt()
		mduo.mutation.SetUpdatedAt(v)
	}
}

func (mduo *MajorDetailUpdateOne) sqlSave(ctx context.Context) (_node *MajorDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   majordetail.Table,
			Columns: majordetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: majordetail.FieldID,
			},
		},
	}
	id, ok := mduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MajorDetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, majordetail.FieldID)
		for _, f := range fields {
			if !majordetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != majordetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mduo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldUUID,
		})
	}
	if mduo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetail.FieldCreatedAt,
		})
	}
	if value, ok := mduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetail.FieldUpdatedAt,
		})
	}
	if mduo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetail.FieldUpdatedAt,
		})
	}
	if value, ok := mduo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetail.FieldDeletedAt,
		})
	}
	if mduo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetail.FieldDeletedAt,
		})
	}
	if value, ok := mduo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldName,
		})
	}
	if value, ok := mduo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldDesc,
		})
	}
	if mduo.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: majordetail.FieldDesc,
		})
	}
	if value, ok := mduo.mutation.SubjectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldSubjectCount,
		})
	}
	if value, ok := mduo.mutation.AddedSubjectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldSubjectCount,
		})
	}
	if value, ok := mduo.mutation.Star(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldStar,
		})
	}
	if value, ok := mduo.mutation.PassRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldPassRate,
		})
	}
	if value, ok := mduo.mutation.AddedPassRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldPassRate,
		})
	}
	if value, ok := mduo.mutation.StudentCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: majordetail.FieldStudentCount,
		})
	}
	if value, ok := mduo.mutation.AddedStudentCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: majordetail.FieldStudentCount,
		})
	}
	if value, ok := mduo.mutation.StudyDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldStudyDuration,
		})
	}
	if value, ok := mduo.mutation.AddedStudyDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldStudyDuration,
		})
	}
	if mduo.mutation.MajorDetailTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   majordetail.MajorDetailTagsTable,
			Columns: []string{majordetail.MajorDetailTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetailtag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.RemovedMajorDetailTagsIDs(); len(nodes) > 0 && !mduo.mutation.MajorDetailTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   majordetail.MajorDetailTagsTable,
			Columns: []string{majordetail.MajorDetailTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetailtag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.MajorDetailTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   majordetail.MajorDetailTagsTable,
			Columns: []string{majordetail.MajorDetailTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetailtag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mduo.mutation.CoverAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.CoverAttachmentTable,
			Columns: []string{majordetail.CoverAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.CoverAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.CoverAttachmentTable,
			Columns: []string{majordetail.CoverAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mduo.mutation.SubjectAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.SubjectAttachmentTable,
			Columns: []string{majordetail.SubjectAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.SubjectAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.SubjectAttachmentTable,
			Columns: []string{majordetail.SubjectAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mduo.mutation.TeacherAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.TeacherAttachmentsTable,
			Columns: majordetail.TeacherAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.RemovedTeacherAttachmentsIDs(); len(nodes) > 0 && !mduo.mutation.TeacherAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.TeacherAttachmentsTable,
			Columns: majordetail.TeacherAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.TeacherAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.TeacherAttachmentsTable,
			Columns: majordetail.TeacherAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mduo.mutation.ServiceAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.ServiceAttachmentsTable,
			Columns: majordetail.ServiceAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.RemovedServiceAttachmentsIDs(); len(nodes) > 0 && !mduo.mutation.ServiceAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.ServiceAttachmentsTable,
			Columns: majordetail.ServiceAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.ServiceAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.ServiceAttachmentsTable,
			Columns: majordetail.ServiceAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mduo.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   majordetail.MajorTable,
			Columns: []string{majordetail.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   majordetail.MajorTable,
			Columns: []string{majordetail.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MajorDetail{config: mduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{majordetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

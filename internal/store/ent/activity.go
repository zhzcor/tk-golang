// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/activity"
	"gserver/internal/store/ent/activitytype"
	"gserver/internal/store/ent/admin"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Activity is the model entity for the Activity schema.
type Activity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Title holds the value of the "title" field.
	// 标题
	Title string `json:"title"`
	// SubTitle holds the value of the "sub_title" field.
	// 副标题
	SubTitle string `json:"sub_title"`
	// CoverImgID holds the value of the "cover_img_id" field.
	// 封面图id
	CoverImgID int `json:"cover_img_id"`
	// Notice holds the value of the "notice" field.
	// 活动须知
	Notice string `json:"notice"`
	// Detail holds the value of the "detail" field.
	// 活动详情
	Detail string `json:"detail"`
	// Place holds the value of the "place" field.
	// 活动地点
	Place string `json:"place"`
	// IsFree holds the value of the "is_free" field.
	// 是否免费，0：否，1：是
	IsFree uint8 `json:"is_free"`
	// IsPublish holds the value of the "is_publish" field.
	// 是否发布，0：否，1：是
	IsPublish uint8 `json:"is_publish"`
	// Amount holds the value of the "amount" field.
	// 金额
	Amount int `json:"amount"`
	// StartAt holds the value of the "start_at" field.
	// 活动开始时间
	StartAt time.Time `json:"start_at"`
	// EndAt holds the value of the "end_at" field.
	// 活动结束时间
	EndAt time.Time `json:"end_at"`
	// ApplyStartAt holds the value of the "apply_start_at" field.
	// 报名开始时间
	ApplyStartAt time.Time `json:"apply_start_at"`
	// ApplyEndAt holds the value of the "apply_end_at" field.
	// 报名结束时间
	ApplyEndAt time.Time `json:"apply_end_at"`
	// IsHot holds the value of the "is_hot" field.
	// 是否热门，0：否，1：是
	IsHot uint8 `json:"is_hot"`
	// IsAutoPublish holds the value of the "is_auto_publish" field.
	// 是否自动发布，0：否，1：是
	IsAutoPublish uint8 `json:"is_auto_publish"`
	// ApplyCount holds the value of the "apply_count" field.
	// 报名人数
	ApplyCount int `json:"apply_count"`
	// JoinCount holds the value of the "join_count" field.
	// 参与人数
	JoinCount int `json:"join_count"`
	// IsLimitJoinCount holds the value of the "is_limit_join_count" field.
	// 是否限制活动人数 0:否 1:是
	IsLimitJoinCount uint8 `json:"is_limit_join_count"`
	// Birthday holds the value of the "birthday" field.
	Birthday time.Time `json:"birthday"`
	// SignRemark holds the value of the "sign_remark" field.
	SignRemark string `json:"sign_remark"`
	// ActivityTypeID holds the value of the "activity_type_id" field.
	// 活动类型id
	ActivityTypeID int `json:"activity_type_id"`
	// CreatedAdminID holds the value of the "created_admin_id" field.
	// 创建人id
	CreatedAdminID int `json:"created_admin_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityQuery when eager-loading is set.
	Edges ActivityEdges `json:"edges"`
}

// ActivityEdges holds the relations/edges for other nodes in the graph.
type ActivityEdges struct {
	// ActivityType holds the value of the activity_type edge.
	ActivityType *ActivityType `json:"activity_type,omitempty"`
	// ApplyActivities holds the value of the apply_activities edge.
	ApplyActivities []*ActivityApplyInfo `json:"apply_activities,omitempty"`
	// Admin holds the value of the admin edge.
	Admin *Admin `json:"admin,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ActivityTypeOrErr returns the ActivityType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityEdges) ActivityTypeOrErr() (*ActivityType, error) {
	if e.loadedTypes[0] {
		if e.ActivityType == nil {
			// The edge activity_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: activitytype.Label}
		}
		return e.ActivityType, nil
	}
	return nil, &NotLoadedError{edge: "activity_type"}
}

// ApplyActivitiesOrErr returns the ApplyActivities value or an error if the edge
// was not loaded in eager-loading.
func (e ActivityEdges) ApplyActivitiesOrErr() ([]*ActivityApplyInfo, error) {
	if e.loadedTypes[1] {
		return e.ApplyActivities, nil
	}
	return nil, &NotLoadedError{edge: "apply_activities"}
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityEdges) AdminOrErr() (*Admin, error) {
	if e.loadedTypes[2] {
		if e.Admin == nil {
			// The edge admin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case activity.FieldID, activity.FieldCoverImgID, activity.FieldIsFree, activity.FieldIsPublish, activity.FieldAmount, activity.FieldIsHot, activity.FieldIsAutoPublish, activity.FieldApplyCount, activity.FieldJoinCount, activity.FieldIsLimitJoinCount, activity.FieldActivityTypeID, activity.FieldCreatedAdminID:
			values[i] = new(sql.NullInt64)
		case activity.FieldUUID, activity.FieldTitle, activity.FieldSubTitle, activity.FieldNotice, activity.FieldDetail, activity.FieldPlace, activity.FieldSignRemark:
			values[i] = new(sql.NullString)
		case activity.FieldCreatedAt, activity.FieldUpdatedAt, activity.FieldDeletedAt, activity.FieldStartAt, activity.FieldEndAt, activity.FieldApplyStartAt, activity.FieldApplyEndAt, activity.FieldBirthday:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Activity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activity fields.
func (a *Activity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case activity.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				a.UUID = value.String
			}
		case activity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = new(time.Time)
				*a.CreatedAt = value.Time
			}
		case activity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = new(time.Time)
				*a.UpdatedAt = value.Time
			}
		case activity.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case activity.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case activity.FieldSubTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_title", values[i])
			} else if value.Valid {
				a.SubTitle = value.String
			}
		case activity.FieldCoverImgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cover_img_id", values[i])
			} else if value.Valid {
				a.CoverImgID = int(value.Int64)
			}
		case activity.FieldNotice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notice", values[i])
			} else if value.Valid {
				a.Notice = value.String
			}
		case activity.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				a.Detail = value.String
			}
		case activity.FieldPlace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place", values[i])
			} else if value.Valid {
				a.Place = value.String
			}
		case activity.FieldIsFree:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_free", values[i])
			} else if value.Valid {
				a.IsFree = uint8(value.Int64)
			}
		case activity.FieldIsPublish:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_publish", values[i])
			} else if value.Valid {
				a.IsPublish = uint8(value.Int64)
			}
		case activity.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				a.Amount = int(value.Int64)
			}
		case activity.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				a.StartAt = value.Time
			}
		case activity.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				a.EndAt = value.Time
			}
		case activity.FieldApplyStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field apply_start_at", values[i])
			} else if value.Valid {
				a.ApplyStartAt = value.Time
			}
		case activity.FieldApplyEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field apply_end_at", values[i])
			} else if value.Valid {
				a.ApplyEndAt = value.Time
			}
		case activity.FieldIsHot:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_hot", values[i])
			} else if value.Valid {
				a.IsHot = uint8(value.Int64)
			}
		case activity.FieldIsAutoPublish:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_auto_publish", values[i])
			} else if value.Valid {
				a.IsAutoPublish = uint8(value.Int64)
			}
		case activity.FieldApplyCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field apply_count", values[i])
			} else if value.Valid {
				a.ApplyCount = int(value.Int64)
			}
		case activity.FieldJoinCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field join_count", values[i])
			} else if value.Valid {
				a.JoinCount = int(value.Int64)
			}
		case activity.FieldIsLimitJoinCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_limit_join_count", values[i])
			} else if value.Valid {
				a.IsLimitJoinCount = uint8(value.Int64)
			}
		case activity.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				a.Birthday = value.Time
			}
		case activity.FieldSignRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sign_remark", values[i])
			} else if value.Valid {
				a.SignRemark = value.String
			}
		case activity.FieldActivityTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_type_id", values[i])
			} else if value.Valid {
				a.ActivityTypeID = int(value.Int64)
			}
		case activity.FieldCreatedAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_admin_id", values[i])
			} else if value.Valid {
				a.CreatedAdminID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryActivityType queries the "activity_type" edge of the Activity entity.
func (a *Activity) QueryActivityType() *ActivityTypeQuery {
	return (&ActivityClient{config: a.config}).QueryActivityType(a)
}

// QueryApplyActivities queries the "apply_activities" edge of the Activity entity.
func (a *Activity) QueryApplyActivities() *ActivityApplyInfoQuery {
	return (&ActivityClient{config: a.config}).QueryApplyActivities(a)
}

// QueryAdmin queries the "admin" edge of the Activity entity.
func (a *Activity) QueryAdmin() *AdminQuery {
	return (&ActivityClient{config: a.config}).QueryAdmin(a)
}

// Update returns a builder for updating this Activity.
// Note that you need to call Activity.Unwrap() before calling this method if this Activity
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activity) Update() *ActivityUpdateOne {
	return (&ActivityClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Activity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Activity) Unwrap() *Activity {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activity is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activity) String() string {
	var builder strings.Builder
	builder.WriteString("Activity(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(a.UUID)
	if v := a.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := a.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := a.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", sub_title=")
	builder.WriteString(a.SubTitle)
	builder.WriteString(", cover_img_id=")
	builder.WriteString(fmt.Sprintf("%v", a.CoverImgID))
	builder.WriteString(", notice=")
	builder.WriteString(a.Notice)
	builder.WriteString(", detail=")
	builder.WriteString(a.Detail)
	builder.WriteString(", place=")
	builder.WriteString(a.Place)
	builder.WriteString(", is_free=")
	builder.WriteString(fmt.Sprintf("%v", a.IsFree))
	builder.WriteString(", is_publish=")
	builder.WriteString(fmt.Sprintf("%v", a.IsPublish))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", a.Amount))
	builder.WriteString(", start_at=")
	builder.WriteString(a.StartAt.Format(time.ANSIC))
	builder.WriteString(", end_at=")
	builder.WriteString(a.EndAt.Format(time.ANSIC))
	builder.WriteString(", apply_start_at=")
	builder.WriteString(a.ApplyStartAt.Format(time.ANSIC))
	builder.WriteString(", apply_end_at=")
	builder.WriteString(a.ApplyEndAt.Format(time.ANSIC))
	builder.WriteString(", is_hot=")
	builder.WriteString(fmt.Sprintf("%v", a.IsHot))
	builder.WriteString(", is_auto_publish=")
	builder.WriteString(fmt.Sprintf("%v", a.IsAutoPublish))
	builder.WriteString(", apply_count=")
	builder.WriteString(fmt.Sprintf("%v", a.ApplyCount))
	builder.WriteString(", join_count=")
	builder.WriteString(fmt.Sprintf("%v", a.JoinCount))
	builder.WriteString(", is_limit_join_count=")
	builder.WriteString(fmt.Sprintf("%v", a.IsLimitJoinCount))
	builder.WriteString(", birthday=")
	builder.WriteString(a.Birthday.Format(time.ANSIC))
	builder.WriteString(", sign_remark=")
	builder.WriteString(a.SignRemark)
	builder.WriteString(", activity_type_id=")
	builder.WriteString(fmt.Sprintf("%v", a.ActivityTypeID))
	builder.WriteString(", created_admin_id=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedAdminID))
	builder.WriteByte(')')
	return builder.String()
}

// Activities is a parsable slice of Activity.
type Activities []*Activity

func (a Activities) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

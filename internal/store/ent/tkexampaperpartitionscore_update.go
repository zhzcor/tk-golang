// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkexampaperpartition"
	"tkserver/internal/store/ent/tkexampaperpartitionscore"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperPartitionScoreUpdate is the builder for updating TkExamPaperPartitionScore entities.
type TkExamPaperPartitionScoreUpdate struct {
	config
	hooks    []Hook
	mutation *TkExamPaperPartitionScoreMutation
}

// Where adds a new predicate for the TkExamPaperPartitionScoreUpdate builder.
func (teppsu *TkExamPaperPartitionScoreUpdate) Where(ps ...predicate.TkExamPaperPartitionScore) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.predicates = append(teppsu.mutation.predicates, ps...)
	return teppsu
}

// SetUUID sets the "uuid" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetUUID(s string) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.SetUUID(s)
	return teppsu
}

// SetUpdatedAt sets the "updated_at" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetUpdatedAt(t time.Time) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.SetUpdatedAt(t)
	return teppsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) ClearUpdatedAt() *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ClearUpdatedAt()
	return teppsu
}

// SetDeletedAt sets the "deleted_at" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetDeletedAt(t time.Time) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.SetDeletedAt(t)
	return teppsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableDeletedAt(t *time.Time) *TkExamPaperPartitionScoreUpdate {
	if t != nil {
		teppsu.SetDeletedAt(*t)
	}
	return teppsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) ClearDeletedAt() *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ClearDeletedAt()
	return teppsu
}

// SetSingeSelect sets the "singe_select" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetSingeSelect(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetSingeSelect()
	teppsu.mutation.SetSingeSelect(u)
	return teppsu
}

// SetNillableSingeSelect sets the "singe_select" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableSingeSelect(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetSingeSelect(*u)
	}
	return teppsu
}

// AddSingeSelect adds u to the "singe_select" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddSingeSelect(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddSingeSelect(u)
	return teppsu
}

// SetJudgeQuestion sets the "judge_question" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetJudgeQuestion(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetJudgeQuestion()
	teppsu.mutation.SetJudgeQuestion(u)
	return teppsu
}

// SetNillableJudgeQuestion sets the "judge_question" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableJudgeQuestion(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetJudgeQuestion(*u)
	}
	return teppsu
}

// AddJudgeQuestion adds u to the "judge_question" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddJudgeQuestion(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddJudgeQuestion(u)
	return teppsu
}

// SetMultiSelect sets the "multi_select" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetMultiSelect(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetMultiSelect()
	teppsu.mutation.SetMultiSelect(u)
	return teppsu
}

// SetNillableMultiSelect sets the "multi_select" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableMultiSelect(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetMultiSelect(*u)
	}
	return teppsu
}

// AddMultiSelect adds u to the "multi_select" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddMultiSelect(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddMultiSelect(u)
	return teppsu
}

// SetShorterAnswer sets the "shorter_answer" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetShorterAnswer(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetShorterAnswer()
	teppsu.mutation.SetShorterAnswer(u)
	return teppsu
}

// SetNillableShorterAnswer sets the "shorter_answer" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableShorterAnswer(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetShorterAnswer(*u)
	}
	return teppsu
}

// AddShorterAnswer adds u to the "shorter_answer" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddShorterAnswer(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddShorterAnswer(u)
	return teppsu
}

// SetMaterialQuestion sets the "material_question" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetMaterialQuestion(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetMaterialQuestion()
	teppsu.mutation.SetMaterialQuestion(u)
	return teppsu
}

// SetNillableMaterialQuestion sets the "material_question" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableMaterialQuestion(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetMaterialQuestion(*u)
	}
	return teppsu
}

// AddMaterialQuestion adds u to the "material_question" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddMaterialQuestion(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddMaterialQuestion(u)
	return teppsu
}

// SetSingeSelectCount sets the "singe_select_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetSingeSelectCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetSingeSelectCount()
	teppsu.mutation.SetSingeSelectCount(u)
	return teppsu
}

// SetNillableSingeSelectCount sets the "singe_select_count" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableSingeSelectCount(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetSingeSelectCount(*u)
	}
	return teppsu
}

// AddSingeSelectCount adds u to the "singe_select_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddSingeSelectCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddSingeSelectCount(u)
	return teppsu
}

// SetJudgeQuestionCount sets the "judge_question_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetJudgeQuestionCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetJudgeQuestionCount()
	teppsu.mutation.SetJudgeQuestionCount(u)
	return teppsu
}

// SetNillableJudgeQuestionCount sets the "judge_question_count" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableJudgeQuestionCount(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetJudgeQuestionCount(*u)
	}
	return teppsu
}

// AddJudgeQuestionCount adds u to the "judge_question_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddJudgeQuestionCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddJudgeQuestionCount(u)
	return teppsu
}

// SetMultiSelectCount sets the "multi_select_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetMultiSelectCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetMultiSelectCount()
	teppsu.mutation.SetMultiSelectCount(u)
	return teppsu
}

// SetNillableMultiSelectCount sets the "multi_select_count" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableMultiSelectCount(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetMultiSelectCount(*u)
	}
	return teppsu
}

// AddMultiSelectCount adds u to the "multi_select_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddMultiSelectCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddMultiSelectCount(u)
	return teppsu
}

// SetShorterAnswerCount sets the "shorter_answer_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetShorterAnswerCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetShorterAnswerCount()
	teppsu.mutation.SetShorterAnswerCount(u)
	return teppsu
}

// SetNillableShorterAnswerCount sets the "shorter_answer_count" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableShorterAnswerCount(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetShorterAnswerCount(*u)
	}
	return teppsu
}

// AddShorterAnswerCount adds u to the "shorter_answer_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddShorterAnswerCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddShorterAnswerCount(u)
	return teppsu
}

// SetMaterialQuestionCount sets the "material_question_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetMaterialQuestionCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetMaterialQuestionCount()
	teppsu.mutation.SetMaterialQuestionCount(u)
	return teppsu
}

// SetNillableMaterialQuestionCount sets the "material_question_count" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableMaterialQuestionCount(u *uint8) *TkExamPaperPartitionScoreUpdate {
	if u != nil {
		teppsu.SetMaterialQuestionCount(*u)
	}
	return teppsu
}

// AddMaterialQuestionCount adds u to the "material_question_count" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) AddMaterialQuestionCount(u uint8) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.AddMaterialQuestionCount(u)
	return teppsu
}

// SetExamPaperPartitionID sets the "exam_paper_partition_id" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetExamPaperPartitionID(i int) *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ResetExamPaperPartitionID()
	teppsu.mutation.SetExamPaperPartitionID(i)
	return teppsu
}

// SetNillableExamPaperPartitionID sets the "exam_paper_partition_id" field if the given value is not nil.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetNillableExamPaperPartitionID(i *int) *TkExamPaperPartitionScoreUpdate {
	if i != nil {
		teppsu.SetExamPaperPartitionID(*i)
	}
	return teppsu
}

// ClearExamPaperPartitionID clears the value of the "exam_paper_partition_id" field.
func (teppsu *TkExamPaperPartitionScoreUpdate) ClearExamPaperPartitionID() *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ClearExamPaperPartitionID()
	return teppsu
}

// SetExamPaperPartition sets the "exam_paper_partition" edge to the TkExamPaperPartition entity.
func (teppsu *TkExamPaperPartitionScoreUpdate) SetExamPaperPartition(t *TkExamPaperPartition) *TkExamPaperPartitionScoreUpdate {
	return teppsu.SetExamPaperPartitionID(t.ID)
}

// Mutation returns the TkExamPaperPartitionScoreMutation object of the builder.
func (teppsu *TkExamPaperPartitionScoreUpdate) Mutation() *TkExamPaperPartitionScoreMutation {
	return teppsu.mutation
}

// ClearExamPaperPartition clears the "exam_paper_partition" edge to the TkExamPaperPartition entity.
func (teppsu *TkExamPaperPartitionScoreUpdate) ClearExamPaperPartition() *TkExamPaperPartitionScoreUpdate {
	teppsu.mutation.ClearExamPaperPartition()
	return teppsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teppsu *TkExamPaperPartitionScoreUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	teppsu.defaults()
	if len(teppsu.hooks) == 0 {
		affected, err = teppsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperPartitionScoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teppsu.mutation = mutation
			affected, err = teppsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(teppsu.hooks) - 1; i >= 0; i-- {
			mut = teppsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teppsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (teppsu *TkExamPaperPartitionScoreUpdate) SaveX(ctx context.Context) int {
	affected, err := teppsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teppsu *TkExamPaperPartitionScoreUpdate) Exec(ctx context.Context) error {
	_, err := teppsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teppsu *TkExamPaperPartitionScoreUpdate) ExecX(ctx context.Context) {
	if err := teppsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teppsu *TkExamPaperPartitionScoreUpdate) defaults() {
	if _, ok := teppsu.mutation.UpdatedAt(); !ok && !teppsu.mutation.UpdatedAtCleared() {
		v := tkexampaperpartitionscore.UpdateDefaultUpdatedAt()
		teppsu.mutation.SetUpdatedAt(v)
	}
}

func (teppsu *TkExamPaperPartitionScoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampaperpartitionscore.Table,
			Columns: tkexampaperpartitionscore.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaperpartitionscore.FieldID,
			},
		},
	}
	if ps := teppsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teppsu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldUUID,
		})
	}
	if teppsu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartitionscore.FieldCreatedAt,
		})
	}
	if value, ok := teppsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldUpdatedAt,
		})
	}
	if teppsu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartitionscore.FieldUpdatedAt,
		})
	}
	if value, ok := teppsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldDeletedAt,
		})
	}
	if teppsu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartitionscore.FieldDeletedAt,
		})
	}
	if value, ok := teppsu.mutation.SingeSelect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelect,
		})
	}
	if value, ok := teppsu.mutation.AddedSingeSelect(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelect,
		})
	}
	if value, ok := teppsu.mutation.JudgeQuestion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestion,
		})
	}
	if value, ok := teppsu.mutation.AddedJudgeQuestion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestion,
		})
	}
	if value, ok := teppsu.mutation.MultiSelect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelect,
		})
	}
	if value, ok := teppsu.mutation.AddedMultiSelect(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelect,
		})
	}
	if value, ok := teppsu.mutation.ShorterAnswer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswer,
		})
	}
	if value, ok := teppsu.mutation.AddedShorterAnswer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswer,
		})
	}
	if value, ok := teppsu.mutation.MaterialQuestion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestion,
		})
	}
	if value, ok := teppsu.mutation.AddedMaterialQuestion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestion,
		})
	}
	if value, ok := teppsu.mutation.SingeSelectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelectCount,
		})
	}
	if value, ok := teppsu.mutation.AddedSingeSelectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelectCount,
		})
	}
	if value, ok := teppsu.mutation.JudgeQuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestionCount,
		})
	}
	if value, ok := teppsu.mutation.AddedJudgeQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestionCount,
		})
	}
	if value, ok := teppsu.mutation.MultiSelectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelectCount,
		})
	}
	if value, ok := teppsu.mutation.AddedMultiSelectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelectCount,
		})
	}
	if value, ok := teppsu.mutation.ShorterAnswerCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswerCount,
		})
	}
	if value, ok := teppsu.mutation.AddedShorterAnswerCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswerCount,
		})
	}
	if value, ok := teppsu.mutation.MaterialQuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestionCount,
		})
	}
	if value, ok := teppsu.mutation.AddedMaterialQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestionCount,
		})
	}
	if teppsu.mutation.ExamPaperPartitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartitionscore.ExamPaperPartitionTable,
			Columns: []string{tkexampaperpartitionscore.ExamPaperPartitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppsu.mutation.ExamPaperPartitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartitionscore.ExamPaperPartitionTable,
			Columns: []string{tkexampaperpartitionscore.ExamPaperPartitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teppsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampaperpartitionscore.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkExamPaperPartitionScoreUpdateOne is the builder for updating a single TkExamPaperPartitionScore entity.
type TkExamPaperPartitionScoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkExamPaperPartitionScoreMutation
}

// SetUUID sets the "uuid" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetUUID(s string) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.SetUUID(s)
	return teppsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetUpdatedAt(t time.Time) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.SetUpdatedAt(t)
	return teppsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) ClearUpdatedAt() *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ClearUpdatedAt()
	return teppsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetDeletedAt(t time.Time) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.SetDeletedAt(t)
	return teppsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableDeletedAt(t *time.Time) *TkExamPaperPartitionScoreUpdateOne {
	if t != nil {
		teppsuo.SetDeletedAt(*t)
	}
	return teppsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) ClearDeletedAt() *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ClearDeletedAt()
	return teppsuo
}

// SetSingeSelect sets the "singe_select" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetSingeSelect(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetSingeSelect()
	teppsuo.mutation.SetSingeSelect(u)
	return teppsuo
}

// SetNillableSingeSelect sets the "singe_select" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableSingeSelect(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetSingeSelect(*u)
	}
	return teppsuo
}

// AddSingeSelect adds u to the "singe_select" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddSingeSelect(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddSingeSelect(u)
	return teppsuo
}

// SetJudgeQuestion sets the "judge_question" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetJudgeQuestion(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetJudgeQuestion()
	teppsuo.mutation.SetJudgeQuestion(u)
	return teppsuo
}

// SetNillableJudgeQuestion sets the "judge_question" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableJudgeQuestion(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetJudgeQuestion(*u)
	}
	return teppsuo
}

// AddJudgeQuestion adds u to the "judge_question" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddJudgeQuestion(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddJudgeQuestion(u)
	return teppsuo
}

// SetMultiSelect sets the "multi_select" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetMultiSelect(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetMultiSelect()
	teppsuo.mutation.SetMultiSelect(u)
	return teppsuo
}

// SetNillableMultiSelect sets the "multi_select" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableMultiSelect(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetMultiSelect(*u)
	}
	return teppsuo
}

// AddMultiSelect adds u to the "multi_select" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddMultiSelect(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddMultiSelect(u)
	return teppsuo
}

// SetShorterAnswer sets the "shorter_answer" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetShorterAnswer(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetShorterAnswer()
	teppsuo.mutation.SetShorterAnswer(u)
	return teppsuo
}

// SetNillableShorterAnswer sets the "shorter_answer" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableShorterAnswer(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetShorterAnswer(*u)
	}
	return teppsuo
}

// AddShorterAnswer adds u to the "shorter_answer" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddShorterAnswer(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddShorterAnswer(u)
	return teppsuo
}

// SetMaterialQuestion sets the "material_question" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetMaterialQuestion(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetMaterialQuestion()
	teppsuo.mutation.SetMaterialQuestion(u)
	return teppsuo
}

// SetNillableMaterialQuestion sets the "material_question" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableMaterialQuestion(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetMaterialQuestion(*u)
	}
	return teppsuo
}

// AddMaterialQuestion adds u to the "material_question" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddMaterialQuestion(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddMaterialQuestion(u)
	return teppsuo
}

// SetSingeSelectCount sets the "singe_select_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetSingeSelectCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetSingeSelectCount()
	teppsuo.mutation.SetSingeSelectCount(u)
	return teppsuo
}

// SetNillableSingeSelectCount sets the "singe_select_count" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableSingeSelectCount(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetSingeSelectCount(*u)
	}
	return teppsuo
}

// AddSingeSelectCount adds u to the "singe_select_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddSingeSelectCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddSingeSelectCount(u)
	return teppsuo
}

// SetJudgeQuestionCount sets the "judge_question_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetJudgeQuestionCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetJudgeQuestionCount()
	teppsuo.mutation.SetJudgeQuestionCount(u)
	return teppsuo
}

// SetNillableJudgeQuestionCount sets the "judge_question_count" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableJudgeQuestionCount(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetJudgeQuestionCount(*u)
	}
	return teppsuo
}

// AddJudgeQuestionCount adds u to the "judge_question_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddJudgeQuestionCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddJudgeQuestionCount(u)
	return teppsuo
}

// SetMultiSelectCount sets the "multi_select_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetMultiSelectCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetMultiSelectCount()
	teppsuo.mutation.SetMultiSelectCount(u)
	return teppsuo
}

// SetNillableMultiSelectCount sets the "multi_select_count" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableMultiSelectCount(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetMultiSelectCount(*u)
	}
	return teppsuo
}

// AddMultiSelectCount adds u to the "multi_select_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddMultiSelectCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddMultiSelectCount(u)
	return teppsuo
}

// SetShorterAnswerCount sets the "shorter_answer_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetShorterAnswerCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetShorterAnswerCount()
	teppsuo.mutation.SetShorterAnswerCount(u)
	return teppsuo
}

// SetNillableShorterAnswerCount sets the "shorter_answer_count" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableShorterAnswerCount(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetShorterAnswerCount(*u)
	}
	return teppsuo
}

// AddShorterAnswerCount adds u to the "shorter_answer_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddShorterAnswerCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddShorterAnswerCount(u)
	return teppsuo
}

// SetMaterialQuestionCount sets the "material_question_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetMaterialQuestionCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetMaterialQuestionCount()
	teppsuo.mutation.SetMaterialQuestionCount(u)
	return teppsuo
}

// SetNillableMaterialQuestionCount sets the "material_question_count" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableMaterialQuestionCount(u *uint8) *TkExamPaperPartitionScoreUpdateOne {
	if u != nil {
		teppsuo.SetMaterialQuestionCount(*u)
	}
	return teppsuo
}

// AddMaterialQuestionCount adds u to the "material_question_count" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) AddMaterialQuestionCount(u uint8) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.AddMaterialQuestionCount(u)
	return teppsuo
}

// SetExamPaperPartitionID sets the "exam_paper_partition_id" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetExamPaperPartitionID(i int) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ResetExamPaperPartitionID()
	teppsuo.mutation.SetExamPaperPartitionID(i)
	return teppsuo
}

// SetNillableExamPaperPartitionID sets the "exam_paper_partition_id" field if the given value is not nil.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetNillableExamPaperPartitionID(i *int) *TkExamPaperPartitionScoreUpdateOne {
	if i != nil {
		teppsuo.SetExamPaperPartitionID(*i)
	}
	return teppsuo
}

// ClearExamPaperPartitionID clears the value of the "exam_paper_partition_id" field.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) ClearExamPaperPartitionID() *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ClearExamPaperPartitionID()
	return teppsuo
}

// SetExamPaperPartition sets the "exam_paper_partition" edge to the TkExamPaperPartition entity.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SetExamPaperPartition(t *TkExamPaperPartition) *TkExamPaperPartitionScoreUpdateOne {
	return teppsuo.SetExamPaperPartitionID(t.ID)
}

// Mutation returns the TkExamPaperPartitionScoreMutation object of the builder.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) Mutation() *TkExamPaperPartitionScoreMutation {
	return teppsuo.mutation
}

// ClearExamPaperPartition clears the "exam_paper_partition" edge to the TkExamPaperPartition entity.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) ClearExamPaperPartition() *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.mutation.ClearExamPaperPartition()
	return teppsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) Select(field string, fields ...string) *TkExamPaperPartitionScoreUpdateOne {
	teppsuo.fields = append([]string{field}, fields...)
	return teppsuo
}

// Save executes the query and returns the updated TkExamPaperPartitionScore entity.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) Save(ctx context.Context) (*TkExamPaperPartitionScore, error) {
	var (
		err  error
		node *TkExamPaperPartitionScore
	)
	teppsuo.defaults()
	if len(teppsuo.hooks) == 0 {
		node, err = teppsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperPartitionScoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teppsuo.mutation = mutation
			node, err = teppsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teppsuo.hooks) - 1; i >= 0; i-- {
			mut = teppsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teppsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) SaveX(ctx context.Context) *TkExamPaperPartitionScore {
	node, err := teppsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) Exec(ctx context.Context) error {
	_, err := teppsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) ExecX(ctx context.Context) {
	if err := teppsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teppsuo *TkExamPaperPartitionScoreUpdateOne) defaults() {
	if _, ok := teppsuo.mutation.UpdatedAt(); !ok && !teppsuo.mutation.UpdatedAtCleared() {
		v := tkexampaperpartitionscore.UpdateDefaultUpdatedAt()
		teppsuo.mutation.SetUpdatedAt(v)
	}
}

func (teppsuo *TkExamPaperPartitionScoreUpdateOne) sqlSave(ctx context.Context) (_node *TkExamPaperPartitionScore, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampaperpartitionscore.Table,
			Columns: tkexampaperpartitionscore.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaperpartitionscore.FieldID,
			},
		},
	}
	id, ok := teppsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkExamPaperPartitionScore.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := teppsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkexampaperpartitionscore.FieldID)
		for _, f := range fields {
			if !tkexampaperpartitionscore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkexampaperpartitionscore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teppsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teppsuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldUUID,
		})
	}
	if teppsuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartitionscore.FieldCreatedAt,
		})
	}
	if value, ok := teppsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldUpdatedAt,
		})
	}
	if teppsuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartitionscore.FieldUpdatedAt,
		})
	}
	if value, ok := teppsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldDeletedAt,
		})
	}
	if teppsuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartitionscore.FieldDeletedAt,
		})
	}
	if value, ok := teppsuo.mutation.SingeSelect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelect,
		})
	}
	if value, ok := teppsuo.mutation.AddedSingeSelect(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelect,
		})
	}
	if value, ok := teppsuo.mutation.JudgeQuestion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestion,
		})
	}
	if value, ok := teppsuo.mutation.AddedJudgeQuestion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestion,
		})
	}
	if value, ok := teppsuo.mutation.MultiSelect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelect,
		})
	}
	if value, ok := teppsuo.mutation.AddedMultiSelect(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelect,
		})
	}
	if value, ok := teppsuo.mutation.ShorterAnswer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswer,
		})
	}
	if value, ok := teppsuo.mutation.AddedShorterAnswer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswer,
		})
	}
	if value, ok := teppsuo.mutation.MaterialQuestion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestion,
		})
	}
	if value, ok := teppsuo.mutation.AddedMaterialQuestion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestion,
		})
	}
	if value, ok := teppsuo.mutation.SingeSelectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelectCount,
		})
	}
	if value, ok := teppsuo.mutation.AddedSingeSelectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelectCount,
		})
	}
	if value, ok := teppsuo.mutation.JudgeQuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestionCount,
		})
	}
	if value, ok := teppsuo.mutation.AddedJudgeQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestionCount,
		})
	}
	if value, ok := teppsuo.mutation.MultiSelectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelectCount,
		})
	}
	if value, ok := teppsuo.mutation.AddedMultiSelectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelectCount,
		})
	}
	if value, ok := teppsuo.mutation.ShorterAnswerCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswerCount,
		})
	}
	if value, ok := teppsuo.mutation.AddedShorterAnswerCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswerCount,
		})
	}
	if value, ok := teppsuo.mutation.MaterialQuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestionCount,
		})
	}
	if value, ok := teppsuo.mutation.AddedMaterialQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestionCount,
		})
	}
	if teppsuo.mutation.ExamPaperPartitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartitionscore.ExamPaperPartitionTable,
			Columns: []string{tkexampaperpartitionscore.ExamPaperPartitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppsuo.mutation.ExamPaperPartitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartitionscore.ExamPaperPartitionTable,
			Columns: []string{tkexampaperpartitionscore.ExamPaperPartitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkExamPaperPartitionScore{config: teppsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teppsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampaperpartitionscore.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/activity"
	"tkserver/internal/store/ent/activityapplyinfo"
	"tkserver/internal/store/ent/activitytype"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// Where adds a new predicate for the ActivityUpdate builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetUUID sets the "uuid" field.
func (au *ActivityUpdate) SetUUID(s string) *ActivityUpdate {
	au.mutation.SetUUID(s)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ActivityUpdate) SetUpdatedAt(t time.Time) *ActivityUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *ActivityUpdate) ClearUpdatedAt() *ActivityUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *ActivityUpdate) SetDeletedAt(t time.Time) *ActivityUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableDeletedAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *ActivityUpdate) ClearDeletedAt() *ActivityUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetTitle sets the "title" field.
func (au *ActivityUpdate) SetTitle(s string) *ActivityUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableTitle(s *string) *ActivityUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetSubTitle sets the "sub_title" field.
func (au *ActivityUpdate) SetSubTitle(s string) *ActivityUpdate {
	au.mutation.SetSubTitle(s)
	return au
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableSubTitle(s *string) *ActivityUpdate {
	if s != nil {
		au.SetSubTitle(*s)
	}
	return au
}

// SetCoverImgID sets the "cover_img_id" field.
func (au *ActivityUpdate) SetCoverImgID(i int) *ActivityUpdate {
	au.mutation.ResetCoverImgID()
	au.mutation.SetCoverImgID(i)
	return au
}

// SetNillableCoverImgID sets the "cover_img_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCoverImgID(i *int) *ActivityUpdate {
	if i != nil {
		au.SetCoverImgID(*i)
	}
	return au
}

// AddCoverImgID adds i to the "cover_img_id" field.
func (au *ActivityUpdate) AddCoverImgID(i int) *ActivityUpdate {
	au.mutation.AddCoverImgID(i)
	return au
}

// SetNotice sets the "notice" field.
func (au *ActivityUpdate) SetNotice(s string) *ActivityUpdate {
	au.mutation.SetNotice(s)
	return au
}

// SetNillableNotice sets the "notice" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableNotice(s *string) *ActivityUpdate {
	if s != nil {
		au.SetNotice(*s)
	}
	return au
}

// ClearNotice clears the value of the "notice" field.
func (au *ActivityUpdate) ClearNotice() *ActivityUpdate {
	au.mutation.ClearNotice()
	return au
}

// SetDetail sets the "detail" field.
func (au *ActivityUpdate) SetDetail(s string) *ActivityUpdate {
	au.mutation.SetDetail(s)
	return au
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableDetail(s *string) *ActivityUpdate {
	if s != nil {
		au.SetDetail(*s)
	}
	return au
}

// ClearDetail clears the value of the "detail" field.
func (au *ActivityUpdate) ClearDetail() *ActivityUpdate {
	au.mutation.ClearDetail()
	return au
}

// SetPlace sets the "place" field.
func (au *ActivityUpdate) SetPlace(s string) *ActivityUpdate {
	au.mutation.SetPlace(s)
	return au
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (au *ActivityUpdate) SetNillablePlace(s *string) *ActivityUpdate {
	if s != nil {
		au.SetPlace(*s)
	}
	return au
}

// SetIsFree sets the "is_free" field.
func (au *ActivityUpdate) SetIsFree(u uint8) *ActivityUpdate {
	au.mutation.ResetIsFree()
	au.mutation.SetIsFree(u)
	return au
}

// SetNillableIsFree sets the "is_free" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableIsFree(u *uint8) *ActivityUpdate {
	if u != nil {
		au.SetIsFree(*u)
	}
	return au
}

// AddIsFree adds u to the "is_free" field.
func (au *ActivityUpdate) AddIsFree(u uint8) *ActivityUpdate {
	au.mutation.AddIsFree(u)
	return au
}

// SetIsPublish sets the "is_publish" field.
func (au *ActivityUpdate) SetIsPublish(u uint8) *ActivityUpdate {
	au.mutation.ResetIsPublish()
	au.mutation.SetIsPublish(u)
	return au
}

// SetNillableIsPublish sets the "is_publish" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableIsPublish(u *uint8) *ActivityUpdate {
	if u != nil {
		au.SetIsPublish(*u)
	}
	return au
}

// AddIsPublish adds u to the "is_publish" field.
func (au *ActivityUpdate) AddIsPublish(u uint8) *ActivityUpdate {
	au.mutation.AddIsPublish(u)
	return au
}

// SetAmount sets the "amount" field.
func (au *ActivityUpdate) SetAmount(i int) *ActivityUpdate {
	au.mutation.ResetAmount()
	au.mutation.SetAmount(i)
	return au
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableAmount(i *int) *ActivityUpdate {
	if i != nil {
		au.SetAmount(*i)
	}
	return au
}

// AddAmount adds i to the "amount" field.
func (au *ActivityUpdate) AddAmount(i int) *ActivityUpdate {
	au.mutation.AddAmount(i)
	return au
}

// SetStartAt sets the "start_at" field.
func (au *ActivityUpdate) SetStartAt(t time.Time) *ActivityUpdate {
	au.mutation.SetStartAt(t)
	return au
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableStartAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetStartAt(*t)
	}
	return au
}

// ClearStartAt clears the value of the "start_at" field.
func (au *ActivityUpdate) ClearStartAt() *ActivityUpdate {
	au.mutation.ClearStartAt()
	return au
}

// SetEndAt sets the "end_at" field.
func (au *ActivityUpdate) SetEndAt(t time.Time) *ActivityUpdate {
	au.mutation.SetEndAt(t)
	return au
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableEndAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetEndAt(*t)
	}
	return au
}

// ClearEndAt clears the value of the "end_at" field.
func (au *ActivityUpdate) ClearEndAt() *ActivityUpdate {
	au.mutation.ClearEndAt()
	return au
}

// SetApplyStartAt sets the "apply_start_at" field.
func (au *ActivityUpdate) SetApplyStartAt(t time.Time) *ActivityUpdate {
	au.mutation.SetApplyStartAt(t)
	return au
}

// SetNillableApplyStartAt sets the "apply_start_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableApplyStartAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetApplyStartAt(*t)
	}
	return au
}

// ClearApplyStartAt clears the value of the "apply_start_at" field.
func (au *ActivityUpdate) ClearApplyStartAt() *ActivityUpdate {
	au.mutation.ClearApplyStartAt()
	return au
}

// SetApplyEndAt sets the "apply_end_at" field.
func (au *ActivityUpdate) SetApplyEndAt(t time.Time) *ActivityUpdate {
	au.mutation.SetApplyEndAt(t)
	return au
}

// SetNillableApplyEndAt sets the "apply_end_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableApplyEndAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetApplyEndAt(*t)
	}
	return au
}

// ClearApplyEndAt clears the value of the "apply_end_at" field.
func (au *ActivityUpdate) ClearApplyEndAt() *ActivityUpdate {
	au.mutation.ClearApplyEndAt()
	return au
}

// SetIsHot sets the "is_hot" field.
func (au *ActivityUpdate) SetIsHot(u uint8) *ActivityUpdate {
	au.mutation.ResetIsHot()
	au.mutation.SetIsHot(u)
	return au
}

// SetNillableIsHot sets the "is_hot" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableIsHot(u *uint8) *ActivityUpdate {
	if u != nil {
		au.SetIsHot(*u)
	}
	return au
}

// AddIsHot adds u to the "is_hot" field.
func (au *ActivityUpdate) AddIsHot(u uint8) *ActivityUpdate {
	au.mutation.AddIsHot(u)
	return au
}

// SetIsAutoPublish sets the "is_auto_publish" field.
func (au *ActivityUpdate) SetIsAutoPublish(u uint8) *ActivityUpdate {
	au.mutation.ResetIsAutoPublish()
	au.mutation.SetIsAutoPublish(u)
	return au
}

// SetNillableIsAutoPublish sets the "is_auto_publish" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableIsAutoPublish(u *uint8) *ActivityUpdate {
	if u != nil {
		au.SetIsAutoPublish(*u)
	}
	return au
}

// AddIsAutoPublish adds u to the "is_auto_publish" field.
func (au *ActivityUpdate) AddIsAutoPublish(u uint8) *ActivityUpdate {
	au.mutation.AddIsAutoPublish(u)
	return au
}

// SetApplyCount sets the "apply_count" field.
func (au *ActivityUpdate) SetApplyCount(i int) *ActivityUpdate {
	au.mutation.ResetApplyCount()
	au.mutation.SetApplyCount(i)
	return au
}

// SetNillableApplyCount sets the "apply_count" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableApplyCount(i *int) *ActivityUpdate {
	if i != nil {
		au.SetApplyCount(*i)
	}
	return au
}

// AddApplyCount adds i to the "apply_count" field.
func (au *ActivityUpdate) AddApplyCount(i int) *ActivityUpdate {
	au.mutation.AddApplyCount(i)
	return au
}

// SetJoinCount sets the "join_count" field.
func (au *ActivityUpdate) SetJoinCount(i int) *ActivityUpdate {
	au.mutation.ResetJoinCount()
	au.mutation.SetJoinCount(i)
	return au
}

// SetNillableJoinCount sets the "join_count" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableJoinCount(i *int) *ActivityUpdate {
	if i != nil {
		au.SetJoinCount(*i)
	}
	return au
}

// AddJoinCount adds i to the "join_count" field.
func (au *ActivityUpdate) AddJoinCount(i int) *ActivityUpdate {
	au.mutation.AddJoinCount(i)
	return au
}

// SetIsLimitJoinCount sets the "is_limit_join_count" field.
func (au *ActivityUpdate) SetIsLimitJoinCount(u uint8) *ActivityUpdate {
	au.mutation.ResetIsLimitJoinCount()
	au.mutation.SetIsLimitJoinCount(u)
	return au
}

// SetNillableIsLimitJoinCount sets the "is_limit_join_count" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableIsLimitJoinCount(u *uint8) *ActivityUpdate {
	if u != nil {
		au.SetIsLimitJoinCount(*u)
	}
	return au
}

// AddIsLimitJoinCount adds u to the "is_limit_join_count" field.
func (au *ActivityUpdate) AddIsLimitJoinCount(u uint8) *ActivityUpdate {
	au.mutation.AddIsLimitJoinCount(u)
	return au
}

// SetBirthday sets the "birthday" field.
func (au *ActivityUpdate) SetBirthday(t time.Time) *ActivityUpdate {
	au.mutation.SetBirthday(t)
	return au
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableBirthday(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetBirthday(*t)
	}
	return au
}

// ClearBirthday clears the value of the "birthday" field.
func (au *ActivityUpdate) ClearBirthday() *ActivityUpdate {
	au.mutation.ClearBirthday()
	return au
}

// SetSignRemark sets the "sign_remark" field.
func (au *ActivityUpdate) SetSignRemark(s string) *ActivityUpdate {
	au.mutation.SetSignRemark(s)
	return au
}

// SetNillableSignRemark sets the "sign_remark" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableSignRemark(s *string) *ActivityUpdate {
	if s != nil {
		au.SetSignRemark(*s)
	}
	return au
}

// ClearSignRemark clears the value of the "sign_remark" field.
func (au *ActivityUpdate) ClearSignRemark() *ActivityUpdate {
	au.mutation.ClearSignRemark()
	return au
}

// SetActivityTypeID sets the "activity_type_id" field.
func (au *ActivityUpdate) SetActivityTypeID(i int) *ActivityUpdate {
	au.mutation.ResetActivityTypeID()
	au.mutation.SetActivityTypeID(i)
	return au
}

// SetNillableActivityTypeID sets the "activity_type_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityTypeID(i *int) *ActivityUpdate {
	if i != nil {
		au.SetActivityTypeID(*i)
	}
	return au
}

// ClearActivityTypeID clears the value of the "activity_type_id" field.
func (au *ActivityUpdate) ClearActivityTypeID() *ActivityUpdate {
	au.mutation.ClearActivityTypeID()
	return au
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (au *ActivityUpdate) SetCreatedAdminID(i int) *ActivityUpdate {
	au.mutation.ResetCreatedAdminID()
	au.mutation.SetCreatedAdminID(i)
	return au
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCreatedAdminID(i *int) *ActivityUpdate {
	if i != nil {
		au.SetCreatedAdminID(*i)
	}
	return au
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (au *ActivityUpdate) ClearCreatedAdminID() *ActivityUpdate {
	au.mutation.ClearCreatedAdminID()
	return au
}

// SetActivityType sets the "activity_type" edge to the ActivityType entity.
func (au *ActivityUpdate) SetActivityType(a *ActivityType) *ActivityUpdate {
	return au.SetActivityTypeID(a.ID)
}

// AddApplyActivityIDs adds the "apply_activities" edge to the ActivityApplyInfo entity by IDs.
func (au *ActivityUpdate) AddApplyActivityIDs(ids ...int) *ActivityUpdate {
	au.mutation.AddApplyActivityIDs(ids...)
	return au
}

// AddApplyActivities adds the "apply_activities" edges to the ActivityApplyInfo entity.
func (au *ActivityUpdate) AddApplyActivities(a ...*ActivityApplyInfo) *ActivityUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddApplyActivityIDs(ids...)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (au *ActivityUpdate) SetAdminID(id int) *ActivityUpdate {
	au.mutation.SetAdminID(id)
	return au
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (au *ActivityUpdate) SetNillableAdminID(id *int) *ActivityUpdate {
	if id != nil {
		au = au.SetAdminID(*id)
	}
	return au
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (au *ActivityUpdate) SetAdmin(a *Admin) *ActivityUpdate {
	return au.SetAdminID(a.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// ClearActivityType clears the "activity_type" edge to the ActivityType entity.
func (au *ActivityUpdate) ClearActivityType() *ActivityUpdate {
	au.mutation.ClearActivityType()
	return au
}

// ClearApplyActivities clears all "apply_activities" edges to the ActivityApplyInfo entity.
func (au *ActivityUpdate) ClearApplyActivities() *ActivityUpdate {
	au.mutation.ClearApplyActivities()
	return au
}

// RemoveApplyActivityIDs removes the "apply_activities" edge to ActivityApplyInfo entities by IDs.
func (au *ActivityUpdate) RemoveApplyActivityIDs(ids ...int) *ActivityUpdate {
	au.mutation.RemoveApplyActivityIDs(ids...)
	return au
}

// RemoveApplyActivities removes "apply_activities" edges to ActivityApplyInfo entities.
func (au *ActivityUpdate) RemoveApplyActivities(a ...*ActivityApplyInfo) *ActivityUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveApplyActivityIDs(ids...)
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (au *ActivityUpdate) ClearAdmin() *ActivityUpdate {
	au.mutation.ClearAdmin()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ActivityUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := activity.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldUUID,
		})
	}
	if au.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldUpdatedAt,
		})
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldDeletedAt,
		})
	}
	if au.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldTitle,
		})
	}
	if value, ok := au.mutation.SubTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldSubTitle,
		})
	}
	if value, ok := au.mutation.CoverImgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldCoverImgID,
		})
	}
	if value, ok := au.mutation.AddedCoverImgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldCoverImgID,
		})
	}
	if value, ok := au.mutation.Notice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldNotice,
		})
	}
	if au.mutation.NoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldNotice,
		})
	}
	if value, ok := au.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldDetail,
		})
	}
	if au.mutation.DetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldDetail,
		})
	}
	if value, ok := au.mutation.Place(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldPlace,
		})
	}
	if value, ok := au.mutation.IsFree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsFree,
		})
	}
	if value, ok := au.mutation.AddedIsFree(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsFree,
		})
	}
	if value, ok := au.mutation.IsPublish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsPublish,
		})
	}
	if value, ok := au.mutation.AddedIsPublish(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsPublish,
		})
	}
	if value, ok := au.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldAmount,
		})
	}
	if value, ok := au.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldAmount,
		})
	}
	if value, ok := au.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldStartAt,
		})
	}
	if au.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldStartAt,
		})
	}
	if value, ok := au.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldEndAt,
		})
	}
	if au.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldEndAt,
		})
	}
	if value, ok := au.mutation.ApplyStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldApplyStartAt,
		})
	}
	if au.mutation.ApplyStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldApplyStartAt,
		})
	}
	if value, ok := au.mutation.ApplyEndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldApplyEndAt,
		})
	}
	if au.mutation.ApplyEndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldApplyEndAt,
		})
	}
	if value, ok := au.mutation.IsHot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsHot,
		})
	}
	if value, ok := au.mutation.AddedIsHot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsHot,
		})
	}
	if value, ok := au.mutation.IsAutoPublish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsAutoPublish,
		})
	}
	if value, ok := au.mutation.AddedIsAutoPublish(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsAutoPublish,
		})
	}
	if value, ok := au.mutation.ApplyCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldApplyCount,
		})
	}
	if value, ok := au.mutation.AddedApplyCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldApplyCount,
		})
	}
	if value, ok := au.mutation.JoinCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldJoinCount,
		})
	}
	if value, ok := au.mutation.AddedJoinCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldJoinCount,
		})
	}
	if value, ok := au.mutation.IsLimitJoinCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsLimitJoinCount,
		})
	}
	if value, ok := au.mutation.AddedIsLimitJoinCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsLimitJoinCount,
		})
	}
	if value, ok := au.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldBirthday,
		})
	}
	if au.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldBirthday,
		})
	}
	if value, ok := au.mutation.SignRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldSignRemark,
		})
	}
	if au.mutation.SignRemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldSignRemark,
		})
	}
	if au.mutation.ActivityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActivityTypeTable,
			Columns: []string{activity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActivityTypeTable,
			Columns: []string{activity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ApplyActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ApplyActivitiesTable,
			Columns: []string{activity.ApplyActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activityapplyinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedApplyActivitiesIDs(); len(nodes) > 0 && !au.mutation.ApplyActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ApplyActivitiesTable,
			Columns: []string{activity.ApplyActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activityapplyinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ApplyActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ApplyActivitiesTable,
			Columns: []string{activity.ApplyActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activityapplyinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.AdminTable,
			Columns: []string{activity.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.AdminTable,
			Columns: []string{activity.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityMutation
}

// SetUUID sets the "uuid" field.
func (auo *ActivityUpdateOne) SetUUID(s string) *ActivityUpdateOne {
	auo.mutation.SetUUID(s)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ActivityUpdateOne) SetUpdatedAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *ActivityUpdateOne) ClearUpdatedAt() *ActivityUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *ActivityUpdateOne) SetDeletedAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableDeletedAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *ActivityUpdateOne) ClearDeletedAt() *ActivityUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetTitle sets the "title" field.
func (auo *ActivityUpdateOne) SetTitle(s string) *ActivityUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableTitle(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetSubTitle sets the "sub_title" field.
func (auo *ActivityUpdateOne) SetSubTitle(s string) *ActivityUpdateOne {
	auo.mutation.SetSubTitle(s)
	return auo
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableSubTitle(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetSubTitle(*s)
	}
	return auo
}

// SetCoverImgID sets the "cover_img_id" field.
func (auo *ActivityUpdateOne) SetCoverImgID(i int) *ActivityUpdateOne {
	auo.mutation.ResetCoverImgID()
	auo.mutation.SetCoverImgID(i)
	return auo
}

// SetNillableCoverImgID sets the "cover_img_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCoverImgID(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetCoverImgID(*i)
	}
	return auo
}

// AddCoverImgID adds i to the "cover_img_id" field.
func (auo *ActivityUpdateOne) AddCoverImgID(i int) *ActivityUpdateOne {
	auo.mutation.AddCoverImgID(i)
	return auo
}

// SetNotice sets the "notice" field.
func (auo *ActivityUpdateOne) SetNotice(s string) *ActivityUpdateOne {
	auo.mutation.SetNotice(s)
	return auo
}

// SetNillableNotice sets the "notice" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableNotice(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetNotice(*s)
	}
	return auo
}

// ClearNotice clears the value of the "notice" field.
func (auo *ActivityUpdateOne) ClearNotice() *ActivityUpdateOne {
	auo.mutation.ClearNotice()
	return auo
}

// SetDetail sets the "detail" field.
func (auo *ActivityUpdateOne) SetDetail(s string) *ActivityUpdateOne {
	auo.mutation.SetDetail(s)
	return auo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableDetail(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetDetail(*s)
	}
	return auo
}

// ClearDetail clears the value of the "detail" field.
func (auo *ActivityUpdateOne) ClearDetail() *ActivityUpdateOne {
	auo.mutation.ClearDetail()
	return auo
}

// SetPlace sets the "place" field.
func (auo *ActivityUpdateOne) SetPlace(s string) *ActivityUpdateOne {
	auo.mutation.SetPlace(s)
	return auo
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillablePlace(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetPlace(*s)
	}
	return auo
}

// SetIsFree sets the "is_free" field.
func (auo *ActivityUpdateOne) SetIsFree(u uint8) *ActivityUpdateOne {
	auo.mutation.ResetIsFree()
	auo.mutation.SetIsFree(u)
	return auo
}

// SetNillableIsFree sets the "is_free" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableIsFree(u *uint8) *ActivityUpdateOne {
	if u != nil {
		auo.SetIsFree(*u)
	}
	return auo
}

// AddIsFree adds u to the "is_free" field.
func (auo *ActivityUpdateOne) AddIsFree(u uint8) *ActivityUpdateOne {
	auo.mutation.AddIsFree(u)
	return auo
}

// SetIsPublish sets the "is_publish" field.
func (auo *ActivityUpdateOne) SetIsPublish(u uint8) *ActivityUpdateOne {
	auo.mutation.ResetIsPublish()
	auo.mutation.SetIsPublish(u)
	return auo
}

// SetNillableIsPublish sets the "is_publish" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableIsPublish(u *uint8) *ActivityUpdateOne {
	if u != nil {
		auo.SetIsPublish(*u)
	}
	return auo
}

// AddIsPublish adds u to the "is_publish" field.
func (auo *ActivityUpdateOne) AddIsPublish(u uint8) *ActivityUpdateOne {
	auo.mutation.AddIsPublish(u)
	return auo
}

// SetAmount sets the "amount" field.
func (auo *ActivityUpdateOne) SetAmount(i int) *ActivityUpdateOne {
	auo.mutation.ResetAmount()
	auo.mutation.SetAmount(i)
	return auo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableAmount(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetAmount(*i)
	}
	return auo
}

// AddAmount adds i to the "amount" field.
func (auo *ActivityUpdateOne) AddAmount(i int) *ActivityUpdateOne {
	auo.mutation.AddAmount(i)
	return auo
}

// SetStartAt sets the "start_at" field.
func (auo *ActivityUpdateOne) SetStartAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetStartAt(t)
	return auo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableStartAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetStartAt(*t)
	}
	return auo
}

// ClearStartAt clears the value of the "start_at" field.
func (auo *ActivityUpdateOne) ClearStartAt() *ActivityUpdateOne {
	auo.mutation.ClearStartAt()
	return auo
}

// SetEndAt sets the "end_at" field.
func (auo *ActivityUpdateOne) SetEndAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetEndAt(t)
	return auo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableEndAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetEndAt(*t)
	}
	return auo
}

// ClearEndAt clears the value of the "end_at" field.
func (auo *ActivityUpdateOne) ClearEndAt() *ActivityUpdateOne {
	auo.mutation.ClearEndAt()
	return auo
}

// SetApplyStartAt sets the "apply_start_at" field.
func (auo *ActivityUpdateOne) SetApplyStartAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetApplyStartAt(t)
	return auo
}

// SetNillableApplyStartAt sets the "apply_start_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableApplyStartAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetApplyStartAt(*t)
	}
	return auo
}

// ClearApplyStartAt clears the value of the "apply_start_at" field.
func (auo *ActivityUpdateOne) ClearApplyStartAt() *ActivityUpdateOne {
	auo.mutation.ClearApplyStartAt()
	return auo
}

// SetApplyEndAt sets the "apply_end_at" field.
func (auo *ActivityUpdateOne) SetApplyEndAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetApplyEndAt(t)
	return auo
}

// SetNillableApplyEndAt sets the "apply_end_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableApplyEndAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetApplyEndAt(*t)
	}
	return auo
}

// ClearApplyEndAt clears the value of the "apply_end_at" field.
func (auo *ActivityUpdateOne) ClearApplyEndAt() *ActivityUpdateOne {
	auo.mutation.ClearApplyEndAt()
	return auo
}

// SetIsHot sets the "is_hot" field.
func (auo *ActivityUpdateOne) SetIsHot(u uint8) *ActivityUpdateOne {
	auo.mutation.ResetIsHot()
	auo.mutation.SetIsHot(u)
	return auo
}

// SetNillableIsHot sets the "is_hot" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableIsHot(u *uint8) *ActivityUpdateOne {
	if u != nil {
		auo.SetIsHot(*u)
	}
	return auo
}

// AddIsHot adds u to the "is_hot" field.
func (auo *ActivityUpdateOne) AddIsHot(u uint8) *ActivityUpdateOne {
	auo.mutation.AddIsHot(u)
	return auo
}

// SetIsAutoPublish sets the "is_auto_publish" field.
func (auo *ActivityUpdateOne) SetIsAutoPublish(u uint8) *ActivityUpdateOne {
	auo.mutation.ResetIsAutoPublish()
	auo.mutation.SetIsAutoPublish(u)
	return auo
}

// SetNillableIsAutoPublish sets the "is_auto_publish" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableIsAutoPublish(u *uint8) *ActivityUpdateOne {
	if u != nil {
		auo.SetIsAutoPublish(*u)
	}
	return auo
}

// AddIsAutoPublish adds u to the "is_auto_publish" field.
func (auo *ActivityUpdateOne) AddIsAutoPublish(u uint8) *ActivityUpdateOne {
	auo.mutation.AddIsAutoPublish(u)
	return auo
}

// SetApplyCount sets the "apply_count" field.
func (auo *ActivityUpdateOne) SetApplyCount(i int) *ActivityUpdateOne {
	auo.mutation.ResetApplyCount()
	auo.mutation.SetApplyCount(i)
	return auo
}

// SetNillableApplyCount sets the "apply_count" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableApplyCount(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetApplyCount(*i)
	}
	return auo
}

// AddApplyCount adds i to the "apply_count" field.
func (auo *ActivityUpdateOne) AddApplyCount(i int) *ActivityUpdateOne {
	auo.mutation.AddApplyCount(i)
	return auo
}

// SetJoinCount sets the "join_count" field.
func (auo *ActivityUpdateOne) SetJoinCount(i int) *ActivityUpdateOne {
	auo.mutation.ResetJoinCount()
	auo.mutation.SetJoinCount(i)
	return auo
}

// SetNillableJoinCount sets the "join_count" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableJoinCount(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetJoinCount(*i)
	}
	return auo
}

// AddJoinCount adds i to the "join_count" field.
func (auo *ActivityUpdateOne) AddJoinCount(i int) *ActivityUpdateOne {
	auo.mutation.AddJoinCount(i)
	return auo
}

// SetIsLimitJoinCount sets the "is_limit_join_count" field.
func (auo *ActivityUpdateOne) SetIsLimitJoinCount(u uint8) *ActivityUpdateOne {
	auo.mutation.ResetIsLimitJoinCount()
	auo.mutation.SetIsLimitJoinCount(u)
	return auo
}

// SetNillableIsLimitJoinCount sets the "is_limit_join_count" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableIsLimitJoinCount(u *uint8) *ActivityUpdateOne {
	if u != nil {
		auo.SetIsLimitJoinCount(*u)
	}
	return auo
}

// AddIsLimitJoinCount adds u to the "is_limit_join_count" field.
func (auo *ActivityUpdateOne) AddIsLimitJoinCount(u uint8) *ActivityUpdateOne {
	auo.mutation.AddIsLimitJoinCount(u)
	return auo
}

// SetBirthday sets the "birthday" field.
func (auo *ActivityUpdateOne) SetBirthday(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetBirthday(t)
	return auo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableBirthday(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetBirthday(*t)
	}
	return auo
}

// ClearBirthday clears the value of the "birthday" field.
func (auo *ActivityUpdateOne) ClearBirthday() *ActivityUpdateOne {
	auo.mutation.ClearBirthday()
	return auo
}

// SetSignRemark sets the "sign_remark" field.
func (auo *ActivityUpdateOne) SetSignRemark(s string) *ActivityUpdateOne {
	auo.mutation.SetSignRemark(s)
	return auo
}

// SetNillableSignRemark sets the "sign_remark" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableSignRemark(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetSignRemark(*s)
	}
	return auo
}

// ClearSignRemark clears the value of the "sign_remark" field.
func (auo *ActivityUpdateOne) ClearSignRemark() *ActivityUpdateOne {
	auo.mutation.ClearSignRemark()
	return auo
}

// SetActivityTypeID sets the "activity_type_id" field.
func (auo *ActivityUpdateOne) SetActivityTypeID(i int) *ActivityUpdateOne {
	auo.mutation.ResetActivityTypeID()
	auo.mutation.SetActivityTypeID(i)
	return auo
}

// SetNillableActivityTypeID sets the "activity_type_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityTypeID(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetActivityTypeID(*i)
	}
	return auo
}

// ClearActivityTypeID clears the value of the "activity_type_id" field.
func (auo *ActivityUpdateOne) ClearActivityTypeID() *ActivityUpdateOne {
	auo.mutation.ClearActivityTypeID()
	return auo
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (auo *ActivityUpdateOne) SetCreatedAdminID(i int) *ActivityUpdateOne {
	auo.mutation.ResetCreatedAdminID()
	auo.mutation.SetCreatedAdminID(i)
	return auo
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCreatedAdminID(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetCreatedAdminID(*i)
	}
	return auo
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (auo *ActivityUpdateOne) ClearCreatedAdminID() *ActivityUpdateOne {
	auo.mutation.ClearCreatedAdminID()
	return auo
}

// SetActivityType sets the "activity_type" edge to the ActivityType entity.
func (auo *ActivityUpdateOne) SetActivityType(a *ActivityType) *ActivityUpdateOne {
	return auo.SetActivityTypeID(a.ID)
}

// AddApplyActivityIDs adds the "apply_activities" edge to the ActivityApplyInfo entity by IDs.
func (auo *ActivityUpdateOne) AddApplyActivityIDs(ids ...int) *ActivityUpdateOne {
	auo.mutation.AddApplyActivityIDs(ids...)
	return auo
}

// AddApplyActivities adds the "apply_activities" edges to the ActivityApplyInfo entity.
func (auo *ActivityUpdateOne) AddApplyActivities(a ...*ActivityApplyInfo) *ActivityUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddApplyActivityIDs(ids...)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (auo *ActivityUpdateOne) SetAdminID(id int) *ActivityUpdateOne {
	auo.mutation.SetAdminID(id)
	return auo
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableAdminID(id *int) *ActivityUpdateOne {
	if id != nil {
		auo = auo.SetAdminID(*id)
	}
	return auo
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (auo *ActivityUpdateOne) SetAdmin(a *Admin) *ActivityUpdateOne {
	return auo.SetAdminID(a.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// ClearActivityType clears the "activity_type" edge to the ActivityType entity.
func (auo *ActivityUpdateOne) ClearActivityType() *ActivityUpdateOne {
	auo.mutation.ClearActivityType()
	return auo
}

// ClearApplyActivities clears all "apply_activities" edges to the ActivityApplyInfo entity.
func (auo *ActivityUpdateOne) ClearApplyActivities() *ActivityUpdateOne {
	auo.mutation.ClearApplyActivities()
	return auo
}

// RemoveApplyActivityIDs removes the "apply_activities" edge to ActivityApplyInfo entities by IDs.
func (auo *ActivityUpdateOne) RemoveApplyActivityIDs(ids ...int) *ActivityUpdateOne {
	auo.mutation.RemoveApplyActivityIDs(ids...)
	return auo
}

// RemoveApplyActivities removes "apply_activities" edges to ActivityApplyInfo entities.
func (auo *ActivityUpdateOne) RemoveApplyActivities(a ...*ActivityApplyInfo) *ActivityUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveApplyActivityIDs(ids...)
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (auo *ActivityUpdateOne) ClearAdmin() *ActivityUpdateOne {
	auo.mutation.ClearAdmin()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Activity entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	var (
		err  error
		node *Activity
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ActivityUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := activity.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Activity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activity.FieldID)
		for _, f := range fields {
			if !activity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldUUID,
		})
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldUpdatedAt,
		})
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldDeletedAt,
		})
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldTitle,
		})
	}
	if value, ok := auo.mutation.SubTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldSubTitle,
		})
	}
	if value, ok := auo.mutation.CoverImgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldCoverImgID,
		})
	}
	if value, ok := auo.mutation.AddedCoverImgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldCoverImgID,
		})
	}
	if value, ok := auo.mutation.Notice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldNotice,
		})
	}
	if auo.mutation.NoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldNotice,
		})
	}
	if value, ok := auo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldDetail,
		})
	}
	if auo.mutation.DetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldDetail,
		})
	}
	if value, ok := auo.mutation.Place(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldPlace,
		})
	}
	if value, ok := auo.mutation.IsFree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsFree,
		})
	}
	if value, ok := auo.mutation.AddedIsFree(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsFree,
		})
	}
	if value, ok := auo.mutation.IsPublish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsPublish,
		})
	}
	if value, ok := auo.mutation.AddedIsPublish(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsPublish,
		})
	}
	if value, ok := auo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldAmount,
		})
	}
	if value, ok := auo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldAmount,
		})
	}
	if value, ok := auo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldStartAt,
		})
	}
	if auo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldStartAt,
		})
	}
	if value, ok := auo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldEndAt,
		})
	}
	if auo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldEndAt,
		})
	}
	if value, ok := auo.mutation.ApplyStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldApplyStartAt,
		})
	}
	if auo.mutation.ApplyStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldApplyStartAt,
		})
	}
	if value, ok := auo.mutation.ApplyEndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldApplyEndAt,
		})
	}
	if auo.mutation.ApplyEndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldApplyEndAt,
		})
	}
	if value, ok := auo.mutation.IsHot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsHot,
		})
	}
	if value, ok := auo.mutation.AddedIsHot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsHot,
		})
	}
	if value, ok := auo.mutation.IsAutoPublish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsAutoPublish,
		})
	}
	if value, ok := auo.mutation.AddedIsAutoPublish(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsAutoPublish,
		})
	}
	if value, ok := auo.mutation.ApplyCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldApplyCount,
		})
	}
	if value, ok := auo.mutation.AddedApplyCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldApplyCount,
		})
	}
	if value, ok := auo.mutation.JoinCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldJoinCount,
		})
	}
	if value, ok := auo.mutation.AddedJoinCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldJoinCount,
		})
	}
	if value, ok := auo.mutation.IsLimitJoinCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsLimitJoinCount,
		})
	}
	if value, ok := auo.mutation.AddedIsLimitJoinCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsLimitJoinCount,
		})
	}
	if value, ok := auo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldBirthday,
		})
	}
	if auo.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldBirthday,
		})
	}
	if value, ok := auo.mutation.SignRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldSignRemark,
		})
	}
	if auo.mutation.SignRemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldSignRemark,
		})
	}
	if auo.mutation.ActivityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActivityTypeTable,
			Columns: []string{activity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActivityTypeTable,
			Columns: []string{activity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ApplyActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ApplyActivitiesTable,
			Columns: []string{activity.ApplyActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activityapplyinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedApplyActivitiesIDs(); len(nodes) > 0 && !auo.mutation.ApplyActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ApplyActivitiesTable,
			Columns: []string{activity.ApplyActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activityapplyinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ApplyActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ApplyActivitiesTable,
			Columns: []string{activity.ApplyActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activityapplyinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.AdminTable,
			Columns: []string{activity.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.AdminTable,
			Columns: []string{activity.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

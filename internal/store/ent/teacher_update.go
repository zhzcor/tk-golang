// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/kcclass"
	"gserver/internal/store/ent/kcclassteacher"
	"gserver/internal/store/ent/kccourseteacher"
	"gserver/internal/store/ent/major"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/teacher"
	"gserver/internal/store/ent/teachertag"
	"gserver/internal/store/ent/tkuserexamscorerecord"
	"gserver/internal/store/ent/useraskanswer"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeacherUpdate is the builder for updating Teacher entities.
type TeacherUpdate struct {
	config
	hooks    []Hook
	mutation *TeacherMutation
}

// Where adds a new predicate for the TeacherUpdate builder.
func (tu *TeacherUpdate) Where(ps ...predicate.Teacher) *TeacherUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// SetUUID sets the "uuid" field.
func (tu *TeacherUpdate) SetUUID(s string) *TeacherUpdate {
	tu.mutation.SetUUID(s)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TeacherUpdate) SetUpdatedAt(t time.Time) *TeacherUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TeacherUpdate) ClearUpdatedAt() *TeacherUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TeacherUpdate) SetDeletedAt(t time.Time) *TeacherUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableDeletedAt(t *time.Time) *TeacherUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TeacherUpdate) ClearDeletedAt() *TeacherUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetName sets the "name" field.
func (tu *TeacherUpdate) SetName(s string) *TeacherUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableName(s *string) *TeacherUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetSex sets the "sex" field.
func (tu *TeacherUpdate) SetSex(u uint8) *TeacherUpdate {
	tu.mutation.ResetSex()
	tu.mutation.SetSex(u)
	return tu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableSex(u *uint8) *TeacherUpdate {
	if u != nil {
		tu.SetSex(*u)
	}
	return tu
}

// AddSex adds u to the "sex" field.
func (tu *TeacherUpdate) AddSex(u uint8) *TeacherUpdate {
	tu.mutation.AddSex(u)
	return tu
}

// SetEmail sets the "email" field.
func (tu *TeacherUpdate) SetEmail(s string) *TeacherUpdate {
	tu.mutation.SetEmail(s)
	return tu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableEmail(s *string) *TeacherUpdate {
	if s != nil {
		tu.SetEmail(*s)
	}
	return tu
}

// SetPhone sets the "phone" field.
func (tu *TeacherUpdate) SetPhone(s string) *TeacherUpdate {
	tu.mutation.SetPhone(s)
	return tu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillablePhone(s *string) *TeacherUpdate {
	if s != nil {
		tu.SetPhone(*s)
	}
	return tu
}

// SetNickname sets the "nickname" field.
func (tu *TeacherUpdate) SetNickname(s string) *TeacherUpdate {
	tu.mutation.SetNickname(s)
	return tu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableNickname(s *string) *TeacherUpdate {
	if s != nil {
		tu.SetNickname(*s)
	}
	return tu
}

// SetSubTitle sets the "sub_title" field.
func (tu *TeacherUpdate) SetSubTitle(s string) *TeacherUpdate {
	tu.mutation.SetSubTitle(s)
	return tu
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableSubTitle(s *string) *TeacherUpdate {
	if s != nil {
		tu.SetSubTitle(*s)
	}
	return tu
}

// SetDetail sets the "detail" field.
func (tu *TeacherUpdate) SetDetail(s string) *TeacherUpdate {
	tu.mutation.SetDetail(s)
	return tu
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableDetail(s *string) *TeacherUpdate {
	if s != nil {
		tu.SetDetail(*s)
	}
	return tu
}

// ClearDetail clears the value of the "detail" field.
func (tu *TeacherUpdate) ClearDetail() *TeacherUpdate {
	tu.mutation.ClearDetail()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TeacherUpdate) SetStatus(u uint8) *TeacherUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(u)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableStatus(u *uint8) *TeacherUpdate {
	if u != nil {
		tu.SetStatus(*u)
	}
	return tu
}

// AddStatus adds u to the "status" field.
func (tu *TeacherUpdate) AddStatus(u uint8) *TeacherUpdate {
	tu.mutation.AddStatus(u)
	return tu
}

// SetTeachingAge sets the "teaching_age" field.
func (tu *TeacherUpdate) SetTeachingAge(u uint8) *TeacherUpdate {
	tu.mutation.ResetTeachingAge()
	tu.mutation.SetTeachingAge(u)
	return tu
}

// SetNillableTeachingAge sets the "teaching_age" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableTeachingAge(u *uint8) *TeacherUpdate {
	if u != nil {
		tu.SetTeachingAge(*u)
	}
	return tu
}

// AddTeachingAge adds u to the "teaching_age" field.
func (tu *TeacherUpdate) AddTeachingAge(u uint8) *TeacherUpdate {
	tu.mutation.AddTeachingAge(u)
	return tu
}

// SetAvatarID sets the "avatar_id" field.
func (tu *TeacherUpdate) SetAvatarID(i int) *TeacherUpdate {
	tu.mutation.ResetAvatarID()
	tu.mutation.SetAvatarID(i)
	return tu
}

// SetNillableAvatarID sets the "avatar_id" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableAvatarID(i *int) *TeacherUpdate {
	if i != nil {
		tu.SetAvatarID(*i)
	}
	return tu
}

// ClearAvatarID clears the value of the "avatar_id" field.
func (tu *TeacherUpdate) ClearAvatarID() *TeacherUpdate {
	tu.mutation.ClearAvatarID()
	return tu
}

// SetSortOrder sets the "sort_order" field.
func (tu *TeacherUpdate) SetSortOrder(i int) *TeacherUpdate {
	tu.mutation.ResetSortOrder()
	tu.mutation.SetSortOrder(i)
	return tu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (tu *TeacherUpdate) SetNillableSortOrder(i *int) *TeacherUpdate {
	if i != nil {
		tu.SetSortOrder(*i)
	}
	return tu
}

// AddSortOrder adds i to the "sort_order" field.
func (tu *TeacherUpdate) AddSortOrder(i int) *TeacherUpdate {
	tu.mutation.AddSortOrder(i)
	return tu
}

// AddMajorIDs adds the "majors" edge to the Major entity by IDs.
func (tu *TeacherUpdate) AddMajorIDs(ids ...int) *TeacherUpdate {
	tu.mutation.AddMajorIDs(ids...)
	return tu
}

// AddMajors adds the "majors" edges to the Major entity.
func (tu *TeacherUpdate) AddMajors(m ...*Major) *TeacherUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddMajorIDs(ids...)
}

// AddTeacherTagIDs adds the "teacher_tags" edge to the TeacherTag entity by IDs.
func (tu *TeacherUpdate) AddTeacherTagIDs(ids ...int) *TeacherUpdate {
	tu.mutation.AddTeacherTagIDs(ids...)
	return tu
}

// AddTeacherTags adds the "teacher_tags" edges to the TeacherTag entity.
func (tu *TeacherUpdate) AddTeacherTags(t ...*TeacherTag) *TeacherUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTeacherTagIDs(ids...)
}

// AddTeacherClassIDs adds the "teacher_classes" edge to the KcClassTeacher entity by IDs.
func (tu *TeacherUpdate) AddTeacherClassIDs(ids ...int) *TeacherUpdate {
	tu.mutation.AddTeacherClassIDs(ids...)
	return tu
}

// AddTeacherClasses adds the "teacher_classes" edges to the KcClassTeacher entity.
func (tu *TeacherUpdate) AddTeacherClasses(k ...*KcClassTeacher) *TeacherUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tu.AddTeacherClassIDs(ids...)
}

// AddKcClassMasterIDs adds the "kc_class_masters" edge to the KcClass entity by IDs.
func (tu *TeacherUpdate) AddKcClassMasterIDs(ids ...int) *TeacherUpdate {
	tu.mutation.AddKcClassMasterIDs(ids...)
	return tu
}

// AddKcClassMasters adds the "kc_class_masters" edges to the KcClass entity.
func (tu *TeacherUpdate) AddKcClassMasters(k ...*KcClass) *TeacherUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tu.AddKcClassMasterIDs(ids...)
}

// AddTeacherCourseIDs adds the "teacher_courses" edge to the KcCourseTeacher entity by IDs.
func (tu *TeacherUpdate) AddTeacherCourseIDs(ids ...int) *TeacherUpdate {
	tu.mutation.AddTeacherCourseIDs(ids...)
	return tu
}

// AddTeacherCourses adds the "teacher_courses" edges to the KcCourseTeacher entity.
func (tu *TeacherUpdate) AddTeacherCourses(k ...*KcCourseTeacher) *TeacherUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tu.AddTeacherCourseIDs(ids...)
}

// AddUserExamsTeacherIDs adds the "user_exams_teachers" edge to the TkUserExamScoreRecord entity by IDs.
func (tu *TeacherUpdate) AddUserExamsTeacherIDs(ids ...int) *TeacherUpdate {
	tu.mutation.AddUserExamsTeacherIDs(ids...)
	return tu
}

// AddUserExamsTeachers adds the "user_exams_teachers" edges to the TkUserExamScoreRecord entity.
func (tu *TeacherUpdate) AddUserExamsTeachers(t ...*TkUserExamScoreRecord) *TeacherUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddUserExamsTeacherIDs(ids...)
}

// AddAskTeacherIDs adds the "ask_teachers" edge to the UserAskAnswer entity by IDs.
func (tu *TeacherUpdate) AddAskTeacherIDs(ids ...int) *TeacherUpdate {
	tu.mutation.AddAskTeacherIDs(ids...)
	return tu
}

// AddAskTeachers adds the "ask_teachers" edges to the UserAskAnswer entity.
func (tu *TeacherUpdate) AddAskTeachers(u ...*UserAskAnswer) *TeacherUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddAskTeacherIDs(ids...)
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (tu *TeacherUpdate) SetAttachmentID(id int) *TeacherUpdate {
	tu.mutation.SetAttachmentID(id)
	return tu
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (tu *TeacherUpdate) SetNillableAttachmentID(id *int) *TeacherUpdate {
	if id != nil {
		tu = tu.SetAttachmentID(*id)
	}
	return tu
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (tu *TeacherUpdate) SetAttachment(a *Attachment) *TeacherUpdate {
	return tu.SetAttachmentID(a.ID)
}

// Mutation returns the TeacherMutation object of the builder.
func (tu *TeacherUpdate) Mutation() *TeacherMutation {
	return tu.mutation
}

// ClearMajors clears all "majors" edges to the Major entity.
func (tu *TeacherUpdate) ClearMajors() *TeacherUpdate {
	tu.mutation.ClearMajors()
	return tu
}

// RemoveMajorIDs removes the "majors" edge to Major entities by IDs.
func (tu *TeacherUpdate) RemoveMajorIDs(ids ...int) *TeacherUpdate {
	tu.mutation.RemoveMajorIDs(ids...)
	return tu
}

// RemoveMajors removes "majors" edges to Major entities.
func (tu *TeacherUpdate) RemoveMajors(m ...*Major) *TeacherUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveMajorIDs(ids...)
}

// ClearTeacherTags clears all "teacher_tags" edges to the TeacherTag entity.
func (tu *TeacherUpdate) ClearTeacherTags() *TeacherUpdate {
	tu.mutation.ClearTeacherTags()
	return tu
}

// RemoveTeacherTagIDs removes the "teacher_tags" edge to TeacherTag entities by IDs.
func (tu *TeacherUpdate) RemoveTeacherTagIDs(ids ...int) *TeacherUpdate {
	tu.mutation.RemoveTeacherTagIDs(ids...)
	return tu
}

// RemoveTeacherTags removes "teacher_tags" edges to TeacherTag entities.
func (tu *TeacherUpdate) RemoveTeacherTags(t ...*TeacherTag) *TeacherUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTeacherTagIDs(ids...)
}

// ClearTeacherClasses clears all "teacher_classes" edges to the KcClassTeacher entity.
func (tu *TeacherUpdate) ClearTeacherClasses() *TeacherUpdate {
	tu.mutation.ClearTeacherClasses()
	return tu
}

// RemoveTeacherClassIDs removes the "teacher_classes" edge to KcClassTeacher entities by IDs.
func (tu *TeacherUpdate) RemoveTeacherClassIDs(ids ...int) *TeacherUpdate {
	tu.mutation.RemoveTeacherClassIDs(ids...)
	return tu
}

// RemoveTeacherClasses removes "teacher_classes" edges to KcClassTeacher entities.
func (tu *TeacherUpdate) RemoveTeacherClasses(k ...*KcClassTeacher) *TeacherUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tu.RemoveTeacherClassIDs(ids...)
}

// ClearKcClassMasters clears all "kc_class_masters" edges to the KcClass entity.
func (tu *TeacherUpdate) ClearKcClassMasters() *TeacherUpdate {
	tu.mutation.ClearKcClassMasters()
	return tu
}

// RemoveKcClassMasterIDs removes the "kc_class_masters" edge to KcClass entities by IDs.
func (tu *TeacherUpdate) RemoveKcClassMasterIDs(ids ...int) *TeacherUpdate {
	tu.mutation.RemoveKcClassMasterIDs(ids...)
	return tu
}

// RemoveKcClassMasters removes "kc_class_masters" edges to KcClass entities.
func (tu *TeacherUpdate) RemoveKcClassMasters(k ...*KcClass) *TeacherUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tu.RemoveKcClassMasterIDs(ids...)
}

// ClearTeacherCourses clears all "teacher_courses" edges to the KcCourseTeacher entity.
func (tu *TeacherUpdate) ClearTeacherCourses() *TeacherUpdate {
	tu.mutation.ClearTeacherCourses()
	return tu
}

// RemoveTeacherCourseIDs removes the "teacher_courses" edge to KcCourseTeacher entities by IDs.
func (tu *TeacherUpdate) RemoveTeacherCourseIDs(ids ...int) *TeacherUpdate {
	tu.mutation.RemoveTeacherCourseIDs(ids...)
	return tu
}

// RemoveTeacherCourses removes "teacher_courses" edges to KcCourseTeacher entities.
func (tu *TeacherUpdate) RemoveTeacherCourses(k ...*KcCourseTeacher) *TeacherUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tu.RemoveTeacherCourseIDs(ids...)
}

// ClearUserExamsTeachers clears all "user_exams_teachers" edges to the TkUserExamScoreRecord entity.
func (tu *TeacherUpdate) ClearUserExamsTeachers() *TeacherUpdate {
	tu.mutation.ClearUserExamsTeachers()
	return tu
}

// RemoveUserExamsTeacherIDs removes the "user_exams_teachers" edge to TkUserExamScoreRecord entities by IDs.
func (tu *TeacherUpdate) RemoveUserExamsTeacherIDs(ids ...int) *TeacherUpdate {
	tu.mutation.RemoveUserExamsTeacherIDs(ids...)
	return tu
}

// RemoveUserExamsTeachers removes "user_exams_teachers" edges to TkUserExamScoreRecord entities.
func (tu *TeacherUpdate) RemoveUserExamsTeachers(t ...*TkUserExamScoreRecord) *TeacherUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveUserExamsTeacherIDs(ids...)
}

// ClearAskTeachers clears all "ask_teachers" edges to the UserAskAnswer entity.
func (tu *TeacherUpdate) ClearAskTeachers() *TeacherUpdate {
	tu.mutation.ClearAskTeachers()
	return tu
}

// RemoveAskTeacherIDs removes the "ask_teachers" edge to UserAskAnswer entities by IDs.
func (tu *TeacherUpdate) RemoveAskTeacherIDs(ids ...int) *TeacherUpdate {
	tu.mutation.RemoveAskTeacherIDs(ids...)
	return tu
}

// RemoveAskTeachers removes "ask_teachers" edges to UserAskAnswer entities.
func (tu *TeacherUpdate) RemoveAskTeachers(u ...*UserAskAnswer) *TeacherUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveAskTeacherIDs(ids...)
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (tu *TeacherUpdate) ClearAttachment() *TeacherUpdate {
	tu.mutation.ClearAttachment()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeacherUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeacherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeacherUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeacherUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeacherUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TeacherUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := teacher.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TeacherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teacher.Table,
			Columns: teacher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teacher.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldUUID,
		})
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teacher.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teacher.FieldUpdatedAt,
		})
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teacher.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teacher.FieldDeletedAt,
		})
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teacher.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldName,
		})
	}
	if value, ok := tu.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldSex,
		})
	}
	if value, ok := tu.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldSex,
		})
	}
	if value, ok := tu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldEmail,
		})
	}
	if value, ok := tu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldPhone,
		})
	}
	if value, ok := tu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldNickname,
		})
	}
	if value, ok := tu.mutation.SubTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldSubTitle,
		})
	}
	if value, ok := tu.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldDetail,
		})
	}
	if tu.mutation.DetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: teacher.FieldDetail,
		})
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldStatus,
		})
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldStatus,
		})
	}
	if value, ok := tu.mutation.TeachingAge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldTeachingAge,
		})
	}
	if value, ok := tu.mutation.AddedTeachingAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldTeachingAge,
		})
	}
	if value, ok := tu.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: teacher.FieldSortOrder,
		})
	}
	if value, ok := tu.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: teacher.FieldSortOrder,
		})
	}
	if tu.mutation.MajorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.MajorsTable,
			Columns: teacher.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedMajorsIDs(); len(nodes) > 0 && !tu.mutation.MajorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.MajorsTable,
			Columns: teacher.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.MajorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.MajorsTable,
			Columns: teacher.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TeacherTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherTagsTable,
			Columns: []string{teacher.TeacherTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teachertag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTeacherTagsIDs(); len(nodes) > 0 && !tu.mutation.TeacherTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherTagsTable,
			Columns: []string{teacher.TeacherTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teachertag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TeacherTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherTagsTable,
			Columns: []string{teacher.TeacherTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teachertag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TeacherClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherClassesTable,
			Columns: []string{teacher.TeacherClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTeacherClassesIDs(); len(nodes) > 0 && !tu.mutation.TeacherClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherClassesTable,
			Columns: []string{teacher.TeacherClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TeacherClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherClassesTable,
			Columns: []string{teacher.TeacherClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.KcClassMastersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.KcClassMastersTable,
			Columns: []string{teacher.KcClassMastersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedKcClassMastersIDs(); len(nodes) > 0 && !tu.mutation.KcClassMastersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.KcClassMastersTable,
			Columns: []string{teacher.KcClassMastersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.KcClassMastersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.KcClassMastersTable,
			Columns: []string{teacher.KcClassMastersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TeacherCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherCoursesTable,
			Columns: []string{teacher.TeacherCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourseteacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTeacherCoursesIDs(); len(nodes) > 0 && !tu.mutation.TeacherCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherCoursesTable,
			Columns: []string{teacher.TeacherCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourseteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TeacherCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherCoursesTable,
			Columns: []string{teacher.TeacherCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourseteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UserExamsTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.UserExamsTeachersTable,
			Columns: []string{teacher.UserExamsTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedUserExamsTeachersIDs(); len(nodes) > 0 && !tu.mutation.UserExamsTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.UserExamsTeachersTable,
			Columns: []string{teacher.UserExamsTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserExamsTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.UserExamsTeachersTable,
			Columns: []string{teacher.UserExamsTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AskTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.AskTeachersTable,
			Columns: []string{teacher.AskTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedAskTeachersIDs(); len(nodes) > 0 && !tu.mutation.AskTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.AskTeachersTable,
			Columns: []string{teacher.AskTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AskTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.AskTeachersTable,
			Columns: []string{teacher.AskTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teacher.AttachmentTable,
			Columns: []string{teacher.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teacher.AttachmentTable,
			Columns: []string{teacher.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teacher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TeacherUpdateOne is the builder for updating a single Teacher entity.
type TeacherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeacherMutation
}

// SetUUID sets the "uuid" field.
func (tuo *TeacherUpdateOne) SetUUID(s string) *TeacherUpdateOne {
	tuo.mutation.SetUUID(s)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TeacherUpdateOne) SetUpdatedAt(t time.Time) *TeacherUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TeacherUpdateOne) ClearUpdatedAt() *TeacherUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TeacherUpdateOne) SetDeletedAt(t time.Time) *TeacherUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableDeletedAt(t *time.Time) *TeacherUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TeacherUpdateOne) ClearDeletedAt() *TeacherUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TeacherUpdateOne) SetName(s string) *TeacherUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableName(s *string) *TeacherUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetSex sets the "sex" field.
func (tuo *TeacherUpdateOne) SetSex(u uint8) *TeacherUpdateOne {
	tuo.mutation.ResetSex()
	tuo.mutation.SetSex(u)
	return tuo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableSex(u *uint8) *TeacherUpdateOne {
	if u != nil {
		tuo.SetSex(*u)
	}
	return tuo
}

// AddSex adds u to the "sex" field.
func (tuo *TeacherUpdateOne) AddSex(u uint8) *TeacherUpdateOne {
	tuo.mutation.AddSex(u)
	return tuo
}

// SetEmail sets the "email" field.
func (tuo *TeacherUpdateOne) SetEmail(s string) *TeacherUpdateOne {
	tuo.mutation.SetEmail(s)
	return tuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableEmail(s *string) *TeacherUpdateOne {
	if s != nil {
		tuo.SetEmail(*s)
	}
	return tuo
}

// SetPhone sets the "phone" field.
func (tuo *TeacherUpdateOne) SetPhone(s string) *TeacherUpdateOne {
	tuo.mutation.SetPhone(s)
	return tuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillablePhone(s *string) *TeacherUpdateOne {
	if s != nil {
		tuo.SetPhone(*s)
	}
	return tuo
}

// SetNickname sets the "nickname" field.
func (tuo *TeacherUpdateOne) SetNickname(s string) *TeacherUpdateOne {
	tuo.mutation.SetNickname(s)
	return tuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableNickname(s *string) *TeacherUpdateOne {
	if s != nil {
		tuo.SetNickname(*s)
	}
	return tuo
}

// SetSubTitle sets the "sub_title" field.
func (tuo *TeacherUpdateOne) SetSubTitle(s string) *TeacherUpdateOne {
	tuo.mutation.SetSubTitle(s)
	return tuo
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableSubTitle(s *string) *TeacherUpdateOne {
	if s != nil {
		tuo.SetSubTitle(*s)
	}
	return tuo
}

// SetDetail sets the "detail" field.
func (tuo *TeacherUpdateOne) SetDetail(s string) *TeacherUpdateOne {
	tuo.mutation.SetDetail(s)
	return tuo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableDetail(s *string) *TeacherUpdateOne {
	if s != nil {
		tuo.SetDetail(*s)
	}
	return tuo
}

// ClearDetail clears the value of the "detail" field.
func (tuo *TeacherUpdateOne) ClearDetail() *TeacherUpdateOne {
	tuo.mutation.ClearDetail()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TeacherUpdateOne) SetStatus(u uint8) *TeacherUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(u)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableStatus(u *uint8) *TeacherUpdateOne {
	if u != nil {
		tuo.SetStatus(*u)
	}
	return tuo
}

// AddStatus adds u to the "status" field.
func (tuo *TeacherUpdateOne) AddStatus(u uint8) *TeacherUpdateOne {
	tuo.mutation.AddStatus(u)
	return tuo
}

// SetTeachingAge sets the "teaching_age" field.
func (tuo *TeacherUpdateOne) SetTeachingAge(u uint8) *TeacherUpdateOne {
	tuo.mutation.ResetTeachingAge()
	tuo.mutation.SetTeachingAge(u)
	return tuo
}

// SetNillableTeachingAge sets the "teaching_age" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableTeachingAge(u *uint8) *TeacherUpdateOne {
	if u != nil {
		tuo.SetTeachingAge(*u)
	}
	return tuo
}

// AddTeachingAge adds u to the "teaching_age" field.
func (tuo *TeacherUpdateOne) AddTeachingAge(u uint8) *TeacherUpdateOne {
	tuo.mutation.AddTeachingAge(u)
	return tuo
}

// SetAvatarID sets the "avatar_id" field.
func (tuo *TeacherUpdateOne) SetAvatarID(i int) *TeacherUpdateOne {
	tuo.mutation.ResetAvatarID()
	tuo.mutation.SetAvatarID(i)
	return tuo
}

// SetNillableAvatarID sets the "avatar_id" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableAvatarID(i *int) *TeacherUpdateOne {
	if i != nil {
		tuo.SetAvatarID(*i)
	}
	return tuo
}

// ClearAvatarID clears the value of the "avatar_id" field.
func (tuo *TeacherUpdateOne) ClearAvatarID() *TeacherUpdateOne {
	tuo.mutation.ClearAvatarID()
	return tuo
}

// SetSortOrder sets the "sort_order" field.
func (tuo *TeacherUpdateOne) SetSortOrder(i int) *TeacherUpdateOne {
	tuo.mutation.ResetSortOrder()
	tuo.mutation.SetSortOrder(i)
	return tuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableSortOrder(i *int) *TeacherUpdateOne {
	if i != nil {
		tuo.SetSortOrder(*i)
	}
	return tuo
}

// AddSortOrder adds i to the "sort_order" field.
func (tuo *TeacherUpdateOne) AddSortOrder(i int) *TeacherUpdateOne {
	tuo.mutation.AddSortOrder(i)
	return tuo
}

// AddMajorIDs adds the "majors" edge to the Major entity by IDs.
func (tuo *TeacherUpdateOne) AddMajorIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.AddMajorIDs(ids...)
	return tuo
}

// AddMajors adds the "majors" edges to the Major entity.
func (tuo *TeacherUpdateOne) AddMajors(m ...*Major) *TeacherUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddMajorIDs(ids...)
}

// AddTeacherTagIDs adds the "teacher_tags" edge to the TeacherTag entity by IDs.
func (tuo *TeacherUpdateOne) AddTeacherTagIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.AddTeacherTagIDs(ids...)
	return tuo
}

// AddTeacherTags adds the "teacher_tags" edges to the TeacherTag entity.
func (tuo *TeacherUpdateOne) AddTeacherTags(t ...*TeacherTag) *TeacherUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTeacherTagIDs(ids...)
}

// AddTeacherClassIDs adds the "teacher_classes" edge to the KcClassTeacher entity by IDs.
func (tuo *TeacherUpdateOne) AddTeacherClassIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.AddTeacherClassIDs(ids...)
	return tuo
}

// AddTeacherClasses adds the "teacher_classes" edges to the KcClassTeacher entity.
func (tuo *TeacherUpdateOne) AddTeacherClasses(k ...*KcClassTeacher) *TeacherUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tuo.AddTeacherClassIDs(ids...)
}

// AddKcClassMasterIDs adds the "kc_class_masters" edge to the KcClass entity by IDs.
func (tuo *TeacherUpdateOne) AddKcClassMasterIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.AddKcClassMasterIDs(ids...)
	return tuo
}

// AddKcClassMasters adds the "kc_class_masters" edges to the KcClass entity.
func (tuo *TeacherUpdateOne) AddKcClassMasters(k ...*KcClass) *TeacherUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tuo.AddKcClassMasterIDs(ids...)
}

// AddTeacherCourseIDs adds the "teacher_courses" edge to the KcCourseTeacher entity by IDs.
func (tuo *TeacherUpdateOne) AddTeacherCourseIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.AddTeacherCourseIDs(ids...)
	return tuo
}

// AddTeacherCourses adds the "teacher_courses" edges to the KcCourseTeacher entity.
func (tuo *TeacherUpdateOne) AddTeacherCourses(k ...*KcCourseTeacher) *TeacherUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tuo.AddTeacherCourseIDs(ids...)
}

// AddUserExamsTeacherIDs adds the "user_exams_teachers" edge to the TkUserExamScoreRecord entity by IDs.
func (tuo *TeacherUpdateOne) AddUserExamsTeacherIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.AddUserExamsTeacherIDs(ids...)
	return tuo
}

// AddUserExamsTeachers adds the "user_exams_teachers" edges to the TkUserExamScoreRecord entity.
func (tuo *TeacherUpdateOne) AddUserExamsTeachers(t ...*TkUserExamScoreRecord) *TeacherUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddUserExamsTeacherIDs(ids...)
}

// AddAskTeacherIDs adds the "ask_teachers" edge to the UserAskAnswer entity by IDs.
func (tuo *TeacherUpdateOne) AddAskTeacherIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.AddAskTeacherIDs(ids...)
	return tuo
}

// AddAskTeachers adds the "ask_teachers" edges to the UserAskAnswer entity.
func (tuo *TeacherUpdateOne) AddAskTeachers(u ...*UserAskAnswer) *TeacherUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddAskTeacherIDs(ids...)
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (tuo *TeacherUpdateOne) SetAttachmentID(id int) *TeacherUpdateOne {
	tuo.mutation.SetAttachmentID(id)
	return tuo
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (tuo *TeacherUpdateOne) SetNillableAttachmentID(id *int) *TeacherUpdateOne {
	if id != nil {
		tuo = tuo.SetAttachmentID(*id)
	}
	return tuo
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (tuo *TeacherUpdateOne) SetAttachment(a *Attachment) *TeacherUpdateOne {
	return tuo.SetAttachmentID(a.ID)
}

// Mutation returns the TeacherMutation object of the builder.
func (tuo *TeacherUpdateOne) Mutation() *TeacherMutation {
	return tuo.mutation
}

// ClearMajors clears all "majors" edges to the Major entity.
func (tuo *TeacherUpdateOne) ClearMajors() *TeacherUpdateOne {
	tuo.mutation.ClearMajors()
	return tuo
}

// RemoveMajorIDs removes the "majors" edge to Major entities by IDs.
func (tuo *TeacherUpdateOne) RemoveMajorIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.RemoveMajorIDs(ids...)
	return tuo
}

// RemoveMajors removes "majors" edges to Major entities.
func (tuo *TeacherUpdateOne) RemoveMajors(m ...*Major) *TeacherUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveMajorIDs(ids...)
}

// ClearTeacherTags clears all "teacher_tags" edges to the TeacherTag entity.
func (tuo *TeacherUpdateOne) ClearTeacherTags() *TeacherUpdateOne {
	tuo.mutation.ClearTeacherTags()
	return tuo
}

// RemoveTeacherTagIDs removes the "teacher_tags" edge to TeacherTag entities by IDs.
func (tuo *TeacherUpdateOne) RemoveTeacherTagIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.RemoveTeacherTagIDs(ids...)
	return tuo
}

// RemoveTeacherTags removes "teacher_tags" edges to TeacherTag entities.
func (tuo *TeacherUpdateOne) RemoveTeacherTags(t ...*TeacherTag) *TeacherUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTeacherTagIDs(ids...)
}

// ClearTeacherClasses clears all "teacher_classes" edges to the KcClassTeacher entity.
func (tuo *TeacherUpdateOne) ClearTeacherClasses() *TeacherUpdateOne {
	tuo.mutation.ClearTeacherClasses()
	return tuo
}

// RemoveTeacherClassIDs removes the "teacher_classes" edge to KcClassTeacher entities by IDs.
func (tuo *TeacherUpdateOne) RemoveTeacherClassIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.RemoveTeacherClassIDs(ids...)
	return tuo
}

// RemoveTeacherClasses removes "teacher_classes" edges to KcClassTeacher entities.
func (tuo *TeacherUpdateOne) RemoveTeacherClasses(k ...*KcClassTeacher) *TeacherUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tuo.RemoveTeacherClassIDs(ids...)
}

// ClearKcClassMasters clears all "kc_class_masters" edges to the KcClass entity.
func (tuo *TeacherUpdateOne) ClearKcClassMasters() *TeacherUpdateOne {
	tuo.mutation.ClearKcClassMasters()
	return tuo
}

// RemoveKcClassMasterIDs removes the "kc_class_masters" edge to KcClass entities by IDs.
func (tuo *TeacherUpdateOne) RemoveKcClassMasterIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.RemoveKcClassMasterIDs(ids...)
	return tuo
}

// RemoveKcClassMasters removes "kc_class_masters" edges to KcClass entities.
func (tuo *TeacherUpdateOne) RemoveKcClassMasters(k ...*KcClass) *TeacherUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tuo.RemoveKcClassMasterIDs(ids...)
}

// ClearTeacherCourses clears all "teacher_courses" edges to the KcCourseTeacher entity.
func (tuo *TeacherUpdateOne) ClearTeacherCourses() *TeacherUpdateOne {
	tuo.mutation.ClearTeacherCourses()
	return tuo
}

// RemoveTeacherCourseIDs removes the "teacher_courses" edge to KcCourseTeacher entities by IDs.
func (tuo *TeacherUpdateOne) RemoveTeacherCourseIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.RemoveTeacherCourseIDs(ids...)
	return tuo
}

// RemoveTeacherCourses removes "teacher_courses" edges to KcCourseTeacher entities.
func (tuo *TeacherUpdateOne) RemoveTeacherCourses(k ...*KcCourseTeacher) *TeacherUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tuo.RemoveTeacherCourseIDs(ids...)
}

// ClearUserExamsTeachers clears all "user_exams_teachers" edges to the TkUserExamScoreRecord entity.
func (tuo *TeacherUpdateOne) ClearUserExamsTeachers() *TeacherUpdateOne {
	tuo.mutation.ClearUserExamsTeachers()
	return tuo
}

// RemoveUserExamsTeacherIDs removes the "user_exams_teachers" edge to TkUserExamScoreRecord entities by IDs.
func (tuo *TeacherUpdateOne) RemoveUserExamsTeacherIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.RemoveUserExamsTeacherIDs(ids...)
	return tuo
}

// RemoveUserExamsTeachers removes "user_exams_teachers" edges to TkUserExamScoreRecord entities.
func (tuo *TeacherUpdateOne) RemoveUserExamsTeachers(t ...*TkUserExamScoreRecord) *TeacherUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveUserExamsTeacherIDs(ids...)
}

// ClearAskTeachers clears all "ask_teachers" edges to the UserAskAnswer entity.
func (tuo *TeacherUpdateOne) ClearAskTeachers() *TeacherUpdateOne {
	tuo.mutation.ClearAskTeachers()
	return tuo
}

// RemoveAskTeacherIDs removes the "ask_teachers" edge to UserAskAnswer entities by IDs.
func (tuo *TeacherUpdateOne) RemoveAskTeacherIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.RemoveAskTeacherIDs(ids...)
	return tuo
}

// RemoveAskTeachers removes "ask_teachers" edges to UserAskAnswer entities.
func (tuo *TeacherUpdateOne) RemoveAskTeachers(u ...*UserAskAnswer) *TeacherUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveAskTeacherIDs(ids...)
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (tuo *TeacherUpdateOne) ClearAttachment() *TeacherUpdateOne {
	tuo.mutation.ClearAttachment()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeacherUpdateOne) Select(field string, fields ...string) *TeacherUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Teacher entity.
func (tuo *TeacherUpdateOne) Save(ctx context.Context) (*Teacher, error) {
	var (
		err  error
		node *Teacher
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeacherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeacherUpdateOne) SaveX(ctx context.Context) *Teacher {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeacherUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeacherUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TeacherUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := teacher.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TeacherUpdateOne) sqlSave(ctx context.Context) (_node *Teacher, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teacher.Table,
			Columns: teacher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teacher.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Teacher.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teacher.FieldID)
		for _, f := range fields {
			if !teacher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teacher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldUUID,
		})
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teacher.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teacher.FieldUpdatedAt,
		})
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teacher.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teacher.FieldDeletedAt,
		})
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teacher.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldName,
		})
	}
	if value, ok := tuo.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldSex,
		})
	}
	if value, ok := tuo.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldSex,
		})
	}
	if value, ok := tuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldEmail,
		})
	}
	if value, ok := tuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldPhone,
		})
	}
	if value, ok := tuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldNickname,
		})
	}
	if value, ok := tuo.mutation.SubTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldSubTitle,
		})
	}
	if value, ok := tuo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldDetail,
		})
	}
	if tuo.mutation.DetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: teacher.FieldDetail,
		})
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldStatus,
		})
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldStatus,
		})
	}
	if value, ok := tuo.mutation.TeachingAge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldTeachingAge,
		})
	}
	if value, ok := tuo.mutation.AddedTeachingAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldTeachingAge,
		})
	}
	if value, ok := tuo.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: teacher.FieldSortOrder,
		})
	}
	if value, ok := tuo.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: teacher.FieldSortOrder,
		})
	}
	if tuo.mutation.MajorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.MajorsTable,
			Columns: teacher.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedMajorsIDs(); len(nodes) > 0 && !tuo.mutation.MajorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.MajorsTable,
			Columns: teacher.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.MajorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.MajorsTable,
			Columns: teacher.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TeacherTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherTagsTable,
			Columns: []string{teacher.TeacherTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teachertag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTeacherTagsIDs(); len(nodes) > 0 && !tuo.mutation.TeacherTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherTagsTable,
			Columns: []string{teacher.TeacherTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teachertag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TeacherTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherTagsTable,
			Columns: []string{teacher.TeacherTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teachertag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TeacherClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherClassesTable,
			Columns: []string{teacher.TeacherClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTeacherClassesIDs(); len(nodes) > 0 && !tuo.mutation.TeacherClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherClassesTable,
			Columns: []string{teacher.TeacherClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TeacherClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherClassesTable,
			Columns: []string{teacher.TeacherClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.KcClassMastersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.KcClassMastersTable,
			Columns: []string{teacher.KcClassMastersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedKcClassMastersIDs(); len(nodes) > 0 && !tuo.mutation.KcClassMastersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.KcClassMastersTable,
			Columns: []string{teacher.KcClassMastersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.KcClassMastersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.KcClassMastersTable,
			Columns: []string{teacher.KcClassMastersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TeacherCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherCoursesTable,
			Columns: []string{teacher.TeacherCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourseteacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTeacherCoursesIDs(); len(nodes) > 0 && !tuo.mutation.TeacherCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherCoursesTable,
			Columns: []string{teacher.TeacherCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourseteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TeacherCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherCoursesTable,
			Columns: []string{teacher.TeacherCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourseteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UserExamsTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.UserExamsTeachersTable,
			Columns: []string{teacher.UserExamsTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedUserExamsTeachersIDs(); len(nodes) > 0 && !tuo.mutation.UserExamsTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.UserExamsTeachersTable,
			Columns: []string{teacher.UserExamsTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserExamsTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.UserExamsTeachersTable,
			Columns: []string{teacher.UserExamsTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AskTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.AskTeachersTable,
			Columns: []string{teacher.AskTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedAskTeachersIDs(); len(nodes) > 0 && !tuo.mutation.AskTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.AskTeachersTable,
			Columns: []string{teacher.AskTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AskTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.AskTeachersTable,
			Columns: []string{teacher.AskTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teacher.AttachmentTable,
			Columns: []string{teacher.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teacher.AttachmentTable,
			Columns: []string{teacher.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Teacher{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teacher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

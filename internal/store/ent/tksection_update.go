// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/makeuserquestionrecord"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkchapter"
	"gserver/internal/store/ent/tkquestionsection"
	"gserver/internal/store/ent/tksection"
	"gserver/internal/store/ent/tkuserexamscorerecord"
	"gserver/internal/store/ent/tkuserquestionrecord"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkSectionUpdate is the builder for updating TkSection entities.
type TkSectionUpdate struct {
	config
	hooks    []Hook
	mutation *TkSectionMutation
}

// Where adds a new predicate for the TkSectionUpdate builder.
func (tsu *TkSectionUpdate) Where(ps ...predicate.TkSection) *TkSectionUpdate {
	tsu.mutation.predicates = append(tsu.mutation.predicates, ps...)
	return tsu
}

// SetUUID sets the "uuid" field.
func (tsu *TkSectionUpdate) SetUUID(s string) *TkSectionUpdate {
	tsu.mutation.SetUUID(s)
	return tsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsu *TkSectionUpdate) SetUpdatedAt(t time.Time) *TkSectionUpdate {
	tsu.mutation.SetUpdatedAt(t)
	return tsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tsu *TkSectionUpdate) ClearUpdatedAt() *TkSectionUpdate {
	tsu.mutation.ClearUpdatedAt()
	return tsu
}

// SetDeletedAt sets the "deleted_at" field.
func (tsu *TkSectionUpdate) SetDeletedAt(t time.Time) *TkSectionUpdate {
	tsu.mutation.SetDeletedAt(t)
	return tsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsu *TkSectionUpdate) SetNillableDeletedAt(t *time.Time) *TkSectionUpdate {
	if t != nil {
		tsu.SetDeletedAt(*t)
	}
	return tsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsu *TkSectionUpdate) ClearDeletedAt() *TkSectionUpdate {
	tsu.mutation.ClearDeletedAt()
	return tsu
}

// SetName sets the "name" field.
func (tsu *TkSectionUpdate) SetName(s string) *TkSectionUpdate {
	tsu.mutation.SetName(s)
	return tsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tsu *TkSectionUpdate) SetNillableName(s *string) *TkSectionUpdate {
	if s != nil {
		tsu.SetName(*s)
	}
	return tsu
}

// SetChapterID sets the "chapter_id" field.
func (tsu *TkSectionUpdate) SetChapterID(i int) *TkSectionUpdate {
	tsu.mutation.ResetChapterID()
	tsu.mutation.SetChapterID(i)
	return tsu
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (tsu *TkSectionUpdate) SetNillableChapterID(i *int) *TkSectionUpdate {
	if i != nil {
		tsu.SetChapterID(*i)
	}
	return tsu
}

// ClearChapterID clears the value of the "chapter_id" field.
func (tsu *TkSectionUpdate) ClearChapterID() *TkSectionUpdate {
	tsu.mutation.ClearChapterID()
	return tsu
}

// SetQuestionCount sets the "question_count" field.
func (tsu *TkSectionUpdate) SetQuestionCount(i int) *TkSectionUpdate {
	tsu.mutation.ResetQuestionCount()
	tsu.mutation.SetQuestionCount(i)
	return tsu
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tsu *TkSectionUpdate) SetNillableQuestionCount(i *int) *TkSectionUpdate {
	if i != nil {
		tsu.SetQuestionCount(*i)
	}
	return tsu
}

// AddQuestionCount adds i to the "question_count" field.
func (tsu *TkSectionUpdate) AddQuestionCount(i int) *TkSectionUpdate {
	tsu.mutation.AddQuestionCount(i)
	return tsu
}

// SetChapter sets the "chapter" edge to the TkChapter entity.
func (tsu *TkSectionUpdate) SetChapter(t *TkChapter) *TkSectionUpdate {
	return tsu.SetChapterID(t.ID)
}

// AddTkSectionLinkIDs adds the "tk_section_links" edge to the TkQuestionSection entity by IDs.
func (tsu *TkSectionUpdate) AddTkSectionLinkIDs(ids ...int) *TkSectionUpdate {
	tsu.mutation.AddTkSectionLinkIDs(ids...)
	return tsu
}

// AddTkSectionLinks adds the "tk_section_links" edges to the TkQuestionSection entity.
func (tsu *TkSectionUpdate) AddTkSectionLinks(t ...*TkQuestionSection) *TkSectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.AddTkSectionLinkIDs(ids...)
}

// AddSectionRecordIDs adds the "section_records" edge to the TkUserQuestionRecord entity by IDs.
func (tsu *TkSectionUpdate) AddSectionRecordIDs(ids ...int) *TkSectionUpdate {
	tsu.mutation.AddSectionRecordIDs(ids...)
	return tsu
}

// AddSectionRecords adds the "section_records" edges to the TkUserQuestionRecord entity.
func (tsu *TkSectionUpdate) AddSectionRecords(t ...*TkUserQuestionRecord) *TkSectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.AddSectionRecordIDs(ids...)
}

// AddUserSectionExamIDs adds the "user_section_exam" edge to the TkUserExamScoreRecord entity by IDs.
func (tsu *TkSectionUpdate) AddUserSectionExamIDs(ids ...int) *TkSectionUpdate {
	tsu.mutation.AddUserSectionExamIDs(ids...)
	return tsu
}

// AddUserSectionExam adds the "user_section_exam" edges to the TkUserExamScoreRecord entity.
func (tsu *TkSectionUpdate) AddUserSectionExam(t ...*TkUserExamScoreRecord) *TkSectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.AddUserSectionExamIDs(ids...)
}

// AddMakeUserQuestionSecIDs adds the "make_user_question_sec" edge to the MakeUserQuestionRecord entity by IDs.
func (tsu *TkSectionUpdate) AddMakeUserQuestionSecIDs(ids ...int) *TkSectionUpdate {
	tsu.mutation.AddMakeUserQuestionSecIDs(ids...)
	return tsu
}

// AddMakeUserQuestionSec adds the "make_user_question_sec" edges to the MakeUserQuestionRecord entity.
func (tsu *TkSectionUpdate) AddMakeUserQuestionSec(m ...*MakeUserQuestionRecord) *TkSectionUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tsu.AddMakeUserQuestionSecIDs(ids...)
}

// Mutation returns the TkSectionMutation object of the builder.
func (tsu *TkSectionUpdate) Mutation() *TkSectionMutation {
	return tsu.mutation
}

// ClearChapter clears the "chapter" edge to the TkChapter entity.
func (tsu *TkSectionUpdate) ClearChapter() *TkSectionUpdate {
	tsu.mutation.ClearChapter()
	return tsu
}

// ClearTkSectionLinks clears all "tk_section_links" edges to the TkQuestionSection entity.
func (tsu *TkSectionUpdate) ClearTkSectionLinks() *TkSectionUpdate {
	tsu.mutation.ClearTkSectionLinks()
	return tsu
}

// RemoveTkSectionLinkIDs removes the "tk_section_links" edge to TkQuestionSection entities by IDs.
func (tsu *TkSectionUpdate) RemoveTkSectionLinkIDs(ids ...int) *TkSectionUpdate {
	tsu.mutation.RemoveTkSectionLinkIDs(ids...)
	return tsu
}

// RemoveTkSectionLinks removes "tk_section_links" edges to TkQuestionSection entities.
func (tsu *TkSectionUpdate) RemoveTkSectionLinks(t ...*TkQuestionSection) *TkSectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.RemoveTkSectionLinkIDs(ids...)
}

// ClearSectionRecords clears all "section_records" edges to the TkUserQuestionRecord entity.
func (tsu *TkSectionUpdate) ClearSectionRecords() *TkSectionUpdate {
	tsu.mutation.ClearSectionRecords()
	return tsu
}

// RemoveSectionRecordIDs removes the "section_records" edge to TkUserQuestionRecord entities by IDs.
func (tsu *TkSectionUpdate) RemoveSectionRecordIDs(ids ...int) *TkSectionUpdate {
	tsu.mutation.RemoveSectionRecordIDs(ids...)
	return tsu
}

// RemoveSectionRecords removes "section_records" edges to TkUserQuestionRecord entities.
func (tsu *TkSectionUpdate) RemoveSectionRecords(t ...*TkUserQuestionRecord) *TkSectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.RemoveSectionRecordIDs(ids...)
}

// ClearUserSectionExam clears all "user_section_exam" edges to the TkUserExamScoreRecord entity.
func (tsu *TkSectionUpdate) ClearUserSectionExam() *TkSectionUpdate {
	tsu.mutation.ClearUserSectionExam()
	return tsu
}

// RemoveUserSectionExamIDs removes the "user_section_exam" edge to TkUserExamScoreRecord entities by IDs.
func (tsu *TkSectionUpdate) RemoveUserSectionExamIDs(ids ...int) *TkSectionUpdate {
	tsu.mutation.RemoveUserSectionExamIDs(ids...)
	return tsu
}

// RemoveUserSectionExam removes "user_section_exam" edges to TkUserExamScoreRecord entities.
func (tsu *TkSectionUpdate) RemoveUserSectionExam(t ...*TkUserExamScoreRecord) *TkSectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.RemoveUserSectionExamIDs(ids...)
}

// ClearMakeUserQuestionSec clears all "make_user_question_sec" edges to the MakeUserQuestionRecord entity.
func (tsu *TkSectionUpdate) ClearMakeUserQuestionSec() *TkSectionUpdate {
	tsu.mutation.ClearMakeUserQuestionSec()
	return tsu
}

// RemoveMakeUserQuestionSecIDs removes the "make_user_question_sec" edge to MakeUserQuestionRecord entities by IDs.
func (tsu *TkSectionUpdate) RemoveMakeUserQuestionSecIDs(ids ...int) *TkSectionUpdate {
	tsu.mutation.RemoveMakeUserQuestionSecIDs(ids...)
	return tsu
}

// RemoveMakeUserQuestionSec removes "make_user_question_sec" edges to MakeUserQuestionRecord entities.
func (tsu *TkSectionUpdate) RemoveMakeUserQuestionSec(m ...*MakeUserQuestionRecord) *TkSectionUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tsu.RemoveMakeUserQuestionSecIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TkSectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tsu.defaults()
	if len(tsu.hooks) == 0 {
		affected, err = tsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tsu.mutation = mutation
			affected, err = tsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tsu.hooks) - 1; i >= 0; i-- {
			mut = tsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TkSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TkSectionUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TkSectionUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsu *TkSectionUpdate) defaults() {
	if _, ok := tsu.mutation.UpdatedAt(); !ok && !tsu.mutation.UpdatedAtCleared() {
		v := tksection.UpdateDefaultUpdatedAt()
		tsu.mutation.SetUpdatedAt(v)
	}
}

func (tsu *TkSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tksection.Table,
			Columns: tksection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tksection.FieldID,
			},
		},
	}
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tksection.FieldUUID,
		})
	}
	if tsu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tksection.FieldCreatedAt,
		})
	}
	if value, ok := tsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tksection.FieldUpdatedAt,
		})
	}
	if tsu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tksection.FieldUpdatedAt,
		})
	}
	if value, ok := tsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tksection.FieldDeletedAt,
		})
	}
	if tsu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tksection.FieldDeletedAt,
		})
	}
	if value, ok := tsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tksection.FieldName,
		})
	}
	if value, ok := tsu.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tksection.FieldQuestionCount,
		})
	}
	if value, ok := tsu.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tksection.FieldQuestionCount,
		})
	}
	if tsu.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tksection.ChapterTable,
			Columns: []string{tksection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tksection.ChapterTable,
			Columns: []string{tksection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.TkSectionLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.TkSectionLinksTable,
			Columns: []string{tksection.TkSectionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionsection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedTkSectionLinksIDs(); len(nodes) > 0 && !tsu.mutation.TkSectionLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.TkSectionLinksTable,
			Columns: []string{tksection.TkSectionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionsection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.TkSectionLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.TkSectionLinksTable,
			Columns: []string{tksection.TkSectionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionsection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.SectionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.SectionRecordsTable,
			Columns: []string{tksection.SectionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedSectionRecordsIDs(); len(nodes) > 0 && !tsu.mutation.SectionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.SectionRecordsTable,
			Columns: []string{tksection.SectionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.SectionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.SectionRecordsTable,
			Columns: []string{tksection.SectionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.UserSectionExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.UserSectionExamTable,
			Columns: []string{tksection.UserSectionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedUserSectionExamIDs(); len(nodes) > 0 && !tsu.mutation.UserSectionExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.UserSectionExamTable,
			Columns: []string{tksection.UserSectionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.UserSectionExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.UserSectionExamTable,
			Columns: []string{tksection.UserSectionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.MakeUserQuestionSecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.MakeUserQuestionSecTable,
			Columns: []string{tksection.MakeUserQuestionSecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedMakeUserQuestionSecIDs(); len(nodes) > 0 && !tsu.mutation.MakeUserQuestionSecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.MakeUserQuestionSecTable,
			Columns: []string{tksection.MakeUserQuestionSecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.MakeUserQuestionSecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.MakeUserQuestionSecTable,
			Columns: []string{tksection.MakeUserQuestionSecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tksection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkSectionUpdateOne is the builder for updating a single TkSection entity.
type TkSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkSectionMutation
}

// SetUUID sets the "uuid" field.
func (tsuo *TkSectionUpdateOne) SetUUID(s string) *TkSectionUpdateOne {
	tsuo.mutation.SetUUID(s)
	return tsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tsuo *TkSectionUpdateOne) SetUpdatedAt(t time.Time) *TkSectionUpdateOne {
	tsuo.mutation.SetUpdatedAt(t)
	return tsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tsuo *TkSectionUpdateOne) ClearUpdatedAt() *TkSectionUpdateOne {
	tsuo.mutation.ClearUpdatedAt()
	return tsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tsuo *TkSectionUpdateOne) SetDeletedAt(t time.Time) *TkSectionUpdateOne {
	tsuo.mutation.SetDeletedAt(t)
	return tsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsuo *TkSectionUpdateOne) SetNillableDeletedAt(t *time.Time) *TkSectionUpdateOne {
	if t != nil {
		tsuo.SetDeletedAt(*t)
	}
	return tsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsuo *TkSectionUpdateOne) ClearDeletedAt() *TkSectionUpdateOne {
	tsuo.mutation.ClearDeletedAt()
	return tsuo
}

// SetName sets the "name" field.
func (tsuo *TkSectionUpdateOne) SetName(s string) *TkSectionUpdateOne {
	tsuo.mutation.SetName(s)
	return tsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tsuo *TkSectionUpdateOne) SetNillableName(s *string) *TkSectionUpdateOne {
	if s != nil {
		tsuo.SetName(*s)
	}
	return tsuo
}

// SetChapterID sets the "chapter_id" field.
func (tsuo *TkSectionUpdateOne) SetChapterID(i int) *TkSectionUpdateOne {
	tsuo.mutation.ResetChapterID()
	tsuo.mutation.SetChapterID(i)
	return tsuo
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (tsuo *TkSectionUpdateOne) SetNillableChapterID(i *int) *TkSectionUpdateOne {
	if i != nil {
		tsuo.SetChapterID(*i)
	}
	return tsuo
}

// ClearChapterID clears the value of the "chapter_id" field.
func (tsuo *TkSectionUpdateOne) ClearChapterID() *TkSectionUpdateOne {
	tsuo.mutation.ClearChapterID()
	return tsuo
}

// SetQuestionCount sets the "question_count" field.
func (tsuo *TkSectionUpdateOne) SetQuestionCount(i int) *TkSectionUpdateOne {
	tsuo.mutation.ResetQuestionCount()
	tsuo.mutation.SetQuestionCount(i)
	return tsuo
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tsuo *TkSectionUpdateOne) SetNillableQuestionCount(i *int) *TkSectionUpdateOne {
	if i != nil {
		tsuo.SetQuestionCount(*i)
	}
	return tsuo
}

// AddQuestionCount adds i to the "question_count" field.
func (tsuo *TkSectionUpdateOne) AddQuestionCount(i int) *TkSectionUpdateOne {
	tsuo.mutation.AddQuestionCount(i)
	return tsuo
}

// SetChapter sets the "chapter" edge to the TkChapter entity.
func (tsuo *TkSectionUpdateOne) SetChapter(t *TkChapter) *TkSectionUpdateOne {
	return tsuo.SetChapterID(t.ID)
}

// AddTkSectionLinkIDs adds the "tk_section_links" edge to the TkQuestionSection entity by IDs.
func (tsuo *TkSectionUpdateOne) AddTkSectionLinkIDs(ids ...int) *TkSectionUpdateOne {
	tsuo.mutation.AddTkSectionLinkIDs(ids...)
	return tsuo
}

// AddTkSectionLinks adds the "tk_section_links" edges to the TkQuestionSection entity.
func (tsuo *TkSectionUpdateOne) AddTkSectionLinks(t ...*TkQuestionSection) *TkSectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.AddTkSectionLinkIDs(ids...)
}

// AddSectionRecordIDs adds the "section_records" edge to the TkUserQuestionRecord entity by IDs.
func (tsuo *TkSectionUpdateOne) AddSectionRecordIDs(ids ...int) *TkSectionUpdateOne {
	tsuo.mutation.AddSectionRecordIDs(ids...)
	return tsuo
}

// AddSectionRecords adds the "section_records" edges to the TkUserQuestionRecord entity.
func (tsuo *TkSectionUpdateOne) AddSectionRecords(t ...*TkUserQuestionRecord) *TkSectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.AddSectionRecordIDs(ids...)
}

// AddUserSectionExamIDs adds the "user_section_exam" edge to the TkUserExamScoreRecord entity by IDs.
func (tsuo *TkSectionUpdateOne) AddUserSectionExamIDs(ids ...int) *TkSectionUpdateOne {
	tsuo.mutation.AddUserSectionExamIDs(ids...)
	return tsuo
}

// AddUserSectionExam adds the "user_section_exam" edges to the TkUserExamScoreRecord entity.
func (tsuo *TkSectionUpdateOne) AddUserSectionExam(t ...*TkUserExamScoreRecord) *TkSectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.AddUserSectionExamIDs(ids...)
}

// AddMakeUserQuestionSecIDs adds the "make_user_question_sec" edge to the MakeUserQuestionRecord entity by IDs.
func (tsuo *TkSectionUpdateOne) AddMakeUserQuestionSecIDs(ids ...int) *TkSectionUpdateOne {
	tsuo.mutation.AddMakeUserQuestionSecIDs(ids...)
	return tsuo
}

// AddMakeUserQuestionSec adds the "make_user_question_sec" edges to the MakeUserQuestionRecord entity.
func (tsuo *TkSectionUpdateOne) AddMakeUserQuestionSec(m ...*MakeUserQuestionRecord) *TkSectionUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tsuo.AddMakeUserQuestionSecIDs(ids...)
}

// Mutation returns the TkSectionMutation object of the builder.
func (tsuo *TkSectionUpdateOne) Mutation() *TkSectionMutation {
	return tsuo.mutation
}

// ClearChapter clears the "chapter" edge to the TkChapter entity.
func (tsuo *TkSectionUpdateOne) ClearChapter() *TkSectionUpdateOne {
	tsuo.mutation.ClearChapter()
	return tsuo
}

// ClearTkSectionLinks clears all "tk_section_links" edges to the TkQuestionSection entity.
func (tsuo *TkSectionUpdateOne) ClearTkSectionLinks() *TkSectionUpdateOne {
	tsuo.mutation.ClearTkSectionLinks()
	return tsuo
}

// RemoveTkSectionLinkIDs removes the "tk_section_links" edge to TkQuestionSection entities by IDs.
func (tsuo *TkSectionUpdateOne) RemoveTkSectionLinkIDs(ids ...int) *TkSectionUpdateOne {
	tsuo.mutation.RemoveTkSectionLinkIDs(ids...)
	return tsuo
}

// RemoveTkSectionLinks removes "tk_section_links" edges to TkQuestionSection entities.
func (tsuo *TkSectionUpdateOne) RemoveTkSectionLinks(t ...*TkQuestionSection) *TkSectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.RemoveTkSectionLinkIDs(ids...)
}

// ClearSectionRecords clears all "section_records" edges to the TkUserQuestionRecord entity.
func (tsuo *TkSectionUpdateOne) ClearSectionRecords() *TkSectionUpdateOne {
	tsuo.mutation.ClearSectionRecords()
	return tsuo
}

// RemoveSectionRecordIDs removes the "section_records" edge to TkUserQuestionRecord entities by IDs.
func (tsuo *TkSectionUpdateOne) RemoveSectionRecordIDs(ids ...int) *TkSectionUpdateOne {
	tsuo.mutation.RemoveSectionRecordIDs(ids...)
	return tsuo
}

// RemoveSectionRecords removes "section_records" edges to TkUserQuestionRecord entities.
func (tsuo *TkSectionUpdateOne) RemoveSectionRecords(t ...*TkUserQuestionRecord) *TkSectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.RemoveSectionRecordIDs(ids...)
}

// ClearUserSectionExam clears all "user_section_exam" edges to the TkUserExamScoreRecord entity.
func (tsuo *TkSectionUpdateOne) ClearUserSectionExam() *TkSectionUpdateOne {
	tsuo.mutation.ClearUserSectionExam()
	return tsuo
}

// RemoveUserSectionExamIDs removes the "user_section_exam" edge to TkUserExamScoreRecord entities by IDs.
func (tsuo *TkSectionUpdateOne) RemoveUserSectionExamIDs(ids ...int) *TkSectionUpdateOne {
	tsuo.mutation.RemoveUserSectionExamIDs(ids...)
	return tsuo
}

// RemoveUserSectionExam removes "user_section_exam" edges to TkUserExamScoreRecord entities.
func (tsuo *TkSectionUpdateOne) RemoveUserSectionExam(t ...*TkUserExamScoreRecord) *TkSectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.RemoveUserSectionExamIDs(ids...)
}

// ClearMakeUserQuestionSec clears all "make_user_question_sec" edges to the MakeUserQuestionRecord entity.
func (tsuo *TkSectionUpdateOne) ClearMakeUserQuestionSec() *TkSectionUpdateOne {
	tsuo.mutation.ClearMakeUserQuestionSec()
	return tsuo
}

// RemoveMakeUserQuestionSecIDs removes the "make_user_question_sec" edge to MakeUserQuestionRecord entities by IDs.
func (tsuo *TkSectionUpdateOne) RemoveMakeUserQuestionSecIDs(ids ...int) *TkSectionUpdateOne {
	tsuo.mutation.RemoveMakeUserQuestionSecIDs(ids...)
	return tsuo
}

// RemoveMakeUserQuestionSec removes "make_user_question_sec" edges to MakeUserQuestionRecord entities.
func (tsuo *TkSectionUpdateOne) RemoveMakeUserQuestionSec(m ...*MakeUserQuestionRecord) *TkSectionUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tsuo.RemoveMakeUserQuestionSecIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TkSectionUpdateOne) Select(field string, fields ...string) *TkSectionUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TkSection entity.
func (tsuo *TkSectionUpdateOne) Save(ctx context.Context) (*TkSection, error) {
	var (
		err  error
		node *TkSection
	)
	tsuo.defaults()
	if len(tsuo.hooks) == 0 {
		node, err = tsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tsuo.mutation = mutation
			node, err = tsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tsuo.hooks) - 1; i >= 0; i-- {
			mut = tsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TkSectionUpdateOne) SaveX(ctx context.Context) *TkSection {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TkSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TkSectionUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsuo *TkSectionUpdateOne) defaults() {
	if _, ok := tsuo.mutation.UpdatedAt(); !ok && !tsuo.mutation.UpdatedAtCleared() {
		v := tksection.UpdateDefaultUpdatedAt()
		tsuo.mutation.SetUpdatedAt(v)
	}
}

func (tsuo *TkSectionUpdateOne) sqlSave(ctx context.Context) (_node *TkSection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tksection.Table,
			Columns: tksection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tksection.FieldID,
			},
		},
	}
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkSection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tksection.FieldID)
		for _, f := range fields {
			if !tksection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tksection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tksection.FieldUUID,
		})
	}
	if tsuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tksection.FieldCreatedAt,
		})
	}
	if value, ok := tsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tksection.FieldUpdatedAt,
		})
	}
	if tsuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tksection.FieldUpdatedAt,
		})
	}
	if value, ok := tsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tksection.FieldDeletedAt,
		})
	}
	if tsuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tksection.FieldDeletedAt,
		})
	}
	if value, ok := tsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tksection.FieldName,
		})
	}
	if value, ok := tsuo.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tksection.FieldQuestionCount,
		})
	}
	if value, ok := tsuo.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tksection.FieldQuestionCount,
		})
	}
	if tsuo.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tksection.ChapterTable,
			Columns: []string{tksection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tksection.ChapterTable,
			Columns: []string{tksection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.TkSectionLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.TkSectionLinksTable,
			Columns: []string{tksection.TkSectionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionsection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedTkSectionLinksIDs(); len(nodes) > 0 && !tsuo.mutation.TkSectionLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.TkSectionLinksTable,
			Columns: []string{tksection.TkSectionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionsection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.TkSectionLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.TkSectionLinksTable,
			Columns: []string{tksection.TkSectionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionsection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.SectionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.SectionRecordsTable,
			Columns: []string{tksection.SectionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedSectionRecordsIDs(); len(nodes) > 0 && !tsuo.mutation.SectionRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.SectionRecordsTable,
			Columns: []string{tksection.SectionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.SectionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.SectionRecordsTable,
			Columns: []string{tksection.SectionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.UserSectionExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.UserSectionExamTable,
			Columns: []string{tksection.UserSectionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedUserSectionExamIDs(); len(nodes) > 0 && !tsuo.mutation.UserSectionExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.UserSectionExamTable,
			Columns: []string{tksection.UserSectionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.UserSectionExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.UserSectionExamTable,
			Columns: []string{tksection.UserSectionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.MakeUserQuestionSecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.MakeUserQuestionSecTable,
			Columns: []string{tksection.MakeUserQuestionSecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedMakeUserQuestionSecIDs(); len(nodes) > 0 && !tsuo.mutation.MakeUserQuestionSecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.MakeUserQuestionSecTable,
			Columns: []string{tksection.MakeUserQuestionSecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.MakeUserQuestionSecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.MakeUserQuestionSecTable,
			Columns: []string{tksection.MakeUserQuestionSecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkSection{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tksection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

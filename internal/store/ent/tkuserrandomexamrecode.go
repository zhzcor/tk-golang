// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkuserrandomexamrecode"

	"entgo.io/ent/dialect/sql"
)

// TkUserRandomExamRecode is the model entity for the TkUserRandomExamRecode schema.
type TkUserRandomExamRecode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int `json:"user_id"`
	// ExamID holds the value of the "exam_id" field.
	// 试卷id
	ExamID int `json:"exam_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkUserRandomExamRecodeQuery when eager-loading is set.
	Edges TkUserRandomExamRecodeEdges `json:"edges"`
}

// TkUserRandomExamRecodeEdges holds the relations/edges for other nodes in the graph.
type TkUserRandomExamRecodeEdges struct {
	// RandomExamQuestion holds the value of the random_exam_question edge.
	RandomExamQuestion []*TkQuestion `json:"random_exam_question,omitempty"`
	// ExamInfo holds the value of the exam_info edge.
	ExamInfo *TkExamPaper `json:"exam_info,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RandomExamQuestionOrErr returns the RandomExamQuestion value or an error if the edge
// was not loaded in eager-loading.
func (e TkUserRandomExamRecodeEdges) RandomExamQuestionOrErr() ([]*TkQuestion, error) {
	if e.loadedTypes[0] {
		return e.RandomExamQuestion, nil
	}
	return nil, &NotLoadedError{edge: "random_exam_question"}
}

// ExamInfoOrErr returns the ExamInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserRandomExamRecodeEdges) ExamInfoOrErr() (*TkExamPaper, error) {
	if e.loadedTypes[1] {
		if e.ExamInfo == nil {
			// The edge exam_info was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkexampaper.Label}
		}
		return e.ExamInfo, nil
	}
	return nil, &NotLoadedError{edge: "exam_info"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkUserRandomExamRecode) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkuserrandomexamrecode.FieldID, tkuserrandomexamrecode.FieldUserID, tkuserrandomexamrecode.FieldExamID:
			values[i] = new(sql.NullInt64)
		case tkuserrandomexamrecode.FieldUUID:
			values[i] = new(sql.NullString)
		case tkuserrandomexamrecode.FieldCreatedAt, tkuserrandomexamrecode.FieldUpdatedAt, tkuserrandomexamrecode.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkUserRandomExamRecode", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkUserRandomExamRecode fields.
func (turer *TkUserRandomExamRecode) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkuserrandomexamrecode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			turer.ID = int(value.Int64)
		case tkuserrandomexamrecode.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				turer.UUID = value.String
			}
		case tkuserrandomexamrecode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				turer.CreatedAt = new(time.Time)
				*turer.CreatedAt = value.Time
			}
		case tkuserrandomexamrecode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				turer.UpdatedAt = new(time.Time)
				*turer.UpdatedAt = value.Time
			}
		case tkuserrandomexamrecode.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				turer.DeletedAt = new(time.Time)
				*turer.DeletedAt = value.Time
			}
		case tkuserrandomexamrecode.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				turer.UserID = int(value.Int64)
			}
		case tkuserrandomexamrecode.FieldExamID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_id", values[i])
			} else if value.Valid {
				turer.ExamID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRandomExamQuestion queries the "random_exam_question" edge of the TkUserRandomExamRecode entity.
func (turer *TkUserRandomExamRecode) QueryRandomExamQuestion() *TkQuestionQuery {
	return (&TkUserRandomExamRecodeClient{config: turer.config}).QueryRandomExamQuestion(turer)
}

// QueryExamInfo queries the "exam_info" edge of the TkUserRandomExamRecode entity.
func (turer *TkUserRandomExamRecode) QueryExamInfo() *TkExamPaperQuery {
	return (&TkUserRandomExamRecodeClient{config: turer.config}).QueryExamInfo(turer)
}

// Update returns a builder for updating this TkUserRandomExamRecode.
// Note that you need to call TkUserRandomExamRecode.Unwrap() before calling this method if this TkUserRandomExamRecode
// was returned from a transaction, and the transaction was committed or rolled back.
func (turer *TkUserRandomExamRecode) Update() *TkUserRandomExamRecodeUpdateOne {
	return (&TkUserRandomExamRecodeClient{config: turer.config}).UpdateOne(turer)
}

// Unwrap unwraps the TkUserRandomExamRecode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (turer *TkUserRandomExamRecode) Unwrap() *TkUserRandomExamRecode {
	tx, ok := turer.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkUserRandomExamRecode is not a transactional entity")
	}
	turer.config.driver = tx.drv
	return turer
}

// String implements the fmt.Stringer.
func (turer *TkUserRandomExamRecode) String() string {
	var builder strings.Builder
	builder.WriteString("TkUserRandomExamRecode(")
	builder.WriteString(fmt.Sprintf("id=%v", turer.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(turer.UUID)
	if v := turer.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := turer.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := turer.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", turer.UserID))
	builder.WriteString(", exam_id=")
	builder.WriteString(fmt.Sprintf("%v", turer.ExamID))
	builder.WriteByte(')')
	return builder.String()
}

// TkUserRandomExamRecodes is a parsable slice of TkUserRandomExamRecode.
type TkUserRandomExamRecodes []*TkUserRandomExamRecode

func (turer TkUserRandomExamRecodes) config(cfg config) {
	for _i := range turer {
		turer[_i].config = cfg
	}
}

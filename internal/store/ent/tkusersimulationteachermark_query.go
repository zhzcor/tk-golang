// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkuserexamscorerecord"
	"tkserver/internal/store/ent/tkusersimulationteachermark"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserSimulationTeacherMarkQuery is the builder for querying TkUserSimulationTeacherMark entities.
type TkUserSimulationTeacherMarkQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TkUserSimulationTeacherMark
	// eager-loading edges.
	withQuestion       *TkQuestionQuery
	withUserExamRecord *TkUserExamScoreRecordQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TkUserSimulationTeacherMarkQuery builder.
func (tustmq *TkUserSimulationTeacherMarkQuery) Where(ps ...predicate.TkUserSimulationTeacherMark) *TkUserSimulationTeacherMarkQuery {
	tustmq.predicates = append(tustmq.predicates, ps...)
	return tustmq
}

// Limit adds a limit step to the query.
func (tustmq *TkUserSimulationTeacherMarkQuery) Limit(limit int) *TkUserSimulationTeacherMarkQuery {
	tustmq.limit = &limit
	return tustmq
}

// Offset adds an offset step to the query.
func (tustmq *TkUserSimulationTeacherMarkQuery) Offset(offset int) *TkUserSimulationTeacherMarkQuery {
	tustmq.offset = &offset
	return tustmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tustmq *TkUserSimulationTeacherMarkQuery) Unique(unique bool) *TkUserSimulationTeacherMarkQuery {
	tustmq.unique = &unique
	return tustmq
}

// Order adds an order step to the query.
func (tustmq *TkUserSimulationTeacherMarkQuery) Order(o ...OrderFunc) *TkUserSimulationTeacherMarkQuery {
	tustmq.order = append(tustmq.order, o...)
	return tustmq
}

// QueryQuestion chains the current query on the "question" edge.
func (tustmq *TkUserSimulationTeacherMarkQuery) QueryQuestion() *TkQuestionQuery {
	query := &TkQuestionQuery{config: tustmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tustmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tustmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkusersimulationteachermark.Table, tkusersimulationteachermark.FieldID, selector),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkusersimulationteachermark.QuestionTable, tkusersimulationteachermark.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tustmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserExamRecord chains the current query on the "user_exam_record" edge.
func (tustmq *TkUserSimulationTeacherMarkQuery) QueryUserExamRecord() *TkUserExamScoreRecordQuery {
	query := &TkUserExamScoreRecordQuery{config: tustmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tustmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tustmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkusersimulationteachermark.Table, tkusersimulationteachermark.FieldID, selector),
			sqlgraph.To(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkusersimulationteachermark.UserExamRecordTable, tkusersimulationteachermark.UserExamRecordColumn),
		)
		fromU = sqlgraph.SetNeighbors(tustmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TkUserSimulationTeacherMark entity from the query.
// Returns a *NotFoundError when no TkUserSimulationTeacherMark was found.
func (tustmq *TkUserSimulationTeacherMarkQuery) First(ctx context.Context) (*TkUserSimulationTeacherMark, error) {
	nodes, err := tustmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tkusersimulationteachermark.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tustmq *TkUserSimulationTeacherMarkQuery) FirstX(ctx context.Context) *TkUserSimulationTeacherMark {
	node, err := tustmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TkUserSimulationTeacherMark ID from the query.
// Returns a *NotFoundError when no TkUserSimulationTeacherMark ID was found.
func (tustmq *TkUserSimulationTeacherMarkQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tustmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tkusersimulationteachermark.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tustmq *TkUserSimulationTeacherMarkQuery) FirstIDX(ctx context.Context) int {
	id, err := tustmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TkUserSimulationTeacherMark entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TkUserSimulationTeacherMark entity is not found.
// Returns a *NotFoundError when no TkUserSimulationTeacherMark entities are found.
func (tustmq *TkUserSimulationTeacherMarkQuery) Only(ctx context.Context) (*TkUserSimulationTeacherMark, error) {
	nodes, err := tustmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tkusersimulationteachermark.Label}
	default:
		return nil, &NotSingularError{tkusersimulationteachermark.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tustmq *TkUserSimulationTeacherMarkQuery) OnlyX(ctx context.Context) *TkUserSimulationTeacherMark {
	node, err := tustmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TkUserSimulationTeacherMark ID in the query.
// Returns a *NotSingularError when exactly one TkUserSimulationTeacherMark ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tustmq *TkUserSimulationTeacherMarkQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tustmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tkusersimulationteachermark.Label}
	default:
		err = &NotSingularError{tkusersimulationteachermark.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tustmq *TkUserSimulationTeacherMarkQuery) OnlyIDX(ctx context.Context) int {
	id, err := tustmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TkUserSimulationTeacherMarks.
func (tustmq *TkUserSimulationTeacherMarkQuery) All(ctx context.Context) ([]*TkUserSimulationTeacherMark, error) {
	if err := tustmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tustmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tustmq *TkUserSimulationTeacherMarkQuery) AllX(ctx context.Context) []*TkUserSimulationTeacherMark {
	nodes, err := tustmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TkUserSimulationTeacherMark IDs.
func (tustmq *TkUserSimulationTeacherMarkQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tustmq.Select(tkusersimulationteachermark.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tustmq *TkUserSimulationTeacherMarkQuery) IDsX(ctx context.Context) []int {
	ids, err := tustmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tustmq *TkUserSimulationTeacherMarkQuery) Count(ctx context.Context) (int, error) {
	if err := tustmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tustmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tustmq *TkUserSimulationTeacherMarkQuery) CountX(ctx context.Context) int {
	count, err := tustmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tustmq *TkUserSimulationTeacherMarkQuery) Exist(ctx context.Context) (bool, error) {
	if err := tustmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tustmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tustmq *TkUserSimulationTeacherMarkQuery) ExistX(ctx context.Context) bool {
	exist, err := tustmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TkUserSimulationTeacherMarkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tustmq *TkUserSimulationTeacherMarkQuery) Clone() *TkUserSimulationTeacherMarkQuery {
	if tustmq == nil {
		return nil
	}
	return &TkUserSimulationTeacherMarkQuery{
		config:             tustmq.config,
		limit:              tustmq.limit,
		offset:             tustmq.offset,
		order:              append([]OrderFunc{}, tustmq.order...),
		predicates:         append([]predicate.TkUserSimulationTeacherMark{}, tustmq.predicates...),
		withQuestion:       tustmq.withQuestion.Clone(),
		withUserExamRecord: tustmq.withUserExamRecord.Clone(),
		// clone intermediate query.
		sql:  tustmq.sql.Clone(),
		path: tustmq.path,
	}
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (tustmq *TkUserSimulationTeacherMarkQuery) WithQuestion(opts ...func(*TkQuestionQuery)) *TkUserSimulationTeacherMarkQuery {
	query := &TkQuestionQuery{config: tustmq.config}
	for _, opt := range opts {
		opt(query)
	}
	tustmq.withQuestion = query
	return tustmq
}

// WithUserExamRecord tells the query-builder to eager-load the nodes that are connected to
// the "user_exam_record" edge. The optional arguments are used to configure the query builder of the edge.
func (tustmq *TkUserSimulationTeacherMarkQuery) WithUserExamRecord(opts ...func(*TkUserExamScoreRecordQuery)) *TkUserSimulationTeacherMarkQuery {
	query := &TkUserExamScoreRecordQuery{config: tustmq.config}
	for _, opt := range opts {
		opt(query)
	}
	tustmq.withUserExamRecord = query
	return tustmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TkUserSimulationTeacherMark.Query().
//		GroupBy(tkusersimulationteachermark.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tustmq *TkUserSimulationTeacherMarkQuery) GroupBy(field string, fields ...string) *TkUserSimulationTeacherMarkGroupBy {
	group := &TkUserSimulationTeacherMarkGroupBy{config: tustmq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tustmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tustmq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.TkUserSimulationTeacherMark.Query().
//		Select(tkusersimulationteachermark.FieldUUID).
//		Scan(ctx, &v)
//
func (tustmq *TkUserSimulationTeacherMarkQuery) Select(field string, fields ...string) *TkUserSimulationTeacherMarkSelect {
	tustmq.fields = append([]string{field}, fields...)
	return &TkUserSimulationTeacherMarkSelect{TkUserSimulationTeacherMarkQuery: tustmq}
}

func (tustmq *TkUserSimulationTeacherMarkQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tustmq.fields {
		if !tkusersimulationteachermark.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tustmq.path != nil {
		prev, err := tustmq.path(ctx)
		if err != nil {
			return err
		}
		tustmq.sql = prev
	}
	return nil
}

func (tustmq *TkUserSimulationTeacherMarkQuery) sqlAll(ctx context.Context) ([]*TkUserSimulationTeacherMark, error) {
	var (
		nodes       = []*TkUserSimulationTeacherMark{}
		_spec       = tustmq.querySpec()
		loadedTypes = [2]bool{
			tustmq.withQuestion != nil,
			tustmq.withUserExamRecord != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TkUserSimulationTeacherMark{config: tustmq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tustmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tustmq.withQuestion; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkUserSimulationTeacherMark)
		for i := range nodes {
			fk := nodes[i].QuestionID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tkquestion.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Question = n
			}
		}
	}

	if query := tustmq.withUserExamRecord; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkUserSimulationTeacherMark)
		for i := range nodes {
			fk := nodes[i].UserExamRecordID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tkuserexamscorerecord.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_exam_record_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UserExamRecord = n
			}
		}
	}

	return nodes, nil
}

func (tustmq *TkUserSimulationTeacherMarkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tustmq.querySpec()
	return sqlgraph.CountNodes(ctx, tustmq.driver, _spec)
}

func (tustmq *TkUserSimulationTeacherMarkQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tustmq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tustmq *TkUserSimulationTeacherMarkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkusersimulationteachermark.Table,
			Columns: tkusersimulationteachermark.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkusersimulationteachermark.FieldID,
			},
		},
		From:   tustmq.sql,
		Unique: true,
	}
	if unique := tustmq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tustmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkusersimulationteachermark.FieldID)
		for i := range fields {
			if fields[i] != tkusersimulationteachermark.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tustmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tustmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tustmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tustmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tustmq *TkUserSimulationTeacherMarkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tustmq.driver.Dialect())
	t1 := builder.Table(tkusersimulationteachermark.Table)
	selector := builder.Select(t1.Columns(tkusersimulationteachermark.Columns...)...).From(t1)
	if tustmq.sql != nil {
		selector = tustmq.sql
		selector.Select(selector.Columns(tkusersimulationteachermark.Columns...)...)
	}
	for _, p := range tustmq.predicates {
		p(selector)
	}
	for _, p := range tustmq.order {
		p(selector)
	}
	if offset := tustmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tustmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TkUserSimulationTeacherMarkGroupBy is the group-by builder for TkUserSimulationTeacherMark entities.
type TkUserSimulationTeacherMarkGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Aggregate(fns ...AggregateFunc) *TkUserSimulationTeacherMarkGroupBy {
	tustmgb.fns = append(tustmgb.fns, fns...)
	return tustmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tustmgb.path(ctx)
	if err != nil {
		return err
	}
	tustmgb.sql = query
	return tustmgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tustmgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tustmgb.fields) > 1 {
		return nil, errors.New("ent: TkUserSimulationTeacherMarkGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tustmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) StringsX(ctx context.Context) []string {
	v, err := tustmgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tustmgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkusersimulationteachermark.Label}
	default:
		err = fmt.Errorf("ent: TkUserSimulationTeacherMarkGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) StringX(ctx context.Context) string {
	v, err := tustmgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tustmgb.fields) > 1 {
		return nil, errors.New("ent: TkUserSimulationTeacherMarkGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tustmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) IntsX(ctx context.Context) []int {
	v, err := tustmgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tustmgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkusersimulationteachermark.Label}
	default:
		err = fmt.Errorf("ent: TkUserSimulationTeacherMarkGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) IntX(ctx context.Context) int {
	v, err := tustmgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tustmgb.fields) > 1 {
		return nil, errors.New("ent: TkUserSimulationTeacherMarkGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tustmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tustmgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tustmgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkusersimulationteachermark.Label}
	default:
		err = fmt.Errorf("ent: TkUserSimulationTeacherMarkGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tustmgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tustmgb.fields) > 1 {
		return nil, errors.New("ent: TkUserSimulationTeacherMarkGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tustmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tustmgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tustmgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkusersimulationteachermark.Label}
	default:
		err = fmt.Errorf("ent: TkUserSimulationTeacherMarkGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tustmgb *TkUserSimulationTeacherMarkGroupBy) BoolX(ctx context.Context) bool {
	v, err := tustmgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tustmgb *TkUserSimulationTeacherMarkGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tustmgb.fields {
		if !tkusersimulationteachermark.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tustmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tustmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tustmgb *TkUserSimulationTeacherMarkGroupBy) sqlQuery() *sql.Selector {
	selector := tustmgb.sql
	columns := make([]string, 0, len(tustmgb.fields)+len(tustmgb.fns))
	columns = append(columns, tustmgb.fields...)
	for _, fn := range tustmgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(tustmgb.fields...)
}

// TkUserSimulationTeacherMarkSelect is the builder for selecting fields of TkUserSimulationTeacherMark entities.
type TkUserSimulationTeacherMarkSelect struct {
	*TkUserSimulationTeacherMarkQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tustms *TkUserSimulationTeacherMarkSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tustms.prepareQuery(ctx); err != nil {
		return err
	}
	tustms.sql = tustms.TkUserSimulationTeacherMarkQuery.sqlQuery(ctx)
	return tustms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tustms *TkUserSimulationTeacherMarkSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tustms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tustms *TkUserSimulationTeacherMarkSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tustms.fields) > 1 {
		return nil, errors.New("ent: TkUserSimulationTeacherMarkSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tustms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tustms *TkUserSimulationTeacherMarkSelect) StringsX(ctx context.Context) []string {
	v, err := tustms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tustms *TkUserSimulationTeacherMarkSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tustms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkusersimulationteachermark.Label}
	default:
		err = fmt.Errorf("ent: TkUserSimulationTeacherMarkSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tustms *TkUserSimulationTeacherMarkSelect) StringX(ctx context.Context) string {
	v, err := tustms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tustms *TkUserSimulationTeacherMarkSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tustms.fields) > 1 {
		return nil, errors.New("ent: TkUserSimulationTeacherMarkSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tustms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tustms *TkUserSimulationTeacherMarkSelect) IntsX(ctx context.Context) []int {
	v, err := tustms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tustms *TkUserSimulationTeacherMarkSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tustms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkusersimulationteachermark.Label}
	default:
		err = fmt.Errorf("ent: TkUserSimulationTeacherMarkSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tustms *TkUserSimulationTeacherMarkSelect) IntX(ctx context.Context) int {
	v, err := tustms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tustms *TkUserSimulationTeacherMarkSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tustms.fields) > 1 {
		return nil, errors.New("ent: TkUserSimulationTeacherMarkSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tustms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tustms *TkUserSimulationTeacherMarkSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tustms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tustms *TkUserSimulationTeacherMarkSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tustms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkusersimulationteachermark.Label}
	default:
		err = fmt.Errorf("ent: TkUserSimulationTeacherMarkSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tustms *TkUserSimulationTeacherMarkSelect) Float64X(ctx context.Context) float64 {
	v, err := tustms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tustms *TkUserSimulationTeacherMarkSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tustms.fields) > 1 {
		return nil, errors.New("ent: TkUserSimulationTeacherMarkSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tustms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tustms *TkUserSimulationTeacherMarkSelect) BoolsX(ctx context.Context) []bool {
	v, err := tustms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tustms *TkUserSimulationTeacherMarkSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tustms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkusersimulationteachermark.Label}
	default:
		err = fmt.Errorf("ent: TkUserSimulationTeacherMarkSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tustms *TkUserSimulationTeacherMarkSelect) BoolX(ctx context.Context) bool {
	v, err := tustms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tustms *TkUserSimulationTeacherMarkSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tustms.sqlQuery().Query()
	if err := tustms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tustms *TkUserSimulationTeacherMarkSelect) sqlQuery() sql.Querier {
	selector := tustms.sql
	selector.Select(selector.Columns(tustms.fields...)...)
	return selector
}

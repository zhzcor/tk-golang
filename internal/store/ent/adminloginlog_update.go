// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/adminloginlog"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminLoginLogUpdate is the builder for updating AdminLoginLog entities.
type AdminLoginLogUpdate struct {
	config
	hooks    []Hook
	mutation *AdminLoginLogMutation
}

// Where adds a new predicate for the AdminLoginLogUpdate builder.
func (allu *AdminLoginLogUpdate) Where(ps ...predicate.AdminLoginLog) *AdminLoginLogUpdate {
	allu.mutation.predicates = append(allu.mutation.predicates, ps...)
	return allu
}

// SetUUID sets the "uuid" field.
func (allu *AdminLoginLogUpdate) SetUUID(s string) *AdminLoginLogUpdate {
	allu.mutation.SetUUID(s)
	return allu
}

// SetUpdatedAt sets the "updated_at" field.
func (allu *AdminLoginLogUpdate) SetUpdatedAt(t time.Time) *AdminLoginLogUpdate {
	allu.mutation.SetUpdatedAt(t)
	return allu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (allu *AdminLoginLogUpdate) ClearUpdatedAt() *AdminLoginLogUpdate {
	allu.mutation.ClearUpdatedAt()
	return allu
}

// SetDeletedAt sets the "deleted_at" field.
func (allu *AdminLoginLogUpdate) SetDeletedAt(t time.Time) *AdminLoginLogUpdate {
	allu.mutation.SetDeletedAt(t)
	return allu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (allu *AdminLoginLogUpdate) SetNillableDeletedAt(t *time.Time) *AdminLoginLogUpdate {
	if t != nil {
		allu.SetDeletedAt(*t)
	}
	return allu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (allu *AdminLoginLogUpdate) ClearDeletedAt() *AdminLoginLogUpdate {
	allu.mutation.ClearDeletedAt()
	return allu
}

// SetIP sets the "ip" field.
func (allu *AdminLoginLogUpdate) SetIP(s string) *AdminLoginLogUpdate {
	allu.mutation.SetIP(s)
	return allu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (allu *AdminLoginLogUpdate) SetNillableIP(s *string) *AdminLoginLogUpdate {
	if s != nil {
		allu.SetIP(*s)
	}
	return allu
}

// SetCity sets the "city" field.
func (allu *AdminLoginLogUpdate) SetCity(s string) *AdminLoginLogUpdate {
	allu.mutation.SetCity(s)
	return allu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (allu *AdminLoginLogUpdate) SetNillableCity(s *string) *AdminLoginLogUpdate {
	if s != nil {
		allu.SetCity(*s)
	}
	return allu
}

// SetBrowser sets the "browser" field.
func (allu *AdminLoginLogUpdate) SetBrowser(s string) *AdminLoginLogUpdate {
	allu.mutation.SetBrowser(s)
	return allu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (allu *AdminLoginLogUpdate) SetNillableBrowser(s *string) *AdminLoginLogUpdate {
	if s != nil {
		allu.SetBrowser(*s)
	}
	return allu
}

// SetAdminID sets the "admin_id" field.
func (allu *AdminLoginLogUpdate) SetAdminID(i int) *AdminLoginLogUpdate {
	allu.mutation.ResetAdminID()
	allu.mutation.SetAdminID(i)
	return allu
}

// SetNillableAdminID sets the "admin_id" field if the given value is not nil.
func (allu *AdminLoginLogUpdate) SetNillableAdminID(i *int) *AdminLoginLogUpdate {
	if i != nil {
		allu.SetAdminID(*i)
	}
	return allu
}

// ClearAdminID clears the value of the "admin_id" field.
func (allu *AdminLoginLogUpdate) ClearAdminID() *AdminLoginLogUpdate {
	allu.mutation.ClearAdminID()
	return allu
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (allu *AdminLoginLogUpdate) SetAdmin(a *Admin) *AdminLoginLogUpdate {
	return allu.SetAdminID(a.ID)
}

// Mutation returns the AdminLoginLogMutation object of the builder.
func (allu *AdminLoginLogUpdate) Mutation() *AdminLoginLogMutation {
	return allu.mutation
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (allu *AdminLoginLogUpdate) ClearAdmin() *AdminLoginLogUpdate {
	allu.mutation.ClearAdmin()
	return allu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (allu *AdminLoginLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	allu.defaults()
	if len(allu.hooks) == 0 {
		affected, err = allu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			allu.mutation = mutation
			affected, err = allu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(allu.hooks) - 1; i >= 0; i-- {
			mut = allu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, allu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (allu *AdminLoginLogUpdate) SaveX(ctx context.Context) int {
	affected, err := allu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (allu *AdminLoginLogUpdate) Exec(ctx context.Context) error {
	_, err := allu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (allu *AdminLoginLogUpdate) ExecX(ctx context.Context) {
	if err := allu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (allu *AdminLoginLogUpdate) defaults() {
	if _, ok := allu.mutation.UpdatedAt(); !ok && !allu.mutation.UpdatedAtCleared() {
		v := adminloginlog.UpdateDefaultUpdatedAt()
		allu.mutation.SetUpdatedAt(v)
	}
}

func (allu *AdminLoginLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminloginlog.Table,
			Columns: adminloginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminloginlog.FieldID,
			},
		},
	}
	if ps := allu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := allu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldUUID,
		})
	}
	if allu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminloginlog.FieldCreatedAt,
		})
	}
	if value, ok := allu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminloginlog.FieldUpdatedAt,
		})
	}
	if allu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminloginlog.FieldUpdatedAt,
		})
	}
	if value, ok := allu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminloginlog.FieldDeletedAt,
		})
	}
	if allu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminloginlog.FieldDeletedAt,
		})
	}
	if value, ok := allu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldIP,
		})
	}
	if value, ok := allu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldCity,
		})
	}
	if value, ok := allu.mutation.Browser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldBrowser,
		})
	}
	if allu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminloginlog.AdminTable,
			Columns: []string{adminloginlog.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := allu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminloginlog.AdminTable,
			Columns: []string{adminloginlog.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, allu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminloginlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AdminLoginLogUpdateOne is the builder for updating a single AdminLoginLog entity.
type AdminLoginLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminLoginLogMutation
}

// SetUUID sets the "uuid" field.
func (alluo *AdminLoginLogUpdateOne) SetUUID(s string) *AdminLoginLogUpdateOne {
	alluo.mutation.SetUUID(s)
	return alluo
}

// SetUpdatedAt sets the "updated_at" field.
func (alluo *AdminLoginLogUpdateOne) SetUpdatedAt(t time.Time) *AdminLoginLogUpdateOne {
	alluo.mutation.SetUpdatedAt(t)
	return alluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (alluo *AdminLoginLogUpdateOne) ClearUpdatedAt() *AdminLoginLogUpdateOne {
	alluo.mutation.ClearUpdatedAt()
	return alluo
}

// SetDeletedAt sets the "deleted_at" field.
func (alluo *AdminLoginLogUpdateOne) SetDeletedAt(t time.Time) *AdminLoginLogUpdateOne {
	alluo.mutation.SetDeletedAt(t)
	return alluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (alluo *AdminLoginLogUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminLoginLogUpdateOne {
	if t != nil {
		alluo.SetDeletedAt(*t)
	}
	return alluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (alluo *AdminLoginLogUpdateOne) ClearDeletedAt() *AdminLoginLogUpdateOne {
	alluo.mutation.ClearDeletedAt()
	return alluo
}

// SetIP sets the "ip" field.
func (alluo *AdminLoginLogUpdateOne) SetIP(s string) *AdminLoginLogUpdateOne {
	alluo.mutation.SetIP(s)
	return alluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (alluo *AdminLoginLogUpdateOne) SetNillableIP(s *string) *AdminLoginLogUpdateOne {
	if s != nil {
		alluo.SetIP(*s)
	}
	return alluo
}

// SetCity sets the "city" field.
func (alluo *AdminLoginLogUpdateOne) SetCity(s string) *AdminLoginLogUpdateOne {
	alluo.mutation.SetCity(s)
	return alluo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (alluo *AdminLoginLogUpdateOne) SetNillableCity(s *string) *AdminLoginLogUpdateOne {
	if s != nil {
		alluo.SetCity(*s)
	}
	return alluo
}

// SetBrowser sets the "browser" field.
func (alluo *AdminLoginLogUpdateOne) SetBrowser(s string) *AdminLoginLogUpdateOne {
	alluo.mutation.SetBrowser(s)
	return alluo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (alluo *AdminLoginLogUpdateOne) SetNillableBrowser(s *string) *AdminLoginLogUpdateOne {
	if s != nil {
		alluo.SetBrowser(*s)
	}
	return alluo
}

// SetAdminID sets the "admin_id" field.
func (alluo *AdminLoginLogUpdateOne) SetAdminID(i int) *AdminLoginLogUpdateOne {
	alluo.mutation.ResetAdminID()
	alluo.mutation.SetAdminID(i)
	return alluo
}

// SetNillableAdminID sets the "admin_id" field if the given value is not nil.
func (alluo *AdminLoginLogUpdateOne) SetNillableAdminID(i *int) *AdminLoginLogUpdateOne {
	if i != nil {
		alluo.SetAdminID(*i)
	}
	return alluo
}

// ClearAdminID clears the value of the "admin_id" field.
func (alluo *AdminLoginLogUpdateOne) ClearAdminID() *AdminLoginLogUpdateOne {
	alluo.mutation.ClearAdminID()
	return alluo
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (alluo *AdminLoginLogUpdateOne) SetAdmin(a *Admin) *AdminLoginLogUpdateOne {
	return alluo.SetAdminID(a.ID)
}

// Mutation returns the AdminLoginLogMutation object of the builder.
func (alluo *AdminLoginLogUpdateOne) Mutation() *AdminLoginLogMutation {
	return alluo.mutation
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (alluo *AdminLoginLogUpdateOne) ClearAdmin() *AdminLoginLogUpdateOne {
	alluo.mutation.ClearAdmin()
	return alluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (alluo *AdminLoginLogUpdateOne) Select(field string, fields ...string) *AdminLoginLogUpdateOne {
	alluo.fields = append([]string{field}, fields...)
	return alluo
}

// Save executes the query and returns the updated AdminLoginLog entity.
func (alluo *AdminLoginLogUpdateOne) Save(ctx context.Context) (*AdminLoginLog, error) {
	var (
		err  error
		node *AdminLoginLog
	)
	alluo.defaults()
	if len(alluo.hooks) == 0 {
		node, err = alluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			alluo.mutation = mutation
			node, err = alluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(alluo.hooks) - 1; i >= 0; i-- {
			mut = alluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, alluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (alluo *AdminLoginLogUpdateOne) SaveX(ctx context.Context) *AdminLoginLog {
	node, err := alluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (alluo *AdminLoginLogUpdateOne) Exec(ctx context.Context) error {
	_, err := alluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alluo *AdminLoginLogUpdateOne) ExecX(ctx context.Context) {
	if err := alluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alluo *AdminLoginLogUpdateOne) defaults() {
	if _, ok := alluo.mutation.UpdatedAt(); !ok && !alluo.mutation.UpdatedAtCleared() {
		v := adminloginlog.UpdateDefaultUpdatedAt()
		alluo.mutation.SetUpdatedAt(v)
	}
}

func (alluo *AdminLoginLogUpdateOne) sqlSave(ctx context.Context) (_node *AdminLoginLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminloginlog.Table,
			Columns: adminloginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminloginlog.FieldID,
			},
		},
	}
	id, ok := alluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AdminLoginLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := alluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminloginlog.FieldID)
		for _, f := range fields {
			if !adminloginlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminloginlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := alluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alluo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldUUID,
		})
	}
	if alluo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminloginlog.FieldCreatedAt,
		})
	}
	if value, ok := alluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminloginlog.FieldUpdatedAt,
		})
	}
	if alluo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminloginlog.FieldUpdatedAt,
		})
	}
	if value, ok := alluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminloginlog.FieldDeletedAt,
		})
	}
	if alluo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminloginlog.FieldDeletedAt,
		})
	}
	if value, ok := alluo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldIP,
		})
	}
	if value, ok := alluo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldCity,
		})
	}
	if value, ok := alluo.mutation.Browser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldBrowser,
		})
	}
	if alluo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminloginlog.AdminTable,
			Columns: []string{adminloginlog.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alluo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminloginlog.AdminTable,
			Columns: []string{adminloginlog.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminLoginLog{config: alluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, alluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminloginlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

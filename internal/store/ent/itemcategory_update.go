// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/itemcategory"
	"gserver/internal/store/ent/kcclass"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkquestionbank"
	"gserver/internal/store/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemCategoryUpdate is the builder for updating ItemCategory entities.
type ItemCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ItemCategoryMutation
}

// Where adds a new predicate for the ItemCategoryUpdate builder.
func (icu *ItemCategoryUpdate) Where(ps ...predicate.ItemCategory) *ItemCategoryUpdate {
	icu.mutation.predicates = append(icu.mutation.predicates, ps...)
	return icu
}

// SetUUID sets the "uuid" field.
func (icu *ItemCategoryUpdate) SetUUID(s string) *ItemCategoryUpdate {
	icu.mutation.SetUUID(s)
	return icu
}

// SetUpdatedAt sets the "updated_at" field.
func (icu *ItemCategoryUpdate) SetUpdatedAt(t time.Time) *ItemCategoryUpdate {
	icu.mutation.SetUpdatedAt(t)
	return icu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (icu *ItemCategoryUpdate) ClearUpdatedAt() *ItemCategoryUpdate {
	icu.mutation.ClearUpdatedAt()
	return icu
}

// SetDeletedAt sets the "deleted_at" field.
func (icu *ItemCategoryUpdate) SetDeletedAt(t time.Time) *ItemCategoryUpdate {
	icu.mutation.SetDeletedAt(t)
	return icu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icu *ItemCategoryUpdate) SetNillableDeletedAt(t *time.Time) *ItemCategoryUpdate {
	if t != nil {
		icu.SetDeletedAt(*t)
	}
	return icu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (icu *ItemCategoryUpdate) ClearDeletedAt() *ItemCategoryUpdate {
	icu.mutation.ClearDeletedAt()
	return icu
}

// SetName sets the "name" field.
func (icu *ItemCategoryUpdate) SetName(s string) *ItemCategoryUpdate {
	icu.mutation.SetName(s)
	return icu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (icu *ItemCategoryUpdate) SetNillableName(s *string) *ItemCategoryUpdate {
	if s != nil {
		icu.SetName(*s)
	}
	return icu
}

// SetStatus sets the "status" field.
func (icu *ItemCategoryUpdate) SetStatus(u uint8) *ItemCategoryUpdate {
	icu.mutation.ResetStatus()
	icu.mutation.SetStatus(u)
	return icu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (icu *ItemCategoryUpdate) SetNillableStatus(u *uint8) *ItemCategoryUpdate {
	if u != nil {
		icu.SetStatus(*u)
	}
	return icu
}

// AddStatus adds u to the "status" field.
func (icu *ItemCategoryUpdate) AddStatus(u uint8) *ItemCategoryUpdate {
	icu.mutation.AddStatus(u)
	return icu
}

// SetCode sets the "code" field.
func (icu *ItemCategoryUpdate) SetCode(s string) *ItemCategoryUpdate {
	icu.mutation.SetCode(s)
	return icu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (icu *ItemCategoryUpdate) SetNillableCode(s *string) *ItemCategoryUpdate {
	if s != nil {
		icu.SetCode(*s)
	}
	return icu
}

// SetDesc sets the "desc" field.
func (icu *ItemCategoryUpdate) SetDesc(s string) *ItemCategoryUpdate {
	icu.mutation.SetDesc(s)
	return icu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (icu *ItemCategoryUpdate) SetNillableDesc(s *string) *ItemCategoryUpdate {
	if s != nil {
		icu.SetDesc(*s)
	}
	return icu
}

// SetPid sets the "pid" field.
func (icu *ItemCategoryUpdate) SetPid(i int) *ItemCategoryUpdate {
	icu.mutation.ResetPid()
	icu.mutation.SetPid(i)
	return icu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (icu *ItemCategoryUpdate) SetNillablePid(i *int) *ItemCategoryUpdate {
	if i != nil {
		icu.SetPid(*i)
	}
	return icu
}

// ClearPid clears the value of the "pid" field.
func (icu *ItemCategoryUpdate) ClearPid() *ItemCategoryUpdate {
	icu.mutation.ClearPid()
	return icu
}

// SetSortOrder sets the "sort_order" field.
func (icu *ItemCategoryUpdate) SetSortOrder(i int) *ItemCategoryUpdate {
	icu.mutation.ResetSortOrder()
	icu.mutation.SetSortOrder(i)
	return icu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (icu *ItemCategoryUpdate) SetNillableSortOrder(i *int) *ItemCategoryUpdate {
	if i != nil {
		icu.SetSortOrder(*i)
	}
	return icu
}

// AddSortOrder adds i to the "sort_order" field.
func (icu *ItemCategoryUpdate) AddSortOrder(i int) *ItemCategoryUpdate {
	icu.mutation.AddSortOrder(i)
	return icu
}

// AddItemQuestionBankIDs adds the "item_question_banks" edge to the TkQuestionBank entity by IDs.
func (icu *ItemCategoryUpdate) AddItemQuestionBankIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.AddItemQuestionBankIDs(ids...)
	return icu
}

// AddItemQuestionBanks adds the "item_question_banks" edges to the TkQuestionBank entity.
func (icu *ItemCategoryUpdate) AddItemQuestionBanks(t ...*TkQuestionBank) *ItemCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return icu.AddItemQuestionBankIDs(ids...)
}

// SetKcClassID sets the "kc_class" edge to the KcClass entity by ID.
func (icu *ItemCategoryUpdate) SetKcClassID(id int) *ItemCategoryUpdate {
	icu.mutation.SetKcClassID(id)
	return icu
}

// SetNillableKcClassID sets the "kc_class" edge to the KcClass entity by ID if the given value is not nil.
func (icu *ItemCategoryUpdate) SetNillableKcClassID(id *int) *ItemCategoryUpdate {
	if id != nil {
		icu = icu.SetKcClassID(*id)
	}
	return icu
}

// SetKcClass sets the "kc_class" edge to the KcClass entity.
func (icu *ItemCategoryUpdate) SetKcClass(k *KcClass) *ItemCategoryUpdate {
	return icu.SetKcClassID(k.ID)
}

// AddCourseIDs adds the "course" edge to the KcCourse entity by IDs.
func (icu *ItemCategoryUpdate) AddCourseIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.AddCourseIDs(ids...)
	return icu
}

// AddCourse adds the "course" edges to the KcCourse entity.
func (icu *ItemCategoryUpdate) AddCourse(k ...*KcCourse) *ItemCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return icu.AddCourseIDs(ids...)
}

// AddUserItemCateIDs adds the "user_item_cate" edge to the User entity by IDs.
func (icu *ItemCategoryUpdate) AddUserItemCateIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.AddUserItemCateIDs(ids...)
	return icu
}

// AddUserItemCate adds the "user_item_cate" edges to the User entity.
func (icu *ItemCategoryUpdate) AddUserItemCate(u ...*User) *ItemCategoryUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return icu.AddUserItemCateIDs(ids...)
}

// SetParentID sets the "parent" edge to the ItemCategory entity by ID.
func (icu *ItemCategoryUpdate) SetParentID(id int) *ItemCategoryUpdate {
	icu.mutation.SetParentID(id)
	return icu
}

// SetNillableParentID sets the "parent" edge to the ItemCategory entity by ID if the given value is not nil.
func (icu *ItemCategoryUpdate) SetNillableParentID(id *int) *ItemCategoryUpdate {
	if id != nil {
		icu = icu.SetParentID(*id)
	}
	return icu
}

// SetParent sets the "parent" edge to the ItemCategory entity.
func (icu *ItemCategoryUpdate) SetParent(i *ItemCategory) *ItemCategoryUpdate {
	return icu.SetParentID(i.ID)
}

// AddChildIDs adds the "children" edge to the ItemCategory entity by IDs.
func (icu *ItemCategoryUpdate) AddChildIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.AddChildIDs(ids...)
	return icu
}

// AddChildren adds the "children" edges to the ItemCategory entity.
func (icu *ItemCategoryUpdate) AddChildren(i ...*ItemCategory) *ItemCategoryUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.AddChildIDs(ids...)
}

// Mutation returns the ItemCategoryMutation object of the builder.
func (icu *ItemCategoryUpdate) Mutation() *ItemCategoryMutation {
	return icu.mutation
}

// ClearItemQuestionBanks clears all "item_question_banks" edges to the TkQuestionBank entity.
func (icu *ItemCategoryUpdate) ClearItemQuestionBanks() *ItemCategoryUpdate {
	icu.mutation.ClearItemQuestionBanks()
	return icu
}

// RemoveItemQuestionBankIDs removes the "item_question_banks" edge to TkQuestionBank entities by IDs.
func (icu *ItemCategoryUpdate) RemoveItemQuestionBankIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.RemoveItemQuestionBankIDs(ids...)
	return icu
}

// RemoveItemQuestionBanks removes "item_question_banks" edges to TkQuestionBank entities.
func (icu *ItemCategoryUpdate) RemoveItemQuestionBanks(t ...*TkQuestionBank) *ItemCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return icu.RemoveItemQuestionBankIDs(ids...)
}

// ClearKcClass clears the "kc_class" edge to the KcClass entity.
func (icu *ItemCategoryUpdate) ClearKcClass() *ItemCategoryUpdate {
	icu.mutation.ClearKcClass()
	return icu
}

// ClearCourse clears all "course" edges to the KcCourse entity.
func (icu *ItemCategoryUpdate) ClearCourse() *ItemCategoryUpdate {
	icu.mutation.ClearCourse()
	return icu
}

// RemoveCourseIDs removes the "course" edge to KcCourse entities by IDs.
func (icu *ItemCategoryUpdate) RemoveCourseIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.RemoveCourseIDs(ids...)
	return icu
}

// RemoveCourse removes "course" edges to KcCourse entities.
func (icu *ItemCategoryUpdate) RemoveCourse(k ...*KcCourse) *ItemCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return icu.RemoveCourseIDs(ids...)
}

// ClearUserItemCate clears all "user_item_cate" edges to the User entity.
func (icu *ItemCategoryUpdate) ClearUserItemCate() *ItemCategoryUpdate {
	icu.mutation.ClearUserItemCate()
	return icu
}

// RemoveUserItemCateIDs removes the "user_item_cate" edge to User entities by IDs.
func (icu *ItemCategoryUpdate) RemoveUserItemCateIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.RemoveUserItemCateIDs(ids...)
	return icu
}

// RemoveUserItemCate removes "user_item_cate" edges to User entities.
func (icu *ItemCategoryUpdate) RemoveUserItemCate(u ...*User) *ItemCategoryUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return icu.RemoveUserItemCateIDs(ids...)
}

// ClearParent clears the "parent" edge to the ItemCategory entity.
func (icu *ItemCategoryUpdate) ClearParent() *ItemCategoryUpdate {
	icu.mutation.ClearParent()
	return icu
}

// ClearChildren clears all "children" edges to the ItemCategory entity.
func (icu *ItemCategoryUpdate) ClearChildren() *ItemCategoryUpdate {
	icu.mutation.ClearChildren()
	return icu
}

// RemoveChildIDs removes the "children" edge to ItemCategory entities by IDs.
func (icu *ItemCategoryUpdate) RemoveChildIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.RemoveChildIDs(ids...)
	return icu
}

// RemoveChildren removes "children" edges to ItemCategory entities.
func (icu *ItemCategoryUpdate) RemoveChildren(i ...*ItemCategory) *ItemCategoryUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (icu *ItemCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	icu.defaults()
	if len(icu.hooks) == 0 {
		affected, err = icu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			icu.mutation = mutation
			affected, err = icu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(icu.hooks) - 1; i >= 0; i-- {
			mut = icu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (icu *ItemCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := icu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (icu *ItemCategoryUpdate) Exec(ctx context.Context) error {
	_, err := icu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icu *ItemCategoryUpdate) ExecX(ctx context.Context) {
	if err := icu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icu *ItemCategoryUpdate) defaults() {
	if _, ok := icu.mutation.UpdatedAt(); !ok && !icu.mutation.UpdatedAtCleared() {
		v := itemcategory.UpdateDefaultUpdatedAt()
		icu.mutation.SetUpdatedAt(v)
	}
}

func (icu *ItemCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemcategory.Table,
			Columns: itemcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemcategory.FieldID,
			},
		},
	}
	if ps := icu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldUUID,
		})
	}
	if icu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: itemcategory.FieldCreatedAt,
		})
	}
	if value, ok := icu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldUpdatedAt,
		})
	}
	if icu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: itemcategory.FieldUpdatedAt,
		})
	}
	if value, ok := icu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldDeletedAt,
		})
	}
	if icu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: itemcategory.FieldDeletedAt,
		})
	}
	if value, ok := icu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldName,
		})
	}
	if value, ok := icu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: itemcategory.FieldStatus,
		})
	}
	if value, ok := icu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: itemcategory.FieldStatus,
		})
	}
	if value, ok := icu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldCode,
		})
	}
	if value, ok := icu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldDesc,
		})
	}
	if value, ok := icu.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemcategory.FieldSortOrder,
		})
	}
	if value, ok := icu.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemcategory.FieldSortOrder,
		})
	}
	if icu.mutation.ItemQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemQuestionBanksTable,
			Columns: []string{itemcategory.ItemQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.RemovedItemQuestionBanksIDs(); len(nodes) > 0 && !icu.mutation.ItemQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemQuestionBanksTable,
			Columns: []string{itemcategory.ItemQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.ItemQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemQuestionBanksTable,
			Columns: []string{itemcategory.ItemQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icu.mutation.KcClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   itemcategory.KcClassTable,
			Columns: []string{itemcategory.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.KcClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   itemcategory.KcClassTable,
			Columns: []string{itemcategory.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.CourseTable,
			Columns: []string{itemcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.RemovedCourseIDs(); len(nodes) > 0 && !icu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.CourseTable,
			Columns: []string{itemcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.CourseTable,
			Columns: []string{itemcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icu.mutation.UserItemCateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.UserItemCateTable,
			Columns: []string{itemcategory.UserItemCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.RemovedUserItemCateIDs(); len(nodes) > 0 && !icu.mutation.UserItemCateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.UserItemCateTable,
			Columns: []string{itemcategory.UserItemCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.UserItemCateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.UserItemCateTable,
			Columns: []string{itemcategory.UserItemCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemcategory.ParentTable,
			Columns: []string{itemcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemcategory.ParentTable,
			Columns: []string{itemcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ChildrenTable,
			Columns: []string{itemcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !icu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ChildrenTable,
			Columns: []string{itemcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ChildrenTable,
			Columns: []string{itemcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, icu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ItemCategoryUpdateOne is the builder for updating a single ItemCategory entity.
type ItemCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemCategoryMutation
}

// SetUUID sets the "uuid" field.
func (icuo *ItemCategoryUpdateOne) SetUUID(s string) *ItemCategoryUpdateOne {
	icuo.mutation.SetUUID(s)
	return icuo
}

// SetUpdatedAt sets the "updated_at" field.
func (icuo *ItemCategoryUpdateOne) SetUpdatedAt(t time.Time) *ItemCategoryUpdateOne {
	icuo.mutation.SetUpdatedAt(t)
	return icuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (icuo *ItemCategoryUpdateOne) ClearUpdatedAt() *ItemCategoryUpdateOne {
	icuo.mutation.ClearUpdatedAt()
	return icuo
}

// SetDeletedAt sets the "deleted_at" field.
func (icuo *ItemCategoryUpdateOne) SetDeletedAt(t time.Time) *ItemCategoryUpdateOne {
	icuo.mutation.SetDeletedAt(t)
	return icuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icuo *ItemCategoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ItemCategoryUpdateOne {
	if t != nil {
		icuo.SetDeletedAt(*t)
	}
	return icuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (icuo *ItemCategoryUpdateOne) ClearDeletedAt() *ItemCategoryUpdateOne {
	icuo.mutation.ClearDeletedAt()
	return icuo
}

// SetName sets the "name" field.
func (icuo *ItemCategoryUpdateOne) SetName(s string) *ItemCategoryUpdateOne {
	icuo.mutation.SetName(s)
	return icuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (icuo *ItemCategoryUpdateOne) SetNillableName(s *string) *ItemCategoryUpdateOne {
	if s != nil {
		icuo.SetName(*s)
	}
	return icuo
}

// SetStatus sets the "status" field.
func (icuo *ItemCategoryUpdateOne) SetStatus(u uint8) *ItemCategoryUpdateOne {
	icuo.mutation.ResetStatus()
	icuo.mutation.SetStatus(u)
	return icuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (icuo *ItemCategoryUpdateOne) SetNillableStatus(u *uint8) *ItemCategoryUpdateOne {
	if u != nil {
		icuo.SetStatus(*u)
	}
	return icuo
}

// AddStatus adds u to the "status" field.
func (icuo *ItemCategoryUpdateOne) AddStatus(u uint8) *ItemCategoryUpdateOne {
	icuo.mutation.AddStatus(u)
	return icuo
}

// SetCode sets the "code" field.
func (icuo *ItemCategoryUpdateOne) SetCode(s string) *ItemCategoryUpdateOne {
	icuo.mutation.SetCode(s)
	return icuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (icuo *ItemCategoryUpdateOne) SetNillableCode(s *string) *ItemCategoryUpdateOne {
	if s != nil {
		icuo.SetCode(*s)
	}
	return icuo
}

// SetDesc sets the "desc" field.
func (icuo *ItemCategoryUpdateOne) SetDesc(s string) *ItemCategoryUpdateOne {
	icuo.mutation.SetDesc(s)
	return icuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (icuo *ItemCategoryUpdateOne) SetNillableDesc(s *string) *ItemCategoryUpdateOne {
	if s != nil {
		icuo.SetDesc(*s)
	}
	return icuo
}

// SetPid sets the "pid" field.
func (icuo *ItemCategoryUpdateOne) SetPid(i int) *ItemCategoryUpdateOne {
	icuo.mutation.ResetPid()
	icuo.mutation.SetPid(i)
	return icuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (icuo *ItemCategoryUpdateOne) SetNillablePid(i *int) *ItemCategoryUpdateOne {
	if i != nil {
		icuo.SetPid(*i)
	}
	return icuo
}

// ClearPid clears the value of the "pid" field.
func (icuo *ItemCategoryUpdateOne) ClearPid() *ItemCategoryUpdateOne {
	icuo.mutation.ClearPid()
	return icuo
}

// SetSortOrder sets the "sort_order" field.
func (icuo *ItemCategoryUpdateOne) SetSortOrder(i int) *ItemCategoryUpdateOne {
	icuo.mutation.ResetSortOrder()
	icuo.mutation.SetSortOrder(i)
	return icuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (icuo *ItemCategoryUpdateOne) SetNillableSortOrder(i *int) *ItemCategoryUpdateOne {
	if i != nil {
		icuo.SetSortOrder(*i)
	}
	return icuo
}

// AddSortOrder adds i to the "sort_order" field.
func (icuo *ItemCategoryUpdateOne) AddSortOrder(i int) *ItemCategoryUpdateOne {
	icuo.mutation.AddSortOrder(i)
	return icuo
}

// AddItemQuestionBankIDs adds the "item_question_banks" edge to the TkQuestionBank entity by IDs.
func (icuo *ItemCategoryUpdateOne) AddItemQuestionBankIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.AddItemQuestionBankIDs(ids...)
	return icuo
}

// AddItemQuestionBanks adds the "item_question_banks" edges to the TkQuestionBank entity.
func (icuo *ItemCategoryUpdateOne) AddItemQuestionBanks(t ...*TkQuestionBank) *ItemCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return icuo.AddItemQuestionBankIDs(ids...)
}

// SetKcClassID sets the "kc_class" edge to the KcClass entity by ID.
func (icuo *ItemCategoryUpdateOne) SetKcClassID(id int) *ItemCategoryUpdateOne {
	icuo.mutation.SetKcClassID(id)
	return icuo
}

// SetNillableKcClassID sets the "kc_class" edge to the KcClass entity by ID if the given value is not nil.
func (icuo *ItemCategoryUpdateOne) SetNillableKcClassID(id *int) *ItemCategoryUpdateOne {
	if id != nil {
		icuo = icuo.SetKcClassID(*id)
	}
	return icuo
}

// SetKcClass sets the "kc_class" edge to the KcClass entity.
func (icuo *ItemCategoryUpdateOne) SetKcClass(k *KcClass) *ItemCategoryUpdateOne {
	return icuo.SetKcClassID(k.ID)
}

// AddCourseIDs adds the "course" edge to the KcCourse entity by IDs.
func (icuo *ItemCategoryUpdateOne) AddCourseIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.AddCourseIDs(ids...)
	return icuo
}

// AddCourse adds the "course" edges to the KcCourse entity.
func (icuo *ItemCategoryUpdateOne) AddCourse(k ...*KcCourse) *ItemCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return icuo.AddCourseIDs(ids...)
}

// AddUserItemCateIDs adds the "user_item_cate" edge to the User entity by IDs.
func (icuo *ItemCategoryUpdateOne) AddUserItemCateIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.AddUserItemCateIDs(ids...)
	return icuo
}

// AddUserItemCate adds the "user_item_cate" edges to the User entity.
func (icuo *ItemCategoryUpdateOne) AddUserItemCate(u ...*User) *ItemCategoryUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return icuo.AddUserItemCateIDs(ids...)
}

// SetParentID sets the "parent" edge to the ItemCategory entity by ID.
func (icuo *ItemCategoryUpdateOne) SetParentID(id int) *ItemCategoryUpdateOne {
	icuo.mutation.SetParentID(id)
	return icuo
}

// SetNillableParentID sets the "parent" edge to the ItemCategory entity by ID if the given value is not nil.
func (icuo *ItemCategoryUpdateOne) SetNillableParentID(id *int) *ItemCategoryUpdateOne {
	if id != nil {
		icuo = icuo.SetParentID(*id)
	}
	return icuo
}

// SetParent sets the "parent" edge to the ItemCategory entity.
func (icuo *ItemCategoryUpdateOne) SetParent(i *ItemCategory) *ItemCategoryUpdateOne {
	return icuo.SetParentID(i.ID)
}

// AddChildIDs adds the "children" edge to the ItemCategory entity by IDs.
func (icuo *ItemCategoryUpdateOne) AddChildIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.AddChildIDs(ids...)
	return icuo
}

// AddChildren adds the "children" edges to the ItemCategory entity.
func (icuo *ItemCategoryUpdateOne) AddChildren(i ...*ItemCategory) *ItemCategoryUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.AddChildIDs(ids...)
}

// Mutation returns the ItemCategoryMutation object of the builder.
func (icuo *ItemCategoryUpdateOne) Mutation() *ItemCategoryMutation {
	return icuo.mutation
}

// ClearItemQuestionBanks clears all "item_question_banks" edges to the TkQuestionBank entity.
func (icuo *ItemCategoryUpdateOne) ClearItemQuestionBanks() *ItemCategoryUpdateOne {
	icuo.mutation.ClearItemQuestionBanks()
	return icuo
}

// RemoveItemQuestionBankIDs removes the "item_question_banks" edge to TkQuestionBank entities by IDs.
func (icuo *ItemCategoryUpdateOne) RemoveItemQuestionBankIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.RemoveItemQuestionBankIDs(ids...)
	return icuo
}

// RemoveItemQuestionBanks removes "item_question_banks" edges to TkQuestionBank entities.
func (icuo *ItemCategoryUpdateOne) RemoveItemQuestionBanks(t ...*TkQuestionBank) *ItemCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return icuo.RemoveItemQuestionBankIDs(ids...)
}

// ClearKcClass clears the "kc_class" edge to the KcClass entity.
func (icuo *ItemCategoryUpdateOne) ClearKcClass() *ItemCategoryUpdateOne {
	icuo.mutation.ClearKcClass()
	return icuo
}

// ClearCourse clears all "course" edges to the KcCourse entity.
func (icuo *ItemCategoryUpdateOne) ClearCourse() *ItemCategoryUpdateOne {
	icuo.mutation.ClearCourse()
	return icuo
}

// RemoveCourseIDs removes the "course" edge to KcCourse entities by IDs.
func (icuo *ItemCategoryUpdateOne) RemoveCourseIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.RemoveCourseIDs(ids...)
	return icuo
}

// RemoveCourse removes "course" edges to KcCourse entities.
func (icuo *ItemCategoryUpdateOne) RemoveCourse(k ...*KcCourse) *ItemCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return icuo.RemoveCourseIDs(ids...)
}

// ClearUserItemCate clears all "user_item_cate" edges to the User entity.
func (icuo *ItemCategoryUpdateOne) ClearUserItemCate() *ItemCategoryUpdateOne {
	icuo.mutation.ClearUserItemCate()
	return icuo
}

// RemoveUserItemCateIDs removes the "user_item_cate" edge to User entities by IDs.
func (icuo *ItemCategoryUpdateOne) RemoveUserItemCateIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.RemoveUserItemCateIDs(ids...)
	return icuo
}

// RemoveUserItemCate removes "user_item_cate" edges to User entities.
func (icuo *ItemCategoryUpdateOne) RemoveUserItemCate(u ...*User) *ItemCategoryUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return icuo.RemoveUserItemCateIDs(ids...)
}

// ClearParent clears the "parent" edge to the ItemCategory entity.
func (icuo *ItemCategoryUpdateOne) ClearParent() *ItemCategoryUpdateOne {
	icuo.mutation.ClearParent()
	return icuo
}

// ClearChildren clears all "children" edges to the ItemCategory entity.
func (icuo *ItemCategoryUpdateOne) ClearChildren() *ItemCategoryUpdateOne {
	icuo.mutation.ClearChildren()
	return icuo
}

// RemoveChildIDs removes the "children" edge to ItemCategory entities by IDs.
func (icuo *ItemCategoryUpdateOne) RemoveChildIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.RemoveChildIDs(ids...)
	return icuo
}

// RemoveChildren removes "children" edges to ItemCategory entities.
func (icuo *ItemCategoryUpdateOne) RemoveChildren(i ...*ItemCategory) *ItemCategoryUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.RemoveChildIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (icuo *ItemCategoryUpdateOne) Select(field string, fields ...string) *ItemCategoryUpdateOne {
	icuo.fields = append([]string{field}, fields...)
	return icuo
}

// Save executes the query and returns the updated ItemCategory entity.
func (icuo *ItemCategoryUpdateOne) Save(ctx context.Context) (*ItemCategory, error) {
	var (
		err  error
		node *ItemCategory
	)
	icuo.defaults()
	if len(icuo.hooks) == 0 {
		node, err = icuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			icuo.mutation = mutation
			node, err = icuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(icuo.hooks) - 1; i >= 0; i-- {
			mut = icuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (icuo *ItemCategoryUpdateOne) SaveX(ctx context.Context) *ItemCategory {
	node, err := icuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (icuo *ItemCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := icuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icuo *ItemCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := icuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icuo *ItemCategoryUpdateOne) defaults() {
	if _, ok := icuo.mutation.UpdatedAt(); !ok && !icuo.mutation.UpdatedAtCleared() {
		v := itemcategory.UpdateDefaultUpdatedAt()
		icuo.mutation.SetUpdatedAt(v)
	}
}

func (icuo *ItemCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ItemCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemcategory.Table,
			Columns: itemcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemcategory.FieldID,
			},
		},
	}
	id, ok := icuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ItemCategory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := icuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemcategory.FieldID)
		for _, f := range fields {
			if !itemcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != itemcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := icuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldUUID,
		})
	}
	if icuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: itemcategory.FieldCreatedAt,
		})
	}
	if value, ok := icuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldUpdatedAt,
		})
	}
	if icuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: itemcategory.FieldUpdatedAt,
		})
	}
	if value, ok := icuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldDeletedAt,
		})
	}
	if icuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: itemcategory.FieldDeletedAt,
		})
	}
	if value, ok := icuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldName,
		})
	}
	if value, ok := icuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: itemcategory.FieldStatus,
		})
	}
	if value, ok := icuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: itemcategory.FieldStatus,
		})
	}
	if value, ok := icuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldCode,
		})
	}
	if value, ok := icuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldDesc,
		})
	}
	if value, ok := icuo.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemcategory.FieldSortOrder,
		})
	}
	if value, ok := icuo.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemcategory.FieldSortOrder,
		})
	}
	if icuo.mutation.ItemQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemQuestionBanksTable,
			Columns: []string{itemcategory.ItemQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.RemovedItemQuestionBanksIDs(); len(nodes) > 0 && !icuo.mutation.ItemQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemQuestionBanksTable,
			Columns: []string{itemcategory.ItemQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.ItemQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemQuestionBanksTable,
			Columns: []string{itemcategory.ItemQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icuo.mutation.KcClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   itemcategory.KcClassTable,
			Columns: []string{itemcategory.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.KcClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   itemcategory.KcClassTable,
			Columns: []string{itemcategory.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.CourseTable,
			Columns: []string{itemcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.RemovedCourseIDs(); len(nodes) > 0 && !icuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.CourseTable,
			Columns: []string{itemcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.CourseTable,
			Columns: []string{itemcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icuo.mutation.UserItemCateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.UserItemCateTable,
			Columns: []string{itemcategory.UserItemCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.RemovedUserItemCateIDs(); len(nodes) > 0 && !icuo.mutation.UserItemCateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.UserItemCateTable,
			Columns: []string{itemcategory.UserItemCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.UserItemCateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.UserItemCateTable,
			Columns: []string{itemcategory.UserItemCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemcategory.ParentTable,
			Columns: []string{itemcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemcategory.ParentTable,
			Columns: []string{itemcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ChildrenTable,
			Columns: []string{itemcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !icuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ChildrenTable,
			Columns: []string{itemcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ChildrenTable,
			Columns: []string{itemcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ItemCategory{config: icuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, icuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

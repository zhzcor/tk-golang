// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/itemcategory"
	"tkserver/internal/store/ent/level"
	"tkserver/internal/store/ent/tkquestionbank"

	"entgo.io/ent/dialect/sql"
)

// TkQuestionBank is the model entity for the TkQuestionBank schema.
type TkQuestionBank struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 题库名称
	Name string `json:"name"`
	// Status holds the value of the "status" field.
	// 状态，1：启用 2:禁用
	Status uint8 `json:"status"`
	// QuestionCount holds the value of the "question_count" field.
	// 题目数量
	QuestionCount int `json:"question_count"`
	// CreatedAdminID holds the value of the "created_admin_id" field.
	// 创建人id
	CreatedAdminID int `json:"created_admin_id"`
	// ItemCategoryID holds the value of the "item_category_id" field.
	// 项目id
	ItemCategoryID int `json:"item_category_id"`
	// LevelID holds the value of the "level_id" field.
	// 层次id
	LevelID int `json:"level_id"`
	// SortOrder holds the value of the "sort_order" field.
	// 排序
	SortOrder int `json:"sort_order"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkQuestionBankQuery when eager-loading is set.
	Edges TkQuestionBankEdges `json:"edges"`
}

// TkQuestionBankEdges holds the relations/edges for other nodes in the graph.
type TkQuestionBankEdges struct {
	// ItemCategory holds the value of the item_category edge.
	ItemCategory *ItemCategory `json:"item_category,omitempty"`
	// Level holds the value of the level edge.
	Level *Level `json:"level,omitempty"`
	// Admin holds the value of the admin edge.
	Admin *Admin `json:"admin,omitempty"`
	// QuestionChapters holds the value of the question_chapters edge.
	QuestionChapters []*TkChapter `json:"question_chapters,omitempty"`
	// QuestionBankCourses holds the value of the question_bank_courses edge.
	QuestionBankCourses []*KcCourse `json:"question_bank_courses,omitempty"`
	// Questions holds the value of the questions edge.
	Questions []*TkQuestion `json:"questions,omitempty"`
	// ExamPapers holds the value of the exam_papers edge.
	ExamPapers []*TkExamPaper `json:"exam_papers,omitempty"`
	// ExamQuestionTypes holds the value of the exam_question_types edge.
	ExamQuestionTypes []*TkExamQuestionType `json:"exam_question_types,omitempty"`
	// UserQuestionBank holds the value of the user_question_bank edge.
	UserQuestionBank []*TkUserQuestionBankRecord `json:"user_question_bank,omitempty"`
	// UserBankRecords holds the value of the user_bank_records edge.
	UserBankRecords []*TkUserQuestionRecord `json:"user_bank_records,omitempty"`
	// KnowledgePoints holds the value of the knowledge_points edge.
	KnowledgePoints []*TkKnowledgePoint `json:"knowledge_points,omitempty"`
	// CityQuestionBanks holds the value of the city_question_banks edge.
	CityQuestionBanks []*TkQuestionBankCity `json:"city_question_banks,omitempty"`
	// MajorQuestionBanks holds the value of the major_question_banks edge.
	MajorQuestionBanks []*TkQuestionBankMajor `json:"major_question_banks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
}

// ItemCategoryOrErr returns the ItemCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionBankEdges) ItemCategoryOrErr() (*ItemCategory, error) {
	if e.loadedTypes[0] {
		if e.ItemCategory == nil {
			// The edge item_category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: itemcategory.Label}
		}
		return e.ItemCategory, nil
	}
	return nil, &NotLoadedError{edge: "item_category"}
}

// LevelOrErr returns the Level value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionBankEdges) LevelOrErr() (*Level, error) {
	if e.loadedTypes[1] {
		if e.Level == nil {
			// The edge level was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: level.Label}
		}
		return e.Level, nil
	}
	return nil, &NotLoadedError{edge: "level"}
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionBankEdges) AdminOrErr() (*Admin, error) {
	if e.loadedTypes[2] {
		if e.Admin == nil {
			// The edge admin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// QuestionChaptersOrErr returns the QuestionChapters value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) QuestionChaptersOrErr() ([]*TkChapter, error) {
	if e.loadedTypes[3] {
		return e.QuestionChapters, nil
	}
	return nil, &NotLoadedError{edge: "question_chapters"}
}

// QuestionBankCoursesOrErr returns the QuestionBankCourses value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) QuestionBankCoursesOrErr() ([]*KcCourse, error) {
	if e.loadedTypes[4] {
		return e.QuestionBankCourses, nil
	}
	return nil, &NotLoadedError{edge: "question_bank_courses"}
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) QuestionsOrErr() ([]*TkQuestion, error) {
	if e.loadedTypes[5] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// ExamPapersOrErr returns the ExamPapers value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) ExamPapersOrErr() ([]*TkExamPaper, error) {
	if e.loadedTypes[6] {
		return e.ExamPapers, nil
	}
	return nil, &NotLoadedError{edge: "exam_papers"}
}

// ExamQuestionTypesOrErr returns the ExamQuestionTypes value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) ExamQuestionTypesOrErr() ([]*TkExamQuestionType, error) {
	if e.loadedTypes[7] {
		return e.ExamQuestionTypes, nil
	}
	return nil, &NotLoadedError{edge: "exam_question_types"}
}

// UserQuestionBankOrErr returns the UserQuestionBank value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) UserQuestionBankOrErr() ([]*TkUserQuestionBankRecord, error) {
	if e.loadedTypes[8] {
		return e.UserQuestionBank, nil
	}
	return nil, &NotLoadedError{edge: "user_question_bank"}
}

// UserBankRecordsOrErr returns the UserBankRecords value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) UserBankRecordsOrErr() ([]*TkUserQuestionRecord, error) {
	if e.loadedTypes[9] {
		return e.UserBankRecords, nil
	}
	return nil, &NotLoadedError{edge: "user_bank_records"}
}

// KnowledgePointsOrErr returns the KnowledgePoints value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) KnowledgePointsOrErr() ([]*TkKnowledgePoint, error) {
	if e.loadedTypes[10] {
		return e.KnowledgePoints, nil
	}
	return nil, &NotLoadedError{edge: "knowledge_points"}
}

// CityQuestionBanksOrErr returns the CityQuestionBanks value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) CityQuestionBanksOrErr() ([]*TkQuestionBankCity, error) {
	if e.loadedTypes[11] {
		return e.CityQuestionBanks, nil
	}
	return nil, &NotLoadedError{edge: "city_question_banks"}
}

// MajorQuestionBanksOrErr returns the MajorQuestionBanks value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionBankEdges) MajorQuestionBanksOrErr() ([]*TkQuestionBankMajor, error) {
	if e.loadedTypes[12] {
		return e.MajorQuestionBanks, nil
	}
	return nil, &NotLoadedError{edge: "major_question_banks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkQuestionBank) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkquestionbank.FieldID, tkquestionbank.FieldStatus, tkquestionbank.FieldQuestionCount, tkquestionbank.FieldCreatedAdminID, tkquestionbank.FieldItemCategoryID, tkquestionbank.FieldLevelID, tkquestionbank.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case tkquestionbank.FieldUUID, tkquestionbank.FieldName:
			values[i] = new(sql.NullString)
		case tkquestionbank.FieldCreatedAt, tkquestionbank.FieldUpdatedAt, tkquestionbank.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkQuestionBank", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkQuestionBank fields.
func (tqb *TkQuestionBank) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkquestionbank.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tqb.ID = int(value.Int64)
		case tkquestionbank.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tqb.UUID = value.String
			}
		case tkquestionbank.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tqb.CreatedAt = new(time.Time)
				*tqb.CreatedAt = value.Time
			}
		case tkquestionbank.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tqb.UpdatedAt = new(time.Time)
				*tqb.UpdatedAt = value.Time
			}
		case tkquestionbank.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tqb.DeletedAt = new(time.Time)
				*tqb.DeletedAt = value.Time
			}
		case tkquestionbank.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tqb.Name = value.String
			}
		case tkquestionbank.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tqb.Status = uint8(value.Int64)
			}
		case tkquestionbank.FieldQuestionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_count", values[i])
			} else if value.Valid {
				tqb.QuestionCount = int(value.Int64)
			}
		case tkquestionbank.FieldCreatedAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_admin_id", values[i])
			} else if value.Valid {
				tqb.CreatedAdminID = int(value.Int64)
			}
		case tkquestionbank.FieldItemCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_category_id", values[i])
			} else if value.Valid {
				tqb.ItemCategoryID = int(value.Int64)
			}
		case tkquestionbank.FieldLevelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level_id", values[i])
			} else if value.Valid {
				tqb.LevelID = int(value.Int64)
			}
		case tkquestionbank.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				tqb.SortOrder = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryItemCategory queries the "item_category" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryItemCategory() *ItemCategoryQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryItemCategory(tqb)
}

// QueryLevel queries the "level" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryLevel() *LevelQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryLevel(tqb)
}

// QueryAdmin queries the "admin" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryAdmin() *AdminQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryAdmin(tqb)
}

// QueryQuestionChapters queries the "question_chapters" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryQuestionChapters() *TkChapterQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryQuestionChapters(tqb)
}

// QueryQuestionBankCourses queries the "question_bank_courses" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryQuestionBankCourses() *KcCourseQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryQuestionBankCourses(tqb)
}

// QueryQuestions queries the "questions" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryQuestions() *TkQuestionQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryQuestions(tqb)
}

// QueryExamPapers queries the "exam_papers" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryExamPapers() *TkExamPaperQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryExamPapers(tqb)
}

// QueryExamQuestionTypes queries the "exam_question_types" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryExamQuestionTypes() *TkExamQuestionTypeQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryExamQuestionTypes(tqb)
}

// QueryUserQuestionBank queries the "user_question_bank" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryUserQuestionBank() *TkUserQuestionBankRecordQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryUserQuestionBank(tqb)
}

// QueryUserBankRecords queries the "user_bank_records" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryUserBankRecords() *TkUserQuestionRecordQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryUserBankRecords(tqb)
}

// QueryKnowledgePoints queries the "knowledge_points" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryKnowledgePoints() *TkKnowledgePointQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryKnowledgePoints(tqb)
}

// QueryCityQuestionBanks queries the "city_question_banks" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryCityQuestionBanks() *TkQuestionBankCityQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryCityQuestionBanks(tqb)
}

// QueryMajorQuestionBanks queries the "major_question_banks" edge of the TkQuestionBank entity.
func (tqb *TkQuestionBank) QueryMajorQuestionBanks() *TkQuestionBankMajorQuery {
	return (&TkQuestionBankClient{config: tqb.config}).QueryMajorQuestionBanks(tqb)
}

// Update returns a builder for updating this TkQuestionBank.
// Note that you need to call TkQuestionBank.Unwrap() before calling this method if this TkQuestionBank
// was returned from a transaction, and the transaction was committed or rolled back.
func (tqb *TkQuestionBank) Update() *TkQuestionBankUpdateOne {
	return (&TkQuestionBankClient{config: tqb.config}).UpdateOne(tqb)
}

// Unwrap unwraps the TkQuestionBank entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tqb *TkQuestionBank) Unwrap() *TkQuestionBank {
	tx, ok := tqb.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkQuestionBank is not a transactional entity")
	}
	tqb.config.driver = tx.drv
	return tqb
}

// String implements the fmt.Stringer.
func (tqb *TkQuestionBank) String() string {
	var builder strings.Builder
	builder.WriteString("TkQuestionBank(")
	builder.WriteString(fmt.Sprintf("id=%v", tqb.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tqb.UUID)
	if v := tqb.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tqb.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tqb.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(tqb.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", tqb.Status))
	builder.WriteString(", question_count=")
	builder.WriteString(fmt.Sprintf("%v", tqb.QuestionCount))
	builder.WriteString(", created_admin_id=")
	builder.WriteString(fmt.Sprintf("%v", tqb.CreatedAdminID))
	builder.WriteString(", item_category_id=")
	builder.WriteString(fmt.Sprintf("%v", tqb.ItemCategoryID))
	builder.WriteString(", level_id=")
	builder.WriteString(fmt.Sprintf("%v", tqb.LevelID))
	builder.WriteString(", sort_order=")
	builder.WriteString(fmt.Sprintf("%v", tqb.SortOrder))
	builder.WriteByte(')')
	return builder.String()
}

// TkQuestionBanks is a parsable slice of TkQuestionBank.
type TkQuestionBanks []*TkQuestionBank

func (tqb TkQuestionBanks) config(cfg config) {
	for _i := range tqb {
		tqb[_i].config = cfg
	}
}

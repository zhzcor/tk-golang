// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/kcsmallcategoryexampaper"
	"gserver/internal/store/ent/makeuserquestionrecord"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkexampaper"
	"gserver/internal/store/ent/tkexampaperpartition"
	"gserver/internal/store/ent/tkquestionbank"
	"gserver/internal/store/ent/tkuserexamscorerecord"
	"gserver/internal/store/ent/tkuserquestionrecord"
	"gserver/internal/store/ent/tkuserrandomexamrecode"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperUpdate is the builder for updating TkExamPaper entities.
type TkExamPaperUpdate struct {
	config
	hooks    []Hook
	mutation *TkExamPaperMutation
}

// Where adds a new predicate for the TkExamPaperUpdate builder.
func (tepu *TkExamPaperUpdate) Where(ps ...predicate.TkExamPaper) *TkExamPaperUpdate {
	tepu.mutation.predicates = append(tepu.mutation.predicates, ps...)
	return tepu
}

// SetUUID sets the "uuid" field.
func (tepu *TkExamPaperUpdate) SetUUID(s string) *TkExamPaperUpdate {
	tepu.mutation.SetUUID(s)
	return tepu
}

// SetUpdatedAt sets the "updated_at" field.
func (tepu *TkExamPaperUpdate) SetUpdatedAt(t time.Time) *TkExamPaperUpdate {
	tepu.mutation.SetUpdatedAt(t)
	return tepu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tepu *TkExamPaperUpdate) ClearUpdatedAt() *TkExamPaperUpdate {
	tepu.mutation.ClearUpdatedAt()
	return tepu
}

// SetDeletedAt sets the "deleted_at" field.
func (tepu *TkExamPaperUpdate) SetDeletedAt(t time.Time) *TkExamPaperUpdate {
	tepu.mutation.SetDeletedAt(t)
	return tepu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableDeletedAt(t *time.Time) *TkExamPaperUpdate {
	if t != nil {
		tepu.SetDeletedAt(*t)
	}
	return tepu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tepu *TkExamPaperUpdate) ClearDeletedAt() *TkExamPaperUpdate {
	tepu.mutation.ClearDeletedAt()
	return tepu
}

// SetName sets the "name" field.
func (tepu *TkExamPaperUpdate) SetName(s string) *TkExamPaperUpdate {
	tepu.mutation.SetName(s)
	return tepu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableName(s *string) *TkExamPaperUpdate {
	if s != nil {
		tepu.SetName(*s)
	}
	return tepu
}

// SetDesc sets the "desc" field.
func (tepu *TkExamPaperUpdate) SetDesc(s string) *TkExamPaperUpdate {
	tepu.mutation.SetDesc(s)
	return tepu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableDesc(s *string) *TkExamPaperUpdate {
	if s != nil {
		tepu.SetDesc(*s)
	}
	return tepu
}

// SetExamQuestionType sets the "exam_question_type" field.
func (tepu *TkExamPaperUpdate) SetExamQuestionType(u uint8) *TkExamPaperUpdate {
	tepu.mutation.ResetExamQuestionType()
	tepu.mutation.SetExamQuestionType(u)
	return tepu
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableExamQuestionType(u *uint8) *TkExamPaperUpdate {
	if u != nil {
		tepu.SetExamQuestionType(*u)
	}
	return tepu
}

// AddExamQuestionType adds u to the "exam_question_type" field.
func (tepu *TkExamPaperUpdate) AddExamQuestionType(u uint8) *TkExamPaperUpdate {
	tepu.mutation.AddExamQuestionType(u)
	return tepu
}

// SetExamType sets the "exam_type" field.
func (tepu *TkExamPaperUpdate) SetExamType(u uint8) *TkExamPaperUpdate {
	tepu.mutation.ResetExamType()
	tepu.mutation.SetExamType(u)
	return tepu
}

// SetNillableExamType sets the "exam_type" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableExamType(u *uint8) *TkExamPaperUpdate {
	if u != nil {
		tepu.SetExamType(*u)
	}
	return tepu
}

// AddExamType adds u to the "exam_type" field.
func (tepu *TkExamPaperUpdate) AddExamType(u uint8) *TkExamPaperUpdate {
	tepu.mutation.AddExamType(u)
	return tepu
}

// SetDifficulty sets the "difficulty" field.
func (tepu *TkExamPaperUpdate) SetDifficulty(u uint8) *TkExamPaperUpdate {
	tepu.mutation.ResetDifficulty()
	tepu.mutation.SetDifficulty(u)
	return tepu
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableDifficulty(u *uint8) *TkExamPaperUpdate {
	if u != nil {
		tepu.SetDifficulty(*u)
	}
	return tepu
}

// AddDifficulty adds u to the "difficulty" field.
func (tepu *TkExamPaperUpdate) AddDifficulty(u uint8) *TkExamPaperUpdate {
	tepu.mutation.AddDifficulty(u)
	return tepu
}

// SetQuestionCount sets the "question_count" field.
func (tepu *TkExamPaperUpdate) SetQuestionCount(i int) *TkExamPaperUpdate {
	tepu.mutation.ResetQuestionCount()
	tepu.mutation.SetQuestionCount(i)
	return tepu
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableQuestionCount(i *int) *TkExamPaperUpdate {
	if i != nil {
		tepu.SetQuestionCount(*i)
	}
	return tepu
}

// AddQuestionCount adds i to the "question_count" field.
func (tepu *TkExamPaperUpdate) AddQuestionCount(i int) *TkExamPaperUpdate {
	tepu.mutation.AddQuestionCount(i)
	return tepu
}

// SetAnsweredUserCount sets the "answered_user_count" field.
func (tepu *TkExamPaperUpdate) SetAnsweredUserCount(i int) *TkExamPaperUpdate {
	tepu.mutation.ResetAnsweredUserCount()
	tepu.mutation.SetAnsweredUserCount(i)
	return tepu
}

// SetNillableAnsweredUserCount sets the "answered_user_count" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableAnsweredUserCount(i *int) *TkExamPaperUpdate {
	if i != nil {
		tepu.SetAnsweredUserCount(*i)
	}
	return tepu
}

// AddAnsweredUserCount adds i to the "answered_user_count" field.
func (tepu *TkExamPaperUpdate) AddAnsweredUserCount(i int) *TkExamPaperUpdate {
	tepu.mutation.AddAnsweredUserCount(i)
	return tepu
}

// SetScore sets the "score" field.
func (tepu *TkExamPaperUpdate) SetScore(i int) *TkExamPaperUpdate {
	tepu.mutation.ResetScore()
	tepu.mutation.SetScore(i)
	return tepu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableScore(i *int) *TkExamPaperUpdate {
	if i != nil {
		tepu.SetScore(*i)
	}
	return tepu
}

// AddScore adds i to the "score" field.
func (tepu *TkExamPaperUpdate) AddScore(i int) *TkExamPaperUpdate {
	tepu.mutation.AddScore(i)
	return tepu
}

// SetPassScore sets the "pass_score" field.
func (tepu *TkExamPaperUpdate) SetPassScore(i int) *TkExamPaperUpdate {
	tepu.mutation.ResetPassScore()
	tepu.mutation.SetPassScore(i)
	return tepu
}

// SetNillablePassScore sets the "pass_score" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillablePassScore(i *int) *TkExamPaperUpdate {
	if i != nil {
		tepu.SetPassScore(*i)
	}
	return tepu
}

// AddPassScore adds i to the "pass_score" field.
func (tepu *TkExamPaperUpdate) AddPassScore(i int) *TkExamPaperUpdate {
	tepu.mutation.AddPassScore(i)
	return tepu
}

// SetDuration sets the "duration" field.
func (tepu *TkExamPaperUpdate) SetDuration(i int) *TkExamPaperUpdate {
	tepu.mutation.ResetDuration()
	tepu.mutation.SetDuration(i)
	return tepu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableDuration(i *int) *TkExamPaperUpdate {
	if i != nil {
		tepu.SetDuration(*i)
	}
	return tepu
}

// AddDuration adds i to the "duration" field.
func (tepu *TkExamPaperUpdate) AddDuration(i int) *TkExamPaperUpdate {
	tepu.mutation.AddDuration(i)
	return tepu
}

// SetDurationType sets the "duration_type" field.
func (tepu *TkExamPaperUpdate) SetDurationType(i int) *TkExamPaperUpdate {
	tepu.mutation.ResetDurationType()
	tepu.mutation.SetDurationType(i)
	return tepu
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableDurationType(i *int) *TkExamPaperUpdate {
	if i != nil {
		tepu.SetDurationType(*i)
	}
	return tepu
}

// AddDurationType adds i to the "duration_type" field.
func (tepu *TkExamPaperUpdate) AddDurationType(i int) *TkExamPaperUpdate {
	tepu.mutation.AddDurationType(i)
	return tepu
}

// SetStartAt sets the "start_at" field.
func (tepu *TkExamPaperUpdate) SetStartAt(t time.Time) *TkExamPaperUpdate {
	tepu.mutation.SetStartAt(t)
	return tepu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableStartAt(t *time.Time) *TkExamPaperUpdate {
	if t != nil {
		tepu.SetStartAt(*t)
	}
	return tepu
}

// ClearStartAt clears the value of the "start_at" field.
func (tepu *TkExamPaperUpdate) ClearStartAt() *TkExamPaperUpdate {
	tepu.mutation.ClearStartAt()
	return tepu
}

// SetEndAt sets the "end_at" field.
func (tepu *TkExamPaperUpdate) SetEndAt(t time.Time) *TkExamPaperUpdate {
	tepu.mutation.SetEndAt(t)
	return tepu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableEndAt(t *time.Time) *TkExamPaperUpdate {
	if t != nil {
		tepu.SetEndAt(*t)
	}
	return tepu
}

// ClearEndAt clears the value of the "end_at" field.
func (tepu *TkExamPaperUpdate) ClearEndAt() *TkExamPaperUpdate {
	tepu.mutation.ClearEndAt()
	return tepu
}

// SetEnableStatus sets the "enable_status" field.
func (tepu *TkExamPaperUpdate) SetEnableStatus(u uint8) *TkExamPaperUpdate {
	tepu.mutation.ResetEnableStatus()
	tepu.mutation.SetEnableStatus(u)
	return tepu
}

// SetNillableEnableStatus sets the "enable_status" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableEnableStatus(u *uint8) *TkExamPaperUpdate {
	if u != nil {
		tepu.SetEnableStatus(*u)
	}
	return tepu
}

// AddEnableStatus adds u to the "enable_status" field.
func (tepu *TkExamPaperUpdate) AddEnableStatus(u uint8) *TkExamPaperUpdate {
	tepu.mutation.AddEnableStatus(u)
	return tepu
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (tepu *TkExamPaperUpdate) SetCreatedAdminID(i int) *TkExamPaperUpdate {
	tepu.mutation.ResetCreatedAdminID()
	tepu.mutation.SetCreatedAdminID(i)
	return tepu
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableCreatedAdminID(i *int) *TkExamPaperUpdate {
	if i != nil {
		tepu.SetCreatedAdminID(*i)
	}
	return tepu
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (tepu *TkExamPaperUpdate) ClearCreatedAdminID() *TkExamPaperUpdate {
	tepu.mutation.ClearCreatedAdminID()
	return tepu
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tepu *TkExamPaperUpdate) SetQuestionBankID(i int) *TkExamPaperUpdate {
	tepu.mutation.ResetQuestionBankID()
	tepu.mutation.SetQuestionBankID(i)
	return tepu
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableQuestionBankID(i *int) *TkExamPaperUpdate {
	if i != nil {
		tepu.SetQuestionBankID(*i)
	}
	return tepu
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tepu *TkExamPaperUpdate) ClearQuestionBankID() *TkExamPaperUpdate {
	tepu.mutation.ClearQuestionBankID()
	return tepu
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tepu *TkExamPaperUpdate) SetQuestionBank(t *TkQuestionBank) *TkExamPaperUpdate {
	return tepu.SetQuestionBankID(t.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (tepu *TkExamPaperUpdate) SetAdminID(id int) *TkExamPaperUpdate {
	tepu.mutation.SetAdminID(id)
	return tepu
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (tepu *TkExamPaperUpdate) SetNillableAdminID(id *int) *TkExamPaperUpdate {
	if id != nil {
		tepu = tepu.SetAdminID(*id)
	}
	return tepu
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (tepu *TkExamPaperUpdate) SetAdmin(a *Admin) *TkExamPaperUpdate {
	return tepu.SetAdminID(a.ID)
}

// AddExamPartitionIDs adds the "exam_partitions" edge to the TkExamPaperPartition entity by IDs.
func (tepu *TkExamPaperUpdate) AddExamPartitionIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.AddExamPartitionIDs(ids...)
	return tepu
}

// AddExamPartitions adds the "exam_partitions" edges to the TkExamPaperPartition entity.
func (tepu *TkExamPaperUpdate) AddExamPartitions(t ...*TkExamPaperPartition) *TkExamPaperUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepu.AddExamPartitionIDs(ids...)
}

// AddMakeUserQuestionExamIDs adds the "make_user_question_exam" edge to the MakeUserQuestionRecord entity by IDs.
func (tepu *TkExamPaperUpdate) AddMakeUserQuestionExamIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.AddMakeUserQuestionExamIDs(ids...)
	return tepu
}

// AddMakeUserQuestionExam adds the "make_user_question_exam" edges to the MakeUserQuestionRecord entity.
func (tepu *TkExamPaperUpdate) AddMakeUserQuestionExam(m ...*MakeUserQuestionRecord) *TkExamPaperUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tepu.AddMakeUserQuestionExamIDs(ids...)
}

// AddUserExamPaperIDs adds the "user_exam_papers" edge to the TkUserExamScoreRecord entity by IDs.
func (tepu *TkExamPaperUpdate) AddUserExamPaperIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.AddUserExamPaperIDs(ids...)
	return tepu
}

// AddUserExamPapers adds the "user_exam_papers" edges to the TkUserExamScoreRecord entity.
func (tepu *TkExamPaperUpdate) AddUserExamPapers(t ...*TkUserExamScoreRecord) *TkExamPaperUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepu.AddUserExamPaperIDs(ids...)
}

// AddCourseExamPaperIDs adds the "course_exam_papers" edge to the KcSmallCategoryExamPaper entity by IDs.
func (tepu *TkExamPaperUpdate) AddCourseExamPaperIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.AddCourseExamPaperIDs(ids...)
	return tepu
}

// AddCourseExamPapers adds the "course_exam_papers" edges to the KcSmallCategoryExamPaper entity.
func (tepu *TkExamPaperUpdate) AddCourseExamPapers(k ...*KcSmallCategoryExamPaper) *TkExamPaperUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tepu.AddCourseExamPaperIDs(ids...)
}

// AddExamPaperRecordIDs adds the "exam_paper_records" edge to the TkUserQuestionRecord entity by IDs.
func (tepu *TkExamPaperUpdate) AddExamPaperRecordIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.AddExamPaperRecordIDs(ids...)
	return tepu
}

// AddExamPaperRecords adds the "exam_paper_records" edges to the TkUserQuestionRecord entity.
func (tepu *TkExamPaperUpdate) AddExamPaperRecords(t ...*TkUserQuestionRecord) *TkExamPaperUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepu.AddExamPaperRecordIDs(ids...)
}

// AddUserRandomExamIDs adds the "user_random_exam" edge to the TkUserRandomExamRecode entity by IDs.
func (tepu *TkExamPaperUpdate) AddUserRandomExamIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.AddUserRandomExamIDs(ids...)
	return tepu
}

// AddUserRandomExam adds the "user_random_exam" edges to the TkUserRandomExamRecode entity.
func (tepu *TkExamPaperUpdate) AddUserRandomExam(t ...*TkUserRandomExamRecode) *TkExamPaperUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepu.AddUserRandomExamIDs(ids...)
}

// Mutation returns the TkExamPaperMutation object of the builder.
func (tepu *TkExamPaperUpdate) Mutation() *TkExamPaperMutation {
	return tepu.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (tepu *TkExamPaperUpdate) ClearQuestionBank() *TkExamPaperUpdate {
	tepu.mutation.ClearQuestionBank()
	return tepu
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (tepu *TkExamPaperUpdate) ClearAdmin() *TkExamPaperUpdate {
	tepu.mutation.ClearAdmin()
	return tepu
}

// ClearExamPartitions clears all "exam_partitions" edges to the TkExamPaperPartition entity.
func (tepu *TkExamPaperUpdate) ClearExamPartitions() *TkExamPaperUpdate {
	tepu.mutation.ClearExamPartitions()
	return tepu
}

// RemoveExamPartitionIDs removes the "exam_partitions" edge to TkExamPaperPartition entities by IDs.
func (tepu *TkExamPaperUpdate) RemoveExamPartitionIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.RemoveExamPartitionIDs(ids...)
	return tepu
}

// RemoveExamPartitions removes "exam_partitions" edges to TkExamPaperPartition entities.
func (tepu *TkExamPaperUpdate) RemoveExamPartitions(t ...*TkExamPaperPartition) *TkExamPaperUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepu.RemoveExamPartitionIDs(ids...)
}

// ClearMakeUserQuestionExam clears all "make_user_question_exam" edges to the MakeUserQuestionRecord entity.
func (tepu *TkExamPaperUpdate) ClearMakeUserQuestionExam() *TkExamPaperUpdate {
	tepu.mutation.ClearMakeUserQuestionExam()
	return tepu
}

// RemoveMakeUserQuestionExamIDs removes the "make_user_question_exam" edge to MakeUserQuestionRecord entities by IDs.
func (tepu *TkExamPaperUpdate) RemoveMakeUserQuestionExamIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.RemoveMakeUserQuestionExamIDs(ids...)
	return tepu
}

// RemoveMakeUserQuestionExam removes "make_user_question_exam" edges to MakeUserQuestionRecord entities.
func (tepu *TkExamPaperUpdate) RemoveMakeUserQuestionExam(m ...*MakeUserQuestionRecord) *TkExamPaperUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tepu.RemoveMakeUserQuestionExamIDs(ids...)
}

// ClearUserExamPapers clears all "user_exam_papers" edges to the TkUserExamScoreRecord entity.
func (tepu *TkExamPaperUpdate) ClearUserExamPapers() *TkExamPaperUpdate {
	tepu.mutation.ClearUserExamPapers()
	return tepu
}

// RemoveUserExamPaperIDs removes the "user_exam_papers" edge to TkUserExamScoreRecord entities by IDs.
func (tepu *TkExamPaperUpdate) RemoveUserExamPaperIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.RemoveUserExamPaperIDs(ids...)
	return tepu
}

// RemoveUserExamPapers removes "user_exam_papers" edges to TkUserExamScoreRecord entities.
func (tepu *TkExamPaperUpdate) RemoveUserExamPapers(t ...*TkUserExamScoreRecord) *TkExamPaperUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepu.RemoveUserExamPaperIDs(ids...)
}

// ClearCourseExamPapers clears all "course_exam_papers" edges to the KcSmallCategoryExamPaper entity.
func (tepu *TkExamPaperUpdate) ClearCourseExamPapers() *TkExamPaperUpdate {
	tepu.mutation.ClearCourseExamPapers()
	return tepu
}

// RemoveCourseExamPaperIDs removes the "course_exam_papers" edge to KcSmallCategoryExamPaper entities by IDs.
func (tepu *TkExamPaperUpdate) RemoveCourseExamPaperIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.RemoveCourseExamPaperIDs(ids...)
	return tepu
}

// RemoveCourseExamPapers removes "course_exam_papers" edges to KcSmallCategoryExamPaper entities.
func (tepu *TkExamPaperUpdate) RemoveCourseExamPapers(k ...*KcSmallCategoryExamPaper) *TkExamPaperUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tepu.RemoveCourseExamPaperIDs(ids...)
}

// ClearExamPaperRecords clears all "exam_paper_records" edges to the TkUserQuestionRecord entity.
func (tepu *TkExamPaperUpdate) ClearExamPaperRecords() *TkExamPaperUpdate {
	tepu.mutation.ClearExamPaperRecords()
	return tepu
}

// RemoveExamPaperRecordIDs removes the "exam_paper_records" edge to TkUserQuestionRecord entities by IDs.
func (tepu *TkExamPaperUpdate) RemoveExamPaperRecordIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.RemoveExamPaperRecordIDs(ids...)
	return tepu
}

// RemoveExamPaperRecords removes "exam_paper_records" edges to TkUserQuestionRecord entities.
func (tepu *TkExamPaperUpdate) RemoveExamPaperRecords(t ...*TkUserQuestionRecord) *TkExamPaperUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepu.RemoveExamPaperRecordIDs(ids...)
}

// ClearUserRandomExam clears all "user_random_exam" edges to the TkUserRandomExamRecode entity.
func (tepu *TkExamPaperUpdate) ClearUserRandomExam() *TkExamPaperUpdate {
	tepu.mutation.ClearUserRandomExam()
	return tepu
}

// RemoveUserRandomExamIDs removes the "user_random_exam" edge to TkUserRandomExamRecode entities by IDs.
func (tepu *TkExamPaperUpdate) RemoveUserRandomExamIDs(ids ...int) *TkExamPaperUpdate {
	tepu.mutation.RemoveUserRandomExamIDs(ids...)
	return tepu
}

// RemoveUserRandomExam removes "user_random_exam" edges to TkUserRandomExamRecode entities.
func (tepu *TkExamPaperUpdate) RemoveUserRandomExam(t ...*TkUserRandomExamRecode) *TkExamPaperUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepu.RemoveUserRandomExamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tepu *TkExamPaperUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tepu.defaults()
	if len(tepu.hooks) == 0 {
		affected, err = tepu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tepu.mutation = mutation
			affected, err = tepu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tepu.hooks) - 1; i >= 0; i-- {
			mut = tepu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tepu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tepu *TkExamPaperUpdate) SaveX(ctx context.Context) int {
	affected, err := tepu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tepu *TkExamPaperUpdate) Exec(ctx context.Context) error {
	_, err := tepu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tepu *TkExamPaperUpdate) ExecX(ctx context.Context) {
	if err := tepu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tepu *TkExamPaperUpdate) defaults() {
	if _, ok := tepu.mutation.UpdatedAt(); !ok && !tepu.mutation.UpdatedAtCleared() {
		v := tkexampaper.UpdateDefaultUpdatedAt()
		tepu.mutation.SetUpdatedAt(v)
	}
}

func (tepu *TkExamPaperUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampaper.Table,
			Columns: tkexampaper.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaper.FieldID,
			},
		},
	}
	if ps := tepu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tepu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaper.FieldUUID,
		})
	}
	if tepu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldCreatedAt,
		})
	}
	if value, ok := tepu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldUpdatedAt,
		})
	}
	if tepu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldUpdatedAt,
		})
	}
	if value, ok := tepu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldDeletedAt,
		})
	}
	if tepu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldDeletedAt,
		})
	}
	if value, ok := tepu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaper.FieldName,
		})
	}
	if value, ok := tepu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaper.FieldDesc,
		})
	}
	if value, ok := tepu.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamQuestionType,
		})
	}
	if value, ok := tepu.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamQuestionType,
		})
	}
	if value, ok := tepu.mutation.ExamType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamType,
		})
	}
	if value, ok := tepu.mutation.AddedExamType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamType,
		})
	}
	if value, ok := tepu.mutation.Difficulty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldDifficulty,
		})
	}
	if value, ok := tepu.mutation.AddedDifficulty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldDifficulty,
		})
	}
	if value, ok := tepu.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldQuestionCount,
		})
	}
	if value, ok := tepu.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldQuestionCount,
		})
	}
	if value, ok := tepu.mutation.AnsweredUserCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldAnsweredUserCount,
		})
	}
	if value, ok := tepu.mutation.AddedAnsweredUserCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldAnsweredUserCount,
		})
	}
	if value, ok := tepu.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldScore,
		})
	}
	if value, ok := tepu.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldScore,
		})
	}
	if value, ok := tepu.mutation.PassScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldPassScore,
		})
	}
	if value, ok := tepu.mutation.AddedPassScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldPassScore,
		})
	}
	if value, ok := tepu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDuration,
		})
	}
	if value, ok := tepu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDuration,
		})
	}
	if value, ok := tepu.mutation.DurationType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDurationType,
		})
	}
	if value, ok := tepu.mutation.AddedDurationType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDurationType,
		})
	}
	if value, ok := tepu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldStartAt,
		})
	}
	if tepu.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldStartAt,
		})
	}
	if value, ok := tepu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldEndAt,
		})
	}
	if tepu.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldEndAt,
		})
	}
	if value, ok := tepu.mutation.EnableStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldEnableStatus,
		})
	}
	if value, ok := tepu.mutation.AddedEnableStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldEnableStatus,
		})
	}
	if tepu.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.QuestionBankTable,
			Columns: []string{tkexampaper.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.QuestionBankTable,
			Columns: []string{tkexampaper.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.AdminTable,
			Columns: []string{tkexampaper.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.AdminTable,
			Columns: []string{tkexampaper.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepu.mutation.ExamPartitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPartitionsTable,
			Columns: []string{tkexampaper.ExamPartitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.RemovedExamPartitionsIDs(); len(nodes) > 0 && !tepu.mutation.ExamPartitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPartitionsTable,
			Columns: []string{tkexampaper.ExamPartitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.ExamPartitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPartitionsTable,
			Columns: []string{tkexampaper.ExamPartitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepu.mutation.MakeUserQuestionExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.MakeUserQuestionExamTable,
			Columns: []string{tkexampaper.MakeUserQuestionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.RemovedMakeUserQuestionExamIDs(); len(nodes) > 0 && !tepu.mutation.MakeUserQuestionExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.MakeUserQuestionExamTable,
			Columns: []string{tkexampaper.MakeUserQuestionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.MakeUserQuestionExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.MakeUserQuestionExamTable,
			Columns: []string{tkexampaper.MakeUserQuestionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepu.mutation.UserExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserExamPapersTable,
			Columns: []string{tkexampaper.UserExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.RemovedUserExamPapersIDs(); len(nodes) > 0 && !tepu.mutation.UserExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserExamPapersTable,
			Columns: []string{tkexampaper.UserExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.UserExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserExamPapersTable,
			Columns: []string{tkexampaper.UserExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepu.mutation.CourseExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.CourseExamPapersTable,
			Columns: []string{tkexampaper.CourseExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.RemovedCourseExamPapersIDs(); len(nodes) > 0 && !tepu.mutation.CourseExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.CourseExamPapersTable,
			Columns: []string{tkexampaper.CourseExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.CourseExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.CourseExamPapersTable,
			Columns: []string{tkexampaper.CourseExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepu.mutation.ExamPaperRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPaperRecordsTable,
			Columns: []string{tkexampaper.ExamPaperRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.RemovedExamPaperRecordsIDs(); len(nodes) > 0 && !tepu.mutation.ExamPaperRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPaperRecordsTable,
			Columns: []string{tkexampaper.ExamPaperRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.ExamPaperRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPaperRecordsTable,
			Columns: []string{tkexampaper.ExamPaperRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepu.mutation.UserRandomExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserRandomExamTable,
			Columns: []string{tkexampaper.UserRandomExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserrandomexamrecode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.RemovedUserRandomExamIDs(); len(nodes) > 0 && !tepu.mutation.UserRandomExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserRandomExamTable,
			Columns: []string{tkexampaper.UserRandomExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserrandomexamrecode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepu.mutation.UserRandomExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserRandomExamTable,
			Columns: []string{tkexampaper.UserRandomExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserrandomexamrecode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tepu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampaper.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkExamPaperUpdateOne is the builder for updating a single TkExamPaper entity.
type TkExamPaperUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkExamPaperMutation
}

// SetUUID sets the "uuid" field.
func (tepuo *TkExamPaperUpdateOne) SetUUID(s string) *TkExamPaperUpdateOne {
	tepuo.mutation.SetUUID(s)
	return tepuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tepuo *TkExamPaperUpdateOne) SetUpdatedAt(t time.Time) *TkExamPaperUpdateOne {
	tepuo.mutation.SetUpdatedAt(t)
	return tepuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tepuo *TkExamPaperUpdateOne) ClearUpdatedAt() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearUpdatedAt()
	return tepuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tepuo *TkExamPaperUpdateOne) SetDeletedAt(t time.Time) *TkExamPaperUpdateOne {
	tepuo.mutation.SetDeletedAt(t)
	return tepuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableDeletedAt(t *time.Time) *TkExamPaperUpdateOne {
	if t != nil {
		tepuo.SetDeletedAt(*t)
	}
	return tepuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tepuo *TkExamPaperUpdateOne) ClearDeletedAt() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearDeletedAt()
	return tepuo
}

// SetName sets the "name" field.
func (tepuo *TkExamPaperUpdateOne) SetName(s string) *TkExamPaperUpdateOne {
	tepuo.mutation.SetName(s)
	return tepuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableName(s *string) *TkExamPaperUpdateOne {
	if s != nil {
		tepuo.SetName(*s)
	}
	return tepuo
}

// SetDesc sets the "desc" field.
func (tepuo *TkExamPaperUpdateOne) SetDesc(s string) *TkExamPaperUpdateOne {
	tepuo.mutation.SetDesc(s)
	return tepuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableDesc(s *string) *TkExamPaperUpdateOne {
	if s != nil {
		tepuo.SetDesc(*s)
	}
	return tepuo
}

// SetExamQuestionType sets the "exam_question_type" field.
func (tepuo *TkExamPaperUpdateOne) SetExamQuestionType(u uint8) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetExamQuestionType()
	tepuo.mutation.SetExamQuestionType(u)
	return tepuo
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableExamQuestionType(u *uint8) *TkExamPaperUpdateOne {
	if u != nil {
		tepuo.SetExamQuestionType(*u)
	}
	return tepuo
}

// AddExamQuestionType adds u to the "exam_question_type" field.
func (tepuo *TkExamPaperUpdateOne) AddExamQuestionType(u uint8) *TkExamPaperUpdateOne {
	tepuo.mutation.AddExamQuestionType(u)
	return tepuo
}

// SetExamType sets the "exam_type" field.
func (tepuo *TkExamPaperUpdateOne) SetExamType(u uint8) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetExamType()
	tepuo.mutation.SetExamType(u)
	return tepuo
}

// SetNillableExamType sets the "exam_type" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableExamType(u *uint8) *TkExamPaperUpdateOne {
	if u != nil {
		tepuo.SetExamType(*u)
	}
	return tepuo
}

// AddExamType adds u to the "exam_type" field.
func (tepuo *TkExamPaperUpdateOne) AddExamType(u uint8) *TkExamPaperUpdateOne {
	tepuo.mutation.AddExamType(u)
	return tepuo
}

// SetDifficulty sets the "difficulty" field.
func (tepuo *TkExamPaperUpdateOne) SetDifficulty(u uint8) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetDifficulty()
	tepuo.mutation.SetDifficulty(u)
	return tepuo
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableDifficulty(u *uint8) *TkExamPaperUpdateOne {
	if u != nil {
		tepuo.SetDifficulty(*u)
	}
	return tepuo
}

// AddDifficulty adds u to the "difficulty" field.
func (tepuo *TkExamPaperUpdateOne) AddDifficulty(u uint8) *TkExamPaperUpdateOne {
	tepuo.mutation.AddDifficulty(u)
	return tepuo
}

// SetQuestionCount sets the "question_count" field.
func (tepuo *TkExamPaperUpdateOne) SetQuestionCount(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetQuestionCount()
	tepuo.mutation.SetQuestionCount(i)
	return tepuo
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableQuestionCount(i *int) *TkExamPaperUpdateOne {
	if i != nil {
		tepuo.SetQuestionCount(*i)
	}
	return tepuo
}

// AddQuestionCount adds i to the "question_count" field.
func (tepuo *TkExamPaperUpdateOne) AddQuestionCount(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddQuestionCount(i)
	return tepuo
}

// SetAnsweredUserCount sets the "answered_user_count" field.
func (tepuo *TkExamPaperUpdateOne) SetAnsweredUserCount(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetAnsweredUserCount()
	tepuo.mutation.SetAnsweredUserCount(i)
	return tepuo
}

// SetNillableAnsweredUserCount sets the "answered_user_count" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableAnsweredUserCount(i *int) *TkExamPaperUpdateOne {
	if i != nil {
		tepuo.SetAnsweredUserCount(*i)
	}
	return tepuo
}

// AddAnsweredUserCount adds i to the "answered_user_count" field.
func (tepuo *TkExamPaperUpdateOne) AddAnsweredUserCount(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddAnsweredUserCount(i)
	return tepuo
}

// SetScore sets the "score" field.
func (tepuo *TkExamPaperUpdateOne) SetScore(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetScore()
	tepuo.mutation.SetScore(i)
	return tepuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableScore(i *int) *TkExamPaperUpdateOne {
	if i != nil {
		tepuo.SetScore(*i)
	}
	return tepuo
}

// AddScore adds i to the "score" field.
func (tepuo *TkExamPaperUpdateOne) AddScore(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddScore(i)
	return tepuo
}

// SetPassScore sets the "pass_score" field.
func (tepuo *TkExamPaperUpdateOne) SetPassScore(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetPassScore()
	tepuo.mutation.SetPassScore(i)
	return tepuo
}

// SetNillablePassScore sets the "pass_score" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillablePassScore(i *int) *TkExamPaperUpdateOne {
	if i != nil {
		tepuo.SetPassScore(*i)
	}
	return tepuo
}

// AddPassScore adds i to the "pass_score" field.
func (tepuo *TkExamPaperUpdateOne) AddPassScore(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddPassScore(i)
	return tepuo
}

// SetDuration sets the "duration" field.
func (tepuo *TkExamPaperUpdateOne) SetDuration(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetDuration()
	tepuo.mutation.SetDuration(i)
	return tepuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableDuration(i *int) *TkExamPaperUpdateOne {
	if i != nil {
		tepuo.SetDuration(*i)
	}
	return tepuo
}

// AddDuration adds i to the "duration" field.
func (tepuo *TkExamPaperUpdateOne) AddDuration(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddDuration(i)
	return tepuo
}

// SetDurationType sets the "duration_type" field.
func (tepuo *TkExamPaperUpdateOne) SetDurationType(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetDurationType()
	tepuo.mutation.SetDurationType(i)
	return tepuo
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableDurationType(i *int) *TkExamPaperUpdateOne {
	if i != nil {
		tepuo.SetDurationType(*i)
	}
	return tepuo
}

// AddDurationType adds i to the "duration_type" field.
func (tepuo *TkExamPaperUpdateOne) AddDurationType(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddDurationType(i)
	return tepuo
}

// SetStartAt sets the "start_at" field.
func (tepuo *TkExamPaperUpdateOne) SetStartAt(t time.Time) *TkExamPaperUpdateOne {
	tepuo.mutation.SetStartAt(t)
	return tepuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableStartAt(t *time.Time) *TkExamPaperUpdateOne {
	if t != nil {
		tepuo.SetStartAt(*t)
	}
	return tepuo
}

// ClearStartAt clears the value of the "start_at" field.
func (tepuo *TkExamPaperUpdateOne) ClearStartAt() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearStartAt()
	return tepuo
}

// SetEndAt sets the "end_at" field.
func (tepuo *TkExamPaperUpdateOne) SetEndAt(t time.Time) *TkExamPaperUpdateOne {
	tepuo.mutation.SetEndAt(t)
	return tepuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableEndAt(t *time.Time) *TkExamPaperUpdateOne {
	if t != nil {
		tepuo.SetEndAt(*t)
	}
	return tepuo
}

// ClearEndAt clears the value of the "end_at" field.
func (tepuo *TkExamPaperUpdateOne) ClearEndAt() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearEndAt()
	return tepuo
}

// SetEnableStatus sets the "enable_status" field.
func (tepuo *TkExamPaperUpdateOne) SetEnableStatus(u uint8) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetEnableStatus()
	tepuo.mutation.SetEnableStatus(u)
	return tepuo
}

// SetNillableEnableStatus sets the "enable_status" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableEnableStatus(u *uint8) *TkExamPaperUpdateOne {
	if u != nil {
		tepuo.SetEnableStatus(*u)
	}
	return tepuo
}

// AddEnableStatus adds u to the "enable_status" field.
func (tepuo *TkExamPaperUpdateOne) AddEnableStatus(u uint8) *TkExamPaperUpdateOne {
	tepuo.mutation.AddEnableStatus(u)
	return tepuo
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (tepuo *TkExamPaperUpdateOne) SetCreatedAdminID(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetCreatedAdminID()
	tepuo.mutation.SetCreatedAdminID(i)
	return tepuo
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableCreatedAdminID(i *int) *TkExamPaperUpdateOne {
	if i != nil {
		tepuo.SetCreatedAdminID(*i)
	}
	return tepuo
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (tepuo *TkExamPaperUpdateOne) ClearCreatedAdminID() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearCreatedAdminID()
	return tepuo
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tepuo *TkExamPaperUpdateOne) SetQuestionBankID(i int) *TkExamPaperUpdateOne {
	tepuo.mutation.ResetQuestionBankID()
	tepuo.mutation.SetQuestionBankID(i)
	return tepuo
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableQuestionBankID(i *int) *TkExamPaperUpdateOne {
	if i != nil {
		tepuo.SetQuestionBankID(*i)
	}
	return tepuo
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tepuo *TkExamPaperUpdateOne) ClearQuestionBankID() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearQuestionBankID()
	return tepuo
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tepuo *TkExamPaperUpdateOne) SetQuestionBank(t *TkQuestionBank) *TkExamPaperUpdateOne {
	return tepuo.SetQuestionBankID(t.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (tepuo *TkExamPaperUpdateOne) SetAdminID(id int) *TkExamPaperUpdateOne {
	tepuo.mutation.SetAdminID(id)
	return tepuo
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (tepuo *TkExamPaperUpdateOne) SetNillableAdminID(id *int) *TkExamPaperUpdateOne {
	if id != nil {
		tepuo = tepuo.SetAdminID(*id)
	}
	return tepuo
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (tepuo *TkExamPaperUpdateOne) SetAdmin(a *Admin) *TkExamPaperUpdateOne {
	return tepuo.SetAdminID(a.ID)
}

// AddExamPartitionIDs adds the "exam_partitions" edge to the TkExamPaperPartition entity by IDs.
func (tepuo *TkExamPaperUpdateOne) AddExamPartitionIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddExamPartitionIDs(ids...)
	return tepuo
}

// AddExamPartitions adds the "exam_partitions" edges to the TkExamPaperPartition entity.
func (tepuo *TkExamPaperUpdateOne) AddExamPartitions(t ...*TkExamPaperPartition) *TkExamPaperUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepuo.AddExamPartitionIDs(ids...)
}

// AddMakeUserQuestionExamIDs adds the "make_user_question_exam" edge to the MakeUserQuestionRecord entity by IDs.
func (tepuo *TkExamPaperUpdateOne) AddMakeUserQuestionExamIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddMakeUserQuestionExamIDs(ids...)
	return tepuo
}

// AddMakeUserQuestionExam adds the "make_user_question_exam" edges to the MakeUserQuestionRecord entity.
func (tepuo *TkExamPaperUpdateOne) AddMakeUserQuestionExam(m ...*MakeUserQuestionRecord) *TkExamPaperUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tepuo.AddMakeUserQuestionExamIDs(ids...)
}

// AddUserExamPaperIDs adds the "user_exam_papers" edge to the TkUserExamScoreRecord entity by IDs.
func (tepuo *TkExamPaperUpdateOne) AddUserExamPaperIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddUserExamPaperIDs(ids...)
	return tepuo
}

// AddUserExamPapers adds the "user_exam_papers" edges to the TkUserExamScoreRecord entity.
func (tepuo *TkExamPaperUpdateOne) AddUserExamPapers(t ...*TkUserExamScoreRecord) *TkExamPaperUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepuo.AddUserExamPaperIDs(ids...)
}

// AddCourseExamPaperIDs adds the "course_exam_papers" edge to the KcSmallCategoryExamPaper entity by IDs.
func (tepuo *TkExamPaperUpdateOne) AddCourseExamPaperIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddCourseExamPaperIDs(ids...)
	return tepuo
}

// AddCourseExamPapers adds the "course_exam_papers" edges to the KcSmallCategoryExamPaper entity.
func (tepuo *TkExamPaperUpdateOne) AddCourseExamPapers(k ...*KcSmallCategoryExamPaper) *TkExamPaperUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tepuo.AddCourseExamPaperIDs(ids...)
}

// AddExamPaperRecordIDs adds the "exam_paper_records" edge to the TkUserQuestionRecord entity by IDs.
func (tepuo *TkExamPaperUpdateOne) AddExamPaperRecordIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddExamPaperRecordIDs(ids...)
	return tepuo
}

// AddExamPaperRecords adds the "exam_paper_records" edges to the TkUserQuestionRecord entity.
func (tepuo *TkExamPaperUpdateOne) AddExamPaperRecords(t ...*TkUserQuestionRecord) *TkExamPaperUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepuo.AddExamPaperRecordIDs(ids...)
}

// AddUserRandomExamIDs adds the "user_random_exam" edge to the TkUserRandomExamRecode entity by IDs.
func (tepuo *TkExamPaperUpdateOne) AddUserRandomExamIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.AddUserRandomExamIDs(ids...)
	return tepuo
}

// AddUserRandomExam adds the "user_random_exam" edges to the TkUserRandomExamRecode entity.
func (tepuo *TkExamPaperUpdateOne) AddUserRandomExam(t ...*TkUserRandomExamRecode) *TkExamPaperUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepuo.AddUserRandomExamIDs(ids...)
}

// Mutation returns the TkExamPaperMutation object of the builder.
func (tepuo *TkExamPaperUpdateOne) Mutation() *TkExamPaperMutation {
	return tepuo.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (tepuo *TkExamPaperUpdateOne) ClearQuestionBank() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearQuestionBank()
	return tepuo
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (tepuo *TkExamPaperUpdateOne) ClearAdmin() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearAdmin()
	return tepuo
}

// ClearExamPartitions clears all "exam_partitions" edges to the TkExamPaperPartition entity.
func (tepuo *TkExamPaperUpdateOne) ClearExamPartitions() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearExamPartitions()
	return tepuo
}

// RemoveExamPartitionIDs removes the "exam_partitions" edge to TkExamPaperPartition entities by IDs.
func (tepuo *TkExamPaperUpdateOne) RemoveExamPartitionIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.RemoveExamPartitionIDs(ids...)
	return tepuo
}

// RemoveExamPartitions removes "exam_partitions" edges to TkExamPaperPartition entities.
func (tepuo *TkExamPaperUpdateOne) RemoveExamPartitions(t ...*TkExamPaperPartition) *TkExamPaperUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepuo.RemoveExamPartitionIDs(ids...)
}

// ClearMakeUserQuestionExam clears all "make_user_question_exam" edges to the MakeUserQuestionRecord entity.
func (tepuo *TkExamPaperUpdateOne) ClearMakeUserQuestionExam() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearMakeUserQuestionExam()
	return tepuo
}

// RemoveMakeUserQuestionExamIDs removes the "make_user_question_exam" edge to MakeUserQuestionRecord entities by IDs.
func (tepuo *TkExamPaperUpdateOne) RemoveMakeUserQuestionExamIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.RemoveMakeUserQuestionExamIDs(ids...)
	return tepuo
}

// RemoveMakeUserQuestionExam removes "make_user_question_exam" edges to MakeUserQuestionRecord entities.
func (tepuo *TkExamPaperUpdateOne) RemoveMakeUserQuestionExam(m ...*MakeUserQuestionRecord) *TkExamPaperUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tepuo.RemoveMakeUserQuestionExamIDs(ids...)
}

// ClearUserExamPapers clears all "user_exam_papers" edges to the TkUserExamScoreRecord entity.
func (tepuo *TkExamPaperUpdateOne) ClearUserExamPapers() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearUserExamPapers()
	return tepuo
}

// RemoveUserExamPaperIDs removes the "user_exam_papers" edge to TkUserExamScoreRecord entities by IDs.
func (tepuo *TkExamPaperUpdateOne) RemoveUserExamPaperIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.RemoveUserExamPaperIDs(ids...)
	return tepuo
}

// RemoveUserExamPapers removes "user_exam_papers" edges to TkUserExamScoreRecord entities.
func (tepuo *TkExamPaperUpdateOne) RemoveUserExamPapers(t ...*TkUserExamScoreRecord) *TkExamPaperUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepuo.RemoveUserExamPaperIDs(ids...)
}

// ClearCourseExamPapers clears all "course_exam_papers" edges to the KcSmallCategoryExamPaper entity.
func (tepuo *TkExamPaperUpdateOne) ClearCourseExamPapers() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearCourseExamPapers()
	return tepuo
}

// RemoveCourseExamPaperIDs removes the "course_exam_papers" edge to KcSmallCategoryExamPaper entities by IDs.
func (tepuo *TkExamPaperUpdateOne) RemoveCourseExamPaperIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.RemoveCourseExamPaperIDs(ids...)
	return tepuo
}

// RemoveCourseExamPapers removes "course_exam_papers" edges to KcSmallCategoryExamPaper entities.
func (tepuo *TkExamPaperUpdateOne) RemoveCourseExamPapers(k ...*KcSmallCategoryExamPaper) *TkExamPaperUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tepuo.RemoveCourseExamPaperIDs(ids...)
}

// ClearExamPaperRecords clears all "exam_paper_records" edges to the TkUserQuestionRecord entity.
func (tepuo *TkExamPaperUpdateOne) ClearExamPaperRecords() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearExamPaperRecords()
	return tepuo
}

// RemoveExamPaperRecordIDs removes the "exam_paper_records" edge to TkUserQuestionRecord entities by IDs.
func (tepuo *TkExamPaperUpdateOne) RemoveExamPaperRecordIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.RemoveExamPaperRecordIDs(ids...)
	return tepuo
}

// RemoveExamPaperRecords removes "exam_paper_records" edges to TkUserQuestionRecord entities.
func (tepuo *TkExamPaperUpdateOne) RemoveExamPaperRecords(t ...*TkUserQuestionRecord) *TkExamPaperUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepuo.RemoveExamPaperRecordIDs(ids...)
}

// ClearUserRandomExam clears all "user_random_exam" edges to the TkUserRandomExamRecode entity.
func (tepuo *TkExamPaperUpdateOne) ClearUserRandomExam() *TkExamPaperUpdateOne {
	tepuo.mutation.ClearUserRandomExam()
	return tepuo
}

// RemoveUserRandomExamIDs removes the "user_random_exam" edge to TkUserRandomExamRecode entities by IDs.
func (tepuo *TkExamPaperUpdateOne) RemoveUserRandomExamIDs(ids ...int) *TkExamPaperUpdateOne {
	tepuo.mutation.RemoveUserRandomExamIDs(ids...)
	return tepuo
}

// RemoveUserRandomExam removes "user_random_exam" edges to TkUserRandomExamRecode entities.
func (tepuo *TkExamPaperUpdateOne) RemoveUserRandomExam(t ...*TkUserRandomExamRecode) *TkExamPaperUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepuo.RemoveUserRandomExamIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tepuo *TkExamPaperUpdateOne) Select(field string, fields ...string) *TkExamPaperUpdateOne {
	tepuo.fields = append([]string{field}, fields...)
	return tepuo
}

// Save executes the query and returns the updated TkExamPaper entity.
func (tepuo *TkExamPaperUpdateOne) Save(ctx context.Context) (*TkExamPaper, error) {
	var (
		err  error
		node *TkExamPaper
	)
	tepuo.defaults()
	if len(tepuo.hooks) == 0 {
		node, err = tepuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tepuo.mutation = mutation
			node, err = tepuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tepuo.hooks) - 1; i >= 0; i-- {
			mut = tepuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tepuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tepuo *TkExamPaperUpdateOne) SaveX(ctx context.Context) *TkExamPaper {
	node, err := tepuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tepuo *TkExamPaperUpdateOne) Exec(ctx context.Context) error {
	_, err := tepuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tepuo *TkExamPaperUpdateOne) ExecX(ctx context.Context) {
	if err := tepuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tepuo *TkExamPaperUpdateOne) defaults() {
	if _, ok := tepuo.mutation.UpdatedAt(); !ok && !tepuo.mutation.UpdatedAtCleared() {
		v := tkexampaper.UpdateDefaultUpdatedAt()
		tepuo.mutation.SetUpdatedAt(v)
	}
}

func (tepuo *TkExamPaperUpdateOne) sqlSave(ctx context.Context) (_node *TkExamPaper, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampaper.Table,
			Columns: tkexampaper.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaper.FieldID,
			},
		},
	}
	id, ok := tepuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkExamPaper.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tepuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkexampaper.FieldID)
		for _, f := range fields {
			if !tkexampaper.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkexampaper.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tepuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tepuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaper.FieldUUID,
		})
	}
	if tepuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldCreatedAt,
		})
	}
	if value, ok := tepuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldUpdatedAt,
		})
	}
	if tepuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldUpdatedAt,
		})
	}
	if value, ok := tepuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldDeletedAt,
		})
	}
	if tepuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldDeletedAt,
		})
	}
	if value, ok := tepuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaper.FieldName,
		})
	}
	if value, ok := tepuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaper.FieldDesc,
		})
	}
	if value, ok := tepuo.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamQuestionType,
		})
	}
	if value, ok := tepuo.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamQuestionType,
		})
	}
	if value, ok := tepuo.mutation.ExamType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamType,
		})
	}
	if value, ok := tepuo.mutation.AddedExamType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamType,
		})
	}
	if value, ok := tepuo.mutation.Difficulty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldDifficulty,
		})
	}
	if value, ok := tepuo.mutation.AddedDifficulty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldDifficulty,
		})
	}
	if value, ok := tepuo.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldQuestionCount,
		})
	}
	if value, ok := tepuo.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldQuestionCount,
		})
	}
	if value, ok := tepuo.mutation.AnsweredUserCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldAnsweredUserCount,
		})
	}
	if value, ok := tepuo.mutation.AddedAnsweredUserCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldAnsweredUserCount,
		})
	}
	if value, ok := tepuo.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldScore,
		})
	}
	if value, ok := tepuo.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldScore,
		})
	}
	if value, ok := tepuo.mutation.PassScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldPassScore,
		})
	}
	if value, ok := tepuo.mutation.AddedPassScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldPassScore,
		})
	}
	if value, ok := tepuo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDuration,
		})
	}
	if value, ok := tepuo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDuration,
		})
	}
	if value, ok := tepuo.mutation.DurationType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDurationType,
		})
	}
	if value, ok := tepuo.mutation.AddedDurationType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDurationType,
		})
	}
	if value, ok := tepuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldStartAt,
		})
	}
	if tepuo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldStartAt,
		})
	}
	if value, ok := tepuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldEndAt,
		})
	}
	if tepuo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaper.FieldEndAt,
		})
	}
	if value, ok := tepuo.mutation.EnableStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldEnableStatus,
		})
	}
	if value, ok := tepuo.mutation.AddedEnableStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldEnableStatus,
		})
	}
	if tepuo.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.QuestionBankTable,
			Columns: []string{tkexampaper.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.QuestionBankTable,
			Columns: []string{tkexampaper.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepuo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.AdminTable,
			Columns: []string{tkexampaper.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.AdminTable,
			Columns: []string{tkexampaper.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepuo.mutation.ExamPartitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPartitionsTable,
			Columns: []string{tkexampaper.ExamPartitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.RemovedExamPartitionsIDs(); len(nodes) > 0 && !tepuo.mutation.ExamPartitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPartitionsTable,
			Columns: []string{tkexampaper.ExamPartitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.ExamPartitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPartitionsTable,
			Columns: []string{tkexampaper.ExamPartitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepuo.mutation.MakeUserQuestionExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.MakeUserQuestionExamTable,
			Columns: []string{tkexampaper.MakeUserQuestionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.RemovedMakeUserQuestionExamIDs(); len(nodes) > 0 && !tepuo.mutation.MakeUserQuestionExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.MakeUserQuestionExamTable,
			Columns: []string{tkexampaper.MakeUserQuestionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.MakeUserQuestionExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.MakeUserQuestionExamTable,
			Columns: []string{tkexampaper.MakeUserQuestionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepuo.mutation.UserExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserExamPapersTable,
			Columns: []string{tkexampaper.UserExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.RemovedUserExamPapersIDs(); len(nodes) > 0 && !tepuo.mutation.UserExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserExamPapersTable,
			Columns: []string{tkexampaper.UserExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.UserExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserExamPapersTable,
			Columns: []string{tkexampaper.UserExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepuo.mutation.CourseExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.CourseExamPapersTable,
			Columns: []string{tkexampaper.CourseExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.RemovedCourseExamPapersIDs(); len(nodes) > 0 && !tepuo.mutation.CourseExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.CourseExamPapersTable,
			Columns: []string{tkexampaper.CourseExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.CourseExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.CourseExamPapersTable,
			Columns: []string{tkexampaper.CourseExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepuo.mutation.ExamPaperRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPaperRecordsTable,
			Columns: []string{tkexampaper.ExamPaperRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.RemovedExamPaperRecordsIDs(); len(nodes) > 0 && !tepuo.mutation.ExamPaperRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPaperRecordsTable,
			Columns: []string{tkexampaper.ExamPaperRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.ExamPaperRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPaperRecordsTable,
			Columns: []string{tkexampaper.ExamPaperRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepuo.mutation.UserRandomExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserRandomExamTable,
			Columns: []string{tkexampaper.UserRandomExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserrandomexamrecode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.RemovedUserRandomExamIDs(); len(nodes) > 0 && !tepuo.mutation.UserRandomExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserRandomExamTable,
			Columns: []string{tkexampaper.UserRandomExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserrandomexamrecode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepuo.mutation.UserRandomExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserRandomExamTable,
			Columns: []string{tkexampaper.UserRandomExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserrandomexamrecode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkExamPaper{config: tepuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tepuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampaper.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

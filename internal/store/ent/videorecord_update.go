// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/user"
	"tkserver/internal/store/ent/videorecord"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoRecordUpdate is the builder for updating VideoRecord entities.
type VideoRecordUpdate struct {
	config
	hooks    []Hook
	mutation *VideoRecordMutation
}

// Where adds a new predicate for the VideoRecordUpdate builder.
func (vru *VideoRecordUpdate) Where(ps ...predicate.VideoRecord) *VideoRecordUpdate {
	vru.mutation.predicates = append(vru.mutation.predicates, ps...)
	return vru
}

// SetUUID sets the "uuid" field.
func (vru *VideoRecordUpdate) SetUUID(s string) *VideoRecordUpdate {
	vru.mutation.SetUUID(s)
	return vru
}

// SetUpdatedAt sets the "updated_at" field.
func (vru *VideoRecordUpdate) SetUpdatedAt(t time.Time) *VideoRecordUpdate {
	vru.mutation.SetUpdatedAt(t)
	return vru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vru *VideoRecordUpdate) ClearUpdatedAt() *VideoRecordUpdate {
	vru.mutation.ClearUpdatedAt()
	return vru
}

// SetDeletedAt sets the "deleted_at" field.
func (vru *VideoRecordUpdate) SetDeletedAt(t time.Time) *VideoRecordUpdate {
	vru.mutation.SetDeletedAt(t)
	return vru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vru *VideoRecordUpdate) SetNillableDeletedAt(t *time.Time) *VideoRecordUpdate {
	if t != nil {
		vru.SetDeletedAt(*t)
	}
	return vru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vru *VideoRecordUpdate) ClearDeletedAt() *VideoRecordUpdate {
	vru.mutation.ClearDeletedAt()
	return vru
}

// SetVideoName sets the "video_name" field.
func (vru *VideoRecordUpdate) SetVideoName(s string) *VideoRecordUpdate {
	vru.mutation.SetVideoName(s)
	return vru
}

// SetNillableVideoName sets the "video_name" field if the given value is not nil.
func (vru *VideoRecordUpdate) SetNillableVideoName(s *string) *VideoRecordUpdate {
	if s != nil {
		vru.SetVideoName(*s)
	}
	return vru
}

// SetViewTime sets the "view_time" field.
func (vru *VideoRecordUpdate) SetViewTime(u uint8) *VideoRecordUpdate {
	vru.mutation.ResetViewTime()
	vru.mutation.SetViewTime(u)
	return vru
}

// SetNillableViewTime sets the "view_time" field if the given value is not nil.
func (vru *VideoRecordUpdate) SetNillableViewTime(u *uint8) *VideoRecordUpdate {
	if u != nil {
		vru.SetViewTime(*u)
	}
	return vru
}

// AddViewTime adds u to the "view_time" field.
func (vru *VideoRecordUpdate) AddViewTime(u uint8) *VideoRecordUpdate {
	vru.mutation.AddViewTime(u)
	return vru
}

// ClearViewTime clears the value of the "view_time" field.
func (vru *VideoRecordUpdate) ClearViewTime() *VideoRecordUpdate {
	vru.mutation.ClearViewTime()
	return vru
}

// SetUserID sets the "user_id" field.
func (vru *VideoRecordUpdate) SetUserID(i int) *VideoRecordUpdate {
	vru.mutation.ResetUserID()
	vru.mutation.SetUserID(i)
	return vru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vru *VideoRecordUpdate) SetNillableUserID(i *int) *VideoRecordUpdate {
	if i != nil {
		vru.SetUserID(*i)
	}
	return vru
}

// ClearUserID clears the value of the "user_id" field.
func (vru *VideoRecordUpdate) ClearUserID() *VideoRecordUpdate {
	vru.mutation.ClearUserID()
	return vru
}

// SetSmallID sets the "small_id" field.
func (vru *VideoRecordUpdate) SetSmallID(i int) *VideoRecordUpdate {
	vru.mutation.ResetSmallID()
	vru.mutation.SetSmallID(i)
	return vru
}

// SetNillableSmallID sets the "small_id" field if the given value is not nil.
func (vru *VideoRecordUpdate) SetNillableSmallID(i *int) *VideoRecordUpdate {
	if i != nil {
		vru.SetSmallID(*i)
	}
	return vru
}

// ClearSmallID clears the value of the "small_id" field.
func (vru *VideoRecordUpdate) ClearSmallID() *VideoRecordUpdate {
	vru.mutation.ClearSmallID()
	return vru
}

// SetVideoTime sets the "video_time" field.
func (vru *VideoRecordUpdate) SetVideoTime(i int) *VideoRecordUpdate {
	vru.mutation.ResetVideoTime()
	vru.mutation.SetVideoTime(i)
	return vru
}

// SetNillableVideoTime sets the "video_time" field if the given value is not nil.
func (vru *VideoRecordUpdate) SetNillableVideoTime(i *int) *VideoRecordUpdate {
	if i != nil {
		vru.SetVideoTime(*i)
	}
	return vru
}

// AddVideoTime adds i to the "video_time" field.
func (vru *VideoRecordUpdate) AddVideoTime(i int) *VideoRecordUpdate {
	vru.mutation.AddVideoTime(i)
	return vru
}

// ClearVideoTime clears the value of the "video_time" field.
func (vru *VideoRecordUpdate) ClearVideoTime() *VideoRecordUpdate {
	vru.mutation.ClearVideoTime()
	return vru
}

// SetViewAt sets the "view_at" field.
func (vru *VideoRecordUpdate) SetViewAt(t time.Time) *VideoRecordUpdate {
	vru.mutation.SetViewAt(t)
	return vru
}

// SetNillableViewAt sets the "view_at" field if the given value is not nil.
func (vru *VideoRecordUpdate) SetNillableViewAt(t *time.Time) *VideoRecordUpdate {
	if t != nil {
		vru.SetViewAt(*t)
	}
	return vru
}

// ClearViewAt clears the value of the "view_at" field.
func (vru *VideoRecordUpdate) ClearViewAt() *VideoRecordUpdate {
	vru.mutation.ClearViewAt()
	return vru
}

// SetUser sets the "user" edge to the User entity.
func (vru *VideoRecordUpdate) SetUser(u *User) *VideoRecordUpdate {
	return vru.SetUserID(u.ID)
}

// SetSmallCourseID sets the "small_course" edge to the KcCourseSmallCategory entity by ID.
func (vru *VideoRecordUpdate) SetSmallCourseID(id int) *VideoRecordUpdate {
	vru.mutation.SetSmallCourseID(id)
	return vru
}

// SetNillableSmallCourseID sets the "small_course" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (vru *VideoRecordUpdate) SetNillableSmallCourseID(id *int) *VideoRecordUpdate {
	if id != nil {
		vru = vru.SetSmallCourseID(*id)
	}
	return vru
}

// SetSmallCourse sets the "small_course" edge to the KcCourseSmallCategory entity.
func (vru *VideoRecordUpdate) SetSmallCourse(k *KcCourseSmallCategory) *VideoRecordUpdate {
	return vru.SetSmallCourseID(k.ID)
}

// Mutation returns the VideoRecordMutation object of the builder.
func (vru *VideoRecordUpdate) Mutation() *VideoRecordMutation {
	return vru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vru *VideoRecordUpdate) ClearUser() *VideoRecordUpdate {
	vru.mutation.ClearUser()
	return vru
}

// ClearSmallCourse clears the "small_course" edge to the KcCourseSmallCategory entity.
func (vru *VideoRecordUpdate) ClearSmallCourse() *VideoRecordUpdate {
	vru.mutation.ClearSmallCourse()
	return vru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vru *VideoRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vru.defaults()
	if len(vru.hooks) == 0 {
		affected, err = vru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VideoRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vru.mutation = mutation
			affected, err = vru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vru.hooks) - 1; i >= 0; i-- {
			mut = vru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vru *VideoRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := vru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vru *VideoRecordUpdate) Exec(ctx context.Context) error {
	_, err := vru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vru *VideoRecordUpdate) ExecX(ctx context.Context) {
	if err := vru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vru *VideoRecordUpdate) defaults() {
	if _, ok := vru.mutation.UpdatedAt(); !ok && !vru.mutation.UpdatedAtCleared() {
		v := videorecord.UpdateDefaultUpdatedAt()
		vru.mutation.SetUpdatedAt(v)
	}
}

func (vru *VideoRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   videorecord.Table,
			Columns: videorecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: videorecord.FieldID,
			},
		},
	}
	if ps := vru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vru.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: videorecord.FieldUUID,
		})
	}
	if vru.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: videorecord.FieldCreatedAt,
		})
	}
	if value, ok := vru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldUpdatedAt,
		})
	}
	if vru.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: videorecord.FieldUpdatedAt,
		})
	}
	if value, ok := vru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldDeletedAt,
		})
	}
	if vru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: videorecord.FieldDeletedAt,
		})
	}
	if value, ok := vru.mutation.VideoName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: videorecord.FieldVideoName,
		})
	}
	if value, ok := vru.mutation.ViewTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: videorecord.FieldViewTime,
		})
	}
	if value, ok := vru.mutation.AddedViewTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: videorecord.FieldViewTime,
		})
	}
	if vru.mutation.ViewTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: videorecord.FieldViewTime,
		})
	}
	if value, ok := vru.mutation.VideoTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: videorecord.FieldVideoTime,
		})
	}
	if value, ok := vru.mutation.AddedVideoTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: videorecord.FieldVideoTime,
		})
	}
	if vru.mutation.VideoTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: videorecord.FieldVideoTime,
		})
	}
	if value, ok := vru.mutation.ViewAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldViewAt,
		})
	}
	if vru.mutation.ViewAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: videorecord.FieldViewAt,
		})
	}
	if vru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.UserTable,
			Columns: []string{videorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.UserTable,
			Columns: []string{videorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.SmallCourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.SmallCourseTable,
			Columns: []string{videorecord.SmallCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.SmallCourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.SmallCourseTable,
			Columns: []string{videorecord.SmallCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videorecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VideoRecordUpdateOne is the builder for updating a single VideoRecord entity.
type VideoRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoRecordMutation
}

// SetUUID sets the "uuid" field.
func (vruo *VideoRecordUpdateOne) SetUUID(s string) *VideoRecordUpdateOne {
	vruo.mutation.SetUUID(s)
	return vruo
}

// SetUpdatedAt sets the "updated_at" field.
func (vruo *VideoRecordUpdateOne) SetUpdatedAt(t time.Time) *VideoRecordUpdateOne {
	vruo.mutation.SetUpdatedAt(t)
	return vruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vruo *VideoRecordUpdateOne) ClearUpdatedAt() *VideoRecordUpdateOne {
	vruo.mutation.ClearUpdatedAt()
	return vruo
}

// SetDeletedAt sets the "deleted_at" field.
func (vruo *VideoRecordUpdateOne) SetDeletedAt(t time.Time) *VideoRecordUpdateOne {
	vruo.mutation.SetDeletedAt(t)
	return vruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vruo *VideoRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *VideoRecordUpdateOne {
	if t != nil {
		vruo.SetDeletedAt(*t)
	}
	return vruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vruo *VideoRecordUpdateOne) ClearDeletedAt() *VideoRecordUpdateOne {
	vruo.mutation.ClearDeletedAt()
	return vruo
}

// SetVideoName sets the "video_name" field.
func (vruo *VideoRecordUpdateOne) SetVideoName(s string) *VideoRecordUpdateOne {
	vruo.mutation.SetVideoName(s)
	return vruo
}

// SetNillableVideoName sets the "video_name" field if the given value is not nil.
func (vruo *VideoRecordUpdateOne) SetNillableVideoName(s *string) *VideoRecordUpdateOne {
	if s != nil {
		vruo.SetVideoName(*s)
	}
	return vruo
}

// SetViewTime sets the "view_time" field.
func (vruo *VideoRecordUpdateOne) SetViewTime(u uint8) *VideoRecordUpdateOne {
	vruo.mutation.ResetViewTime()
	vruo.mutation.SetViewTime(u)
	return vruo
}

// SetNillableViewTime sets the "view_time" field if the given value is not nil.
func (vruo *VideoRecordUpdateOne) SetNillableViewTime(u *uint8) *VideoRecordUpdateOne {
	if u != nil {
		vruo.SetViewTime(*u)
	}
	return vruo
}

// AddViewTime adds u to the "view_time" field.
func (vruo *VideoRecordUpdateOne) AddViewTime(u uint8) *VideoRecordUpdateOne {
	vruo.mutation.AddViewTime(u)
	return vruo
}

// ClearViewTime clears the value of the "view_time" field.
func (vruo *VideoRecordUpdateOne) ClearViewTime() *VideoRecordUpdateOne {
	vruo.mutation.ClearViewTime()
	return vruo
}

// SetUserID sets the "user_id" field.
func (vruo *VideoRecordUpdateOne) SetUserID(i int) *VideoRecordUpdateOne {
	vruo.mutation.ResetUserID()
	vruo.mutation.SetUserID(i)
	return vruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vruo *VideoRecordUpdateOne) SetNillableUserID(i *int) *VideoRecordUpdateOne {
	if i != nil {
		vruo.SetUserID(*i)
	}
	return vruo
}

// ClearUserID clears the value of the "user_id" field.
func (vruo *VideoRecordUpdateOne) ClearUserID() *VideoRecordUpdateOne {
	vruo.mutation.ClearUserID()
	return vruo
}

// SetSmallID sets the "small_id" field.
func (vruo *VideoRecordUpdateOne) SetSmallID(i int) *VideoRecordUpdateOne {
	vruo.mutation.ResetSmallID()
	vruo.mutation.SetSmallID(i)
	return vruo
}

// SetNillableSmallID sets the "small_id" field if the given value is not nil.
func (vruo *VideoRecordUpdateOne) SetNillableSmallID(i *int) *VideoRecordUpdateOne {
	if i != nil {
		vruo.SetSmallID(*i)
	}
	return vruo
}

// ClearSmallID clears the value of the "small_id" field.
func (vruo *VideoRecordUpdateOne) ClearSmallID() *VideoRecordUpdateOne {
	vruo.mutation.ClearSmallID()
	return vruo
}

// SetVideoTime sets the "video_time" field.
func (vruo *VideoRecordUpdateOne) SetVideoTime(i int) *VideoRecordUpdateOne {
	vruo.mutation.ResetVideoTime()
	vruo.mutation.SetVideoTime(i)
	return vruo
}

// SetNillableVideoTime sets the "video_time" field if the given value is not nil.
func (vruo *VideoRecordUpdateOne) SetNillableVideoTime(i *int) *VideoRecordUpdateOne {
	if i != nil {
		vruo.SetVideoTime(*i)
	}
	return vruo
}

// AddVideoTime adds i to the "video_time" field.
func (vruo *VideoRecordUpdateOne) AddVideoTime(i int) *VideoRecordUpdateOne {
	vruo.mutation.AddVideoTime(i)
	return vruo
}

// ClearVideoTime clears the value of the "video_time" field.
func (vruo *VideoRecordUpdateOne) ClearVideoTime() *VideoRecordUpdateOne {
	vruo.mutation.ClearVideoTime()
	return vruo
}

// SetViewAt sets the "view_at" field.
func (vruo *VideoRecordUpdateOne) SetViewAt(t time.Time) *VideoRecordUpdateOne {
	vruo.mutation.SetViewAt(t)
	return vruo
}

// SetNillableViewAt sets the "view_at" field if the given value is not nil.
func (vruo *VideoRecordUpdateOne) SetNillableViewAt(t *time.Time) *VideoRecordUpdateOne {
	if t != nil {
		vruo.SetViewAt(*t)
	}
	return vruo
}

// ClearViewAt clears the value of the "view_at" field.
func (vruo *VideoRecordUpdateOne) ClearViewAt() *VideoRecordUpdateOne {
	vruo.mutation.ClearViewAt()
	return vruo
}

// SetUser sets the "user" edge to the User entity.
func (vruo *VideoRecordUpdateOne) SetUser(u *User) *VideoRecordUpdateOne {
	return vruo.SetUserID(u.ID)
}

// SetSmallCourseID sets the "small_course" edge to the KcCourseSmallCategory entity by ID.
func (vruo *VideoRecordUpdateOne) SetSmallCourseID(id int) *VideoRecordUpdateOne {
	vruo.mutation.SetSmallCourseID(id)
	return vruo
}

// SetNillableSmallCourseID sets the "small_course" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (vruo *VideoRecordUpdateOne) SetNillableSmallCourseID(id *int) *VideoRecordUpdateOne {
	if id != nil {
		vruo = vruo.SetSmallCourseID(*id)
	}
	return vruo
}

// SetSmallCourse sets the "small_course" edge to the KcCourseSmallCategory entity.
func (vruo *VideoRecordUpdateOne) SetSmallCourse(k *KcCourseSmallCategory) *VideoRecordUpdateOne {
	return vruo.SetSmallCourseID(k.ID)
}

// Mutation returns the VideoRecordMutation object of the builder.
func (vruo *VideoRecordUpdateOne) Mutation() *VideoRecordMutation {
	return vruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vruo *VideoRecordUpdateOne) ClearUser() *VideoRecordUpdateOne {
	vruo.mutation.ClearUser()
	return vruo
}

// ClearSmallCourse clears the "small_course" edge to the KcCourseSmallCategory entity.
func (vruo *VideoRecordUpdateOne) ClearSmallCourse() *VideoRecordUpdateOne {
	vruo.mutation.ClearSmallCourse()
	return vruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vruo *VideoRecordUpdateOne) Select(field string, fields ...string) *VideoRecordUpdateOne {
	vruo.fields = append([]string{field}, fields...)
	return vruo
}

// Save executes the query and returns the updated VideoRecord entity.
func (vruo *VideoRecordUpdateOne) Save(ctx context.Context) (*VideoRecord, error) {
	var (
		err  error
		node *VideoRecord
	)
	vruo.defaults()
	if len(vruo.hooks) == 0 {
		node, err = vruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VideoRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vruo.mutation = mutation
			node, err = vruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vruo.hooks) - 1; i >= 0; i-- {
			mut = vruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vruo *VideoRecordUpdateOne) SaveX(ctx context.Context) *VideoRecord {
	node, err := vruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vruo *VideoRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := vruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vruo *VideoRecordUpdateOne) ExecX(ctx context.Context) {
	if err := vruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vruo *VideoRecordUpdateOne) defaults() {
	if _, ok := vruo.mutation.UpdatedAt(); !ok && !vruo.mutation.UpdatedAtCleared() {
		v := videorecord.UpdateDefaultUpdatedAt()
		vruo.mutation.SetUpdatedAt(v)
	}
}

func (vruo *VideoRecordUpdateOne) sqlSave(ctx context.Context) (_node *VideoRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   videorecord.Table,
			Columns: videorecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: videorecord.FieldID,
			},
		},
	}
	id, ok := vruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VideoRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videorecord.FieldID)
		for _, f := range fields {
			if !videorecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videorecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vruo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: videorecord.FieldUUID,
		})
	}
	if vruo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: videorecord.FieldCreatedAt,
		})
	}
	if value, ok := vruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldUpdatedAt,
		})
	}
	if vruo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: videorecord.FieldUpdatedAt,
		})
	}
	if value, ok := vruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldDeletedAt,
		})
	}
	if vruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: videorecord.FieldDeletedAt,
		})
	}
	if value, ok := vruo.mutation.VideoName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: videorecord.FieldVideoName,
		})
	}
	if value, ok := vruo.mutation.ViewTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: videorecord.FieldViewTime,
		})
	}
	if value, ok := vruo.mutation.AddedViewTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: videorecord.FieldViewTime,
		})
	}
	if vruo.mutation.ViewTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: videorecord.FieldViewTime,
		})
	}
	if value, ok := vruo.mutation.VideoTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: videorecord.FieldVideoTime,
		})
	}
	if value, ok := vruo.mutation.AddedVideoTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: videorecord.FieldVideoTime,
		})
	}
	if vruo.mutation.VideoTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: videorecord.FieldVideoTime,
		})
	}
	if value, ok := vruo.mutation.ViewAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldViewAt,
		})
	}
	if vruo.mutation.ViewAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: videorecord.FieldViewAt,
		})
	}
	if vruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.UserTable,
			Columns: []string{videorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.UserTable,
			Columns: []string{videorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.SmallCourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.SmallCourseTable,
			Columns: []string{videorecord.SmallCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.SmallCourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.SmallCourseTable,
			Columns: []string{videorecord.SmallCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VideoRecord{config: vruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videorecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

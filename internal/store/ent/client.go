// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"tkserver/internal/store/ent/migrate"

	"tkserver/internal/store/ent/activity"
	"tkserver/internal/store/ent/activityapplyinfo"
	"tkserver/internal/store/ent/activitytype"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/adminloginlog"
	"tkserver/internal/store/ent/adminoperationlog"
	"tkserver/internal/store/ent/advertise"
	"tkserver/internal/store/ent/appagreement"
	"tkserver/internal/store/ent/appversion"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/city"
	"tkserver/internal/store/ent/collection"
	"tkserver/internal/store/ent/hotsearch"
	"tkserver/internal/store/ent/importtask"
	"tkserver/internal/store/ent/informationclassify"
	"tkserver/internal/store/ent/itemcategory"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kcclassteacher"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursechapter"
	"tkserver/internal/store/ent/kccoursesection"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kccourseteacher"
	"tkserver/internal/store/ent/kccoursevideo"
	"tkserver/internal/store/ent/kcsmallcategoryattachment"
	"tkserver/internal/store/ent/kcsmallcategoryexampaper"
	"tkserver/internal/store/ent/kcsmallcategoryquestion"
	"tkserver/internal/store/ent/kcuserclass"
	"tkserver/internal/store/ent/kcusercourse"
	"tkserver/internal/store/ent/kcvideouploadtask"
	"tkserver/internal/store/ent/major"
	"tkserver/internal/store/ent/majordetail"
	"tkserver/internal/store/ent/majordetailtag"
	"tkserver/internal/store/ent/makeuserquestionrecord"
	"tkserver/internal/store/ent/message"
	"tkserver/internal/store/ent/messagetype"
	"tkserver/internal/store/ent/permission"
	"tkserver/internal/store/ent/role"
	"tkserver/internal/store/ent/rolepermission"
	"tkserver/internal/store/ent/shareposter"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/teachertag"
	"tkserver/internal/store/ent/tkchapter"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkexampaperpartition"
	"tkserver/internal/store/ent/tkexampaperpartitionscore"
	"tkserver/internal/store/ent/tkexampapersimulation"
	"tkserver/internal/store/ent/tkexampartitionquestionlink"
	"tkserver/internal/store/ent/tkexamquestiontype"
	"tkserver/internal/store/ent/tkknowledgepoint"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionansweroption"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkquestionerrorfeedback"
	"tkserver/internal/store/ent/tkquestionsection"
	"tkserver/internal/store/ent/tksection"
	"tkserver/internal/store/ent/tkuserexamscorerecord"
	"tkserver/internal/store/ent/tkuserquestionbankrecord"
	"tkserver/internal/store/ent/tkuserquestionrecord"
	"tkserver/internal/store/ent/tkuserrandomexamrecode"
	"tkserver/internal/store/ent/tkusersimulationteachermark"
	"tkserver/internal/store/ent/tkuserwrongquestionrecode"
	"tkserver/internal/store/ent/user"
	"tkserver/internal/store/ent/useraskanswer"
	"tkserver/internal/store/ent/useraskanswerattachment"
	"tkserver/internal/store/ent/usercourseappraise"
	"tkserver/internal/store/ent/userloginlog"
	"tkserver/internal/store/ent/videorecord"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// ActivityApplyInfo is the client for interacting with the ActivityApplyInfo builders.
	ActivityApplyInfo *ActivityApplyInfoClient
	// ActivityType is the client for interacting with the ActivityType builders.
	ActivityType *ActivityTypeClient
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// AdminLoginLog is the client for interacting with the AdminLoginLog builders.
	AdminLoginLog *AdminLoginLogClient
	// AdminOperationLog is the client for interacting with the AdminOperationLog builders.
	AdminOperationLog *AdminOperationLogClient
	// Advertise is the client for interacting with the Advertise builders.
	Advertise *AdvertiseClient
	// AppAgreement is the client for interacting with the AppAgreement builders.
	AppAgreement *AppAgreementClient
	// AppVersion is the client for interacting with the AppVersion builders.
	AppVersion *AppVersionClient
	// Attachment is the client for interacting with the Attachment builders.
	Attachment *AttachmentClient
	// City is the client for interacting with the City builders.
	City *CityClient
	// Collection is the client for interacting with the Collection builders.
	Collection *CollectionClient
	// HotSearch is the client for interacting with the HotSearch builders.
	HotSearch *HotSearchClient
	// ImportTask is the client for interacting with the ImportTask builders.
	ImportTask *ImportTaskClient
	// InformationClassify is the client for interacting with the InformationClassify builders.
	InformationClassify *InformationClassifyClient
	// ItemCategory is the client for interacting with the ItemCategory builders.
	ItemCategory *ItemCategoryClient
	// KcClass is the client for interacting with the KcClass builders.
	KcClass *KcClassClient
	// KcClassTeacher is the client for interacting with the KcClassTeacher builders.
	KcClassTeacher *KcClassTeacherClient
	// KcCourse is the client for interacting with the KcCourse builders.
	KcCourse *KcCourseClient
	// KcCourseChapter is the client for interacting with the KcCourseChapter builders.
	KcCourseChapter *KcCourseChapterClient
	// KcCourseSection is the client for interacting with the KcCourseSection builders.
	KcCourseSection *KcCourseSectionClient
	// KcCourseSmallCategory is the client for interacting with the KcCourseSmallCategory builders.
	KcCourseSmallCategory *KcCourseSmallCategoryClient
	// KcCourseTeacher is the client for interacting with the KcCourseTeacher builders.
	KcCourseTeacher *KcCourseTeacherClient
	// KcCourseVideo is the client for interacting with the KcCourseVideo builders.
	KcCourseVideo *KcCourseVideoClient
	// KcSmallCategoryAttachment is the client for interacting with the KcSmallCategoryAttachment builders.
	KcSmallCategoryAttachment *KcSmallCategoryAttachmentClient
	// KcSmallCategoryExamPaper is the client for interacting with the KcSmallCategoryExamPaper builders.
	KcSmallCategoryExamPaper *KcSmallCategoryExamPaperClient
	// KcSmallCategoryQuestion is the client for interacting with the KcSmallCategoryQuestion builders.
	KcSmallCategoryQuestion *KcSmallCategoryQuestionClient
	// KcUserClass is the client for interacting with the KcUserClass builders.
	KcUserClass *KcUserClassClient
	// KcUserCourse is the client for interacting with the KcUserCourse builders.
	KcUserCourse *KcUserCourseClient
	// KcVideoUploadTask is the client for interacting with the KcVideoUploadTask builders.
	KcVideoUploadTask *KcVideoUploadTaskClient
	// Major is the client for interacting with the Major builders.
	Major *MajorClient
	// MajorDetail is the client for interacting with the MajorDetail builders.
	MajorDetail *MajorDetailClient
	// MajorDetailTag is the client for interacting with the MajorDetailTag builders.
	MajorDetailTag *MajorDetailTagClient
	// MakeUserQuestionRecord is the client for interacting with the MakeUserQuestionRecord builders.
	MakeUserQuestionRecord *MakeUserQuestionRecordClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// MessageType is the client for interacting with the MessageType builders.
	MessageType *MessageTypeClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// RolePermission is the client for interacting with the RolePermission builders.
	RolePermission *RolePermissionClient
	// SharePoster is the client for interacting with the SharePoster builders.
	SharePoster *SharePosterClient
	// Teacher is the client for interacting with the Teacher builders.
	Teacher *TeacherClient
	// TeacherTag is the client for interacting with the TeacherTag builders.
	TeacherTag *TeacherTagClient
	// TkChapter is the client for interacting with the TkChapter builders.
	TkChapter *TkChapterClient
	// TkExamPaper is the client for interacting with the TkExamPaper builders.
	TkExamPaper *TkExamPaperClient
	// TkExamPaperPartition is the client for interacting with the TkExamPaperPartition builders.
	TkExamPaperPartition *TkExamPaperPartitionClient
	// TkExamPaperPartitionScore is the client for interacting with the TkExamPaperPartitionScore builders.
	TkExamPaperPartitionScore *TkExamPaperPartitionScoreClient
	// TkExamPaperSimulation is the client for interacting with the TkExamPaperSimulation builders.
	TkExamPaperSimulation *TkExamPaperSimulationClient
	// TkExamPartitionQuestionLink is the client for interacting with the TkExamPartitionQuestionLink builders.
	TkExamPartitionQuestionLink *TkExamPartitionQuestionLinkClient
	// TkExamQuestionType is the client for interacting with the TkExamQuestionType builders.
	TkExamQuestionType *TkExamQuestionTypeClient
	// TkKnowledgePoint is the client for interacting with the TkKnowledgePoint builders.
	TkKnowledgePoint *TkKnowledgePointClient
	// TkQuestion is the client for interacting with the TkQuestion builders.
	TkQuestion *TkQuestionClient
	// TkQuestionAnswerOption is the client for interacting with the TkQuestionAnswerOption builders.
	TkQuestionAnswerOption *TkQuestionAnswerOptionClient
	// TkQuestionBank is the client for interacting with the TkQuestionBank builders.
	TkQuestionBank *TkQuestionBankClient
	// TkQuestionErrorFeedback is the client for interacting with the TkQuestionErrorFeedback builders.
	TkQuestionErrorFeedback *TkQuestionErrorFeedbackClient
	// TkQuestionSection is the client for interacting with the TkQuestionSection builders.
	TkQuestionSection *TkQuestionSectionClient
	// TkSection is the client for interacting with the TkSection builders.
	TkSection *TkSectionClient
	// TkUserExamScoreRecord is the client for interacting with the TkUserExamScoreRecord builders.
	TkUserExamScoreRecord *TkUserExamScoreRecordClient
	// TkUserQuestionBankRecord is the client for interacting with the TkUserQuestionBankRecord builders.
	TkUserQuestionBankRecord *TkUserQuestionBankRecordClient
	// TkUserQuestionRecord is the client for interacting with the TkUserQuestionRecord builders.
	TkUserQuestionRecord *TkUserQuestionRecordClient
	// TkUserRandomExamRecode is the client for interacting with the TkUserRandomExamRecode builders.
	TkUserRandomExamRecode *TkUserRandomExamRecodeClient
	// TkUserSimulationTeacherMark is the client for interacting with the TkUserSimulationTeacherMark builders.
	TkUserSimulationTeacherMark *TkUserSimulationTeacherMarkClient
	// TkUserWrongQuestionRecode is the client for interacting with the TkUserWrongQuestionRecode builders.
	TkUserWrongQuestionRecode *TkUserWrongQuestionRecodeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserAskAnswer is the client for interacting with the UserAskAnswer builders.
	UserAskAnswer *UserAskAnswerClient
	// UserAskAnswerAttachment is the client for interacting with the UserAskAnswerAttachment builders.
	UserAskAnswerAttachment *UserAskAnswerAttachmentClient
	// UserCourseAppraise is the client for interacting with the UserCourseAppraise builders.
	UserCourseAppraise *UserCourseAppraiseClient
	// UserLoginLog is the client for interacting with the UserLoginLog builders.
	UserLoginLog *UserLoginLogClient
	// VideoRecord is the client for interacting with the VideoRecord builders.
	VideoRecord *VideoRecordClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.ActivityApplyInfo = NewActivityApplyInfoClient(c.config)
	c.ActivityType = NewActivityTypeClient(c.config)
	c.Admin = NewAdminClient(c.config)
	c.AdminLoginLog = NewAdminLoginLogClient(c.config)
	c.AdminOperationLog = NewAdminOperationLogClient(c.config)
	c.Advertise = NewAdvertiseClient(c.config)
	c.AppAgreement = NewAppAgreementClient(c.config)
	c.AppVersion = NewAppVersionClient(c.config)
	c.Attachment = NewAttachmentClient(c.config)
	c.City = NewCityClient(c.config)
	c.Collection = NewCollectionClient(c.config)
	c.HotSearch = NewHotSearchClient(c.config)
	c.ImportTask = NewImportTaskClient(c.config)
	c.InformationClassify = NewInformationClassifyClient(c.config)
	c.ItemCategory = NewItemCategoryClient(c.config)
	c.KcClass = NewKcClassClient(c.config)
	c.KcClassTeacher = NewKcClassTeacherClient(c.config)
	c.KcCourse = NewKcCourseClient(c.config)
	c.KcCourseChapter = NewKcCourseChapterClient(c.config)
	c.KcCourseSection = NewKcCourseSectionClient(c.config)
	c.KcCourseSmallCategory = NewKcCourseSmallCategoryClient(c.config)
	c.KcCourseTeacher = NewKcCourseTeacherClient(c.config)
	c.KcCourseVideo = NewKcCourseVideoClient(c.config)
	c.KcSmallCategoryAttachment = NewKcSmallCategoryAttachmentClient(c.config)
	c.KcSmallCategoryExamPaper = NewKcSmallCategoryExamPaperClient(c.config)
	c.KcSmallCategoryQuestion = NewKcSmallCategoryQuestionClient(c.config)
	c.KcUserClass = NewKcUserClassClient(c.config)
	c.KcUserCourse = NewKcUserCourseClient(c.config)
	c.KcVideoUploadTask = NewKcVideoUploadTaskClient(c.config)
	c.Major = NewMajorClient(c.config)
	c.MajorDetail = NewMajorDetailClient(c.config)
	c.MajorDetailTag = NewMajorDetailTagClient(c.config)
	c.MakeUserQuestionRecord = NewMakeUserQuestionRecordClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.MessageType = NewMessageTypeClient(c.config)
	c.Permission = NewPermissionClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.RolePermission = NewRolePermissionClient(c.config)
	c.SharePoster = NewSharePosterClient(c.config)
	c.Teacher = NewTeacherClient(c.config)
	c.TeacherTag = NewTeacherTagClient(c.config)
	c.TkChapter = NewTkChapterClient(c.config)
	c.TkExamPaper = NewTkExamPaperClient(c.config)
	c.TkExamPaperPartition = NewTkExamPaperPartitionClient(c.config)
	c.TkExamPaperPartitionScore = NewTkExamPaperPartitionScoreClient(c.config)
	c.TkExamPaperSimulation = NewTkExamPaperSimulationClient(c.config)
	c.TkExamPartitionQuestionLink = NewTkExamPartitionQuestionLinkClient(c.config)
	c.TkExamQuestionType = NewTkExamQuestionTypeClient(c.config)
	c.TkKnowledgePoint = NewTkKnowledgePointClient(c.config)
	c.TkQuestion = NewTkQuestionClient(c.config)
	c.TkQuestionAnswerOption = NewTkQuestionAnswerOptionClient(c.config)
	c.TkQuestionBank = NewTkQuestionBankClient(c.config)
	c.TkQuestionErrorFeedback = NewTkQuestionErrorFeedbackClient(c.config)
	c.TkQuestionSection = NewTkQuestionSectionClient(c.config)
	c.TkSection = NewTkSectionClient(c.config)
	c.TkUserExamScoreRecord = NewTkUserExamScoreRecordClient(c.config)
	c.TkUserQuestionBankRecord = NewTkUserQuestionBankRecordClient(c.config)
	c.TkUserQuestionRecord = NewTkUserQuestionRecordClient(c.config)
	c.TkUserRandomExamRecode = NewTkUserRandomExamRecodeClient(c.config)
	c.TkUserSimulationTeacherMark = NewTkUserSimulationTeacherMarkClient(c.config)
	c.TkUserWrongQuestionRecode = NewTkUserWrongQuestionRecodeClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserAskAnswer = NewUserAskAnswerClient(c.config)
	c.UserAskAnswerAttachment = NewUserAskAnswerAttachmentClient(c.config)
	c.UserCourseAppraise = NewUserCourseAppraiseClient(c.config)
	c.UserLoginLog = NewUserLoginLogClient(c.config)
	c.VideoRecord = NewVideoRecordClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                         ctx,
		config:                      cfg,
		Activity:                    NewActivityClient(cfg),
		ActivityApplyInfo:           NewActivityApplyInfoClient(cfg),
		ActivityType:                NewActivityTypeClient(cfg),
		Admin:                       NewAdminClient(cfg),
		AdminLoginLog:               NewAdminLoginLogClient(cfg),
		AdminOperationLog:           NewAdminOperationLogClient(cfg),
		Advertise:                   NewAdvertiseClient(cfg),
		AppAgreement:                NewAppAgreementClient(cfg),
		AppVersion:                  NewAppVersionClient(cfg),
		Attachment:                  NewAttachmentClient(cfg),
		City:                        NewCityClient(cfg),
		Collection:                  NewCollectionClient(cfg),
		HotSearch:                   NewHotSearchClient(cfg),
		ImportTask:                  NewImportTaskClient(cfg),
		InformationClassify:         NewInformationClassifyClient(cfg),
		ItemCategory:                NewItemCategoryClient(cfg),
		KcClass:                     NewKcClassClient(cfg),
		KcClassTeacher:              NewKcClassTeacherClient(cfg),
		KcCourse:                    NewKcCourseClient(cfg),
		KcCourseChapter:             NewKcCourseChapterClient(cfg),
		KcCourseSection:             NewKcCourseSectionClient(cfg),
		KcCourseSmallCategory:       NewKcCourseSmallCategoryClient(cfg),
		KcCourseTeacher:             NewKcCourseTeacherClient(cfg),
		KcCourseVideo:               NewKcCourseVideoClient(cfg),
		KcSmallCategoryAttachment:   NewKcSmallCategoryAttachmentClient(cfg),
		KcSmallCategoryExamPaper:    NewKcSmallCategoryExamPaperClient(cfg),
		KcSmallCategoryQuestion:     NewKcSmallCategoryQuestionClient(cfg),
		KcUserClass:                 NewKcUserClassClient(cfg),
		KcUserCourse:                NewKcUserCourseClient(cfg),
		KcVideoUploadTask:           NewKcVideoUploadTaskClient(cfg),
		Major:                       NewMajorClient(cfg),
		MajorDetail:                 NewMajorDetailClient(cfg),
		MajorDetailTag:              NewMajorDetailTagClient(cfg),
		MakeUserQuestionRecord:      NewMakeUserQuestionRecordClient(cfg),
		Message:                     NewMessageClient(cfg),
		MessageType:                 NewMessageTypeClient(cfg),
		Permission:                  NewPermissionClient(cfg),
		Role:                        NewRoleClient(cfg),
		RolePermission:              NewRolePermissionClient(cfg),
		SharePoster:                 NewSharePosterClient(cfg),
		Teacher:                     NewTeacherClient(cfg),
		TeacherTag:                  NewTeacherTagClient(cfg),
		TkChapter:                   NewTkChapterClient(cfg),
		TkExamPaper:                 NewTkExamPaperClient(cfg),
		TkExamPaperPartition:        NewTkExamPaperPartitionClient(cfg),
		TkExamPaperPartitionScore:   NewTkExamPaperPartitionScoreClient(cfg),
		TkExamPaperSimulation:       NewTkExamPaperSimulationClient(cfg),
		TkExamPartitionQuestionLink: NewTkExamPartitionQuestionLinkClient(cfg),
		TkExamQuestionType:          NewTkExamQuestionTypeClient(cfg),
		TkKnowledgePoint:            NewTkKnowledgePointClient(cfg),
		TkQuestion:                  NewTkQuestionClient(cfg),
		TkQuestionAnswerOption:      NewTkQuestionAnswerOptionClient(cfg),
		TkQuestionBank:              NewTkQuestionBankClient(cfg),
		TkQuestionErrorFeedback:     NewTkQuestionErrorFeedbackClient(cfg),
		TkQuestionSection:           NewTkQuestionSectionClient(cfg),
		TkSection:                   NewTkSectionClient(cfg),
		TkUserExamScoreRecord:       NewTkUserExamScoreRecordClient(cfg),
		TkUserQuestionBankRecord:    NewTkUserQuestionBankRecordClient(cfg),
		TkUserQuestionRecord:        NewTkUserQuestionRecordClient(cfg),
		TkUserRandomExamRecode:      NewTkUserRandomExamRecodeClient(cfg),
		TkUserSimulationTeacherMark: NewTkUserSimulationTeacherMarkClient(cfg),
		TkUserWrongQuestionRecode:   NewTkUserWrongQuestionRecodeClient(cfg),
		User:                        NewUserClient(cfg),
		UserAskAnswer:               NewUserAskAnswerClient(cfg),
		UserAskAnswerAttachment:     NewUserAskAnswerAttachmentClient(cfg),
		UserCourseAppraise:          NewUserCourseAppraiseClient(cfg),
		UserLoginLog:                NewUserLoginLogClient(cfg),
		VideoRecord:                 NewVideoRecordClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                      cfg,
		Activity:                    NewActivityClient(cfg),
		ActivityApplyInfo:           NewActivityApplyInfoClient(cfg),
		ActivityType:                NewActivityTypeClient(cfg),
		Admin:                       NewAdminClient(cfg),
		AdminLoginLog:               NewAdminLoginLogClient(cfg),
		AdminOperationLog:           NewAdminOperationLogClient(cfg),
		Advertise:                   NewAdvertiseClient(cfg),
		AppAgreement:                NewAppAgreementClient(cfg),
		AppVersion:                  NewAppVersionClient(cfg),
		Attachment:                  NewAttachmentClient(cfg),
		City:                        NewCityClient(cfg),
		Collection:                  NewCollectionClient(cfg),
		HotSearch:                   NewHotSearchClient(cfg),
		ImportTask:                  NewImportTaskClient(cfg),
		InformationClassify:         NewInformationClassifyClient(cfg),
		ItemCategory:                NewItemCategoryClient(cfg),
		KcClass:                     NewKcClassClient(cfg),
		KcClassTeacher:              NewKcClassTeacherClient(cfg),
		KcCourse:                    NewKcCourseClient(cfg),
		KcCourseChapter:             NewKcCourseChapterClient(cfg),
		KcCourseSection:             NewKcCourseSectionClient(cfg),
		KcCourseSmallCategory:       NewKcCourseSmallCategoryClient(cfg),
		KcCourseTeacher:             NewKcCourseTeacherClient(cfg),
		KcCourseVideo:               NewKcCourseVideoClient(cfg),
		KcSmallCategoryAttachment:   NewKcSmallCategoryAttachmentClient(cfg),
		KcSmallCategoryExamPaper:    NewKcSmallCategoryExamPaperClient(cfg),
		KcSmallCategoryQuestion:     NewKcSmallCategoryQuestionClient(cfg),
		KcUserClass:                 NewKcUserClassClient(cfg),
		KcUserCourse:                NewKcUserCourseClient(cfg),
		KcVideoUploadTask:           NewKcVideoUploadTaskClient(cfg),
		Major:                       NewMajorClient(cfg),
		MajorDetail:                 NewMajorDetailClient(cfg),
		MajorDetailTag:              NewMajorDetailTagClient(cfg),
		MakeUserQuestionRecord:      NewMakeUserQuestionRecordClient(cfg),
		Message:                     NewMessageClient(cfg),
		MessageType:                 NewMessageTypeClient(cfg),
		Permission:                  NewPermissionClient(cfg),
		Role:                        NewRoleClient(cfg),
		RolePermission:              NewRolePermissionClient(cfg),
		SharePoster:                 NewSharePosterClient(cfg),
		Teacher:                     NewTeacherClient(cfg),
		TeacherTag:                  NewTeacherTagClient(cfg),
		TkChapter:                   NewTkChapterClient(cfg),
		TkExamPaper:                 NewTkExamPaperClient(cfg),
		TkExamPaperPartition:        NewTkExamPaperPartitionClient(cfg),
		TkExamPaperPartitionScore:   NewTkExamPaperPartitionScoreClient(cfg),
		TkExamPaperSimulation:       NewTkExamPaperSimulationClient(cfg),
		TkExamPartitionQuestionLink: NewTkExamPartitionQuestionLinkClient(cfg),
		TkExamQuestionType:          NewTkExamQuestionTypeClient(cfg),
		TkKnowledgePoint:            NewTkKnowledgePointClient(cfg),
		TkQuestion:                  NewTkQuestionClient(cfg),
		TkQuestionAnswerOption:      NewTkQuestionAnswerOptionClient(cfg),
		TkQuestionBank:              NewTkQuestionBankClient(cfg),
		TkQuestionErrorFeedback:     NewTkQuestionErrorFeedbackClient(cfg),
		TkQuestionSection:           NewTkQuestionSectionClient(cfg),
		TkSection:                   NewTkSectionClient(cfg),
		TkUserExamScoreRecord:       NewTkUserExamScoreRecordClient(cfg),
		TkUserQuestionBankRecord:    NewTkUserQuestionBankRecordClient(cfg),
		TkUserQuestionRecord:        NewTkUserQuestionRecordClient(cfg),
		TkUserRandomExamRecode:      NewTkUserRandomExamRecodeClient(cfg),
		TkUserSimulationTeacherMark: NewTkUserSimulationTeacherMarkClient(cfg),
		TkUserWrongQuestionRecode:   NewTkUserWrongQuestionRecodeClient(cfg),
		User:                        NewUserClient(cfg),
		UserAskAnswer:               NewUserAskAnswerClient(cfg),
		UserAskAnswerAttachment:     NewUserAskAnswerAttachmentClient(cfg),
		UserCourseAppraise:          NewUserCourseAppraiseClient(cfg),
		UserLoginLog:                NewUserLoginLogClient(cfg),
		VideoRecord:                 NewVideoRecordClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Activity.Use(hooks...)
	c.ActivityApplyInfo.Use(hooks...)
	c.ActivityType.Use(hooks...)
	c.Admin.Use(hooks...)
	c.AdminLoginLog.Use(hooks...)
	c.AdminOperationLog.Use(hooks...)
	c.Advertise.Use(hooks...)
	c.AppAgreement.Use(hooks...)
	c.AppVersion.Use(hooks...)
	c.Attachment.Use(hooks...)
	c.City.Use(hooks...)
	c.Collection.Use(hooks...)
	c.HotSearch.Use(hooks...)
	c.ImportTask.Use(hooks...)
	c.InformationClassify.Use(hooks...)
	c.ItemCategory.Use(hooks...)
	c.KcClass.Use(hooks...)
	c.KcClassTeacher.Use(hooks...)
	c.KcCourse.Use(hooks...)
	c.KcCourseChapter.Use(hooks...)
	c.KcCourseSection.Use(hooks...)
	c.KcCourseSmallCategory.Use(hooks...)
	c.KcCourseTeacher.Use(hooks...)
	c.KcCourseVideo.Use(hooks...)
	c.KcSmallCategoryAttachment.Use(hooks...)
	c.KcSmallCategoryExamPaper.Use(hooks...)
	c.KcSmallCategoryQuestion.Use(hooks...)
	c.KcUserClass.Use(hooks...)
	c.KcUserCourse.Use(hooks...)
	c.KcVideoUploadTask.Use(hooks...)
	c.Major.Use(hooks...)
	c.MajorDetail.Use(hooks...)
	c.MajorDetailTag.Use(hooks...)
	c.MakeUserQuestionRecord.Use(hooks...)
	c.Message.Use(hooks...)
	c.MessageType.Use(hooks...)
	c.Permission.Use(hooks...)
	c.Role.Use(hooks...)
	c.RolePermission.Use(hooks...)
	c.SharePoster.Use(hooks...)
	c.Teacher.Use(hooks...)
	c.TeacherTag.Use(hooks...)
	c.TkChapter.Use(hooks...)
	c.TkExamPaper.Use(hooks...)
	c.TkExamPaperPartition.Use(hooks...)
	c.TkExamPaperPartitionScore.Use(hooks...)
	c.TkExamPaperSimulation.Use(hooks...)
	c.TkExamPartitionQuestionLink.Use(hooks...)
	c.TkExamQuestionType.Use(hooks...)
	c.TkKnowledgePoint.Use(hooks...)
	c.TkQuestion.Use(hooks...)
	c.TkQuestionAnswerOption.Use(hooks...)
	c.TkQuestionBank.Use(hooks...)
	c.TkQuestionErrorFeedback.Use(hooks...)
	c.TkQuestionSection.Use(hooks...)
	c.TkSection.Use(hooks...)
	c.TkUserExamScoreRecord.Use(hooks...)
	c.TkUserQuestionBankRecord.Use(hooks...)
	c.TkUserQuestionRecord.Use(hooks...)
	c.TkUserRandomExamRecode.Use(hooks...)
	c.TkUserSimulationTeacherMark.Use(hooks...)
	c.TkUserWrongQuestionRecode.Use(hooks...)
	c.User.Use(hooks...)
	c.UserAskAnswer.Use(hooks...)
	c.UserAskAnswerAttachment.Use(hooks...)
	c.UserCourseAppraise.Use(hooks...)
	c.UserLoginLog.Use(hooks...)
	c.VideoRecord.Use(hooks...)
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Create returns a create builder for Activity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id int) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityClient) DeleteOneID(id int) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{
		config: c.config,
	}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id int) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id int) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivityType queries the activity_type edge of a Activity.
func (c *ActivityClient) QueryActivityType(a *Activity) *ActivityTypeQuery {
	query := &ActivityTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(activitytype.Table, activitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.ActivityTypeTable, activity.ActivityTypeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplyActivities queries the apply_activities edge of a Activity.
func (c *ActivityClient) QueryApplyActivities(a *Activity) *ActivityApplyInfoQuery {
	query := &ActivityApplyInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(activityapplyinfo.Table, activityapplyinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activity.ApplyActivitiesTable, activity.ApplyActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a Activity.
func (c *ActivityClient) QueryAdmin(a *Activity) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.AdminTable, activity.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	hooks := c.hooks.Activity
	return append(hooks[:len(hooks):len(hooks)], activity.Hooks[:]...)
}

// ActivityApplyInfoClient is a client for the ActivityApplyInfo schema.
type ActivityApplyInfoClient struct {
	config
}

// NewActivityApplyInfoClient returns a client for the ActivityApplyInfo from the given config.
func NewActivityApplyInfoClient(c config) *ActivityApplyInfoClient {
	return &ActivityApplyInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activityapplyinfo.Hooks(f(g(h())))`.
func (c *ActivityApplyInfoClient) Use(hooks ...Hook) {
	c.hooks.ActivityApplyInfo = append(c.hooks.ActivityApplyInfo, hooks...)
}

// Create returns a create builder for ActivityApplyInfo.
func (c *ActivityApplyInfoClient) Create() *ActivityApplyInfoCreate {
	mutation := newActivityApplyInfoMutation(c.config, OpCreate)
	return &ActivityApplyInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActivityApplyInfo entities.
func (c *ActivityApplyInfoClient) CreateBulk(builders ...*ActivityApplyInfoCreate) *ActivityApplyInfoCreateBulk {
	return &ActivityApplyInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActivityApplyInfo.
func (c *ActivityApplyInfoClient) Update() *ActivityApplyInfoUpdate {
	mutation := newActivityApplyInfoMutation(c.config, OpUpdate)
	return &ActivityApplyInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityApplyInfoClient) UpdateOne(aai *ActivityApplyInfo) *ActivityApplyInfoUpdateOne {
	mutation := newActivityApplyInfoMutation(c.config, OpUpdateOne, withActivityApplyInfo(aai))
	return &ActivityApplyInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityApplyInfoClient) UpdateOneID(id int) *ActivityApplyInfoUpdateOne {
	mutation := newActivityApplyInfoMutation(c.config, OpUpdateOne, withActivityApplyInfoID(id))
	return &ActivityApplyInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActivityApplyInfo.
func (c *ActivityApplyInfoClient) Delete() *ActivityApplyInfoDelete {
	mutation := newActivityApplyInfoMutation(c.config, OpDelete)
	return &ActivityApplyInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityApplyInfoClient) DeleteOne(aai *ActivityApplyInfo) *ActivityApplyInfoDeleteOne {
	return c.DeleteOneID(aai.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityApplyInfoClient) DeleteOneID(id int) *ActivityApplyInfoDeleteOne {
	builder := c.Delete().Where(activityapplyinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityApplyInfoDeleteOne{builder}
}

// Query returns a query builder for ActivityApplyInfo.
func (c *ActivityApplyInfoClient) Query() *ActivityApplyInfoQuery {
	return &ActivityApplyInfoQuery{
		config: c.config,
	}
}

// Get returns a ActivityApplyInfo entity by its id.
func (c *ActivityApplyInfoClient) Get(ctx context.Context, id int) (*ActivityApplyInfo, error) {
	return c.Query().Where(activityapplyinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityApplyInfoClient) GetX(ctx context.Context, id int) *ActivityApplyInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivity queries the activity edge of a ActivityApplyInfo.
func (c *ActivityApplyInfoClient) QueryActivity(aai *ActivityApplyInfo) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activityapplyinfo.Table, activityapplyinfo.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activityapplyinfo.ActivityTable, activityapplyinfo.ActivityColumn),
		)
		fromV = sqlgraph.Neighbors(aai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityApplyInfoClient) Hooks() []Hook {
	hooks := c.hooks.ActivityApplyInfo
	return append(hooks[:len(hooks):len(hooks)], activityapplyinfo.Hooks[:]...)
}

// ActivityTypeClient is a client for the ActivityType schema.
type ActivityTypeClient struct {
	config
}

// NewActivityTypeClient returns a client for the ActivityType from the given config.
func NewActivityTypeClient(c config) *ActivityTypeClient {
	return &ActivityTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activitytype.Hooks(f(g(h())))`.
func (c *ActivityTypeClient) Use(hooks ...Hook) {
	c.hooks.ActivityType = append(c.hooks.ActivityType, hooks...)
}

// Create returns a create builder for ActivityType.
func (c *ActivityTypeClient) Create() *ActivityTypeCreate {
	mutation := newActivityTypeMutation(c.config, OpCreate)
	return &ActivityTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActivityType entities.
func (c *ActivityTypeClient) CreateBulk(builders ...*ActivityTypeCreate) *ActivityTypeCreateBulk {
	return &ActivityTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActivityType.
func (c *ActivityTypeClient) Update() *ActivityTypeUpdate {
	mutation := newActivityTypeMutation(c.config, OpUpdate)
	return &ActivityTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityTypeClient) UpdateOne(at *ActivityType) *ActivityTypeUpdateOne {
	mutation := newActivityTypeMutation(c.config, OpUpdateOne, withActivityType(at))
	return &ActivityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityTypeClient) UpdateOneID(id int) *ActivityTypeUpdateOne {
	mutation := newActivityTypeMutation(c.config, OpUpdateOne, withActivityTypeID(id))
	return &ActivityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActivityType.
func (c *ActivityTypeClient) Delete() *ActivityTypeDelete {
	mutation := newActivityTypeMutation(c.config, OpDelete)
	return &ActivityTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityTypeClient) DeleteOne(at *ActivityType) *ActivityTypeDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityTypeClient) DeleteOneID(id int) *ActivityTypeDeleteOne {
	builder := c.Delete().Where(activitytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityTypeDeleteOne{builder}
}

// Query returns a query builder for ActivityType.
func (c *ActivityTypeClient) Query() *ActivityTypeQuery {
	return &ActivityTypeQuery{
		config: c.config,
	}
}

// Get returns a ActivityType entity by its id.
func (c *ActivityTypeClient) Get(ctx context.Context, id int) (*ActivityType, error) {
	return c.Query().Where(activitytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityTypeClient) GetX(ctx context.Context, id int) *ActivityType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivities queries the activities edge of a ActivityType.
func (c *ActivityTypeClient) QueryActivities(at *ActivityType) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activitytype.Table, activitytype.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activitytype.ActivitiesTable, activitytype.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityTypeClient) Hooks() []Hook {
	hooks := c.hooks.ActivityType
	return append(hooks[:len(hooks):len(hooks)], activitytype.Hooks[:]...)
}

// AdminClient is a client for the Admin schema.
type AdminClient struct {
	config
}

// NewAdminClient returns a client for the Admin from the given config.
func NewAdminClient(c config) *AdminClient {
	return &AdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admin.Hooks(f(g(h())))`.
func (c *AdminClient) Use(hooks ...Hook) {
	c.hooks.Admin = append(c.hooks.Admin, hooks...)
}

// Create returns a create builder for Admin.
func (c *AdminClient) Create() *AdminCreate {
	mutation := newAdminMutation(c.config, OpCreate)
	return &AdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Admin entities.
func (c *AdminClient) CreateBulk(builders ...*AdminCreate) *AdminCreateBulk {
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Admin.
func (c *AdminClient) Update() *AdminUpdate {
	mutation := newAdminMutation(c.config, OpUpdate)
	return &AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminClient) UpdateOne(a *Admin) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdmin(a))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminClient) UpdateOneID(id int) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdminID(id))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Admin.
func (c *AdminClient) Delete() *AdminDelete {
	mutation := newAdminMutation(c.config, OpDelete)
	return &AdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminClient) DeleteOne(a *Admin) *AdminDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminClient) DeleteOneID(id int) *AdminDeleteOne {
	builder := c.Delete().Where(admin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDeleteOne{builder}
}

// Query returns a query builder for Admin.
func (c *AdminClient) Query() *AdminQuery {
	return &AdminQuery{
		config: c.config,
	}
}

// Get returns a Admin entity by its id.
func (c *AdminClient) Get(ctx context.Context, id int) (*Admin, error) {
	return c.Query().Where(admin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminClient) GetX(ctx context.Context, id int) *Admin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdminLoginLogs queries the admin_login_logs edge of a Admin.
func (c *AdminClient) QueryAdminLoginLogs(a *Admin) *AdminLoginLogQuery {
	query := &AdminLoginLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(adminloginlog.Table, adminloginlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminLoginLogsTable, admin.AdminLoginLogsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperationAdminLogs queries the operation_admin_logs edge of a Admin.
func (c *AdminClient) QueryOperationAdminLogs(a *Admin) *AdminOperationLogQuery {
	query := &AdminOperationLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(adminoperationlog.Table, adminoperationlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.OperationAdminLogsTable, admin.OperationAdminLogsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a Admin.
func (c *AdminClient) QueryRoles(a *Admin) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, admin.RolesTable, admin.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a Admin.
func (c *AdminClient) QueryActivities(a *Admin) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.ActivitiesTable, admin.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessageCreatedAdminID queries the message_created_admin_id edge of a Admin.
func (c *AdminClient) QueryMessageCreatedAdminID(a *Admin) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.MessageCreatedAdminIDTable, admin.MessageCreatedAdminIDColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminQuestionBanks queries the admin_question_banks edge of a Admin.
func (c *AdminClient) QueryAdminQuestionBanks(a *Admin) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminQuestionBanksTable, admin.AdminQuestionBanksColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminQuestions queries the admin_Questions edge of a Admin.
func (c *AdminClient) QueryAdminQuestions(a *Admin) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminQuestionsTable, admin.AdminQuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminExamPapers queries the admin_exam_papers edge of a Admin.
func (c *AdminClient) QueryAdminExamPapers(a *Admin) *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminExamPapersTable, admin.AdminExamPapersColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminErrorFeedbacks queries the admin_error_feedbacks edge of a Admin.
func (c *AdminClient) QueryAdminErrorFeedbacks(a *Admin) *TkQuestionErrorFeedbackQuery {
	query := &TkQuestionErrorFeedbackQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(tkquestionerrorfeedback.Table, tkquestionerrorfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.AdminErrorFeedbacksTable, admin.AdminErrorFeedbacksColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a Admin.
func (c *AdminClient) QueryCourse(a *Admin) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.CourseTable, admin.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassAdmin queries the class_admin edge of a Admin.
func (c *AdminClient) QueryClassAdmin(a *Admin) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.ClassAdminTable, admin.ClassAdminColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminAttachments queries the admin_attachments edge of a Admin.
func (c *AdminClient) QueryAdminAttachments(a *Admin) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, admin.AdminAttachmentsTable, admin.AdminAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminClient) Hooks() []Hook {
	hooks := c.hooks.Admin
	return append(hooks[:len(hooks):len(hooks)], admin.Hooks[:]...)
}

// AdminLoginLogClient is a client for the AdminLoginLog schema.
type AdminLoginLogClient struct {
	config
}

// NewAdminLoginLogClient returns a client for the AdminLoginLog from the given config.
func NewAdminLoginLogClient(c config) *AdminLoginLogClient {
	return &AdminLoginLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminloginlog.Hooks(f(g(h())))`.
func (c *AdminLoginLogClient) Use(hooks ...Hook) {
	c.hooks.AdminLoginLog = append(c.hooks.AdminLoginLog, hooks...)
}

// Create returns a create builder for AdminLoginLog.
func (c *AdminLoginLogClient) Create() *AdminLoginLogCreate {
	mutation := newAdminLoginLogMutation(c.config, OpCreate)
	return &AdminLoginLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminLoginLog entities.
func (c *AdminLoginLogClient) CreateBulk(builders ...*AdminLoginLogCreate) *AdminLoginLogCreateBulk {
	return &AdminLoginLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminLoginLog.
func (c *AdminLoginLogClient) Update() *AdminLoginLogUpdate {
	mutation := newAdminLoginLogMutation(c.config, OpUpdate)
	return &AdminLoginLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminLoginLogClient) UpdateOne(all *AdminLoginLog) *AdminLoginLogUpdateOne {
	mutation := newAdminLoginLogMutation(c.config, OpUpdateOne, withAdminLoginLog(all))
	return &AdminLoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminLoginLogClient) UpdateOneID(id int) *AdminLoginLogUpdateOne {
	mutation := newAdminLoginLogMutation(c.config, OpUpdateOne, withAdminLoginLogID(id))
	return &AdminLoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminLoginLog.
func (c *AdminLoginLogClient) Delete() *AdminLoginLogDelete {
	mutation := newAdminLoginLogMutation(c.config, OpDelete)
	return &AdminLoginLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminLoginLogClient) DeleteOne(all *AdminLoginLog) *AdminLoginLogDeleteOne {
	return c.DeleteOneID(all.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminLoginLogClient) DeleteOneID(id int) *AdminLoginLogDeleteOne {
	builder := c.Delete().Where(adminloginlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminLoginLogDeleteOne{builder}
}

// Query returns a query builder for AdminLoginLog.
func (c *AdminLoginLogClient) Query() *AdminLoginLogQuery {
	return &AdminLoginLogQuery{
		config: c.config,
	}
}

// Get returns a AdminLoginLog entity by its id.
func (c *AdminLoginLogClient) Get(ctx context.Context, id int) (*AdminLoginLog, error) {
	return c.Query().Where(adminloginlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminLoginLogClient) GetX(ctx context.Context, id int) *AdminLoginLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdmin queries the admin edge of a AdminLoginLog.
func (c *AdminLoginLogClient) QueryAdmin(all *AdminLoginLog) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := all.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminloginlog.Table, adminloginlog.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminloginlog.AdminTable, adminloginlog.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(all.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminLoginLogClient) Hooks() []Hook {
	hooks := c.hooks.AdminLoginLog
	return append(hooks[:len(hooks):len(hooks)], adminloginlog.Hooks[:]...)
}

// AdminOperationLogClient is a client for the AdminOperationLog schema.
type AdminOperationLogClient struct {
	config
}

// NewAdminOperationLogClient returns a client for the AdminOperationLog from the given config.
func NewAdminOperationLogClient(c config) *AdminOperationLogClient {
	return &AdminOperationLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminoperationlog.Hooks(f(g(h())))`.
func (c *AdminOperationLogClient) Use(hooks ...Hook) {
	c.hooks.AdminOperationLog = append(c.hooks.AdminOperationLog, hooks...)
}

// Create returns a create builder for AdminOperationLog.
func (c *AdminOperationLogClient) Create() *AdminOperationLogCreate {
	mutation := newAdminOperationLogMutation(c.config, OpCreate)
	return &AdminOperationLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminOperationLog entities.
func (c *AdminOperationLogClient) CreateBulk(builders ...*AdminOperationLogCreate) *AdminOperationLogCreateBulk {
	return &AdminOperationLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminOperationLog.
func (c *AdminOperationLogClient) Update() *AdminOperationLogUpdate {
	mutation := newAdminOperationLogMutation(c.config, OpUpdate)
	return &AdminOperationLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminOperationLogClient) UpdateOne(aol *AdminOperationLog) *AdminOperationLogUpdateOne {
	mutation := newAdminOperationLogMutation(c.config, OpUpdateOne, withAdminOperationLog(aol))
	return &AdminOperationLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminOperationLogClient) UpdateOneID(id int) *AdminOperationLogUpdateOne {
	mutation := newAdminOperationLogMutation(c.config, OpUpdateOne, withAdminOperationLogID(id))
	return &AdminOperationLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminOperationLog.
func (c *AdminOperationLogClient) Delete() *AdminOperationLogDelete {
	mutation := newAdminOperationLogMutation(c.config, OpDelete)
	return &AdminOperationLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminOperationLogClient) DeleteOne(aol *AdminOperationLog) *AdminOperationLogDeleteOne {
	return c.DeleteOneID(aol.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminOperationLogClient) DeleteOneID(id int) *AdminOperationLogDeleteOne {
	builder := c.Delete().Where(adminoperationlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminOperationLogDeleteOne{builder}
}

// Query returns a query builder for AdminOperationLog.
func (c *AdminOperationLogClient) Query() *AdminOperationLogQuery {
	return &AdminOperationLogQuery{
		config: c.config,
	}
}

// Get returns a AdminOperationLog entity by its id.
func (c *AdminOperationLogClient) Get(ctx context.Context, id int) (*AdminOperationLog, error) {
	return c.Query().Where(adminoperationlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminOperationLogClient) GetX(ctx context.Context, id int) *AdminOperationLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdmin queries the admin edge of a AdminOperationLog.
func (c *AdminOperationLogClient) QueryAdmin(aol *AdminOperationLog) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminoperationlog.Table, adminoperationlog.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminoperationlog.AdminTable, adminoperationlog.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(aol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminOperationLogClient) Hooks() []Hook {
	hooks := c.hooks.AdminOperationLog
	return append(hooks[:len(hooks):len(hooks)], adminoperationlog.Hooks[:]...)
}

// AdvertiseClient is a client for the Advertise schema.
type AdvertiseClient struct {
	config
}

// NewAdvertiseClient returns a client for the Advertise from the given config.
func NewAdvertiseClient(c config) *AdvertiseClient {
	return &AdvertiseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `advertise.Hooks(f(g(h())))`.
func (c *AdvertiseClient) Use(hooks ...Hook) {
	c.hooks.Advertise = append(c.hooks.Advertise, hooks...)
}

// Create returns a create builder for Advertise.
func (c *AdvertiseClient) Create() *AdvertiseCreate {
	mutation := newAdvertiseMutation(c.config, OpCreate)
	return &AdvertiseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Advertise entities.
func (c *AdvertiseClient) CreateBulk(builders ...*AdvertiseCreate) *AdvertiseCreateBulk {
	return &AdvertiseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Advertise.
func (c *AdvertiseClient) Update() *AdvertiseUpdate {
	mutation := newAdvertiseMutation(c.config, OpUpdate)
	return &AdvertiseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdvertiseClient) UpdateOne(a *Advertise) *AdvertiseUpdateOne {
	mutation := newAdvertiseMutation(c.config, OpUpdateOne, withAdvertise(a))
	return &AdvertiseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdvertiseClient) UpdateOneID(id int) *AdvertiseUpdateOne {
	mutation := newAdvertiseMutation(c.config, OpUpdateOne, withAdvertiseID(id))
	return &AdvertiseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Advertise.
func (c *AdvertiseClient) Delete() *AdvertiseDelete {
	mutation := newAdvertiseMutation(c.config, OpDelete)
	return &AdvertiseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdvertiseClient) DeleteOne(a *Advertise) *AdvertiseDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdvertiseClient) DeleteOneID(id int) *AdvertiseDeleteOne {
	builder := c.Delete().Where(advertise.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdvertiseDeleteOne{builder}
}

// Query returns a query builder for Advertise.
func (c *AdvertiseClient) Query() *AdvertiseQuery {
	return &AdvertiseQuery{
		config: c.config,
	}
}

// Get returns a Advertise entity by its id.
func (c *AdvertiseClient) Get(ctx context.Context, id int) (*Advertise, error) {
	return c.Query().Where(advertise.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdvertiseClient) GetX(ctx context.Context, id int) *Advertise {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachment queries the attachment edge of a Advertise.
func (c *AdvertiseClient) QueryAttachment(a *Advertise) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(advertise.Table, advertise.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, advertise.AttachmentTable, advertise.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdvertiseClient) Hooks() []Hook {
	hooks := c.hooks.Advertise
	return append(hooks[:len(hooks):len(hooks)], advertise.Hooks[:]...)
}

// AppAgreementClient is a client for the AppAgreement schema.
type AppAgreementClient struct {
	config
}

// NewAppAgreementClient returns a client for the AppAgreement from the given config.
func NewAppAgreementClient(c config) *AppAgreementClient {
	return &AppAgreementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appagreement.Hooks(f(g(h())))`.
func (c *AppAgreementClient) Use(hooks ...Hook) {
	c.hooks.AppAgreement = append(c.hooks.AppAgreement, hooks...)
}

// Create returns a create builder for AppAgreement.
func (c *AppAgreementClient) Create() *AppAgreementCreate {
	mutation := newAppAgreementMutation(c.config, OpCreate)
	return &AppAgreementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppAgreement entities.
func (c *AppAgreementClient) CreateBulk(builders ...*AppAgreementCreate) *AppAgreementCreateBulk {
	return &AppAgreementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppAgreement.
func (c *AppAgreementClient) Update() *AppAgreementUpdate {
	mutation := newAppAgreementMutation(c.config, OpUpdate)
	return &AppAgreementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppAgreementClient) UpdateOne(aa *AppAgreement) *AppAgreementUpdateOne {
	mutation := newAppAgreementMutation(c.config, OpUpdateOne, withAppAgreement(aa))
	return &AppAgreementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppAgreementClient) UpdateOneID(id int) *AppAgreementUpdateOne {
	mutation := newAppAgreementMutation(c.config, OpUpdateOne, withAppAgreementID(id))
	return &AppAgreementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppAgreement.
func (c *AppAgreementClient) Delete() *AppAgreementDelete {
	mutation := newAppAgreementMutation(c.config, OpDelete)
	return &AppAgreementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppAgreementClient) DeleteOne(aa *AppAgreement) *AppAgreementDeleteOne {
	return c.DeleteOneID(aa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppAgreementClient) DeleteOneID(id int) *AppAgreementDeleteOne {
	builder := c.Delete().Where(appagreement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppAgreementDeleteOne{builder}
}

// Query returns a query builder for AppAgreement.
func (c *AppAgreementClient) Query() *AppAgreementQuery {
	return &AppAgreementQuery{
		config: c.config,
	}
}

// Get returns a AppAgreement entity by its id.
func (c *AppAgreementClient) Get(ctx context.Context, id int) (*AppAgreement, error) {
	return c.Query().Where(appagreement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppAgreementClient) GetX(ctx context.Context, id int) *AppAgreement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppAgreementClient) Hooks() []Hook {
	hooks := c.hooks.AppAgreement
	return append(hooks[:len(hooks):len(hooks)], appagreement.Hooks[:]...)
}

// AppVersionClient is a client for the AppVersion schema.
type AppVersionClient struct {
	config
}

// NewAppVersionClient returns a client for the AppVersion from the given config.
func NewAppVersionClient(c config) *AppVersionClient {
	return &AppVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appversion.Hooks(f(g(h())))`.
func (c *AppVersionClient) Use(hooks ...Hook) {
	c.hooks.AppVersion = append(c.hooks.AppVersion, hooks...)
}

// Create returns a create builder for AppVersion.
func (c *AppVersionClient) Create() *AppVersionCreate {
	mutation := newAppVersionMutation(c.config, OpCreate)
	return &AppVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppVersion entities.
func (c *AppVersionClient) CreateBulk(builders ...*AppVersionCreate) *AppVersionCreateBulk {
	return &AppVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppVersion.
func (c *AppVersionClient) Update() *AppVersionUpdate {
	mutation := newAppVersionMutation(c.config, OpUpdate)
	return &AppVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppVersionClient) UpdateOne(av *AppVersion) *AppVersionUpdateOne {
	mutation := newAppVersionMutation(c.config, OpUpdateOne, withAppVersion(av))
	return &AppVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppVersionClient) UpdateOneID(id int) *AppVersionUpdateOne {
	mutation := newAppVersionMutation(c.config, OpUpdateOne, withAppVersionID(id))
	return &AppVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppVersion.
func (c *AppVersionClient) Delete() *AppVersionDelete {
	mutation := newAppVersionMutation(c.config, OpDelete)
	return &AppVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppVersionClient) DeleteOne(av *AppVersion) *AppVersionDeleteOne {
	return c.DeleteOneID(av.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppVersionClient) DeleteOneID(id int) *AppVersionDeleteOne {
	builder := c.Delete().Where(appversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppVersionDeleteOne{builder}
}

// Query returns a query builder for AppVersion.
func (c *AppVersionClient) Query() *AppVersionQuery {
	return &AppVersionQuery{
		config: c.config,
	}
}

// Get returns a AppVersion entity by its id.
func (c *AppVersionClient) Get(ctx context.Context, id int) (*AppVersion, error) {
	return c.Query().Where(appversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppVersionClient) GetX(ctx context.Context, id int) *AppVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppVersionClient) Hooks() []Hook {
	hooks := c.hooks.AppVersion
	return append(hooks[:len(hooks):len(hooks)], appversion.Hooks[:]...)
}

// AttachmentClient is a client for the Attachment schema.
type AttachmentClient struct {
	config
}

// NewAttachmentClient returns a client for the Attachment from the given config.
func NewAttachmentClient(c config) *AttachmentClient {
	return &AttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attachment.Hooks(f(g(h())))`.
func (c *AttachmentClient) Use(hooks ...Hook) {
	c.hooks.Attachment = append(c.hooks.Attachment, hooks...)
}

// Create returns a create builder for Attachment.
func (c *AttachmentClient) Create() *AttachmentCreate {
	mutation := newAttachmentMutation(c.config, OpCreate)
	return &AttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attachment entities.
func (c *AttachmentClient) CreateBulk(builders ...*AttachmentCreate) *AttachmentCreateBulk {
	return &AttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attachment.
func (c *AttachmentClient) Update() *AttachmentUpdate {
	mutation := newAttachmentMutation(c.config, OpUpdate)
	return &AttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttachmentClient) UpdateOne(a *Attachment) *AttachmentUpdateOne {
	mutation := newAttachmentMutation(c.config, OpUpdateOne, withAttachment(a))
	return &AttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttachmentClient) UpdateOneID(id int) *AttachmentUpdateOne {
	mutation := newAttachmentMutation(c.config, OpUpdateOne, withAttachmentID(id))
	return &AttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attachment.
func (c *AttachmentClient) Delete() *AttachmentDelete {
	mutation := newAttachmentMutation(c.config, OpDelete)
	return &AttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AttachmentClient) DeleteOne(a *Attachment) *AttachmentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AttachmentClient) DeleteOneID(id int) *AttachmentDeleteOne {
	builder := c.Delete().Where(attachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttachmentDeleteOne{builder}
}

// Query returns a query builder for Attachment.
func (c *AttachmentClient) Query() *AttachmentQuery {
	return &AttachmentQuery{
		config: c.config,
	}
}

// Get returns a Attachment entity by its id.
func (c *AttachmentClient) Get(ctx context.Context, id int) (*Attachment, error) {
	return c.Query().Where(attachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttachmentClient) GetX(ctx context.Context, id int) *Attachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMajorDetailCoverImg queries the major_detail_cover_img edge of a Attachment.
func (c *AttachmentClient) QueryMajorDetailCoverImg(a *Attachment) *MajorDetailQuery {
	query := &MajorDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.MajorDetailCoverImgTable, attachment.MajorDetailCoverImgColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMajorDetailSubjectImg queries the major_detail_subject_img edge of a Attachment.
func (c *AttachmentClient) QueryMajorDetailSubjectImg(a *Attachment) *MajorDetailQuery {
	query := &MajorDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.MajorDetailSubjectImgTable, attachment.MajorDetailSubjectImgColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMajorTeacherAttachment queries the major_teacher_attachment edge of a Attachment.
func (c *AttachmentClient) QueryMajorTeacherAttachment(a *Attachment) *MajorDetailQuery {
	query := &MajorDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, attachment.MajorTeacherAttachmentTable, attachment.MajorTeacherAttachmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMajorServiceAttachment queries the major_service_attachment edge of a Attachment.
func (c *AttachmentClient) QueryMajorServiceAttachment(a *Attachment) *MajorDetailQuery {
	query := &MajorDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, attachment.MajorServiceAttachmentTable, attachment.MajorServiceAttachmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdvertise queries the advertise edge of a Attachment.
func (c *AttachmentClient) QueryAdvertise(a *Attachment) *AdvertiseQuery {
	query := &AdvertiseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(advertise.Table, advertise.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.AdvertiseTable, attachment.AdvertiseColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessageAttachment queries the message_attachment edge of a Attachment.
func (c *AttachmentClient) QueryMessageAttachment(a *Attachment) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.MessageAttachmentTable, attachment.MessageAttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySharePosterAttachments queries the share_poster_attachments edge of a Attachment.
func (c *AttachmentClient) QuerySharePosterAttachments(a *Attachment) *SharePosterQuery {
	query := &SharePosterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(shareposter.Table, shareposter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.SharePosterAttachmentsTable, attachment.SharePosterAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeacherAttachments queries the teacher_attachments edge of a Attachment.
func (c *AttachmentClient) QueryTeacherAttachments(a *Attachment) *TeacherQuery {
	query := &TeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.TeacherAttachmentsTable, attachment.TeacherAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminImgID queries the admin_img_id edge of a Attachment.
func (c *AttachmentClient) QueryAdminImgID(a *Attachment) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, attachment.AdminImgIDTable, attachment.AdminImgIDColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySmallCategoryAttachments queries the small_category_attachments edge of a Attachment.
func (c *AttachmentClient) QuerySmallCategoryAttachments(a *Attachment) *KcSmallCategoryAttachmentQuery {
	query := &KcSmallCategoryAttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(kcsmallcategoryattachment.Table, kcsmallcategoryattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.SmallCategoryAttachmentsTable, attachment.SmallCategoryAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseAttachments queries the course_attachments edge of a Attachment.
func (c *AttachmentClient) QueryCourseAttachments(a *Attachment) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.CourseAttachmentsTable, attachment.CourseAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassCoverAttachments queries the class_cover_attachments edge of a Attachment.
func (c *AttachmentClient) QueryClassCoverAttachments(a *Attachment) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.ClassCoverAttachmentsTable, attachment.ClassCoverAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCoursewareAttachment queries the courseware_attachment edge of a Attachment.
func (c *AttachmentClient) QueryCoursewareAttachment(a *Attachment) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, attachment.CoursewareAttachmentTable, attachment.CoursewareAttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderAttachment queries the order_attachment edge of a Attachment.
func (c *AttachmentClient) QueryOrderAttachment(a *Attachment) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, attachment.OrderAttachmentTable, attachment.OrderAttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideoTaskAttachment queries the video_task_attachment edge of a Attachment.
func (c *AttachmentClient) QueryVideoTaskAttachment(a *Attachment) *KcVideoUploadTaskQuery {
	query := &KcVideoUploadTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(kcvideouploadtask.Table, kcvideouploadtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.VideoTaskAttachmentTable, attachment.VideoTaskAttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAskAttachments queries the ask_attachments edge of a Attachment.
func (c *AttachmentClient) QueryAskAttachments(a *Attachment) *UserAskAnswerAttachmentQuery {
	query := &UserAskAnswerAttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(useraskanswerattachment.Table, useraskanswerattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.AskAttachmentsTable, attachment.AskAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttachmentClient) Hooks() []Hook {
	hooks := c.hooks.Attachment
	return append(hooks[:len(hooks):len(hooks)], attachment.Hooks[:]...)
}

// CityClient is a client for the City schema.
type CityClient struct {
	config
}

// NewCityClient returns a client for the City from the given config.
func NewCityClient(c config) *CityClient {
	return &CityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `city.Hooks(f(g(h())))`.
func (c *CityClient) Use(hooks ...Hook) {
	c.hooks.City = append(c.hooks.City, hooks...)
}

// Create returns a create builder for City.
func (c *CityClient) Create() *CityCreate {
	mutation := newCityMutation(c.config, OpCreate)
	return &CityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of City entities.
func (c *CityClient) CreateBulk(builders ...*CityCreate) *CityCreateBulk {
	return &CityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for City.
func (c *CityClient) Update() *CityUpdate {
	mutation := newCityMutation(c.config, OpUpdate)
	return &CityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CityClient) UpdateOne(ci *City) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(ci))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CityClient) UpdateOneID(id int) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCityID(id))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for City.
func (c *CityClient) Delete() *CityDelete {
	mutation := newCityMutation(c.config, OpDelete)
	return &CityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CityClient) DeleteOne(ci *City) *CityDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CityClient) DeleteOneID(id int) *CityDeleteOne {
	builder := c.Delete().Where(city.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CityDeleteOne{builder}
}

// Query returns a query builder for City.
func (c *CityClient) Query() *CityQuery {
	return &CityQuery{
		config: c.config,
	}
}

// Get returns a City entity by its id.
func (c *CityClient) Get(ctx context.Context, id int) (*City, error) {
	return c.Query().Where(city.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CityClient) GetX(ctx context.Context, id int) *City {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKcClass queries the kc_class edge of a City.
func (c *CityClient) QueryKcClass(ci *City) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, city.KcClassTable, city.KcClassColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a City.
func (c *CityClient) QueryCourse(ci *City) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, city.CourseTable, city.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCity queries the user_city edge of a City.
func (c *CityClient) QueryUserCity(ci *City) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, city.UserCityTable, city.UserCityColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CityClient) Hooks() []Hook {
	hooks := c.hooks.City
	return append(hooks[:len(hooks):len(hooks)], city.Hooks[:]...)
}

// CollectionClient is a client for the Collection schema.
type CollectionClient struct {
	config
}

// NewCollectionClient returns a client for the Collection from the given config.
func NewCollectionClient(c config) *CollectionClient {
	return &CollectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `collection.Hooks(f(g(h())))`.
func (c *CollectionClient) Use(hooks ...Hook) {
	c.hooks.Collection = append(c.hooks.Collection, hooks...)
}

// Create returns a create builder for Collection.
func (c *CollectionClient) Create() *CollectionCreate {
	mutation := newCollectionMutation(c.config, OpCreate)
	return &CollectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Collection entities.
func (c *CollectionClient) CreateBulk(builders ...*CollectionCreate) *CollectionCreateBulk {
	return &CollectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Collection.
func (c *CollectionClient) Update() *CollectionUpdate {
	mutation := newCollectionMutation(c.config, OpUpdate)
	return &CollectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CollectionClient) UpdateOne(co *Collection) *CollectionUpdateOne {
	mutation := newCollectionMutation(c.config, OpUpdateOne, withCollection(co))
	return &CollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CollectionClient) UpdateOneID(id int) *CollectionUpdateOne {
	mutation := newCollectionMutation(c.config, OpUpdateOne, withCollectionID(id))
	return &CollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Collection.
func (c *CollectionClient) Delete() *CollectionDelete {
	mutation := newCollectionMutation(c.config, OpDelete)
	return &CollectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CollectionClient) DeleteOne(co *Collection) *CollectionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CollectionClient) DeleteOneID(id int) *CollectionDeleteOne {
	builder := c.Delete().Where(collection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CollectionDeleteOne{builder}
}

// Query returns a query builder for Collection.
func (c *CollectionClient) Query() *CollectionQuery {
	return &CollectionQuery{
		config: c.config,
	}
}

// Get returns a Collection entity by its id.
func (c *CollectionClient) Get(ctx context.Context, id int) (*Collection, error) {
	return c.Query().Where(collection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CollectionClient) GetX(ctx context.Context, id int) *Collection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestion queries the question edge of a Collection.
func (c *CollectionClient) QueryQuestion(co *Collection) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(collection.Table, collection.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, collection.QuestionTable, collection.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CollectionClient) Hooks() []Hook {
	hooks := c.hooks.Collection
	return append(hooks[:len(hooks):len(hooks)], collection.Hooks[:]...)
}

// HotSearchClient is a client for the HotSearch schema.
type HotSearchClient struct {
	config
}

// NewHotSearchClient returns a client for the HotSearch from the given config.
func NewHotSearchClient(c config) *HotSearchClient {
	return &HotSearchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hotsearch.Hooks(f(g(h())))`.
func (c *HotSearchClient) Use(hooks ...Hook) {
	c.hooks.HotSearch = append(c.hooks.HotSearch, hooks...)
}

// Create returns a create builder for HotSearch.
func (c *HotSearchClient) Create() *HotSearchCreate {
	mutation := newHotSearchMutation(c.config, OpCreate)
	return &HotSearchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HotSearch entities.
func (c *HotSearchClient) CreateBulk(builders ...*HotSearchCreate) *HotSearchCreateBulk {
	return &HotSearchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HotSearch.
func (c *HotSearchClient) Update() *HotSearchUpdate {
	mutation := newHotSearchMutation(c.config, OpUpdate)
	return &HotSearchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HotSearchClient) UpdateOne(hs *HotSearch) *HotSearchUpdateOne {
	mutation := newHotSearchMutation(c.config, OpUpdateOne, withHotSearch(hs))
	return &HotSearchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HotSearchClient) UpdateOneID(id int) *HotSearchUpdateOne {
	mutation := newHotSearchMutation(c.config, OpUpdateOne, withHotSearchID(id))
	return &HotSearchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HotSearch.
func (c *HotSearchClient) Delete() *HotSearchDelete {
	mutation := newHotSearchMutation(c.config, OpDelete)
	return &HotSearchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HotSearchClient) DeleteOne(hs *HotSearch) *HotSearchDeleteOne {
	return c.DeleteOneID(hs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HotSearchClient) DeleteOneID(id int) *HotSearchDeleteOne {
	builder := c.Delete().Where(hotsearch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HotSearchDeleteOne{builder}
}

// Query returns a query builder for HotSearch.
func (c *HotSearchClient) Query() *HotSearchQuery {
	return &HotSearchQuery{
		config: c.config,
	}
}

// Get returns a HotSearch entity by its id.
func (c *HotSearchClient) Get(ctx context.Context, id int) (*HotSearch, error) {
	return c.Query().Where(hotsearch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HotSearchClient) GetX(ctx context.Context, id int) *HotSearch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HotSearchClient) Hooks() []Hook {
	hooks := c.hooks.HotSearch
	return append(hooks[:len(hooks):len(hooks)], hotsearch.Hooks[:]...)
}

// ImportTaskClient is a client for the ImportTask schema.
type ImportTaskClient struct {
	config
}

// NewImportTaskClient returns a client for the ImportTask from the given config.
func NewImportTaskClient(c config) *ImportTaskClient {
	return &ImportTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `importtask.Hooks(f(g(h())))`.
func (c *ImportTaskClient) Use(hooks ...Hook) {
	c.hooks.ImportTask = append(c.hooks.ImportTask, hooks...)
}

// Create returns a create builder for ImportTask.
func (c *ImportTaskClient) Create() *ImportTaskCreate {
	mutation := newImportTaskMutation(c.config, OpCreate)
	return &ImportTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ImportTask entities.
func (c *ImportTaskClient) CreateBulk(builders ...*ImportTaskCreate) *ImportTaskCreateBulk {
	return &ImportTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ImportTask.
func (c *ImportTaskClient) Update() *ImportTaskUpdate {
	mutation := newImportTaskMutation(c.config, OpUpdate)
	return &ImportTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImportTaskClient) UpdateOne(it *ImportTask) *ImportTaskUpdateOne {
	mutation := newImportTaskMutation(c.config, OpUpdateOne, withImportTask(it))
	return &ImportTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImportTaskClient) UpdateOneID(id int) *ImportTaskUpdateOne {
	mutation := newImportTaskMutation(c.config, OpUpdateOne, withImportTaskID(id))
	return &ImportTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImportTask.
func (c *ImportTaskClient) Delete() *ImportTaskDelete {
	mutation := newImportTaskMutation(c.config, OpDelete)
	return &ImportTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImportTaskClient) DeleteOne(it *ImportTask) *ImportTaskDeleteOne {
	return c.DeleteOneID(it.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImportTaskClient) DeleteOneID(id int) *ImportTaskDeleteOne {
	builder := c.Delete().Where(importtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImportTaskDeleteOne{builder}
}

// Query returns a query builder for ImportTask.
func (c *ImportTaskClient) Query() *ImportTaskQuery {
	return &ImportTaskQuery{
		config: c.config,
	}
}

// Get returns a ImportTask entity by its id.
func (c *ImportTaskClient) Get(ctx context.Context, id int) (*ImportTask, error) {
	return c.Query().Where(importtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImportTaskClient) GetX(ctx context.Context, id int) *ImportTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ImportTaskClient) Hooks() []Hook {
	hooks := c.hooks.ImportTask
	return append(hooks[:len(hooks):len(hooks)], importtask.Hooks[:]...)
}

// InformationClassifyClient is a client for the InformationClassify schema.
type InformationClassifyClient struct {
	config
}

// NewInformationClassifyClient returns a client for the InformationClassify from the given config.
func NewInformationClassifyClient(c config) *InformationClassifyClient {
	return &InformationClassifyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `informationclassify.Hooks(f(g(h())))`.
func (c *InformationClassifyClient) Use(hooks ...Hook) {
	c.hooks.InformationClassify = append(c.hooks.InformationClassify, hooks...)
}

// Create returns a create builder for InformationClassify.
func (c *InformationClassifyClient) Create() *InformationClassifyCreate {
	mutation := newInformationClassifyMutation(c.config, OpCreate)
	return &InformationClassifyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InformationClassify entities.
func (c *InformationClassifyClient) CreateBulk(builders ...*InformationClassifyCreate) *InformationClassifyCreateBulk {
	return &InformationClassifyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InformationClassify.
func (c *InformationClassifyClient) Update() *InformationClassifyUpdate {
	mutation := newInformationClassifyMutation(c.config, OpUpdate)
	return &InformationClassifyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InformationClassifyClient) UpdateOne(ic *InformationClassify) *InformationClassifyUpdateOne {
	mutation := newInformationClassifyMutation(c.config, OpUpdateOne, withInformationClassify(ic))
	return &InformationClassifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InformationClassifyClient) UpdateOneID(id int) *InformationClassifyUpdateOne {
	mutation := newInformationClassifyMutation(c.config, OpUpdateOne, withInformationClassifyID(id))
	return &InformationClassifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InformationClassify.
func (c *InformationClassifyClient) Delete() *InformationClassifyDelete {
	mutation := newInformationClassifyMutation(c.config, OpDelete)
	return &InformationClassifyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InformationClassifyClient) DeleteOne(ic *InformationClassify) *InformationClassifyDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InformationClassifyClient) DeleteOneID(id int) *InformationClassifyDeleteOne {
	builder := c.Delete().Where(informationclassify.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InformationClassifyDeleteOne{builder}
}

// Query returns a query builder for InformationClassify.
func (c *InformationClassifyClient) Query() *InformationClassifyQuery {
	return &InformationClassifyQuery{
		config: c.config,
	}
}

// Get returns a InformationClassify entity by its id.
func (c *InformationClassifyClient) Get(ctx context.Context, id int) (*InformationClassify, error) {
	return c.Query().Where(informationclassify.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InformationClassifyClient) GetX(ctx context.Context, id int) *InformationClassify {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InformationClassifyClient) Hooks() []Hook {
	hooks := c.hooks.InformationClassify
	return append(hooks[:len(hooks):len(hooks)], informationclassify.Hooks[:]...)
}

// ItemCategoryClient is a client for the ItemCategory schema.
type ItemCategoryClient struct {
	config
}

// NewItemCategoryClient returns a client for the ItemCategory from the given config.
func NewItemCategoryClient(c config) *ItemCategoryClient {
	return &ItemCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `itemcategory.Hooks(f(g(h())))`.
func (c *ItemCategoryClient) Use(hooks ...Hook) {
	c.hooks.ItemCategory = append(c.hooks.ItemCategory, hooks...)
}

// Create returns a create builder for ItemCategory.
func (c *ItemCategoryClient) Create() *ItemCategoryCreate {
	mutation := newItemCategoryMutation(c.config, OpCreate)
	return &ItemCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ItemCategory entities.
func (c *ItemCategoryClient) CreateBulk(builders ...*ItemCategoryCreate) *ItemCategoryCreateBulk {
	return &ItemCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ItemCategory.
func (c *ItemCategoryClient) Update() *ItemCategoryUpdate {
	mutation := newItemCategoryMutation(c.config, OpUpdate)
	return &ItemCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemCategoryClient) UpdateOne(ic *ItemCategory) *ItemCategoryUpdateOne {
	mutation := newItemCategoryMutation(c.config, OpUpdateOne, withItemCategory(ic))
	return &ItemCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemCategoryClient) UpdateOneID(id int) *ItemCategoryUpdateOne {
	mutation := newItemCategoryMutation(c.config, OpUpdateOne, withItemCategoryID(id))
	return &ItemCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ItemCategory.
func (c *ItemCategoryClient) Delete() *ItemCategoryDelete {
	mutation := newItemCategoryMutation(c.config, OpDelete)
	return &ItemCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ItemCategoryClient) DeleteOne(ic *ItemCategory) *ItemCategoryDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ItemCategoryClient) DeleteOneID(id int) *ItemCategoryDeleteOne {
	builder := c.Delete().Where(itemcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ItemCategoryDeleteOne{builder}
}

// Query returns a query builder for ItemCategory.
func (c *ItemCategoryClient) Query() *ItemCategoryQuery {
	return &ItemCategoryQuery{
		config: c.config,
	}
}

// Get returns a ItemCategory entity by its id.
func (c *ItemCategoryClient) Get(ctx context.Context, id int) (*ItemCategory, error) {
	return c.Query().Where(itemcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemCategoryClient) GetX(ctx context.Context, id int) *ItemCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItemQuestionBanks queries the item_question_banks edge of a ItemCategory.
func (c *ItemCategoryClient) QueryItemQuestionBanks(ic *ItemCategory) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, itemcategory.ItemQuestionBanksTable, itemcategory.ItemQuestionBanksColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKcClass queries the kc_class edge of a ItemCategory.
func (c *ItemCategoryClient) QueryKcClass(ic *ItemCategory) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, itemcategory.KcClassTable, itemcategory.KcClassColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a ItemCategory.
func (c *ItemCategoryClient) QueryCourse(ic *ItemCategory) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, itemcategory.CourseTable, itemcategory.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserItemCate queries the user_item_cate edge of a ItemCategory.
func (c *ItemCategoryClient) QueryUserItemCate(ic *ItemCategory) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, itemcategory.UserItemCateTable, itemcategory.UserItemCateColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a ItemCategory.
func (c *ItemCategoryClient) QueryParent(ic *ItemCategory) *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, id),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, itemcategory.ParentTable, itemcategory.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ItemCategory.
func (c *ItemCategoryClient) QueryChildren(ic *ItemCategory) *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, id),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, itemcategory.ChildrenTable, itemcategory.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ItemCategoryClient) Hooks() []Hook {
	hooks := c.hooks.ItemCategory
	return append(hooks[:len(hooks):len(hooks)], itemcategory.Hooks[:]...)
}

// KcClassClient is a client for the KcClass schema.
type KcClassClient struct {
	config
}

// NewKcClassClient returns a client for the KcClass from the given config.
func NewKcClassClient(c config) *KcClassClient {
	return &KcClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kcclass.Hooks(f(g(h())))`.
func (c *KcClassClient) Use(hooks ...Hook) {
	c.hooks.KcClass = append(c.hooks.KcClass, hooks...)
}

// Create returns a create builder for KcClass.
func (c *KcClassClient) Create() *KcClassCreate {
	mutation := newKcClassMutation(c.config, OpCreate)
	return &KcClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcClass entities.
func (c *KcClassClient) CreateBulk(builders ...*KcClassCreate) *KcClassCreateBulk {
	return &KcClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcClass.
func (c *KcClassClient) Update() *KcClassUpdate {
	mutation := newKcClassMutation(c.config, OpUpdate)
	return &KcClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcClassClient) UpdateOne(kc *KcClass) *KcClassUpdateOne {
	mutation := newKcClassMutation(c.config, OpUpdateOne, withKcClass(kc))
	return &KcClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcClassClient) UpdateOneID(id int) *KcClassUpdateOne {
	mutation := newKcClassMutation(c.config, OpUpdateOne, withKcClassID(id))
	return &KcClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcClass.
func (c *KcClassClient) Delete() *KcClassDelete {
	mutation := newKcClassMutation(c.config, OpDelete)
	return &KcClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcClassClient) DeleteOne(kc *KcClass) *KcClassDeleteOne {
	return c.DeleteOneID(kc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcClassClient) DeleteOneID(id int) *KcClassDeleteOne {
	builder := c.Delete().Where(kcclass.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcClassDeleteOne{builder}
}

// Query returns a query builder for KcClass.
func (c *KcClassClient) Query() *KcClassQuery {
	return &KcClassQuery{
		config: c.config,
	}
}

// Get returns a KcClass entity by its id.
func (c *KcClassClient) Get(ctx context.Context, id int) (*KcClass, error) {
	return c.Query().Where(kcclass.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcClassClient) GetX(ctx context.Context, id int) *KcClass {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMajors queries the majors edge of a KcClass.
func (c *KcClassClient) QueryMajors(kc *KcClass) *MajorQuery {
	query := &MajorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(major.Table, major.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, kcclass.MajorsTable, kcclass.MajorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItem queries the item edge of a KcClass.
func (c *KcClassClient) QueryItem(kc *KcClass) *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, kcclass.ItemTable, kcclass.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a KcClass.
func (c *KcClassClient) QueryCity(kc *KcClass) *CityQuery {
	query := &CityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclass.CityTable, kcclass.CityColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a KcClass.
func (c *KcClassClient) QueryAdmin(kc *KcClass) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclass.AdminTable, kcclass.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachment queries the attachment edge of a KcClass.
func (c *KcClassClient) QueryAttachment(kc *KcClass) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclass.AttachmentTable, kcclass.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMasterTeachers queries the master_teachers edge of a KcClass.
func (c *KcClassClient) QueryMasterTeachers(kc *KcClass) *TeacherQuery {
	query := &TeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclass.MasterTeachersTable, kcclass.MasterTeachersColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassTeachers queries the class_teachers edge of a KcClass.
func (c *KcClassClient) QueryClassTeachers(kc *KcClass) *KcClassTeacherQuery {
	query := &KcClassTeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(kcclassteacher.Table, kcclassteacher.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kcclass.ClassTeachersTable, kcclass.ClassTeachersColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKcClassCourses queries the kc_class_courses edge of a KcClass.
func (c *KcClassClient) QueryKcClassCourses(kc *KcClass) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, kcclass.KcClassCoursesTable, kcclass.KcClassCoursesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKcUserClasses queries the kc_user_classes edge of a KcClass.
func (c *KcClassClient) QueryKcUserClasses(kc *KcClass) *KcUserClassQuery {
	query := &KcUserClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(kcuserclass.Table, kcuserclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kcclass.KcUserClassesTable, kcclass.KcUserClassesColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessageClasses queries the message_classes edge of a KcClass.
func (c *KcClassClient) QueryMessageClasses(kc *KcClass) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kcclass.MessageClassesTable, kcclass.MessageClassesColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcClassClient) Hooks() []Hook {
	hooks := c.hooks.KcClass
	return append(hooks[:len(hooks):len(hooks)], kcclass.Hooks[:]...)
}

// KcClassTeacherClient is a client for the KcClassTeacher schema.
type KcClassTeacherClient struct {
	config
}

// NewKcClassTeacherClient returns a client for the KcClassTeacher from the given config.
func NewKcClassTeacherClient(c config) *KcClassTeacherClient {
	return &KcClassTeacherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kcclassteacher.Hooks(f(g(h())))`.
func (c *KcClassTeacherClient) Use(hooks ...Hook) {
	c.hooks.KcClassTeacher = append(c.hooks.KcClassTeacher, hooks...)
}

// Create returns a create builder for KcClassTeacher.
func (c *KcClassTeacherClient) Create() *KcClassTeacherCreate {
	mutation := newKcClassTeacherMutation(c.config, OpCreate)
	return &KcClassTeacherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcClassTeacher entities.
func (c *KcClassTeacherClient) CreateBulk(builders ...*KcClassTeacherCreate) *KcClassTeacherCreateBulk {
	return &KcClassTeacherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcClassTeacher.
func (c *KcClassTeacherClient) Update() *KcClassTeacherUpdate {
	mutation := newKcClassTeacherMutation(c.config, OpUpdate)
	return &KcClassTeacherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcClassTeacherClient) UpdateOne(kct *KcClassTeacher) *KcClassTeacherUpdateOne {
	mutation := newKcClassTeacherMutation(c.config, OpUpdateOne, withKcClassTeacher(kct))
	return &KcClassTeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcClassTeacherClient) UpdateOneID(id int) *KcClassTeacherUpdateOne {
	mutation := newKcClassTeacherMutation(c.config, OpUpdateOne, withKcClassTeacherID(id))
	return &KcClassTeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcClassTeacher.
func (c *KcClassTeacherClient) Delete() *KcClassTeacherDelete {
	mutation := newKcClassTeacherMutation(c.config, OpDelete)
	return &KcClassTeacherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcClassTeacherClient) DeleteOne(kct *KcClassTeacher) *KcClassTeacherDeleteOne {
	return c.DeleteOneID(kct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcClassTeacherClient) DeleteOneID(id int) *KcClassTeacherDeleteOne {
	builder := c.Delete().Where(kcclassteacher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcClassTeacherDeleteOne{builder}
}

// Query returns a query builder for KcClassTeacher.
func (c *KcClassTeacherClient) Query() *KcClassTeacherQuery {
	return &KcClassTeacherQuery{
		config: c.config,
	}
}

// Get returns a KcClassTeacher entity by its id.
func (c *KcClassTeacherClient) Get(ctx context.Context, id int) (*KcClassTeacher, error) {
	return c.Query().Where(kcclassteacher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcClassTeacherClient) GetX(ctx context.Context, id int) *KcClassTeacher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeacher queries the teacher edge of a KcClassTeacher.
func (c *KcClassTeacherClient) QueryTeacher(kct *KcClassTeacher) *TeacherQuery {
	query := &TeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclassteacher.Table, kcclassteacher.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclassteacher.TeacherTable, kcclassteacher.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(kct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a KcClassTeacher.
func (c *KcClassTeacherClient) QueryClass(kct *KcClassTeacher) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclassteacher.Table, kcclassteacher.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclassteacher.ClassTable, kcclassteacher.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(kct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcClassTeacherClient) Hooks() []Hook {
	return c.hooks.KcClassTeacher
}

// KcCourseClient is a client for the KcCourse schema.
type KcCourseClient struct {
	config
}

// NewKcCourseClient returns a client for the KcCourse from the given config.
func NewKcCourseClient(c config) *KcCourseClient {
	return &KcCourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kccourse.Hooks(f(g(h())))`.
func (c *KcCourseClient) Use(hooks ...Hook) {
	c.hooks.KcCourse = append(c.hooks.KcCourse, hooks...)
}

// Create returns a create builder for KcCourse.
func (c *KcCourseClient) Create() *KcCourseCreate {
	mutation := newKcCourseMutation(c.config, OpCreate)
	return &KcCourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcCourse entities.
func (c *KcCourseClient) CreateBulk(builders ...*KcCourseCreate) *KcCourseCreateBulk {
	return &KcCourseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcCourse.
func (c *KcCourseClient) Update() *KcCourseUpdate {
	mutation := newKcCourseMutation(c.config, OpUpdate)
	return &KcCourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcCourseClient) UpdateOne(kc *KcCourse) *KcCourseUpdateOne {
	mutation := newKcCourseMutation(c.config, OpUpdateOne, withKcCourse(kc))
	return &KcCourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcCourseClient) UpdateOneID(id int) *KcCourseUpdateOne {
	mutation := newKcCourseMutation(c.config, OpUpdateOne, withKcCourseID(id))
	return &KcCourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcCourse.
func (c *KcCourseClient) Delete() *KcCourseDelete {
	mutation := newKcCourseMutation(c.config, OpDelete)
	return &KcCourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcCourseClient) DeleteOne(kc *KcCourse) *KcCourseDeleteOne {
	return c.DeleteOneID(kc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcCourseClient) DeleteOneID(id int) *KcCourseDeleteOne {
	builder := c.Delete().Where(kccourse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcCourseDeleteOne{builder}
}

// Query returns a query builder for KcCourse.
func (c *KcCourseClient) Query() *KcCourseQuery {
	return &KcCourseQuery{
		config: c.config,
	}
}

// Get returns a KcCourse entity by its id.
func (c *KcCourseClient) Get(ctx context.Context, id int) (*KcCourse, error) {
	return c.Query().Where(kccourse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcCourseClient) GetX(ctx context.Context, id int) *KcCourse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMajor queries the major edge of a KcCourse.
func (c *KcCourseClient) QueryMajor(kc *KcCourse) *MajorQuery {
	query := &MajorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(major.Table, major.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, kccourse.MajorTable, kccourse.MajorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItem queries the item edge of a KcCourse.
func (c *KcCourseClient) QueryItem(kc *KcCourse) *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccourse.ItemTable, kccourse.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a KcCourse.
func (c *KcCourseClient) QueryCity(kc *KcCourse) *CityQuery {
	query := &CityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccourse.CityTable, kccourse.CityColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a KcCourse.
func (c *KcCourseClient) QueryAdmin(kc *KcCourse) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccourse.AdminTable, kccourse.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestionBank queries the question_bank edge of a KcCourse.
func (c *KcCourseClient) QueryQuestionBank(kc *KcCourse) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccourse.QuestionBankTable, kccourse.QuestionBankColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachment queries the attachment edge of a KcCourse.
func (c *KcCourseClient) QueryAttachment(kc *KcCourse) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccourse.AttachmentTable, kccourse.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseTeachers queries the course_teachers edge of a KcCourse.
func (c *KcCourseClient) QueryCourseTeachers(kc *KcCourse) *KcCourseTeacherQuery {
	query := &KcCourseTeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(kccourseteacher.Table, kccourseteacher.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccourse.CourseTeachersTable, kccourse.CourseTeachersColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClasses queries the classes edge of a KcCourse.
func (c *KcCourseClient) QueryClasses(kc *KcCourse) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, kccourse.ClassesTable, kccourse.ClassesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseSmallCategorys queries the course_small_categorys edge of a KcCourse.
func (c *KcCourseClient) QueryCourseSmallCategorys(kc *KcCourse) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccourse.CourseSmallCategorysTable, kccourse.CourseSmallCategorysColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseAppraise queries the course_appraise edge of a KcCourse.
func (c *KcCourseClient) QueryCourseAppraise(kc *KcCourse) *UserCourseAppraiseQuery {
	query := &UserCourseAppraiseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(usercourseappraise.Table, usercourseappraise.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccourse.CourseAppraiseTable, kccourse.CourseAppraiseColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseChapters queries the course_chapters edge of a KcCourse.
func (c *KcCourseClient) QueryCourseChapters(kc *KcCourse) *KcCourseChapterQuery {
	query := &KcCourseChapterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(kccoursechapter.Table, kccoursechapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccourse.CourseChaptersTable, kccourse.CourseChaptersColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKcUserCourses queries the kc_user_courses edge of a KcCourse.
func (c *KcCourseClient) QueryKcUserCourses(kc *KcCourse) *KcUserCourseQuery {
	query := &KcUserCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(kcusercourse.Table, kcusercourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccourse.KcUserCoursesTable, kccourse.KcUserCoursesColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessageCourses queries the message_courses edge of a KcCourse.
func (c *KcCourseClient) QueryMessageCourses(kc *KcCourse) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourse.Table, kccourse.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccourse.MessageCoursesTable, kccourse.MessageCoursesColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcCourseClient) Hooks() []Hook {
	hooks := c.hooks.KcCourse
	return append(hooks[:len(hooks):len(hooks)], kccourse.Hooks[:]...)
}

// KcCourseChapterClient is a client for the KcCourseChapter schema.
type KcCourseChapterClient struct {
	config
}

// NewKcCourseChapterClient returns a client for the KcCourseChapter from the given config.
func NewKcCourseChapterClient(c config) *KcCourseChapterClient {
	return &KcCourseChapterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kccoursechapter.Hooks(f(g(h())))`.
func (c *KcCourseChapterClient) Use(hooks ...Hook) {
	c.hooks.KcCourseChapter = append(c.hooks.KcCourseChapter, hooks...)
}

// Create returns a create builder for KcCourseChapter.
func (c *KcCourseChapterClient) Create() *KcCourseChapterCreate {
	mutation := newKcCourseChapterMutation(c.config, OpCreate)
	return &KcCourseChapterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcCourseChapter entities.
func (c *KcCourseChapterClient) CreateBulk(builders ...*KcCourseChapterCreate) *KcCourseChapterCreateBulk {
	return &KcCourseChapterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcCourseChapter.
func (c *KcCourseChapterClient) Update() *KcCourseChapterUpdate {
	mutation := newKcCourseChapterMutation(c.config, OpUpdate)
	return &KcCourseChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcCourseChapterClient) UpdateOne(kcc *KcCourseChapter) *KcCourseChapterUpdateOne {
	mutation := newKcCourseChapterMutation(c.config, OpUpdateOne, withKcCourseChapter(kcc))
	return &KcCourseChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcCourseChapterClient) UpdateOneID(id int) *KcCourseChapterUpdateOne {
	mutation := newKcCourseChapterMutation(c.config, OpUpdateOne, withKcCourseChapterID(id))
	return &KcCourseChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcCourseChapter.
func (c *KcCourseChapterClient) Delete() *KcCourseChapterDelete {
	mutation := newKcCourseChapterMutation(c.config, OpDelete)
	return &KcCourseChapterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcCourseChapterClient) DeleteOne(kcc *KcCourseChapter) *KcCourseChapterDeleteOne {
	return c.DeleteOneID(kcc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcCourseChapterClient) DeleteOneID(id int) *KcCourseChapterDeleteOne {
	builder := c.Delete().Where(kccoursechapter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcCourseChapterDeleteOne{builder}
}

// Query returns a query builder for KcCourseChapter.
func (c *KcCourseChapterClient) Query() *KcCourseChapterQuery {
	return &KcCourseChapterQuery{
		config: c.config,
	}
}

// Get returns a KcCourseChapter entity by its id.
func (c *KcCourseChapterClient) Get(ctx context.Context, id int) (*KcCourseChapter, error) {
	return c.Query().Where(kccoursechapter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcCourseChapterClient) GetX(ctx context.Context, id int) *KcCourseChapter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChapterCourse queries the chapter_course edge of a KcCourseChapter.
func (c *KcCourseChapterClient) QueryChapterCourse(kcc *KcCourseChapter) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursechapter.Table, kccoursechapter.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursechapter.ChapterCourseTable, kccoursechapter.ChapterCourseColumn),
		)
		fromV = sqlgraph.Neighbors(kcc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChapterSections queries the chapter_sections edge of a KcCourseChapter.
func (c *KcCourseChapterClient) QueryChapterSections(kcc *KcCourseChapter) *KcCourseSectionQuery {
	query := &KcCourseSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursechapter.Table, kccoursechapter.FieldID, id),
			sqlgraph.To(kccoursesection.Table, kccoursesection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursechapter.ChapterSectionsTable, kccoursechapter.ChapterSectionsColumn),
		)
		fromV = sqlgraph.Neighbors(kcc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseSmallChapters queries the course_small_chapters edge of a KcCourseChapter.
func (c *KcCourseChapterClient) QueryCourseSmallChapters(kcc *KcCourseChapter) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursechapter.Table, kccoursechapter.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursechapter.CourseSmallChaptersTable, kccoursechapter.CourseSmallChaptersColumn),
		)
		fromV = sqlgraph.Neighbors(kcc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcCourseChapterClient) Hooks() []Hook {
	return c.hooks.KcCourseChapter
}

// KcCourseSectionClient is a client for the KcCourseSection schema.
type KcCourseSectionClient struct {
	config
}

// NewKcCourseSectionClient returns a client for the KcCourseSection from the given config.
func NewKcCourseSectionClient(c config) *KcCourseSectionClient {
	return &KcCourseSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kccoursesection.Hooks(f(g(h())))`.
func (c *KcCourseSectionClient) Use(hooks ...Hook) {
	c.hooks.KcCourseSection = append(c.hooks.KcCourseSection, hooks...)
}

// Create returns a create builder for KcCourseSection.
func (c *KcCourseSectionClient) Create() *KcCourseSectionCreate {
	mutation := newKcCourseSectionMutation(c.config, OpCreate)
	return &KcCourseSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcCourseSection entities.
func (c *KcCourseSectionClient) CreateBulk(builders ...*KcCourseSectionCreate) *KcCourseSectionCreateBulk {
	return &KcCourseSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcCourseSection.
func (c *KcCourseSectionClient) Update() *KcCourseSectionUpdate {
	mutation := newKcCourseSectionMutation(c.config, OpUpdate)
	return &KcCourseSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcCourseSectionClient) UpdateOne(kcs *KcCourseSection) *KcCourseSectionUpdateOne {
	mutation := newKcCourseSectionMutation(c.config, OpUpdateOne, withKcCourseSection(kcs))
	return &KcCourseSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcCourseSectionClient) UpdateOneID(id int) *KcCourseSectionUpdateOne {
	mutation := newKcCourseSectionMutation(c.config, OpUpdateOne, withKcCourseSectionID(id))
	return &KcCourseSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcCourseSection.
func (c *KcCourseSectionClient) Delete() *KcCourseSectionDelete {
	mutation := newKcCourseSectionMutation(c.config, OpDelete)
	return &KcCourseSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcCourseSectionClient) DeleteOne(kcs *KcCourseSection) *KcCourseSectionDeleteOne {
	return c.DeleteOneID(kcs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcCourseSectionClient) DeleteOneID(id int) *KcCourseSectionDeleteOne {
	builder := c.Delete().Where(kccoursesection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcCourseSectionDeleteOne{builder}
}

// Query returns a query builder for KcCourseSection.
func (c *KcCourseSectionClient) Query() *KcCourseSectionQuery {
	return &KcCourseSectionQuery{
		config: c.config,
	}
}

// Get returns a KcCourseSection entity by its id.
func (c *KcCourseSectionClient) Get(ctx context.Context, id int) (*KcCourseSection, error) {
	return c.Query().Where(kccoursesection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcCourseSectionClient) GetX(ctx context.Context, id int) *KcCourseSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChapter queries the chapter edge of a KcCourseSection.
func (c *KcCourseSectionClient) QueryChapter(kcs *KcCourseSection) *KcCourseChapterQuery {
	query := &KcCourseChapterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesection.Table, kccoursesection.FieldID, id),
			sqlgraph.To(kccoursechapter.Table, kccoursechapter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursesection.ChapterTable, kccoursesection.ChapterColumn),
		)
		fromV = sqlgraph.Neighbors(kcs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseSmallSections queries the course_small_sections edge of a KcCourseSection.
func (c *KcCourseSectionClient) QueryCourseSmallSections(kcs *KcCourseSection) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesection.Table, kccoursesection.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesection.CourseSmallSectionsTable, kccoursesection.CourseSmallSectionsColumn),
		)
		fromV = sqlgraph.Neighbors(kcs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcCourseSectionClient) Hooks() []Hook {
	return c.hooks.KcCourseSection
}

// KcCourseSmallCategoryClient is a client for the KcCourseSmallCategory schema.
type KcCourseSmallCategoryClient struct {
	config
}

// NewKcCourseSmallCategoryClient returns a client for the KcCourseSmallCategory from the given config.
func NewKcCourseSmallCategoryClient(c config) *KcCourseSmallCategoryClient {
	return &KcCourseSmallCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kccoursesmallcategory.Hooks(f(g(h())))`.
func (c *KcCourseSmallCategoryClient) Use(hooks ...Hook) {
	c.hooks.KcCourseSmallCategory = append(c.hooks.KcCourseSmallCategory, hooks...)
}

// Create returns a create builder for KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) Create() *KcCourseSmallCategoryCreate {
	mutation := newKcCourseSmallCategoryMutation(c.config, OpCreate)
	return &KcCourseSmallCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcCourseSmallCategory entities.
func (c *KcCourseSmallCategoryClient) CreateBulk(builders ...*KcCourseSmallCategoryCreate) *KcCourseSmallCategoryCreateBulk {
	return &KcCourseSmallCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) Update() *KcCourseSmallCategoryUpdate {
	mutation := newKcCourseSmallCategoryMutation(c.config, OpUpdate)
	return &KcCourseSmallCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcCourseSmallCategoryClient) UpdateOne(kcsc *KcCourseSmallCategory) *KcCourseSmallCategoryUpdateOne {
	mutation := newKcCourseSmallCategoryMutation(c.config, OpUpdateOne, withKcCourseSmallCategory(kcsc))
	return &KcCourseSmallCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcCourseSmallCategoryClient) UpdateOneID(id int) *KcCourseSmallCategoryUpdateOne {
	mutation := newKcCourseSmallCategoryMutation(c.config, OpUpdateOne, withKcCourseSmallCategoryID(id))
	return &KcCourseSmallCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) Delete() *KcCourseSmallCategoryDelete {
	mutation := newKcCourseSmallCategoryMutation(c.config, OpDelete)
	return &KcCourseSmallCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcCourseSmallCategoryClient) DeleteOne(kcsc *KcCourseSmallCategory) *KcCourseSmallCategoryDeleteOne {
	return c.DeleteOneID(kcsc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcCourseSmallCategoryClient) DeleteOneID(id int) *KcCourseSmallCategoryDeleteOne {
	builder := c.Delete().Where(kccoursesmallcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcCourseSmallCategoryDeleteOne{builder}
}

// Query returns a query builder for KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) Query() *KcCourseSmallCategoryQuery {
	return &KcCourseSmallCategoryQuery{
		config: c.config,
	}
}

// Get returns a KcCourseSmallCategory entity by its id.
func (c *KcCourseSmallCategoryClient) Get(ctx context.Context, id int) (*KcCourseSmallCategory, error) {
	return c.Query().Where(kccoursesmallcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcCourseSmallCategoryClient) GetX(ctx context.Context, id int) *KcCourseSmallCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCourse queries the course edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QueryCourse(kcsc *KcCourseSmallCategory) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursesmallcategory.CourseTable, kccoursesmallcategory.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChapter queries the chapter edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QueryChapter(kcsc *KcCourseSmallCategory) *KcCourseChapterQuery {
	query := &KcCourseChapterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(kccoursechapter.Table, kccoursechapter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursesmallcategory.ChapterTable, kccoursesmallcategory.ChapterColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySection queries the section edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QuerySection(kcsc *KcCourseSmallCategory) *KcCourseSectionQuery {
	query := &KcCourseSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(kccoursesection.Table, kccoursesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursesmallcategory.SectionTable, kccoursesmallcategory.SectionColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseSmallCategoryAttachments queries the course_small_category_attachments edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QueryCourseSmallCategoryAttachments(kcsc *KcCourseSmallCategory) *KcSmallCategoryAttachmentQuery {
	query := &KcSmallCategoryAttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(kcsmallcategoryattachment.Table, kcsmallcategoryattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.CourseSmallCategoryAttachmentsTable, kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseSmallCategoryExampapers queries the course_small_category_exampapers edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QueryCourseSmallCategoryExampapers(kcsc *KcCourseSmallCategory) *KcSmallCategoryExamPaperQuery {
	query := &KcSmallCategoryExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(kcsmallcategoryexampaper.Table, kcsmallcategoryexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.CourseSmallCategoryExampapersTable, kccoursesmallcategory.CourseSmallCategoryExampapersColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseSmallCategoryQuestions queries the course_small_category_questions edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QueryCourseSmallCategoryQuestions(kcsc *KcCourseSmallCategory) *KcSmallCategoryQuestionQuery {
	query := &KcSmallCategoryQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(kcsmallcategoryquestion.Table, kcsmallcategoryquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.CourseSmallCategoryQuestionsTable, kccoursesmallcategory.CourseSmallCategoryQuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseAppraiseSmalls queries the course_appraise_smalls edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QueryCourseAppraiseSmalls(kcsc *KcCourseSmallCategory) *UserCourseAppraiseQuery {
	query := &UserCourseAppraiseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(usercourseappraise.Table, usercourseappraise.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.CourseAppraiseSmallsTable, kccoursesmallcategory.CourseAppraiseSmallsColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideoRecordSmall queries the video_record_small edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QueryVideoRecordSmall(kcsc *KcCourseSmallCategory) *VideoRecordQuery {
	query := &VideoRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(videorecord.Table, videorecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.VideoRecordSmallTable, kccoursesmallcategory.VideoRecordSmallColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCsAttachment queries the cs_attachment edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QueryCsAttachment(kcsc *KcCourseSmallCategory) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, kccoursesmallcategory.CsAttachmentTable, kccoursesmallcategory.CsAttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOdAttachment queries the od_attachment edge of a KcCourseSmallCategory.
func (c *KcCourseSmallCategoryClient) QueryOdAttachment(kcsc *KcCourseSmallCategory) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kcsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, kccoursesmallcategory.OdAttachmentTable, kccoursesmallcategory.OdAttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(kcsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcCourseSmallCategoryClient) Hooks() []Hook {
	hooks := c.hooks.KcCourseSmallCategory
	return append(hooks[:len(hooks):len(hooks)], kccoursesmallcategory.Hooks[:]...)
}

// KcCourseTeacherClient is a client for the KcCourseTeacher schema.
type KcCourseTeacherClient struct {
	config
}

// NewKcCourseTeacherClient returns a client for the KcCourseTeacher from the given config.
func NewKcCourseTeacherClient(c config) *KcCourseTeacherClient {
	return &KcCourseTeacherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kccourseteacher.Hooks(f(g(h())))`.
func (c *KcCourseTeacherClient) Use(hooks ...Hook) {
	c.hooks.KcCourseTeacher = append(c.hooks.KcCourseTeacher, hooks...)
}

// Create returns a create builder for KcCourseTeacher.
func (c *KcCourseTeacherClient) Create() *KcCourseTeacherCreate {
	mutation := newKcCourseTeacherMutation(c.config, OpCreate)
	return &KcCourseTeacherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcCourseTeacher entities.
func (c *KcCourseTeacherClient) CreateBulk(builders ...*KcCourseTeacherCreate) *KcCourseTeacherCreateBulk {
	return &KcCourseTeacherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcCourseTeacher.
func (c *KcCourseTeacherClient) Update() *KcCourseTeacherUpdate {
	mutation := newKcCourseTeacherMutation(c.config, OpUpdate)
	return &KcCourseTeacherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcCourseTeacherClient) UpdateOne(kct *KcCourseTeacher) *KcCourseTeacherUpdateOne {
	mutation := newKcCourseTeacherMutation(c.config, OpUpdateOne, withKcCourseTeacher(kct))
	return &KcCourseTeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcCourseTeacherClient) UpdateOneID(id int) *KcCourseTeacherUpdateOne {
	mutation := newKcCourseTeacherMutation(c.config, OpUpdateOne, withKcCourseTeacherID(id))
	return &KcCourseTeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcCourseTeacher.
func (c *KcCourseTeacherClient) Delete() *KcCourseTeacherDelete {
	mutation := newKcCourseTeacherMutation(c.config, OpDelete)
	return &KcCourseTeacherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcCourseTeacherClient) DeleteOne(kct *KcCourseTeacher) *KcCourseTeacherDeleteOne {
	return c.DeleteOneID(kct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcCourseTeacherClient) DeleteOneID(id int) *KcCourseTeacherDeleteOne {
	builder := c.Delete().Where(kccourseteacher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcCourseTeacherDeleteOne{builder}
}

// Query returns a query builder for KcCourseTeacher.
func (c *KcCourseTeacherClient) Query() *KcCourseTeacherQuery {
	return &KcCourseTeacherQuery{
		config: c.config,
	}
}

// Get returns a KcCourseTeacher entity by its id.
func (c *KcCourseTeacherClient) Get(ctx context.Context, id int) (*KcCourseTeacher, error) {
	return c.Query().Where(kccourseteacher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcCourseTeacherClient) GetX(ctx context.Context, id int) *KcCourseTeacher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeacher queries the teacher edge of a KcCourseTeacher.
func (c *KcCourseTeacherClient) QueryTeacher(kct *KcCourseTeacher) *TeacherQuery {
	query := &TeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourseteacher.Table, kccourseteacher.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccourseteacher.TeacherTable, kccourseteacher.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(kct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a KcCourseTeacher.
func (c *KcCourseTeacherClient) QueryCourse(kct *KcCourseTeacher) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kccourseteacher.Table, kccourseteacher.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccourseteacher.CourseTable, kccourseteacher.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(kct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcCourseTeacherClient) Hooks() []Hook {
	return c.hooks.KcCourseTeacher
}

// KcCourseVideoClient is a client for the KcCourseVideo schema.
type KcCourseVideoClient struct {
	config
}

// NewKcCourseVideoClient returns a client for the KcCourseVideo from the given config.
func NewKcCourseVideoClient(c config) *KcCourseVideoClient {
	return &KcCourseVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kccoursevideo.Hooks(f(g(h())))`.
func (c *KcCourseVideoClient) Use(hooks ...Hook) {
	c.hooks.KcCourseVideo = append(c.hooks.KcCourseVideo, hooks...)
}

// Create returns a create builder for KcCourseVideo.
func (c *KcCourseVideoClient) Create() *KcCourseVideoCreate {
	mutation := newKcCourseVideoMutation(c.config, OpCreate)
	return &KcCourseVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcCourseVideo entities.
func (c *KcCourseVideoClient) CreateBulk(builders ...*KcCourseVideoCreate) *KcCourseVideoCreateBulk {
	return &KcCourseVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcCourseVideo.
func (c *KcCourseVideoClient) Update() *KcCourseVideoUpdate {
	mutation := newKcCourseVideoMutation(c.config, OpUpdate)
	return &KcCourseVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcCourseVideoClient) UpdateOne(kcv *KcCourseVideo) *KcCourseVideoUpdateOne {
	mutation := newKcCourseVideoMutation(c.config, OpUpdateOne, withKcCourseVideo(kcv))
	return &KcCourseVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcCourseVideoClient) UpdateOneID(id int) *KcCourseVideoUpdateOne {
	mutation := newKcCourseVideoMutation(c.config, OpUpdateOne, withKcCourseVideoID(id))
	return &KcCourseVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcCourseVideo.
func (c *KcCourseVideoClient) Delete() *KcCourseVideoDelete {
	mutation := newKcCourseVideoMutation(c.config, OpDelete)
	return &KcCourseVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcCourseVideoClient) DeleteOne(kcv *KcCourseVideo) *KcCourseVideoDeleteOne {
	return c.DeleteOneID(kcv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcCourseVideoClient) DeleteOneID(id int) *KcCourseVideoDeleteOne {
	builder := c.Delete().Where(kccoursevideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcCourseVideoDeleteOne{builder}
}

// Query returns a query builder for KcCourseVideo.
func (c *KcCourseVideoClient) Query() *KcCourseVideoQuery {
	return &KcCourseVideoQuery{
		config: c.config,
	}
}

// Get returns a KcCourseVideo entity by its id.
func (c *KcCourseVideoClient) Get(ctx context.Context, id int) (*KcCourseVideo, error) {
	return c.Query().Where(kccoursevideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcCourseVideoClient) GetX(ctx context.Context, id int) *KcCourseVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *KcCourseVideoClient) Hooks() []Hook {
	return c.hooks.KcCourseVideo
}

// KcSmallCategoryAttachmentClient is a client for the KcSmallCategoryAttachment schema.
type KcSmallCategoryAttachmentClient struct {
	config
}

// NewKcSmallCategoryAttachmentClient returns a client for the KcSmallCategoryAttachment from the given config.
func NewKcSmallCategoryAttachmentClient(c config) *KcSmallCategoryAttachmentClient {
	return &KcSmallCategoryAttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kcsmallcategoryattachment.Hooks(f(g(h())))`.
func (c *KcSmallCategoryAttachmentClient) Use(hooks ...Hook) {
	c.hooks.KcSmallCategoryAttachment = append(c.hooks.KcSmallCategoryAttachment, hooks...)
}

// Create returns a create builder for KcSmallCategoryAttachment.
func (c *KcSmallCategoryAttachmentClient) Create() *KcSmallCategoryAttachmentCreate {
	mutation := newKcSmallCategoryAttachmentMutation(c.config, OpCreate)
	return &KcSmallCategoryAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcSmallCategoryAttachment entities.
func (c *KcSmallCategoryAttachmentClient) CreateBulk(builders ...*KcSmallCategoryAttachmentCreate) *KcSmallCategoryAttachmentCreateBulk {
	return &KcSmallCategoryAttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcSmallCategoryAttachment.
func (c *KcSmallCategoryAttachmentClient) Update() *KcSmallCategoryAttachmentUpdate {
	mutation := newKcSmallCategoryAttachmentMutation(c.config, OpUpdate)
	return &KcSmallCategoryAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcSmallCategoryAttachmentClient) UpdateOne(ksca *KcSmallCategoryAttachment) *KcSmallCategoryAttachmentUpdateOne {
	mutation := newKcSmallCategoryAttachmentMutation(c.config, OpUpdateOne, withKcSmallCategoryAttachment(ksca))
	return &KcSmallCategoryAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcSmallCategoryAttachmentClient) UpdateOneID(id int) *KcSmallCategoryAttachmentUpdateOne {
	mutation := newKcSmallCategoryAttachmentMutation(c.config, OpUpdateOne, withKcSmallCategoryAttachmentID(id))
	return &KcSmallCategoryAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcSmallCategoryAttachment.
func (c *KcSmallCategoryAttachmentClient) Delete() *KcSmallCategoryAttachmentDelete {
	mutation := newKcSmallCategoryAttachmentMutation(c.config, OpDelete)
	return &KcSmallCategoryAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcSmallCategoryAttachmentClient) DeleteOne(ksca *KcSmallCategoryAttachment) *KcSmallCategoryAttachmentDeleteOne {
	return c.DeleteOneID(ksca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcSmallCategoryAttachmentClient) DeleteOneID(id int) *KcSmallCategoryAttachmentDeleteOne {
	builder := c.Delete().Where(kcsmallcategoryattachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcSmallCategoryAttachmentDeleteOne{builder}
}

// Query returns a query builder for KcSmallCategoryAttachment.
func (c *KcSmallCategoryAttachmentClient) Query() *KcSmallCategoryAttachmentQuery {
	return &KcSmallCategoryAttachmentQuery{
		config: c.config,
	}
}

// Get returns a KcSmallCategoryAttachment entity by its id.
func (c *KcSmallCategoryAttachmentClient) Get(ctx context.Context, id int) (*KcSmallCategoryAttachment, error) {
	return c.Query().Where(kcsmallcategoryattachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcSmallCategoryAttachmentClient) GetX(ctx context.Context, id int) *KcSmallCategoryAttachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachment queries the attachment edge of a KcSmallCategoryAttachment.
func (c *KcSmallCategoryAttachmentClient) QueryAttachment(ksca *KcSmallCategoryAttachment) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ksca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcsmallcategoryattachment.Table, kcsmallcategoryattachment.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcsmallcategoryattachment.AttachmentTable, kcsmallcategoryattachment.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(ksca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySmallCategory queries the small_category edge of a KcSmallCategoryAttachment.
func (c *KcSmallCategoryAttachmentClient) QuerySmallCategory(ksca *KcSmallCategoryAttachment) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ksca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcsmallcategoryattachment.Table, kcsmallcategoryattachment.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcsmallcategoryattachment.SmallCategoryTable, kcsmallcategoryattachment.SmallCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(ksca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcSmallCategoryAttachmentClient) Hooks() []Hook {
	hooks := c.hooks.KcSmallCategoryAttachment
	return append(hooks[:len(hooks):len(hooks)], kcsmallcategoryattachment.Hooks[:]...)
}

// KcSmallCategoryExamPaperClient is a client for the KcSmallCategoryExamPaper schema.
type KcSmallCategoryExamPaperClient struct {
	config
}

// NewKcSmallCategoryExamPaperClient returns a client for the KcSmallCategoryExamPaper from the given config.
func NewKcSmallCategoryExamPaperClient(c config) *KcSmallCategoryExamPaperClient {
	return &KcSmallCategoryExamPaperClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kcsmallcategoryexampaper.Hooks(f(g(h())))`.
func (c *KcSmallCategoryExamPaperClient) Use(hooks ...Hook) {
	c.hooks.KcSmallCategoryExamPaper = append(c.hooks.KcSmallCategoryExamPaper, hooks...)
}

// Create returns a create builder for KcSmallCategoryExamPaper.
func (c *KcSmallCategoryExamPaperClient) Create() *KcSmallCategoryExamPaperCreate {
	mutation := newKcSmallCategoryExamPaperMutation(c.config, OpCreate)
	return &KcSmallCategoryExamPaperCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcSmallCategoryExamPaper entities.
func (c *KcSmallCategoryExamPaperClient) CreateBulk(builders ...*KcSmallCategoryExamPaperCreate) *KcSmallCategoryExamPaperCreateBulk {
	return &KcSmallCategoryExamPaperCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcSmallCategoryExamPaper.
func (c *KcSmallCategoryExamPaperClient) Update() *KcSmallCategoryExamPaperUpdate {
	mutation := newKcSmallCategoryExamPaperMutation(c.config, OpUpdate)
	return &KcSmallCategoryExamPaperUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcSmallCategoryExamPaperClient) UpdateOne(kscep *KcSmallCategoryExamPaper) *KcSmallCategoryExamPaperUpdateOne {
	mutation := newKcSmallCategoryExamPaperMutation(c.config, OpUpdateOne, withKcSmallCategoryExamPaper(kscep))
	return &KcSmallCategoryExamPaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcSmallCategoryExamPaperClient) UpdateOneID(id int) *KcSmallCategoryExamPaperUpdateOne {
	mutation := newKcSmallCategoryExamPaperMutation(c.config, OpUpdateOne, withKcSmallCategoryExamPaperID(id))
	return &KcSmallCategoryExamPaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcSmallCategoryExamPaper.
func (c *KcSmallCategoryExamPaperClient) Delete() *KcSmallCategoryExamPaperDelete {
	mutation := newKcSmallCategoryExamPaperMutation(c.config, OpDelete)
	return &KcSmallCategoryExamPaperDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcSmallCategoryExamPaperClient) DeleteOne(kscep *KcSmallCategoryExamPaper) *KcSmallCategoryExamPaperDeleteOne {
	return c.DeleteOneID(kscep.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcSmallCategoryExamPaperClient) DeleteOneID(id int) *KcSmallCategoryExamPaperDeleteOne {
	builder := c.Delete().Where(kcsmallcategoryexampaper.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcSmallCategoryExamPaperDeleteOne{builder}
}

// Query returns a query builder for KcSmallCategoryExamPaper.
func (c *KcSmallCategoryExamPaperClient) Query() *KcSmallCategoryExamPaperQuery {
	return &KcSmallCategoryExamPaperQuery{
		config: c.config,
	}
}

// Get returns a KcSmallCategoryExamPaper entity by its id.
func (c *KcSmallCategoryExamPaperClient) Get(ctx context.Context, id int) (*KcSmallCategoryExamPaper, error) {
	return c.Query().Where(kcsmallcategoryexampaper.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcSmallCategoryExamPaperClient) GetX(ctx context.Context, id int) *KcSmallCategoryExamPaper {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExamPaper queries the exam_paper edge of a KcSmallCategoryExamPaper.
func (c *KcSmallCategoryExamPaperClient) QueryExamPaper(kscep *KcSmallCategoryExamPaper) *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kscep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcsmallcategoryexampaper.Table, kcsmallcategoryexampaper.FieldID, id),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcsmallcategoryexampaper.ExamPaperTable, kcsmallcategoryexampaper.ExamPaperColumn),
		)
		fromV = sqlgraph.Neighbors(kscep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseSmallCategory queries the course_small_category edge of a KcSmallCategoryExamPaper.
func (c *KcSmallCategoryExamPaperClient) QueryCourseSmallCategory(kscep *KcSmallCategoryExamPaper) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kscep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcsmallcategoryexampaper.Table, kcsmallcategoryexampaper.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcsmallcategoryexampaper.CourseSmallCategoryTable, kcsmallcategoryexampaper.CourseSmallCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(kscep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcSmallCategoryExamPaperClient) Hooks() []Hook {
	hooks := c.hooks.KcSmallCategoryExamPaper
	return append(hooks[:len(hooks):len(hooks)], kcsmallcategoryexampaper.Hooks[:]...)
}

// KcSmallCategoryQuestionClient is a client for the KcSmallCategoryQuestion schema.
type KcSmallCategoryQuestionClient struct {
	config
}

// NewKcSmallCategoryQuestionClient returns a client for the KcSmallCategoryQuestion from the given config.
func NewKcSmallCategoryQuestionClient(c config) *KcSmallCategoryQuestionClient {
	return &KcSmallCategoryQuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kcsmallcategoryquestion.Hooks(f(g(h())))`.
func (c *KcSmallCategoryQuestionClient) Use(hooks ...Hook) {
	c.hooks.KcSmallCategoryQuestion = append(c.hooks.KcSmallCategoryQuestion, hooks...)
}

// Create returns a create builder for KcSmallCategoryQuestion.
func (c *KcSmallCategoryQuestionClient) Create() *KcSmallCategoryQuestionCreate {
	mutation := newKcSmallCategoryQuestionMutation(c.config, OpCreate)
	return &KcSmallCategoryQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcSmallCategoryQuestion entities.
func (c *KcSmallCategoryQuestionClient) CreateBulk(builders ...*KcSmallCategoryQuestionCreate) *KcSmallCategoryQuestionCreateBulk {
	return &KcSmallCategoryQuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcSmallCategoryQuestion.
func (c *KcSmallCategoryQuestionClient) Update() *KcSmallCategoryQuestionUpdate {
	mutation := newKcSmallCategoryQuestionMutation(c.config, OpUpdate)
	return &KcSmallCategoryQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcSmallCategoryQuestionClient) UpdateOne(kscq *KcSmallCategoryQuestion) *KcSmallCategoryQuestionUpdateOne {
	mutation := newKcSmallCategoryQuestionMutation(c.config, OpUpdateOne, withKcSmallCategoryQuestion(kscq))
	return &KcSmallCategoryQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcSmallCategoryQuestionClient) UpdateOneID(id int) *KcSmallCategoryQuestionUpdateOne {
	mutation := newKcSmallCategoryQuestionMutation(c.config, OpUpdateOne, withKcSmallCategoryQuestionID(id))
	return &KcSmallCategoryQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcSmallCategoryQuestion.
func (c *KcSmallCategoryQuestionClient) Delete() *KcSmallCategoryQuestionDelete {
	mutation := newKcSmallCategoryQuestionMutation(c.config, OpDelete)
	return &KcSmallCategoryQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcSmallCategoryQuestionClient) DeleteOne(kscq *KcSmallCategoryQuestion) *KcSmallCategoryQuestionDeleteOne {
	return c.DeleteOneID(kscq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcSmallCategoryQuestionClient) DeleteOneID(id int) *KcSmallCategoryQuestionDeleteOne {
	builder := c.Delete().Where(kcsmallcategoryquestion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcSmallCategoryQuestionDeleteOne{builder}
}

// Query returns a query builder for KcSmallCategoryQuestion.
func (c *KcSmallCategoryQuestionClient) Query() *KcSmallCategoryQuestionQuery {
	return &KcSmallCategoryQuestionQuery{
		config: c.config,
	}
}

// Get returns a KcSmallCategoryQuestion entity by its id.
func (c *KcSmallCategoryQuestionClient) Get(ctx context.Context, id int) (*KcSmallCategoryQuestion, error) {
	return c.Query().Where(kcsmallcategoryquestion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcSmallCategoryQuestionClient) GetX(ctx context.Context, id int) *KcSmallCategoryQuestion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestion queries the question edge of a KcSmallCategoryQuestion.
func (c *KcSmallCategoryQuestionClient) QueryQuestion(kscq *KcSmallCategoryQuestion) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kscq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcsmallcategoryquestion.Table, kcsmallcategoryquestion.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcsmallcategoryquestion.QuestionTable, kcsmallcategoryquestion.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(kscq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseSmallCategory queries the course_small_category edge of a KcSmallCategoryQuestion.
func (c *KcSmallCategoryQuestionClient) QueryCourseSmallCategory(kscq *KcSmallCategoryQuestion) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kscq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcsmallcategoryquestion.Table, kcsmallcategoryquestion.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcsmallcategoryquestion.CourseSmallCategoryTable, kcsmallcategoryquestion.CourseSmallCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(kscq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcSmallCategoryQuestionClient) Hooks() []Hook {
	hooks := c.hooks.KcSmallCategoryQuestion
	return append(hooks[:len(hooks):len(hooks)], kcsmallcategoryquestion.Hooks[:]...)
}

// KcUserClassClient is a client for the KcUserClass schema.
type KcUserClassClient struct {
	config
}

// NewKcUserClassClient returns a client for the KcUserClass from the given config.
func NewKcUserClassClient(c config) *KcUserClassClient {
	return &KcUserClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kcuserclass.Hooks(f(g(h())))`.
func (c *KcUserClassClient) Use(hooks ...Hook) {
	c.hooks.KcUserClass = append(c.hooks.KcUserClass, hooks...)
}

// Create returns a create builder for KcUserClass.
func (c *KcUserClassClient) Create() *KcUserClassCreate {
	mutation := newKcUserClassMutation(c.config, OpCreate)
	return &KcUserClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcUserClass entities.
func (c *KcUserClassClient) CreateBulk(builders ...*KcUserClassCreate) *KcUserClassCreateBulk {
	return &KcUserClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcUserClass.
func (c *KcUserClassClient) Update() *KcUserClassUpdate {
	mutation := newKcUserClassMutation(c.config, OpUpdate)
	return &KcUserClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcUserClassClient) UpdateOne(kuc *KcUserClass) *KcUserClassUpdateOne {
	mutation := newKcUserClassMutation(c.config, OpUpdateOne, withKcUserClass(kuc))
	return &KcUserClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcUserClassClient) UpdateOneID(id int) *KcUserClassUpdateOne {
	mutation := newKcUserClassMutation(c.config, OpUpdateOne, withKcUserClassID(id))
	return &KcUserClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcUserClass.
func (c *KcUserClassClient) Delete() *KcUserClassDelete {
	mutation := newKcUserClassMutation(c.config, OpDelete)
	return &KcUserClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcUserClassClient) DeleteOne(kuc *KcUserClass) *KcUserClassDeleteOne {
	return c.DeleteOneID(kuc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcUserClassClient) DeleteOneID(id int) *KcUserClassDeleteOne {
	builder := c.Delete().Where(kcuserclass.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcUserClassDeleteOne{builder}
}

// Query returns a query builder for KcUserClass.
func (c *KcUserClassClient) Query() *KcUserClassQuery {
	return &KcUserClassQuery{
		config: c.config,
	}
}

// Get returns a KcUserClass entity by its id.
func (c *KcUserClassClient) Get(ctx context.Context, id int) (*KcUserClass, error) {
	return c.Query().Where(kcuserclass.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcUserClassClient) GetX(ctx context.Context, id int) *KcUserClass {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a KcUserClass.
func (c *KcUserClassClient) QueryUser(kuc *KcUserClass) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kuc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcuserclass.Table, kcuserclass.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcuserclass.UserTable, kcuserclass.UserColumn),
		)
		fromV = sqlgraph.Neighbors(kuc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a KcUserClass.
func (c *KcUserClassClient) QueryClass(kuc *KcUserClass) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kuc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcuserclass.Table, kcuserclass.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcuserclass.ClassTable, kcuserclass.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(kuc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcUserClassClient) Hooks() []Hook {
	hooks := c.hooks.KcUserClass
	return append(hooks[:len(hooks):len(hooks)], kcuserclass.Hooks[:]...)
}

// KcUserCourseClient is a client for the KcUserCourse schema.
type KcUserCourseClient struct {
	config
}

// NewKcUserCourseClient returns a client for the KcUserCourse from the given config.
func NewKcUserCourseClient(c config) *KcUserCourseClient {
	return &KcUserCourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kcusercourse.Hooks(f(g(h())))`.
func (c *KcUserCourseClient) Use(hooks ...Hook) {
	c.hooks.KcUserCourse = append(c.hooks.KcUserCourse, hooks...)
}

// Create returns a create builder for KcUserCourse.
func (c *KcUserCourseClient) Create() *KcUserCourseCreate {
	mutation := newKcUserCourseMutation(c.config, OpCreate)
	return &KcUserCourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcUserCourse entities.
func (c *KcUserCourseClient) CreateBulk(builders ...*KcUserCourseCreate) *KcUserCourseCreateBulk {
	return &KcUserCourseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcUserCourse.
func (c *KcUserCourseClient) Update() *KcUserCourseUpdate {
	mutation := newKcUserCourseMutation(c.config, OpUpdate)
	return &KcUserCourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcUserCourseClient) UpdateOne(kuc *KcUserCourse) *KcUserCourseUpdateOne {
	mutation := newKcUserCourseMutation(c.config, OpUpdateOne, withKcUserCourse(kuc))
	return &KcUserCourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcUserCourseClient) UpdateOneID(id int) *KcUserCourseUpdateOne {
	mutation := newKcUserCourseMutation(c.config, OpUpdateOne, withKcUserCourseID(id))
	return &KcUserCourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcUserCourse.
func (c *KcUserCourseClient) Delete() *KcUserCourseDelete {
	mutation := newKcUserCourseMutation(c.config, OpDelete)
	return &KcUserCourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcUserCourseClient) DeleteOne(kuc *KcUserCourse) *KcUserCourseDeleteOne {
	return c.DeleteOneID(kuc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcUserCourseClient) DeleteOneID(id int) *KcUserCourseDeleteOne {
	builder := c.Delete().Where(kcusercourse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcUserCourseDeleteOne{builder}
}

// Query returns a query builder for KcUserCourse.
func (c *KcUserCourseClient) Query() *KcUserCourseQuery {
	return &KcUserCourseQuery{
		config: c.config,
	}
}

// Get returns a KcUserCourse entity by its id.
func (c *KcUserCourseClient) Get(ctx context.Context, id int) (*KcUserCourse, error) {
	return c.Query().Where(kcusercourse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcUserCourseClient) GetX(ctx context.Context, id int) *KcUserCourse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a KcUserCourse.
func (c *KcUserCourseClient) QueryUser(kuc *KcUserCourse) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kuc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcusercourse.Table, kcusercourse.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcusercourse.UserTable, kcusercourse.UserColumn),
		)
		fromV = sqlgraph.Neighbors(kuc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a KcUserCourse.
func (c *KcUserCourseClient) QueryCourse(kuc *KcUserCourse) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kuc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcusercourse.Table, kcusercourse.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcusercourse.CourseTable, kcusercourse.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(kuc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcUserCourseClient) Hooks() []Hook {
	hooks := c.hooks.KcUserCourse
	return append(hooks[:len(hooks):len(hooks)], kcusercourse.Hooks[:]...)
}

// KcVideoUploadTaskClient is a client for the KcVideoUploadTask schema.
type KcVideoUploadTaskClient struct {
	config
}

// NewKcVideoUploadTaskClient returns a client for the KcVideoUploadTask from the given config.
func NewKcVideoUploadTaskClient(c config) *KcVideoUploadTaskClient {
	return &KcVideoUploadTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kcvideouploadtask.Hooks(f(g(h())))`.
func (c *KcVideoUploadTaskClient) Use(hooks ...Hook) {
	c.hooks.KcVideoUploadTask = append(c.hooks.KcVideoUploadTask, hooks...)
}

// Create returns a create builder for KcVideoUploadTask.
func (c *KcVideoUploadTaskClient) Create() *KcVideoUploadTaskCreate {
	mutation := newKcVideoUploadTaskMutation(c.config, OpCreate)
	return &KcVideoUploadTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KcVideoUploadTask entities.
func (c *KcVideoUploadTaskClient) CreateBulk(builders ...*KcVideoUploadTaskCreate) *KcVideoUploadTaskCreateBulk {
	return &KcVideoUploadTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KcVideoUploadTask.
func (c *KcVideoUploadTaskClient) Update() *KcVideoUploadTaskUpdate {
	mutation := newKcVideoUploadTaskMutation(c.config, OpUpdate)
	return &KcVideoUploadTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KcVideoUploadTaskClient) UpdateOne(kvut *KcVideoUploadTask) *KcVideoUploadTaskUpdateOne {
	mutation := newKcVideoUploadTaskMutation(c.config, OpUpdateOne, withKcVideoUploadTask(kvut))
	return &KcVideoUploadTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KcVideoUploadTaskClient) UpdateOneID(id int) *KcVideoUploadTaskUpdateOne {
	mutation := newKcVideoUploadTaskMutation(c.config, OpUpdateOne, withKcVideoUploadTaskID(id))
	return &KcVideoUploadTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KcVideoUploadTask.
func (c *KcVideoUploadTaskClient) Delete() *KcVideoUploadTaskDelete {
	mutation := newKcVideoUploadTaskMutation(c.config, OpDelete)
	return &KcVideoUploadTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KcVideoUploadTaskClient) DeleteOne(kvut *KcVideoUploadTask) *KcVideoUploadTaskDeleteOne {
	return c.DeleteOneID(kvut.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KcVideoUploadTaskClient) DeleteOneID(id int) *KcVideoUploadTaskDeleteOne {
	builder := c.Delete().Where(kcvideouploadtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KcVideoUploadTaskDeleteOne{builder}
}

// Query returns a query builder for KcVideoUploadTask.
func (c *KcVideoUploadTaskClient) Query() *KcVideoUploadTaskQuery {
	return &KcVideoUploadTaskQuery{
		config: c.config,
	}
}

// Get returns a KcVideoUploadTask entity by its id.
func (c *KcVideoUploadTaskClient) Get(ctx context.Context, id int) (*KcVideoUploadTask, error) {
	return c.Query().Where(kcvideouploadtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KcVideoUploadTaskClient) GetX(ctx context.Context, id int) *KcVideoUploadTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachment queries the attachment edge of a KcVideoUploadTask.
func (c *KcVideoUploadTaskClient) QueryAttachment(kvut *KcVideoUploadTask) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kvut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kcvideouploadtask.Table, kcvideouploadtask.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcvideouploadtask.AttachmentTable, kcvideouploadtask.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(kvut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KcVideoUploadTaskClient) Hooks() []Hook {
	hooks := c.hooks.KcVideoUploadTask
	return append(hooks[:len(hooks):len(hooks)], kcvideouploadtask.Hooks[:]...)
}

// MajorClient is a client for the Major schema.
type MajorClient struct {
	config
}

// NewMajorClient returns a client for the Major from the given config.
func NewMajorClient(c config) *MajorClient {
	return &MajorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `major.Hooks(f(g(h())))`.
func (c *MajorClient) Use(hooks ...Hook) {
	c.hooks.Major = append(c.hooks.Major, hooks...)
}

// Create returns a create builder for Major.
func (c *MajorClient) Create() *MajorCreate {
	mutation := newMajorMutation(c.config, OpCreate)
	return &MajorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Major entities.
func (c *MajorClient) CreateBulk(builders ...*MajorCreate) *MajorCreateBulk {
	return &MajorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Major.
func (c *MajorClient) Update() *MajorUpdate {
	mutation := newMajorMutation(c.config, OpUpdate)
	return &MajorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MajorClient) UpdateOne(m *Major) *MajorUpdateOne {
	mutation := newMajorMutation(c.config, OpUpdateOne, withMajor(m))
	return &MajorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MajorClient) UpdateOneID(id int) *MajorUpdateOne {
	mutation := newMajorMutation(c.config, OpUpdateOne, withMajorID(id))
	return &MajorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Major.
func (c *MajorClient) Delete() *MajorDelete {
	mutation := newMajorMutation(c.config, OpDelete)
	return &MajorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MajorClient) DeleteOne(m *Major) *MajorDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MajorClient) DeleteOneID(id int) *MajorDeleteOne {
	builder := c.Delete().Where(major.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MajorDeleteOne{builder}
}

// Query returns a query builder for Major.
func (c *MajorClient) Query() *MajorQuery {
	return &MajorQuery{
		config: c.config,
	}
}

// Get returns a Major entity by its id.
func (c *MajorClient) Get(ctx context.Context, id int) (*Major, error) {
	return c.Query().Where(major.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MajorClient) GetX(ctx context.Context, id int) *Major {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeachers queries the teachers edge of a Major.
func (c *MajorClient) QueryTeachers(m *Major) *TeacherQuery {
	query := &TeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(major.Table, major.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, major.TeachersTable, major.TeachersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMajorDetail queries the major_detail edge of a Major.
func (c *MajorClient) QueryMajorDetail(m *Major) *MajorDetailQuery {
	query := &MajorDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(major.Table, major.FieldID, id),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, major.MajorDetailTable, major.MajorDetailColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKcClasses queries the kc_classes edge of a Major.
func (c *MajorClient) QueryKcClasses(m *Major) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(major.Table, major.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, major.KcClassesTable, major.KcClassesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourses queries the courses edge of a Major.
func (c *MajorClient) QueryCourses(m *Major) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(major.Table, major.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, major.CoursesTable, major.CoursesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MajorClient) Hooks() []Hook {
	hooks := c.hooks.Major
	return append(hooks[:len(hooks):len(hooks)], major.Hooks[:]...)
}

// MajorDetailClient is a client for the MajorDetail schema.
type MajorDetailClient struct {
	config
}

// NewMajorDetailClient returns a client for the MajorDetail from the given config.
func NewMajorDetailClient(c config) *MajorDetailClient {
	return &MajorDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `majordetail.Hooks(f(g(h())))`.
func (c *MajorDetailClient) Use(hooks ...Hook) {
	c.hooks.MajorDetail = append(c.hooks.MajorDetail, hooks...)
}

// Create returns a create builder for MajorDetail.
func (c *MajorDetailClient) Create() *MajorDetailCreate {
	mutation := newMajorDetailMutation(c.config, OpCreate)
	return &MajorDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MajorDetail entities.
func (c *MajorDetailClient) CreateBulk(builders ...*MajorDetailCreate) *MajorDetailCreateBulk {
	return &MajorDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MajorDetail.
func (c *MajorDetailClient) Update() *MajorDetailUpdate {
	mutation := newMajorDetailMutation(c.config, OpUpdate)
	return &MajorDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MajorDetailClient) UpdateOne(md *MajorDetail) *MajorDetailUpdateOne {
	mutation := newMajorDetailMutation(c.config, OpUpdateOne, withMajorDetail(md))
	return &MajorDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MajorDetailClient) UpdateOneID(id int) *MajorDetailUpdateOne {
	mutation := newMajorDetailMutation(c.config, OpUpdateOne, withMajorDetailID(id))
	return &MajorDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MajorDetail.
func (c *MajorDetailClient) Delete() *MajorDetailDelete {
	mutation := newMajorDetailMutation(c.config, OpDelete)
	return &MajorDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MajorDetailClient) DeleteOne(md *MajorDetail) *MajorDetailDeleteOne {
	return c.DeleteOneID(md.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MajorDetailClient) DeleteOneID(id int) *MajorDetailDeleteOne {
	builder := c.Delete().Where(majordetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MajorDetailDeleteOne{builder}
}

// Query returns a query builder for MajorDetail.
func (c *MajorDetailClient) Query() *MajorDetailQuery {
	return &MajorDetailQuery{
		config: c.config,
	}
}

// Get returns a MajorDetail entity by its id.
func (c *MajorDetailClient) Get(ctx context.Context, id int) (*MajorDetail, error) {
	return c.Query().Where(majordetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MajorDetailClient) GetX(ctx context.Context, id int) *MajorDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMajorDetailTags queries the major_detail_tags edge of a MajorDetail.
func (c *MajorDetailClient) QueryMajorDetailTags(md *MajorDetail) *MajorDetailTagQuery {
	query := &MajorDetailTagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := md.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, id),
			sqlgraph.To(majordetailtag.Table, majordetailtag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, majordetail.MajorDetailTagsTable, majordetail.MajorDetailTagsColumn),
		)
		fromV = sqlgraph.Neighbors(md.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCoverAttachment queries the cover_attachment edge of a MajorDetail.
func (c *MajorDetailClient) QueryCoverAttachment(md *MajorDetail) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := md.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, majordetail.CoverAttachmentTable, majordetail.CoverAttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(md.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubjectAttachment queries the subject_attachment edge of a MajorDetail.
func (c *MajorDetailClient) QuerySubjectAttachment(md *MajorDetail) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := md.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, majordetail.SubjectAttachmentTable, majordetail.SubjectAttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(md.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeacherAttachments queries the teacher_attachments edge of a MajorDetail.
func (c *MajorDetailClient) QueryTeacherAttachments(md *MajorDetail) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := md.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, majordetail.TeacherAttachmentsTable, majordetail.TeacherAttachmentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(md.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceAttachments queries the service_attachments edge of a MajorDetail.
func (c *MajorDetailClient) QueryServiceAttachments(md *MajorDetail) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := md.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, majordetail.ServiceAttachmentsTable, majordetail.ServiceAttachmentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(md.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMajor queries the major edge of a MajorDetail.
func (c *MajorDetailClient) QueryMajor(md *MajorDetail) *MajorQuery {
	query := &MajorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := md.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, id),
			sqlgraph.To(major.Table, major.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, majordetail.MajorTable, majordetail.MajorColumn),
		)
		fromV = sqlgraph.Neighbors(md.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MajorDetailClient) Hooks() []Hook {
	hooks := c.hooks.MajorDetail
	return append(hooks[:len(hooks):len(hooks)], majordetail.Hooks[:]...)
}

// MajorDetailTagClient is a client for the MajorDetailTag schema.
type MajorDetailTagClient struct {
	config
}

// NewMajorDetailTagClient returns a client for the MajorDetailTag from the given config.
func NewMajorDetailTagClient(c config) *MajorDetailTagClient {
	return &MajorDetailTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `majordetailtag.Hooks(f(g(h())))`.
func (c *MajorDetailTagClient) Use(hooks ...Hook) {
	c.hooks.MajorDetailTag = append(c.hooks.MajorDetailTag, hooks...)
}

// Create returns a create builder for MajorDetailTag.
func (c *MajorDetailTagClient) Create() *MajorDetailTagCreate {
	mutation := newMajorDetailTagMutation(c.config, OpCreate)
	return &MajorDetailTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MajorDetailTag entities.
func (c *MajorDetailTagClient) CreateBulk(builders ...*MajorDetailTagCreate) *MajorDetailTagCreateBulk {
	return &MajorDetailTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MajorDetailTag.
func (c *MajorDetailTagClient) Update() *MajorDetailTagUpdate {
	mutation := newMajorDetailTagMutation(c.config, OpUpdate)
	return &MajorDetailTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MajorDetailTagClient) UpdateOne(mdt *MajorDetailTag) *MajorDetailTagUpdateOne {
	mutation := newMajorDetailTagMutation(c.config, OpUpdateOne, withMajorDetailTag(mdt))
	return &MajorDetailTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MajorDetailTagClient) UpdateOneID(id int) *MajorDetailTagUpdateOne {
	mutation := newMajorDetailTagMutation(c.config, OpUpdateOne, withMajorDetailTagID(id))
	return &MajorDetailTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MajorDetailTag.
func (c *MajorDetailTagClient) Delete() *MajorDetailTagDelete {
	mutation := newMajorDetailTagMutation(c.config, OpDelete)
	return &MajorDetailTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MajorDetailTagClient) DeleteOne(mdt *MajorDetailTag) *MajorDetailTagDeleteOne {
	return c.DeleteOneID(mdt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MajorDetailTagClient) DeleteOneID(id int) *MajorDetailTagDeleteOne {
	builder := c.Delete().Where(majordetailtag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MajorDetailTagDeleteOne{builder}
}

// Query returns a query builder for MajorDetailTag.
func (c *MajorDetailTagClient) Query() *MajorDetailTagQuery {
	return &MajorDetailTagQuery{
		config: c.config,
	}
}

// Get returns a MajorDetailTag entity by its id.
func (c *MajorDetailTagClient) Get(ctx context.Context, id int) (*MajorDetailTag, error) {
	return c.Query().Where(majordetailtag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MajorDetailTagClient) GetX(ctx context.Context, id int) *MajorDetailTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMajorDetail queries the major_detail edge of a MajorDetailTag.
func (c *MajorDetailTagClient) QueryMajorDetail(mdt *MajorDetailTag) *MajorDetailQuery {
	query := &MajorDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetailtag.Table, majordetailtag.FieldID, id),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, majordetailtag.MajorDetailTable, majordetailtag.MajorDetailColumn),
		)
		fromV = sqlgraph.Neighbors(mdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MajorDetailTagClient) Hooks() []Hook {
	hooks := c.hooks.MajorDetailTag
	return append(hooks[:len(hooks):len(hooks)], majordetailtag.Hooks[:]...)
}

// MakeUserQuestionRecordClient is a client for the MakeUserQuestionRecord schema.
type MakeUserQuestionRecordClient struct {
	config
}

// NewMakeUserQuestionRecordClient returns a client for the MakeUserQuestionRecord from the given config.
func NewMakeUserQuestionRecordClient(c config) *MakeUserQuestionRecordClient {
	return &MakeUserQuestionRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `makeuserquestionrecord.Hooks(f(g(h())))`.
func (c *MakeUserQuestionRecordClient) Use(hooks ...Hook) {
	c.hooks.MakeUserQuestionRecord = append(c.hooks.MakeUserQuestionRecord, hooks...)
}

// Create returns a create builder for MakeUserQuestionRecord.
func (c *MakeUserQuestionRecordClient) Create() *MakeUserQuestionRecordCreate {
	mutation := newMakeUserQuestionRecordMutation(c.config, OpCreate)
	return &MakeUserQuestionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MakeUserQuestionRecord entities.
func (c *MakeUserQuestionRecordClient) CreateBulk(builders ...*MakeUserQuestionRecordCreate) *MakeUserQuestionRecordCreateBulk {
	return &MakeUserQuestionRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MakeUserQuestionRecord.
func (c *MakeUserQuestionRecordClient) Update() *MakeUserQuestionRecordUpdate {
	mutation := newMakeUserQuestionRecordMutation(c.config, OpUpdate)
	return &MakeUserQuestionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MakeUserQuestionRecordClient) UpdateOne(muqr *MakeUserQuestionRecord) *MakeUserQuestionRecordUpdateOne {
	mutation := newMakeUserQuestionRecordMutation(c.config, OpUpdateOne, withMakeUserQuestionRecord(muqr))
	return &MakeUserQuestionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MakeUserQuestionRecordClient) UpdateOneID(id int) *MakeUserQuestionRecordUpdateOne {
	mutation := newMakeUserQuestionRecordMutation(c.config, OpUpdateOne, withMakeUserQuestionRecordID(id))
	return &MakeUserQuestionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MakeUserQuestionRecord.
func (c *MakeUserQuestionRecordClient) Delete() *MakeUserQuestionRecordDelete {
	mutation := newMakeUserQuestionRecordMutation(c.config, OpDelete)
	return &MakeUserQuestionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MakeUserQuestionRecordClient) DeleteOne(muqr *MakeUserQuestionRecord) *MakeUserQuestionRecordDeleteOne {
	return c.DeleteOneID(muqr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MakeUserQuestionRecordClient) DeleteOneID(id int) *MakeUserQuestionRecordDeleteOne {
	builder := c.Delete().Where(makeuserquestionrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MakeUserQuestionRecordDeleteOne{builder}
}

// Query returns a query builder for MakeUserQuestionRecord.
func (c *MakeUserQuestionRecordClient) Query() *MakeUserQuestionRecordQuery {
	return &MakeUserQuestionRecordQuery{
		config: c.config,
	}
}

// Get returns a MakeUserQuestionRecord entity by its id.
func (c *MakeUserQuestionRecordClient) Get(ctx context.Context, id int) (*MakeUserQuestionRecord, error) {
	return c.Query().Where(makeuserquestionrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MakeUserQuestionRecordClient) GetX(ctx context.Context, id int) *MakeUserQuestionRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySection queries the section edge of a MakeUserQuestionRecord.
func (c *MakeUserQuestionRecordClient) QuerySection(muqr *MakeUserQuestionRecord) *TkSectionQuery {
	query := &TkSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := muqr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(makeuserquestionrecord.Table, makeuserquestionrecord.FieldID, id),
			sqlgraph.To(tksection.Table, tksection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, makeuserquestionrecord.SectionTable, makeuserquestionrecord.SectionColumn),
		)
		fromV = sqlgraph.Neighbors(muqr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPaper queries the exam_paper edge of a MakeUserQuestionRecord.
func (c *MakeUserQuestionRecordClient) QueryExamPaper(muqr *MakeUserQuestionRecord) *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := muqr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(makeuserquestionrecord.Table, makeuserquestionrecord.FieldID, id),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, makeuserquestionrecord.ExamPaperTable, makeuserquestionrecord.ExamPaperColumn),
		)
		fromV = sqlgraph.Neighbors(muqr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MakeUserQuestionRecordClient) Hooks() []Hook {
	hooks := c.hooks.MakeUserQuestionRecord
	return append(hooks[:len(hooks):len(hooks)], makeuserquestionrecord.Hooks[:]...)
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Create returns a create builder for Message.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageClient) DeleteOneID(id int) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMessageType queries the Message_type edge of a Message.
func (c *MessageClient) QueryMessageType(m *Message) *MessageTypeQuery {
	query := &MessageTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(messagetype.Table, messagetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.MessageTypeTable, message.MessageTypeColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a Message.
func (c *MessageClient) QueryAdmin(m *Message) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.AdminTable, message.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachment queries the attachment edge of a Message.
func (c *MessageClient) QueryAttachment(m *Message) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.AttachmentTable, message.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a Message.
func (c *MessageClient) QueryCourse(m *Message) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.CourseTable, message.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a Message.
func (c *MessageClient) QueryClass(m *Message) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.ClassTable, message.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a Message.
func (c *MessageClient) QueryUsers(m *Message) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, message.UsersTable, message.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	hooks := c.hooks.Message
	return append(hooks[:len(hooks):len(hooks)], message.Hooks[:]...)
}

// MessageTypeClient is a client for the MessageType schema.
type MessageTypeClient struct {
	config
}

// NewMessageTypeClient returns a client for the MessageType from the given config.
func NewMessageTypeClient(c config) *MessageTypeClient {
	return &MessageTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagetype.Hooks(f(g(h())))`.
func (c *MessageTypeClient) Use(hooks ...Hook) {
	c.hooks.MessageType = append(c.hooks.MessageType, hooks...)
}

// Create returns a create builder for MessageType.
func (c *MessageTypeClient) Create() *MessageTypeCreate {
	mutation := newMessageTypeMutation(c.config, OpCreate)
	return &MessageTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageType entities.
func (c *MessageTypeClient) CreateBulk(builders ...*MessageTypeCreate) *MessageTypeCreateBulk {
	return &MessageTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageType.
func (c *MessageTypeClient) Update() *MessageTypeUpdate {
	mutation := newMessageTypeMutation(c.config, OpUpdate)
	return &MessageTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageTypeClient) UpdateOne(mt *MessageType) *MessageTypeUpdateOne {
	mutation := newMessageTypeMutation(c.config, OpUpdateOne, withMessageType(mt))
	return &MessageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageTypeClient) UpdateOneID(id int) *MessageTypeUpdateOne {
	mutation := newMessageTypeMutation(c.config, OpUpdateOne, withMessageTypeID(id))
	return &MessageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageType.
func (c *MessageTypeClient) Delete() *MessageTypeDelete {
	mutation := newMessageTypeMutation(c.config, OpDelete)
	return &MessageTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageTypeClient) DeleteOne(mt *MessageType) *MessageTypeDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageTypeClient) DeleteOneID(id int) *MessageTypeDeleteOne {
	builder := c.Delete().Where(messagetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageTypeDeleteOne{builder}
}

// Query returns a query builder for MessageType.
func (c *MessageTypeClient) Query() *MessageTypeQuery {
	return &MessageTypeQuery{
		config: c.config,
	}
}

// Get returns a MessageType entity by its id.
func (c *MessageTypeClient) Get(ctx context.Context, id int) (*MessageType, error) {
	return c.Query().Where(messagetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageTypeClient) GetX(ctx context.Context, id int) *MessageType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMessages queries the messages edge of a MessageType.
func (c *MessageTypeClient) QueryMessages(mt *MessageType) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messagetype.Table, messagetype.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, messagetype.MessagesTable, messagetype.MessagesColumn),
		)
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageTypeClient) Hooks() []Hook {
	hooks := c.hooks.MessageType
	return append(hooks[:len(hooks):len(hooks)], messagetype.Hooks[:]...)
}

// PermissionClient is a client for the Permission schema.
type PermissionClient struct {
	config
}

// NewPermissionClient returns a client for the Permission from the given config.
func NewPermissionClient(c config) *PermissionClient {
	return &PermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permission.Hooks(f(g(h())))`.
func (c *PermissionClient) Use(hooks ...Hook) {
	c.hooks.Permission = append(c.hooks.Permission, hooks...)
}

// Create returns a create builder for Permission.
func (c *PermissionClient) Create() *PermissionCreate {
	mutation := newPermissionMutation(c.config, OpCreate)
	return &PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Permission entities.
func (c *PermissionClient) CreateBulk(builders ...*PermissionCreate) *PermissionCreateBulk {
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Permission.
func (c *PermissionClient) Update() *PermissionUpdate {
	mutation := newPermissionMutation(c.config, OpUpdate)
	return &PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionClient) UpdateOne(pe *Permission) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermission(pe))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionClient) UpdateOneID(id int) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermissionID(id))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Permission.
func (c *PermissionClient) Delete() *PermissionDelete {
	mutation := newPermissionMutation(c.config, OpDelete)
	return &PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PermissionClient) DeleteOne(pe *Permission) *PermissionDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PermissionClient) DeleteOneID(id int) *PermissionDeleteOne {
	builder := c.Delete().Where(permission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDeleteOne{builder}
}

// Query returns a query builder for Permission.
func (c *PermissionClient) Query() *PermissionQuery {
	return &PermissionQuery{
		config: c.config,
	}
}

// Get returns a Permission entity by its id.
func (c *PermissionClient) Get(ctx context.Context, id int) (*Permission, error) {
	return c.Query().Where(permission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionClient) GetX(ctx context.Context, id int) *Permission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PermissionClient) Hooks() []Hook {
	hooks := c.hooks.Permission
	return append(hooks[:len(hooks):len(hooks)], permission.Hooks[:]...)
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Create returns a create builder for Role.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoleClient) DeleteOneID(id int) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdmins queries the admins edge of a Role.
func (c *RoleClient) QueryAdmins(r *Role) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.AdminsTable, role.AdminsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolePermission queries the role_permission edge of a Role.
func (c *RoleClient) QueryRolePermission(r *Role) *RolePermissionQuery {
	query := &RolePermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(rolepermission.Table, rolepermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, role.RolePermissionTable, role.RolePermissionColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	hooks := c.hooks.Role
	return append(hooks[:len(hooks):len(hooks)], role.Hooks[:]...)
}

// RolePermissionClient is a client for the RolePermission schema.
type RolePermissionClient struct {
	config
}

// NewRolePermissionClient returns a client for the RolePermission from the given config.
func NewRolePermissionClient(c config) *RolePermissionClient {
	return &RolePermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rolepermission.Hooks(f(g(h())))`.
func (c *RolePermissionClient) Use(hooks ...Hook) {
	c.hooks.RolePermission = append(c.hooks.RolePermission, hooks...)
}

// Create returns a create builder for RolePermission.
func (c *RolePermissionClient) Create() *RolePermissionCreate {
	mutation := newRolePermissionMutation(c.config, OpCreate)
	return &RolePermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RolePermission entities.
func (c *RolePermissionClient) CreateBulk(builders ...*RolePermissionCreate) *RolePermissionCreateBulk {
	return &RolePermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RolePermission.
func (c *RolePermissionClient) Update() *RolePermissionUpdate {
	mutation := newRolePermissionMutation(c.config, OpUpdate)
	return &RolePermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RolePermissionClient) UpdateOne(rp *RolePermission) *RolePermissionUpdateOne {
	mutation := newRolePermissionMutation(c.config, OpUpdateOne, withRolePermission(rp))
	return &RolePermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RolePermissionClient) UpdateOneID(id int) *RolePermissionUpdateOne {
	mutation := newRolePermissionMutation(c.config, OpUpdateOne, withRolePermissionID(id))
	return &RolePermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RolePermission.
func (c *RolePermissionClient) Delete() *RolePermissionDelete {
	mutation := newRolePermissionMutation(c.config, OpDelete)
	return &RolePermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RolePermissionClient) DeleteOne(rp *RolePermission) *RolePermissionDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RolePermissionClient) DeleteOneID(id int) *RolePermissionDeleteOne {
	builder := c.Delete().Where(rolepermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RolePermissionDeleteOne{builder}
}

// Query returns a query builder for RolePermission.
func (c *RolePermissionClient) Query() *RolePermissionQuery {
	return &RolePermissionQuery{
		config: c.config,
	}
}

// Get returns a RolePermission entity by its id.
func (c *RolePermissionClient) Get(ctx context.Context, id int) (*RolePermission, error) {
	return c.Query().Where(rolepermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RolePermissionClient) GetX(ctx context.Context, id int) *RolePermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a RolePermission.
func (c *RolePermissionClient) QueryRole(rp *RolePermission) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolepermission.Table, rolepermission.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, rolepermission.RoleTable, rolepermission.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RolePermissionClient) Hooks() []Hook {
	return c.hooks.RolePermission
}

// SharePosterClient is a client for the SharePoster schema.
type SharePosterClient struct {
	config
}

// NewSharePosterClient returns a client for the SharePoster from the given config.
func NewSharePosterClient(c config) *SharePosterClient {
	return &SharePosterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shareposter.Hooks(f(g(h())))`.
func (c *SharePosterClient) Use(hooks ...Hook) {
	c.hooks.SharePoster = append(c.hooks.SharePoster, hooks...)
}

// Create returns a create builder for SharePoster.
func (c *SharePosterClient) Create() *SharePosterCreate {
	mutation := newSharePosterMutation(c.config, OpCreate)
	return &SharePosterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SharePoster entities.
func (c *SharePosterClient) CreateBulk(builders ...*SharePosterCreate) *SharePosterCreateBulk {
	return &SharePosterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SharePoster.
func (c *SharePosterClient) Update() *SharePosterUpdate {
	mutation := newSharePosterMutation(c.config, OpUpdate)
	return &SharePosterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SharePosterClient) UpdateOne(sp *SharePoster) *SharePosterUpdateOne {
	mutation := newSharePosterMutation(c.config, OpUpdateOne, withSharePoster(sp))
	return &SharePosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SharePosterClient) UpdateOneID(id int) *SharePosterUpdateOne {
	mutation := newSharePosterMutation(c.config, OpUpdateOne, withSharePosterID(id))
	return &SharePosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SharePoster.
func (c *SharePosterClient) Delete() *SharePosterDelete {
	mutation := newSharePosterMutation(c.config, OpDelete)
	return &SharePosterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SharePosterClient) DeleteOne(sp *SharePoster) *SharePosterDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SharePosterClient) DeleteOneID(id int) *SharePosterDeleteOne {
	builder := c.Delete().Where(shareposter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SharePosterDeleteOne{builder}
}

// Query returns a query builder for SharePoster.
func (c *SharePosterClient) Query() *SharePosterQuery {
	return &SharePosterQuery{
		config: c.config,
	}
}

// Get returns a SharePoster entity by its id.
func (c *SharePosterClient) Get(ctx context.Context, id int) (*SharePoster, error) {
	return c.Query().Where(shareposter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SharePosterClient) GetX(ctx context.Context, id int) *SharePoster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachment queries the attachment edge of a SharePoster.
func (c *SharePosterClient) QueryAttachment(sp *SharePoster) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shareposter.Table, shareposter.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shareposter.AttachmentTable, shareposter.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SharePosterClient) Hooks() []Hook {
	hooks := c.hooks.SharePoster
	return append(hooks[:len(hooks):len(hooks)], shareposter.Hooks[:]...)
}

// TeacherClient is a client for the Teacher schema.
type TeacherClient struct {
	config
}

// NewTeacherClient returns a client for the Teacher from the given config.
func NewTeacherClient(c config) *TeacherClient {
	return &TeacherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teacher.Hooks(f(g(h())))`.
func (c *TeacherClient) Use(hooks ...Hook) {
	c.hooks.Teacher = append(c.hooks.Teacher, hooks...)
}

// Create returns a create builder for Teacher.
func (c *TeacherClient) Create() *TeacherCreate {
	mutation := newTeacherMutation(c.config, OpCreate)
	return &TeacherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Teacher entities.
func (c *TeacherClient) CreateBulk(builders ...*TeacherCreate) *TeacherCreateBulk {
	return &TeacherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Teacher.
func (c *TeacherClient) Update() *TeacherUpdate {
	mutation := newTeacherMutation(c.config, OpUpdate)
	return &TeacherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeacherClient) UpdateOne(t *Teacher) *TeacherUpdateOne {
	mutation := newTeacherMutation(c.config, OpUpdateOne, withTeacher(t))
	return &TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeacherClient) UpdateOneID(id int) *TeacherUpdateOne {
	mutation := newTeacherMutation(c.config, OpUpdateOne, withTeacherID(id))
	return &TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Teacher.
func (c *TeacherClient) Delete() *TeacherDelete {
	mutation := newTeacherMutation(c.config, OpDelete)
	return &TeacherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeacherClient) DeleteOne(t *Teacher) *TeacherDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeacherClient) DeleteOneID(id int) *TeacherDeleteOne {
	builder := c.Delete().Where(teacher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeacherDeleteOne{builder}
}

// Query returns a query builder for Teacher.
func (c *TeacherClient) Query() *TeacherQuery {
	return &TeacherQuery{
		config: c.config,
	}
}

// Get returns a Teacher entity by its id.
func (c *TeacherClient) Get(ctx context.Context, id int) (*Teacher, error) {
	return c.Query().Where(teacher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeacherClient) GetX(ctx context.Context, id int) *Teacher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMajors queries the majors edge of a Teacher.
func (c *TeacherClient) QueryMajors(t *Teacher) *MajorQuery {
	query := &MajorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(major.Table, major.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, teacher.MajorsTable, teacher.MajorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeacherTags queries the teacher_tags edge of a Teacher.
func (c *TeacherClient) QueryTeacherTags(t *Teacher) *TeacherTagQuery {
	query := &TeacherTagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(teachertag.Table, teachertag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.TeacherTagsTable, teacher.TeacherTagsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeacherClasses queries the teacher_classes edge of a Teacher.
func (c *TeacherClient) QueryTeacherClasses(t *Teacher) *KcClassTeacherQuery {
	query := &KcClassTeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(kcclassteacher.Table, kcclassteacher.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.TeacherClassesTable, teacher.TeacherClassesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKcClassMasters queries the kc_class_masters edge of a Teacher.
func (c *TeacherClient) QueryKcClassMasters(t *Teacher) *KcClassQuery {
	query := &KcClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.KcClassMastersTable, teacher.KcClassMastersColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeacherCourses queries the teacher_courses edge of a Teacher.
func (c *TeacherClient) QueryTeacherCourses(t *Teacher) *KcCourseTeacherQuery {
	query := &KcCourseTeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(kccourseteacher.Table, kccourseteacher.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.TeacherCoursesTable, teacher.TeacherCoursesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserExamsTeachers queries the user_exams_teachers edge of a Teacher.
func (c *TeacherClient) QueryUserExamsTeachers(t *Teacher) *TkUserExamScoreRecordQuery {
	query := &TkUserExamScoreRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.UserExamsTeachersTable, teacher.UserExamsTeachersColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAskTeachers queries the ask_teachers edge of a Teacher.
func (c *TeacherClient) QueryAskTeachers(t *Teacher) *UserAskAnswerQuery {
	query := &UserAskAnswerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(useraskanswer.Table, useraskanswer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.AskTeachersTable, teacher.AskTeachersColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachment queries the attachment edge of a Teacher.
func (c *TeacherClient) QueryAttachment(t *Teacher) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teacher.AttachmentTable, teacher.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeacherClient) Hooks() []Hook {
	hooks := c.hooks.Teacher
	return append(hooks[:len(hooks):len(hooks)], teacher.Hooks[:]...)
}

// TeacherTagClient is a client for the TeacherTag schema.
type TeacherTagClient struct {
	config
}

// NewTeacherTagClient returns a client for the TeacherTag from the given config.
func NewTeacherTagClient(c config) *TeacherTagClient {
	return &TeacherTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teachertag.Hooks(f(g(h())))`.
func (c *TeacherTagClient) Use(hooks ...Hook) {
	c.hooks.TeacherTag = append(c.hooks.TeacherTag, hooks...)
}

// Create returns a create builder for TeacherTag.
func (c *TeacherTagClient) Create() *TeacherTagCreate {
	mutation := newTeacherTagMutation(c.config, OpCreate)
	return &TeacherTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeacherTag entities.
func (c *TeacherTagClient) CreateBulk(builders ...*TeacherTagCreate) *TeacherTagCreateBulk {
	return &TeacherTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeacherTag.
func (c *TeacherTagClient) Update() *TeacherTagUpdate {
	mutation := newTeacherTagMutation(c.config, OpUpdate)
	return &TeacherTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeacherTagClient) UpdateOne(tt *TeacherTag) *TeacherTagUpdateOne {
	mutation := newTeacherTagMutation(c.config, OpUpdateOne, withTeacherTag(tt))
	return &TeacherTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeacherTagClient) UpdateOneID(id int) *TeacherTagUpdateOne {
	mutation := newTeacherTagMutation(c.config, OpUpdateOne, withTeacherTagID(id))
	return &TeacherTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeacherTag.
func (c *TeacherTagClient) Delete() *TeacherTagDelete {
	mutation := newTeacherTagMutation(c.config, OpDelete)
	return &TeacherTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeacherTagClient) DeleteOne(tt *TeacherTag) *TeacherTagDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeacherTagClient) DeleteOneID(id int) *TeacherTagDeleteOne {
	builder := c.Delete().Where(teachertag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeacherTagDeleteOne{builder}
}

// Query returns a query builder for TeacherTag.
func (c *TeacherTagClient) Query() *TeacherTagQuery {
	return &TeacherTagQuery{
		config: c.config,
	}
}

// Get returns a TeacherTag entity by its id.
func (c *TeacherTagClient) Get(ctx context.Context, id int) (*TeacherTag, error) {
	return c.Query().Where(teachertag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeacherTagClient) GetX(ctx context.Context, id int) *TeacherTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeacher queries the teacher edge of a TeacherTag.
func (c *TeacherTagClient) QueryTeacher(tt *TeacherTag) *TeacherQuery {
	query := &TeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teachertag.Table, teachertag.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teachertag.TeacherTable, teachertag.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeacherTagClient) Hooks() []Hook {
	hooks := c.hooks.TeacherTag
	return append(hooks[:len(hooks):len(hooks)], teachertag.Hooks[:]...)
}

// TkChapterClient is a client for the TkChapter schema.
type TkChapterClient struct {
	config
}

// NewTkChapterClient returns a client for the TkChapter from the given config.
func NewTkChapterClient(c config) *TkChapterClient {
	return &TkChapterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkchapter.Hooks(f(g(h())))`.
func (c *TkChapterClient) Use(hooks ...Hook) {
	c.hooks.TkChapter = append(c.hooks.TkChapter, hooks...)
}

// Create returns a create builder for TkChapter.
func (c *TkChapterClient) Create() *TkChapterCreate {
	mutation := newTkChapterMutation(c.config, OpCreate)
	return &TkChapterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkChapter entities.
func (c *TkChapterClient) CreateBulk(builders ...*TkChapterCreate) *TkChapterCreateBulk {
	return &TkChapterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkChapter.
func (c *TkChapterClient) Update() *TkChapterUpdate {
	mutation := newTkChapterMutation(c.config, OpUpdate)
	return &TkChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkChapterClient) UpdateOne(tc *TkChapter) *TkChapterUpdateOne {
	mutation := newTkChapterMutation(c.config, OpUpdateOne, withTkChapter(tc))
	return &TkChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkChapterClient) UpdateOneID(id int) *TkChapterUpdateOne {
	mutation := newTkChapterMutation(c.config, OpUpdateOne, withTkChapterID(id))
	return &TkChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkChapter.
func (c *TkChapterClient) Delete() *TkChapterDelete {
	mutation := newTkChapterMutation(c.config, OpDelete)
	return &TkChapterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkChapterClient) DeleteOne(tc *TkChapter) *TkChapterDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkChapterClient) DeleteOneID(id int) *TkChapterDeleteOne {
	builder := c.Delete().Where(tkchapter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkChapterDeleteOne{builder}
}

// Query returns a query builder for TkChapter.
func (c *TkChapterClient) Query() *TkChapterQuery {
	return &TkChapterQuery{
		config: c.config,
	}
}

// Get returns a TkChapter entity by its id.
func (c *TkChapterClient) Get(ctx context.Context, id int) (*TkChapter, error) {
	return c.Query().Where(tkchapter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkChapterClient) GetX(ctx context.Context, id int) *TkChapter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionBank queries the question_bank edge of a TkChapter.
func (c *TkChapterClient) QueryQuestionBank(tc *TkChapter) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkchapter.Table, tkchapter.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkchapter.QuestionBankTable, tkchapter.QuestionBankColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySections queries the sections edge of a TkChapter.
func (c *TkChapterClient) QuerySections(tc *TkChapter) *TkSectionQuery {
	query := &TkSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkchapter.Table, tkchapter.FieldID, id),
			sqlgraph.To(tksection.Table, tksection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkchapter.SectionsTable, tkchapter.SectionsColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkChapterClient) Hooks() []Hook {
	hooks := c.hooks.TkChapter
	return append(hooks[:len(hooks):len(hooks)], tkchapter.Hooks[:]...)
}

// TkExamPaperClient is a client for the TkExamPaper schema.
type TkExamPaperClient struct {
	config
}

// NewTkExamPaperClient returns a client for the TkExamPaper from the given config.
func NewTkExamPaperClient(c config) *TkExamPaperClient {
	return &TkExamPaperClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkexampaper.Hooks(f(g(h())))`.
func (c *TkExamPaperClient) Use(hooks ...Hook) {
	c.hooks.TkExamPaper = append(c.hooks.TkExamPaper, hooks...)
}

// Create returns a create builder for TkExamPaper.
func (c *TkExamPaperClient) Create() *TkExamPaperCreate {
	mutation := newTkExamPaperMutation(c.config, OpCreate)
	return &TkExamPaperCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkExamPaper entities.
func (c *TkExamPaperClient) CreateBulk(builders ...*TkExamPaperCreate) *TkExamPaperCreateBulk {
	return &TkExamPaperCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkExamPaper.
func (c *TkExamPaperClient) Update() *TkExamPaperUpdate {
	mutation := newTkExamPaperMutation(c.config, OpUpdate)
	return &TkExamPaperUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkExamPaperClient) UpdateOne(tep *TkExamPaper) *TkExamPaperUpdateOne {
	mutation := newTkExamPaperMutation(c.config, OpUpdateOne, withTkExamPaper(tep))
	return &TkExamPaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkExamPaperClient) UpdateOneID(id int) *TkExamPaperUpdateOne {
	mutation := newTkExamPaperMutation(c.config, OpUpdateOne, withTkExamPaperID(id))
	return &TkExamPaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkExamPaper.
func (c *TkExamPaperClient) Delete() *TkExamPaperDelete {
	mutation := newTkExamPaperMutation(c.config, OpDelete)
	return &TkExamPaperDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkExamPaperClient) DeleteOne(tep *TkExamPaper) *TkExamPaperDeleteOne {
	return c.DeleteOneID(tep.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkExamPaperClient) DeleteOneID(id int) *TkExamPaperDeleteOne {
	builder := c.Delete().Where(tkexampaper.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkExamPaperDeleteOne{builder}
}

// Query returns a query builder for TkExamPaper.
func (c *TkExamPaperClient) Query() *TkExamPaperQuery {
	return &TkExamPaperQuery{
		config: c.config,
	}
}

// Get returns a TkExamPaper entity by its id.
func (c *TkExamPaperClient) Get(ctx context.Context, id int) (*TkExamPaper, error) {
	return c.Query().Where(tkexampaper.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkExamPaperClient) GetX(ctx context.Context, id int) *TkExamPaper {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionBank queries the question_bank edge of a TkExamPaper.
func (c *TkExamPaperClient) QueryQuestionBank(tep *TkExamPaper) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexampaper.QuestionBankTable, tkexampaper.QuestionBankColumn),
		)
		fromV = sqlgraph.Neighbors(tep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a TkExamPaper.
func (c *TkExamPaperClient) QueryAdmin(tep *TkExamPaper) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexampaper.AdminTable, tkexampaper.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(tep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPartitions queries the exam_partitions edge of a TkExamPaper.
func (c *TkExamPaperClient) QueryExamPartitions(tep *TkExamPaper) *TkExamPaperPartitionQuery {
	query := &TkExamPaperPartitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, id),
			sqlgraph.To(tkexampaperpartition.Table, tkexampaperpartition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.ExamPartitionsTable, tkexampaper.ExamPartitionsColumn),
		)
		fromV = sqlgraph.Neighbors(tep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMakeUserQuestionExam queries the make_user_question_exam edge of a TkExamPaper.
func (c *TkExamPaperClient) QueryMakeUserQuestionExam(tep *TkExamPaper) *MakeUserQuestionRecordQuery {
	query := &MakeUserQuestionRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, id),
			sqlgraph.To(makeuserquestionrecord.Table, makeuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.MakeUserQuestionExamTable, tkexampaper.MakeUserQuestionExamColumn),
		)
		fromV = sqlgraph.Neighbors(tep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserExamPapers queries the user_exam_papers edge of a TkExamPaper.
func (c *TkExamPaperClient) QueryUserExamPapers(tep *TkExamPaper) *TkUserExamScoreRecordQuery {
	query := &TkUserExamScoreRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, id),
			sqlgraph.To(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.UserExamPapersTable, tkexampaper.UserExamPapersColumn),
		)
		fromV = sqlgraph.Neighbors(tep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseExamPapers queries the course_exam_papers edge of a TkExamPaper.
func (c *TkExamPaperClient) QueryCourseExamPapers(tep *TkExamPaper) *KcSmallCategoryExamPaperQuery {
	query := &KcSmallCategoryExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, id),
			sqlgraph.To(kcsmallcategoryexampaper.Table, kcsmallcategoryexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.CourseExamPapersTable, tkexampaper.CourseExamPapersColumn),
		)
		fromV = sqlgraph.Neighbors(tep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPaperRecords queries the exam_paper_records edge of a TkExamPaper.
func (c *TkExamPaperClient) QueryExamPaperRecords(tep *TkExamPaper) *TkUserQuestionRecordQuery {
	query := &TkUserQuestionRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, id),
			sqlgraph.To(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.ExamPaperRecordsTable, tkexampaper.ExamPaperRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(tep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRandomExam queries the user_random_exam edge of a TkExamPaper.
func (c *TkExamPaperClient) QueryUserRandomExam(tep *TkExamPaper) *TkUserRandomExamRecodeQuery {
	query := &TkUserRandomExamRecodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, id),
			sqlgraph.To(tkuserrandomexamrecode.Table, tkuserrandomexamrecode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.UserRandomExamTable, tkexampaper.UserRandomExamColumn),
		)
		fromV = sqlgraph.Neighbors(tep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkExamPaperClient) Hooks() []Hook {
	hooks := c.hooks.TkExamPaper
	return append(hooks[:len(hooks):len(hooks)], tkexampaper.Hooks[:]...)
}

// TkExamPaperPartitionClient is a client for the TkExamPaperPartition schema.
type TkExamPaperPartitionClient struct {
	config
}

// NewTkExamPaperPartitionClient returns a client for the TkExamPaperPartition from the given config.
func NewTkExamPaperPartitionClient(c config) *TkExamPaperPartitionClient {
	return &TkExamPaperPartitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkexampaperpartition.Hooks(f(g(h())))`.
func (c *TkExamPaperPartitionClient) Use(hooks ...Hook) {
	c.hooks.TkExamPaperPartition = append(c.hooks.TkExamPaperPartition, hooks...)
}

// Create returns a create builder for TkExamPaperPartition.
func (c *TkExamPaperPartitionClient) Create() *TkExamPaperPartitionCreate {
	mutation := newTkExamPaperPartitionMutation(c.config, OpCreate)
	return &TkExamPaperPartitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkExamPaperPartition entities.
func (c *TkExamPaperPartitionClient) CreateBulk(builders ...*TkExamPaperPartitionCreate) *TkExamPaperPartitionCreateBulk {
	return &TkExamPaperPartitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkExamPaperPartition.
func (c *TkExamPaperPartitionClient) Update() *TkExamPaperPartitionUpdate {
	mutation := newTkExamPaperPartitionMutation(c.config, OpUpdate)
	return &TkExamPaperPartitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkExamPaperPartitionClient) UpdateOne(tepp *TkExamPaperPartition) *TkExamPaperPartitionUpdateOne {
	mutation := newTkExamPaperPartitionMutation(c.config, OpUpdateOne, withTkExamPaperPartition(tepp))
	return &TkExamPaperPartitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkExamPaperPartitionClient) UpdateOneID(id int) *TkExamPaperPartitionUpdateOne {
	mutation := newTkExamPaperPartitionMutation(c.config, OpUpdateOne, withTkExamPaperPartitionID(id))
	return &TkExamPaperPartitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkExamPaperPartition.
func (c *TkExamPaperPartitionClient) Delete() *TkExamPaperPartitionDelete {
	mutation := newTkExamPaperPartitionMutation(c.config, OpDelete)
	return &TkExamPaperPartitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkExamPaperPartitionClient) DeleteOne(tepp *TkExamPaperPartition) *TkExamPaperPartitionDeleteOne {
	return c.DeleteOneID(tepp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkExamPaperPartitionClient) DeleteOneID(id int) *TkExamPaperPartitionDeleteOne {
	builder := c.Delete().Where(tkexampaperpartition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkExamPaperPartitionDeleteOne{builder}
}

// Query returns a query builder for TkExamPaperPartition.
func (c *TkExamPaperPartitionClient) Query() *TkExamPaperPartitionQuery {
	return &TkExamPaperPartitionQuery{
		config: c.config,
	}
}

// Get returns a TkExamPaperPartition entity by its id.
func (c *TkExamPaperPartitionClient) Get(ctx context.Context, id int) (*TkExamPaperPartition, error) {
	return c.Query().Where(tkexampaperpartition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkExamPaperPartitionClient) GetX(ctx context.Context, id int) *TkExamPaperPartition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExamPaper queries the exam_paper edge of a TkExamPaperPartition.
func (c *TkExamPaperPartitionClient) QueryExamPaper(tepp *TkExamPaperPartition) *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tepp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaperpartition.Table, tkexampaperpartition.FieldID, id),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexampaperpartition.ExamPaperTable, tkexampaperpartition.ExamPaperColumn),
		)
		fromV = sqlgraph.Neighbors(tepp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPartitionLinks queries the exam_partition_links edge of a TkExamPaperPartition.
func (c *TkExamPaperPartitionClient) QueryExamPartitionLinks(tepp *TkExamPaperPartition) *TkExamPartitionQuestionLinkQuery {
	query := &TkExamPartitionQuestionLinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tepp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaperpartition.Table, tkexampaperpartition.FieldID, id),
			sqlgraph.To(tkexampartitionquestionlink.Table, tkexampartitionquestionlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaperpartition.ExamPartitionLinksTable, tkexampaperpartition.ExamPartitionLinksColumn),
		)
		fromV = sqlgraph.Neighbors(tepp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPartitionScores queries the exam_partition_scores edge of a TkExamPaperPartition.
func (c *TkExamPaperPartitionClient) QueryExamPartitionScores(tepp *TkExamPaperPartition) *TkExamPaperPartitionScoreQuery {
	query := &TkExamPaperPartitionScoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tepp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaperpartition.Table, tkexampaperpartition.FieldID, id),
			sqlgraph.To(tkexampaperpartitionscore.Table, tkexampaperpartitionscore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaperpartition.ExamPartitionScoresTable, tkexampaperpartition.ExamPartitionScoresColumn),
		)
		fromV = sqlgraph.Neighbors(tepp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkExamPaperPartitionClient) Hooks() []Hook {
	hooks := c.hooks.TkExamPaperPartition
	return append(hooks[:len(hooks):len(hooks)], tkexampaperpartition.Hooks[:]...)
}

// TkExamPaperPartitionScoreClient is a client for the TkExamPaperPartitionScore schema.
type TkExamPaperPartitionScoreClient struct {
	config
}

// NewTkExamPaperPartitionScoreClient returns a client for the TkExamPaperPartitionScore from the given config.
func NewTkExamPaperPartitionScoreClient(c config) *TkExamPaperPartitionScoreClient {
	return &TkExamPaperPartitionScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkexampaperpartitionscore.Hooks(f(g(h())))`.
func (c *TkExamPaperPartitionScoreClient) Use(hooks ...Hook) {
	c.hooks.TkExamPaperPartitionScore = append(c.hooks.TkExamPaperPartitionScore, hooks...)
}

// Create returns a create builder for TkExamPaperPartitionScore.
func (c *TkExamPaperPartitionScoreClient) Create() *TkExamPaperPartitionScoreCreate {
	mutation := newTkExamPaperPartitionScoreMutation(c.config, OpCreate)
	return &TkExamPaperPartitionScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkExamPaperPartitionScore entities.
func (c *TkExamPaperPartitionScoreClient) CreateBulk(builders ...*TkExamPaperPartitionScoreCreate) *TkExamPaperPartitionScoreCreateBulk {
	return &TkExamPaperPartitionScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkExamPaperPartitionScore.
func (c *TkExamPaperPartitionScoreClient) Update() *TkExamPaperPartitionScoreUpdate {
	mutation := newTkExamPaperPartitionScoreMutation(c.config, OpUpdate)
	return &TkExamPaperPartitionScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkExamPaperPartitionScoreClient) UpdateOne(tepps *TkExamPaperPartitionScore) *TkExamPaperPartitionScoreUpdateOne {
	mutation := newTkExamPaperPartitionScoreMutation(c.config, OpUpdateOne, withTkExamPaperPartitionScore(tepps))
	return &TkExamPaperPartitionScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkExamPaperPartitionScoreClient) UpdateOneID(id int) *TkExamPaperPartitionScoreUpdateOne {
	mutation := newTkExamPaperPartitionScoreMutation(c.config, OpUpdateOne, withTkExamPaperPartitionScoreID(id))
	return &TkExamPaperPartitionScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkExamPaperPartitionScore.
func (c *TkExamPaperPartitionScoreClient) Delete() *TkExamPaperPartitionScoreDelete {
	mutation := newTkExamPaperPartitionScoreMutation(c.config, OpDelete)
	return &TkExamPaperPartitionScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkExamPaperPartitionScoreClient) DeleteOne(tepps *TkExamPaperPartitionScore) *TkExamPaperPartitionScoreDeleteOne {
	return c.DeleteOneID(tepps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkExamPaperPartitionScoreClient) DeleteOneID(id int) *TkExamPaperPartitionScoreDeleteOne {
	builder := c.Delete().Where(tkexampaperpartitionscore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkExamPaperPartitionScoreDeleteOne{builder}
}

// Query returns a query builder for TkExamPaperPartitionScore.
func (c *TkExamPaperPartitionScoreClient) Query() *TkExamPaperPartitionScoreQuery {
	return &TkExamPaperPartitionScoreQuery{
		config: c.config,
	}
}

// Get returns a TkExamPaperPartitionScore entity by its id.
func (c *TkExamPaperPartitionScoreClient) Get(ctx context.Context, id int) (*TkExamPaperPartitionScore, error) {
	return c.Query().Where(tkexampaperpartitionscore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkExamPaperPartitionScoreClient) GetX(ctx context.Context, id int) *TkExamPaperPartitionScore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExamPaperPartition queries the exam_paper_partition edge of a TkExamPaperPartitionScore.
func (c *TkExamPaperPartitionScoreClient) QueryExamPaperPartition(tepps *TkExamPaperPartitionScore) *TkExamPaperPartitionQuery {
	query := &TkExamPaperPartitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tepps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaperpartitionscore.Table, tkexampaperpartitionscore.FieldID, id),
			sqlgraph.To(tkexampaperpartition.Table, tkexampaperpartition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexampaperpartitionscore.ExamPaperPartitionTable, tkexampaperpartitionscore.ExamPaperPartitionColumn),
		)
		fromV = sqlgraph.Neighbors(tepps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkExamPaperPartitionScoreClient) Hooks() []Hook {
	hooks := c.hooks.TkExamPaperPartitionScore
	return append(hooks[:len(hooks):len(hooks)], tkexampaperpartitionscore.Hooks[:]...)
}

// TkExamPaperSimulationClient is a client for the TkExamPaperSimulation schema.
type TkExamPaperSimulationClient struct {
	config
}

// NewTkExamPaperSimulationClient returns a client for the TkExamPaperSimulation from the given config.
func NewTkExamPaperSimulationClient(c config) *TkExamPaperSimulationClient {
	return &TkExamPaperSimulationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkexampapersimulation.Hooks(f(g(h())))`.
func (c *TkExamPaperSimulationClient) Use(hooks ...Hook) {
	c.hooks.TkExamPaperSimulation = append(c.hooks.TkExamPaperSimulation, hooks...)
}

// Create returns a create builder for TkExamPaperSimulation.
func (c *TkExamPaperSimulationClient) Create() *TkExamPaperSimulationCreate {
	mutation := newTkExamPaperSimulationMutation(c.config, OpCreate)
	return &TkExamPaperSimulationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkExamPaperSimulation entities.
func (c *TkExamPaperSimulationClient) CreateBulk(builders ...*TkExamPaperSimulationCreate) *TkExamPaperSimulationCreateBulk {
	return &TkExamPaperSimulationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkExamPaperSimulation.
func (c *TkExamPaperSimulationClient) Update() *TkExamPaperSimulationUpdate {
	mutation := newTkExamPaperSimulationMutation(c.config, OpUpdate)
	return &TkExamPaperSimulationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkExamPaperSimulationClient) UpdateOne(teps *TkExamPaperSimulation) *TkExamPaperSimulationUpdateOne {
	mutation := newTkExamPaperSimulationMutation(c.config, OpUpdateOne, withTkExamPaperSimulation(teps))
	return &TkExamPaperSimulationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkExamPaperSimulationClient) UpdateOneID(id int) *TkExamPaperSimulationUpdateOne {
	mutation := newTkExamPaperSimulationMutation(c.config, OpUpdateOne, withTkExamPaperSimulationID(id))
	return &TkExamPaperSimulationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkExamPaperSimulation.
func (c *TkExamPaperSimulationClient) Delete() *TkExamPaperSimulationDelete {
	mutation := newTkExamPaperSimulationMutation(c.config, OpDelete)
	return &TkExamPaperSimulationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkExamPaperSimulationClient) DeleteOne(teps *TkExamPaperSimulation) *TkExamPaperSimulationDeleteOne {
	return c.DeleteOneID(teps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkExamPaperSimulationClient) DeleteOneID(id int) *TkExamPaperSimulationDeleteOne {
	builder := c.Delete().Where(tkexampapersimulation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkExamPaperSimulationDeleteOne{builder}
}

// Query returns a query builder for TkExamPaperSimulation.
func (c *TkExamPaperSimulationClient) Query() *TkExamPaperSimulationQuery {
	return &TkExamPaperSimulationQuery{
		config: c.config,
	}
}

// Get returns a TkExamPaperSimulation entity by its id.
func (c *TkExamPaperSimulationClient) Get(ctx context.Context, id int) (*TkExamPaperSimulation, error) {
	return c.Query().Where(tkexampapersimulation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkExamPaperSimulationClient) GetX(ctx context.Context, id int) *TkExamPaperSimulation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TkExamPaperSimulationClient) Hooks() []Hook {
	hooks := c.hooks.TkExamPaperSimulation
	return append(hooks[:len(hooks):len(hooks)], tkexampapersimulation.Hooks[:]...)
}

// TkExamPartitionQuestionLinkClient is a client for the TkExamPartitionQuestionLink schema.
type TkExamPartitionQuestionLinkClient struct {
	config
}

// NewTkExamPartitionQuestionLinkClient returns a client for the TkExamPartitionQuestionLink from the given config.
func NewTkExamPartitionQuestionLinkClient(c config) *TkExamPartitionQuestionLinkClient {
	return &TkExamPartitionQuestionLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkexampartitionquestionlink.Hooks(f(g(h())))`.
func (c *TkExamPartitionQuestionLinkClient) Use(hooks ...Hook) {
	c.hooks.TkExamPartitionQuestionLink = append(c.hooks.TkExamPartitionQuestionLink, hooks...)
}

// Create returns a create builder for TkExamPartitionQuestionLink.
func (c *TkExamPartitionQuestionLinkClient) Create() *TkExamPartitionQuestionLinkCreate {
	mutation := newTkExamPartitionQuestionLinkMutation(c.config, OpCreate)
	return &TkExamPartitionQuestionLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkExamPartitionQuestionLink entities.
func (c *TkExamPartitionQuestionLinkClient) CreateBulk(builders ...*TkExamPartitionQuestionLinkCreate) *TkExamPartitionQuestionLinkCreateBulk {
	return &TkExamPartitionQuestionLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkExamPartitionQuestionLink.
func (c *TkExamPartitionQuestionLinkClient) Update() *TkExamPartitionQuestionLinkUpdate {
	mutation := newTkExamPartitionQuestionLinkMutation(c.config, OpUpdate)
	return &TkExamPartitionQuestionLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkExamPartitionQuestionLinkClient) UpdateOne(tepql *TkExamPartitionQuestionLink) *TkExamPartitionQuestionLinkUpdateOne {
	mutation := newTkExamPartitionQuestionLinkMutation(c.config, OpUpdateOne, withTkExamPartitionQuestionLink(tepql))
	return &TkExamPartitionQuestionLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkExamPartitionQuestionLinkClient) UpdateOneID(id int) *TkExamPartitionQuestionLinkUpdateOne {
	mutation := newTkExamPartitionQuestionLinkMutation(c.config, OpUpdateOne, withTkExamPartitionQuestionLinkID(id))
	return &TkExamPartitionQuestionLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkExamPartitionQuestionLink.
func (c *TkExamPartitionQuestionLinkClient) Delete() *TkExamPartitionQuestionLinkDelete {
	mutation := newTkExamPartitionQuestionLinkMutation(c.config, OpDelete)
	return &TkExamPartitionQuestionLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkExamPartitionQuestionLinkClient) DeleteOne(tepql *TkExamPartitionQuestionLink) *TkExamPartitionQuestionLinkDeleteOne {
	return c.DeleteOneID(tepql.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkExamPartitionQuestionLinkClient) DeleteOneID(id int) *TkExamPartitionQuestionLinkDeleteOne {
	builder := c.Delete().Where(tkexampartitionquestionlink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkExamPartitionQuestionLinkDeleteOne{builder}
}

// Query returns a query builder for TkExamPartitionQuestionLink.
func (c *TkExamPartitionQuestionLinkClient) Query() *TkExamPartitionQuestionLinkQuery {
	return &TkExamPartitionQuestionLinkQuery{
		config: c.config,
	}
}

// Get returns a TkExamPartitionQuestionLink entity by its id.
func (c *TkExamPartitionQuestionLinkClient) Get(ctx context.Context, id int) (*TkExamPartitionQuestionLink, error) {
	return c.Query().Where(tkexampartitionquestionlink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkExamPartitionQuestionLinkClient) GetX(ctx context.Context, id int) *TkExamPartitionQuestionLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExamPaperPartition queries the exam_paper_partition edge of a TkExamPartitionQuestionLink.
func (c *TkExamPartitionQuestionLinkClient) QueryExamPaperPartition(tepql *TkExamPartitionQuestionLink) *TkExamPaperPartitionQuery {
	query := &TkExamPaperPartitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tepql.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampartitionquestionlink.Table, tkexampartitionquestionlink.FieldID, id),
			sqlgraph.To(tkexampaperpartition.Table, tkexampaperpartition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexampartitionquestionlink.ExamPaperPartitionTable, tkexampartitionquestionlink.ExamPaperPartitionColumn),
		)
		fromV = sqlgraph.Neighbors(tepql.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestion queries the question edge of a TkExamPartitionQuestionLink.
func (c *TkExamPartitionQuestionLinkClient) QueryQuestion(tepql *TkExamPartitionQuestionLink) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tepql.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampartitionquestionlink.Table, tkexampartitionquestionlink.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexampartitionquestionlink.QuestionTable, tkexampartitionquestionlink.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(tepql.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkExamPartitionQuestionLinkClient) Hooks() []Hook {
	hooks := c.hooks.TkExamPartitionQuestionLink
	return append(hooks[:len(hooks):len(hooks)], tkexampartitionquestionlink.Hooks[:]...)
}

// TkExamQuestionTypeClient is a client for the TkExamQuestionType schema.
type TkExamQuestionTypeClient struct {
	config
}

// NewTkExamQuestionTypeClient returns a client for the TkExamQuestionType from the given config.
func NewTkExamQuestionTypeClient(c config) *TkExamQuestionTypeClient {
	return &TkExamQuestionTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkexamquestiontype.Hooks(f(g(h())))`.
func (c *TkExamQuestionTypeClient) Use(hooks ...Hook) {
	c.hooks.TkExamQuestionType = append(c.hooks.TkExamQuestionType, hooks...)
}

// Create returns a create builder for TkExamQuestionType.
func (c *TkExamQuestionTypeClient) Create() *TkExamQuestionTypeCreate {
	mutation := newTkExamQuestionTypeMutation(c.config, OpCreate)
	return &TkExamQuestionTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkExamQuestionType entities.
func (c *TkExamQuestionTypeClient) CreateBulk(builders ...*TkExamQuestionTypeCreate) *TkExamQuestionTypeCreateBulk {
	return &TkExamQuestionTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkExamQuestionType.
func (c *TkExamQuestionTypeClient) Update() *TkExamQuestionTypeUpdate {
	mutation := newTkExamQuestionTypeMutation(c.config, OpUpdate)
	return &TkExamQuestionTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkExamQuestionTypeClient) UpdateOne(teqt *TkExamQuestionType) *TkExamQuestionTypeUpdateOne {
	mutation := newTkExamQuestionTypeMutation(c.config, OpUpdateOne, withTkExamQuestionType(teqt))
	return &TkExamQuestionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkExamQuestionTypeClient) UpdateOneID(id int) *TkExamQuestionTypeUpdateOne {
	mutation := newTkExamQuestionTypeMutation(c.config, OpUpdateOne, withTkExamQuestionTypeID(id))
	return &TkExamQuestionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkExamQuestionType.
func (c *TkExamQuestionTypeClient) Delete() *TkExamQuestionTypeDelete {
	mutation := newTkExamQuestionTypeMutation(c.config, OpDelete)
	return &TkExamQuestionTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkExamQuestionTypeClient) DeleteOne(teqt *TkExamQuestionType) *TkExamQuestionTypeDeleteOne {
	return c.DeleteOneID(teqt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkExamQuestionTypeClient) DeleteOneID(id int) *TkExamQuestionTypeDeleteOne {
	builder := c.Delete().Where(tkexamquestiontype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkExamQuestionTypeDeleteOne{builder}
}

// Query returns a query builder for TkExamQuestionType.
func (c *TkExamQuestionTypeClient) Query() *TkExamQuestionTypeQuery {
	return &TkExamQuestionTypeQuery{
		config: c.config,
	}
}

// Get returns a TkExamQuestionType entity by its id.
func (c *TkExamQuestionTypeClient) Get(ctx context.Context, id int) (*TkExamQuestionType, error) {
	return c.Query().Where(tkexamquestiontype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkExamQuestionTypeClient) GetX(ctx context.Context, id int) *TkExamQuestionType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionBank queries the question_bank edge of a TkExamQuestionType.
func (c *TkExamQuestionTypeClient) QueryQuestionBank(teqt *TkExamQuestionType) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := teqt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexamquestiontype.Table, tkexamquestiontype.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexamquestiontype.QuestionBankTable, tkexamquestiontype.QuestionBankColumn),
		)
		fromV = sqlgraph.Neighbors(teqt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkExamQuestionTypeClient) Hooks() []Hook {
	hooks := c.hooks.TkExamQuestionType
	return append(hooks[:len(hooks):len(hooks)], tkexamquestiontype.Hooks[:]...)
}

// TkKnowledgePointClient is a client for the TkKnowledgePoint schema.
type TkKnowledgePointClient struct {
	config
}

// NewTkKnowledgePointClient returns a client for the TkKnowledgePoint from the given config.
func NewTkKnowledgePointClient(c config) *TkKnowledgePointClient {
	return &TkKnowledgePointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkknowledgepoint.Hooks(f(g(h())))`.
func (c *TkKnowledgePointClient) Use(hooks ...Hook) {
	c.hooks.TkKnowledgePoint = append(c.hooks.TkKnowledgePoint, hooks...)
}

// Create returns a create builder for TkKnowledgePoint.
func (c *TkKnowledgePointClient) Create() *TkKnowledgePointCreate {
	mutation := newTkKnowledgePointMutation(c.config, OpCreate)
	return &TkKnowledgePointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkKnowledgePoint entities.
func (c *TkKnowledgePointClient) CreateBulk(builders ...*TkKnowledgePointCreate) *TkKnowledgePointCreateBulk {
	return &TkKnowledgePointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkKnowledgePoint.
func (c *TkKnowledgePointClient) Update() *TkKnowledgePointUpdate {
	mutation := newTkKnowledgePointMutation(c.config, OpUpdate)
	return &TkKnowledgePointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkKnowledgePointClient) UpdateOne(tkp *TkKnowledgePoint) *TkKnowledgePointUpdateOne {
	mutation := newTkKnowledgePointMutation(c.config, OpUpdateOne, withTkKnowledgePoint(tkp))
	return &TkKnowledgePointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkKnowledgePointClient) UpdateOneID(id int) *TkKnowledgePointUpdateOne {
	mutation := newTkKnowledgePointMutation(c.config, OpUpdateOne, withTkKnowledgePointID(id))
	return &TkKnowledgePointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkKnowledgePoint.
func (c *TkKnowledgePointClient) Delete() *TkKnowledgePointDelete {
	mutation := newTkKnowledgePointMutation(c.config, OpDelete)
	return &TkKnowledgePointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkKnowledgePointClient) DeleteOne(tkp *TkKnowledgePoint) *TkKnowledgePointDeleteOne {
	return c.DeleteOneID(tkp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkKnowledgePointClient) DeleteOneID(id int) *TkKnowledgePointDeleteOne {
	builder := c.Delete().Where(tkknowledgepoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkKnowledgePointDeleteOne{builder}
}

// Query returns a query builder for TkKnowledgePoint.
func (c *TkKnowledgePointClient) Query() *TkKnowledgePointQuery {
	return &TkKnowledgePointQuery{
		config: c.config,
	}
}

// Get returns a TkKnowledgePoint entity by its id.
func (c *TkKnowledgePointClient) Get(ctx context.Context, id int) (*TkKnowledgePoint, error) {
	return c.Query().Where(tkknowledgepoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkKnowledgePointClient) GetX(ctx context.Context, id int) *TkKnowledgePoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionBank queries the question_bank edge of a TkKnowledgePoint.
func (c *TkKnowledgePointClient) QueryQuestionBank(tkp *TkKnowledgePoint) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tkp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkknowledgepoint.Table, tkknowledgepoint.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkknowledgepoint.QuestionBankTable, tkknowledgepoint.QuestionBankColumn),
		)
		fromV = sqlgraph.Neighbors(tkp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestions queries the questions edge of a TkKnowledgePoint.
func (c *TkKnowledgePointClient) QueryQuestions(tkp *TkKnowledgePoint) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tkp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkknowledgepoint.Table, tkknowledgepoint.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tkknowledgepoint.QuestionsTable, tkknowledgepoint.QuestionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tkp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkKnowledgePointClient) Hooks() []Hook {
	hooks := c.hooks.TkKnowledgePoint
	return append(hooks[:len(hooks):len(hooks)], tkknowledgepoint.Hooks[:]...)
}

// TkQuestionClient is a client for the TkQuestion schema.
type TkQuestionClient struct {
	config
}

// NewTkQuestionClient returns a client for the TkQuestion from the given config.
func NewTkQuestionClient(c config) *TkQuestionClient {
	return &TkQuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkquestion.Hooks(f(g(h())))`.
func (c *TkQuestionClient) Use(hooks ...Hook) {
	c.hooks.TkQuestion = append(c.hooks.TkQuestion, hooks...)
}

// Create returns a create builder for TkQuestion.
func (c *TkQuestionClient) Create() *TkQuestionCreate {
	mutation := newTkQuestionMutation(c.config, OpCreate)
	return &TkQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkQuestion entities.
func (c *TkQuestionClient) CreateBulk(builders ...*TkQuestionCreate) *TkQuestionCreateBulk {
	return &TkQuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkQuestion.
func (c *TkQuestionClient) Update() *TkQuestionUpdate {
	mutation := newTkQuestionMutation(c.config, OpUpdate)
	return &TkQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkQuestionClient) UpdateOne(tq *TkQuestion) *TkQuestionUpdateOne {
	mutation := newTkQuestionMutation(c.config, OpUpdateOne, withTkQuestion(tq))
	return &TkQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkQuestionClient) UpdateOneID(id int) *TkQuestionUpdateOne {
	mutation := newTkQuestionMutation(c.config, OpUpdateOne, withTkQuestionID(id))
	return &TkQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkQuestion.
func (c *TkQuestionClient) Delete() *TkQuestionDelete {
	mutation := newTkQuestionMutation(c.config, OpDelete)
	return &TkQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkQuestionClient) DeleteOne(tq *TkQuestion) *TkQuestionDeleteOne {
	return c.DeleteOneID(tq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkQuestionClient) DeleteOneID(id int) *TkQuestionDeleteOne {
	builder := c.Delete().Where(tkquestion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkQuestionDeleteOne{builder}
}

// Query returns a query builder for TkQuestion.
func (c *TkQuestionClient) Query() *TkQuestionQuery {
	return &TkQuestionQuery{
		config: c.config,
	}
}

// Get returns a TkQuestion entity by its id.
func (c *TkQuestionClient) Get(ctx context.Context, id int) (*TkQuestion, error) {
	return c.Query().Where(tkquestion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkQuestionClient) GetX(ctx context.Context, id int) *TkQuestion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionBank queries the question_bank edge of a TkQuestion.
func (c *TkQuestionClient) QueryQuestionBank(tq *TkQuestion) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestion.QuestionBankTable, tkquestion.QuestionBankColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a TkQuestion.
func (c *TkQuestionClient) QueryAdmin(tq *TkQuestion) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestion.AdminTable, tkquestion.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRandDom queries the user_rand_dom edge of a TkQuestion.
func (c *TkQuestionClient) QueryUserRandDom(tq *TkQuestion) *TkUserRandomExamRecodeQuery {
	query := &TkUserRandomExamRecodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkuserrandomexamrecode.Table, tkuserrandomexamrecode.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tkquestion.UserRandDomTable, tkquestion.UserRandDomPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnswerOptions queries the answer_options edge of a TkQuestion.
func (c *TkQuestionClient) QueryAnswerOptions(tq *TkQuestion) *TkQuestionAnswerOptionQuery {
	query := &TkQuestionAnswerOptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkquestionansweroption.Table, tkquestionansweroption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.AnswerOptionsTable, tkquestion.AnswerOptionsColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKnowledgePoints queries the knowledge_points edge of a TkQuestion.
func (c *TkQuestionClient) QueryKnowledgePoints(tq *TkQuestion) *TkKnowledgePointQuery {
	query := &TkKnowledgePointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkknowledgepoint.Table, tkknowledgepoint.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tkquestion.KnowledgePointsTable, tkquestion.KnowledgePointsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestionSectionLinks queries the question_section_links edge of a TkQuestion.
func (c *TkQuestionClient) QueryQuestionSectionLinks(tq *TkQuestion) *TkQuestionSectionQuery {
	query := &TkQuestionSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkquestionsection.Table, tkquestionsection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.QuestionSectionLinksTable, tkquestion.QuestionSectionLinksColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPartitionQuestions queries the exam_partition_questions edge of a TkQuestion.
func (c *TkQuestionClient) QueryExamPartitionQuestions(tq *TkQuestion) *TkExamPartitionQuestionLinkQuery {
	query := &TkExamPartitionQuestionLinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkexampartitionquestionlink.Table, tkexampartitionquestionlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.ExamPartitionQuestionsTable, tkquestion.ExamPartitionQuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestionErrorFeedbacks queries the question_error_feedbacks edge of a TkQuestion.
func (c *TkQuestionClient) QueryQuestionErrorFeedbacks(tq *TkQuestion) *TkQuestionErrorFeedbackQuery {
	query := &TkQuestionErrorFeedbackQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkquestionerrorfeedback.Table, tkquestionerrorfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.QuestionErrorFeedbacksTable, tkquestion.QuestionErrorFeedbacksColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRecords queries the user_records edge of a TkQuestion.
func (c *TkQuestionClient) QueryUserRecords(tq *TkQuestion) *TkUserQuestionRecordQuery {
	query := &TkUserQuestionRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.UserRecordsTable, tkquestion.UserRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySmallCategoryQuestions queries the small_category_questions edge of a TkQuestion.
func (c *TkQuestionClient) QuerySmallCategoryQuestions(tq *TkQuestion) *KcSmallCategoryQuestionQuery {
	query := &KcSmallCategoryQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(kcsmallcategoryquestion.Table, kcsmallcategoryquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.SmallCategoryQuestionsTable, tkquestion.SmallCategoryQuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserExamQuestions queries the user_exam_questions edge of a TkQuestion.
func (c *TkQuestionClient) QueryUserExamQuestions(tq *TkQuestion) *TkUserSimulationTeacherMarkQuery {
	query := &TkUserSimulationTeacherMarkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkusersimulationteachermark.Table, tkusersimulationteachermark.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.UserExamQuestionsTable, tkquestion.UserExamQuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRecodeWrong queries the user_recode_wrong edge of a TkQuestion.
func (c *TkQuestionClient) QueryUserRecodeWrong(tq *TkQuestion) *TkUserWrongQuestionRecodeQuery {
	query := &TkUserWrongQuestionRecodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkuserwrongquestionrecode.Table, tkuserwrongquestionrecode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.UserRecodeWrongTable, tkquestion.UserRecodeWrongColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a TkQuestion.
func (c *TkQuestionClient) QueryParent(tq *TkQuestion) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestion.ParentTable, tkquestion.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a TkQuestion.
func (c *TkQuestionClient) QueryChildren(tq *TkQuestion) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.ChildrenTable, tkquestion.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCollectionQuestion queries the collection_question edge of a TkQuestion.
func (c *TkQuestionClient) QueryCollectionQuestion(tq *TkQuestion) *CollectionQuery {
	query := &CollectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, id),
			sqlgraph.To(collection.Table, collection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.CollectionQuestionTable, tkquestion.CollectionQuestionColumn),
		)
		fromV = sqlgraph.Neighbors(tq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkQuestionClient) Hooks() []Hook {
	hooks := c.hooks.TkQuestion
	return append(hooks[:len(hooks):len(hooks)], tkquestion.Hooks[:]...)
}

// TkQuestionAnswerOptionClient is a client for the TkQuestionAnswerOption schema.
type TkQuestionAnswerOptionClient struct {
	config
}

// NewTkQuestionAnswerOptionClient returns a client for the TkQuestionAnswerOption from the given config.
func NewTkQuestionAnswerOptionClient(c config) *TkQuestionAnswerOptionClient {
	return &TkQuestionAnswerOptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkquestionansweroption.Hooks(f(g(h())))`.
func (c *TkQuestionAnswerOptionClient) Use(hooks ...Hook) {
	c.hooks.TkQuestionAnswerOption = append(c.hooks.TkQuestionAnswerOption, hooks...)
}

// Create returns a create builder for TkQuestionAnswerOption.
func (c *TkQuestionAnswerOptionClient) Create() *TkQuestionAnswerOptionCreate {
	mutation := newTkQuestionAnswerOptionMutation(c.config, OpCreate)
	return &TkQuestionAnswerOptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkQuestionAnswerOption entities.
func (c *TkQuestionAnswerOptionClient) CreateBulk(builders ...*TkQuestionAnswerOptionCreate) *TkQuestionAnswerOptionCreateBulk {
	return &TkQuestionAnswerOptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkQuestionAnswerOption.
func (c *TkQuestionAnswerOptionClient) Update() *TkQuestionAnswerOptionUpdate {
	mutation := newTkQuestionAnswerOptionMutation(c.config, OpUpdate)
	return &TkQuestionAnswerOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkQuestionAnswerOptionClient) UpdateOne(tqao *TkQuestionAnswerOption) *TkQuestionAnswerOptionUpdateOne {
	mutation := newTkQuestionAnswerOptionMutation(c.config, OpUpdateOne, withTkQuestionAnswerOption(tqao))
	return &TkQuestionAnswerOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkQuestionAnswerOptionClient) UpdateOneID(id int) *TkQuestionAnswerOptionUpdateOne {
	mutation := newTkQuestionAnswerOptionMutation(c.config, OpUpdateOne, withTkQuestionAnswerOptionID(id))
	return &TkQuestionAnswerOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkQuestionAnswerOption.
func (c *TkQuestionAnswerOptionClient) Delete() *TkQuestionAnswerOptionDelete {
	mutation := newTkQuestionAnswerOptionMutation(c.config, OpDelete)
	return &TkQuestionAnswerOptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkQuestionAnswerOptionClient) DeleteOne(tqao *TkQuestionAnswerOption) *TkQuestionAnswerOptionDeleteOne {
	return c.DeleteOneID(tqao.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkQuestionAnswerOptionClient) DeleteOneID(id int) *TkQuestionAnswerOptionDeleteOne {
	builder := c.Delete().Where(tkquestionansweroption.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkQuestionAnswerOptionDeleteOne{builder}
}

// Query returns a query builder for TkQuestionAnswerOption.
func (c *TkQuestionAnswerOptionClient) Query() *TkQuestionAnswerOptionQuery {
	return &TkQuestionAnswerOptionQuery{
		config: c.config,
	}
}

// Get returns a TkQuestionAnswerOption entity by its id.
func (c *TkQuestionAnswerOptionClient) Get(ctx context.Context, id int) (*TkQuestionAnswerOption, error) {
	return c.Query().Where(tkquestionansweroption.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkQuestionAnswerOptionClient) GetX(ctx context.Context, id int) *TkQuestionAnswerOption {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestion queries the question edge of a TkQuestionAnswerOption.
func (c *TkQuestionAnswerOptionClient) QueryQuestion(tqao *TkQuestionAnswerOption) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqao.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionansweroption.Table, tkquestionansweroption.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestionansweroption.QuestionTable, tkquestionansweroption.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(tqao.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkQuestionAnswerOptionClient) Hooks() []Hook {
	hooks := c.hooks.TkQuestionAnswerOption
	return append(hooks[:len(hooks):len(hooks)], tkquestionansweroption.Hooks[:]...)
}

// TkQuestionBankClient is a client for the TkQuestionBank schema.
type TkQuestionBankClient struct {
	config
}

// NewTkQuestionBankClient returns a client for the TkQuestionBank from the given config.
func NewTkQuestionBankClient(c config) *TkQuestionBankClient {
	return &TkQuestionBankClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkquestionbank.Hooks(f(g(h())))`.
func (c *TkQuestionBankClient) Use(hooks ...Hook) {
	c.hooks.TkQuestionBank = append(c.hooks.TkQuestionBank, hooks...)
}

// Create returns a create builder for TkQuestionBank.
func (c *TkQuestionBankClient) Create() *TkQuestionBankCreate {
	mutation := newTkQuestionBankMutation(c.config, OpCreate)
	return &TkQuestionBankCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkQuestionBank entities.
func (c *TkQuestionBankClient) CreateBulk(builders ...*TkQuestionBankCreate) *TkQuestionBankCreateBulk {
	return &TkQuestionBankCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkQuestionBank.
func (c *TkQuestionBankClient) Update() *TkQuestionBankUpdate {
	mutation := newTkQuestionBankMutation(c.config, OpUpdate)
	return &TkQuestionBankUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkQuestionBankClient) UpdateOne(tqb *TkQuestionBank) *TkQuestionBankUpdateOne {
	mutation := newTkQuestionBankMutation(c.config, OpUpdateOne, withTkQuestionBank(tqb))
	return &TkQuestionBankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkQuestionBankClient) UpdateOneID(id int) *TkQuestionBankUpdateOne {
	mutation := newTkQuestionBankMutation(c.config, OpUpdateOne, withTkQuestionBankID(id))
	return &TkQuestionBankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkQuestionBank.
func (c *TkQuestionBankClient) Delete() *TkQuestionBankDelete {
	mutation := newTkQuestionBankMutation(c.config, OpDelete)
	return &TkQuestionBankDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkQuestionBankClient) DeleteOne(tqb *TkQuestionBank) *TkQuestionBankDeleteOne {
	return c.DeleteOneID(tqb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkQuestionBankClient) DeleteOneID(id int) *TkQuestionBankDeleteOne {
	builder := c.Delete().Where(tkquestionbank.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkQuestionBankDeleteOne{builder}
}

// Query returns a query builder for TkQuestionBank.
func (c *TkQuestionBankClient) Query() *TkQuestionBankQuery {
	return &TkQuestionBankQuery{
		config: c.config,
	}
}

// Get returns a TkQuestionBank entity by its id.
func (c *TkQuestionBankClient) Get(ctx context.Context, id int) (*TkQuestionBank, error) {
	return c.Query().Where(tkquestionbank.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkQuestionBankClient) GetX(ctx context.Context, id int) *TkQuestionBank {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItemCategory queries the item_category edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryItemCategory(tqb *TkQuestionBank) *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestionbank.ItemCategoryTable, tkquestionbank.ItemCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryAdmin(tqb *TkQuestionBank) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestionbank.AdminTable, tkquestionbank.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestionChapters queries the question_chapters edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryQuestionChapters(tqb *TkQuestionBank) *TkChapterQuery {
	query := &TkChapterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(tkchapter.Table, tkchapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.QuestionChaptersTable, tkquestionbank.QuestionChaptersColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestionBankCourses queries the question_bank_courses edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryQuestionBankCourses(tqb *TkQuestionBank) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.QuestionBankCoursesTable, tkquestionbank.QuestionBankCoursesColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestions queries the questions edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryQuestions(tqb *TkQuestionBank) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.QuestionsTable, tkquestionbank.QuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPapers queries the exam_papers edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryExamPapers(tqb *TkQuestionBank) *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.ExamPapersTable, tkquestionbank.ExamPapersColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamQuestionTypes queries the exam_question_types edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryExamQuestionTypes(tqb *TkQuestionBank) *TkExamQuestionTypeQuery {
	query := &TkExamQuestionTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(tkexamquestiontype.Table, tkexamquestiontype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.ExamQuestionTypesTable, tkquestionbank.ExamQuestionTypesColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserQuestionBank queries the user_question_bank edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryUserQuestionBank(tqb *TkQuestionBank) *TkUserQuestionBankRecordQuery {
	query := &TkUserQuestionBankRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(tkuserquestionbankrecord.Table, tkuserquestionbankrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.UserQuestionBankTable, tkquestionbank.UserQuestionBankColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserBankRecords queries the user_bank_records edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryUserBankRecords(tqb *TkQuestionBank) *TkUserQuestionRecordQuery {
	query := &TkUserQuestionRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.UserBankRecordsTable, tkquestionbank.UserBankRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKnowledgePoints queries the knowledge_points edge of a TkQuestionBank.
func (c *TkQuestionBankClient) QueryKnowledgePoints(tqb *TkQuestionBank) *TkKnowledgePointQuery {
	query := &TkKnowledgePointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, id),
			sqlgraph.To(tkknowledgepoint.Table, tkknowledgepoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.KnowledgePointsTable, tkquestionbank.KnowledgePointsColumn),
		)
		fromV = sqlgraph.Neighbors(tqb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkQuestionBankClient) Hooks() []Hook {
	hooks := c.hooks.TkQuestionBank
	return append(hooks[:len(hooks):len(hooks)], tkquestionbank.Hooks[:]...)
}

// TkQuestionErrorFeedbackClient is a client for the TkQuestionErrorFeedback schema.
type TkQuestionErrorFeedbackClient struct {
	config
}

// NewTkQuestionErrorFeedbackClient returns a client for the TkQuestionErrorFeedback from the given config.
func NewTkQuestionErrorFeedbackClient(c config) *TkQuestionErrorFeedbackClient {
	return &TkQuestionErrorFeedbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkquestionerrorfeedback.Hooks(f(g(h())))`.
func (c *TkQuestionErrorFeedbackClient) Use(hooks ...Hook) {
	c.hooks.TkQuestionErrorFeedback = append(c.hooks.TkQuestionErrorFeedback, hooks...)
}

// Create returns a create builder for TkQuestionErrorFeedback.
func (c *TkQuestionErrorFeedbackClient) Create() *TkQuestionErrorFeedbackCreate {
	mutation := newTkQuestionErrorFeedbackMutation(c.config, OpCreate)
	return &TkQuestionErrorFeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkQuestionErrorFeedback entities.
func (c *TkQuestionErrorFeedbackClient) CreateBulk(builders ...*TkQuestionErrorFeedbackCreate) *TkQuestionErrorFeedbackCreateBulk {
	return &TkQuestionErrorFeedbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkQuestionErrorFeedback.
func (c *TkQuestionErrorFeedbackClient) Update() *TkQuestionErrorFeedbackUpdate {
	mutation := newTkQuestionErrorFeedbackMutation(c.config, OpUpdate)
	return &TkQuestionErrorFeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkQuestionErrorFeedbackClient) UpdateOne(tqef *TkQuestionErrorFeedback) *TkQuestionErrorFeedbackUpdateOne {
	mutation := newTkQuestionErrorFeedbackMutation(c.config, OpUpdateOne, withTkQuestionErrorFeedback(tqef))
	return &TkQuestionErrorFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkQuestionErrorFeedbackClient) UpdateOneID(id int) *TkQuestionErrorFeedbackUpdateOne {
	mutation := newTkQuestionErrorFeedbackMutation(c.config, OpUpdateOne, withTkQuestionErrorFeedbackID(id))
	return &TkQuestionErrorFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkQuestionErrorFeedback.
func (c *TkQuestionErrorFeedbackClient) Delete() *TkQuestionErrorFeedbackDelete {
	mutation := newTkQuestionErrorFeedbackMutation(c.config, OpDelete)
	return &TkQuestionErrorFeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkQuestionErrorFeedbackClient) DeleteOne(tqef *TkQuestionErrorFeedback) *TkQuestionErrorFeedbackDeleteOne {
	return c.DeleteOneID(tqef.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkQuestionErrorFeedbackClient) DeleteOneID(id int) *TkQuestionErrorFeedbackDeleteOne {
	builder := c.Delete().Where(tkquestionerrorfeedback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkQuestionErrorFeedbackDeleteOne{builder}
}

// Query returns a query builder for TkQuestionErrorFeedback.
func (c *TkQuestionErrorFeedbackClient) Query() *TkQuestionErrorFeedbackQuery {
	return &TkQuestionErrorFeedbackQuery{
		config: c.config,
	}
}

// Get returns a TkQuestionErrorFeedback entity by its id.
func (c *TkQuestionErrorFeedbackClient) Get(ctx context.Context, id int) (*TkQuestionErrorFeedback, error) {
	return c.Query().Where(tkquestionerrorfeedback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkQuestionErrorFeedbackClient) GetX(ctx context.Context, id int) *TkQuestionErrorFeedback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestion queries the question edge of a TkQuestionErrorFeedback.
func (c *TkQuestionErrorFeedbackClient) QueryQuestion(tqef *TkQuestionErrorFeedback) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqef.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionerrorfeedback.Table, tkquestionerrorfeedback.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestionerrorfeedback.QuestionTable, tkquestionerrorfeedback.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(tqef.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a TkQuestionErrorFeedback.
func (c *TkQuestionErrorFeedbackClient) QueryAdmin(tqef *TkQuestionErrorFeedback) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqef.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionerrorfeedback.Table, tkquestionerrorfeedback.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestionerrorfeedback.AdminTable, tkquestionerrorfeedback.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(tqef.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkQuestionErrorFeedbackClient) Hooks() []Hook {
	hooks := c.hooks.TkQuestionErrorFeedback
	return append(hooks[:len(hooks):len(hooks)], tkquestionerrorfeedback.Hooks[:]...)
}

// TkQuestionSectionClient is a client for the TkQuestionSection schema.
type TkQuestionSectionClient struct {
	config
}

// NewTkQuestionSectionClient returns a client for the TkQuestionSection from the given config.
func NewTkQuestionSectionClient(c config) *TkQuestionSectionClient {
	return &TkQuestionSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkquestionsection.Hooks(f(g(h())))`.
func (c *TkQuestionSectionClient) Use(hooks ...Hook) {
	c.hooks.TkQuestionSection = append(c.hooks.TkQuestionSection, hooks...)
}

// Create returns a create builder for TkQuestionSection.
func (c *TkQuestionSectionClient) Create() *TkQuestionSectionCreate {
	mutation := newTkQuestionSectionMutation(c.config, OpCreate)
	return &TkQuestionSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkQuestionSection entities.
func (c *TkQuestionSectionClient) CreateBulk(builders ...*TkQuestionSectionCreate) *TkQuestionSectionCreateBulk {
	return &TkQuestionSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkQuestionSection.
func (c *TkQuestionSectionClient) Update() *TkQuestionSectionUpdate {
	mutation := newTkQuestionSectionMutation(c.config, OpUpdate)
	return &TkQuestionSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkQuestionSectionClient) UpdateOne(tqs *TkQuestionSection) *TkQuestionSectionUpdateOne {
	mutation := newTkQuestionSectionMutation(c.config, OpUpdateOne, withTkQuestionSection(tqs))
	return &TkQuestionSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkQuestionSectionClient) UpdateOneID(id int) *TkQuestionSectionUpdateOne {
	mutation := newTkQuestionSectionMutation(c.config, OpUpdateOne, withTkQuestionSectionID(id))
	return &TkQuestionSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkQuestionSection.
func (c *TkQuestionSectionClient) Delete() *TkQuestionSectionDelete {
	mutation := newTkQuestionSectionMutation(c.config, OpDelete)
	return &TkQuestionSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkQuestionSectionClient) DeleteOne(tqs *TkQuestionSection) *TkQuestionSectionDeleteOne {
	return c.DeleteOneID(tqs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkQuestionSectionClient) DeleteOneID(id int) *TkQuestionSectionDeleteOne {
	builder := c.Delete().Where(tkquestionsection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkQuestionSectionDeleteOne{builder}
}

// Query returns a query builder for TkQuestionSection.
func (c *TkQuestionSectionClient) Query() *TkQuestionSectionQuery {
	return &TkQuestionSectionQuery{
		config: c.config,
	}
}

// Get returns a TkQuestionSection entity by its id.
func (c *TkQuestionSectionClient) Get(ctx context.Context, id int) (*TkQuestionSection, error) {
	return c.Query().Where(tkquestionsection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkQuestionSectionClient) GetX(ctx context.Context, id int) *TkQuestionSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionSection queries the question_section edge of a TkQuestionSection.
func (c *TkQuestionSectionClient) QueryQuestionSection(tqs *TkQuestionSection) *TkSectionQuery {
	query := &TkSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionsection.Table, tkquestionsection.FieldID, id),
			sqlgraph.To(tksection.Table, tksection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestionsection.QuestionSectionTable, tkquestionsection.QuestionSectionColumn),
		)
		fromV = sqlgraph.Neighbors(tqs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySectionQuestion queries the section_question edge of a TkQuestionSection.
func (c *TkQuestionSectionClient) QuerySectionQuestion(tqs *TkQuestionSection) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tqs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionsection.Table, tkquestionsection.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestionsection.SectionQuestionTable, tkquestionsection.SectionQuestionColumn),
		)
		fromV = sqlgraph.Neighbors(tqs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkQuestionSectionClient) Hooks() []Hook {
	hooks := c.hooks.TkQuestionSection
	return append(hooks[:len(hooks):len(hooks)], tkquestionsection.Hooks[:]...)
}

// TkSectionClient is a client for the TkSection schema.
type TkSectionClient struct {
	config
}

// NewTkSectionClient returns a client for the TkSection from the given config.
func NewTkSectionClient(c config) *TkSectionClient {
	return &TkSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tksection.Hooks(f(g(h())))`.
func (c *TkSectionClient) Use(hooks ...Hook) {
	c.hooks.TkSection = append(c.hooks.TkSection, hooks...)
}

// Create returns a create builder for TkSection.
func (c *TkSectionClient) Create() *TkSectionCreate {
	mutation := newTkSectionMutation(c.config, OpCreate)
	return &TkSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkSection entities.
func (c *TkSectionClient) CreateBulk(builders ...*TkSectionCreate) *TkSectionCreateBulk {
	return &TkSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkSection.
func (c *TkSectionClient) Update() *TkSectionUpdate {
	mutation := newTkSectionMutation(c.config, OpUpdate)
	return &TkSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkSectionClient) UpdateOne(ts *TkSection) *TkSectionUpdateOne {
	mutation := newTkSectionMutation(c.config, OpUpdateOne, withTkSection(ts))
	return &TkSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkSectionClient) UpdateOneID(id int) *TkSectionUpdateOne {
	mutation := newTkSectionMutation(c.config, OpUpdateOne, withTkSectionID(id))
	return &TkSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkSection.
func (c *TkSectionClient) Delete() *TkSectionDelete {
	mutation := newTkSectionMutation(c.config, OpDelete)
	return &TkSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkSectionClient) DeleteOne(ts *TkSection) *TkSectionDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkSectionClient) DeleteOneID(id int) *TkSectionDeleteOne {
	builder := c.Delete().Where(tksection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkSectionDeleteOne{builder}
}

// Query returns a query builder for TkSection.
func (c *TkSectionClient) Query() *TkSectionQuery {
	return &TkSectionQuery{
		config: c.config,
	}
}

// Get returns a TkSection entity by its id.
func (c *TkSectionClient) Get(ctx context.Context, id int) (*TkSection, error) {
	return c.Query().Where(tksection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkSectionClient) GetX(ctx context.Context, id int) *TkSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChapter queries the chapter edge of a TkSection.
func (c *TkSectionClient) QueryChapter(ts *TkSection) *TkChapterQuery {
	query := &TkChapterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, id),
			sqlgraph.To(tkchapter.Table, tkchapter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tksection.ChapterTable, tksection.ChapterColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTkSectionLinks queries the tk_section_links edge of a TkSection.
func (c *TkSectionClient) QueryTkSectionLinks(ts *TkSection) *TkQuestionSectionQuery {
	query := &TkQuestionSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, id),
			sqlgraph.To(tkquestionsection.Table, tkquestionsection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tksection.TkSectionLinksTable, tksection.TkSectionLinksColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySectionRecords queries the section_records edge of a TkSection.
func (c *TkSectionClient) QuerySectionRecords(ts *TkSection) *TkUserQuestionRecordQuery {
	query := &TkUserQuestionRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, id),
			sqlgraph.To(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tksection.SectionRecordsTable, tksection.SectionRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserSectionExam queries the user_section_exam edge of a TkSection.
func (c *TkSectionClient) QueryUserSectionExam(ts *TkSection) *TkUserExamScoreRecordQuery {
	query := &TkUserExamScoreRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, id),
			sqlgraph.To(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tksection.UserSectionExamTable, tksection.UserSectionExamColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMakeUserQuestionSec queries the make_user_question_sec edge of a TkSection.
func (c *TkSectionClient) QueryMakeUserQuestionSec(ts *TkSection) *MakeUserQuestionRecordQuery {
	query := &MakeUserQuestionRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, id),
			sqlgraph.To(makeuserquestionrecord.Table, makeuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tksection.MakeUserQuestionSecTable, tksection.MakeUserQuestionSecColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkSectionClient) Hooks() []Hook {
	hooks := c.hooks.TkSection
	return append(hooks[:len(hooks):len(hooks)], tksection.Hooks[:]...)
}

// TkUserExamScoreRecordClient is a client for the TkUserExamScoreRecord schema.
type TkUserExamScoreRecordClient struct {
	config
}

// NewTkUserExamScoreRecordClient returns a client for the TkUserExamScoreRecord from the given config.
func NewTkUserExamScoreRecordClient(c config) *TkUserExamScoreRecordClient {
	return &TkUserExamScoreRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkuserexamscorerecord.Hooks(f(g(h())))`.
func (c *TkUserExamScoreRecordClient) Use(hooks ...Hook) {
	c.hooks.TkUserExamScoreRecord = append(c.hooks.TkUserExamScoreRecord, hooks...)
}

// Create returns a create builder for TkUserExamScoreRecord.
func (c *TkUserExamScoreRecordClient) Create() *TkUserExamScoreRecordCreate {
	mutation := newTkUserExamScoreRecordMutation(c.config, OpCreate)
	return &TkUserExamScoreRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkUserExamScoreRecord entities.
func (c *TkUserExamScoreRecordClient) CreateBulk(builders ...*TkUserExamScoreRecordCreate) *TkUserExamScoreRecordCreateBulk {
	return &TkUserExamScoreRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkUserExamScoreRecord.
func (c *TkUserExamScoreRecordClient) Update() *TkUserExamScoreRecordUpdate {
	mutation := newTkUserExamScoreRecordMutation(c.config, OpUpdate)
	return &TkUserExamScoreRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkUserExamScoreRecordClient) UpdateOne(tuesr *TkUserExamScoreRecord) *TkUserExamScoreRecordUpdateOne {
	mutation := newTkUserExamScoreRecordMutation(c.config, OpUpdateOne, withTkUserExamScoreRecord(tuesr))
	return &TkUserExamScoreRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkUserExamScoreRecordClient) UpdateOneID(id int) *TkUserExamScoreRecordUpdateOne {
	mutation := newTkUserExamScoreRecordMutation(c.config, OpUpdateOne, withTkUserExamScoreRecordID(id))
	return &TkUserExamScoreRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkUserExamScoreRecord.
func (c *TkUserExamScoreRecordClient) Delete() *TkUserExamScoreRecordDelete {
	mutation := newTkUserExamScoreRecordMutation(c.config, OpDelete)
	return &TkUserExamScoreRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkUserExamScoreRecordClient) DeleteOne(tuesr *TkUserExamScoreRecord) *TkUserExamScoreRecordDeleteOne {
	return c.DeleteOneID(tuesr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkUserExamScoreRecordClient) DeleteOneID(id int) *TkUserExamScoreRecordDeleteOne {
	builder := c.Delete().Where(tkuserexamscorerecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkUserExamScoreRecordDeleteOne{builder}
}

// Query returns a query builder for TkUserExamScoreRecord.
func (c *TkUserExamScoreRecordClient) Query() *TkUserExamScoreRecordQuery {
	return &TkUserExamScoreRecordQuery{
		config: c.config,
	}
}

// Get returns a TkUserExamScoreRecord entity by its id.
func (c *TkUserExamScoreRecordClient) Get(ctx context.Context, id int) (*TkUserExamScoreRecord, error) {
	return c.Query().Where(tkuserexamscorerecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkUserExamScoreRecordClient) GetX(ctx context.Context, id int) *TkUserExamScoreRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExamPaper queries the exam_paper edge of a TkUserExamScoreRecord.
func (c *TkUserExamScoreRecordClient) QueryExamPaper(tuesr *TkUserExamScoreRecord) *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuesr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, id),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserexamscorerecord.ExamPaperTable, tkuserexamscorerecord.ExamPaperColumn),
		)
		fromV = sqlgraph.Neighbors(tuesr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySection queries the section edge of a TkUserExamScoreRecord.
func (c *TkUserExamScoreRecordClient) QuerySection(tuesr *TkUserExamScoreRecord) *TkSectionQuery {
	query := &TkSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuesr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, id),
			sqlgraph.To(tksection.Table, tksection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserexamscorerecord.SectionTable, tkuserexamscorerecord.SectionColumn),
		)
		fromV = sqlgraph.Neighbors(tuesr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeacher queries the teacher edge of a TkUserExamScoreRecord.
func (c *TkUserExamScoreRecordClient) QueryTeacher(tuesr *TkUserExamScoreRecord) *TeacherQuery {
	query := &TeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuesr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserexamscorerecord.TeacherTable, tkuserexamscorerecord.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(tuesr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a TkUserExamScoreRecord.
func (c *TkUserExamScoreRecordClient) QueryUser(tuesr *TkUserExamScoreRecord) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuesr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserexamscorerecord.UserTable, tkuserexamscorerecord.UserColumn),
		)
		fromV = sqlgraph.Neighbors(tuesr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserExamDetails queries the user_exam_details edge of a TkUserExamScoreRecord.
func (c *TkUserExamScoreRecordClient) QueryUserExamDetails(tuesr *TkUserExamScoreRecord) *TkUserSimulationTeacherMarkQuery {
	query := &TkUserSimulationTeacherMarkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuesr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, id),
			sqlgraph.To(tkusersimulationteachermark.Table, tkusersimulationteachermark.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkuserexamscorerecord.UserExamDetailsTable, tkuserexamscorerecord.UserExamDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(tuesr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkUserExamScoreRecordClient) Hooks() []Hook {
	hooks := c.hooks.TkUserExamScoreRecord
	return append(hooks[:len(hooks):len(hooks)], tkuserexamscorerecord.Hooks[:]...)
}

// TkUserQuestionBankRecordClient is a client for the TkUserQuestionBankRecord schema.
type TkUserQuestionBankRecordClient struct {
	config
}

// NewTkUserQuestionBankRecordClient returns a client for the TkUserQuestionBankRecord from the given config.
func NewTkUserQuestionBankRecordClient(c config) *TkUserQuestionBankRecordClient {
	return &TkUserQuestionBankRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkuserquestionbankrecord.Hooks(f(g(h())))`.
func (c *TkUserQuestionBankRecordClient) Use(hooks ...Hook) {
	c.hooks.TkUserQuestionBankRecord = append(c.hooks.TkUserQuestionBankRecord, hooks...)
}

// Create returns a create builder for TkUserQuestionBankRecord.
func (c *TkUserQuestionBankRecordClient) Create() *TkUserQuestionBankRecordCreate {
	mutation := newTkUserQuestionBankRecordMutation(c.config, OpCreate)
	return &TkUserQuestionBankRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkUserQuestionBankRecord entities.
func (c *TkUserQuestionBankRecordClient) CreateBulk(builders ...*TkUserQuestionBankRecordCreate) *TkUserQuestionBankRecordCreateBulk {
	return &TkUserQuestionBankRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkUserQuestionBankRecord.
func (c *TkUserQuestionBankRecordClient) Update() *TkUserQuestionBankRecordUpdate {
	mutation := newTkUserQuestionBankRecordMutation(c.config, OpUpdate)
	return &TkUserQuestionBankRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkUserQuestionBankRecordClient) UpdateOne(tuqbr *TkUserQuestionBankRecord) *TkUserQuestionBankRecordUpdateOne {
	mutation := newTkUserQuestionBankRecordMutation(c.config, OpUpdateOne, withTkUserQuestionBankRecord(tuqbr))
	return &TkUserQuestionBankRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkUserQuestionBankRecordClient) UpdateOneID(id int) *TkUserQuestionBankRecordUpdateOne {
	mutation := newTkUserQuestionBankRecordMutation(c.config, OpUpdateOne, withTkUserQuestionBankRecordID(id))
	return &TkUserQuestionBankRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkUserQuestionBankRecord.
func (c *TkUserQuestionBankRecordClient) Delete() *TkUserQuestionBankRecordDelete {
	mutation := newTkUserQuestionBankRecordMutation(c.config, OpDelete)
	return &TkUserQuestionBankRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkUserQuestionBankRecordClient) DeleteOne(tuqbr *TkUserQuestionBankRecord) *TkUserQuestionBankRecordDeleteOne {
	return c.DeleteOneID(tuqbr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkUserQuestionBankRecordClient) DeleteOneID(id int) *TkUserQuestionBankRecordDeleteOne {
	builder := c.Delete().Where(tkuserquestionbankrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkUserQuestionBankRecordDeleteOne{builder}
}

// Query returns a query builder for TkUserQuestionBankRecord.
func (c *TkUserQuestionBankRecordClient) Query() *TkUserQuestionBankRecordQuery {
	return &TkUserQuestionBankRecordQuery{
		config: c.config,
	}
}

// Get returns a TkUserQuestionBankRecord entity by its id.
func (c *TkUserQuestionBankRecordClient) Get(ctx context.Context, id int) (*TkUserQuestionBankRecord, error) {
	return c.Query().Where(tkuserquestionbankrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkUserQuestionBankRecordClient) GetX(ctx context.Context, id int) *TkUserQuestionBankRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionBank queries the question_bank edge of a TkUserQuestionBankRecord.
func (c *TkUserQuestionBankRecordClient) QueryQuestionBank(tuqbr *TkUserQuestionBankRecord) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuqbr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserquestionbankrecord.Table, tkuserquestionbankrecord.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserquestionbankrecord.QuestionBankTable, tkuserquestionbankrecord.QuestionBankColumn),
		)
		fromV = sqlgraph.Neighbors(tuqbr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a TkUserQuestionBankRecord.
func (c *TkUserQuestionBankRecordClient) QueryUser(tuqbr *TkUserQuestionBankRecord) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuqbr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserquestionbankrecord.Table, tkuserquestionbankrecord.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserquestionbankrecord.UserTable, tkuserquestionbankrecord.UserColumn),
		)
		fromV = sqlgraph.Neighbors(tuqbr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkUserQuestionBankRecordClient) Hooks() []Hook {
	hooks := c.hooks.TkUserQuestionBankRecord
	return append(hooks[:len(hooks):len(hooks)], tkuserquestionbankrecord.Hooks[:]...)
}

// TkUserQuestionRecordClient is a client for the TkUserQuestionRecord schema.
type TkUserQuestionRecordClient struct {
	config
}

// NewTkUserQuestionRecordClient returns a client for the TkUserQuestionRecord from the given config.
func NewTkUserQuestionRecordClient(c config) *TkUserQuestionRecordClient {
	return &TkUserQuestionRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkuserquestionrecord.Hooks(f(g(h())))`.
func (c *TkUserQuestionRecordClient) Use(hooks ...Hook) {
	c.hooks.TkUserQuestionRecord = append(c.hooks.TkUserQuestionRecord, hooks...)
}

// Create returns a create builder for TkUserQuestionRecord.
func (c *TkUserQuestionRecordClient) Create() *TkUserQuestionRecordCreate {
	mutation := newTkUserQuestionRecordMutation(c.config, OpCreate)
	return &TkUserQuestionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkUserQuestionRecord entities.
func (c *TkUserQuestionRecordClient) CreateBulk(builders ...*TkUserQuestionRecordCreate) *TkUserQuestionRecordCreateBulk {
	return &TkUserQuestionRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkUserQuestionRecord.
func (c *TkUserQuestionRecordClient) Update() *TkUserQuestionRecordUpdate {
	mutation := newTkUserQuestionRecordMutation(c.config, OpUpdate)
	return &TkUserQuestionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkUserQuestionRecordClient) UpdateOne(tuqr *TkUserQuestionRecord) *TkUserQuestionRecordUpdateOne {
	mutation := newTkUserQuestionRecordMutation(c.config, OpUpdateOne, withTkUserQuestionRecord(tuqr))
	return &TkUserQuestionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkUserQuestionRecordClient) UpdateOneID(id int) *TkUserQuestionRecordUpdateOne {
	mutation := newTkUserQuestionRecordMutation(c.config, OpUpdateOne, withTkUserQuestionRecordID(id))
	return &TkUserQuestionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkUserQuestionRecord.
func (c *TkUserQuestionRecordClient) Delete() *TkUserQuestionRecordDelete {
	mutation := newTkUserQuestionRecordMutation(c.config, OpDelete)
	return &TkUserQuestionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkUserQuestionRecordClient) DeleteOne(tuqr *TkUserQuestionRecord) *TkUserQuestionRecordDeleteOne {
	return c.DeleteOneID(tuqr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkUserQuestionRecordClient) DeleteOneID(id int) *TkUserQuestionRecordDeleteOne {
	builder := c.Delete().Where(tkuserquestionrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkUserQuestionRecordDeleteOne{builder}
}

// Query returns a query builder for TkUserQuestionRecord.
func (c *TkUserQuestionRecordClient) Query() *TkUserQuestionRecordQuery {
	return &TkUserQuestionRecordQuery{
		config: c.config,
	}
}

// Get returns a TkUserQuestionRecord entity by its id.
func (c *TkUserQuestionRecordClient) Get(ctx context.Context, id int) (*TkUserQuestionRecord, error) {
	return c.Query().Where(tkuserquestionrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkUserQuestionRecordClient) GetX(ctx context.Context, id int) *TkUserQuestionRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionBank queries the question_bank edge of a TkUserQuestionRecord.
func (c *TkUserQuestionRecordClient) QueryQuestionBank(tuqr *TkUserQuestionRecord) *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuqr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID, id),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserquestionrecord.QuestionBankTable, tkuserquestionrecord.QuestionBankColumn),
		)
		fromV = sqlgraph.Neighbors(tuqr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a TkUserQuestionRecord.
func (c *TkUserQuestionRecordClient) QueryUser(tuqr *TkUserQuestionRecord) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuqr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserquestionrecord.UserTable, tkuserquestionrecord.UserColumn),
		)
		fromV = sqlgraph.Neighbors(tuqr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestion queries the question edge of a TkUserQuestionRecord.
func (c *TkUserQuestionRecordClient) QueryQuestion(tuqr *TkUserQuestionRecord) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuqr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserquestionrecord.QuestionTable, tkuserquestionrecord.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(tuqr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPaper queries the exam_paper edge of a TkUserQuestionRecord.
func (c *TkUserQuestionRecordClient) QueryExamPaper(tuqr *TkUserQuestionRecord) *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuqr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID, id),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserquestionrecord.ExamPaperTable, tkuserquestionrecord.ExamPaperColumn),
		)
		fromV = sqlgraph.Neighbors(tuqr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySection queries the section edge of a TkUserQuestionRecord.
func (c *TkUserQuestionRecordClient) QuerySection(tuqr *TkUserQuestionRecord) *TkSectionQuery {
	query := &TkSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuqr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID, id),
			sqlgraph.To(tksection.Table, tksection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserquestionrecord.SectionTable, tkuserquestionrecord.SectionColumn),
		)
		fromV = sqlgraph.Neighbors(tuqr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkUserQuestionRecordClient) Hooks() []Hook {
	hooks := c.hooks.TkUserQuestionRecord
	return append(hooks[:len(hooks):len(hooks)], tkuserquestionrecord.Hooks[:]...)
}

// TkUserRandomExamRecodeClient is a client for the TkUserRandomExamRecode schema.
type TkUserRandomExamRecodeClient struct {
	config
}

// NewTkUserRandomExamRecodeClient returns a client for the TkUserRandomExamRecode from the given config.
func NewTkUserRandomExamRecodeClient(c config) *TkUserRandomExamRecodeClient {
	return &TkUserRandomExamRecodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkuserrandomexamrecode.Hooks(f(g(h())))`.
func (c *TkUserRandomExamRecodeClient) Use(hooks ...Hook) {
	c.hooks.TkUserRandomExamRecode = append(c.hooks.TkUserRandomExamRecode, hooks...)
}

// Create returns a create builder for TkUserRandomExamRecode.
func (c *TkUserRandomExamRecodeClient) Create() *TkUserRandomExamRecodeCreate {
	mutation := newTkUserRandomExamRecodeMutation(c.config, OpCreate)
	return &TkUserRandomExamRecodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkUserRandomExamRecode entities.
func (c *TkUserRandomExamRecodeClient) CreateBulk(builders ...*TkUserRandomExamRecodeCreate) *TkUserRandomExamRecodeCreateBulk {
	return &TkUserRandomExamRecodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkUserRandomExamRecode.
func (c *TkUserRandomExamRecodeClient) Update() *TkUserRandomExamRecodeUpdate {
	mutation := newTkUserRandomExamRecodeMutation(c.config, OpUpdate)
	return &TkUserRandomExamRecodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkUserRandomExamRecodeClient) UpdateOne(turer *TkUserRandomExamRecode) *TkUserRandomExamRecodeUpdateOne {
	mutation := newTkUserRandomExamRecodeMutation(c.config, OpUpdateOne, withTkUserRandomExamRecode(turer))
	return &TkUserRandomExamRecodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkUserRandomExamRecodeClient) UpdateOneID(id int) *TkUserRandomExamRecodeUpdateOne {
	mutation := newTkUserRandomExamRecodeMutation(c.config, OpUpdateOne, withTkUserRandomExamRecodeID(id))
	return &TkUserRandomExamRecodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkUserRandomExamRecode.
func (c *TkUserRandomExamRecodeClient) Delete() *TkUserRandomExamRecodeDelete {
	mutation := newTkUserRandomExamRecodeMutation(c.config, OpDelete)
	return &TkUserRandomExamRecodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkUserRandomExamRecodeClient) DeleteOne(turer *TkUserRandomExamRecode) *TkUserRandomExamRecodeDeleteOne {
	return c.DeleteOneID(turer.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkUserRandomExamRecodeClient) DeleteOneID(id int) *TkUserRandomExamRecodeDeleteOne {
	builder := c.Delete().Where(tkuserrandomexamrecode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkUserRandomExamRecodeDeleteOne{builder}
}

// Query returns a query builder for TkUserRandomExamRecode.
func (c *TkUserRandomExamRecodeClient) Query() *TkUserRandomExamRecodeQuery {
	return &TkUserRandomExamRecodeQuery{
		config: c.config,
	}
}

// Get returns a TkUserRandomExamRecode entity by its id.
func (c *TkUserRandomExamRecodeClient) Get(ctx context.Context, id int) (*TkUserRandomExamRecode, error) {
	return c.Query().Where(tkuserrandomexamrecode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkUserRandomExamRecodeClient) GetX(ctx context.Context, id int) *TkUserRandomExamRecode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRandomExamQuestion queries the random_exam_question edge of a TkUserRandomExamRecode.
func (c *TkUserRandomExamRecodeClient) QueryRandomExamQuestion(turer *TkUserRandomExamRecode) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := turer.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserrandomexamrecode.Table, tkuserrandomexamrecode.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tkuserrandomexamrecode.RandomExamQuestionTable, tkuserrandomexamrecode.RandomExamQuestionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(turer.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamInfo queries the exam_info edge of a TkUserRandomExamRecode.
func (c *TkUserRandomExamRecodeClient) QueryExamInfo(turer *TkUserRandomExamRecode) *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := turer.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserrandomexamrecode.Table, tkuserrandomexamrecode.FieldID, id),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserrandomexamrecode.ExamInfoTable, tkuserrandomexamrecode.ExamInfoColumn),
		)
		fromV = sqlgraph.Neighbors(turer.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkUserRandomExamRecodeClient) Hooks() []Hook {
	hooks := c.hooks.TkUserRandomExamRecode
	return append(hooks[:len(hooks):len(hooks)], tkuserrandomexamrecode.Hooks[:]...)
}

// TkUserSimulationTeacherMarkClient is a client for the TkUserSimulationTeacherMark schema.
type TkUserSimulationTeacherMarkClient struct {
	config
}

// NewTkUserSimulationTeacherMarkClient returns a client for the TkUserSimulationTeacherMark from the given config.
func NewTkUserSimulationTeacherMarkClient(c config) *TkUserSimulationTeacherMarkClient {
	return &TkUserSimulationTeacherMarkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkusersimulationteachermark.Hooks(f(g(h())))`.
func (c *TkUserSimulationTeacherMarkClient) Use(hooks ...Hook) {
	c.hooks.TkUserSimulationTeacherMark = append(c.hooks.TkUserSimulationTeacherMark, hooks...)
}

// Create returns a create builder for TkUserSimulationTeacherMark.
func (c *TkUserSimulationTeacherMarkClient) Create() *TkUserSimulationTeacherMarkCreate {
	mutation := newTkUserSimulationTeacherMarkMutation(c.config, OpCreate)
	return &TkUserSimulationTeacherMarkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkUserSimulationTeacherMark entities.
func (c *TkUserSimulationTeacherMarkClient) CreateBulk(builders ...*TkUserSimulationTeacherMarkCreate) *TkUserSimulationTeacherMarkCreateBulk {
	return &TkUserSimulationTeacherMarkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkUserSimulationTeacherMark.
func (c *TkUserSimulationTeacherMarkClient) Update() *TkUserSimulationTeacherMarkUpdate {
	mutation := newTkUserSimulationTeacherMarkMutation(c.config, OpUpdate)
	return &TkUserSimulationTeacherMarkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkUserSimulationTeacherMarkClient) UpdateOne(tustm *TkUserSimulationTeacherMark) *TkUserSimulationTeacherMarkUpdateOne {
	mutation := newTkUserSimulationTeacherMarkMutation(c.config, OpUpdateOne, withTkUserSimulationTeacherMark(tustm))
	return &TkUserSimulationTeacherMarkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkUserSimulationTeacherMarkClient) UpdateOneID(id int) *TkUserSimulationTeacherMarkUpdateOne {
	mutation := newTkUserSimulationTeacherMarkMutation(c.config, OpUpdateOne, withTkUserSimulationTeacherMarkID(id))
	return &TkUserSimulationTeacherMarkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkUserSimulationTeacherMark.
func (c *TkUserSimulationTeacherMarkClient) Delete() *TkUserSimulationTeacherMarkDelete {
	mutation := newTkUserSimulationTeacherMarkMutation(c.config, OpDelete)
	return &TkUserSimulationTeacherMarkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkUserSimulationTeacherMarkClient) DeleteOne(tustm *TkUserSimulationTeacherMark) *TkUserSimulationTeacherMarkDeleteOne {
	return c.DeleteOneID(tustm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkUserSimulationTeacherMarkClient) DeleteOneID(id int) *TkUserSimulationTeacherMarkDeleteOne {
	builder := c.Delete().Where(tkusersimulationteachermark.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkUserSimulationTeacherMarkDeleteOne{builder}
}

// Query returns a query builder for TkUserSimulationTeacherMark.
func (c *TkUserSimulationTeacherMarkClient) Query() *TkUserSimulationTeacherMarkQuery {
	return &TkUserSimulationTeacherMarkQuery{
		config: c.config,
	}
}

// Get returns a TkUserSimulationTeacherMark entity by its id.
func (c *TkUserSimulationTeacherMarkClient) Get(ctx context.Context, id int) (*TkUserSimulationTeacherMark, error) {
	return c.Query().Where(tkusersimulationteachermark.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkUserSimulationTeacherMarkClient) GetX(ctx context.Context, id int) *TkUserSimulationTeacherMark {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestion queries the question edge of a TkUserSimulationTeacherMark.
func (c *TkUserSimulationTeacherMarkClient) QueryQuestion(tustm *TkUserSimulationTeacherMark) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tustm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkusersimulationteachermark.Table, tkusersimulationteachermark.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkusersimulationteachermark.QuestionTable, tkusersimulationteachermark.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(tustm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserExamRecord queries the user_exam_record edge of a TkUserSimulationTeacherMark.
func (c *TkUserSimulationTeacherMarkClient) QueryUserExamRecord(tustm *TkUserSimulationTeacherMark) *TkUserExamScoreRecordQuery {
	query := &TkUserExamScoreRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tustm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkusersimulationteachermark.Table, tkusersimulationteachermark.FieldID, id),
			sqlgraph.To(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkusersimulationteachermark.UserExamRecordTable, tkusersimulationteachermark.UserExamRecordColumn),
		)
		fromV = sqlgraph.Neighbors(tustm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkUserSimulationTeacherMarkClient) Hooks() []Hook {
	hooks := c.hooks.TkUserSimulationTeacherMark
	return append(hooks[:len(hooks):len(hooks)], tkusersimulationteachermark.Hooks[:]...)
}

// TkUserWrongQuestionRecodeClient is a client for the TkUserWrongQuestionRecode schema.
type TkUserWrongQuestionRecodeClient struct {
	config
}

// NewTkUserWrongQuestionRecodeClient returns a client for the TkUserWrongQuestionRecode from the given config.
func NewTkUserWrongQuestionRecodeClient(c config) *TkUserWrongQuestionRecodeClient {
	return &TkUserWrongQuestionRecodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tkuserwrongquestionrecode.Hooks(f(g(h())))`.
func (c *TkUserWrongQuestionRecodeClient) Use(hooks ...Hook) {
	c.hooks.TkUserWrongQuestionRecode = append(c.hooks.TkUserWrongQuestionRecode, hooks...)
}

// Create returns a create builder for TkUserWrongQuestionRecode.
func (c *TkUserWrongQuestionRecodeClient) Create() *TkUserWrongQuestionRecodeCreate {
	mutation := newTkUserWrongQuestionRecodeMutation(c.config, OpCreate)
	return &TkUserWrongQuestionRecodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TkUserWrongQuestionRecode entities.
func (c *TkUserWrongQuestionRecodeClient) CreateBulk(builders ...*TkUserWrongQuestionRecodeCreate) *TkUserWrongQuestionRecodeCreateBulk {
	return &TkUserWrongQuestionRecodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TkUserWrongQuestionRecode.
func (c *TkUserWrongQuestionRecodeClient) Update() *TkUserWrongQuestionRecodeUpdate {
	mutation := newTkUserWrongQuestionRecodeMutation(c.config, OpUpdate)
	return &TkUserWrongQuestionRecodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TkUserWrongQuestionRecodeClient) UpdateOne(tuwqr *TkUserWrongQuestionRecode) *TkUserWrongQuestionRecodeUpdateOne {
	mutation := newTkUserWrongQuestionRecodeMutation(c.config, OpUpdateOne, withTkUserWrongQuestionRecode(tuwqr))
	return &TkUserWrongQuestionRecodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TkUserWrongQuestionRecodeClient) UpdateOneID(id int) *TkUserWrongQuestionRecodeUpdateOne {
	mutation := newTkUserWrongQuestionRecodeMutation(c.config, OpUpdateOne, withTkUserWrongQuestionRecodeID(id))
	return &TkUserWrongQuestionRecodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TkUserWrongQuestionRecode.
func (c *TkUserWrongQuestionRecodeClient) Delete() *TkUserWrongQuestionRecodeDelete {
	mutation := newTkUserWrongQuestionRecodeMutation(c.config, OpDelete)
	return &TkUserWrongQuestionRecodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TkUserWrongQuestionRecodeClient) DeleteOne(tuwqr *TkUserWrongQuestionRecode) *TkUserWrongQuestionRecodeDeleteOne {
	return c.DeleteOneID(tuwqr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TkUserWrongQuestionRecodeClient) DeleteOneID(id int) *TkUserWrongQuestionRecodeDeleteOne {
	builder := c.Delete().Where(tkuserwrongquestionrecode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TkUserWrongQuestionRecodeDeleteOne{builder}
}

// Query returns a query builder for TkUserWrongQuestionRecode.
func (c *TkUserWrongQuestionRecodeClient) Query() *TkUserWrongQuestionRecodeQuery {
	return &TkUserWrongQuestionRecodeQuery{
		config: c.config,
	}
}

// Get returns a TkUserWrongQuestionRecode entity by its id.
func (c *TkUserWrongQuestionRecodeClient) Get(ctx context.Context, id int) (*TkUserWrongQuestionRecode, error) {
	return c.Query().Where(tkuserwrongquestionrecode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TkUserWrongQuestionRecodeClient) GetX(ctx context.Context, id int) *TkUserWrongQuestionRecode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionWrong queries the question_wrong edge of a TkUserWrongQuestionRecode.
func (c *TkUserWrongQuestionRecodeClient) QueryQuestionWrong(tuwqr *TkUserWrongQuestionRecode) *TkQuestionQuery {
	query := &TkQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tuwqr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserwrongquestionrecode.Table, tkuserwrongquestionrecode.FieldID, id),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserwrongquestionrecode.QuestionWrongTable, tkuserwrongquestionrecode.QuestionWrongColumn),
		)
		fromV = sqlgraph.Neighbors(tuwqr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TkUserWrongQuestionRecodeClient) Hooks() []Hook {
	hooks := c.hooks.TkUserWrongQuestionRecode
	return append(hooks[:len(hooks):len(hooks)], tkuserwrongquestionrecode.Hooks[:]...)
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLoginLog queries the login_log edge of a User.
func (c *UserClient) QueryLoginLog(u *User) *UserLoginLogQuery {
	query := &UserLoginLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userloginlog.Table, userloginlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LoginLogTable, user.LoginLogColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessages queries the messages edge of a User.
func (c *UserClient) QueryMessages(u *User) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.MessagesTable, user.MessagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCourses queries the user_courses edge of a User.
func (c *UserClient) QueryUserCourses(u *User) *KcUserCourseQuery {
	query := &KcUserCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(kcusercourse.Table, kcusercourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserCoursesTable, user.UserCoursesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserClasses queries the user_classes edge of a User.
func (c *UserClient) QueryUserClasses(u *User) *KcUserClassQuery {
	query := &KcUserClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(kcuserclass.Table, kcuserclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserClassesTable, user.UserClassesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserExamsRecords queries the user_exams_records edge of a User.
func (c *UserClient) QueryUserExamsRecords(u *User) *TkUserExamScoreRecordQuery {
	query := &TkUserExamScoreRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserExamsRecordsTable, user.UserExamsRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserQuestionBankRecords queries the user_question_bank_records edge of a User.
func (c *UserClient) QueryUserQuestionBankRecords(u *User) *TkUserQuestionBankRecordQuery {
	query := &TkUserQuestionBankRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tkuserquestionbankrecord.Table, tkuserquestionbankrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserQuestionBankRecordsTable, user.UserQuestionBankRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserQuestionRecords queries the user_question_records edge of a User.
func (c *UserClient) QueryUserQuestionRecords(u *User) *TkUserQuestionRecordQuery {
	query := &TkUserQuestionRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserQuestionRecordsTable, user.UserQuestionRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAskUsers queries the ask_users edge of a User.
func (c *UserClient) QueryAskUsers(u *User) *UserAskAnswerQuery {
	query := &UserAskAnswerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useraskanswer.Table, useraskanswer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AskUsersTable, user.AskUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseAppraiseUsers queries the course_appraise_users edge of a User.
func (c *UserClient) QueryCourseAppraiseUsers(u *User) *UserCourseAppraiseQuery {
	query := &UserCourseAppraiseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usercourseappraise.Table, usercourseappraise.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CourseAppraiseUsersTable, user.CourseAppraiseUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserVideoRecord queries the user_video_record edge of a User.
func (c *UserClient) QueryUserVideoRecord(u *User) *VideoRecordQuery {
	query := &VideoRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(videorecord.Table, videorecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserVideoRecordTable, user.UserVideoRecordColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a User.
func (c *UserClient) QueryCity(u *User) *CityQuery {
	query := &CityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.CityTable, user.CityColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCate queries the cate edge of a User.
func (c *UserClient) QueryCate(u *User) *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.CateTable, user.CateColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// UserAskAnswerClient is a client for the UserAskAnswer schema.
type UserAskAnswerClient struct {
	config
}

// NewUserAskAnswerClient returns a client for the UserAskAnswer from the given config.
func NewUserAskAnswerClient(c config) *UserAskAnswerClient {
	return &UserAskAnswerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useraskanswer.Hooks(f(g(h())))`.
func (c *UserAskAnswerClient) Use(hooks ...Hook) {
	c.hooks.UserAskAnswer = append(c.hooks.UserAskAnswer, hooks...)
}

// Create returns a create builder for UserAskAnswer.
func (c *UserAskAnswerClient) Create() *UserAskAnswerCreate {
	mutation := newUserAskAnswerMutation(c.config, OpCreate)
	return &UserAskAnswerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserAskAnswer entities.
func (c *UserAskAnswerClient) CreateBulk(builders ...*UserAskAnswerCreate) *UserAskAnswerCreateBulk {
	return &UserAskAnswerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserAskAnswer.
func (c *UserAskAnswerClient) Update() *UserAskAnswerUpdate {
	mutation := newUserAskAnswerMutation(c.config, OpUpdate)
	return &UserAskAnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserAskAnswerClient) UpdateOne(uaa *UserAskAnswer) *UserAskAnswerUpdateOne {
	mutation := newUserAskAnswerMutation(c.config, OpUpdateOne, withUserAskAnswer(uaa))
	return &UserAskAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserAskAnswerClient) UpdateOneID(id int) *UserAskAnswerUpdateOne {
	mutation := newUserAskAnswerMutation(c.config, OpUpdateOne, withUserAskAnswerID(id))
	return &UserAskAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserAskAnswer.
func (c *UserAskAnswerClient) Delete() *UserAskAnswerDelete {
	mutation := newUserAskAnswerMutation(c.config, OpDelete)
	return &UserAskAnswerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserAskAnswerClient) DeleteOne(uaa *UserAskAnswer) *UserAskAnswerDeleteOne {
	return c.DeleteOneID(uaa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserAskAnswerClient) DeleteOneID(id int) *UserAskAnswerDeleteOne {
	builder := c.Delete().Where(useraskanswer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserAskAnswerDeleteOne{builder}
}

// Query returns a query builder for UserAskAnswer.
func (c *UserAskAnswerClient) Query() *UserAskAnswerQuery {
	return &UserAskAnswerQuery{
		config: c.config,
	}
}

// Get returns a UserAskAnswer entity by its id.
func (c *UserAskAnswerClient) Get(ctx context.Context, id int) (*UserAskAnswer, error) {
	return c.Query().Where(useraskanswer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserAskAnswerClient) GetX(ctx context.Context, id int) *UserAskAnswer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeacher queries the teacher edge of a UserAskAnswer.
func (c *UserAskAnswerClient) QueryTeacher(uaa *UserAskAnswer) *TeacherQuery {
	query := &TeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraskanswer.Table, useraskanswer.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useraskanswer.TeacherTable, useraskanswer.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(uaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserAskAnswer.
func (c *UserAskAnswerClient) QueryUser(uaa *UserAskAnswer) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraskanswer.Table, useraskanswer.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useraskanswer.UserTable, useraskanswer.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAskAnswersAttachments queries the ask_answers_attachments edge of a UserAskAnswer.
func (c *UserAskAnswerClient) QueryAskAnswersAttachments(uaa *UserAskAnswer) *UserAskAnswerAttachmentQuery {
	query := &UserAskAnswerAttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraskanswer.Table, useraskanswer.FieldID, id),
			sqlgraph.To(useraskanswerattachment.Table, useraskanswerattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, useraskanswer.AskAnswersAttachmentsTable, useraskanswer.AskAnswersAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(uaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserAskAnswerClient) Hooks() []Hook {
	hooks := c.hooks.UserAskAnswer
	return append(hooks[:len(hooks):len(hooks)], useraskanswer.Hooks[:]...)
}

// UserAskAnswerAttachmentClient is a client for the UserAskAnswerAttachment schema.
type UserAskAnswerAttachmentClient struct {
	config
}

// NewUserAskAnswerAttachmentClient returns a client for the UserAskAnswerAttachment from the given config.
func NewUserAskAnswerAttachmentClient(c config) *UserAskAnswerAttachmentClient {
	return &UserAskAnswerAttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useraskanswerattachment.Hooks(f(g(h())))`.
func (c *UserAskAnswerAttachmentClient) Use(hooks ...Hook) {
	c.hooks.UserAskAnswerAttachment = append(c.hooks.UserAskAnswerAttachment, hooks...)
}

// Create returns a create builder for UserAskAnswerAttachment.
func (c *UserAskAnswerAttachmentClient) Create() *UserAskAnswerAttachmentCreate {
	mutation := newUserAskAnswerAttachmentMutation(c.config, OpCreate)
	return &UserAskAnswerAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserAskAnswerAttachment entities.
func (c *UserAskAnswerAttachmentClient) CreateBulk(builders ...*UserAskAnswerAttachmentCreate) *UserAskAnswerAttachmentCreateBulk {
	return &UserAskAnswerAttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserAskAnswerAttachment.
func (c *UserAskAnswerAttachmentClient) Update() *UserAskAnswerAttachmentUpdate {
	mutation := newUserAskAnswerAttachmentMutation(c.config, OpUpdate)
	return &UserAskAnswerAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserAskAnswerAttachmentClient) UpdateOne(uaaa *UserAskAnswerAttachment) *UserAskAnswerAttachmentUpdateOne {
	mutation := newUserAskAnswerAttachmentMutation(c.config, OpUpdateOne, withUserAskAnswerAttachment(uaaa))
	return &UserAskAnswerAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserAskAnswerAttachmentClient) UpdateOneID(id int) *UserAskAnswerAttachmentUpdateOne {
	mutation := newUserAskAnswerAttachmentMutation(c.config, OpUpdateOne, withUserAskAnswerAttachmentID(id))
	return &UserAskAnswerAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserAskAnswerAttachment.
func (c *UserAskAnswerAttachmentClient) Delete() *UserAskAnswerAttachmentDelete {
	mutation := newUserAskAnswerAttachmentMutation(c.config, OpDelete)
	return &UserAskAnswerAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserAskAnswerAttachmentClient) DeleteOne(uaaa *UserAskAnswerAttachment) *UserAskAnswerAttachmentDeleteOne {
	return c.DeleteOneID(uaaa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserAskAnswerAttachmentClient) DeleteOneID(id int) *UserAskAnswerAttachmentDeleteOne {
	builder := c.Delete().Where(useraskanswerattachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserAskAnswerAttachmentDeleteOne{builder}
}

// Query returns a query builder for UserAskAnswerAttachment.
func (c *UserAskAnswerAttachmentClient) Query() *UserAskAnswerAttachmentQuery {
	return &UserAskAnswerAttachmentQuery{
		config: c.config,
	}
}

// Get returns a UserAskAnswerAttachment entity by its id.
func (c *UserAskAnswerAttachmentClient) Get(ctx context.Context, id int) (*UserAskAnswerAttachment, error) {
	return c.Query().Where(useraskanswerattachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserAskAnswerAttachmentClient) GetX(ctx context.Context, id int) *UserAskAnswerAttachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachment queries the attachment edge of a UserAskAnswerAttachment.
func (c *UserAskAnswerAttachmentClient) QueryAttachment(uaaa *UserAskAnswerAttachment) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uaaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraskanswerattachment.Table, useraskanswerattachment.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useraskanswerattachment.AttachmentTable, useraskanswerattachment.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(uaaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAsk queries the ask edge of a UserAskAnswerAttachment.
func (c *UserAskAnswerAttachmentClient) QueryAsk(uaaa *UserAskAnswerAttachment) *UserAskAnswerQuery {
	query := &UserAskAnswerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uaaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraskanswerattachment.Table, useraskanswerattachment.FieldID, id),
			sqlgraph.To(useraskanswer.Table, useraskanswer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useraskanswerattachment.AskTable, useraskanswerattachment.AskColumn),
		)
		fromV = sqlgraph.Neighbors(uaaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserAskAnswerAttachmentClient) Hooks() []Hook {
	return c.hooks.UserAskAnswerAttachment
}

// UserCourseAppraiseClient is a client for the UserCourseAppraise schema.
type UserCourseAppraiseClient struct {
	config
}

// NewUserCourseAppraiseClient returns a client for the UserCourseAppraise from the given config.
func NewUserCourseAppraiseClient(c config) *UserCourseAppraiseClient {
	return &UserCourseAppraiseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercourseappraise.Hooks(f(g(h())))`.
func (c *UserCourseAppraiseClient) Use(hooks ...Hook) {
	c.hooks.UserCourseAppraise = append(c.hooks.UserCourseAppraise, hooks...)
}

// Create returns a create builder for UserCourseAppraise.
func (c *UserCourseAppraiseClient) Create() *UserCourseAppraiseCreate {
	mutation := newUserCourseAppraiseMutation(c.config, OpCreate)
	return &UserCourseAppraiseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCourseAppraise entities.
func (c *UserCourseAppraiseClient) CreateBulk(builders ...*UserCourseAppraiseCreate) *UserCourseAppraiseCreateBulk {
	return &UserCourseAppraiseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCourseAppraise.
func (c *UserCourseAppraiseClient) Update() *UserCourseAppraiseUpdate {
	mutation := newUserCourseAppraiseMutation(c.config, OpUpdate)
	return &UserCourseAppraiseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCourseAppraiseClient) UpdateOne(uca *UserCourseAppraise) *UserCourseAppraiseUpdateOne {
	mutation := newUserCourseAppraiseMutation(c.config, OpUpdateOne, withUserCourseAppraise(uca))
	return &UserCourseAppraiseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserCourseAppraiseClient) UpdateOneID(id int) *UserCourseAppraiseUpdateOne {
	mutation := newUserCourseAppraiseMutation(c.config, OpUpdateOne, withUserCourseAppraiseID(id))
	return &UserCourseAppraiseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCourseAppraise.
func (c *UserCourseAppraiseClient) Delete() *UserCourseAppraiseDelete {
	mutation := newUserCourseAppraiseMutation(c.config, OpDelete)
	return &UserCourseAppraiseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserCourseAppraiseClient) DeleteOne(uca *UserCourseAppraise) *UserCourseAppraiseDeleteOne {
	return c.DeleteOneID(uca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserCourseAppraiseClient) DeleteOneID(id int) *UserCourseAppraiseDeleteOne {
	builder := c.Delete().Where(usercourseappraise.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserCourseAppraiseDeleteOne{builder}
}

// Query returns a query builder for UserCourseAppraise.
func (c *UserCourseAppraiseClient) Query() *UserCourseAppraiseQuery {
	return &UserCourseAppraiseQuery{
		config: c.config,
	}
}

// Get returns a UserCourseAppraise entity by its id.
func (c *UserCourseAppraiseClient) Get(ctx context.Context, id int) (*UserCourseAppraise, error) {
	return c.Query().Where(usercourseappraise.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserCourseAppraiseClient) GetX(ctx context.Context, id int) *UserCourseAppraise {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySmallCate queries the small_cate edge of a UserCourseAppraise.
func (c *UserCourseAppraiseClient) QuerySmallCate(uca *UserCourseAppraise) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercourseappraise.Table, usercourseappraise.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercourseappraise.SmallCateTable, usercourseappraise.SmallCateColumn),
		)
		fromV = sqlgraph.Neighbors(uca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a UserCourseAppraise.
func (c *UserCourseAppraiseClient) QueryCourse(uca *UserCourseAppraise) *KcCourseQuery {
	query := &KcCourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercourseappraise.Table, usercourseappraise.FieldID, id),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercourseappraise.CourseTable, usercourseappraise.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(uca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserCourseAppraise.
func (c *UserCourseAppraiseClient) QueryUser(uca *UserCourseAppraise) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercourseappraise.Table, usercourseappraise.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercourseappraise.UserTable, usercourseappraise.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserCourseAppraiseClient) Hooks() []Hook {
	hooks := c.hooks.UserCourseAppraise
	return append(hooks[:len(hooks):len(hooks)], usercourseappraise.Hooks[:]...)
}

// UserLoginLogClient is a client for the UserLoginLog schema.
type UserLoginLogClient struct {
	config
}

// NewUserLoginLogClient returns a client for the UserLoginLog from the given config.
func NewUserLoginLogClient(c config) *UserLoginLogClient {
	return &UserLoginLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userloginlog.Hooks(f(g(h())))`.
func (c *UserLoginLogClient) Use(hooks ...Hook) {
	c.hooks.UserLoginLog = append(c.hooks.UserLoginLog, hooks...)
}

// Create returns a create builder for UserLoginLog.
func (c *UserLoginLogClient) Create() *UserLoginLogCreate {
	mutation := newUserLoginLogMutation(c.config, OpCreate)
	return &UserLoginLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLoginLog entities.
func (c *UserLoginLogClient) CreateBulk(builders ...*UserLoginLogCreate) *UserLoginLogCreateBulk {
	return &UserLoginLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLoginLog.
func (c *UserLoginLogClient) Update() *UserLoginLogUpdate {
	mutation := newUserLoginLogMutation(c.config, OpUpdate)
	return &UserLoginLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLoginLogClient) UpdateOne(ull *UserLoginLog) *UserLoginLogUpdateOne {
	mutation := newUserLoginLogMutation(c.config, OpUpdateOne, withUserLoginLog(ull))
	return &UserLoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLoginLogClient) UpdateOneID(id int) *UserLoginLogUpdateOne {
	mutation := newUserLoginLogMutation(c.config, OpUpdateOne, withUserLoginLogID(id))
	return &UserLoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLoginLog.
func (c *UserLoginLogClient) Delete() *UserLoginLogDelete {
	mutation := newUserLoginLogMutation(c.config, OpDelete)
	return &UserLoginLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserLoginLogClient) DeleteOne(ull *UserLoginLog) *UserLoginLogDeleteOne {
	return c.DeleteOneID(ull.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserLoginLogClient) DeleteOneID(id int) *UserLoginLogDeleteOne {
	builder := c.Delete().Where(userloginlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLoginLogDeleteOne{builder}
}

// Query returns a query builder for UserLoginLog.
func (c *UserLoginLogClient) Query() *UserLoginLogQuery {
	return &UserLoginLogQuery{
		config: c.config,
	}
}

// Get returns a UserLoginLog entity by its id.
func (c *UserLoginLogClient) Get(ctx context.Context, id int) (*UserLoginLog, error) {
	return c.Query().Where(userloginlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLoginLogClient) GetX(ctx context.Context, id int) *UserLoginLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserLoginLog.
func (c *UserLoginLogClient) QueryUser(ull *UserLoginLog) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ull.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userloginlog.Table, userloginlog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userloginlog.UserTable, userloginlog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ull.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserLoginLogClient) Hooks() []Hook {
	hooks := c.hooks.UserLoginLog
	return append(hooks[:len(hooks):len(hooks)], userloginlog.Hooks[:]...)
}

// VideoRecordClient is a client for the VideoRecord schema.
type VideoRecordClient struct {
	config
}

// NewVideoRecordClient returns a client for the VideoRecord from the given config.
func NewVideoRecordClient(c config) *VideoRecordClient {
	return &VideoRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `videorecord.Hooks(f(g(h())))`.
func (c *VideoRecordClient) Use(hooks ...Hook) {
	c.hooks.VideoRecord = append(c.hooks.VideoRecord, hooks...)
}

// Create returns a create builder for VideoRecord.
func (c *VideoRecordClient) Create() *VideoRecordCreate {
	mutation := newVideoRecordMutation(c.config, OpCreate)
	return &VideoRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VideoRecord entities.
func (c *VideoRecordClient) CreateBulk(builders ...*VideoRecordCreate) *VideoRecordCreateBulk {
	return &VideoRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VideoRecord.
func (c *VideoRecordClient) Update() *VideoRecordUpdate {
	mutation := newVideoRecordMutation(c.config, OpUpdate)
	return &VideoRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoRecordClient) UpdateOne(vr *VideoRecord) *VideoRecordUpdateOne {
	mutation := newVideoRecordMutation(c.config, OpUpdateOne, withVideoRecord(vr))
	return &VideoRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoRecordClient) UpdateOneID(id int) *VideoRecordUpdateOne {
	mutation := newVideoRecordMutation(c.config, OpUpdateOne, withVideoRecordID(id))
	return &VideoRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VideoRecord.
func (c *VideoRecordClient) Delete() *VideoRecordDelete {
	mutation := newVideoRecordMutation(c.config, OpDelete)
	return &VideoRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VideoRecordClient) DeleteOne(vr *VideoRecord) *VideoRecordDeleteOne {
	return c.DeleteOneID(vr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VideoRecordClient) DeleteOneID(id int) *VideoRecordDeleteOne {
	builder := c.Delete().Where(videorecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoRecordDeleteOne{builder}
}

// Query returns a query builder for VideoRecord.
func (c *VideoRecordClient) Query() *VideoRecordQuery {
	return &VideoRecordQuery{
		config: c.config,
	}
}

// Get returns a VideoRecord entity by its id.
func (c *VideoRecordClient) Get(ctx context.Context, id int) (*VideoRecord, error) {
	return c.Query().Where(videorecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoRecordClient) GetX(ctx context.Context, id int) *VideoRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a VideoRecord.
func (c *VideoRecordClient) QueryUser(vr *VideoRecord) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(videorecord.Table, videorecord.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, videorecord.UserTable, videorecord.UserColumn),
		)
		fromV = sqlgraph.Neighbors(vr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySmallCourse queries the small_course edge of a VideoRecord.
func (c *VideoRecordClient) QuerySmallCourse(vr *VideoRecord) *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(videorecord.Table, videorecord.FieldID, id),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, videorecord.SmallCourseTable, videorecord.SmallCourseColumn),
		)
		fromV = sqlgraph.Neighbors(vr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoRecordClient) Hooks() []Hook {
	hooks := c.hooks.VideoRecord
	return append(hooks[:len(hooks):len(hooks)], videorecord.Hooks[:]...)
}

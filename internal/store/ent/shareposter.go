// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/shareposter"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SharePoster is the model entity for the SharePoster schema.
type SharePoster struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 标题
	Name string `json:"name"`
	// Status holds the value of the "status" field.
	// 状态：1、锁定。2:生效
	Status uint8 `json:"status"`
	// URL holds the value of the "url" field.
	// 海报链接
	URL string `json:"url"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark"`
	// SharePosterImgID holds the value of the "share_poster_img_id" field.
	// 封面图id
	SharePosterImgID int `json:"share_poster_img_id"`
	// ShareCount holds the value of the "share_count" field.
	// 分享次数
	ShareCount int `json:"share_count"`
	// SortOrder holds the value of the "sort_order" field.
	// 排序
	SortOrder int `json:"sort_order"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SharePosterQuery when eager-loading is set.
	Edges SharePosterEdges `json:"edges"`
}

// SharePosterEdges holds the relations/edges for other nodes in the graph.
type SharePosterEdges struct {
	// Attachment holds the value of the attachment edge.
	Attachment *Attachment `json:"attachment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AttachmentOrErr returns the Attachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SharePosterEdges) AttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[0] {
		if e.Attachment == nil {
			// The edge attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.Attachment, nil
	}
	return nil, &NotLoadedError{edge: "attachment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SharePoster) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shareposter.FieldID, shareposter.FieldStatus, shareposter.FieldSharePosterImgID, shareposter.FieldShareCount, shareposter.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case shareposter.FieldUUID, shareposter.FieldName, shareposter.FieldURL, shareposter.FieldRemark:
			values[i] = new(sql.NullString)
		case shareposter.FieldCreatedAt, shareposter.FieldUpdatedAt, shareposter.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SharePoster", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SharePoster fields.
func (sp *SharePoster) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shareposter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = int(value.Int64)
		case shareposter.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				sp.UUID = value.String
			}
		case shareposter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = new(time.Time)
				*sp.CreatedAt = value.Time
			}
		case shareposter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = new(time.Time)
				*sp.UpdatedAt = value.Time
			}
		case shareposter.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sp.DeletedAt = new(time.Time)
				*sp.DeletedAt = value.Time
			}
		case shareposter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sp.Name = value.String
			}
		case shareposter.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = uint8(value.Int64)
			}
		case shareposter.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				sp.URL = value.String
			}
		case shareposter.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sp.Remark = value.String
			}
		case shareposter.FieldSharePosterImgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field share_poster_img_id", values[i])
			} else if value.Valid {
				sp.SharePosterImgID = int(value.Int64)
			}
		case shareposter.FieldShareCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field share_count", values[i])
			} else if value.Valid {
				sp.ShareCount = int(value.Int64)
			}
		case shareposter.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				sp.SortOrder = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAttachment queries the "attachment" edge of the SharePoster entity.
func (sp *SharePoster) QueryAttachment() *AttachmentQuery {
	return (&SharePosterClient{config: sp.config}).QueryAttachment(sp)
}

// Update returns a builder for updating this SharePoster.
// Note that you need to call SharePoster.Unwrap() before calling this method if this SharePoster
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SharePoster) Update() *SharePosterUpdateOne {
	return (&SharePosterClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the SharePoster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SharePoster) Unwrap() *SharePoster {
	tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SharePoster is not a transactional entity")
	}
	sp.config.driver = tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SharePoster) String() string {
	var builder strings.Builder
	builder.WriteString("SharePoster(")
	builder.WriteString(fmt.Sprintf("id=%v", sp.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(sp.UUID)
	if v := sp.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := sp.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := sp.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(sp.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", sp.Status))
	builder.WriteString(", url=")
	builder.WriteString(sp.URL)
	builder.WriteString(", remark=")
	builder.WriteString(sp.Remark)
	builder.WriteString(", share_poster_img_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.SharePosterImgID))
	builder.WriteString(", share_count=")
	builder.WriteString(fmt.Sprintf("%v", sp.ShareCount))
	builder.WriteString(", sort_order=")
	builder.WriteString(fmt.Sprintf("%v", sp.SortOrder))
	builder.WriteByte(')')
	return builder.String()
}

// SharePosters is a parsable slice of SharePoster.
type SharePosters []*SharePoster

func (sp SharePosters) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}

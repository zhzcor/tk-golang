// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/tkchapter"
	"tkserver/internal/store/ent/tksection"

	"entgo.io/ent/dialect/sql"
)

// TkSection is the model entity for the TkSection schema.
type TkSection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 节名称
	Name string `json:"name"`
	// ChapterID holds the value of the "chapter_id" field.
	// 章id
	ChapterID int `json:"chapter_id"`
	// QuestionCount holds the value of the "question_count" field.
	// 节题目数量
	QuestionCount int `json:"question_count"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkSectionQuery when eager-loading is set.
	Edges TkSectionEdges `json:"edges"`
}

// TkSectionEdges holds the relations/edges for other nodes in the graph.
type TkSectionEdges struct {
	// Chapter holds the value of the chapter edge.
	Chapter *TkChapter `json:"chapter,omitempty"`
	// TkSectionLinks holds the value of the tk_section_links edge.
	TkSectionLinks []*TkQuestionSection `json:"tk_section_links,omitempty"`
	// SectionRecords holds the value of the section_records edge.
	SectionRecords []*TkUserQuestionRecord `json:"section_records,omitempty"`
	// UserSectionExam holds the value of the user_section_exam edge.
	UserSectionExam []*TkUserExamScoreRecord `json:"user_section_exam,omitempty"`
	// MakeUserQuestionSec holds the value of the make_user_question_sec edge.
	MakeUserQuestionSec []*MakeUserQuestionRecord `json:"make_user_question_sec,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ChapterOrErr returns the Chapter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkSectionEdges) ChapterOrErr() (*TkChapter, error) {
	if e.loadedTypes[0] {
		if e.Chapter == nil {
			// The edge chapter was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkchapter.Label}
		}
		return e.Chapter, nil
	}
	return nil, &NotLoadedError{edge: "chapter"}
}

// TkSectionLinksOrErr returns the TkSectionLinks value or an error if the edge
// was not loaded in eager-loading.
func (e TkSectionEdges) TkSectionLinksOrErr() ([]*TkQuestionSection, error) {
	if e.loadedTypes[1] {
		return e.TkSectionLinks, nil
	}
	return nil, &NotLoadedError{edge: "tk_section_links"}
}

// SectionRecordsOrErr returns the SectionRecords value or an error if the edge
// was not loaded in eager-loading.
func (e TkSectionEdges) SectionRecordsOrErr() ([]*TkUserQuestionRecord, error) {
	if e.loadedTypes[2] {
		return e.SectionRecords, nil
	}
	return nil, &NotLoadedError{edge: "section_records"}
}

// UserSectionExamOrErr returns the UserSectionExam value or an error if the edge
// was not loaded in eager-loading.
func (e TkSectionEdges) UserSectionExamOrErr() ([]*TkUserExamScoreRecord, error) {
	if e.loadedTypes[3] {
		return e.UserSectionExam, nil
	}
	return nil, &NotLoadedError{edge: "user_section_exam"}
}

// MakeUserQuestionSecOrErr returns the MakeUserQuestionSec value or an error if the edge
// was not loaded in eager-loading.
func (e TkSectionEdges) MakeUserQuestionSecOrErr() ([]*MakeUserQuestionRecord, error) {
	if e.loadedTypes[4] {
		return e.MakeUserQuestionSec, nil
	}
	return nil, &NotLoadedError{edge: "make_user_question_sec"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkSection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tksection.FieldID, tksection.FieldChapterID, tksection.FieldQuestionCount:
			values[i] = new(sql.NullInt64)
		case tksection.FieldUUID, tksection.FieldName:
			values[i] = new(sql.NullString)
		case tksection.FieldCreatedAt, tksection.FieldUpdatedAt, tksection.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkSection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkSection fields.
func (ts *TkSection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tksection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ts.ID = int(value.Int64)
		case tksection.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				ts.UUID = value.String
			}
		case tksection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ts.CreatedAt = new(time.Time)
				*ts.CreatedAt = value.Time
			}
		case tksection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ts.UpdatedAt = new(time.Time)
				*ts.UpdatedAt = value.Time
			}
		case tksection.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ts.DeletedAt = new(time.Time)
				*ts.DeletedAt = value.Time
			}
		case tksection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ts.Name = value.String
			}
		case tksection.FieldChapterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chapter_id", values[i])
			} else if value.Valid {
				ts.ChapterID = int(value.Int64)
			}
		case tksection.FieldQuestionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_count", values[i])
			} else if value.Valid {
				ts.QuestionCount = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryChapter queries the "chapter" edge of the TkSection entity.
func (ts *TkSection) QueryChapter() *TkChapterQuery {
	return (&TkSectionClient{config: ts.config}).QueryChapter(ts)
}

// QueryTkSectionLinks queries the "tk_section_links" edge of the TkSection entity.
func (ts *TkSection) QueryTkSectionLinks() *TkQuestionSectionQuery {
	return (&TkSectionClient{config: ts.config}).QueryTkSectionLinks(ts)
}

// QuerySectionRecords queries the "section_records" edge of the TkSection entity.
func (ts *TkSection) QuerySectionRecords() *TkUserQuestionRecordQuery {
	return (&TkSectionClient{config: ts.config}).QuerySectionRecords(ts)
}

// QueryUserSectionExam queries the "user_section_exam" edge of the TkSection entity.
func (ts *TkSection) QueryUserSectionExam() *TkUserExamScoreRecordQuery {
	return (&TkSectionClient{config: ts.config}).QueryUserSectionExam(ts)
}

// QueryMakeUserQuestionSec queries the "make_user_question_sec" edge of the TkSection entity.
func (ts *TkSection) QueryMakeUserQuestionSec() *MakeUserQuestionRecordQuery {
	return (&TkSectionClient{config: ts.config}).QueryMakeUserQuestionSec(ts)
}

// Update returns a builder for updating this TkSection.
// Note that you need to call TkSection.Unwrap() before calling this method if this TkSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TkSection) Update() *TkSectionUpdateOne {
	return (&TkSectionClient{config: ts.config}).UpdateOne(ts)
}

// Unwrap unwraps the TkSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TkSection) Unwrap() *TkSection {
	tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkSection is not a transactional entity")
	}
	ts.config.driver = tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TkSection) String() string {
	var builder strings.Builder
	builder.WriteString("TkSection(")
	builder.WriteString(fmt.Sprintf("id=%v", ts.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(ts.UUID)
	if v := ts.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ts.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ts.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(ts.Name)
	builder.WriteString(", chapter_id=")
	builder.WriteString(fmt.Sprintf("%v", ts.ChapterID))
	builder.WriteString(", question_count=")
	builder.WriteString(fmt.Sprintf("%v", ts.QuestionCount))
	builder.WriteByte(')')
	return builder.String()
}

// TkSections is a parsable slice of TkSection.
type TkSections []*TkSection

func (ts TkSections) config(cfg config) {
	for _i := range ts {
		ts[_i].config = cfg
	}
}

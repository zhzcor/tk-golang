// Code generated by entc, DO NOT EDIT.

package videorecord

import (
	"time"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// VideoName applies equality check predicate on the "video_name" field. It's identical to VideoNameEQ.
func VideoName(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoName), v))
	})
}

// ViewTime applies equality check predicate on the "view_time" field. It's identical to ViewTimeEQ.
func ViewTime(v uint8) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViewTime), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// SmallID applies equality check predicate on the "small_id" field. It's identical to SmallIDEQ.
func SmallID(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSmallID), v))
	})
}

// VideoTime applies equality check predicate on the "video_time" field. It's identical to VideoTimeEQ.
func VideoTime(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoTime), v))
	})
}

// ViewAt applies equality check predicate on the "view_at" field. It's identical to ViewAtEQ.
func ViewAt(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViewAt), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// VideoNameEQ applies the EQ predicate on the "video_name" field.
func VideoNameEQ(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoName), v))
	})
}

// VideoNameNEQ applies the NEQ predicate on the "video_name" field.
func VideoNameNEQ(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVideoName), v))
	})
}

// VideoNameIn applies the In predicate on the "video_name" field.
func VideoNameIn(vs ...string) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVideoName), v...))
	})
}

// VideoNameNotIn applies the NotIn predicate on the "video_name" field.
func VideoNameNotIn(vs ...string) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVideoName), v...))
	})
}

// VideoNameGT applies the GT predicate on the "video_name" field.
func VideoNameGT(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVideoName), v))
	})
}

// VideoNameGTE applies the GTE predicate on the "video_name" field.
func VideoNameGTE(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVideoName), v))
	})
}

// VideoNameLT applies the LT predicate on the "video_name" field.
func VideoNameLT(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVideoName), v))
	})
}

// VideoNameLTE applies the LTE predicate on the "video_name" field.
func VideoNameLTE(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVideoName), v))
	})
}

// VideoNameContains applies the Contains predicate on the "video_name" field.
func VideoNameContains(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVideoName), v))
	})
}

// VideoNameHasPrefix applies the HasPrefix predicate on the "video_name" field.
func VideoNameHasPrefix(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVideoName), v))
	})
}

// VideoNameHasSuffix applies the HasSuffix predicate on the "video_name" field.
func VideoNameHasSuffix(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVideoName), v))
	})
}

// VideoNameEqualFold applies the EqualFold predicate on the "video_name" field.
func VideoNameEqualFold(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVideoName), v))
	})
}

// VideoNameContainsFold applies the ContainsFold predicate on the "video_name" field.
func VideoNameContainsFold(v string) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVideoName), v))
	})
}

// ViewTimeEQ applies the EQ predicate on the "view_time" field.
func ViewTimeEQ(v uint8) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViewTime), v))
	})
}

// ViewTimeNEQ applies the NEQ predicate on the "view_time" field.
func ViewTimeNEQ(v uint8) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldViewTime), v))
	})
}

// ViewTimeIn applies the In predicate on the "view_time" field.
func ViewTimeIn(vs ...uint8) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldViewTime), v...))
	})
}

// ViewTimeNotIn applies the NotIn predicate on the "view_time" field.
func ViewTimeNotIn(vs ...uint8) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldViewTime), v...))
	})
}

// ViewTimeGT applies the GT predicate on the "view_time" field.
func ViewTimeGT(v uint8) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldViewTime), v))
	})
}

// ViewTimeGTE applies the GTE predicate on the "view_time" field.
func ViewTimeGTE(v uint8) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldViewTime), v))
	})
}

// ViewTimeLT applies the LT predicate on the "view_time" field.
func ViewTimeLT(v uint8) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldViewTime), v))
	})
}

// ViewTimeLTE applies the LTE predicate on the "view_time" field.
func ViewTimeLTE(v uint8) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldViewTime), v))
	})
}

// ViewTimeIsNil applies the IsNil predicate on the "view_time" field.
func ViewTimeIsNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldViewTime)))
	})
}

// ViewTimeNotNil applies the NotNil predicate on the "view_time" field.
func ViewTimeNotNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldViewTime)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// SmallIDEQ applies the EQ predicate on the "small_id" field.
func SmallIDEQ(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSmallID), v))
	})
}

// SmallIDNEQ applies the NEQ predicate on the "small_id" field.
func SmallIDNEQ(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSmallID), v))
	})
}

// SmallIDIn applies the In predicate on the "small_id" field.
func SmallIDIn(vs ...int) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSmallID), v...))
	})
}

// SmallIDNotIn applies the NotIn predicate on the "small_id" field.
func SmallIDNotIn(vs ...int) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSmallID), v...))
	})
}

// SmallIDIsNil applies the IsNil predicate on the "small_id" field.
func SmallIDIsNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSmallID)))
	})
}

// SmallIDNotNil applies the NotNil predicate on the "small_id" field.
func SmallIDNotNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSmallID)))
	})
}

// VideoTimeEQ applies the EQ predicate on the "video_time" field.
func VideoTimeEQ(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoTime), v))
	})
}

// VideoTimeNEQ applies the NEQ predicate on the "video_time" field.
func VideoTimeNEQ(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVideoTime), v))
	})
}

// VideoTimeIn applies the In predicate on the "video_time" field.
func VideoTimeIn(vs ...int) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVideoTime), v...))
	})
}

// VideoTimeNotIn applies the NotIn predicate on the "video_time" field.
func VideoTimeNotIn(vs ...int) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVideoTime), v...))
	})
}

// VideoTimeGT applies the GT predicate on the "video_time" field.
func VideoTimeGT(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVideoTime), v))
	})
}

// VideoTimeGTE applies the GTE predicate on the "video_time" field.
func VideoTimeGTE(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVideoTime), v))
	})
}

// VideoTimeLT applies the LT predicate on the "video_time" field.
func VideoTimeLT(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVideoTime), v))
	})
}

// VideoTimeLTE applies the LTE predicate on the "video_time" field.
func VideoTimeLTE(v int) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVideoTime), v))
	})
}

// VideoTimeIsNil applies the IsNil predicate on the "video_time" field.
func VideoTimeIsNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVideoTime)))
	})
}

// VideoTimeNotNil applies the NotNil predicate on the "video_time" field.
func VideoTimeNotNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVideoTime)))
	})
}

// ViewAtEQ applies the EQ predicate on the "view_at" field.
func ViewAtEQ(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViewAt), v))
	})
}

// ViewAtNEQ applies the NEQ predicate on the "view_at" field.
func ViewAtNEQ(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldViewAt), v))
	})
}

// ViewAtIn applies the In predicate on the "view_at" field.
func ViewAtIn(vs ...time.Time) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldViewAt), v...))
	})
}

// ViewAtNotIn applies the NotIn predicate on the "view_at" field.
func ViewAtNotIn(vs ...time.Time) predicate.VideoRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VideoRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldViewAt), v...))
	})
}

// ViewAtGT applies the GT predicate on the "view_at" field.
func ViewAtGT(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldViewAt), v))
	})
}

// ViewAtGTE applies the GTE predicate on the "view_at" field.
func ViewAtGTE(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldViewAt), v))
	})
}

// ViewAtLT applies the LT predicate on the "view_at" field.
func ViewAtLT(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldViewAt), v))
	})
}

// ViewAtLTE applies the LTE predicate on the "view_at" field.
func ViewAtLTE(v time.Time) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldViewAt), v))
	})
}

// ViewAtIsNil applies the IsNil predicate on the "view_at" field.
func ViewAtIsNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldViewAt)))
	})
}

// ViewAtNotNil applies the NotNil predicate on the "view_at" field.
func ViewAtNotNil() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldViewAt)))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSmallCourse applies the HasEdge predicate on the "small_course" edge.
func HasSmallCourse() predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmallCourseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SmallCourseTable, SmallCourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSmallCourseWith applies the HasEdge predicate on the "small_course" edge with a given conditions (other predicates).
func HasSmallCourseWith(preds ...predicate.KcCourseSmallCategory) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmallCourseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SmallCourseTable, SmallCourseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VideoRecord) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VideoRecord) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VideoRecord) predicate.VideoRecord {
	return predicate.VideoRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}

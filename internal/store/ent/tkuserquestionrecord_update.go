// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkexampaper"
	"gserver/internal/store/ent/tkquestion"
	"gserver/internal/store/ent/tkquestionbank"
	"gserver/internal/store/ent/tksection"
	"gserver/internal/store/ent/tkuserquestionrecord"
	"gserver/internal/store/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserQuestionRecordUpdate is the builder for updating TkUserQuestionRecord entities.
type TkUserQuestionRecordUpdate struct {
	config
	hooks    []Hook
	mutation *TkUserQuestionRecordMutation
}

// Where adds a new predicate for the TkUserQuestionRecordUpdate builder.
func (tuqru *TkUserQuestionRecordUpdate) Where(ps ...predicate.TkUserQuestionRecord) *TkUserQuestionRecordUpdate {
	tuqru.mutation.predicates = append(tuqru.mutation.predicates, ps...)
	return tuqru
}

// SetUUID sets the "uuid" field.
func (tuqru *TkUserQuestionRecordUpdate) SetUUID(s string) *TkUserQuestionRecordUpdate {
	tuqru.mutation.SetUUID(s)
	return tuqru
}

// SetUpdatedAt sets the "updated_at" field.
func (tuqru *TkUserQuestionRecordUpdate) SetUpdatedAt(t time.Time) *TkUserQuestionRecordUpdate {
	tuqru.mutation.SetUpdatedAt(t)
	return tuqru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuqru *TkUserQuestionRecordUpdate) ClearUpdatedAt() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearUpdatedAt()
	return tuqru
}

// SetDeletedAt sets the "deleted_at" field.
func (tuqru *TkUserQuestionRecordUpdate) SetDeletedAt(t time.Time) *TkUserQuestionRecordUpdate {
	tuqru.mutation.SetDeletedAt(t)
	return tuqru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableDeletedAt(t *time.Time) *TkUserQuestionRecordUpdate {
	if t != nil {
		tuqru.SetDeletedAt(*t)
	}
	return tuqru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuqru *TkUserQuestionRecordUpdate) ClearDeletedAt() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearDeletedAt()
	return tuqru
}

// SetCorrectCount sets the "correct_count" field.
func (tuqru *TkUserQuestionRecordUpdate) SetCorrectCount(i int) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetCorrectCount()
	tuqru.mutation.SetCorrectCount(i)
	return tuqru
}

// SetNillableCorrectCount sets the "correct_count" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableCorrectCount(i *int) *TkUserQuestionRecordUpdate {
	if i != nil {
		tuqru.SetCorrectCount(*i)
	}
	return tuqru
}

// AddCorrectCount adds i to the "correct_count" field.
func (tuqru *TkUserQuestionRecordUpdate) AddCorrectCount(i int) *TkUserQuestionRecordUpdate {
	tuqru.mutation.AddCorrectCount(i)
	return tuqru
}

// SetAnswerCount sets the "answer_count" field.
func (tuqru *TkUserQuestionRecordUpdate) SetAnswerCount(i int) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetAnswerCount()
	tuqru.mutation.SetAnswerCount(i)
	return tuqru
}

// SetNillableAnswerCount sets the "answer_count" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableAnswerCount(i *int) *TkUserQuestionRecordUpdate {
	if i != nil {
		tuqru.SetAnswerCount(*i)
	}
	return tuqru
}

// AddAnswerCount adds i to the "answer_count" field.
func (tuqru *TkUserQuestionRecordUpdate) AddAnswerCount(i int) *TkUserQuestionRecordUpdate {
	tuqru.mutation.AddAnswerCount(i)
	return tuqru
}

// SetAnswer sets the "answer" field.
func (tuqru *TkUserQuestionRecordUpdate) SetAnswer(s string) *TkUserQuestionRecordUpdate {
	tuqru.mutation.SetAnswer(s)
	return tuqru
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableAnswer(s *string) *TkUserQuestionRecordUpdate {
	if s != nil {
		tuqru.SetAnswer(*s)
	}
	return tuqru
}

// SetIsRight sets the "is_right" field.
func (tuqru *TkUserQuestionRecordUpdate) SetIsRight(u uint8) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetIsRight()
	tuqru.mutation.SetIsRight(u)
	return tuqru
}

// SetNillableIsRight sets the "is_right" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableIsRight(u *uint8) *TkUserQuestionRecordUpdate {
	if u != nil {
		tuqru.SetIsRight(*u)
	}
	return tuqru
}

// AddIsRight adds u to the "is_right" field.
func (tuqru *TkUserQuestionRecordUpdate) AddIsRight(u uint8) *TkUserQuestionRecordUpdate {
	tuqru.mutation.AddIsRight(u)
	return tuqru
}

// SetExamQuestionType sets the "exam_question_type" field.
func (tuqru *TkUserQuestionRecordUpdate) SetExamQuestionType(u uint8) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetExamQuestionType()
	tuqru.mutation.SetExamQuestionType(u)
	return tuqru
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableExamQuestionType(u *uint8) *TkUserQuestionRecordUpdate {
	if u != nil {
		tuqru.SetExamQuestionType(*u)
	}
	return tuqru
}

// AddExamQuestionType adds u to the "exam_question_type" field.
func (tuqru *TkUserQuestionRecordUpdate) AddExamQuestionType(u uint8) *TkUserQuestionRecordUpdate {
	tuqru.mutation.AddExamQuestionType(u)
	return tuqru
}

// SetQuestionType sets the "question_type" field.
func (tuqru *TkUserQuestionRecordUpdate) SetQuestionType(u uint8) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetQuestionType()
	tuqru.mutation.SetQuestionType(u)
	return tuqru
}

// SetNillableQuestionType sets the "question_type" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableQuestionType(u *uint8) *TkUserQuestionRecordUpdate {
	if u != nil {
		tuqru.SetQuestionType(*u)
	}
	return tuqru
}

// AddQuestionType adds u to the "question_type" field.
func (tuqru *TkUserQuestionRecordUpdate) AddQuestionType(u uint8) *TkUserQuestionRecordUpdate {
	tuqru.mutation.AddQuestionType(u)
	return tuqru
}

// SetUserID sets the "user_id" field.
func (tuqru *TkUserQuestionRecordUpdate) SetUserID(i int) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetUserID()
	tuqru.mutation.SetUserID(i)
	return tuqru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableUserID(i *int) *TkUserQuestionRecordUpdate {
	if i != nil {
		tuqru.SetUserID(*i)
	}
	return tuqru
}

// ClearUserID clears the value of the "user_id" field.
func (tuqru *TkUserQuestionRecordUpdate) ClearUserID() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearUserID()
	return tuqru
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tuqru *TkUserQuestionRecordUpdate) SetQuestionBankID(i int) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetQuestionBankID()
	tuqru.mutation.SetQuestionBankID(i)
	return tuqru
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableQuestionBankID(i *int) *TkUserQuestionRecordUpdate {
	if i != nil {
		tuqru.SetQuestionBankID(*i)
	}
	return tuqru
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tuqru *TkUserQuestionRecordUpdate) ClearQuestionBankID() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearQuestionBankID()
	return tuqru
}

// SetQuestionID sets the "question_id" field.
func (tuqru *TkUserQuestionRecordUpdate) SetQuestionID(i int) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetQuestionID()
	tuqru.mutation.SetQuestionID(i)
	return tuqru
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableQuestionID(i *int) *TkUserQuestionRecordUpdate {
	if i != nil {
		tuqru.SetQuestionID(*i)
	}
	return tuqru
}

// ClearQuestionID clears the value of the "question_id" field.
func (tuqru *TkUserQuestionRecordUpdate) ClearQuestionID() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearQuestionID()
	return tuqru
}

// SetExamPaperID sets the "exam_paper_id" field.
func (tuqru *TkUserQuestionRecordUpdate) SetExamPaperID(i int) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetExamPaperID()
	tuqru.mutation.SetExamPaperID(i)
	return tuqru
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableExamPaperID(i *int) *TkUserQuestionRecordUpdate {
	if i != nil {
		tuqru.SetExamPaperID(*i)
	}
	return tuqru
}

// ClearExamPaperID clears the value of the "exam_paper_id" field.
func (tuqru *TkUserQuestionRecordUpdate) ClearExamPaperID() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearExamPaperID()
	return tuqru
}

// SetSectionID sets the "section_id" field.
func (tuqru *TkUserQuestionRecordUpdate) SetSectionID(i int) *TkUserQuestionRecordUpdate {
	tuqru.mutation.ResetSectionID()
	tuqru.mutation.SetSectionID(i)
	return tuqru
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (tuqru *TkUserQuestionRecordUpdate) SetNillableSectionID(i *int) *TkUserQuestionRecordUpdate {
	if i != nil {
		tuqru.SetSectionID(*i)
	}
	return tuqru
}

// ClearSectionID clears the value of the "section_id" field.
func (tuqru *TkUserQuestionRecordUpdate) ClearSectionID() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearSectionID()
	return tuqru
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tuqru *TkUserQuestionRecordUpdate) SetQuestionBank(t *TkQuestionBank) *TkUserQuestionRecordUpdate {
	return tuqru.SetQuestionBankID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuqru *TkUserQuestionRecordUpdate) SetUser(u *User) *TkUserQuestionRecordUpdate {
	return tuqru.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tuqru *TkUserQuestionRecordUpdate) SetQuestion(t *TkQuestion) *TkUserQuestionRecordUpdate {
	return tuqru.SetQuestionID(t.ID)
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (tuqru *TkUserQuestionRecordUpdate) SetExamPaper(t *TkExamPaper) *TkUserQuestionRecordUpdate {
	return tuqru.SetExamPaperID(t.ID)
}

// SetSection sets the "section" edge to the TkSection entity.
func (tuqru *TkUserQuestionRecordUpdate) SetSection(t *TkSection) *TkUserQuestionRecordUpdate {
	return tuqru.SetSectionID(t.ID)
}

// Mutation returns the TkUserQuestionRecordMutation object of the builder.
func (tuqru *TkUserQuestionRecordUpdate) Mutation() *TkUserQuestionRecordMutation {
	return tuqru.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (tuqru *TkUserQuestionRecordUpdate) ClearQuestionBank() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearQuestionBank()
	return tuqru
}

// ClearUser clears the "user" edge to the User entity.
func (tuqru *TkUserQuestionRecordUpdate) ClearUser() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearUser()
	return tuqru
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tuqru *TkUserQuestionRecordUpdate) ClearQuestion() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearQuestion()
	return tuqru
}

// ClearExamPaper clears the "exam_paper" edge to the TkExamPaper entity.
func (tuqru *TkUserQuestionRecordUpdate) ClearExamPaper() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearExamPaper()
	return tuqru
}

// ClearSection clears the "section" edge to the TkSection entity.
func (tuqru *TkUserQuestionRecordUpdate) ClearSection() *TkUserQuestionRecordUpdate {
	tuqru.mutation.ClearSection()
	return tuqru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuqru *TkUserQuestionRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tuqru.defaults()
	if len(tuqru.hooks) == 0 {
		affected, err = tuqru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserQuestionRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuqru.mutation = mutation
			affected, err = tuqru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tuqru.hooks) - 1; i >= 0; i-- {
			mut = tuqru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuqru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuqru *TkUserQuestionRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := tuqru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuqru *TkUserQuestionRecordUpdate) Exec(ctx context.Context) error {
	_, err := tuqru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuqru *TkUserQuestionRecordUpdate) ExecX(ctx context.Context) {
	if err := tuqru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuqru *TkUserQuestionRecordUpdate) defaults() {
	if _, ok := tuqru.mutation.UpdatedAt(); !ok && !tuqru.mutation.UpdatedAtCleared() {
		v := tkuserquestionrecord.UpdateDefaultUpdatedAt()
		tuqru.mutation.SetUpdatedAt(v)
	}
}

func (tuqru *TkUserQuestionRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserquestionrecord.Table,
			Columns: tkuserquestionrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserquestionrecord.FieldID,
			},
		},
	}
	if ps := tuqru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuqru.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserquestionrecord.FieldUUID,
		})
	}
	if tuqru.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionrecord.FieldCreatedAt,
		})
	}
	if value, ok := tuqru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionrecord.FieldUpdatedAt,
		})
	}
	if tuqru.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionrecord.FieldUpdatedAt,
		})
	}
	if value, ok := tuqru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionrecord.FieldDeletedAt,
		})
	}
	if tuqru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionrecord.FieldDeletedAt,
		})
	}
	if value, ok := tuqru.mutation.CorrectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldCorrectCount,
		})
	}
	if value, ok := tuqru.mutation.AddedCorrectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldCorrectCount,
		})
	}
	if value, ok := tuqru.mutation.AnswerCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldAnswerCount,
		})
	}
	if value, ok := tuqru.mutation.AddedAnswerCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldAnswerCount,
		})
	}
	if value, ok := tuqru.mutation.Answer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserquestionrecord.FieldAnswer,
		})
	}
	if value, ok := tuqru.mutation.IsRight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldIsRight,
		})
	}
	if value, ok := tuqru.mutation.AddedIsRight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldIsRight,
		})
	}
	if value, ok := tuqru.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldExamQuestionType,
		})
	}
	if value, ok := tuqru.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldExamQuestionType,
		})
	}
	if value, ok := tuqru.mutation.QuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldQuestionType,
		})
	}
	if value, ok := tuqru.mutation.AddedQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldQuestionType,
		})
	}
	if tuqru.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionBankTable,
			Columns: []string{tkuserquestionrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqru.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionBankTable,
			Columns: []string{tkuserquestionrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.UserTable,
			Columns: []string{tkuserquestionrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.UserTable,
			Columns: []string{tkuserquestionrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqru.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionTable,
			Columns: []string{tkuserquestionrecord.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqru.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionTable,
			Columns: []string{tkuserquestionrecord.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqru.mutation.ExamPaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.ExamPaperTable,
			Columns: []string{tkuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqru.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.ExamPaperTable,
			Columns: []string{tkuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqru.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.SectionTable,
			Columns: []string{tkuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqru.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.SectionTable,
			Columns: []string{tkuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tuqru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserquestionrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkUserQuestionRecordUpdateOne is the builder for updating a single TkUserQuestionRecord entity.
type TkUserQuestionRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkUserQuestionRecordMutation
}

// SetUUID sets the "uuid" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetUUID(s string) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.SetUUID(s)
	return tuqruo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetUpdatedAt(t time.Time) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.SetUpdatedAt(t)
	return tuqruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearUpdatedAt() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearUpdatedAt()
	return tuqruo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetDeletedAt(t time.Time) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.SetDeletedAt(t)
	return tuqruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *TkUserQuestionRecordUpdateOne {
	if t != nil {
		tuqruo.SetDeletedAt(*t)
	}
	return tuqruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearDeletedAt() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearDeletedAt()
	return tuqruo
}

// SetCorrectCount sets the "correct_count" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetCorrectCount(i int) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetCorrectCount()
	tuqruo.mutation.SetCorrectCount(i)
	return tuqruo
}

// SetNillableCorrectCount sets the "correct_count" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableCorrectCount(i *int) *TkUserQuestionRecordUpdateOne {
	if i != nil {
		tuqruo.SetCorrectCount(*i)
	}
	return tuqruo
}

// AddCorrectCount adds i to the "correct_count" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) AddCorrectCount(i int) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.AddCorrectCount(i)
	return tuqruo
}

// SetAnswerCount sets the "answer_count" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetAnswerCount(i int) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetAnswerCount()
	tuqruo.mutation.SetAnswerCount(i)
	return tuqruo
}

// SetNillableAnswerCount sets the "answer_count" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableAnswerCount(i *int) *TkUserQuestionRecordUpdateOne {
	if i != nil {
		tuqruo.SetAnswerCount(*i)
	}
	return tuqruo
}

// AddAnswerCount adds i to the "answer_count" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) AddAnswerCount(i int) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.AddAnswerCount(i)
	return tuqruo
}

// SetAnswer sets the "answer" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetAnswer(s string) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.SetAnswer(s)
	return tuqruo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableAnswer(s *string) *TkUserQuestionRecordUpdateOne {
	if s != nil {
		tuqruo.SetAnswer(*s)
	}
	return tuqruo
}

// SetIsRight sets the "is_right" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetIsRight(u uint8) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetIsRight()
	tuqruo.mutation.SetIsRight(u)
	return tuqruo
}

// SetNillableIsRight sets the "is_right" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableIsRight(u *uint8) *TkUserQuestionRecordUpdateOne {
	if u != nil {
		tuqruo.SetIsRight(*u)
	}
	return tuqruo
}

// AddIsRight adds u to the "is_right" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) AddIsRight(u uint8) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.AddIsRight(u)
	return tuqruo
}

// SetExamQuestionType sets the "exam_question_type" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetExamQuestionType(u uint8) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetExamQuestionType()
	tuqruo.mutation.SetExamQuestionType(u)
	return tuqruo
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableExamQuestionType(u *uint8) *TkUserQuestionRecordUpdateOne {
	if u != nil {
		tuqruo.SetExamQuestionType(*u)
	}
	return tuqruo
}

// AddExamQuestionType adds u to the "exam_question_type" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) AddExamQuestionType(u uint8) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.AddExamQuestionType(u)
	return tuqruo
}

// SetQuestionType sets the "question_type" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetQuestionType(u uint8) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetQuestionType()
	tuqruo.mutation.SetQuestionType(u)
	return tuqruo
}

// SetNillableQuestionType sets the "question_type" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableQuestionType(u *uint8) *TkUserQuestionRecordUpdateOne {
	if u != nil {
		tuqruo.SetQuestionType(*u)
	}
	return tuqruo
}

// AddQuestionType adds u to the "question_type" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) AddQuestionType(u uint8) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.AddQuestionType(u)
	return tuqruo
}

// SetUserID sets the "user_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetUserID(i int) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetUserID()
	tuqruo.mutation.SetUserID(i)
	return tuqruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableUserID(i *int) *TkUserQuestionRecordUpdateOne {
	if i != nil {
		tuqruo.SetUserID(*i)
	}
	return tuqruo
}

// ClearUserID clears the value of the "user_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearUserID() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearUserID()
	return tuqruo
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetQuestionBankID(i int) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetQuestionBankID()
	tuqruo.mutation.SetQuestionBankID(i)
	return tuqruo
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableQuestionBankID(i *int) *TkUserQuestionRecordUpdateOne {
	if i != nil {
		tuqruo.SetQuestionBankID(*i)
	}
	return tuqruo
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearQuestionBankID() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearQuestionBankID()
	return tuqruo
}

// SetQuestionID sets the "question_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetQuestionID(i int) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetQuestionID()
	tuqruo.mutation.SetQuestionID(i)
	return tuqruo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableQuestionID(i *int) *TkUserQuestionRecordUpdateOne {
	if i != nil {
		tuqruo.SetQuestionID(*i)
	}
	return tuqruo
}

// ClearQuestionID clears the value of the "question_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearQuestionID() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearQuestionID()
	return tuqruo
}

// SetExamPaperID sets the "exam_paper_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetExamPaperID(i int) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetExamPaperID()
	tuqruo.mutation.SetExamPaperID(i)
	return tuqruo
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableExamPaperID(i *int) *TkUserQuestionRecordUpdateOne {
	if i != nil {
		tuqruo.SetExamPaperID(*i)
	}
	return tuqruo
}

// ClearExamPaperID clears the value of the "exam_paper_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearExamPaperID() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearExamPaperID()
	return tuqruo
}

// SetSectionID sets the "section_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetSectionID(i int) *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ResetSectionID()
	tuqruo.mutation.SetSectionID(i)
	return tuqruo
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetNillableSectionID(i *int) *TkUserQuestionRecordUpdateOne {
	if i != nil {
		tuqruo.SetSectionID(*i)
	}
	return tuqruo
}

// ClearSectionID clears the value of the "section_id" field.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearSectionID() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearSectionID()
	return tuqruo
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetQuestionBank(t *TkQuestionBank) *TkUserQuestionRecordUpdateOne {
	return tuqruo.SetQuestionBankID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetUser(u *User) *TkUserQuestionRecordUpdateOne {
	return tuqruo.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetQuestion(t *TkQuestion) *TkUserQuestionRecordUpdateOne {
	return tuqruo.SetQuestionID(t.ID)
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetExamPaper(t *TkExamPaper) *TkUserQuestionRecordUpdateOne {
	return tuqruo.SetExamPaperID(t.ID)
}

// SetSection sets the "section" edge to the TkSection entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) SetSection(t *TkSection) *TkUserQuestionRecordUpdateOne {
	return tuqruo.SetSectionID(t.ID)
}

// Mutation returns the TkUserQuestionRecordMutation object of the builder.
func (tuqruo *TkUserQuestionRecordUpdateOne) Mutation() *TkUserQuestionRecordMutation {
	return tuqruo.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearQuestionBank() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearQuestionBank()
	return tuqruo
}

// ClearUser clears the "user" edge to the User entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearUser() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearUser()
	return tuqruo
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearQuestion() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearQuestion()
	return tuqruo
}

// ClearExamPaper clears the "exam_paper" edge to the TkExamPaper entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearExamPaper() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearExamPaper()
	return tuqruo
}

// ClearSection clears the "section" edge to the TkSection entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) ClearSection() *TkUserQuestionRecordUpdateOne {
	tuqruo.mutation.ClearSection()
	return tuqruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuqruo *TkUserQuestionRecordUpdateOne) Select(field string, fields ...string) *TkUserQuestionRecordUpdateOne {
	tuqruo.fields = append([]string{field}, fields...)
	return tuqruo
}

// Save executes the query and returns the updated TkUserQuestionRecord entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) Save(ctx context.Context) (*TkUserQuestionRecord, error) {
	var (
		err  error
		node *TkUserQuestionRecord
	)
	tuqruo.defaults()
	if len(tuqruo.hooks) == 0 {
		node, err = tuqruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserQuestionRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuqruo.mutation = mutation
			node, err = tuqruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuqruo.hooks) - 1; i >= 0; i-- {
			mut = tuqruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuqruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuqruo *TkUserQuestionRecordUpdateOne) SaveX(ctx context.Context) *TkUserQuestionRecord {
	node, err := tuqruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuqruo *TkUserQuestionRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := tuqruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuqruo *TkUserQuestionRecordUpdateOne) ExecX(ctx context.Context) {
	if err := tuqruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuqruo *TkUserQuestionRecordUpdateOne) defaults() {
	if _, ok := tuqruo.mutation.UpdatedAt(); !ok && !tuqruo.mutation.UpdatedAtCleared() {
		v := tkuserquestionrecord.UpdateDefaultUpdatedAt()
		tuqruo.mutation.SetUpdatedAt(v)
	}
}

func (tuqruo *TkUserQuestionRecordUpdateOne) sqlSave(ctx context.Context) (_node *TkUserQuestionRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserquestionrecord.Table,
			Columns: tkuserquestionrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserquestionrecord.FieldID,
			},
		},
	}
	id, ok := tuqruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkUserQuestionRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuqruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkuserquestionrecord.FieldID)
		for _, f := range fields {
			if !tkuserquestionrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkuserquestionrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuqruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuqruo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserquestionrecord.FieldUUID,
		})
	}
	if tuqruo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionrecord.FieldCreatedAt,
		})
	}
	if value, ok := tuqruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionrecord.FieldUpdatedAt,
		})
	}
	if tuqruo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionrecord.FieldUpdatedAt,
		})
	}
	if value, ok := tuqruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionrecord.FieldDeletedAt,
		})
	}
	if tuqruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionrecord.FieldDeletedAt,
		})
	}
	if value, ok := tuqruo.mutation.CorrectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldCorrectCount,
		})
	}
	if value, ok := tuqruo.mutation.AddedCorrectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldCorrectCount,
		})
	}
	if value, ok := tuqruo.mutation.AnswerCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldAnswerCount,
		})
	}
	if value, ok := tuqruo.mutation.AddedAnswerCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldAnswerCount,
		})
	}
	if value, ok := tuqruo.mutation.Answer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserquestionrecord.FieldAnswer,
		})
	}
	if value, ok := tuqruo.mutation.IsRight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldIsRight,
		})
	}
	if value, ok := tuqruo.mutation.AddedIsRight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldIsRight,
		})
	}
	if value, ok := tuqruo.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldExamQuestionType,
		})
	}
	if value, ok := tuqruo.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldExamQuestionType,
		})
	}
	if value, ok := tuqruo.mutation.QuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldQuestionType,
		})
	}
	if value, ok := tuqruo.mutation.AddedQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldQuestionType,
		})
	}
	if tuqruo.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionBankTable,
			Columns: []string{tkuserquestionrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqruo.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionBankTable,
			Columns: []string{tkuserquestionrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.UserTable,
			Columns: []string{tkuserquestionrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.UserTable,
			Columns: []string{tkuserquestionrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqruo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionTable,
			Columns: []string{tkuserquestionrecord.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqruo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionTable,
			Columns: []string{tkuserquestionrecord.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqruo.mutation.ExamPaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.ExamPaperTable,
			Columns: []string{tkuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqruo.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.ExamPaperTable,
			Columns: []string{tkuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqruo.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.SectionTable,
			Columns: []string{tkuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqruo.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.SectionTable,
			Columns: []string{tkuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkUserQuestionRecord{config: tuqruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuqruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserquestionrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/city"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkquestionbankcity"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionBankCityCreate is the builder for creating a TkQuestionBankCity entity.
type TkQuestionBankCityCreate struct {
	config
	mutation *TkQuestionBankCityMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tqbcc *TkQuestionBankCityCreate) SetUUID(s string) *TkQuestionBankCityCreate {
	tqbcc.mutation.SetUUID(s)
	return tqbcc
}

// SetCreatedAt sets the "created_at" field.
func (tqbcc *TkQuestionBankCityCreate) SetCreatedAt(t time.Time) *TkQuestionBankCityCreate {
	tqbcc.mutation.SetCreatedAt(t)
	return tqbcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqbcc *TkQuestionBankCityCreate) SetNillableCreatedAt(t *time.Time) *TkQuestionBankCityCreate {
	if t != nil {
		tqbcc.SetCreatedAt(*t)
	}
	return tqbcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tqbcc *TkQuestionBankCityCreate) SetUpdatedAt(t time.Time) *TkQuestionBankCityCreate {
	tqbcc.mutation.SetUpdatedAt(t)
	return tqbcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tqbcc *TkQuestionBankCityCreate) SetNillableUpdatedAt(t *time.Time) *TkQuestionBankCityCreate {
	if t != nil {
		tqbcc.SetUpdatedAt(*t)
	}
	return tqbcc
}

// SetDeletedAt sets the "deleted_at" field.
func (tqbcc *TkQuestionBankCityCreate) SetDeletedAt(t time.Time) *TkQuestionBankCityCreate {
	tqbcc.mutation.SetDeletedAt(t)
	return tqbcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqbcc *TkQuestionBankCityCreate) SetNillableDeletedAt(t *time.Time) *TkQuestionBankCityCreate {
	if t != nil {
		tqbcc.SetDeletedAt(*t)
	}
	return tqbcc
}

// SetCityID sets the "city_id" field.
func (tqbcc *TkQuestionBankCityCreate) SetCityID(i int) *TkQuestionBankCityCreate {
	tqbcc.mutation.SetCityID(i)
	return tqbcc
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (tqbcc *TkQuestionBankCityCreate) SetNillableCityID(i *int) *TkQuestionBankCityCreate {
	if i != nil {
		tqbcc.SetCityID(*i)
	}
	return tqbcc
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tqbcc *TkQuestionBankCityCreate) SetQuestionBankID(i int) *TkQuestionBankCityCreate {
	tqbcc.mutation.SetQuestionBankID(i)
	return tqbcc
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tqbcc *TkQuestionBankCityCreate) SetNillableQuestionBankID(i *int) *TkQuestionBankCityCreate {
	if i != nil {
		tqbcc.SetQuestionBankID(*i)
	}
	return tqbcc
}

// SetTkQuestionBankID sets the "tk_question_bank" edge to the TkQuestionBank entity by ID.
func (tqbcc *TkQuestionBankCityCreate) SetTkQuestionBankID(id int) *TkQuestionBankCityCreate {
	tqbcc.mutation.SetTkQuestionBankID(id)
	return tqbcc
}

// SetNillableTkQuestionBankID sets the "tk_question_bank" edge to the TkQuestionBank entity by ID if the given value is not nil.
func (tqbcc *TkQuestionBankCityCreate) SetNillableTkQuestionBankID(id *int) *TkQuestionBankCityCreate {
	if id != nil {
		tqbcc = tqbcc.SetTkQuestionBankID(*id)
	}
	return tqbcc
}

// SetTkQuestionBank sets the "tk_question_bank" edge to the TkQuestionBank entity.
func (tqbcc *TkQuestionBankCityCreate) SetTkQuestionBank(t *TkQuestionBank) *TkQuestionBankCityCreate {
	return tqbcc.SetTkQuestionBankID(t.ID)
}

// SetCity sets the "city" edge to the City entity.
func (tqbcc *TkQuestionBankCityCreate) SetCity(c *City) *TkQuestionBankCityCreate {
	return tqbcc.SetCityID(c.ID)
}

// Mutation returns the TkQuestionBankCityMutation object of the builder.
func (tqbcc *TkQuestionBankCityCreate) Mutation() *TkQuestionBankCityMutation {
	return tqbcc.mutation
}

// Save creates the TkQuestionBankCity in the database.
func (tqbcc *TkQuestionBankCityCreate) Save(ctx context.Context) (*TkQuestionBankCity, error) {
	var (
		err  error
		node *TkQuestionBankCity
	)
	tqbcc.defaults()
	if len(tqbcc.hooks) == 0 {
		if err = tqbcc.check(); err != nil {
			return nil, err
		}
		node, err = tqbcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionBankCityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tqbcc.check(); err != nil {
				return nil, err
			}
			tqbcc.mutation = mutation
			node, err = tqbcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tqbcc.hooks) - 1; i >= 0; i-- {
			mut = tqbcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqbcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tqbcc *TkQuestionBankCityCreate) SaveX(ctx context.Context) *TkQuestionBankCity {
	v, err := tqbcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tqbcc *TkQuestionBankCityCreate) defaults() {
	if _, ok := tqbcc.mutation.CreatedAt(); !ok {
		v := tkquestionbankcity.DefaultCreatedAt()
		tqbcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tqbcc.mutation.UpdatedAt(); !ok {
		v := tkquestionbankcity.DefaultUpdatedAt()
		tqbcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tqbcc *TkQuestionBankCityCreate) check() error {
	if _, ok := tqbcc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	return nil
}

func (tqbcc *TkQuestionBankCityCreate) sqlSave(ctx context.Context) (*TkQuestionBankCity, error) {
	_node, _spec := tqbcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tqbcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tqbcc *TkQuestionBankCityCreate) createSpec() (*TkQuestionBankCity, *sqlgraph.CreateSpec) {
	var (
		_node = &TkQuestionBankCity{config: tqbcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkquestionbankcity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionbankcity.FieldID,
			},
		}
	)
	if value, ok := tqbcc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionbankcity.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tqbcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbankcity.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tqbcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbankcity.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tqbcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbankcity.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := tqbcc.mutation.TkQuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankcity.TkQuestionBankTable,
			Columns: []string{tkquestionbankcity.TkQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionBankID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tqbcc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankcity.CityTable,
			Columns: []string{tkquestionbankcity.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkQuestionBankCityCreateBulk is the builder for creating many TkQuestionBankCity entities in bulk.
type TkQuestionBankCityCreateBulk struct {
	config
	builders []*TkQuestionBankCityCreate
}

// Save creates the TkQuestionBankCity entities in the database.
func (tqbccb *TkQuestionBankCityCreateBulk) Save(ctx context.Context) ([]*TkQuestionBankCity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tqbccb.builders))
	nodes := make([]*TkQuestionBankCity, len(tqbccb.builders))
	mutators := make([]Mutator, len(tqbccb.builders))
	for i := range tqbccb.builders {
		func(i int, root context.Context) {
			builder := tqbccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkQuestionBankCityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tqbccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tqbccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tqbccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tqbccb *TkQuestionBankCityCreateBulk) SaveX(ctx context.Context) []*TkQuestionBankCity {
	v, err := tqbccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

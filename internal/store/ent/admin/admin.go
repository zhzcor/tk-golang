// Code generated by entc, DO NOT EDIT.

package admin

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the admin type in the database.
	Label = "admin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldBossAdminID holds the string denoting the boss_admin_id field in the database.
	FieldBossAdminID = "boss_admin_id"
	// FieldRealName holds the string denoting the real_name field in the database.
	FieldRealName = "real_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldThirdOpenid holds the string denoting the third_openid field in the database.
	FieldThirdOpenid = "third_openid"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAdminAvatarID holds the string denoting the admin_avatar_id field in the database.
	FieldAdminAvatarID = "admin_avatar_id"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// EdgeAdminLoginLogs holds the string denoting the admin_login_logs edge name in mutations.
	EdgeAdminLoginLogs = "admin_login_logs"
	// EdgeOperationAdminLogs holds the string denoting the operation_admin_logs edge name in mutations.
	EdgeOperationAdminLogs = "operation_admin_logs"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// EdgeMessageCreatedAdminID holds the string denoting the message_created_admin_id edge name in mutations.
	EdgeMessageCreatedAdminID = "message_created_admin_id"
	// EdgeAdminQuestionBanks holds the string denoting the admin_question_banks edge name in mutations.
	EdgeAdminQuestionBanks = "admin_question_banks"
	// EdgeAdminQuestions holds the string denoting the admin_questions edge name in mutations.
	EdgeAdminQuestions = "admin_Questions"
	// EdgeAdminExamPapers holds the string denoting the admin_exam_papers edge name in mutations.
	EdgeAdminExamPapers = "admin_exam_papers"
	// EdgeAdminErrorFeedbacks holds the string denoting the admin_error_feedbacks edge name in mutations.
	EdgeAdminErrorFeedbacks = "admin_error_feedbacks"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeClassAdmin holds the string denoting the class_admin edge name in mutations.
	EdgeClassAdmin = "class_admin"
	// EdgeAdminAttachments holds the string denoting the admin_attachments edge name in mutations.
	EdgeAdminAttachments = "admin_attachments"
	// Table holds the table name of the admin in the database.
	Table = "admins"
	// AdminLoginLogsTable is the table the holds the admin_login_logs relation/edge.
	AdminLoginLogsTable = "admin_login_logs"
	// AdminLoginLogsInverseTable is the table name for the AdminLoginLog entity.
	// It exists in this package in order to avoid circular dependency with the "adminloginlog" package.
	AdminLoginLogsInverseTable = "admin_login_logs"
	// AdminLoginLogsColumn is the table column denoting the admin_login_logs relation/edge.
	AdminLoginLogsColumn = "admin_id"
	// OperationAdminLogsTable is the table the holds the operation_admin_logs relation/edge.
	OperationAdminLogsTable = "admin_operation_logs"
	// OperationAdminLogsInverseTable is the table name for the AdminOperationLog entity.
	// It exists in this package in order to avoid circular dependency with the "adminoperationlog" package.
	OperationAdminLogsInverseTable = "admin_operation_logs"
	// OperationAdminLogsColumn is the table column denoting the operation_admin_logs relation/edge.
	OperationAdminLogsColumn = "admin_id"
	// RolesTable is the table the holds the roles relation/edge. The primary key declared below.
	RolesTable = "admin_roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// ActivitiesTable is the table the holds the activities relation/edge.
	ActivitiesTable = "activities"
	// ActivitiesInverseTable is the table name for the Activity entity.
	// It exists in this package in order to avoid circular dependency with the "activity" package.
	ActivitiesInverseTable = "activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "created_admin_id"
	// MessageCreatedAdminIDTable is the table the holds the message_created_admin_id relation/edge.
	MessageCreatedAdminIDTable = "messages"
	// MessageCreatedAdminIDInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessageCreatedAdminIDInverseTable = "messages"
	// MessageCreatedAdminIDColumn is the table column denoting the message_created_admin_id relation/edge.
	MessageCreatedAdminIDColumn = "created_admin_id"
	// AdminQuestionBanksTable is the table the holds the admin_question_banks relation/edge.
	AdminQuestionBanksTable = "tk_question_banks"
	// AdminQuestionBanksInverseTable is the table name for the TkQuestionBank entity.
	// It exists in this package in order to avoid circular dependency with the "tkquestionbank" package.
	AdminQuestionBanksInverseTable = "tk_question_banks"
	// AdminQuestionBanksColumn is the table column denoting the admin_question_banks relation/edge.
	AdminQuestionBanksColumn = "created_admin_id"
	// AdminQuestionsTable is the table the holds the admin_Questions relation/edge.
	AdminQuestionsTable = "tk_questions"
	// AdminQuestionsInverseTable is the table name for the TkQuestion entity.
	// It exists in this package in order to avoid circular dependency with the "tkquestion" package.
	AdminQuestionsInverseTable = "tk_questions"
	// AdminQuestionsColumn is the table column denoting the admin_Questions relation/edge.
	AdminQuestionsColumn = "created_admin_id"
	// AdminExamPapersTable is the table the holds the admin_exam_papers relation/edge.
	AdminExamPapersTable = "tk_exam_papers"
	// AdminExamPapersInverseTable is the table name for the TkExamPaper entity.
	// It exists in this package in order to avoid circular dependency with the "tkexampaper" package.
	AdminExamPapersInverseTable = "tk_exam_papers"
	// AdminExamPapersColumn is the table column denoting the admin_exam_papers relation/edge.
	AdminExamPapersColumn = "created_admin_id"
	// AdminErrorFeedbacksTable is the table the holds the admin_error_feedbacks relation/edge.
	AdminErrorFeedbacksTable = "tk_question_error_feedbacks"
	// AdminErrorFeedbacksInverseTable is the table name for the TkQuestionErrorFeedback entity.
	// It exists in this package in order to avoid circular dependency with the "tkquestionerrorfeedback" package.
	AdminErrorFeedbacksInverseTable = "tk_question_error_feedbacks"
	// AdminErrorFeedbacksColumn is the table column denoting the admin_error_feedbacks relation/edge.
	AdminErrorFeedbacksColumn = "operator_admin_id"
	// CourseTable is the table the holds the course relation/edge.
	CourseTable = "kc_courses"
	// CourseInverseTable is the table name for the KcCourse entity.
	// It exists in this package in order to avoid circular dependency with the "kccourse" package.
	CourseInverseTable = "kc_courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "created_admin_id"
	// ClassAdminTable is the table the holds the class_admin relation/edge.
	ClassAdminTable = "kc_classes"
	// ClassAdminInverseTable is the table name for the KcClass entity.
	// It exists in this package in order to avoid circular dependency with the "kcclass" package.
	ClassAdminInverseTable = "kc_classes"
	// ClassAdminColumn is the table column denoting the class_admin relation/edge.
	ClassAdminColumn = "created_admin_id"
	// AdminAttachmentsTable is the table the holds the admin_attachments relation/edge.
	AdminAttachmentsTable = "admins"
	// AdminAttachmentsInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AdminAttachmentsInverseTable = "attachments"
	// AdminAttachmentsColumn is the table column denoting the admin_attachments relation/edge.
	AdminAttachmentsColumn = "admin_avatar_id"
)

// Columns holds all SQL columns for admin fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldPassword,
	FieldSalt,
	FieldBossAdminID,
	FieldRealName,
	FieldEmail,
	FieldPhone,
	FieldThirdOpenid,
	FieldPlatform,
	FieldIsActive,
	FieldStatus,
	FieldAdminAvatarID,
	FieldRemark,
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"admin_id", "role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "tkserver/internal/store/ent/runtime"
//
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultBossAdminID holds the default value on creation for the "boss_admin_id" field.
	DefaultBossAdminID int
	// DefaultRealName holds the default value on creation for the "real_name" field.
	DefaultRealName string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// DefaultThirdOpenid holds the default value on creation for the "third_openid" field.
	DefaultThirdOpenid string
	// DefaultPlatform holds the default value on creation for the "platform" field.
	DefaultPlatform uint8
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive uint8
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultRemark holds the default value on creation for the "Remark" field.
	DefaultRemark string
)

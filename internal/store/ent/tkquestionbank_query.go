// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/itemcategory"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkchapter"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkexamquestiontype"
	"tkserver/internal/store/ent/tkknowledgepoint"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkuserquestionbankrecord"
	"tkserver/internal/store/ent/tkuserquestionrecord"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionBankQuery is the builder for querying TkQuestionBank entities.
type TkQuestionBankQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TkQuestionBank
	// eager-loading edges.
	withItemCategory        *ItemCategoryQuery
	withAdmin               *AdminQuery
	withQuestionChapters    *TkChapterQuery
	withQuestionBankCourses *KcCourseQuery
	withQuestions           *TkQuestionQuery
	withExamPapers          *TkExamPaperQuery
	withExamQuestionTypes   *TkExamQuestionTypeQuery
	withUserQuestionBank    *TkUserQuestionBankRecordQuery
	withUserBankRecords     *TkUserQuestionRecordQuery
	withKnowledgePoints     *TkKnowledgePointQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TkQuestionBankQuery builder.
func (tqbq *TkQuestionBankQuery) Where(ps ...predicate.TkQuestionBank) *TkQuestionBankQuery {
	tqbq.predicates = append(tqbq.predicates, ps...)
	return tqbq
}

// Limit adds a limit step to the query.
func (tqbq *TkQuestionBankQuery) Limit(limit int) *TkQuestionBankQuery {
	tqbq.limit = &limit
	return tqbq
}

// Offset adds an offset step to the query.
func (tqbq *TkQuestionBankQuery) Offset(offset int) *TkQuestionBankQuery {
	tqbq.offset = &offset
	return tqbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tqbq *TkQuestionBankQuery) Unique(unique bool) *TkQuestionBankQuery {
	tqbq.unique = &unique
	return tqbq
}

// Order adds an order step to the query.
func (tqbq *TkQuestionBankQuery) Order(o ...OrderFunc) *TkQuestionBankQuery {
	tqbq.order = append(tqbq.order, o...)
	return tqbq
}

// QueryItemCategory chains the current query on the "item_category" edge.
func (tqbq *TkQuestionBankQuery) QueryItemCategory() *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestionbank.ItemCategoryTable, tkquestionbank.ItemCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdmin chains the current query on the "admin" edge.
func (tqbq *TkQuestionBankQuery) QueryAdmin() *AdminQuery {
	query := &AdminQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestionbank.AdminTable, tkquestionbank.AdminColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestionChapters chains the current query on the "question_chapters" edge.
func (tqbq *TkQuestionBankQuery) QueryQuestionChapters() *TkChapterQuery {
	query := &TkChapterQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(tkchapter.Table, tkchapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.QuestionChaptersTable, tkquestionbank.QuestionChaptersColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestionBankCourses chains the current query on the "question_bank_courses" edge.
func (tqbq *TkQuestionBankQuery) QueryQuestionBankCourses() *KcCourseQuery {
	query := &KcCourseQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.QuestionBankCoursesTable, tkquestionbank.QuestionBankCoursesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestions chains the current query on the "questions" edge.
func (tqbq *TkQuestionBankQuery) QueryQuestions() *TkQuestionQuery {
	query := &TkQuestionQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.QuestionsTable, tkquestionbank.QuestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamPapers chains the current query on the "exam_papers" edge.
func (tqbq *TkQuestionBankQuery) QueryExamPapers() *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.ExamPapersTable, tkquestionbank.ExamPapersColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamQuestionTypes chains the current query on the "exam_question_types" edge.
func (tqbq *TkQuestionBankQuery) QueryExamQuestionTypes() *TkExamQuestionTypeQuery {
	query := &TkExamQuestionTypeQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(tkexamquestiontype.Table, tkexamquestiontype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.ExamQuestionTypesTable, tkquestionbank.ExamQuestionTypesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserQuestionBank chains the current query on the "user_question_bank" edge.
func (tqbq *TkQuestionBankQuery) QueryUserQuestionBank() *TkUserQuestionBankRecordQuery {
	query := &TkUserQuestionBankRecordQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(tkuserquestionbankrecord.Table, tkuserquestionbankrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.UserQuestionBankTable, tkquestionbank.UserQuestionBankColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserBankRecords chains the current query on the "user_bank_records" edge.
func (tqbq *TkQuestionBankQuery) QueryUserBankRecords() *TkUserQuestionRecordQuery {
	query := &TkUserQuestionRecordQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.UserBankRecordsTable, tkquestionbank.UserBankRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKnowledgePoints chains the current query on the "knowledge_points" edge.
func (tqbq *TkQuestionBankQuery) QueryKnowledgePoints() *TkKnowledgePointQuery {
	query := &TkKnowledgePointQuery{config: tqbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestionbank.Table, tkquestionbank.FieldID, selector),
			sqlgraph.To(tkknowledgepoint.Table, tkknowledgepoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestionbank.KnowledgePointsTable, tkquestionbank.KnowledgePointsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TkQuestionBank entity from the query.
// Returns a *NotFoundError when no TkQuestionBank was found.
func (tqbq *TkQuestionBankQuery) First(ctx context.Context) (*TkQuestionBank, error) {
	nodes, err := tqbq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tkquestionbank.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tqbq *TkQuestionBankQuery) FirstX(ctx context.Context) *TkQuestionBank {
	node, err := tqbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TkQuestionBank ID from the query.
// Returns a *NotFoundError when no TkQuestionBank ID was found.
func (tqbq *TkQuestionBankQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tqbq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tkquestionbank.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tqbq *TkQuestionBankQuery) FirstIDX(ctx context.Context) int {
	id, err := tqbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TkQuestionBank entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TkQuestionBank entity is not found.
// Returns a *NotFoundError when no TkQuestionBank entities are found.
func (tqbq *TkQuestionBankQuery) Only(ctx context.Context) (*TkQuestionBank, error) {
	nodes, err := tqbq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tkquestionbank.Label}
	default:
		return nil, &NotSingularError{tkquestionbank.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tqbq *TkQuestionBankQuery) OnlyX(ctx context.Context) *TkQuestionBank {
	node, err := tqbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TkQuestionBank ID in the query.
// Returns a *NotSingularError when exactly one TkQuestionBank ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tqbq *TkQuestionBankQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tqbq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tkquestionbank.Label}
	default:
		err = &NotSingularError{tkquestionbank.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tqbq *TkQuestionBankQuery) OnlyIDX(ctx context.Context) int {
	id, err := tqbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TkQuestionBanks.
func (tqbq *TkQuestionBankQuery) All(ctx context.Context) ([]*TkQuestionBank, error) {
	if err := tqbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tqbq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tqbq *TkQuestionBankQuery) AllX(ctx context.Context) []*TkQuestionBank {
	nodes, err := tqbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TkQuestionBank IDs.
func (tqbq *TkQuestionBankQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tqbq.Select(tkquestionbank.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tqbq *TkQuestionBankQuery) IDsX(ctx context.Context) []int {
	ids, err := tqbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tqbq *TkQuestionBankQuery) Count(ctx context.Context) (int, error) {
	if err := tqbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tqbq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tqbq *TkQuestionBankQuery) CountX(ctx context.Context) int {
	count, err := tqbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tqbq *TkQuestionBankQuery) Exist(ctx context.Context) (bool, error) {
	if err := tqbq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tqbq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tqbq *TkQuestionBankQuery) ExistX(ctx context.Context) bool {
	exist, err := tqbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TkQuestionBankQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tqbq *TkQuestionBankQuery) Clone() *TkQuestionBankQuery {
	if tqbq == nil {
		return nil
	}
	return &TkQuestionBankQuery{
		config:                  tqbq.config,
		limit:                   tqbq.limit,
		offset:                  tqbq.offset,
		order:                   append([]OrderFunc{}, tqbq.order...),
		predicates:              append([]predicate.TkQuestionBank{}, tqbq.predicates...),
		withItemCategory:        tqbq.withItemCategory.Clone(),
		withAdmin:               tqbq.withAdmin.Clone(),
		withQuestionChapters:    tqbq.withQuestionChapters.Clone(),
		withQuestionBankCourses: tqbq.withQuestionBankCourses.Clone(),
		withQuestions:           tqbq.withQuestions.Clone(),
		withExamPapers:          tqbq.withExamPapers.Clone(),
		withExamQuestionTypes:   tqbq.withExamQuestionTypes.Clone(),
		withUserQuestionBank:    tqbq.withUserQuestionBank.Clone(),
		withUserBankRecords:     tqbq.withUserBankRecords.Clone(),
		withKnowledgePoints:     tqbq.withKnowledgePoints.Clone(),
		// clone intermediate query.
		sql:  tqbq.sql.Clone(),
		path: tqbq.path,
	}
}

// WithItemCategory tells the query-builder to eager-load the nodes that are connected to
// the "item_category" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithItemCategory(opts ...func(*ItemCategoryQuery)) *TkQuestionBankQuery {
	query := &ItemCategoryQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withItemCategory = query
	return tqbq
}

// WithAdmin tells the query-builder to eager-load the nodes that are connected to
// the "admin" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithAdmin(opts ...func(*AdminQuery)) *TkQuestionBankQuery {
	query := &AdminQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withAdmin = query
	return tqbq
}

// WithQuestionChapters tells the query-builder to eager-load the nodes that are connected to
// the "question_chapters" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithQuestionChapters(opts ...func(*TkChapterQuery)) *TkQuestionBankQuery {
	query := &TkChapterQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withQuestionChapters = query
	return tqbq
}

// WithQuestionBankCourses tells the query-builder to eager-load the nodes that are connected to
// the "question_bank_courses" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithQuestionBankCourses(opts ...func(*KcCourseQuery)) *TkQuestionBankQuery {
	query := &KcCourseQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withQuestionBankCourses = query
	return tqbq
}

// WithQuestions tells the query-builder to eager-load the nodes that are connected to
// the "questions" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithQuestions(opts ...func(*TkQuestionQuery)) *TkQuestionBankQuery {
	query := &TkQuestionQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withQuestions = query
	return tqbq
}

// WithExamPapers tells the query-builder to eager-load the nodes that are connected to
// the "exam_papers" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithExamPapers(opts ...func(*TkExamPaperQuery)) *TkQuestionBankQuery {
	query := &TkExamPaperQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withExamPapers = query
	return tqbq
}

// WithExamQuestionTypes tells the query-builder to eager-load the nodes that are connected to
// the "exam_question_types" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithExamQuestionTypes(opts ...func(*TkExamQuestionTypeQuery)) *TkQuestionBankQuery {
	query := &TkExamQuestionTypeQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withExamQuestionTypes = query
	return tqbq
}

// WithUserQuestionBank tells the query-builder to eager-load the nodes that are connected to
// the "user_question_bank" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithUserQuestionBank(opts ...func(*TkUserQuestionBankRecordQuery)) *TkQuestionBankQuery {
	query := &TkUserQuestionBankRecordQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withUserQuestionBank = query
	return tqbq
}

// WithUserBankRecords tells the query-builder to eager-load the nodes that are connected to
// the "user_bank_records" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithUserBankRecords(opts ...func(*TkUserQuestionRecordQuery)) *TkQuestionBankQuery {
	query := &TkUserQuestionRecordQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withUserBankRecords = query
	return tqbq
}

// WithKnowledgePoints tells the query-builder to eager-load the nodes that are connected to
// the "knowledge_points" edge. The optional arguments are used to configure the query builder of the edge.
func (tqbq *TkQuestionBankQuery) WithKnowledgePoints(opts ...func(*TkKnowledgePointQuery)) *TkQuestionBankQuery {
	query := &TkKnowledgePointQuery{config: tqbq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqbq.withKnowledgePoints = query
	return tqbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TkQuestionBank.Query().
//		GroupBy(tkquestionbank.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tqbq *TkQuestionBankQuery) GroupBy(field string, fields ...string) *TkQuestionBankGroupBy {
	group := &TkQuestionBankGroupBy{config: tqbq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tqbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tqbq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.TkQuestionBank.Query().
//		Select(tkquestionbank.FieldUUID).
//		Scan(ctx, &v)
//
func (tqbq *TkQuestionBankQuery) Select(field string, fields ...string) *TkQuestionBankSelect {
	tqbq.fields = append([]string{field}, fields...)
	return &TkQuestionBankSelect{TkQuestionBankQuery: tqbq}
}

func (tqbq *TkQuestionBankQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tqbq.fields {
		if !tkquestionbank.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tqbq.path != nil {
		prev, err := tqbq.path(ctx)
		if err != nil {
			return err
		}
		tqbq.sql = prev
	}
	return nil
}

func (tqbq *TkQuestionBankQuery) sqlAll(ctx context.Context) ([]*TkQuestionBank, error) {
	var (
		nodes       = []*TkQuestionBank{}
		_spec       = tqbq.querySpec()
		loadedTypes = [10]bool{
			tqbq.withItemCategory != nil,
			tqbq.withAdmin != nil,
			tqbq.withQuestionChapters != nil,
			tqbq.withQuestionBankCourses != nil,
			tqbq.withQuestions != nil,
			tqbq.withExamPapers != nil,
			tqbq.withExamQuestionTypes != nil,
			tqbq.withUserQuestionBank != nil,
			tqbq.withUserBankRecords != nil,
			tqbq.withKnowledgePoints != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TkQuestionBank{config: tqbq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tqbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tqbq.withItemCategory; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkQuestionBank)
		for i := range nodes {
			fk := nodes[i].ItemCategoryID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(itemcategory.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_category_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ItemCategory = n
			}
		}
	}

	if query := tqbq.withAdmin; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkQuestionBank)
		for i := range nodes {
			fk := nodes[i].CreatedAdminID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(admin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "created_admin_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Admin = n
			}
		}
	}

	if query := tqbq.withQuestionChapters; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestionBank)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.QuestionChapters = []*TkChapter{}
		}
		query.Where(predicate.TkChapter(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestionbank.QuestionChaptersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionBankID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.QuestionChapters = append(node.Edges.QuestionChapters, n)
		}
	}

	if query := tqbq.withQuestionBankCourses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestionBank)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.QuestionBankCourses = []*KcCourse{}
		}
		query.Where(predicate.KcCourse(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestionbank.QuestionBankCoursesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionBankID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.QuestionBankCourses = append(node.Edges.QuestionBankCourses, n)
		}
	}

	if query := tqbq.withQuestions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestionBank)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Questions = []*TkQuestion{}
		}
		query.Where(predicate.TkQuestion(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestionbank.QuestionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionBankID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Questions = append(node.Edges.Questions, n)
		}
	}

	if query := tqbq.withExamPapers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestionBank)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ExamPapers = []*TkExamPaper{}
		}
		query.Where(predicate.TkExamPaper(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestionbank.ExamPapersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionBankID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ExamPapers = append(node.Edges.ExamPapers, n)
		}
	}

	if query := tqbq.withExamQuestionTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestionBank)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ExamQuestionTypes = []*TkExamQuestionType{}
		}
		query.Where(predicate.TkExamQuestionType(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestionbank.ExamQuestionTypesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionBankID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ExamQuestionTypes = append(node.Edges.ExamQuestionTypes, n)
		}
	}

	if query := tqbq.withUserQuestionBank; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestionBank)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserQuestionBank = []*TkUserQuestionBankRecord{}
		}
		query.Where(predicate.TkUserQuestionBankRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestionbank.UserQuestionBankColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionBankID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserQuestionBank = append(node.Edges.UserQuestionBank, n)
		}
	}

	if query := tqbq.withUserBankRecords; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestionBank)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserBankRecords = []*TkUserQuestionRecord{}
		}
		query.Where(predicate.TkUserQuestionRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestionbank.UserBankRecordsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionBankID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserBankRecords = append(node.Edges.UserBankRecords, n)
		}
	}

	if query := tqbq.withKnowledgePoints; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestionBank)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.KnowledgePoints = []*TkKnowledgePoint{}
		}
		query.Where(predicate.TkKnowledgePoint(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestionbank.KnowledgePointsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionBankID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.KnowledgePoints = append(node.Edges.KnowledgePoints, n)
		}
	}

	return nodes, nil
}

func (tqbq *TkQuestionBankQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tqbq.querySpec()
	return sqlgraph.CountNodes(ctx, tqbq.driver, _spec)
}

func (tqbq *TkQuestionBankQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tqbq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tqbq *TkQuestionBankQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionbank.Table,
			Columns: tkquestionbank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionbank.FieldID,
			},
		},
		From:   tqbq.sql,
		Unique: true,
	}
	if unique := tqbq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tqbq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkquestionbank.FieldID)
		for i := range fields {
			if fields[i] != tkquestionbank.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tqbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tqbq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tqbq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tqbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tqbq *TkQuestionBankQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tqbq.driver.Dialect())
	t1 := builder.Table(tkquestionbank.Table)
	selector := builder.Select(t1.Columns(tkquestionbank.Columns...)...).From(t1)
	if tqbq.sql != nil {
		selector = tqbq.sql
		selector.Select(selector.Columns(tkquestionbank.Columns...)...)
	}
	for _, p := range tqbq.predicates {
		p(selector)
	}
	for _, p := range tqbq.order {
		p(selector)
	}
	if offset := tqbq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tqbq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TkQuestionBankGroupBy is the group-by builder for TkQuestionBank entities.
type TkQuestionBankGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tqbgb *TkQuestionBankGroupBy) Aggregate(fns ...AggregateFunc) *TkQuestionBankGroupBy {
	tqbgb.fns = append(tqbgb.fns, fns...)
	return tqbgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tqbgb *TkQuestionBankGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tqbgb.path(ctx)
	if err != nil {
		return err
	}
	tqbgb.sql = query
	return tqbgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tqbgb *TkQuestionBankGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tqbgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tqbgb *TkQuestionBankGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tqbgb.fields) > 1 {
		return nil, errors.New("ent: TkQuestionBankGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tqbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tqbgb *TkQuestionBankGroupBy) StringsX(ctx context.Context) []string {
	v, err := tqbgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tqbgb *TkQuestionBankGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tqbgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestionbank.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionBankGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tqbgb *TkQuestionBankGroupBy) StringX(ctx context.Context) string {
	v, err := tqbgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tqbgb *TkQuestionBankGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tqbgb.fields) > 1 {
		return nil, errors.New("ent: TkQuestionBankGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tqbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tqbgb *TkQuestionBankGroupBy) IntsX(ctx context.Context) []int {
	v, err := tqbgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tqbgb *TkQuestionBankGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tqbgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestionbank.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionBankGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tqbgb *TkQuestionBankGroupBy) IntX(ctx context.Context) int {
	v, err := tqbgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tqbgb *TkQuestionBankGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tqbgb.fields) > 1 {
		return nil, errors.New("ent: TkQuestionBankGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tqbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tqbgb *TkQuestionBankGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tqbgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tqbgb *TkQuestionBankGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tqbgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestionbank.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionBankGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tqbgb *TkQuestionBankGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tqbgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tqbgb *TkQuestionBankGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tqbgb.fields) > 1 {
		return nil, errors.New("ent: TkQuestionBankGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tqbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tqbgb *TkQuestionBankGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tqbgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tqbgb *TkQuestionBankGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tqbgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestionbank.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionBankGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tqbgb *TkQuestionBankGroupBy) BoolX(ctx context.Context) bool {
	v, err := tqbgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tqbgb *TkQuestionBankGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tqbgb.fields {
		if !tkquestionbank.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tqbgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tqbgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tqbgb *TkQuestionBankGroupBy) sqlQuery() *sql.Selector {
	selector := tqbgb.sql
	columns := make([]string, 0, len(tqbgb.fields)+len(tqbgb.fns))
	columns = append(columns, tqbgb.fields...)
	for _, fn := range tqbgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(tqbgb.fields...)
}

// TkQuestionBankSelect is the builder for selecting fields of TkQuestionBank entities.
type TkQuestionBankSelect struct {
	*TkQuestionBankQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tqbs *TkQuestionBankSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tqbs.prepareQuery(ctx); err != nil {
		return err
	}
	tqbs.sql = tqbs.TkQuestionBankQuery.sqlQuery(ctx)
	return tqbs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tqbs *TkQuestionBankSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tqbs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tqbs *TkQuestionBankSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tqbs.fields) > 1 {
		return nil, errors.New("ent: TkQuestionBankSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tqbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tqbs *TkQuestionBankSelect) StringsX(ctx context.Context) []string {
	v, err := tqbs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tqbs *TkQuestionBankSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tqbs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestionbank.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionBankSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tqbs *TkQuestionBankSelect) StringX(ctx context.Context) string {
	v, err := tqbs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tqbs *TkQuestionBankSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tqbs.fields) > 1 {
		return nil, errors.New("ent: TkQuestionBankSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tqbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tqbs *TkQuestionBankSelect) IntsX(ctx context.Context) []int {
	v, err := tqbs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tqbs *TkQuestionBankSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tqbs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestionbank.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionBankSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tqbs *TkQuestionBankSelect) IntX(ctx context.Context) int {
	v, err := tqbs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tqbs *TkQuestionBankSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tqbs.fields) > 1 {
		return nil, errors.New("ent: TkQuestionBankSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tqbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tqbs *TkQuestionBankSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tqbs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tqbs *TkQuestionBankSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tqbs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestionbank.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionBankSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tqbs *TkQuestionBankSelect) Float64X(ctx context.Context) float64 {
	v, err := tqbs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tqbs *TkQuestionBankSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tqbs.fields) > 1 {
		return nil, errors.New("ent: TkQuestionBankSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tqbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tqbs *TkQuestionBankSelect) BoolsX(ctx context.Context) []bool {
	v, err := tqbs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tqbs *TkQuestionBankSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tqbs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestionbank.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionBankSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tqbs *TkQuestionBankSelect) BoolX(ctx context.Context) bool {
	v, err := tqbs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tqbs *TkQuestionBankSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tqbs.sqlQuery().Query()
	if err := tqbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tqbs *TkQuestionBankSelect) sqlQuery() sql.Querier {
	selector := tqbs.sql
	selector.Select(selector.Columns(tqbs.fields...)...)
	return selector
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/adminloginlog"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminLoginLogQuery is the builder for querying AdminLoginLog entities.
type AdminLoginLogQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AdminLoginLog
	// eager-loading edges.
	withAdmin *AdminQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdminLoginLogQuery builder.
func (allq *AdminLoginLogQuery) Where(ps ...predicate.AdminLoginLog) *AdminLoginLogQuery {
	allq.predicates = append(allq.predicates, ps...)
	return allq
}

// Limit adds a limit step to the query.
func (allq *AdminLoginLogQuery) Limit(limit int) *AdminLoginLogQuery {
	allq.limit = &limit
	return allq
}

// Offset adds an offset step to the query.
func (allq *AdminLoginLogQuery) Offset(offset int) *AdminLoginLogQuery {
	allq.offset = &offset
	return allq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (allq *AdminLoginLogQuery) Unique(unique bool) *AdminLoginLogQuery {
	allq.unique = &unique
	return allq
}

// Order adds an order step to the query.
func (allq *AdminLoginLogQuery) Order(o ...OrderFunc) *AdminLoginLogQuery {
	allq.order = append(allq.order, o...)
	return allq
}

// QueryAdmin chains the current query on the "admin" edge.
func (allq *AdminLoginLogQuery) QueryAdmin() *AdminQuery {
	query := &AdminQuery{config: allq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := allq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := allq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adminloginlog.Table, adminloginlog.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminloginlog.AdminTable, adminloginlog.AdminColumn),
		)
		fromU = sqlgraph.SetNeighbors(allq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AdminLoginLog entity from the query.
// Returns a *NotFoundError when no AdminLoginLog was found.
func (allq *AdminLoginLogQuery) First(ctx context.Context) (*AdminLoginLog, error) {
	nodes, err := allq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{adminloginlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (allq *AdminLoginLogQuery) FirstX(ctx context.Context) *AdminLoginLog {
	node, err := allq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AdminLoginLog ID from the query.
// Returns a *NotFoundError when no AdminLoginLog ID was found.
func (allq *AdminLoginLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = allq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{adminloginlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (allq *AdminLoginLogQuery) FirstIDX(ctx context.Context) int {
	id, err := allq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AdminLoginLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AdminLoginLog entity is not found.
// Returns a *NotFoundError when no AdminLoginLog entities are found.
func (allq *AdminLoginLogQuery) Only(ctx context.Context) (*AdminLoginLog, error) {
	nodes, err := allq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{adminloginlog.Label}
	default:
		return nil, &NotSingularError{adminloginlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (allq *AdminLoginLogQuery) OnlyX(ctx context.Context) *AdminLoginLog {
	node, err := allq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AdminLoginLog ID in the query.
// Returns a *NotSingularError when exactly one AdminLoginLog ID is not found.
// Returns a *NotFoundError when no entities are found.
func (allq *AdminLoginLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = allq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{adminloginlog.Label}
	default:
		err = &NotSingularError{adminloginlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (allq *AdminLoginLogQuery) OnlyIDX(ctx context.Context) int {
	id, err := allq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AdminLoginLogs.
func (allq *AdminLoginLogQuery) All(ctx context.Context) ([]*AdminLoginLog, error) {
	if err := allq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return allq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (allq *AdminLoginLogQuery) AllX(ctx context.Context) []*AdminLoginLog {
	nodes, err := allq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AdminLoginLog IDs.
func (allq *AdminLoginLogQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := allq.Select(adminloginlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (allq *AdminLoginLogQuery) IDsX(ctx context.Context) []int {
	ids, err := allq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (allq *AdminLoginLogQuery) Count(ctx context.Context) (int, error) {
	if err := allq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return allq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (allq *AdminLoginLogQuery) CountX(ctx context.Context) int {
	count, err := allq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (allq *AdminLoginLogQuery) Exist(ctx context.Context) (bool, error) {
	if err := allq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return allq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (allq *AdminLoginLogQuery) ExistX(ctx context.Context) bool {
	exist, err := allq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdminLoginLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (allq *AdminLoginLogQuery) Clone() *AdminLoginLogQuery {
	if allq == nil {
		return nil
	}
	return &AdminLoginLogQuery{
		config:     allq.config,
		limit:      allq.limit,
		offset:     allq.offset,
		order:      append([]OrderFunc{}, allq.order...),
		predicates: append([]predicate.AdminLoginLog{}, allq.predicates...),
		withAdmin:  allq.withAdmin.Clone(),
		// clone intermediate query.
		sql:  allq.sql.Clone(),
		path: allq.path,
	}
}

// WithAdmin tells the query-builder to eager-load the nodes that are connected to
// the "admin" edge. The optional arguments are used to configure the query builder of the edge.
func (allq *AdminLoginLogQuery) WithAdmin(opts ...func(*AdminQuery)) *AdminLoginLogQuery {
	query := &AdminQuery{config: allq.config}
	for _, opt := range opts {
		opt(query)
	}
	allq.withAdmin = query
	return allq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AdminLoginLog.Query().
//		GroupBy(adminloginlog.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (allq *AdminLoginLogQuery) GroupBy(field string, fields ...string) *AdminLoginLogGroupBy {
	group := &AdminLoginLogGroupBy{config: allq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := allq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return allq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.AdminLoginLog.Query().
//		Select(adminloginlog.FieldUUID).
//		Scan(ctx, &v)
//
func (allq *AdminLoginLogQuery) Select(field string, fields ...string) *AdminLoginLogSelect {
	allq.fields = append([]string{field}, fields...)
	return &AdminLoginLogSelect{AdminLoginLogQuery: allq}
}

func (allq *AdminLoginLogQuery) prepareQuery(ctx context.Context) error {
	for _, f := range allq.fields {
		if !adminloginlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if allq.path != nil {
		prev, err := allq.path(ctx)
		if err != nil {
			return err
		}
		allq.sql = prev
	}
	return nil
}

func (allq *AdminLoginLogQuery) sqlAll(ctx context.Context) ([]*AdminLoginLog, error) {
	var (
		nodes       = []*AdminLoginLog{}
		_spec       = allq.querySpec()
		loadedTypes = [1]bool{
			allq.withAdmin != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AdminLoginLog{config: allq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, allq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := allq.withAdmin; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AdminLoginLog)
		for i := range nodes {
			fk := nodes[i].AdminID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(admin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "admin_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Admin = n
			}
		}
	}

	return nodes, nil
}

func (allq *AdminLoginLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := allq.querySpec()
	return sqlgraph.CountNodes(ctx, allq.driver, _spec)
}

func (allq *AdminLoginLogQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := allq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (allq *AdminLoginLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminloginlog.Table,
			Columns: adminloginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminloginlog.FieldID,
			},
		},
		From:   allq.sql,
		Unique: true,
	}
	if unique := allq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := allq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminloginlog.FieldID)
		for i := range fields {
			if fields[i] != adminloginlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := allq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := allq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := allq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := allq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (allq *AdminLoginLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(allq.driver.Dialect())
	t1 := builder.Table(adminloginlog.Table)
	selector := builder.Select(t1.Columns(adminloginlog.Columns...)...).From(t1)
	if allq.sql != nil {
		selector = allq.sql
		selector.Select(selector.Columns(adminloginlog.Columns...)...)
	}
	for _, p := range allq.predicates {
		p(selector)
	}
	for _, p := range allq.order {
		p(selector)
	}
	if offset := allq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := allq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AdminLoginLogGroupBy is the group-by builder for AdminLoginLog entities.
type AdminLoginLogGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (allgb *AdminLoginLogGroupBy) Aggregate(fns ...AggregateFunc) *AdminLoginLogGroupBy {
	allgb.fns = append(allgb.fns, fns...)
	return allgb
}

// Scan applies the group-by query and scans the result into the given value.
func (allgb *AdminLoginLogGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := allgb.path(ctx)
	if err != nil {
		return err
	}
	allgb.sql = query
	return allgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (allgb *AdminLoginLogGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := allgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (allgb *AdminLoginLogGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(allgb.fields) > 1 {
		return nil, errors.New("ent: AdminLoginLogGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := allgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (allgb *AdminLoginLogGroupBy) StringsX(ctx context.Context) []string {
	v, err := allgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (allgb *AdminLoginLogGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = allgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminloginlog.Label}
	default:
		err = fmt.Errorf("ent: AdminLoginLogGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (allgb *AdminLoginLogGroupBy) StringX(ctx context.Context) string {
	v, err := allgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (allgb *AdminLoginLogGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(allgb.fields) > 1 {
		return nil, errors.New("ent: AdminLoginLogGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := allgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (allgb *AdminLoginLogGroupBy) IntsX(ctx context.Context) []int {
	v, err := allgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (allgb *AdminLoginLogGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = allgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminloginlog.Label}
	default:
		err = fmt.Errorf("ent: AdminLoginLogGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (allgb *AdminLoginLogGroupBy) IntX(ctx context.Context) int {
	v, err := allgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (allgb *AdminLoginLogGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(allgb.fields) > 1 {
		return nil, errors.New("ent: AdminLoginLogGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := allgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (allgb *AdminLoginLogGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := allgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (allgb *AdminLoginLogGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = allgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminloginlog.Label}
	default:
		err = fmt.Errorf("ent: AdminLoginLogGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (allgb *AdminLoginLogGroupBy) Float64X(ctx context.Context) float64 {
	v, err := allgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (allgb *AdminLoginLogGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(allgb.fields) > 1 {
		return nil, errors.New("ent: AdminLoginLogGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := allgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (allgb *AdminLoginLogGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := allgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (allgb *AdminLoginLogGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = allgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminloginlog.Label}
	default:
		err = fmt.Errorf("ent: AdminLoginLogGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (allgb *AdminLoginLogGroupBy) BoolX(ctx context.Context) bool {
	v, err := allgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (allgb *AdminLoginLogGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range allgb.fields {
		if !adminloginlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := allgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := allgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (allgb *AdminLoginLogGroupBy) sqlQuery() *sql.Selector {
	selector := allgb.sql
	columns := make([]string, 0, len(allgb.fields)+len(allgb.fns))
	columns = append(columns, allgb.fields...)
	for _, fn := range allgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(allgb.fields...)
}

// AdminLoginLogSelect is the builder for selecting fields of AdminLoginLog entities.
type AdminLoginLogSelect struct {
	*AdminLoginLogQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (alls *AdminLoginLogSelect) Scan(ctx context.Context, v interface{}) error {
	if err := alls.prepareQuery(ctx); err != nil {
		return err
	}
	alls.sql = alls.AdminLoginLogQuery.sqlQuery(ctx)
	return alls.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (alls *AdminLoginLogSelect) ScanX(ctx context.Context, v interface{}) {
	if err := alls.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (alls *AdminLoginLogSelect) Strings(ctx context.Context) ([]string, error) {
	if len(alls.fields) > 1 {
		return nil, errors.New("ent: AdminLoginLogSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := alls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (alls *AdminLoginLogSelect) StringsX(ctx context.Context) []string {
	v, err := alls.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (alls *AdminLoginLogSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = alls.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminloginlog.Label}
	default:
		err = fmt.Errorf("ent: AdminLoginLogSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (alls *AdminLoginLogSelect) StringX(ctx context.Context) string {
	v, err := alls.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (alls *AdminLoginLogSelect) Ints(ctx context.Context) ([]int, error) {
	if len(alls.fields) > 1 {
		return nil, errors.New("ent: AdminLoginLogSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := alls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (alls *AdminLoginLogSelect) IntsX(ctx context.Context) []int {
	v, err := alls.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (alls *AdminLoginLogSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = alls.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminloginlog.Label}
	default:
		err = fmt.Errorf("ent: AdminLoginLogSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (alls *AdminLoginLogSelect) IntX(ctx context.Context) int {
	v, err := alls.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (alls *AdminLoginLogSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(alls.fields) > 1 {
		return nil, errors.New("ent: AdminLoginLogSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := alls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (alls *AdminLoginLogSelect) Float64sX(ctx context.Context) []float64 {
	v, err := alls.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (alls *AdminLoginLogSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = alls.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminloginlog.Label}
	default:
		err = fmt.Errorf("ent: AdminLoginLogSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (alls *AdminLoginLogSelect) Float64X(ctx context.Context) float64 {
	v, err := alls.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (alls *AdminLoginLogSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(alls.fields) > 1 {
		return nil, errors.New("ent: AdminLoginLogSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := alls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (alls *AdminLoginLogSelect) BoolsX(ctx context.Context) []bool {
	v, err := alls.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (alls *AdminLoginLogSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = alls.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminloginlog.Label}
	default:
		err = fmt.Errorf("ent: AdminLoginLogSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (alls *AdminLoginLogSelect) BoolX(ctx context.Context) bool {
	v, err := alls.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (alls *AdminLoginLogSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := alls.sqlQuery().Query()
	if err := alls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (alls *AdminLoginLogSelect) sqlQuery() sql.Querier {
	selector := alls.sql
	selector.Select(selector.Columns(alls.fields...)...)
	return selector
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/advertise"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kcsmallcategoryattachment"
	"tkserver/internal/store/ent/kcvideouploadtask"
	"tkserver/internal/store/ent/majordetail"
	"tkserver/internal/store/ent/message"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/shareposter"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/useraskanswerattachment"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentUpdate is the builder for updating Attachment entities.
type AttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *AttachmentMutation
}

// Where adds a new predicate for the AttachmentUpdate builder.
func (au *AttachmentUpdate) Where(ps ...predicate.Attachment) *AttachmentUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetUUID sets the "uuid" field.
func (au *AttachmentUpdate) SetUUID(s string) *AttachmentUpdate {
	au.mutation.SetUUID(s)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AttachmentUpdate) SetUpdatedAt(t time.Time) *AttachmentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AttachmentUpdate) ClearUpdatedAt() *AttachmentUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AttachmentUpdate) SetDeletedAt(t time.Time) *AttachmentUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableDeletedAt(t *time.Time) *AttachmentUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AttachmentUpdate) ClearDeletedAt() *AttachmentUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetFilename sets the "filename" field.
func (au *AttachmentUpdate) SetFilename(s string) *AttachmentUpdate {
	au.mutation.SetFilename(s)
	return au
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableFilename(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetFilename(*s)
	}
	return au
}

// SetFileSize sets the "file_size" field.
func (au *AttachmentUpdate) SetFileSize(u uint32) *AttachmentUpdate {
	au.mutation.ResetFileSize()
	au.mutation.SetFileSize(u)
	return au
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableFileSize(u *uint32) *AttachmentUpdate {
	if u != nil {
		au.SetFileSize(*u)
	}
	return au
}

// AddFileSize adds u to the "file_size" field.
func (au *AttachmentUpdate) AddFileSize(u uint32) *AttachmentUpdate {
	au.mutation.AddFileSize(u)
	return au
}

// SetMimeType sets the "mime_type" field.
func (au *AttachmentUpdate) SetMimeType(s string) *AttachmentUpdate {
	au.mutation.SetMimeType(s)
	return au
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableMimeType(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetMimeType(*s)
	}
	return au
}

// SetUserID sets the "user_id" field.
func (au *AttachmentUpdate) SetUserID(i int) *AttachmentUpdate {
	au.mutation.ResetUserID()
	au.mutation.SetUserID(i)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableUserID(i *int) *AttachmentUpdate {
	if i != nil {
		au.SetUserID(*i)
	}
	return au
}

// AddUserID adds i to the "user_id" field.
func (au *AttachmentUpdate) AddUserID(i int) *AttachmentUpdate {
	au.mutation.AddUserID(i)
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AttachmentUpdate) ClearUserID() *AttachmentUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetAdminID sets the "admin_id" field.
func (au *AttachmentUpdate) SetAdminID(i int) *AttachmentUpdate {
	au.mutation.ResetAdminID()
	au.mutation.SetAdminID(i)
	return au
}

// SetNillableAdminID sets the "admin_id" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableAdminID(i *int) *AttachmentUpdate {
	if i != nil {
		au.SetAdminID(*i)
	}
	return au
}

// AddAdminID adds i to the "admin_id" field.
func (au *AttachmentUpdate) AddAdminID(i int) *AttachmentUpdate {
	au.mutation.AddAdminID(i)
	return au
}

// ClearAdminID clears the value of the "admin_id" field.
func (au *AttachmentUpdate) ClearAdminID() *AttachmentUpdate {
	au.mutation.ClearAdminID()
	return au
}

// AddMajorDetailCoverImgIDs adds the "major_detail_cover_img" edge to the MajorDetail entity by IDs.
func (au *AttachmentUpdate) AddMajorDetailCoverImgIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddMajorDetailCoverImgIDs(ids...)
	return au
}

// AddMajorDetailCoverImg adds the "major_detail_cover_img" edges to the MajorDetail entity.
func (au *AttachmentUpdate) AddMajorDetailCoverImg(m ...*MajorDetail) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMajorDetailCoverImgIDs(ids...)
}

// AddMajorDetailSubjectImgIDs adds the "major_detail_subject_img" edge to the MajorDetail entity by IDs.
func (au *AttachmentUpdate) AddMajorDetailSubjectImgIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddMajorDetailSubjectImgIDs(ids...)
	return au
}

// AddMajorDetailSubjectImg adds the "major_detail_subject_img" edges to the MajorDetail entity.
func (au *AttachmentUpdate) AddMajorDetailSubjectImg(m ...*MajorDetail) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMajorDetailSubjectImgIDs(ids...)
}

// AddMajorTeacherAttachmentIDs adds the "major_teacher_attachment" edge to the MajorDetail entity by IDs.
func (au *AttachmentUpdate) AddMajorTeacherAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddMajorTeacherAttachmentIDs(ids...)
	return au
}

// AddMajorTeacherAttachment adds the "major_teacher_attachment" edges to the MajorDetail entity.
func (au *AttachmentUpdate) AddMajorTeacherAttachment(m ...*MajorDetail) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMajorTeacherAttachmentIDs(ids...)
}

// AddMajorServiceAttachmentIDs adds the "major_service_attachment" edge to the MajorDetail entity by IDs.
func (au *AttachmentUpdate) AddMajorServiceAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddMajorServiceAttachmentIDs(ids...)
	return au
}

// AddMajorServiceAttachment adds the "major_service_attachment" edges to the MajorDetail entity.
func (au *AttachmentUpdate) AddMajorServiceAttachment(m ...*MajorDetail) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMajorServiceAttachmentIDs(ids...)
}

// AddAdvertiseIDs adds the "advertise" edge to the Advertise entity by IDs.
func (au *AttachmentUpdate) AddAdvertiseIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddAdvertiseIDs(ids...)
	return au
}

// AddAdvertise adds the "advertise" edges to the Advertise entity.
func (au *AttachmentUpdate) AddAdvertise(a ...*Advertise) *AttachmentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdvertiseIDs(ids...)
}

// AddMessageAttachmentIDs adds the "message_attachment" edge to the Message entity by IDs.
func (au *AttachmentUpdate) AddMessageAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddMessageAttachmentIDs(ids...)
	return au
}

// AddMessageAttachment adds the "message_attachment" edges to the Message entity.
func (au *AttachmentUpdate) AddMessageAttachment(m ...*Message) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMessageAttachmentIDs(ids...)
}

// AddSharePosterAttachmentIDs adds the "share_poster_attachments" edge to the SharePoster entity by IDs.
func (au *AttachmentUpdate) AddSharePosterAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddSharePosterAttachmentIDs(ids...)
	return au
}

// AddSharePosterAttachments adds the "share_poster_attachments" edges to the SharePoster entity.
func (au *AttachmentUpdate) AddSharePosterAttachments(s ...*SharePoster) *AttachmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSharePosterAttachmentIDs(ids...)
}

// AddTeacherAttachmentIDs adds the "teacher_attachments" edge to the Teacher entity by IDs.
func (au *AttachmentUpdate) AddTeacherAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddTeacherAttachmentIDs(ids...)
	return au
}

// AddTeacherAttachments adds the "teacher_attachments" edges to the Teacher entity.
func (au *AttachmentUpdate) AddTeacherAttachments(t ...*Teacher) *AttachmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTeacherAttachmentIDs(ids...)
}

// SetAdminImgIDID sets the "admin_img_id" edge to the Admin entity by ID.
func (au *AttachmentUpdate) SetAdminImgIDID(id int) *AttachmentUpdate {
	au.mutation.SetAdminImgIDID(id)
	return au
}

// SetNillableAdminImgIDID sets the "admin_img_id" edge to the Admin entity by ID if the given value is not nil.
func (au *AttachmentUpdate) SetNillableAdminImgIDID(id *int) *AttachmentUpdate {
	if id != nil {
		au = au.SetAdminImgIDID(*id)
	}
	return au
}

// SetAdminImgID sets the "admin_img_id" edge to the Admin entity.
func (au *AttachmentUpdate) SetAdminImgID(a *Admin) *AttachmentUpdate {
	return au.SetAdminImgIDID(a.ID)
}

// AddSmallCategoryAttachmentIDs adds the "small_category_attachments" edge to the KcSmallCategoryAttachment entity by IDs.
func (au *AttachmentUpdate) AddSmallCategoryAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddSmallCategoryAttachmentIDs(ids...)
	return au
}

// AddSmallCategoryAttachments adds the "small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (au *AttachmentUpdate) AddSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *AttachmentUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.AddSmallCategoryAttachmentIDs(ids...)
}

// AddCourseAttachmentIDs adds the "course_attachments" edge to the KcCourse entity by IDs.
func (au *AttachmentUpdate) AddCourseAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddCourseAttachmentIDs(ids...)
	return au
}

// AddCourseAttachments adds the "course_attachments" edges to the KcCourse entity.
func (au *AttachmentUpdate) AddCourseAttachments(k ...*KcCourse) *AttachmentUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.AddCourseAttachmentIDs(ids...)
}

// AddClassCoverAttachmentIDs adds the "class_cover_attachments" edge to the KcClass entity by IDs.
func (au *AttachmentUpdate) AddClassCoverAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddClassCoverAttachmentIDs(ids...)
	return au
}

// AddClassCoverAttachments adds the "class_cover_attachments" edges to the KcClass entity.
func (au *AttachmentUpdate) AddClassCoverAttachments(k ...*KcClass) *AttachmentUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.AddClassCoverAttachmentIDs(ids...)
}

// SetCoursewareAttachmentID sets the "courseware_attachment" edge to the KcCourseSmallCategory entity by ID.
func (au *AttachmentUpdate) SetCoursewareAttachmentID(id int) *AttachmentUpdate {
	au.mutation.SetCoursewareAttachmentID(id)
	return au
}

// SetNillableCoursewareAttachmentID sets the "courseware_attachment" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (au *AttachmentUpdate) SetNillableCoursewareAttachmentID(id *int) *AttachmentUpdate {
	if id != nil {
		au = au.SetCoursewareAttachmentID(*id)
	}
	return au
}

// SetCoursewareAttachment sets the "courseware_attachment" edge to the KcCourseSmallCategory entity.
func (au *AttachmentUpdate) SetCoursewareAttachment(k *KcCourseSmallCategory) *AttachmentUpdate {
	return au.SetCoursewareAttachmentID(k.ID)
}

// SetOrderAttachmentID sets the "order_attachment" edge to the KcCourseSmallCategory entity by ID.
func (au *AttachmentUpdate) SetOrderAttachmentID(id int) *AttachmentUpdate {
	au.mutation.SetOrderAttachmentID(id)
	return au
}

// SetNillableOrderAttachmentID sets the "order_attachment" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (au *AttachmentUpdate) SetNillableOrderAttachmentID(id *int) *AttachmentUpdate {
	if id != nil {
		au = au.SetOrderAttachmentID(*id)
	}
	return au
}

// SetOrderAttachment sets the "order_attachment" edge to the KcCourseSmallCategory entity.
func (au *AttachmentUpdate) SetOrderAttachment(k *KcCourseSmallCategory) *AttachmentUpdate {
	return au.SetOrderAttachmentID(k.ID)
}

// AddVideoTaskAttachmentIDs adds the "video_task_attachment" edge to the KcVideoUploadTask entity by IDs.
func (au *AttachmentUpdate) AddVideoTaskAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddVideoTaskAttachmentIDs(ids...)
	return au
}

// AddVideoTaskAttachment adds the "video_task_attachment" edges to the KcVideoUploadTask entity.
func (au *AttachmentUpdate) AddVideoTaskAttachment(k ...*KcVideoUploadTask) *AttachmentUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.AddVideoTaskAttachmentIDs(ids...)
}

// AddAskAttachmentIDs adds the "ask_attachments" edge to the UserAskAnswerAttachment entity by IDs.
func (au *AttachmentUpdate) AddAskAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.AddAskAttachmentIDs(ids...)
	return au
}

// AddAskAttachments adds the "ask_attachments" edges to the UserAskAnswerAttachment entity.
func (au *AttachmentUpdate) AddAskAttachments(u ...*UserAskAnswerAttachment) *AttachmentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddAskAttachmentIDs(ids...)
}

// Mutation returns the AttachmentMutation object of the builder.
func (au *AttachmentUpdate) Mutation() *AttachmentMutation {
	return au.mutation
}

// ClearMajorDetailCoverImg clears all "major_detail_cover_img" edges to the MajorDetail entity.
func (au *AttachmentUpdate) ClearMajorDetailCoverImg() *AttachmentUpdate {
	au.mutation.ClearMajorDetailCoverImg()
	return au
}

// RemoveMajorDetailCoverImgIDs removes the "major_detail_cover_img" edge to MajorDetail entities by IDs.
func (au *AttachmentUpdate) RemoveMajorDetailCoverImgIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveMajorDetailCoverImgIDs(ids...)
	return au
}

// RemoveMajorDetailCoverImg removes "major_detail_cover_img" edges to MajorDetail entities.
func (au *AttachmentUpdate) RemoveMajorDetailCoverImg(m ...*MajorDetail) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMajorDetailCoverImgIDs(ids...)
}

// ClearMajorDetailSubjectImg clears all "major_detail_subject_img" edges to the MajorDetail entity.
func (au *AttachmentUpdate) ClearMajorDetailSubjectImg() *AttachmentUpdate {
	au.mutation.ClearMajorDetailSubjectImg()
	return au
}

// RemoveMajorDetailSubjectImgIDs removes the "major_detail_subject_img" edge to MajorDetail entities by IDs.
func (au *AttachmentUpdate) RemoveMajorDetailSubjectImgIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveMajorDetailSubjectImgIDs(ids...)
	return au
}

// RemoveMajorDetailSubjectImg removes "major_detail_subject_img" edges to MajorDetail entities.
func (au *AttachmentUpdate) RemoveMajorDetailSubjectImg(m ...*MajorDetail) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMajorDetailSubjectImgIDs(ids...)
}

// ClearMajorTeacherAttachment clears all "major_teacher_attachment" edges to the MajorDetail entity.
func (au *AttachmentUpdate) ClearMajorTeacherAttachment() *AttachmentUpdate {
	au.mutation.ClearMajorTeacherAttachment()
	return au
}

// RemoveMajorTeacherAttachmentIDs removes the "major_teacher_attachment" edge to MajorDetail entities by IDs.
func (au *AttachmentUpdate) RemoveMajorTeacherAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveMajorTeacherAttachmentIDs(ids...)
	return au
}

// RemoveMajorTeacherAttachment removes "major_teacher_attachment" edges to MajorDetail entities.
func (au *AttachmentUpdate) RemoveMajorTeacherAttachment(m ...*MajorDetail) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMajorTeacherAttachmentIDs(ids...)
}

// ClearMajorServiceAttachment clears all "major_service_attachment" edges to the MajorDetail entity.
func (au *AttachmentUpdate) ClearMajorServiceAttachment() *AttachmentUpdate {
	au.mutation.ClearMajorServiceAttachment()
	return au
}

// RemoveMajorServiceAttachmentIDs removes the "major_service_attachment" edge to MajorDetail entities by IDs.
func (au *AttachmentUpdate) RemoveMajorServiceAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveMajorServiceAttachmentIDs(ids...)
	return au
}

// RemoveMajorServiceAttachment removes "major_service_attachment" edges to MajorDetail entities.
func (au *AttachmentUpdate) RemoveMajorServiceAttachment(m ...*MajorDetail) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMajorServiceAttachmentIDs(ids...)
}

// ClearAdvertise clears all "advertise" edges to the Advertise entity.
func (au *AttachmentUpdate) ClearAdvertise() *AttachmentUpdate {
	au.mutation.ClearAdvertise()
	return au
}

// RemoveAdvertiseIDs removes the "advertise" edge to Advertise entities by IDs.
func (au *AttachmentUpdate) RemoveAdvertiseIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveAdvertiseIDs(ids...)
	return au
}

// RemoveAdvertise removes "advertise" edges to Advertise entities.
func (au *AttachmentUpdate) RemoveAdvertise(a ...*Advertise) *AttachmentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdvertiseIDs(ids...)
}

// ClearMessageAttachment clears all "message_attachment" edges to the Message entity.
func (au *AttachmentUpdate) ClearMessageAttachment() *AttachmentUpdate {
	au.mutation.ClearMessageAttachment()
	return au
}

// RemoveMessageAttachmentIDs removes the "message_attachment" edge to Message entities by IDs.
func (au *AttachmentUpdate) RemoveMessageAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveMessageAttachmentIDs(ids...)
	return au
}

// RemoveMessageAttachment removes "message_attachment" edges to Message entities.
func (au *AttachmentUpdate) RemoveMessageAttachment(m ...*Message) *AttachmentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMessageAttachmentIDs(ids...)
}

// ClearSharePosterAttachments clears all "share_poster_attachments" edges to the SharePoster entity.
func (au *AttachmentUpdate) ClearSharePosterAttachments() *AttachmentUpdate {
	au.mutation.ClearSharePosterAttachments()
	return au
}

// RemoveSharePosterAttachmentIDs removes the "share_poster_attachments" edge to SharePoster entities by IDs.
func (au *AttachmentUpdate) RemoveSharePosterAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveSharePosterAttachmentIDs(ids...)
	return au
}

// RemoveSharePosterAttachments removes "share_poster_attachments" edges to SharePoster entities.
func (au *AttachmentUpdate) RemoveSharePosterAttachments(s ...*SharePoster) *AttachmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSharePosterAttachmentIDs(ids...)
}

// ClearTeacherAttachments clears all "teacher_attachments" edges to the Teacher entity.
func (au *AttachmentUpdate) ClearTeacherAttachments() *AttachmentUpdate {
	au.mutation.ClearTeacherAttachments()
	return au
}

// RemoveTeacherAttachmentIDs removes the "teacher_attachments" edge to Teacher entities by IDs.
func (au *AttachmentUpdate) RemoveTeacherAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveTeacherAttachmentIDs(ids...)
	return au
}

// RemoveTeacherAttachments removes "teacher_attachments" edges to Teacher entities.
func (au *AttachmentUpdate) RemoveTeacherAttachments(t ...*Teacher) *AttachmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTeacherAttachmentIDs(ids...)
}

// ClearAdminImgID clears the "admin_img_id" edge to the Admin entity.
func (au *AttachmentUpdate) ClearAdminImgID() *AttachmentUpdate {
	au.mutation.ClearAdminImgID()
	return au
}

// ClearSmallCategoryAttachments clears all "small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (au *AttachmentUpdate) ClearSmallCategoryAttachments() *AttachmentUpdate {
	au.mutation.ClearSmallCategoryAttachments()
	return au
}

// RemoveSmallCategoryAttachmentIDs removes the "small_category_attachments" edge to KcSmallCategoryAttachment entities by IDs.
func (au *AttachmentUpdate) RemoveSmallCategoryAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveSmallCategoryAttachmentIDs(ids...)
	return au
}

// RemoveSmallCategoryAttachments removes "small_category_attachments" edges to KcSmallCategoryAttachment entities.
func (au *AttachmentUpdate) RemoveSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *AttachmentUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.RemoveSmallCategoryAttachmentIDs(ids...)
}

// ClearCourseAttachments clears all "course_attachments" edges to the KcCourse entity.
func (au *AttachmentUpdate) ClearCourseAttachments() *AttachmentUpdate {
	au.mutation.ClearCourseAttachments()
	return au
}

// RemoveCourseAttachmentIDs removes the "course_attachments" edge to KcCourse entities by IDs.
func (au *AttachmentUpdate) RemoveCourseAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveCourseAttachmentIDs(ids...)
	return au
}

// RemoveCourseAttachments removes "course_attachments" edges to KcCourse entities.
func (au *AttachmentUpdate) RemoveCourseAttachments(k ...*KcCourse) *AttachmentUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.RemoveCourseAttachmentIDs(ids...)
}

// ClearClassCoverAttachments clears all "class_cover_attachments" edges to the KcClass entity.
func (au *AttachmentUpdate) ClearClassCoverAttachments() *AttachmentUpdate {
	au.mutation.ClearClassCoverAttachments()
	return au
}

// RemoveClassCoverAttachmentIDs removes the "class_cover_attachments" edge to KcClass entities by IDs.
func (au *AttachmentUpdate) RemoveClassCoverAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveClassCoverAttachmentIDs(ids...)
	return au
}

// RemoveClassCoverAttachments removes "class_cover_attachments" edges to KcClass entities.
func (au *AttachmentUpdate) RemoveClassCoverAttachments(k ...*KcClass) *AttachmentUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.RemoveClassCoverAttachmentIDs(ids...)
}

// ClearCoursewareAttachment clears the "courseware_attachment" edge to the KcCourseSmallCategory entity.
func (au *AttachmentUpdate) ClearCoursewareAttachment() *AttachmentUpdate {
	au.mutation.ClearCoursewareAttachment()
	return au
}

// ClearOrderAttachment clears the "order_attachment" edge to the KcCourseSmallCategory entity.
func (au *AttachmentUpdate) ClearOrderAttachment() *AttachmentUpdate {
	au.mutation.ClearOrderAttachment()
	return au
}

// ClearVideoTaskAttachment clears all "video_task_attachment" edges to the KcVideoUploadTask entity.
func (au *AttachmentUpdate) ClearVideoTaskAttachment() *AttachmentUpdate {
	au.mutation.ClearVideoTaskAttachment()
	return au
}

// RemoveVideoTaskAttachmentIDs removes the "video_task_attachment" edge to KcVideoUploadTask entities by IDs.
func (au *AttachmentUpdate) RemoveVideoTaskAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveVideoTaskAttachmentIDs(ids...)
	return au
}

// RemoveVideoTaskAttachment removes "video_task_attachment" edges to KcVideoUploadTask entities.
func (au *AttachmentUpdate) RemoveVideoTaskAttachment(k ...*KcVideoUploadTask) *AttachmentUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.RemoveVideoTaskAttachmentIDs(ids...)
}

// ClearAskAttachments clears all "ask_attachments" edges to the UserAskAnswerAttachment entity.
func (au *AttachmentUpdate) ClearAskAttachments() *AttachmentUpdate {
	au.mutation.ClearAskAttachments()
	return au
}

// RemoveAskAttachmentIDs removes the "ask_attachments" edge to UserAskAnswerAttachment entities by IDs.
func (au *AttachmentUpdate) RemoveAskAttachmentIDs(ids ...int) *AttachmentUpdate {
	au.mutation.RemoveAskAttachmentIDs(ids...)
	return au
}

// RemoveAskAttachments removes "ask_attachments" edges to UserAskAnswerAttachment entities.
func (au *AttachmentUpdate) RemoveAskAttachments(u ...*UserAskAnswerAttachment) *AttachmentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveAskAttachmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttachmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttachmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttachmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AttachmentUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := attachment.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attachment.Table,
			Columns: attachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attachment.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldUUID,
		})
	}
	if au.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: attachment.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attachment.FieldUpdatedAt,
		})
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: attachment.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attachment.FieldDeletedAt,
		})
	}
	if au.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: attachment.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldFilename,
		})
	}
	if value, ok := au.mutation.FileSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: attachment.FieldFileSize,
		})
	}
	if value, ok := au.mutation.AddedFileSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: attachment.FieldFileSize,
		})
	}
	if value, ok := au.mutation.MimeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldMimeType,
		})
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldUserID,
		})
	}
	if value, ok := au.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldUserID,
		})
	}
	if au.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: attachment.FieldUserID,
		})
	}
	if value, ok := au.mutation.AdminID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldAdminID,
		})
	}
	if value, ok := au.mutation.AddedAdminID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldAdminID,
		})
	}
	if au.mutation.AdminIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: attachment.FieldAdminID,
		})
	}
	if au.mutation.MajorDetailCoverImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailCoverImgTable,
			Columns: []string{attachment.MajorDetailCoverImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMajorDetailCoverImgIDs(); len(nodes) > 0 && !au.mutation.MajorDetailCoverImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailCoverImgTable,
			Columns: []string{attachment.MajorDetailCoverImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MajorDetailCoverImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailCoverImgTable,
			Columns: []string{attachment.MajorDetailCoverImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MajorDetailSubjectImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailSubjectImgTable,
			Columns: []string{attachment.MajorDetailSubjectImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMajorDetailSubjectImgIDs(); len(nodes) > 0 && !au.mutation.MajorDetailSubjectImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailSubjectImgTable,
			Columns: []string{attachment.MajorDetailSubjectImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MajorDetailSubjectImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailSubjectImgTable,
			Columns: []string{attachment.MajorDetailSubjectImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MajorTeacherAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorTeacherAttachmentTable,
			Columns: attachment.MajorTeacherAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMajorTeacherAttachmentIDs(); len(nodes) > 0 && !au.mutation.MajorTeacherAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorTeacherAttachmentTable,
			Columns: attachment.MajorTeacherAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MajorTeacherAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorTeacherAttachmentTable,
			Columns: attachment.MajorTeacherAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MajorServiceAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorServiceAttachmentTable,
			Columns: attachment.MajorServiceAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMajorServiceAttachmentIDs(); len(nodes) > 0 && !au.mutation.MajorServiceAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorServiceAttachmentTable,
			Columns: attachment.MajorServiceAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MajorServiceAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorServiceAttachmentTable,
			Columns: attachment.MajorServiceAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdvertiseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AdvertiseTable,
			Columns: []string{attachment.AdvertiseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: advertise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdvertiseIDs(); len(nodes) > 0 && !au.mutation.AdvertiseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AdvertiseTable,
			Columns: []string{attachment.AdvertiseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: advertise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdvertiseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AdvertiseTable,
			Columns: []string{attachment.AdvertiseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: advertise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MessageAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MessageAttachmentTable,
			Columns: []string{attachment.MessageAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMessageAttachmentIDs(); len(nodes) > 0 && !au.mutation.MessageAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MessageAttachmentTable,
			Columns: []string{attachment.MessageAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MessageAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MessageAttachmentTable,
			Columns: []string{attachment.MessageAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SharePosterAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SharePosterAttachmentsTable,
			Columns: []string{attachment.SharePosterAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shareposter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSharePosterAttachmentsIDs(); len(nodes) > 0 && !au.mutation.SharePosterAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SharePosterAttachmentsTable,
			Columns: []string{attachment.SharePosterAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shareposter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SharePosterAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SharePosterAttachmentsTable,
			Columns: []string{attachment.SharePosterAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shareposter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TeacherAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.TeacherAttachmentsTable,
			Columns: []string{attachment.TeacherAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTeacherAttachmentsIDs(); len(nodes) > 0 && !au.mutation.TeacherAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.TeacherAttachmentsTable,
			Columns: []string{attachment.TeacherAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TeacherAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.TeacherAttachmentsTable,
			Columns: []string{attachment.TeacherAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminImgIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.AdminImgIDTable,
			Columns: []string{attachment.AdminImgIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminImgIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.AdminImgIDTable,
			Columns: []string{attachment.AdminImgIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SmallCategoryAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SmallCategoryAttachmentsTable,
			Columns: []string{attachment.SmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSmallCategoryAttachmentsIDs(); len(nodes) > 0 && !au.mutation.SmallCategoryAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SmallCategoryAttachmentsTable,
			Columns: []string{attachment.SmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SmallCategoryAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SmallCategoryAttachmentsTable,
			Columns: []string{attachment.SmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CourseAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.CourseAttachmentsTable,
			Columns: []string{attachment.CourseAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCourseAttachmentsIDs(); len(nodes) > 0 && !au.mutation.CourseAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.CourseAttachmentsTable,
			Columns: []string{attachment.CourseAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CourseAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.CourseAttachmentsTable,
			Columns: []string{attachment.CourseAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ClassCoverAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.ClassCoverAttachmentsTable,
			Columns: []string{attachment.ClassCoverAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedClassCoverAttachmentsIDs(); len(nodes) > 0 && !au.mutation.ClassCoverAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.ClassCoverAttachmentsTable,
			Columns: []string{attachment.ClassCoverAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ClassCoverAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.ClassCoverAttachmentsTable,
			Columns: []string{attachment.ClassCoverAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CoursewareAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.CoursewareAttachmentTable,
			Columns: []string{attachment.CoursewareAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CoursewareAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.CoursewareAttachmentTable,
			Columns: []string{attachment.CoursewareAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrderAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.OrderAttachmentTable,
			Columns: []string{attachment.OrderAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrderAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.OrderAttachmentTable,
			Columns: []string{attachment.OrderAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.VideoTaskAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.VideoTaskAttachmentTable,
			Columns: []string{attachment.VideoTaskAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcvideouploadtask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedVideoTaskAttachmentIDs(); len(nodes) > 0 && !au.mutation.VideoTaskAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.VideoTaskAttachmentTable,
			Columns: []string{attachment.VideoTaskAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcvideouploadtask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.VideoTaskAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.VideoTaskAttachmentTable,
			Columns: []string{attachment.VideoTaskAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcvideouploadtask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AskAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AskAttachmentsTable,
			Columns: []string{attachment.AskAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAskAttachmentsIDs(); len(nodes) > 0 && !au.mutation.AskAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AskAttachmentsTable,
			Columns: []string{attachment.AskAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AskAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AskAttachmentsTable,
			Columns: []string{attachment.AskAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AttachmentUpdateOne is the builder for updating a single Attachment entity.
type AttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttachmentMutation
}

// SetUUID sets the "uuid" field.
func (auo *AttachmentUpdateOne) SetUUID(s string) *AttachmentUpdateOne {
	auo.mutation.SetUUID(s)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AttachmentUpdateOne) SetUpdatedAt(t time.Time) *AttachmentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AttachmentUpdateOne) ClearUpdatedAt() *AttachmentUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AttachmentUpdateOne) SetDeletedAt(t time.Time) *AttachmentUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableDeletedAt(t *time.Time) *AttachmentUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AttachmentUpdateOne) ClearDeletedAt() *AttachmentUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetFilename sets the "filename" field.
func (auo *AttachmentUpdateOne) SetFilename(s string) *AttachmentUpdateOne {
	auo.mutation.SetFilename(s)
	return auo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableFilename(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetFilename(*s)
	}
	return auo
}

// SetFileSize sets the "file_size" field.
func (auo *AttachmentUpdateOne) SetFileSize(u uint32) *AttachmentUpdateOne {
	auo.mutation.ResetFileSize()
	auo.mutation.SetFileSize(u)
	return auo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableFileSize(u *uint32) *AttachmentUpdateOne {
	if u != nil {
		auo.SetFileSize(*u)
	}
	return auo
}

// AddFileSize adds u to the "file_size" field.
func (auo *AttachmentUpdateOne) AddFileSize(u uint32) *AttachmentUpdateOne {
	auo.mutation.AddFileSize(u)
	return auo
}

// SetMimeType sets the "mime_type" field.
func (auo *AttachmentUpdateOne) SetMimeType(s string) *AttachmentUpdateOne {
	auo.mutation.SetMimeType(s)
	return auo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableMimeType(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetMimeType(*s)
	}
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *AttachmentUpdateOne) SetUserID(i int) *AttachmentUpdateOne {
	auo.mutation.ResetUserID()
	auo.mutation.SetUserID(i)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableUserID(i *int) *AttachmentUpdateOne {
	if i != nil {
		auo.SetUserID(*i)
	}
	return auo
}

// AddUserID adds i to the "user_id" field.
func (auo *AttachmentUpdateOne) AddUserID(i int) *AttachmentUpdateOne {
	auo.mutation.AddUserID(i)
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AttachmentUpdateOne) ClearUserID() *AttachmentUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetAdminID sets the "admin_id" field.
func (auo *AttachmentUpdateOne) SetAdminID(i int) *AttachmentUpdateOne {
	auo.mutation.ResetAdminID()
	auo.mutation.SetAdminID(i)
	return auo
}

// SetNillableAdminID sets the "admin_id" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableAdminID(i *int) *AttachmentUpdateOne {
	if i != nil {
		auo.SetAdminID(*i)
	}
	return auo
}

// AddAdminID adds i to the "admin_id" field.
func (auo *AttachmentUpdateOne) AddAdminID(i int) *AttachmentUpdateOne {
	auo.mutation.AddAdminID(i)
	return auo
}

// ClearAdminID clears the value of the "admin_id" field.
func (auo *AttachmentUpdateOne) ClearAdminID() *AttachmentUpdateOne {
	auo.mutation.ClearAdminID()
	return auo
}

// AddMajorDetailCoverImgIDs adds the "major_detail_cover_img" edge to the MajorDetail entity by IDs.
func (auo *AttachmentUpdateOne) AddMajorDetailCoverImgIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddMajorDetailCoverImgIDs(ids...)
	return auo
}

// AddMajorDetailCoverImg adds the "major_detail_cover_img" edges to the MajorDetail entity.
func (auo *AttachmentUpdateOne) AddMajorDetailCoverImg(m ...*MajorDetail) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMajorDetailCoverImgIDs(ids...)
}

// AddMajorDetailSubjectImgIDs adds the "major_detail_subject_img" edge to the MajorDetail entity by IDs.
func (auo *AttachmentUpdateOne) AddMajorDetailSubjectImgIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddMajorDetailSubjectImgIDs(ids...)
	return auo
}

// AddMajorDetailSubjectImg adds the "major_detail_subject_img" edges to the MajorDetail entity.
func (auo *AttachmentUpdateOne) AddMajorDetailSubjectImg(m ...*MajorDetail) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMajorDetailSubjectImgIDs(ids...)
}

// AddMajorTeacherAttachmentIDs adds the "major_teacher_attachment" edge to the MajorDetail entity by IDs.
func (auo *AttachmentUpdateOne) AddMajorTeacherAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddMajorTeacherAttachmentIDs(ids...)
	return auo
}

// AddMajorTeacherAttachment adds the "major_teacher_attachment" edges to the MajorDetail entity.
func (auo *AttachmentUpdateOne) AddMajorTeacherAttachment(m ...*MajorDetail) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMajorTeacherAttachmentIDs(ids...)
}

// AddMajorServiceAttachmentIDs adds the "major_service_attachment" edge to the MajorDetail entity by IDs.
func (auo *AttachmentUpdateOne) AddMajorServiceAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddMajorServiceAttachmentIDs(ids...)
	return auo
}

// AddMajorServiceAttachment adds the "major_service_attachment" edges to the MajorDetail entity.
func (auo *AttachmentUpdateOne) AddMajorServiceAttachment(m ...*MajorDetail) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMajorServiceAttachmentIDs(ids...)
}

// AddAdvertiseIDs adds the "advertise" edge to the Advertise entity by IDs.
func (auo *AttachmentUpdateOne) AddAdvertiseIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddAdvertiseIDs(ids...)
	return auo
}

// AddAdvertise adds the "advertise" edges to the Advertise entity.
func (auo *AttachmentUpdateOne) AddAdvertise(a ...*Advertise) *AttachmentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdvertiseIDs(ids...)
}

// AddMessageAttachmentIDs adds the "message_attachment" edge to the Message entity by IDs.
func (auo *AttachmentUpdateOne) AddMessageAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddMessageAttachmentIDs(ids...)
	return auo
}

// AddMessageAttachment adds the "message_attachment" edges to the Message entity.
func (auo *AttachmentUpdateOne) AddMessageAttachment(m ...*Message) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMessageAttachmentIDs(ids...)
}

// AddSharePosterAttachmentIDs adds the "share_poster_attachments" edge to the SharePoster entity by IDs.
func (auo *AttachmentUpdateOne) AddSharePosterAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddSharePosterAttachmentIDs(ids...)
	return auo
}

// AddSharePosterAttachments adds the "share_poster_attachments" edges to the SharePoster entity.
func (auo *AttachmentUpdateOne) AddSharePosterAttachments(s ...*SharePoster) *AttachmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSharePosterAttachmentIDs(ids...)
}

// AddTeacherAttachmentIDs adds the "teacher_attachments" edge to the Teacher entity by IDs.
func (auo *AttachmentUpdateOne) AddTeacherAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddTeacherAttachmentIDs(ids...)
	return auo
}

// AddTeacherAttachments adds the "teacher_attachments" edges to the Teacher entity.
func (auo *AttachmentUpdateOne) AddTeacherAttachments(t ...*Teacher) *AttachmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTeacherAttachmentIDs(ids...)
}

// SetAdminImgIDID sets the "admin_img_id" edge to the Admin entity by ID.
func (auo *AttachmentUpdateOne) SetAdminImgIDID(id int) *AttachmentUpdateOne {
	auo.mutation.SetAdminImgIDID(id)
	return auo
}

// SetNillableAdminImgIDID sets the "admin_img_id" edge to the Admin entity by ID if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableAdminImgIDID(id *int) *AttachmentUpdateOne {
	if id != nil {
		auo = auo.SetAdminImgIDID(*id)
	}
	return auo
}

// SetAdminImgID sets the "admin_img_id" edge to the Admin entity.
func (auo *AttachmentUpdateOne) SetAdminImgID(a *Admin) *AttachmentUpdateOne {
	return auo.SetAdminImgIDID(a.ID)
}

// AddSmallCategoryAttachmentIDs adds the "small_category_attachments" edge to the KcSmallCategoryAttachment entity by IDs.
func (auo *AttachmentUpdateOne) AddSmallCategoryAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddSmallCategoryAttachmentIDs(ids...)
	return auo
}

// AddSmallCategoryAttachments adds the "small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (auo *AttachmentUpdateOne) AddSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *AttachmentUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.AddSmallCategoryAttachmentIDs(ids...)
}

// AddCourseAttachmentIDs adds the "course_attachments" edge to the KcCourse entity by IDs.
func (auo *AttachmentUpdateOne) AddCourseAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddCourseAttachmentIDs(ids...)
	return auo
}

// AddCourseAttachments adds the "course_attachments" edges to the KcCourse entity.
func (auo *AttachmentUpdateOne) AddCourseAttachments(k ...*KcCourse) *AttachmentUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.AddCourseAttachmentIDs(ids...)
}

// AddClassCoverAttachmentIDs adds the "class_cover_attachments" edge to the KcClass entity by IDs.
func (auo *AttachmentUpdateOne) AddClassCoverAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddClassCoverAttachmentIDs(ids...)
	return auo
}

// AddClassCoverAttachments adds the "class_cover_attachments" edges to the KcClass entity.
func (auo *AttachmentUpdateOne) AddClassCoverAttachments(k ...*KcClass) *AttachmentUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.AddClassCoverAttachmentIDs(ids...)
}

// SetCoursewareAttachmentID sets the "courseware_attachment" edge to the KcCourseSmallCategory entity by ID.
func (auo *AttachmentUpdateOne) SetCoursewareAttachmentID(id int) *AttachmentUpdateOne {
	auo.mutation.SetCoursewareAttachmentID(id)
	return auo
}

// SetNillableCoursewareAttachmentID sets the "courseware_attachment" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableCoursewareAttachmentID(id *int) *AttachmentUpdateOne {
	if id != nil {
		auo = auo.SetCoursewareAttachmentID(*id)
	}
	return auo
}

// SetCoursewareAttachment sets the "courseware_attachment" edge to the KcCourseSmallCategory entity.
func (auo *AttachmentUpdateOne) SetCoursewareAttachment(k *KcCourseSmallCategory) *AttachmentUpdateOne {
	return auo.SetCoursewareAttachmentID(k.ID)
}

// SetOrderAttachmentID sets the "order_attachment" edge to the KcCourseSmallCategory entity by ID.
func (auo *AttachmentUpdateOne) SetOrderAttachmentID(id int) *AttachmentUpdateOne {
	auo.mutation.SetOrderAttachmentID(id)
	return auo
}

// SetNillableOrderAttachmentID sets the "order_attachment" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableOrderAttachmentID(id *int) *AttachmentUpdateOne {
	if id != nil {
		auo = auo.SetOrderAttachmentID(*id)
	}
	return auo
}

// SetOrderAttachment sets the "order_attachment" edge to the KcCourseSmallCategory entity.
func (auo *AttachmentUpdateOne) SetOrderAttachment(k *KcCourseSmallCategory) *AttachmentUpdateOne {
	return auo.SetOrderAttachmentID(k.ID)
}

// AddVideoTaskAttachmentIDs adds the "video_task_attachment" edge to the KcVideoUploadTask entity by IDs.
func (auo *AttachmentUpdateOne) AddVideoTaskAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddVideoTaskAttachmentIDs(ids...)
	return auo
}

// AddVideoTaskAttachment adds the "video_task_attachment" edges to the KcVideoUploadTask entity.
func (auo *AttachmentUpdateOne) AddVideoTaskAttachment(k ...*KcVideoUploadTask) *AttachmentUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.AddVideoTaskAttachmentIDs(ids...)
}

// AddAskAttachmentIDs adds the "ask_attachments" edge to the UserAskAnswerAttachment entity by IDs.
func (auo *AttachmentUpdateOne) AddAskAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.AddAskAttachmentIDs(ids...)
	return auo
}

// AddAskAttachments adds the "ask_attachments" edges to the UserAskAnswerAttachment entity.
func (auo *AttachmentUpdateOne) AddAskAttachments(u ...*UserAskAnswerAttachment) *AttachmentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddAskAttachmentIDs(ids...)
}

// Mutation returns the AttachmentMutation object of the builder.
func (auo *AttachmentUpdateOne) Mutation() *AttachmentMutation {
	return auo.mutation
}

// ClearMajorDetailCoverImg clears all "major_detail_cover_img" edges to the MajorDetail entity.
func (auo *AttachmentUpdateOne) ClearMajorDetailCoverImg() *AttachmentUpdateOne {
	auo.mutation.ClearMajorDetailCoverImg()
	return auo
}

// RemoveMajorDetailCoverImgIDs removes the "major_detail_cover_img" edge to MajorDetail entities by IDs.
func (auo *AttachmentUpdateOne) RemoveMajorDetailCoverImgIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveMajorDetailCoverImgIDs(ids...)
	return auo
}

// RemoveMajorDetailCoverImg removes "major_detail_cover_img" edges to MajorDetail entities.
func (auo *AttachmentUpdateOne) RemoveMajorDetailCoverImg(m ...*MajorDetail) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMajorDetailCoverImgIDs(ids...)
}

// ClearMajorDetailSubjectImg clears all "major_detail_subject_img" edges to the MajorDetail entity.
func (auo *AttachmentUpdateOne) ClearMajorDetailSubjectImg() *AttachmentUpdateOne {
	auo.mutation.ClearMajorDetailSubjectImg()
	return auo
}

// RemoveMajorDetailSubjectImgIDs removes the "major_detail_subject_img" edge to MajorDetail entities by IDs.
func (auo *AttachmentUpdateOne) RemoveMajorDetailSubjectImgIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveMajorDetailSubjectImgIDs(ids...)
	return auo
}

// RemoveMajorDetailSubjectImg removes "major_detail_subject_img" edges to MajorDetail entities.
func (auo *AttachmentUpdateOne) RemoveMajorDetailSubjectImg(m ...*MajorDetail) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMajorDetailSubjectImgIDs(ids...)
}

// ClearMajorTeacherAttachment clears all "major_teacher_attachment" edges to the MajorDetail entity.
func (auo *AttachmentUpdateOne) ClearMajorTeacherAttachment() *AttachmentUpdateOne {
	auo.mutation.ClearMajorTeacherAttachment()
	return auo
}

// RemoveMajorTeacherAttachmentIDs removes the "major_teacher_attachment" edge to MajorDetail entities by IDs.
func (auo *AttachmentUpdateOne) RemoveMajorTeacherAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveMajorTeacherAttachmentIDs(ids...)
	return auo
}

// RemoveMajorTeacherAttachment removes "major_teacher_attachment" edges to MajorDetail entities.
func (auo *AttachmentUpdateOne) RemoveMajorTeacherAttachment(m ...*MajorDetail) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMajorTeacherAttachmentIDs(ids...)
}

// ClearMajorServiceAttachment clears all "major_service_attachment" edges to the MajorDetail entity.
func (auo *AttachmentUpdateOne) ClearMajorServiceAttachment() *AttachmentUpdateOne {
	auo.mutation.ClearMajorServiceAttachment()
	return auo
}

// RemoveMajorServiceAttachmentIDs removes the "major_service_attachment" edge to MajorDetail entities by IDs.
func (auo *AttachmentUpdateOne) RemoveMajorServiceAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveMajorServiceAttachmentIDs(ids...)
	return auo
}

// RemoveMajorServiceAttachment removes "major_service_attachment" edges to MajorDetail entities.
func (auo *AttachmentUpdateOne) RemoveMajorServiceAttachment(m ...*MajorDetail) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMajorServiceAttachmentIDs(ids...)
}

// ClearAdvertise clears all "advertise" edges to the Advertise entity.
func (auo *AttachmentUpdateOne) ClearAdvertise() *AttachmentUpdateOne {
	auo.mutation.ClearAdvertise()
	return auo
}

// RemoveAdvertiseIDs removes the "advertise" edge to Advertise entities by IDs.
func (auo *AttachmentUpdateOne) RemoveAdvertiseIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveAdvertiseIDs(ids...)
	return auo
}

// RemoveAdvertise removes "advertise" edges to Advertise entities.
func (auo *AttachmentUpdateOne) RemoveAdvertise(a ...*Advertise) *AttachmentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdvertiseIDs(ids...)
}

// ClearMessageAttachment clears all "message_attachment" edges to the Message entity.
func (auo *AttachmentUpdateOne) ClearMessageAttachment() *AttachmentUpdateOne {
	auo.mutation.ClearMessageAttachment()
	return auo
}

// RemoveMessageAttachmentIDs removes the "message_attachment" edge to Message entities by IDs.
func (auo *AttachmentUpdateOne) RemoveMessageAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveMessageAttachmentIDs(ids...)
	return auo
}

// RemoveMessageAttachment removes "message_attachment" edges to Message entities.
func (auo *AttachmentUpdateOne) RemoveMessageAttachment(m ...*Message) *AttachmentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMessageAttachmentIDs(ids...)
}

// ClearSharePosterAttachments clears all "share_poster_attachments" edges to the SharePoster entity.
func (auo *AttachmentUpdateOne) ClearSharePosterAttachments() *AttachmentUpdateOne {
	auo.mutation.ClearSharePosterAttachments()
	return auo
}

// RemoveSharePosterAttachmentIDs removes the "share_poster_attachments" edge to SharePoster entities by IDs.
func (auo *AttachmentUpdateOne) RemoveSharePosterAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveSharePosterAttachmentIDs(ids...)
	return auo
}

// RemoveSharePosterAttachments removes "share_poster_attachments" edges to SharePoster entities.
func (auo *AttachmentUpdateOne) RemoveSharePosterAttachments(s ...*SharePoster) *AttachmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSharePosterAttachmentIDs(ids...)
}

// ClearTeacherAttachments clears all "teacher_attachments" edges to the Teacher entity.
func (auo *AttachmentUpdateOne) ClearTeacherAttachments() *AttachmentUpdateOne {
	auo.mutation.ClearTeacherAttachments()
	return auo
}

// RemoveTeacherAttachmentIDs removes the "teacher_attachments" edge to Teacher entities by IDs.
func (auo *AttachmentUpdateOne) RemoveTeacherAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveTeacherAttachmentIDs(ids...)
	return auo
}

// RemoveTeacherAttachments removes "teacher_attachments" edges to Teacher entities.
func (auo *AttachmentUpdateOne) RemoveTeacherAttachments(t ...*Teacher) *AttachmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTeacherAttachmentIDs(ids...)
}

// ClearAdminImgID clears the "admin_img_id" edge to the Admin entity.
func (auo *AttachmentUpdateOne) ClearAdminImgID() *AttachmentUpdateOne {
	auo.mutation.ClearAdminImgID()
	return auo
}

// ClearSmallCategoryAttachments clears all "small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (auo *AttachmentUpdateOne) ClearSmallCategoryAttachments() *AttachmentUpdateOne {
	auo.mutation.ClearSmallCategoryAttachments()
	return auo
}

// RemoveSmallCategoryAttachmentIDs removes the "small_category_attachments" edge to KcSmallCategoryAttachment entities by IDs.
func (auo *AttachmentUpdateOne) RemoveSmallCategoryAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveSmallCategoryAttachmentIDs(ids...)
	return auo
}

// RemoveSmallCategoryAttachments removes "small_category_attachments" edges to KcSmallCategoryAttachment entities.
func (auo *AttachmentUpdateOne) RemoveSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *AttachmentUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.RemoveSmallCategoryAttachmentIDs(ids...)
}

// ClearCourseAttachments clears all "course_attachments" edges to the KcCourse entity.
func (auo *AttachmentUpdateOne) ClearCourseAttachments() *AttachmentUpdateOne {
	auo.mutation.ClearCourseAttachments()
	return auo
}

// RemoveCourseAttachmentIDs removes the "course_attachments" edge to KcCourse entities by IDs.
func (auo *AttachmentUpdateOne) RemoveCourseAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveCourseAttachmentIDs(ids...)
	return auo
}

// RemoveCourseAttachments removes "course_attachments" edges to KcCourse entities.
func (auo *AttachmentUpdateOne) RemoveCourseAttachments(k ...*KcCourse) *AttachmentUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.RemoveCourseAttachmentIDs(ids...)
}

// ClearClassCoverAttachments clears all "class_cover_attachments" edges to the KcClass entity.
func (auo *AttachmentUpdateOne) ClearClassCoverAttachments() *AttachmentUpdateOne {
	auo.mutation.ClearClassCoverAttachments()
	return auo
}

// RemoveClassCoverAttachmentIDs removes the "class_cover_attachments" edge to KcClass entities by IDs.
func (auo *AttachmentUpdateOne) RemoveClassCoverAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveClassCoverAttachmentIDs(ids...)
	return auo
}

// RemoveClassCoverAttachments removes "class_cover_attachments" edges to KcClass entities.
func (auo *AttachmentUpdateOne) RemoveClassCoverAttachments(k ...*KcClass) *AttachmentUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.RemoveClassCoverAttachmentIDs(ids...)
}

// ClearCoursewareAttachment clears the "courseware_attachment" edge to the KcCourseSmallCategory entity.
func (auo *AttachmentUpdateOne) ClearCoursewareAttachment() *AttachmentUpdateOne {
	auo.mutation.ClearCoursewareAttachment()
	return auo
}

// ClearOrderAttachment clears the "order_attachment" edge to the KcCourseSmallCategory entity.
func (auo *AttachmentUpdateOne) ClearOrderAttachment() *AttachmentUpdateOne {
	auo.mutation.ClearOrderAttachment()
	return auo
}

// ClearVideoTaskAttachment clears all "video_task_attachment" edges to the KcVideoUploadTask entity.
func (auo *AttachmentUpdateOne) ClearVideoTaskAttachment() *AttachmentUpdateOne {
	auo.mutation.ClearVideoTaskAttachment()
	return auo
}

// RemoveVideoTaskAttachmentIDs removes the "video_task_attachment" edge to KcVideoUploadTask entities by IDs.
func (auo *AttachmentUpdateOne) RemoveVideoTaskAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveVideoTaskAttachmentIDs(ids...)
	return auo
}

// RemoveVideoTaskAttachment removes "video_task_attachment" edges to KcVideoUploadTask entities.
func (auo *AttachmentUpdateOne) RemoveVideoTaskAttachment(k ...*KcVideoUploadTask) *AttachmentUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.RemoveVideoTaskAttachmentIDs(ids...)
}

// ClearAskAttachments clears all "ask_attachments" edges to the UserAskAnswerAttachment entity.
func (auo *AttachmentUpdateOne) ClearAskAttachments() *AttachmentUpdateOne {
	auo.mutation.ClearAskAttachments()
	return auo
}

// RemoveAskAttachmentIDs removes the "ask_attachments" edge to UserAskAnswerAttachment entities by IDs.
func (auo *AttachmentUpdateOne) RemoveAskAttachmentIDs(ids ...int) *AttachmentUpdateOne {
	auo.mutation.RemoveAskAttachmentIDs(ids...)
	return auo
}

// RemoveAskAttachments removes "ask_attachments" edges to UserAskAnswerAttachment entities.
func (auo *AttachmentUpdateOne) RemoveAskAttachments(u ...*UserAskAnswerAttachment) *AttachmentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveAskAttachmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttachmentUpdateOne) Select(field string, fields ...string) *AttachmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attachment entity.
func (auo *AttachmentUpdateOne) Save(ctx context.Context) (*Attachment, error) {
	var (
		err  error
		node *Attachment
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttachmentUpdateOne) SaveX(ctx context.Context) *Attachment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AttachmentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := attachment.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AttachmentUpdateOne) sqlSave(ctx context.Context) (_node *Attachment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attachment.Table,
			Columns: attachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attachment.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Attachment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attachment.FieldID)
		for _, f := range fields {
			if !attachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldUUID,
		})
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: attachment.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attachment.FieldUpdatedAt,
		})
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: attachment.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attachment.FieldDeletedAt,
		})
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: attachment.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldFilename,
		})
	}
	if value, ok := auo.mutation.FileSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: attachment.FieldFileSize,
		})
	}
	if value, ok := auo.mutation.AddedFileSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: attachment.FieldFileSize,
		})
	}
	if value, ok := auo.mutation.MimeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldMimeType,
		})
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldUserID,
		})
	}
	if value, ok := auo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldUserID,
		})
	}
	if auo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: attachment.FieldUserID,
		})
	}
	if value, ok := auo.mutation.AdminID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldAdminID,
		})
	}
	if value, ok := auo.mutation.AddedAdminID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldAdminID,
		})
	}
	if auo.mutation.AdminIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: attachment.FieldAdminID,
		})
	}
	if auo.mutation.MajorDetailCoverImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailCoverImgTable,
			Columns: []string{attachment.MajorDetailCoverImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMajorDetailCoverImgIDs(); len(nodes) > 0 && !auo.mutation.MajorDetailCoverImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailCoverImgTable,
			Columns: []string{attachment.MajorDetailCoverImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MajorDetailCoverImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailCoverImgTable,
			Columns: []string{attachment.MajorDetailCoverImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MajorDetailSubjectImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailSubjectImgTable,
			Columns: []string{attachment.MajorDetailSubjectImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMajorDetailSubjectImgIDs(); len(nodes) > 0 && !auo.mutation.MajorDetailSubjectImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailSubjectImgTable,
			Columns: []string{attachment.MajorDetailSubjectImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MajorDetailSubjectImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailSubjectImgTable,
			Columns: []string{attachment.MajorDetailSubjectImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MajorTeacherAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorTeacherAttachmentTable,
			Columns: attachment.MajorTeacherAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMajorTeacherAttachmentIDs(); len(nodes) > 0 && !auo.mutation.MajorTeacherAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorTeacherAttachmentTable,
			Columns: attachment.MajorTeacherAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MajorTeacherAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorTeacherAttachmentTable,
			Columns: attachment.MajorTeacherAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MajorServiceAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorServiceAttachmentTable,
			Columns: attachment.MajorServiceAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMajorServiceAttachmentIDs(); len(nodes) > 0 && !auo.mutation.MajorServiceAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorServiceAttachmentTable,
			Columns: attachment.MajorServiceAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MajorServiceAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorServiceAttachmentTable,
			Columns: attachment.MajorServiceAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdvertiseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AdvertiseTable,
			Columns: []string{attachment.AdvertiseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: advertise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdvertiseIDs(); len(nodes) > 0 && !auo.mutation.AdvertiseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AdvertiseTable,
			Columns: []string{attachment.AdvertiseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: advertise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdvertiseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AdvertiseTable,
			Columns: []string{attachment.AdvertiseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: advertise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MessageAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MessageAttachmentTable,
			Columns: []string{attachment.MessageAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMessageAttachmentIDs(); len(nodes) > 0 && !auo.mutation.MessageAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MessageAttachmentTable,
			Columns: []string{attachment.MessageAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MessageAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MessageAttachmentTable,
			Columns: []string{attachment.MessageAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SharePosterAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SharePosterAttachmentsTable,
			Columns: []string{attachment.SharePosterAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shareposter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSharePosterAttachmentsIDs(); len(nodes) > 0 && !auo.mutation.SharePosterAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SharePosterAttachmentsTable,
			Columns: []string{attachment.SharePosterAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shareposter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SharePosterAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SharePosterAttachmentsTable,
			Columns: []string{attachment.SharePosterAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shareposter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TeacherAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.TeacherAttachmentsTable,
			Columns: []string{attachment.TeacherAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTeacherAttachmentsIDs(); len(nodes) > 0 && !auo.mutation.TeacherAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.TeacherAttachmentsTable,
			Columns: []string{attachment.TeacherAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TeacherAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.TeacherAttachmentsTable,
			Columns: []string{attachment.TeacherAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminImgIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.AdminImgIDTable,
			Columns: []string{attachment.AdminImgIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminImgIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.AdminImgIDTable,
			Columns: []string{attachment.AdminImgIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SmallCategoryAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SmallCategoryAttachmentsTable,
			Columns: []string{attachment.SmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSmallCategoryAttachmentsIDs(); len(nodes) > 0 && !auo.mutation.SmallCategoryAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SmallCategoryAttachmentsTable,
			Columns: []string{attachment.SmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SmallCategoryAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SmallCategoryAttachmentsTable,
			Columns: []string{attachment.SmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CourseAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.CourseAttachmentsTable,
			Columns: []string{attachment.CourseAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCourseAttachmentsIDs(); len(nodes) > 0 && !auo.mutation.CourseAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.CourseAttachmentsTable,
			Columns: []string{attachment.CourseAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CourseAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.CourseAttachmentsTable,
			Columns: []string{attachment.CourseAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ClassCoverAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.ClassCoverAttachmentsTable,
			Columns: []string{attachment.ClassCoverAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedClassCoverAttachmentsIDs(); len(nodes) > 0 && !auo.mutation.ClassCoverAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.ClassCoverAttachmentsTable,
			Columns: []string{attachment.ClassCoverAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ClassCoverAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.ClassCoverAttachmentsTable,
			Columns: []string{attachment.ClassCoverAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CoursewareAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.CoursewareAttachmentTable,
			Columns: []string{attachment.CoursewareAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CoursewareAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.CoursewareAttachmentTable,
			Columns: []string{attachment.CoursewareAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrderAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.OrderAttachmentTable,
			Columns: []string{attachment.OrderAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrderAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.OrderAttachmentTable,
			Columns: []string{attachment.OrderAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.VideoTaskAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.VideoTaskAttachmentTable,
			Columns: []string{attachment.VideoTaskAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcvideouploadtask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedVideoTaskAttachmentIDs(); len(nodes) > 0 && !auo.mutation.VideoTaskAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.VideoTaskAttachmentTable,
			Columns: []string{attachment.VideoTaskAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcvideouploadtask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.VideoTaskAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.VideoTaskAttachmentTable,
			Columns: []string{attachment.VideoTaskAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcvideouploadtask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AskAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AskAttachmentsTable,
			Columns: []string{attachment.AskAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAskAttachmentsIDs(); len(nodes) > 0 && !auo.mutation.AskAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AskAttachmentsTable,
			Columns: []string{attachment.AskAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AskAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AskAttachmentsTable,
			Columns: []string{attachment.AskAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Attachment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/teacher"
	"gserver/internal/store/ent/teachertag"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TeacherTag is the model entity for the TeacherTag schema.
type TeacherTag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 标签名称
	Name string `json:"name"`
	// TeacherID holds the value of the "teacher_id" field.
	// 讲师id
	TeacherID int `json:"teacher_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeacherTagQuery when eager-loading is set.
	Edges TeacherTagEdges `json:"edges"`
}

// TeacherTagEdges holds the relations/edges for other nodes in the graph.
type TeacherTagEdges struct {
	// Teacher holds the value of the teacher edge.
	Teacher *Teacher `json:"teacher,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeacherTagEdges) TeacherOrErr() (*Teacher, error) {
	if e.loadedTypes[0] {
		if e.Teacher == nil {
			// The edge teacher was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.Teacher, nil
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeacherTag) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case teachertag.FieldID, teachertag.FieldTeacherID:
			values[i] = new(sql.NullInt64)
		case teachertag.FieldUUID, teachertag.FieldName:
			values[i] = new(sql.NullString)
		case teachertag.FieldCreatedAt, teachertag.FieldUpdatedAt, teachertag.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TeacherTag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeacherTag fields.
func (tt *TeacherTag) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teachertag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = int(value.Int64)
		case teachertag.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tt.UUID = value.String
			}
		case teachertag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tt.CreatedAt = new(time.Time)
				*tt.CreatedAt = value.Time
			}
		case teachertag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tt.UpdatedAt = new(time.Time)
				*tt.UpdatedAt = value.Time
			}
		case teachertag.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tt.DeletedAt = new(time.Time)
				*tt.DeletedAt = value.Time
			}
		case teachertag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tt.Name = value.String
			}
		case teachertag.FieldTeacherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_id", values[i])
			} else if value.Valid {
				tt.TeacherID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTeacher queries the "teacher" edge of the TeacherTag entity.
func (tt *TeacherTag) QueryTeacher() *TeacherQuery {
	return (&TeacherTagClient{config: tt.config}).QueryTeacher(tt)
}

// Update returns a builder for updating this TeacherTag.
// Note that you need to call TeacherTag.Unwrap() before calling this method if this TeacherTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TeacherTag) Update() *TeacherTagUpdateOne {
	return (&TeacherTagClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the TeacherTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TeacherTag) Unwrap() *TeacherTag {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeacherTag is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TeacherTag) String() string {
	var builder strings.Builder
	builder.WriteString("TeacherTag(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tt.UUID)
	if v := tt.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tt.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tt.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(tt.Name)
	builder.WriteString(", teacher_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TeacherID))
	builder.WriteByte(')')
	return builder.String()
}

// TeacherTags is a parsable slice of TeacherTag.
type TeacherTags []*TeacherTag

func (tt TeacherTags) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/kccoursechapter"
	"tkserver/internal/store/ent/kccoursesection"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseSectionQuery is the builder for querying KcCourseSection entities.
type KcCourseSectionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.KcCourseSection
	// eager-loading edges.
	withChapter             *KcCourseChapterQuery
	withCourseSmallSections *KcCourseSmallCategoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KcCourseSectionQuery builder.
func (kcsq *KcCourseSectionQuery) Where(ps ...predicate.KcCourseSection) *KcCourseSectionQuery {
	kcsq.predicates = append(kcsq.predicates, ps...)
	return kcsq
}

// Limit adds a limit step to the query.
func (kcsq *KcCourseSectionQuery) Limit(limit int) *KcCourseSectionQuery {
	kcsq.limit = &limit
	return kcsq
}

// Offset adds an offset step to the query.
func (kcsq *KcCourseSectionQuery) Offset(offset int) *KcCourseSectionQuery {
	kcsq.offset = &offset
	return kcsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kcsq *KcCourseSectionQuery) Unique(unique bool) *KcCourseSectionQuery {
	kcsq.unique = &unique
	return kcsq
}

// Order adds an order step to the query.
func (kcsq *KcCourseSectionQuery) Order(o ...OrderFunc) *KcCourseSectionQuery {
	kcsq.order = append(kcsq.order, o...)
	return kcsq
}

// QueryChapter chains the current query on the "chapter" edge.
func (kcsq *KcCourseSectionQuery) QueryChapter() *KcCourseChapterQuery {
	query := &KcCourseChapterQuery{config: kcsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesection.Table, kccoursesection.FieldID, selector),
			sqlgraph.To(kccoursechapter.Table, kccoursechapter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursesection.ChapterTable, kccoursesection.ChapterColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourseSmallSections chains the current query on the "course_small_sections" edge.
func (kcsq *KcCourseSectionQuery) QueryCourseSmallSections() *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: kcsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesection.Table, kccoursesection.FieldID, selector),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesection.CourseSmallSectionsTable, kccoursesection.CourseSmallSectionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KcCourseSection entity from the query.
// Returns a *NotFoundError when no KcCourseSection was found.
func (kcsq *KcCourseSectionQuery) First(ctx context.Context) (*KcCourseSection, error) {
	nodes, err := kcsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kccoursesection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kcsq *KcCourseSectionQuery) FirstX(ctx context.Context) *KcCourseSection {
	node, err := kcsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KcCourseSection ID from the query.
// Returns a *NotFoundError when no KcCourseSection ID was found.
func (kcsq *KcCourseSectionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kcsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kccoursesection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kcsq *KcCourseSectionQuery) FirstIDX(ctx context.Context) int {
	id, err := kcsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KcCourseSection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one KcCourseSection entity is not found.
// Returns a *NotFoundError when no KcCourseSection entities are found.
func (kcsq *KcCourseSectionQuery) Only(ctx context.Context) (*KcCourseSection, error) {
	nodes, err := kcsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kccoursesection.Label}
	default:
		return nil, &NotSingularError{kccoursesection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kcsq *KcCourseSectionQuery) OnlyX(ctx context.Context) *KcCourseSection {
	node, err := kcsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KcCourseSection ID in the query.
// Returns a *NotSingularError when exactly one KcCourseSection ID is not found.
// Returns a *NotFoundError when no entities are found.
func (kcsq *KcCourseSectionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kcsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kccoursesection.Label}
	default:
		err = &NotSingularError{kccoursesection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kcsq *KcCourseSectionQuery) OnlyIDX(ctx context.Context) int {
	id, err := kcsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KcCourseSections.
func (kcsq *KcCourseSectionQuery) All(ctx context.Context) ([]*KcCourseSection, error) {
	if err := kcsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return kcsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (kcsq *KcCourseSectionQuery) AllX(ctx context.Context) []*KcCourseSection {
	nodes, err := kcsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KcCourseSection IDs.
func (kcsq *KcCourseSectionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := kcsq.Select(kccoursesection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kcsq *KcCourseSectionQuery) IDsX(ctx context.Context) []int {
	ids, err := kcsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kcsq *KcCourseSectionQuery) Count(ctx context.Context) (int, error) {
	if err := kcsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return kcsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (kcsq *KcCourseSectionQuery) CountX(ctx context.Context) int {
	count, err := kcsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kcsq *KcCourseSectionQuery) Exist(ctx context.Context) (bool, error) {
	if err := kcsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return kcsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (kcsq *KcCourseSectionQuery) ExistX(ctx context.Context) bool {
	exist, err := kcsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KcCourseSectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kcsq *KcCourseSectionQuery) Clone() *KcCourseSectionQuery {
	if kcsq == nil {
		return nil
	}
	return &KcCourseSectionQuery{
		config:                  kcsq.config,
		limit:                   kcsq.limit,
		offset:                  kcsq.offset,
		order:                   append([]OrderFunc{}, kcsq.order...),
		predicates:              append([]predicate.KcCourseSection{}, kcsq.predicates...),
		withChapter:             kcsq.withChapter.Clone(),
		withCourseSmallSections: kcsq.withCourseSmallSections.Clone(),
		// clone intermediate query.
		sql:  kcsq.sql.Clone(),
		path: kcsq.path,
	}
}

// WithChapter tells the query-builder to eager-load the nodes that are connected to
// the "chapter" edge. The optional arguments are used to configure the query builder of the edge.
func (kcsq *KcCourseSectionQuery) WithChapter(opts ...func(*KcCourseChapterQuery)) *KcCourseSectionQuery {
	query := &KcCourseChapterQuery{config: kcsq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcsq.withChapter = query
	return kcsq
}

// WithCourseSmallSections tells the query-builder to eager-load the nodes that are connected to
// the "course_small_sections" edge. The optional arguments are used to configure the query builder of the edge.
func (kcsq *KcCourseSectionQuery) WithCourseSmallSections(opts ...func(*KcCourseSmallCategoryQuery)) *KcCourseSectionQuery {
	query := &KcCourseSmallCategoryQuery{config: kcsq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcsq.withCourseSmallSections = query
	return kcsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CourseChapterID int `json:"course_chapter_id"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KcCourseSection.Query().
//		GroupBy(kccoursesection.FieldCourseChapterID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (kcsq *KcCourseSectionQuery) GroupBy(field string, fields ...string) *KcCourseSectionGroupBy {
	group := &KcCourseSectionGroupBy{config: kcsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kcsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kcsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CourseChapterID int `json:"course_chapter_id"`
//	}
//
//	client.KcCourseSection.Query().
//		Select(kccoursesection.FieldCourseChapterID).
//		Scan(ctx, &v)
//
func (kcsq *KcCourseSectionQuery) Select(field string, fields ...string) *KcCourseSectionSelect {
	kcsq.fields = append([]string{field}, fields...)
	return &KcCourseSectionSelect{KcCourseSectionQuery: kcsq}
}

func (kcsq *KcCourseSectionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range kcsq.fields {
		if !kccoursesection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kcsq.path != nil {
		prev, err := kcsq.path(ctx)
		if err != nil {
			return err
		}
		kcsq.sql = prev
	}
	return nil
}

func (kcsq *KcCourseSectionQuery) sqlAll(ctx context.Context) ([]*KcCourseSection, error) {
	var (
		nodes       = []*KcCourseSection{}
		_spec       = kcsq.querySpec()
		loadedTypes = [2]bool{
			kcsq.withChapter != nil,
			kcsq.withCourseSmallSections != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &KcCourseSection{config: kcsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, kcsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := kcsq.withChapter; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcCourseSection)
		for i := range nodes {
			fk := nodes[i].CourseChapterID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(kccoursechapter.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "course_chapter_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Chapter = n
			}
		}
	}

	if query := kcsq.withCourseSmallSections; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcCourseSection)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CourseSmallSections = []*KcCourseSmallCategory{}
		}
		query.Where(predicate.KcCourseSmallCategory(func(s *sql.Selector) {
			s.Where(sql.InValues(kccoursesection.CourseSmallSectionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SectionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "section_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CourseSmallSections = append(node.Edges.CourseSmallSections, n)
		}
	}

	return nodes, nil
}

func (kcsq *KcCourseSectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kcsq.querySpec()
	return sqlgraph.CountNodes(ctx, kcsq.driver, _spec)
}

func (kcsq *KcCourseSectionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := kcsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (kcsq *KcCourseSectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursesection.Table,
			Columns: kccoursesection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursesection.FieldID,
			},
		},
		From:   kcsq.sql,
		Unique: true,
	}
	if unique := kcsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := kcsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kccoursesection.FieldID)
		for i := range fields {
			if fields[i] != kccoursesection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kcsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kcsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kcsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kcsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kcsq *KcCourseSectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kcsq.driver.Dialect())
	t1 := builder.Table(kccoursesection.Table)
	selector := builder.Select(t1.Columns(kccoursesection.Columns...)...).From(t1)
	if kcsq.sql != nil {
		selector = kcsq.sql
		selector.Select(selector.Columns(kccoursesection.Columns...)...)
	}
	for _, p := range kcsq.predicates {
		p(selector)
	}
	for _, p := range kcsq.order {
		p(selector)
	}
	if offset := kcsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kcsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KcCourseSectionGroupBy is the group-by builder for KcCourseSection entities.
type KcCourseSectionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kcsgb *KcCourseSectionGroupBy) Aggregate(fns ...AggregateFunc) *KcCourseSectionGroupBy {
	kcsgb.fns = append(kcsgb.fns, fns...)
	return kcsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (kcsgb *KcCourseSectionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := kcsgb.path(ctx)
	if err != nil {
		return err
	}
	kcsgb.sql = query
	return kcsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kcsgb *KcCourseSectionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := kcsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcsgb *KcCourseSectionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(kcsgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseSectionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := kcsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kcsgb *KcCourseSectionGroupBy) StringsX(ctx context.Context) []string {
	v, err := kcsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcsgb *KcCourseSectionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kcsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesection.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSectionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kcsgb *KcCourseSectionGroupBy) StringX(ctx context.Context) string {
	v, err := kcsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcsgb *KcCourseSectionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(kcsgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseSectionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := kcsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kcsgb *KcCourseSectionGroupBy) IntsX(ctx context.Context) []int {
	v, err := kcsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcsgb *KcCourseSectionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kcsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesection.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSectionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kcsgb *KcCourseSectionGroupBy) IntX(ctx context.Context) int {
	v, err := kcsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcsgb *KcCourseSectionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(kcsgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseSectionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := kcsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kcsgb *KcCourseSectionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := kcsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcsgb *KcCourseSectionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kcsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesection.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSectionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kcsgb *KcCourseSectionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := kcsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcsgb *KcCourseSectionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(kcsgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseSectionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := kcsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kcsgb *KcCourseSectionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := kcsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcsgb *KcCourseSectionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kcsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesection.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSectionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kcsgb *KcCourseSectionGroupBy) BoolX(ctx context.Context) bool {
	v, err := kcsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kcsgb *KcCourseSectionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range kcsgb.fields {
		if !kccoursesection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kcsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kcsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kcsgb *KcCourseSectionGroupBy) sqlQuery() *sql.Selector {
	selector := kcsgb.sql
	columns := make([]string, 0, len(kcsgb.fields)+len(kcsgb.fns))
	columns = append(columns, kcsgb.fields...)
	for _, fn := range kcsgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(kcsgb.fields...)
}

// KcCourseSectionSelect is the builder for selecting fields of KcCourseSection entities.
type KcCourseSectionSelect struct {
	*KcCourseSectionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (kcss *KcCourseSectionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := kcss.prepareQuery(ctx); err != nil {
		return err
	}
	kcss.sql = kcss.KcCourseSectionQuery.sqlQuery(ctx)
	return kcss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kcss *KcCourseSectionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := kcss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (kcss *KcCourseSectionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(kcss.fields) > 1 {
		return nil, errors.New("ent: KcCourseSectionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := kcss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kcss *KcCourseSectionSelect) StringsX(ctx context.Context) []string {
	v, err := kcss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (kcss *KcCourseSectionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kcss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesection.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSectionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kcss *KcCourseSectionSelect) StringX(ctx context.Context) string {
	v, err := kcss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (kcss *KcCourseSectionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(kcss.fields) > 1 {
		return nil, errors.New("ent: KcCourseSectionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := kcss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kcss *KcCourseSectionSelect) IntsX(ctx context.Context) []int {
	v, err := kcss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (kcss *KcCourseSectionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kcss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesection.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSectionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kcss *KcCourseSectionSelect) IntX(ctx context.Context) int {
	v, err := kcss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (kcss *KcCourseSectionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(kcss.fields) > 1 {
		return nil, errors.New("ent: KcCourseSectionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := kcss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kcss *KcCourseSectionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := kcss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (kcss *KcCourseSectionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kcss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesection.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSectionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kcss *KcCourseSectionSelect) Float64X(ctx context.Context) float64 {
	v, err := kcss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (kcss *KcCourseSectionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(kcss.fields) > 1 {
		return nil, errors.New("ent: KcCourseSectionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := kcss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kcss *KcCourseSectionSelect) BoolsX(ctx context.Context) []bool {
	v, err := kcss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (kcss *KcCourseSectionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kcss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesection.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSectionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kcss *KcCourseSectionSelect) BoolX(ctx context.Context) bool {
	v, err := kcss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kcss *KcCourseSectionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := kcss.sqlQuery().Query()
	if err := kcss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kcss *KcCourseSectionSelect) sqlQuery() sql.Querier {
	selector := kcss.sql
	selector.Select(selector.Columns(kcss.fields...)...)
	return selector
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/user"
	"tkserver/internal/store/ent/useraskanswer"

	"entgo.io/ent/dialect/sql"
)

// UserAskAnswer is the model entity for the UserAskAnswer schema.
type UserAskAnswer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// AskDesc holds the value of the "ask_desc" field.
	// 问题描述
	AskDesc string `json:"ask_desc"`
	// AnswerStatus holds the value of the "answer_status" field.
	// 1:已解答，2:未解答
	AnswerStatus uint8 `json:"answer_status"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int `json:"user_id"`
	// TeacherID holds the value of the "teacher_id" field.
	// 老师id
	TeacherID int `json:"teacher_id"`
	// ShowStatus holds the value of the "show_status" field.
	// 问答显示状态：1:显示，2:隐藏
	ShowStatus uint8 `json:"show_status"`
	// ReplyShowStatus holds the value of the "reply_show_status" field.
	// 回复显示状态：1:显示，2:隐藏
	ReplyShowStatus uint8 `json:"reply_show_status"`
	// AnswerDesc holds the value of the "answer_desc" field.
	// 问题回复
	AnswerDesc string `json:"answer_desc"`
	// AnswerAt holds the value of the "answer_at" field.
	// 回复时间
	AnswerAt time.Time `json:"answer_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAskAnswerQuery when eager-loading is set.
	Edges UserAskAnswerEdges `json:"edges"`
}

// UserAskAnswerEdges holds the relations/edges for other nodes in the graph.
type UserAskAnswerEdges struct {
	// Teacher holds the value of the teacher edge.
	Teacher *Teacher `json:"teacher,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// AskAnswersAttachments holds the value of the ask_answers_attachments edge.
	AskAnswersAttachments []*UserAskAnswerAttachment `json:"ask_answers_attachments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAskAnswerEdges) TeacherOrErr() (*Teacher, error) {
	if e.loadedTypes[0] {
		if e.Teacher == nil {
			// The edge teacher was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.Teacher, nil
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAskAnswerEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AskAnswersAttachmentsOrErr returns the AskAnswersAttachments value or an error if the edge
// was not loaded in eager-loading.
func (e UserAskAnswerEdges) AskAnswersAttachmentsOrErr() ([]*UserAskAnswerAttachment, error) {
	if e.loadedTypes[2] {
		return e.AskAnswersAttachments, nil
	}
	return nil, &NotLoadedError{edge: "ask_answers_attachments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAskAnswer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case useraskanswer.FieldID, useraskanswer.FieldAnswerStatus, useraskanswer.FieldUserID, useraskanswer.FieldTeacherID, useraskanswer.FieldShowStatus, useraskanswer.FieldReplyShowStatus:
			values[i] = new(sql.NullInt64)
		case useraskanswer.FieldUUID, useraskanswer.FieldAskDesc, useraskanswer.FieldAnswerDesc:
			values[i] = new(sql.NullString)
		case useraskanswer.FieldCreatedAt, useraskanswer.FieldUpdatedAt, useraskanswer.FieldDeletedAt, useraskanswer.FieldAnswerAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserAskAnswer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAskAnswer fields.
func (uaa *UserAskAnswer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useraskanswer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uaa.ID = int(value.Int64)
		case useraskanswer.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				uaa.UUID = value.String
			}
		case useraskanswer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uaa.CreatedAt = new(time.Time)
				*uaa.CreatedAt = value.Time
			}
		case useraskanswer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uaa.UpdatedAt = new(time.Time)
				*uaa.UpdatedAt = value.Time
			}
		case useraskanswer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				uaa.DeletedAt = new(time.Time)
				*uaa.DeletedAt = value.Time
			}
		case useraskanswer.FieldAskDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ask_desc", values[i])
			} else if value.Valid {
				uaa.AskDesc = value.String
			}
		case useraskanswer.FieldAnswerStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field answer_status", values[i])
			} else if value.Valid {
				uaa.AnswerStatus = uint8(value.Int64)
			}
		case useraskanswer.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uaa.UserID = int(value.Int64)
			}
		case useraskanswer.FieldTeacherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_id", values[i])
			} else if value.Valid {
				uaa.TeacherID = int(value.Int64)
			}
		case useraskanswer.FieldShowStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field show_status", values[i])
			} else if value.Valid {
				uaa.ShowStatus = uint8(value.Int64)
			}
		case useraskanswer.FieldReplyShowStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reply_show_status", values[i])
			} else if value.Valid {
				uaa.ReplyShowStatus = uint8(value.Int64)
			}
		case useraskanswer.FieldAnswerDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer_desc", values[i])
			} else if value.Valid {
				uaa.AnswerDesc = value.String
			}
		case useraskanswer.FieldAnswerAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field answer_at", values[i])
			} else if value.Valid {
				uaa.AnswerAt = value.Time
			}
		}
	}
	return nil
}

// QueryTeacher queries the "teacher" edge of the UserAskAnswer entity.
func (uaa *UserAskAnswer) QueryTeacher() *TeacherQuery {
	return (&UserAskAnswerClient{config: uaa.config}).QueryTeacher(uaa)
}

// QueryUser queries the "user" edge of the UserAskAnswer entity.
func (uaa *UserAskAnswer) QueryUser() *UserQuery {
	return (&UserAskAnswerClient{config: uaa.config}).QueryUser(uaa)
}

// QueryAskAnswersAttachments queries the "ask_answers_attachments" edge of the UserAskAnswer entity.
func (uaa *UserAskAnswer) QueryAskAnswersAttachments() *UserAskAnswerAttachmentQuery {
	return (&UserAskAnswerClient{config: uaa.config}).QueryAskAnswersAttachments(uaa)
}

// Update returns a builder for updating this UserAskAnswer.
// Note that you need to call UserAskAnswer.Unwrap() before calling this method if this UserAskAnswer
// was returned from a transaction, and the transaction was committed or rolled back.
func (uaa *UserAskAnswer) Update() *UserAskAnswerUpdateOne {
	return (&UserAskAnswerClient{config: uaa.config}).UpdateOne(uaa)
}

// Unwrap unwraps the UserAskAnswer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uaa *UserAskAnswer) Unwrap() *UserAskAnswer {
	tx, ok := uaa.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAskAnswer is not a transactional entity")
	}
	uaa.config.driver = tx.drv
	return uaa
}

// String implements the fmt.Stringer.
func (uaa *UserAskAnswer) String() string {
	var builder strings.Builder
	builder.WriteString("UserAskAnswer(")
	builder.WriteString(fmt.Sprintf("id=%v", uaa.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(uaa.UUID)
	if v := uaa.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := uaa.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := uaa.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ask_desc=")
	builder.WriteString(uaa.AskDesc)
	builder.WriteString(", answer_status=")
	builder.WriteString(fmt.Sprintf("%v", uaa.AnswerStatus))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", uaa.UserID))
	builder.WriteString(", teacher_id=")
	builder.WriteString(fmt.Sprintf("%v", uaa.TeacherID))
	builder.WriteString(", show_status=")
	builder.WriteString(fmt.Sprintf("%v", uaa.ShowStatus))
	builder.WriteString(", reply_show_status=")
	builder.WriteString(fmt.Sprintf("%v", uaa.ReplyShowStatus))
	builder.WriteString(", answer_desc=")
	builder.WriteString(uaa.AnswerDesc)
	builder.WriteString(", answer_at=")
	builder.WriteString(uaa.AnswerAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserAskAnswers is a parsable slice of UserAskAnswer.
type UserAskAnswers []*UserAskAnswer

func (uaa UserAskAnswers) config(cfg config) {
	for _i := range uaa {
		uaa[_i].config = cfg
	}
}

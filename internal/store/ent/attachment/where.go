// Code generated by entc, DO NOT EDIT.

package attachment

import (
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v uint32) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileSize), v))
	})
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMimeType), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// AdminID applies equality check predicate on the "admin_id" field. It's identical to AdminIDEQ.
func AdminID(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdminID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilename), v))
	})
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilename), v...))
	})
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilename), v...))
	})
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilename), v))
	})
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilename), v))
	})
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilename), v))
	})
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilename), v))
	})
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilename), v))
	})
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilename), v))
	})
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilename), v))
	})
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilename), v))
	})
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilename), v))
	})
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v uint32) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileSize), v))
	})
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v uint32) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileSize), v))
	})
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...uint32) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileSize), v...))
	})
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...uint32) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileSize), v...))
	})
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v uint32) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileSize), v))
	})
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v uint32) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileSize), v))
	})
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v uint32) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileSize), v))
	})
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v uint32) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileSize), v))
	})
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMimeType), v))
	})
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMimeType), v))
	})
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMimeType), v...))
	})
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMimeType), v...))
	})
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMimeType), v))
	})
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMimeType), v))
	})
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMimeType), v))
	})
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMimeType), v))
	})
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMimeType), v))
	})
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMimeType), v))
	})
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMimeType), v))
	})
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMimeType), v))
	})
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMimeType), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// AdminIDEQ applies the EQ predicate on the "admin_id" field.
func AdminIDEQ(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdminID), v))
	})
}

// AdminIDNEQ applies the NEQ predicate on the "admin_id" field.
func AdminIDNEQ(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdminID), v))
	})
}

// AdminIDIn applies the In predicate on the "admin_id" field.
func AdminIDIn(vs ...int) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdminID), v...))
	})
}

// AdminIDNotIn applies the NotIn predicate on the "admin_id" field.
func AdminIDNotIn(vs ...int) predicate.Attachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Attachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdminID), v...))
	})
}

// AdminIDGT applies the GT predicate on the "admin_id" field.
func AdminIDGT(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdminID), v))
	})
}

// AdminIDGTE applies the GTE predicate on the "admin_id" field.
func AdminIDGTE(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdminID), v))
	})
}

// AdminIDLT applies the LT predicate on the "admin_id" field.
func AdminIDLT(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdminID), v))
	})
}

// AdminIDLTE applies the LTE predicate on the "admin_id" field.
func AdminIDLTE(v int) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdminID), v))
	})
}

// AdminIDIsNil applies the IsNil predicate on the "admin_id" field.
func AdminIDIsNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdminID)))
	})
}

// AdminIDNotNil applies the NotNil predicate on the "admin_id" field.
func AdminIDNotNil() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdminID)))
	})
}

// HasMajorDetailCoverImg applies the HasEdge predicate on the "major_detail_cover_img" edge.
func HasMajorDetailCoverImg() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorDetailCoverImgTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MajorDetailCoverImgTable, MajorDetailCoverImgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMajorDetailCoverImgWith applies the HasEdge predicate on the "major_detail_cover_img" edge with a given conditions (other predicates).
func HasMajorDetailCoverImgWith(preds ...predicate.MajorDetail) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorDetailCoverImgInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MajorDetailCoverImgTable, MajorDetailCoverImgColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMajorDetailSubjectImg applies the HasEdge predicate on the "major_detail_subject_img" edge.
func HasMajorDetailSubjectImg() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorDetailSubjectImgTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MajorDetailSubjectImgTable, MajorDetailSubjectImgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMajorDetailSubjectImgWith applies the HasEdge predicate on the "major_detail_subject_img" edge with a given conditions (other predicates).
func HasMajorDetailSubjectImgWith(preds ...predicate.MajorDetail) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorDetailSubjectImgInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MajorDetailSubjectImgTable, MajorDetailSubjectImgColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMajorTeacherAttachment applies the HasEdge predicate on the "major_teacher_attachment" edge.
func HasMajorTeacherAttachment() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorTeacherAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MajorTeacherAttachmentTable, MajorTeacherAttachmentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMajorTeacherAttachmentWith applies the HasEdge predicate on the "major_teacher_attachment" edge with a given conditions (other predicates).
func HasMajorTeacherAttachmentWith(preds ...predicate.MajorDetail) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorTeacherAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MajorTeacherAttachmentTable, MajorTeacherAttachmentPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMajorServiceAttachment applies the HasEdge predicate on the "major_service_attachment" edge.
func HasMajorServiceAttachment() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorServiceAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MajorServiceAttachmentTable, MajorServiceAttachmentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMajorServiceAttachmentWith applies the HasEdge predicate on the "major_service_attachment" edge with a given conditions (other predicates).
func HasMajorServiceAttachmentWith(preds ...predicate.MajorDetail) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorServiceAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MajorServiceAttachmentTable, MajorServiceAttachmentPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdvertise applies the HasEdge predicate on the "advertise" edge.
func HasAdvertise() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdvertiseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AdvertiseTable, AdvertiseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdvertiseWith applies the HasEdge predicate on the "advertise" edge with a given conditions (other predicates).
func HasAdvertiseWith(preds ...predicate.Advertise) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdvertiseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AdvertiseTable, AdvertiseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessageAttachment applies the HasEdge predicate on the "message_attachment" edge.
func HasMessageAttachment() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MessageAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessageAttachmentTable, MessageAttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageAttachmentWith applies the HasEdge predicate on the "message_attachment" edge with a given conditions (other predicates).
func HasMessageAttachmentWith(preds ...predicate.Message) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MessageAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessageAttachmentTable, MessageAttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSharePosterAttachments applies the HasEdge predicate on the "share_poster_attachments" edge.
func HasSharePosterAttachments() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SharePosterAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SharePosterAttachmentsTable, SharePosterAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSharePosterAttachmentsWith applies the HasEdge predicate on the "share_poster_attachments" edge with a given conditions (other predicates).
func HasSharePosterAttachmentsWith(preds ...predicate.SharePoster) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SharePosterAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SharePosterAttachmentsTable, SharePosterAttachmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeacherAttachments applies the HasEdge predicate on the "teacher_attachments" edge.
func HasTeacherAttachments() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TeacherAttachmentsTable, TeacherAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeacherAttachmentsWith applies the HasEdge predicate on the "teacher_attachments" edge with a given conditions (other predicates).
func HasTeacherAttachmentsWith(preds ...predicate.Teacher) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TeacherAttachmentsTable, TeacherAttachmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdminImgID applies the HasEdge predicate on the "admin_img_id" edge.
func HasAdminImgID() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminImgIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AdminImgIDTable, AdminImgIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminImgIDWith applies the HasEdge predicate on the "admin_img_id" edge with a given conditions (other predicates).
func HasAdminImgIDWith(preds ...predicate.Admin) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminImgIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AdminImgIDTable, AdminImgIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSmallCategoryAttachments applies the HasEdge predicate on the "small_category_attachments" edge.
func HasSmallCategoryAttachments() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmallCategoryAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SmallCategoryAttachmentsTable, SmallCategoryAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSmallCategoryAttachmentsWith applies the HasEdge predicate on the "small_category_attachments" edge with a given conditions (other predicates).
func HasSmallCategoryAttachmentsWith(preds ...predicate.KcSmallCategoryAttachment) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmallCategoryAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SmallCategoryAttachmentsTable, SmallCategoryAttachmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourseAttachments applies the HasEdge predicate on the "course_attachments" edge.
func HasCourseAttachments() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseAttachmentsTable, CourseAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseAttachmentsWith applies the HasEdge predicate on the "course_attachments" edge with a given conditions (other predicates).
func HasCourseAttachmentsWith(preds ...predicate.KcCourse) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseAttachmentsTable, CourseAttachmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClassCoverAttachments applies the HasEdge predicate on the "class_cover_attachments" edge.
func HasClassCoverAttachments() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassCoverAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClassCoverAttachmentsTable, ClassCoverAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassCoverAttachmentsWith applies the HasEdge predicate on the "class_cover_attachments" edge with a given conditions (other predicates).
func HasClassCoverAttachmentsWith(preds ...predicate.KcClass) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassCoverAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClassCoverAttachmentsTable, ClassCoverAttachmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCoursewareAttachment applies the HasEdge predicate on the "courseware_attachment" edge.
func HasCoursewareAttachment() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CoursewareAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CoursewareAttachmentTable, CoursewareAttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoursewareAttachmentWith applies the HasEdge predicate on the "courseware_attachment" edge with a given conditions (other predicates).
func HasCoursewareAttachmentWith(preds ...predicate.KcCourseSmallCategory) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CoursewareAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CoursewareAttachmentTable, CoursewareAttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderAttachment applies the HasEdge predicate on the "order_attachment" edge.
func HasOrderAttachment() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, OrderAttachmentTable, OrderAttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderAttachmentWith applies the HasEdge predicate on the "order_attachment" edge with a given conditions (other predicates).
func HasOrderAttachmentWith(preds ...predicate.KcCourseSmallCategory) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, OrderAttachmentTable, OrderAttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVideoTaskAttachment applies the HasEdge predicate on the "video_task_attachment" edge.
func HasVideoTaskAttachment() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VideoTaskAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideoTaskAttachmentTable, VideoTaskAttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoTaskAttachmentWith applies the HasEdge predicate on the "video_task_attachment" edge with a given conditions (other predicates).
func HasVideoTaskAttachmentWith(preds ...predicate.KcVideoUploadTask) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VideoTaskAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideoTaskAttachmentTable, VideoTaskAttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAskAttachments applies the HasEdge predicate on the "ask_attachments" edge.
func HasAskAttachments() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AskAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AskAttachmentsTable, AskAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAskAttachmentsWith applies the HasEdge predicate on the "ask_attachments" edge with a given conditions (other predicates).
func HasAskAttachmentsWith(preds ...predicate.UserAskAnswerAttachment) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AskAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AskAttachmentsTable, AskAttachmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Attachment) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Attachment) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Attachment) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		p(s.Not())
	})
}

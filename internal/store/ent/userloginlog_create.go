// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/user"
	"tkserver/internal/store/ent/userloginlog"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserLoginLogCreate is the builder for creating a UserLoginLog entity.
type UserLoginLogCreate struct {
	config
	mutation *UserLoginLogMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (ullc *UserLoginLogCreate) SetUUID(s string) *UserLoginLogCreate {
	ullc.mutation.SetUUID(s)
	return ullc
}

// SetCreatedAt sets the "created_at" field.
func (ullc *UserLoginLogCreate) SetCreatedAt(t time.Time) *UserLoginLogCreate {
	ullc.mutation.SetCreatedAt(t)
	return ullc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ullc *UserLoginLogCreate) SetNillableCreatedAt(t *time.Time) *UserLoginLogCreate {
	if t != nil {
		ullc.SetCreatedAt(*t)
	}
	return ullc
}

// SetUpdatedAt sets the "updated_at" field.
func (ullc *UserLoginLogCreate) SetUpdatedAt(t time.Time) *UserLoginLogCreate {
	ullc.mutation.SetUpdatedAt(t)
	return ullc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ullc *UserLoginLogCreate) SetNillableUpdatedAt(t *time.Time) *UserLoginLogCreate {
	if t != nil {
		ullc.SetUpdatedAt(*t)
	}
	return ullc
}

// SetDeletedAt sets the "deleted_at" field.
func (ullc *UserLoginLogCreate) SetDeletedAt(t time.Time) *UserLoginLogCreate {
	ullc.mutation.SetDeletedAt(t)
	return ullc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ullc *UserLoginLogCreate) SetNillableDeletedAt(t *time.Time) *UserLoginLogCreate {
	if t != nil {
		ullc.SetDeletedAt(*t)
	}
	return ullc
}

// SetCid sets the "cid" field.
func (ullc *UserLoginLogCreate) SetCid(s string) *UserLoginLogCreate {
	ullc.mutation.SetCid(s)
	return ullc
}

// SetNillableCid sets the "cid" field if the given value is not nil.
func (ullc *UserLoginLogCreate) SetNillableCid(s *string) *UserLoginLogCreate {
	if s != nil {
		ullc.SetCid(*s)
	}
	return ullc
}

// SetPlatform sets the "platform" field.
func (ullc *UserLoginLogCreate) SetPlatform(s string) *UserLoginLogCreate {
	ullc.mutation.SetPlatform(s)
	return ullc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (ullc *UserLoginLogCreate) SetNillablePlatform(s *string) *UserLoginLogCreate {
	if s != nil {
		ullc.SetPlatform(*s)
	}
	return ullc
}

// SetDevice sets the "device" field.
func (ullc *UserLoginLogCreate) SetDevice(s string) *UserLoginLogCreate {
	ullc.mutation.SetDevice(s)
	return ullc
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (ullc *UserLoginLogCreate) SetNillableDevice(s *string) *UserLoginLogCreate {
	if s != nil {
		ullc.SetDevice(*s)
	}
	return ullc
}

// SetVersion sets the "version" field.
func (ullc *UserLoginLogCreate) SetVersion(s string) *UserLoginLogCreate {
	ullc.mutation.SetVersion(s)
	return ullc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ullc *UserLoginLogCreate) SetNillableVersion(s *string) *UserLoginLogCreate {
	if s != nil {
		ullc.SetVersion(*s)
	}
	return ullc
}

// SetIP sets the "ip" field.
func (ullc *UserLoginLogCreate) SetIP(s string) *UserLoginLogCreate {
	ullc.mutation.SetIP(s)
	return ullc
}

// SetProvince sets the "province" field.
func (ullc *UserLoginLogCreate) SetProvince(s string) *UserLoginLogCreate {
	ullc.mutation.SetProvince(s)
	return ullc
}

// SetCity sets the "city" field.
func (ullc *UserLoginLogCreate) SetCity(s string) *UserLoginLogCreate {
	ullc.mutation.SetCity(s)
	return ullc
}

// SetLatestLoginAt sets the "latest_login_at" field.
func (ullc *UserLoginLogCreate) SetLatestLoginAt(t time.Time) *UserLoginLogCreate {
	ullc.mutation.SetLatestLoginAt(t)
	return ullc
}

// SetNillableLatestLoginAt sets the "latest_login_at" field if the given value is not nil.
func (ullc *UserLoginLogCreate) SetNillableLatestLoginAt(t *time.Time) *UserLoginLogCreate {
	if t != nil {
		ullc.SetLatestLoginAt(*t)
	}
	return ullc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ullc *UserLoginLogCreate) SetUserID(id int) *UserLoginLogCreate {
	ullc.mutation.SetUserID(id)
	return ullc
}

// SetUser sets the "user" edge to the User entity.
func (ullc *UserLoginLogCreate) SetUser(u *User) *UserLoginLogCreate {
	return ullc.SetUserID(u.ID)
}

// Mutation returns the UserLoginLogMutation object of the builder.
func (ullc *UserLoginLogCreate) Mutation() *UserLoginLogMutation {
	return ullc.mutation
}

// Save creates the UserLoginLog in the database.
func (ullc *UserLoginLogCreate) Save(ctx context.Context) (*UserLoginLog, error) {
	var (
		err  error
		node *UserLoginLog
	)
	ullc.defaults()
	if len(ullc.hooks) == 0 {
		if err = ullc.check(); err != nil {
			return nil, err
		}
		node, err = ullc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ullc.check(); err != nil {
				return nil, err
			}
			ullc.mutation = mutation
			node, err = ullc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ullc.hooks) - 1; i >= 0; i-- {
			mut = ullc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ullc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ullc *UserLoginLogCreate) SaveX(ctx context.Context) *UserLoginLog {
	v, err := ullc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ullc *UserLoginLogCreate) defaults() {
	if _, ok := ullc.mutation.CreatedAt(); !ok {
		v := userloginlog.DefaultCreatedAt()
		ullc.mutation.SetCreatedAt(v)
	}
	if _, ok := ullc.mutation.UpdatedAt(); !ok {
		v := userloginlog.DefaultUpdatedAt()
		ullc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ullc.mutation.Cid(); !ok {
		v := userloginlog.DefaultCid
		ullc.mutation.SetCid(v)
	}
	if _, ok := ullc.mutation.Platform(); !ok {
		v := userloginlog.DefaultPlatform
		ullc.mutation.SetPlatform(v)
	}
	if _, ok := ullc.mutation.Device(); !ok {
		v := userloginlog.DefaultDevice
		ullc.mutation.SetDevice(v)
	}
	if _, ok := ullc.mutation.Version(); !ok {
		v := userloginlog.DefaultVersion
		ullc.mutation.SetVersion(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ullc *UserLoginLogCreate) check() error {
	if _, ok := ullc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := ullc.mutation.Cid(); !ok {
		return &ValidationError{Name: "cid", err: errors.New("ent: missing required field \"cid\"")}
	}
	if _, ok := ullc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New("ent: missing required field \"platform\"")}
	}
	if _, ok := ullc.mutation.Device(); !ok {
		return &ValidationError{Name: "device", err: errors.New("ent: missing required field \"device\"")}
	}
	if _, ok := ullc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New("ent: missing required field \"version\"")}
	}
	if _, ok := ullc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New("ent: missing required field \"ip\"")}
	}
	if _, ok := ullc.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New("ent: missing required field \"province\"")}
	}
	if _, ok := ullc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New("ent: missing required field \"city\"")}
	}
	if _, ok := ullc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (ullc *UserLoginLogCreate) sqlSave(ctx context.Context) (*UserLoginLog, error) {
	_node, _spec := ullc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ullc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ullc *UserLoginLogCreate) createSpec() (*UserLoginLog, *sqlgraph.CreateSpec) {
	var (
		_node = &UserLoginLog{config: ullc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userloginlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userloginlog.FieldID,
			},
		}
	)
	if value, ok := ullc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginlog.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ullc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginlog.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := ullc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginlog.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := ullc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginlog.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ullc.mutation.Cid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginlog.FieldCid,
		})
		_node.Cid = value
	}
	if value, ok := ullc.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginlog.FieldPlatform,
		})
		_node.Platform = value
	}
	if value, ok := ullc.mutation.Device(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginlog.FieldDevice,
		})
		_node.Device = value
	}
	if value, ok := ullc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginlog.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := ullc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginlog.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := ullc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginlog.FieldProvince,
		})
		_node.Province = value
	}
	if value, ok := ullc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginlog.FieldCity,
		})
		_node.City = value
	}
	if value, ok := ullc.mutation.LatestLoginAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginlog.FieldLatestLoginAt,
		})
		_node.LatestLoginAt = value
	}
	if nodes := ullc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginlog.UserTable,
			Columns: []string{userloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_login_log = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserLoginLogCreateBulk is the builder for creating many UserLoginLog entities in bulk.
type UserLoginLogCreateBulk struct {
	config
	builders []*UserLoginLogCreate
}

// Save creates the UserLoginLog entities in the database.
func (ullcb *UserLoginLogCreateBulk) Save(ctx context.Context) ([]*UserLoginLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ullcb.builders))
	nodes := make([]*UserLoginLog, len(ullcb.builders))
	mutators := make([]Mutator, len(ullcb.builders))
	for i := range ullcb.builders {
		func(i int, root context.Context) {
			builder := ullcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserLoginLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ullcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ullcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ullcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ullcb *UserLoginLogCreateBulk) SaveX(ctx context.Context) []*UserLoginLog {
	v, err := ullcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/role"
	"gserver/internal/store/ent/rolepermission"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RolePermissionUpdate is the builder for updating RolePermission entities.
type RolePermissionUpdate struct {
	config
	hooks    []Hook
	mutation *RolePermissionMutation
}

// Where adds a new predicate for the RolePermissionUpdate builder.
func (rpu *RolePermissionUpdate) Where(ps ...predicate.RolePermission) *RolePermissionUpdate {
	rpu.mutation.predicates = append(rpu.mutation.predicates, ps...)
	return rpu
}

// SetRoleID sets the "role_id" field.
func (rpu *RolePermissionUpdate) SetRoleID(i int) *RolePermissionUpdate {
	rpu.mutation.ResetRoleID()
	rpu.mutation.SetRoleID(i)
	return rpu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (rpu *RolePermissionUpdate) SetNillableRoleID(i *int) *RolePermissionUpdate {
	if i != nil {
		rpu.SetRoleID(*i)
	}
	return rpu
}

// ClearRoleID clears the value of the "role_id" field.
func (rpu *RolePermissionUpdate) ClearRoleID() *RolePermissionUpdate {
	rpu.mutation.ClearRoleID()
	return rpu
}

// SetPermissionID sets the "permission_id" field.
func (rpu *RolePermissionUpdate) SetPermissionID(s string) *RolePermissionUpdate {
	rpu.mutation.SetPermissionID(s)
	return rpu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rpu *RolePermissionUpdate) SetNillablePermissionID(s *string) *RolePermissionUpdate {
	if s != nil {
		rpu.SetPermissionID(*s)
	}
	return rpu
}

// ClearPermissionID clears the value of the "permission_id" field.
func (rpu *RolePermissionUpdate) ClearPermissionID() *RolePermissionUpdate {
	rpu.mutation.ClearPermissionID()
	return rpu
}

// SetRole sets the "role" edge to the Role entity.
func (rpu *RolePermissionUpdate) SetRole(r *Role) *RolePermissionUpdate {
	return rpu.SetRoleID(r.ID)
}

// Mutation returns the RolePermissionMutation object of the builder.
func (rpu *RolePermissionUpdate) Mutation() *RolePermissionMutation {
	return rpu.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (rpu *RolePermissionUpdate) ClearRole() *RolePermissionUpdate {
	rpu.mutation.ClearRole()
	return rpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RolePermissionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rpu.hooks) == 0 {
		affected, err = rpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RolePermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpu.mutation = mutation
			affected, err = rpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rpu.hooks) - 1; i >= 0; i-- {
			mut = rpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RolePermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RolePermissionUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RolePermissionUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpu *RolePermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolepermission.Table,
			Columns: rolepermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolepermission.FieldID,
			},
		},
	}
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.PermissionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolepermission.FieldPermissionID,
		})
	}
	if rpu.mutation.PermissionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rolepermission.FieldPermissionID,
		})
	}
	if rpu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepermission.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RolePermissionUpdateOne is the builder for updating a single RolePermission entity.
type RolePermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RolePermissionMutation
}

// SetRoleID sets the "role_id" field.
func (rpuo *RolePermissionUpdateOne) SetRoleID(i int) *RolePermissionUpdateOne {
	rpuo.mutation.ResetRoleID()
	rpuo.mutation.SetRoleID(i)
	return rpuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (rpuo *RolePermissionUpdateOne) SetNillableRoleID(i *int) *RolePermissionUpdateOne {
	if i != nil {
		rpuo.SetRoleID(*i)
	}
	return rpuo
}

// ClearRoleID clears the value of the "role_id" field.
func (rpuo *RolePermissionUpdateOne) ClearRoleID() *RolePermissionUpdateOne {
	rpuo.mutation.ClearRoleID()
	return rpuo
}

// SetPermissionID sets the "permission_id" field.
func (rpuo *RolePermissionUpdateOne) SetPermissionID(s string) *RolePermissionUpdateOne {
	rpuo.mutation.SetPermissionID(s)
	return rpuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rpuo *RolePermissionUpdateOne) SetNillablePermissionID(s *string) *RolePermissionUpdateOne {
	if s != nil {
		rpuo.SetPermissionID(*s)
	}
	return rpuo
}

// ClearPermissionID clears the value of the "permission_id" field.
func (rpuo *RolePermissionUpdateOne) ClearPermissionID() *RolePermissionUpdateOne {
	rpuo.mutation.ClearPermissionID()
	return rpuo
}

// SetRole sets the "role" edge to the Role entity.
func (rpuo *RolePermissionUpdateOne) SetRole(r *Role) *RolePermissionUpdateOne {
	return rpuo.SetRoleID(r.ID)
}

// Mutation returns the RolePermissionMutation object of the builder.
func (rpuo *RolePermissionUpdateOne) Mutation() *RolePermissionMutation {
	return rpuo.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (rpuo *RolePermissionUpdateOne) ClearRole() *RolePermissionUpdateOne {
	rpuo.mutation.ClearRole()
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *RolePermissionUpdateOne) Select(field string, fields ...string) *RolePermissionUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated RolePermission entity.
func (rpuo *RolePermissionUpdateOne) Save(ctx context.Context) (*RolePermission, error) {
	var (
		err  error
		node *RolePermission
	)
	if len(rpuo.hooks) == 0 {
		node, err = rpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RolePermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpuo.mutation = mutation
			node, err = rpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpuo.hooks) - 1; i >= 0; i-- {
			mut = rpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RolePermissionUpdateOne) SaveX(ctx context.Context) *RolePermission {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RolePermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RolePermissionUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpuo *RolePermissionUpdateOne) sqlSave(ctx context.Context) (_node *RolePermission, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolepermission.Table,
			Columns: rolepermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolepermission.FieldID,
			},
		},
	}
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RolePermission.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolepermission.FieldID)
		for _, f := range fields {
			if !rolepermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolepermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.PermissionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolepermission.FieldPermissionID,
		})
	}
	if rpuo.mutation.PermissionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rolepermission.FieldPermissionID,
		})
	}
	if rpuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RolePermission{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepermission.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

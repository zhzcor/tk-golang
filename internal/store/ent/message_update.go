// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/kcclass"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/message"
	"gserver/internal/store/ent/messagetype"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where adds a new predicate for the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetUUID sets the "uuid" field.
func (mu *MessageUpdate) SetUUID(s string) *MessageUpdate {
	mu.mutation.SetUUID(s)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MessageUpdate) SetUpdatedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MessageUpdate) ClearUpdatedAt() *MessageUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MessageUpdate) SetDeletedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableDeletedAt(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mu *MessageUpdate) ClearDeletedAt() *MessageUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetName sets the "name" field.
func (mu *MessageUpdate) SetName(s string) *MessageUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableName(s *string) *MessageUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetDetail sets the "detail" field.
func (mu *MessageUpdate) SetDetail(s string) *MessageUpdate {
	mu.mutation.SetDetail(s)
	return mu
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableDetail(s *string) *MessageUpdate {
	if s != nil {
		mu.SetDetail(*s)
	}
	return mu
}

// SetPublishType sets the "publish_type" field.
func (mu *MessageUpdate) SetPublishType(u uint8) *MessageUpdate {
	mu.mutation.ResetPublishType()
	mu.mutation.SetPublishType(u)
	return mu
}

// SetNillablePublishType sets the "publish_type" field if the given value is not nil.
func (mu *MessageUpdate) SetNillablePublishType(u *uint8) *MessageUpdate {
	if u != nil {
		mu.SetPublishType(*u)
	}
	return mu
}

// AddPublishType adds u to the "publish_type" field.
func (mu *MessageUpdate) AddPublishType(u uint8) *MessageUpdate {
	mu.mutation.AddPublishType(u)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MessageUpdate) SetStatus(u uint8) *MessageUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(u)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableStatus(u *uint8) *MessageUpdate {
	if u != nil {
		mu.SetStatus(*u)
	}
	return mu
}

// AddStatus adds u to the "status" field.
func (mu *MessageUpdate) AddStatus(u uint8) *MessageUpdate {
	mu.mutation.AddStatus(u)
	return mu
}

// SetPublishStatus sets the "publish_status" field.
func (mu *MessageUpdate) SetPublishStatus(u uint8) *MessageUpdate {
	mu.mutation.ResetPublishStatus()
	mu.mutation.SetPublishStatus(u)
	return mu
}

// SetNillablePublishStatus sets the "publish_status" field if the given value is not nil.
func (mu *MessageUpdate) SetNillablePublishStatus(u *uint8) *MessageUpdate {
	if u != nil {
		mu.SetPublishStatus(*u)
	}
	return mu
}

// AddPublishStatus adds u to the "publish_status" field.
func (mu *MessageUpdate) AddPublishStatus(u uint8) *MessageUpdate {
	mu.mutation.AddPublishStatus(u)
	return mu
}

// SetAutoPublishAt sets the "auto_publish_at" field.
func (mu *MessageUpdate) SetAutoPublishAt(t time.Time) *MessageUpdate {
	mu.mutation.SetAutoPublishAt(t)
	return mu
}

// SetNillableAutoPublishAt sets the "auto_publish_at" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableAutoPublishAt(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetAutoPublishAt(*t)
	}
	return mu
}

// ClearAutoPublishAt clears the value of the "auto_publish_at" field.
func (mu *MessageUpdate) ClearAutoPublishAt() *MessageUpdate {
	mu.mutation.ClearAutoPublishAt()
	return mu
}

// SetMessageTypeID sets the "message_type_id" field.
func (mu *MessageUpdate) SetMessageTypeID(i int) *MessageUpdate {
	mu.mutation.ResetMessageTypeID()
	mu.mutation.SetMessageTypeID(i)
	return mu
}

// SetNillableMessageTypeID sets the "message_type_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableMessageTypeID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetMessageTypeID(*i)
	}
	return mu
}

// ClearMessageTypeID clears the value of the "message_type_id" field.
func (mu *MessageUpdate) ClearMessageTypeID() *MessageUpdate {
	mu.mutation.ClearMessageTypeID()
	return mu
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (mu *MessageUpdate) SetCreatedAdminID(i int) *MessageUpdate {
	mu.mutation.ResetCreatedAdminID()
	mu.mutation.SetCreatedAdminID(i)
	return mu
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableCreatedAdminID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetCreatedAdminID(*i)
	}
	return mu
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (mu *MessageUpdate) ClearCreatedAdminID() *MessageUpdate {
	mu.mutation.ClearCreatedAdminID()
	return mu
}

// SetAttachmentID sets the "attachment_id" field.
func (mu *MessageUpdate) SetAttachmentID(i int) *MessageUpdate {
	mu.mutation.ResetAttachmentID()
	mu.mutation.SetAttachmentID(i)
	return mu
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableAttachmentID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetAttachmentID(*i)
	}
	return mu
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (mu *MessageUpdate) ClearAttachmentID() *MessageUpdate {
	mu.mutation.ClearAttachmentID()
	return mu
}

// SetCourseID sets the "course_id" field.
func (mu *MessageUpdate) SetCourseID(i int) *MessageUpdate {
	mu.mutation.ResetCourseID()
	mu.mutation.SetCourseID(i)
	return mu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableCourseID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetCourseID(*i)
	}
	return mu
}

// ClearCourseID clears the value of the "course_id" field.
func (mu *MessageUpdate) ClearCourseID() *MessageUpdate {
	mu.mutation.ClearCourseID()
	return mu
}

// SetClassID sets the "class_id" field.
func (mu *MessageUpdate) SetClassID(i int) *MessageUpdate {
	mu.mutation.ResetClassID()
	mu.mutation.SetClassID(i)
	return mu
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableClassID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetClassID(*i)
	}
	return mu
}

// ClearClassID clears the value of the "class_id" field.
func (mu *MessageUpdate) ClearClassID() *MessageUpdate {
	mu.mutation.ClearClassID()
	return mu
}

// SetMessageType sets the "Message_type" edge to the MessageType entity.
func (mu *MessageUpdate) SetMessageType(m *MessageType) *MessageUpdate {
	return mu.SetMessageTypeID(m.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (mu *MessageUpdate) SetAdminID(id int) *MessageUpdate {
	mu.mutation.SetAdminID(id)
	return mu
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (mu *MessageUpdate) SetNillableAdminID(id *int) *MessageUpdate {
	if id != nil {
		mu = mu.SetAdminID(*id)
	}
	return mu
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (mu *MessageUpdate) SetAdmin(a *Admin) *MessageUpdate {
	return mu.SetAdminID(a.ID)
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (mu *MessageUpdate) SetAttachment(a *Attachment) *MessageUpdate {
	return mu.SetAttachmentID(a.ID)
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (mu *MessageUpdate) SetCourse(k *KcCourse) *MessageUpdate {
	return mu.SetCourseID(k.ID)
}

// SetClass sets the "class" edge to the KcClass entity.
func (mu *MessageUpdate) SetClass(k *KcClass) *MessageUpdate {
	return mu.SetClassID(k.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (mu *MessageUpdate) AddUserIDs(ids ...int) *MessageUpdate {
	mu.mutation.AddUserIDs(ids...)
	return mu
}

// AddUsers adds the "users" edges to the User entity.
func (mu *MessageUpdate) AddUsers(u ...*User) *MessageUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddUserIDs(ids...)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearMessageType clears the "Message_type" edge to the MessageType entity.
func (mu *MessageUpdate) ClearMessageType() *MessageUpdate {
	mu.mutation.ClearMessageType()
	return mu
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (mu *MessageUpdate) ClearAdmin() *MessageUpdate {
	mu.mutation.ClearAdmin()
	return mu
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (mu *MessageUpdate) ClearAttachment() *MessageUpdate {
	mu.mutation.ClearAttachment()
	return mu
}

// ClearCourse clears the "course" edge to the KcCourse entity.
func (mu *MessageUpdate) ClearCourse() *MessageUpdate {
	mu.mutation.ClearCourse()
	return mu
}

// ClearClass clears the "class" edge to the KcClass entity.
func (mu *MessageUpdate) ClearClass() *MessageUpdate {
	mu.mutation.ClearClass()
	return mu
}

// ClearUsers clears all "users" edges to the User entity.
func (mu *MessageUpdate) ClearUsers() *MessageUpdate {
	mu.mutation.ClearUsers()
	return mu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (mu *MessageUpdate) RemoveUserIDs(ids ...int) *MessageUpdate {
	mu.mutation.RemoveUserIDs(ids...)
	return mu
}

// RemoveUsers removes "users" edges to User entities.
func (mu *MessageUpdate) RemoveUsers(u ...*User) *MessageUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MessageUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := message.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldUUID,
		})
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldUpdatedAt,
		})
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldDeletedAt,
		})
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldDeletedAt,
		})
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldName,
		})
	}
	if value, ok := mu.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldDetail,
		})
	}
	if value, ok := mu.mutation.PublishType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishType,
		})
	}
	if value, ok := mu.mutation.AddedPublishType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishType,
		})
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldStatus,
		})
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldStatus,
		})
	}
	if value, ok := mu.mutation.PublishStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishStatus,
		})
	}
	if value, ok := mu.mutation.AddedPublishStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishStatus,
		})
	}
	if value, ok := mu.mutation.AutoPublishAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldAutoPublishAt,
		})
	}
	if mu.mutation.AutoPublishAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldAutoPublishAt,
		})
	}
	if mu.mutation.MessageTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.MessageTypeTable,
			Columns: []string{message.MessageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messagetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MessageTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.MessageTypeTable,
			Columns: []string{message.MessageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messagetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AdminTable,
			Columns: []string{message.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AdminTable,
			Columns: []string{message.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AttachmentTable,
			Columns: []string{message.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AttachmentTable,
			Columns: []string{message.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.CourseTable,
			Columns: []string{message.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.CourseTable,
			Columns: []string{message.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ClassTable,
			Columns: []string{message.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ClassTable,
			Columns: []string{message.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   message.UsersTable,
			Columns: message.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   message.UsersTable,
			Columns: message.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   message.UsersTable,
			Columns: message.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetUUID sets the "uuid" field.
func (muo *MessageUpdateOne) SetUUID(s string) *MessageUpdateOne {
	muo.mutation.SetUUID(s)
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MessageUpdateOne) SetUpdatedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MessageUpdateOne) ClearUpdatedAt() *MessageUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MessageUpdateOne) SetDeletedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableDeletedAt(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muo *MessageUpdateOne) ClearDeletedAt() *MessageUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetName sets the "name" field.
func (muo *MessageUpdateOne) SetName(s string) *MessageUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableName(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetDetail sets the "detail" field.
func (muo *MessageUpdateOne) SetDetail(s string) *MessageUpdateOne {
	muo.mutation.SetDetail(s)
	return muo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableDetail(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetDetail(*s)
	}
	return muo
}

// SetPublishType sets the "publish_type" field.
func (muo *MessageUpdateOne) SetPublishType(u uint8) *MessageUpdateOne {
	muo.mutation.ResetPublishType()
	muo.mutation.SetPublishType(u)
	return muo
}

// SetNillablePublishType sets the "publish_type" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillablePublishType(u *uint8) *MessageUpdateOne {
	if u != nil {
		muo.SetPublishType(*u)
	}
	return muo
}

// AddPublishType adds u to the "publish_type" field.
func (muo *MessageUpdateOne) AddPublishType(u uint8) *MessageUpdateOne {
	muo.mutation.AddPublishType(u)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MessageUpdateOne) SetStatus(u uint8) *MessageUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(u)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableStatus(u *uint8) *MessageUpdateOne {
	if u != nil {
		muo.SetStatus(*u)
	}
	return muo
}

// AddStatus adds u to the "status" field.
func (muo *MessageUpdateOne) AddStatus(u uint8) *MessageUpdateOne {
	muo.mutation.AddStatus(u)
	return muo
}

// SetPublishStatus sets the "publish_status" field.
func (muo *MessageUpdateOne) SetPublishStatus(u uint8) *MessageUpdateOne {
	muo.mutation.ResetPublishStatus()
	muo.mutation.SetPublishStatus(u)
	return muo
}

// SetNillablePublishStatus sets the "publish_status" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillablePublishStatus(u *uint8) *MessageUpdateOne {
	if u != nil {
		muo.SetPublishStatus(*u)
	}
	return muo
}

// AddPublishStatus adds u to the "publish_status" field.
func (muo *MessageUpdateOne) AddPublishStatus(u uint8) *MessageUpdateOne {
	muo.mutation.AddPublishStatus(u)
	return muo
}

// SetAutoPublishAt sets the "auto_publish_at" field.
func (muo *MessageUpdateOne) SetAutoPublishAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetAutoPublishAt(t)
	return muo
}

// SetNillableAutoPublishAt sets the "auto_publish_at" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableAutoPublishAt(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetAutoPublishAt(*t)
	}
	return muo
}

// ClearAutoPublishAt clears the value of the "auto_publish_at" field.
func (muo *MessageUpdateOne) ClearAutoPublishAt() *MessageUpdateOne {
	muo.mutation.ClearAutoPublishAt()
	return muo
}

// SetMessageTypeID sets the "message_type_id" field.
func (muo *MessageUpdateOne) SetMessageTypeID(i int) *MessageUpdateOne {
	muo.mutation.ResetMessageTypeID()
	muo.mutation.SetMessageTypeID(i)
	return muo
}

// SetNillableMessageTypeID sets the "message_type_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableMessageTypeID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetMessageTypeID(*i)
	}
	return muo
}

// ClearMessageTypeID clears the value of the "message_type_id" field.
func (muo *MessageUpdateOne) ClearMessageTypeID() *MessageUpdateOne {
	muo.mutation.ClearMessageTypeID()
	return muo
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (muo *MessageUpdateOne) SetCreatedAdminID(i int) *MessageUpdateOne {
	muo.mutation.ResetCreatedAdminID()
	muo.mutation.SetCreatedAdminID(i)
	return muo
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableCreatedAdminID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetCreatedAdminID(*i)
	}
	return muo
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (muo *MessageUpdateOne) ClearCreatedAdminID() *MessageUpdateOne {
	muo.mutation.ClearCreatedAdminID()
	return muo
}

// SetAttachmentID sets the "attachment_id" field.
func (muo *MessageUpdateOne) SetAttachmentID(i int) *MessageUpdateOne {
	muo.mutation.ResetAttachmentID()
	muo.mutation.SetAttachmentID(i)
	return muo
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableAttachmentID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetAttachmentID(*i)
	}
	return muo
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (muo *MessageUpdateOne) ClearAttachmentID() *MessageUpdateOne {
	muo.mutation.ClearAttachmentID()
	return muo
}

// SetCourseID sets the "course_id" field.
func (muo *MessageUpdateOne) SetCourseID(i int) *MessageUpdateOne {
	muo.mutation.ResetCourseID()
	muo.mutation.SetCourseID(i)
	return muo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableCourseID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetCourseID(*i)
	}
	return muo
}

// ClearCourseID clears the value of the "course_id" field.
func (muo *MessageUpdateOne) ClearCourseID() *MessageUpdateOne {
	muo.mutation.ClearCourseID()
	return muo
}

// SetClassID sets the "class_id" field.
func (muo *MessageUpdateOne) SetClassID(i int) *MessageUpdateOne {
	muo.mutation.ResetClassID()
	muo.mutation.SetClassID(i)
	return muo
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableClassID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetClassID(*i)
	}
	return muo
}

// ClearClassID clears the value of the "class_id" field.
func (muo *MessageUpdateOne) ClearClassID() *MessageUpdateOne {
	muo.mutation.ClearClassID()
	return muo
}

// SetMessageType sets the "Message_type" edge to the MessageType entity.
func (muo *MessageUpdateOne) SetMessageType(m *MessageType) *MessageUpdateOne {
	return muo.SetMessageTypeID(m.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (muo *MessageUpdateOne) SetAdminID(id int) *MessageUpdateOne {
	muo.mutation.SetAdminID(id)
	return muo
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableAdminID(id *int) *MessageUpdateOne {
	if id != nil {
		muo = muo.SetAdminID(*id)
	}
	return muo
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (muo *MessageUpdateOne) SetAdmin(a *Admin) *MessageUpdateOne {
	return muo.SetAdminID(a.ID)
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (muo *MessageUpdateOne) SetAttachment(a *Attachment) *MessageUpdateOne {
	return muo.SetAttachmentID(a.ID)
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (muo *MessageUpdateOne) SetCourse(k *KcCourse) *MessageUpdateOne {
	return muo.SetCourseID(k.ID)
}

// SetClass sets the "class" edge to the KcClass entity.
func (muo *MessageUpdateOne) SetClass(k *KcClass) *MessageUpdateOne {
	return muo.SetClassID(k.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (muo *MessageUpdateOne) AddUserIDs(ids ...int) *MessageUpdateOne {
	muo.mutation.AddUserIDs(ids...)
	return muo
}

// AddUsers adds the "users" edges to the User entity.
func (muo *MessageUpdateOne) AddUsers(u ...*User) *MessageUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddUserIDs(ids...)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearMessageType clears the "Message_type" edge to the MessageType entity.
func (muo *MessageUpdateOne) ClearMessageType() *MessageUpdateOne {
	muo.mutation.ClearMessageType()
	return muo
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (muo *MessageUpdateOne) ClearAdmin() *MessageUpdateOne {
	muo.mutation.ClearAdmin()
	return muo
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (muo *MessageUpdateOne) ClearAttachment() *MessageUpdateOne {
	muo.mutation.ClearAttachment()
	return muo
}

// ClearCourse clears the "course" edge to the KcCourse entity.
func (muo *MessageUpdateOne) ClearCourse() *MessageUpdateOne {
	muo.mutation.ClearCourse()
	return muo
}

// ClearClass clears the "class" edge to the KcClass entity.
func (muo *MessageUpdateOne) ClearClass() *MessageUpdateOne {
	muo.mutation.ClearClass()
	return muo
}

// ClearUsers clears all "users" edges to the User entity.
func (muo *MessageUpdateOne) ClearUsers() *MessageUpdateOne {
	muo.mutation.ClearUsers()
	return muo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (muo *MessageUpdateOne) RemoveUserIDs(ids ...int) *MessageUpdateOne {
	muo.mutation.RemoveUserIDs(ids...)
	return muo
}

// RemoveUsers removes "users" edges to User entities.
func (muo *MessageUpdateOne) RemoveUsers(u ...*User) *MessageUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	var (
		err  error
		node *Message
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MessageUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := message.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Message.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldUUID,
		})
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldUpdatedAt,
		})
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldDeletedAt,
		})
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldDeletedAt,
		})
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldName,
		})
	}
	if value, ok := muo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldDetail,
		})
	}
	if value, ok := muo.mutation.PublishType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishType,
		})
	}
	if value, ok := muo.mutation.AddedPublishType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishType,
		})
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldStatus,
		})
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldStatus,
		})
	}
	if value, ok := muo.mutation.PublishStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishStatus,
		})
	}
	if value, ok := muo.mutation.AddedPublishStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishStatus,
		})
	}
	if value, ok := muo.mutation.AutoPublishAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldAutoPublishAt,
		})
	}
	if muo.mutation.AutoPublishAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldAutoPublishAt,
		})
	}
	if muo.mutation.MessageTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.MessageTypeTable,
			Columns: []string{message.MessageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messagetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MessageTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.MessageTypeTable,
			Columns: []string{message.MessageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messagetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AdminTable,
			Columns: []string{message.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AdminTable,
			Columns: []string{message.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AttachmentTable,
			Columns: []string{message.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AttachmentTable,
			Columns: []string{message.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.CourseTable,
			Columns: []string{message.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.CourseTable,
			Columns: []string{message.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ClassTable,
			Columns: []string{message.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ClassTable,
			Columns: []string{message.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   message.UsersTable,
			Columns: message.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   message.UsersTable,
			Columns: message.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   message.UsersTable,
			Columns: message.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

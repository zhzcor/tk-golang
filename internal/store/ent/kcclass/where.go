// Code generated by entc, DO NOT EDIT.

package kcclass

import (
	"time"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ClassTitle applies equality check predicate on the "class_title" field. It's identical to ClassTitleEQ.
func ClassTitle(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassTitle), v))
	})
}

// ClassCode applies equality check predicate on the "class_code" field. It's identical to ClassCodeEQ.
func ClassCode(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassCode), v))
	})
}

// ClassDesc applies equality check predicate on the "class_desc" field. It's identical to ClassDescEQ.
func ClassDesc(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassDesc), v))
	})
}

// IsDisplay applies equality check predicate on the "is_display" field. It's identical to IsDisplayEQ.
func IsDisplay(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDisplay), v))
	})
}

// IsBuy applies equality check predicate on the "is_buy" field. It's identical to IsBuyEQ.
func IsBuy(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsBuy), v))
	})
}

// ClassPeriodType applies equality check predicate on the "class_period_type" field. It's identical to ClassPeriodTypeEQ.
func ClassPeriodType(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassPeriodType), v))
	})
}

// ClassStartDate applies equality check predicate on the "class_start_date" field. It's identical to ClassStartDateEQ.
func ClassStartDate(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassStartDate), v))
	})
}

// ClassEndDate applies equality check predicate on the "class_end_date" field. It's identical to ClassEndDateEQ.
func ClassEndDate(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassEndDate), v))
	})
}

// ClosingDate applies equality check predicate on the "closing_date" field. It's identical to ClosingDateEQ.
func ClosingDate(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosingDate), v))
	})
}

// DaysValidity applies equality check predicate on the "days_validity" field. It's identical to DaysValidityEQ.
func DaysValidity(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDaysValidity), v))
	})
}

// ClassHeadMasterID applies equality check predicate on the "class_head_master_id" field. It's identical to ClassHeadMasterIDEQ.
func ClassHeadMasterID(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassHeadMasterID), v))
	})
}

// ClassCoverImgID applies equality check predicate on the "class_cover_img_id" field. It's identical to ClassCoverImgIDEQ.
func ClassCoverImgID(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassCoverImgID), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// StudentCount applies equality check predicate on the "student_count" field. It's identical to StudentCountEQ.
func StudentCount(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudentCount), v))
	})
}

// CourseCount applies equality check predicate on the "course_count" field. It's identical to CourseCountEQ.
func CourseCount(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseCount), v))
	})
}

// CateID applies equality check predicate on the "cate_id" field. It's identical to CateIDEQ.
func CateID(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCateID), v))
	})
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// CreatedAdminID applies equality check predicate on the "created_admin_id" field. It's identical to CreatedAdminIDEQ.
func CreatedAdminID(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAdminID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// ClassTitleEQ applies the EQ predicate on the "class_title" field.
func ClassTitleEQ(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassTitle), v))
	})
}

// ClassTitleNEQ applies the NEQ predicate on the "class_title" field.
func ClassTitleNEQ(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassTitle), v))
	})
}

// ClassTitleIn applies the In predicate on the "class_title" field.
func ClassTitleIn(vs ...string) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassTitle), v...))
	})
}

// ClassTitleNotIn applies the NotIn predicate on the "class_title" field.
func ClassTitleNotIn(vs ...string) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassTitle), v...))
	})
}

// ClassTitleGT applies the GT predicate on the "class_title" field.
func ClassTitleGT(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassTitle), v))
	})
}

// ClassTitleGTE applies the GTE predicate on the "class_title" field.
func ClassTitleGTE(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassTitle), v))
	})
}

// ClassTitleLT applies the LT predicate on the "class_title" field.
func ClassTitleLT(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassTitle), v))
	})
}

// ClassTitleLTE applies the LTE predicate on the "class_title" field.
func ClassTitleLTE(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassTitle), v))
	})
}

// ClassTitleContains applies the Contains predicate on the "class_title" field.
func ClassTitleContains(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassTitle), v))
	})
}

// ClassTitleHasPrefix applies the HasPrefix predicate on the "class_title" field.
func ClassTitleHasPrefix(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassTitle), v))
	})
}

// ClassTitleHasSuffix applies the HasSuffix predicate on the "class_title" field.
func ClassTitleHasSuffix(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassTitle), v))
	})
}

// ClassTitleEqualFold applies the EqualFold predicate on the "class_title" field.
func ClassTitleEqualFold(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassTitle), v))
	})
}

// ClassTitleContainsFold applies the ContainsFold predicate on the "class_title" field.
func ClassTitleContainsFold(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassTitle), v))
	})
}

// ClassCodeEQ applies the EQ predicate on the "class_code" field.
func ClassCodeEQ(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassCode), v))
	})
}

// ClassCodeNEQ applies the NEQ predicate on the "class_code" field.
func ClassCodeNEQ(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassCode), v))
	})
}

// ClassCodeIn applies the In predicate on the "class_code" field.
func ClassCodeIn(vs ...string) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassCode), v...))
	})
}

// ClassCodeNotIn applies the NotIn predicate on the "class_code" field.
func ClassCodeNotIn(vs ...string) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassCode), v...))
	})
}

// ClassCodeGT applies the GT predicate on the "class_code" field.
func ClassCodeGT(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassCode), v))
	})
}

// ClassCodeGTE applies the GTE predicate on the "class_code" field.
func ClassCodeGTE(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassCode), v))
	})
}

// ClassCodeLT applies the LT predicate on the "class_code" field.
func ClassCodeLT(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassCode), v))
	})
}

// ClassCodeLTE applies the LTE predicate on the "class_code" field.
func ClassCodeLTE(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassCode), v))
	})
}

// ClassCodeContains applies the Contains predicate on the "class_code" field.
func ClassCodeContains(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassCode), v))
	})
}

// ClassCodeHasPrefix applies the HasPrefix predicate on the "class_code" field.
func ClassCodeHasPrefix(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassCode), v))
	})
}

// ClassCodeHasSuffix applies the HasSuffix predicate on the "class_code" field.
func ClassCodeHasSuffix(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassCode), v))
	})
}

// ClassCodeEqualFold applies the EqualFold predicate on the "class_code" field.
func ClassCodeEqualFold(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassCode), v))
	})
}

// ClassCodeContainsFold applies the ContainsFold predicate on the "class_code" field.
func ClassCodeContainsFold(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassCode), v))
	})
}

// ClassDescEQ applies the EQ predicate on the "class_desc" field.
func ClassDescEQ(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassDesc), v))
	})
}

// ClassDescNEQ applies the NEQ predicate on the "class_desc" field.
func ClassDescNEQ(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassDesc), v))
	})
}

// ClassDescIn applies the In predicate on the "class_desc" field.
func ClassDescIn(vs ...string) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassDesc), v...))
	})
}

// ClassDescNotIn applies the NotIn predicate on the "class_desc" field.
func ClassDescNotIn(vs ...string) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassDesc), v...))
	})
}

// ClassDescGT applies the GT predicate on the "class_desc" field.
func ClassDescGT(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassDesc), v))
	})
}

// ClassDescGTE applies the GTE predicate on the "class_desc" field.
func ClassDescGTE(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassDesc), v))
	})
}

// ClassDescLT applies the LT predicate on the "class_desc" field.
func ClassDescLT(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassDesc), v))
	})
}

// ClassDescLTE applies the LTE predicate on the "class_desc" field.
func ClassDescLTE(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassDesc), v))
	})
}

// ClassDescContains applies the Contains predicate on the "class_desc" field.
func ClassDescContains(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassDesc), v))
	})
}

// ClassDescHasPrefix applies the HasPrefix predicate on the "class_desc" field.
func ClassDescHasPrefix(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassDesc), v))
	})
}

// ClassDescHasSuffix applies the HasSuffix predicate on the "class_desc" field.
func ClassDescHasSuffix(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassDesc), v))
	})
}

// ClassDescEqualFold applies the EqualFold predicate on the "class_desc" field.
func ClassDescEqualFold(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassDesc), v))
	})
}

// ClassDescContainsFold applies the ContainsFold predicate on the "class_desc" field.
func ClassDescContainsFold(v string) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassDesc), v))
	})
}

// IsDisplayEQ applies the EQ predicate on the "is_display" field.
func IsDisplayEQ(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDisplay), v))
	})
}

// IsDisplayNEQ applies the NEQ predicate on the "is_display" field.
func IsDisplayNEQ(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDisplay), v))
	})
}

// IsDisplayIn applies the In predicate on the "is_display" field.
func IsDisplayIn(vs ...uint8) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDisplay), v...))
	})
}

// IsDisplayNotIn applies the NotIn predicate on the "is_display" field.
func IsDisplayNotIn(vs ...uint8) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDisplay), v...))
	})
}

// IsDisplayGT applies the GT predicate on the "is_display" field.
func IsDisplayGT(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDisplay), v))
	})
}

// IsDisplayGTE applies the GTE predicate on the "is_display" field.
func IsDisplayGTE(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDisplay), v))
	})
}

// IsDisplayLT applies the LT predicate on the "is_display" field.
func IsDisplayLT(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDisplay), v))
	})
}

// IsDisplayLTE applies the LTE predicate on the "is_display" field.
func IsDisplayLTE(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDisplay), v))
	})
}

// IsBuyEQ applies the EQ predicate on the "is_buy" field.
func IsBuyEQ(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsBuy), v))
	})
}

// IsBuyNEQ applies the NEQ predicate on the "is_buy" field.
func IsBuyNEQ(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsBuy), v))
	})
}

// IsBuyIn applies the In predicate on the "is_buy" field.
func IsBuyIn(vs ...uint8) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsBuy), v...))
	})
}

// IsBuyNotIn applies the NotIn predicate on the "is_buy" field.
func IsBuyNotIn(vs ...uint8) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsBuy), v...))
	})
}

// IsBuyGT applies the GT predicate on the "is_buy" field.
func IsBuyGT(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsBuy), v))
	})
}

// IsBuyGTE applies the GTE predicate on the "is_buy" field.
func IsBuyGTE(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsBuy), v))
	})
}

// IsBuyLT applies the LT predicate on the "is_buy" field.
func IsBuyLT(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsBuy), v))
	})
}

// IsBuyLTE applies the LTE predicate on the "is_buy" field.
func IsBuyLTE(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsBuy), v))
	})
}

// ClassPeriodTypeEQ applies the EQ predicate on the "class_period_type" field.
func ClassPeriodTypeEQ(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassPeriodType), v))
	})
}

// ClassPeriodTypeNEQ applies the NEQ predicate on the "class_period_type" field.
func ClassPeriodTypeNEQ(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassPeriodType), v))
	})
}

// ClassPeriodTypeIn applies the In predicate on the "class_period_type" field.
func ClassPeriodTypeIn(vs ...uint8) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassPeriodType), v...))
	})
}

// ClassPeriodTypeNotIn applies the NotIn predicate on the "class_period_type" field.
func ClassPeriodTypeNotIn(vs ...uint8) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassPeriodType), v...))
	})
}

// ClassPeriodTypeGT applies the GT predicate on the "class_period_type" field.
func ClassPeriodTypeGT(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassPeriodType), v))
	})
}

// ClassPeriodTypeGTE applies the GTE predicate on the "class_period_type" field.
func ClassPeriodTypeGTE(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassPeriodType), v))
	})
}

// ClassPeriodTypeLT applies the LT predicate on the "class_period_type" field.
func ClassPeriodTypeLT(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassPeriodType), v))
	})
}

// ClassPeriodTypeLTE applies the LTE predicate on the "class_period_type" field.
func ClassPeriodTypeLTE(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassPeriodType), v))
	})
}

// ClassStartDateEQ applies the EQ predicate on the "class_start_date" field.
func ClassStartDateEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassStartDate), v))
	})
}

// ClassStartDateNEQ applies the NEQ predicate on the "class_start_date" field.
func ClassStartDateNEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassStartDate), v))
	})
}

// ClassStartDateIn applies the In predicate on the "class_start_date" field.
func ClassStartDateIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassStartDate), v...))
	})
}

// ClassStartDateNotIn applies the NotIn predicate on the "class_start_date" field.
func ClassStartDateNotIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassStartDate), v...))
	})
}

// ClassStartDateGT applies the GT predicate on the "class_start_date" field.
func ClassStartDateGT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassStartDate), v))
	})
}

// ClassStartDateGTE applies the GTE predicate on the "class_start_date" field.
func ClassStartDateGTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassStartDate), v))
	})
}

// ClassStartDateLT applies the LT predicate on the "class_start_date" field.
func ClassStartDateLT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassStartDate), v))
	})
}

// ClassStartDateLTE applies the LTE predicate on the "class_start_date" field.
func ClassStartDateLTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassStartDate), v))
	})
}

// ClassStartDateIsNil applies the IsNil predicate on the "class_start_date" field.
func ClassStartDateIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassStartDate)))
	})
}

// ClassStartDateNotNil applies the NotNil predicate on the "class_start_date" field.
func ClassStartDateNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassStartDate)))
	})
}

// ClassEndDateEQ applies the EQ predicate on the "class_end_date" field.
func ClassEndDateEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassEndDate), v))
	})
}

// ClassEndDateNEQ applies the NEQ predicate on the "class_end_date" field.
func ClassEndDateNEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassEndDate), v))
	})
}

// ClassEndDateIn applies the In predicate on the "class_end_date" field.
func ClassEndDateIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassEndDate), v...))
	})
}

// ClassEndDateNotIn applies the NotIn predicate on the "class_end_date" field.
func ClassEndDateNotIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassEndDate), v...))
	})
}

// ClassEndDateGT applies the GT predicate on the "class_end_date" field.
func ClassEndDateGT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassEndDate), v))
	})
}

// ClassEndDateGTE applies the GTE predicate on the "class_end_date" field.
func ClassEndDateGTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassEndDate), v))
	})
}

// ClassEndDateLT applies the LT predicate on the "class_end_date" field.
func ClassEndDateLT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassEndDate), v))
	})
}

// ClassEndDateLTE applies the LTE predicate on the "class_end_date" field.
func ClassEndDateLTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassEndDate), v))
	})
}

// ClassEndDateIsNil applies the IsNil predicate on the "class_end_date" field.
func ClassEndDateIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassEndDate)))
	})
}

// ClassEndDateNotNil applies the NotNil predicate on the "class_end_date" field.
func ClassEndDateNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassEndDate)))
	})
}

// ClosingDateEQ applies the EQ predicate on the "closing_date" field.
func ClosingDateEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosingDate), v))
	})
}

// ClosingDateNEQ applies the NEQ predicate on the "closing_date" field.
func ClosingDateNEQ(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClosingDate), v))
	})
}

// ClosingDateIn applies the In predicate on the "closing_date" field.
func ClosingDateIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClosingDate), v...))
	})
}

// ClosingDateNotIn applies the NotIn predicate on the "closing_date" field.
func ClosingDateNotIn(vs ...time.Time) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClosingDate), v...))
	})
}

// ClosingDateGT applies the GT predicate on the "closing_date" field.
func ClosingDateGT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClosingDate), v))
	})
}

// ClosingDateGTE applies the GTE predicate on the "closing_date" field.
func ClosingDateGTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClosingDate), v))
	})
}

// ClosingDateLT applies the LT predicate on the "closing_date" field.
func ClosingDateLT(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClosingDate), v))
	})
}

// ClosingDateLTE applies the LTE predicate on the "closing_date" field.
func ClosingDateLTE(v time.Time) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClosingDate), v))
	})
}

// ClosingDateIsNil applies the IsNil predicate on the "closing_date" field.
func ClosingDateIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClosingDate)))
	})
}

// ClosingDateNotNil applies the NotNil predicate on the "closing_date" field.
func ClosingDateNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClosingDate)))
	})
}

// DaysValidityEQ applies the EQ predicate on the "days_validity" field.
func DaysValidityEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDaysValidity), v))
	})
}

// DaysValidityNEQ applies the NEQ predicate on the "days_validity" field.
func DaysValidityNEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDaysValidity), v))
	})
}

// DaysValidityIn applies the In predicate on the "days_validity" field.
func DaysValidityIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDaysValidity), v...))
	})
}

// DaysValidityNotIn applies the NotIn predicate on the "days_validity" field.
func DaysValidityNotIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDaysValidity), v...))
	})
}

// DaysValidityGT applies the GT predicate on the "days_validity" field.
func DaysValidityGT(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDaysValidity), v))
	})
}

// DaysValidityGTE applies the GTE predicate on the "days_validity" field.
func DaysValidityGTE(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDaysValidity), v))
	})
}

// DaysValidityLT applies the LT predicate on the "days_validity" field.
func DaysValidityLT(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDaysValidity), v))
	})
}

// DaysValidityLTE applies the LTE predicate on the "days_validity" field.
func DaysValidityLTE(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDaysValidity), v))
	})
}

// ClassHeadMasterIDEQ applies the EQ predicate on the "class_head_master_id" field.
func ClassHeadMasterIDEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassHeadMasterID), v))
	})
}

// ClassHeadMasterIDNEQ applies the NEQ predicate on the "class_head_master_id" field.
func ClassHeadMasterIDNEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassHeadMasterID), v))
	})
}

// ClassHeadMasterIDIn applies the In predicate on the "class_head_master_id" field.
func ClassHeadMasterIDIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassHeadMasterID), v...))
	})
}

// ClassHeadMasterIDNotIn applies the NotIn predicate on the "class_head_master_id" field.
func ClassHeadMasterIDNotIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassHeadMasterID), v...))
	})
}

// ClassHeadMasterIDIsNil applies the IsNil predicate on the "class_head_master_id" field.
func ClassHeadMasterIDIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassHeadMasterID)))
	})
}

// ClassHeadMasterIDNotNil applies the NotNil predicate on the "class_head_master_id" field.
func ClassHeadMasterIDNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassHeadMasterID)))
	})
}

// ClassCoverImgIDEQ applies the EQ predicate on the "class_cover_img_id" field.
func ClassCoverImgIDEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassCoverImgID), v))
	})
}

// ClassCoverImgIDNEQ applies the NEQ predicate on the "class_cover_img_id" field.
func ClassCoverImgIDNEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassCoverImgID), v))
	})
}

// ClassCoverImgIDIn applies the In predicate on the "class_cover_img_id" field.
func ClassCoverImgIDIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassCoverImgID), v...))
	})
}

// ClassCoverImgIDNotIn applies the NotIn predicate on the "class_cover_img_id" field.
func ClassCoverImgIDNotIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassCoverImgID), v...))
	})
}

// ClassCoverImgIDIsNil applies the IsNil predicate on the "class_cover_img_id" field.
func ClassCoverImgIDIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassCoverImgID)))
	})
}

// ClassCoverImgIDNotNil applies the NotNil predicate on the "class_cover_img_id" field.
func ClassCoverImgIDNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassCoverImgID)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// StudentCountEQ applies the EQ predicate on the "student_count" field.
func StudentCountEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudentCount), v))
	})
}

// StudentCountNEQ applies the NEQ predicate on the "student_count" field.
func StudentCountNEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStudentCount), v))
	})
}

// StudentCountIn applies the In predicate on the "student_count" field.
func StudentCountIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStudentCount), v...))
	})
}

// StudentCountNotIn applies the NotIn predicate on the "student_count" field.
func StudentCountNotIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStudentCount), v...))
	})
}

// StudentCountGT applies the GT predicate on the "student_count" field.
func StudentCountGT(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStudentCount), v))
	})
}

// StudentCountGTE applies the GTE predicate on the "student_count" field.
func StudentCountGTE(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStudentCount), v))
	})
}

// StudentCountLT applies the LT predicate on the "student_count" field.
func StudentCountLT(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStudentCount), v))
	})
}

// StudentCountLTE applies the LTE predicate on the "student_count" field.
func StudentCountLTE(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStudentCount), v))
	})
}

// CourseCountEQ applies the EQ predicate on the "course_count" field.
func CourseCountEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseCount), v))
	})
}

// CourseCountNEQ applies the NEQ predicate on the "course_count" field.
func CourseCountNEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseCount), v))
	})
}

// CourseCountIn applies the In predicate on the "course_count" field.
func CourseCountIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourseCount), v...))
	})
}

// CourseCountNotIn applies the NotIn predicate on the "course_count" field.
func CourseCountNotIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourseCount), v...))
	})
}

// CourseCountGT applies the GT predicate on the "course_count" field.
func CourseCountGT(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourseCount), v))
	})
}

// CourseCountGTE applies the GTE predicate on the "course_count" field.
func CourseCountGTE(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourseCount), v))
	})
}

// CourseCountLT applies the LT predicate on the "course_count" field.
func CourseCountLT(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourseCount), v))
	})
}

// CourseCountLTE applies the LTE predicate on the "course_count" field.
func CourseCountLTE(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourseCount), v))
	})
}

// CateIDEQ applies the EQ predicate on the "cate_id" field.
func CateIDEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCateID), v))
	})
}

// CateIDNEQ applies the NEQ predicate on the "cate_id" field.
func CateIDNEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCateID), v))
	})
}

// CateIDIn applies the In predicate on the "cate_id" field.
func CateIDIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCateID), v...))
	})
}

// CateIDNotIn applies the NotIn predicate on the "cate_id" field.
func CateIDNotIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCateID), v...))
	})
}

// CateIDIsNil applies the IsNil predicate on the "cate_id" field.
func CateIDIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCateID)))
	})
}

// CateIDNotNil applies the NotNil predicate on the "cate_id" field.
func CateIDNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCateID)))
	})
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCityID), v))
	})
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCityID), v...))
	})
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCityID), v...))
	})
}

// CityIDIsNil applies the IsNil predicate on the "city_id" field.
func CityIDIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCityID)))
	})
}

// CityIDNotNil applies the NotNil predicate on the "city_id" field.
func CityIDNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCityID)))
	})
}

// CreatedAdminIDEQ applies the EQ predicate on the "created_admin_id" field.
func CreatedAdminIDEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAdminID), v))
	})
}

// CreatedAdminIDNEQ applies the NEQ predicate on the "created_admin_id" field.
func CreatedAdminIDNEQ(v int) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAdminID), v))
	})
}

// CreatedAdminIDIn applies the In predicate on the "created_admin_id" field.
func CreatedAdminIDIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAdminID), v...))
	})
}

// CreatedAdminIDNotIn applies the NotIn predicate on the "created_admin_id" field.
func CreatedAdminIDNotIn(vs ...int) predicate.KcClass {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcClass(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAdminID), v...))
	})
}

// CreatedAdminIDIsNil applies the IsNil predicate on the "created_admin_id" field.
func CreatedAdminIDIsNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAdminID)))
	})
}

// CreatedAdminIDNotNil applies the NotNil predicate on the "created_admin_id" field.
func CreatedAdminIDNotNil() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAdminID)))
	})
}

// HasMajors applies the HasEdge predicate on the "majors" edge.
func HasMajors() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MajorsTable, MajorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMajorsWith applies the HasEdge predicate on the "majors" edge with a given conditions (other predicates).
func HasMajorsWith(preds ...predicate.Major) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MajorsTable, MajorsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItem applies the HasEdge predicate on the "item" edge.
func HasItem() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ItemTable, ItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemWith applies the HasEdge predicate on the "item" edge with a given conditions (other predicates).
func HasItemWith(preds ...predicate.ItemCategory) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ItemTable, ItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CityTable, CityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmin applies the HasEdge predicate on the "admin" edge.
func HasAdmin() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminWith applies the HasEdge predicate on the "admin" edge with a given conditions (other predicates).
func HasAdminWith(preds ...predicate.Admin) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttachment applies the HasEdge predicate on the "attachment" edge.
func HasAttachment() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttachmentTable, AttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentWith applies the HasEdge predicate on the "attachment" edge with a given conditions (other predicates).
func HasAttachmentWith(preds ...predicate.Attachment) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttachmentTable, AttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMasterTeachers applies the HasEdge predicate on the "master_teachers" edge.
func HasMasterTeachers() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MasterTeachersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MasterTeachersTable, MasterTeachersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMasterTeachersWith applies the HasEdge predicate on the "master_teachers" edge with a given conditions (other predicates).
func HasMasterTeachersWith(preds ...predicate.Teacher) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MasterTeachersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MasterTeachersTable, MasterTeachersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClassTeachers applies the HasEdge predicate on the "class_teachers" edge.
func HasClassTeachers() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassTeachersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClassTeachersTable, ClassTeachersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassTeachersWith applies the HasEdge predicate on the "class_teachers" edge with a given conditions (other predicates).
func HasClassTeachersWith(preds ...predicate.KcClassTeacher) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassTeachersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClassTeachersTable, ClassTeachersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasKcClassCourses applies the HasEdge predicate on the "kc_class_courses" edge.
func HasKcClassCourses() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KcClassCoursesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, KcClassCoursesTable, KcClassCoursesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKcClassCoursesWith applies the HasEdge predicate on the "kc_class_courses" edge with a given conditions (other predicates).
func HasKcClassCoursesWith(preds ...predicate.KcCourse) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KcClassCoursesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, KcClassCoursesTable, KcClassCoursesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasKcUserClasses applies the HasEdge predicate on the "kc_user_classes" edge.
func HasKcUserClasses() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KcUserClassesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, KcUserClassesTable, KcUserClassesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKcUserClassesWith applies the HasEdge predicate on the "kc_user_classes" edge with a given conditions (other predicates).
func HasKcUserClassesWith(preds ...predicate.KcUserClass) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KcUserClassesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, KcUserClassesTable, KcUserClassesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessageClasses applies the HasEdge predicate on the "message_classes" edge.
func HasMessageClasses() predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MessageClassesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessageClassesTable, MessageClassesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageClassesWith applies the HasEdge predicate on the "message_classes" edge with a given conditions (other predicates).
func HasMessageClassesWith(preds ...predicate.Message) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MessageClassesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessageClassesTable, MessageClassesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KcClass) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KcClass) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KcClass) predicate.KcClass {
	return predicate.KcClass(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/tkquestion"
	"gserver/internal/store/ent/tkquestionerrorfeedback"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionErrorFeedbackCreate is the builder for creating a TkQuestionErrorFeedback entity.
type TkQuestionErrorFeedbackCreate struct {
	config
	mutation *TkQuestionErrorFeedbackMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetUUID(s string) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetUUID(s)
	return tqefc
}

// SetCreatedAt sets the "created_at" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetCreatedAt(t time.Time) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetCreatedAt(t)
	return tqefc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableCreatedAt(t *time.Time) *TkQuestionErrorFeedbackCreate {
	if t != nil {
		tqefc.SetCreatedAt(*t)
	}
	return tqefc
}

// SetUpdatedAt sets the "updated_at" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetUpdatedAt(t time.Time) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetUpdatedAt(t)
	return tqefc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableUpdatedAt(t *time.Time) *TkQuestionErrorFeedbackCreate {
	if t != nil {
		tqefc.SetUpdatedAt(*t)
	}
	return tqefc
}

// SetDeletedAt sets the "deleted_at" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetDeletedAt(t time.Time) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetDeletedAt(t)
	return tqefc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableDeletedAt(t *time.Time) *TkQuestionErrorFeedbackCreate {
	if t != nil {
		tqefc.SetDeletedAt(*t)
	}
	return tqefc
}

// SetUsername sets the "username" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetUsername(s string) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetUsername(s)
	return tqefc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableUsername(s *string) *TkQuestionErrorFeedbackCreate {
	if s != nil {
		tqefc.SetUsername(*s)
	}
	return tqefc
}

// SetPhone sets the "phone" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetPhone(s string) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetPhone(s)
	return tqefc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillablePhone(s *string) *TkQuestionErrorFeedbackCreate {
	if s != nil {
		tqefc.SetPhone(*s)
	}
	return tqefc
}

// SetErrorDesc sets the "error_desc" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetErrorDesc(s string) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetErrorDesc(s)
	return tqefc
}

// SetNillableErrorDesc sets the "error_desc" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableErrorDesc(s *string) *TkQuestionErrorFeedbackCreate {
	if s != nil {
		tqefc.SetErrorDesc(*s)
	}
	return tqefc
}

// SetErrorType sets the "error_type" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetErrorType(u uint8) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetErrorType(u)
	return tqefc
}

// SetNillableErrorType sets the "error_type" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableErrorType(u *uint8) *TkQuestionErrorFeedbackCreate {
	if u != nil {
		tqefc.SetErrorType(*u)
	}
	return tqefc
}

// SetStatus sets the "status" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetStatus(u uint8) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetStatus(u)
	return tqefc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableStatus(u *uint8) *TkQuestionErrorFeedbackCreate {
	if u != nil {
		tqefc.SetStatus(*u)
	}
	return tqefc
}

// SetDealRemark sets the "deal_remark" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetDealRemark(s string) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetDealRemark(s)
	return tqefc
}

// SetNillableDealRemark sets the "deal_remark" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableDealRemark(s *string) *TkQuestionErrorFeedbackCreate {
	if s != nil {
		tqefc.SetDealRemark(*s)
	}
	return tqefc
}

// SetOperatorAdminID sets the "operator_admin_id" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetOperatorAdminID(i int) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetOperatorAdminID(i)
	return tqefc
}

// SetNillableOperatorAdminID sets the "operator_admin_id" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableOperatorAdminID(i *int) *TkQuestionErrorFeedbackCreate {
	if i != nil {
		tqefc.SetOperatorAdminID(*i)
	}
	return tqefc
}

// SetQuestionID sets the "question_id" field.
func (tqefc *TkQuestionErrorFeedbackCreate) SetQuestionID(i int) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetQuestionID(i)
	return tqefc
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableQuestionID(i *int) *TkQuestionErrorFeedbackCreate {
	if i != nil {
		tqefc.SetQuestionID(*i)
	}
	return tqefc
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tqefc *TkQuestionErrorFeedbackCreate) SetQuestion(t *TkQuestion) *TkQuestionErrorFeedbackCreate {
	return tqefc.SetQuestionID(t.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (tqefc *TkQuestionErrorFeedbackCreate) SetAdminID(id int) *TkQuestionErrorFeedbackCreate {
	tqefc.mutation.SetAdminID(id)
	return tqefc
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (tqefc *TkQuestionErrorFeedbackCreate) SetNillableAdminID(id *int) *TkQuestionErrorFeedbackCreate {
	if id != nil {
		tqefc = tqefc.SetAdminID(*id)
	}
	return tqefc
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (tqefc *TkQuestionErrorFeedbackCreate) SetAdmin(a *Admin) *TkQuestionErrorFeedbackCreate {
	return tqefc.SetAdminID(a.ID)
}

// Mutation returns the TkQuestionErrorFeedbackMutation object of the builder.
func (tqefc *TkQuestionErrorFeedbackCreate) Mutation() *TkQuestionErrorFeedbackMutation {
	return tqefc.mutation
}

// Save creates the TkQuestionErrorFeedback in the database.
func (tqefc *TkQuestionErrorFeedbackCreate) Save(ctx context.Context) (*TkQuestionErrorFeedback, error) {
	var (
		err  error
		node *TkQuestionErrorFeedback
	)
	tqefc.defaults()
	if len(tqefc.hooks) == 0 {
		if err = tqefc.check(); err != nil {
			return nil, err
		}
		node, err = tqefc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionErrorFeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tqefc.check(); err != nil {
				return nil, err
			}
			tqefc.mutation = mutation
			node, err = tqefc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tqefc.hooks) - 1; i >= 0; i-- {
			mut = tqefc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqefc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tqefc *TkQuestionErrorFeedbackCreate) SaveX(ctx context.Context) *TkQuestionErrorFeedback {
	v, err := tqefc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tqefc *TkQuestionErrorFeedbackCreate) defaults() {
	if _, ok := tqefc.mutation.CreatedAt(); !ok {
		v := tkquestionerrorfeedback.DefaultCreatedAt()
		tqefc.mutation.SetCreatedAt(v)
	}
	if _, ok := tqefc.mutation.UpdatedAt(); !ok {
		v := tkquestionerrorfeedback.DefaultUpdatedAt()
		tqefc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tqefc.mutation.Username(); !ok {
		v := tkquestionerrorfeedback.DefaultUsername
		tqefc.mutation.SetUsername(v)
	}
	if _, ok := tqefc.mutation.Phone(); !ok {
		v := tkquestionerrorfeedback.DefaultPhone
		tqefc.mutation.SetPhone(v)
	}
	if _, ok := tqefc.mutation.ErrorDesc(); !ok {
		v := tkquestionerrorfeedback.DefaultErrorDesc
		tqefc.mutation.SetErrorDesc(v)
	}
	if _, ok := tqefc.mutation.ErrorType(); !ok {
		v := tkquestionerrorfeedback.DefaultErrorType
		tqefc.mutation.SetErrorType(v)
	}
	if _, ok := tqefc.mutation.Status(); !ok {
		v := tkquestionerrorfeedback.DefaultStatus
		tqefc.mutation.SetStatus(v)
	}
	if _, ok := tqefc.mutation.DealRemark(); !ok {
		v := tkquestionerrorfeedback.DefaultDealRemark
		tqefc.mutation.SetDealRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tqefc *TkQuestionErrorFeedbackCreate) check() error {
	if _, ok := tqefc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tqefc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New("ent: missing required field \"username\"")}
	}
	if _, ok := tqefc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New("ent: missing required field \"phone\"")}
	}
	if _, ok := tqefc.mutation.ErrorDesc(); !ok {
		return &ValidationError{Name: "error_desc", err: errors.New("ent: missing required field \"error_desc\"")}
	}
	if _, ok := tqefc.mutation.ErrorType(); !ok {
		return &ValidationError{Name: "error_type", err: errors.New("ent: missing required field \"error_type\"")}
	}
	if _, ok := tqefc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := tqefc.mutation.DealRemark(); !ok {
		return &ValidationError{Name: "deal_remark", err: errors.New("ent: missing required field \"deal_remark\"")}
	}
	return nil
}

func (tqefc *TkQuestionErrorFeedbackCreate) sqlSave(ctx context.Context) (*TkQuestionErrorFeedback, error) {
	_node, _spec := tqefc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tqefc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tqefc *TkQuestionErrorFeedbackCreate) createSpec() (*TkQuestionErrorFeedback, *sqlgraph.CreateSpec) {
	var (
		_node = &TkQuestionErrorFeedback{config: tqefc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkquestionerrorfeedback.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionerrorfeedback.FieldID,
			},
		}
	)
	if value, ok := tqefc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tqefc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tqefc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tqefc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tqefc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := tqefc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := tqefc.mutation.ErrorDesc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldErrorDesc,
		})
		_node.ErrorDesc = value
	}
	if value, ok := tqefc.mutation.ErrorType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldErrorType,
		})
		_node.ErrorType = value
	}
	if value, ok := tqefc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := tqefc.mutation.DealRemark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionerrorfeedback.FieldDealRemark,
		})
		_node.DealRemark = value
	}
	if nodes := tqefc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.QuestionTable,
			Columns: []string{tkquestionerrorfeedback.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tqefc.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionerrorfeedback.AdminTable,
			Columns: []string{tkquestionerrorfeedback.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OperatorAdminID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkQuestionErrorFeedbackCreateBulk is the builder for creating many TkQuestionErrorFeedback entities in bulk.
type TkQuestionErrorFeedbackCreateBulk struct {
	config
	builders []*TkQuestionErrorFeedbackCreate
}

// Save creates the TkQuestionErrorFeedback entities in the database.
func (tqefcb *TkQuestionErrorFeedbackCreateBulk) Save(ctx context.Context) ([]*TkQuestionErrorFeedback, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tqefcb.builders))
	nodes := make([]*TkQuestionErrorFeedback, len(tqefcb.builders))
	mutators := make([]Mutator, len(tqefcb.builders))
	for i := range tqefcb.builders {
		func(i int, root context.Context) {
			builder := tqefcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkQuestionErrorFeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tqefcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tqefcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tqefcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tqefcb *TkQuestionErrorFeedbackCreateBulk) SaveX(ctx context.Context) []*TkQuestionErrorFeedback {
	v, err := tqefcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/message"
	"tkserver/internal/store/ent/messagetype"

	"entgo.io/ent/dialect/sql"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 消息名称
	Name string `json:"name"`
	// Detail holds the value of the "detail" field.
	// 内容详情
	Detail string `json:"detail"`
	// PublishType holds the value of the "publish_type" field.
	// 发布类型 1：定时发布，2：实时发布
	PublishType uint8 `json:"publish_type"`
	// Status holds the value of the "status" field.
	// 状态 1：启用，2：未启用
	Status uint8 `json:"status"`
	// PublishStatus holds the value of the "publish_status" field.
	// 发送状态 1：未发送，2：发送中，3：已发送
	PublishStatus uint8 `json:"publish_status"`
	// AutoPublishAt holds the value of the "auto_publish_at" field.
	// 定时发布时间
	AutoPublishAt *time.Time `json:"auto_publish_at"`
	// MessageTypeID holds the value of the "message_type_id" field.
	// 消息类型id
	MessageTypeID int `json:"message_type_id"`
	// CreatedAdminID holds the value of the "created_admin_id" field.
	// 创建人id
	CreatedAdminID int `json:"created_admin_id"`
	// AttachmentID holds the value of the "attachment_id" field.
	// 封面图id
	AttachmentID int `json:"attachment_id"`
	// CourseID holds the value of the "course_id" field.
	// 消息所属课程id
	CourseID int `json:"course_id"`
	// ClassID holds the value of the "class_id" field.
	// 消息所属班级id
	ClassID int `json:"class_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges MessageEdges `json:"edges"`
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// MessageType holds the value of the Message_type edge.
	MessageType *MessageType `json:"Message_type,omitempty"`
	// Admin holds the value of the admin edge.
	Admin *Admin `json:"admin,omitempty"`
	// Attachment holds the value of the attachment edge.
	Attachment *Attachment `json:"attachment,omitempty"`
	// Course holds the value of the course edge.
	Course *KcCourse `json:"course,omitempty"`
	// Class holds the value of the class edge.
	Class *KcClass `json:"class,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// MessageTypeOrErr returns the MessageType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) MessageTypeOrErr() (*MessageType, error) {
	if e.loadedTypes[0] {
		if e.MessageType == nil {
			// The edge Message_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: messagetype.Label}
		}
		return e.MessageType, nil
	}
	return nil, &NotLoadedError{edge: "Message_type"}
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) AdminOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Admin == nil {
			// The edge admin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// AttachmentOrErr returns the Attachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) AttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[2] {
		if e.Attachment == nil {
			// The edge attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.Attachment, nil
	}
	return nil, &NotLoadedError{edge: "attachment"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) CourseOrErr() (*KcCourse, error) {
	if e.loadedTypes[3] {
		if e.Course == nil {
			// The edge course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccourse.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) ClassOrErr() (*KcClass, error) {
	if e.loadedTypes[4] {
		if e.Class == nil {
			// The edge class was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kcclass.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[5] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldID, message.FieldPublishType, message.FieldStatus, message.FieldPublishStatus, message.FieldMessageTypeID, message.FieldCreatedAdminID, message.FieldAttachmentID, message.FieldCourseID, message.FieldClassID:
			values[i] = new(sql.NullInt64)
		case message.FieldUUID, message.FieldName, message.FieldDetail:
			values[i] = new(sql.NullString)
		case message.FieldCreatedAt, message.FieldUpdatedAt, message.FieldDeletedAt, message.FieldAutoPublishAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Message", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case message.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				m.UUID = value.String
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = new(time.Time)
				*m.CreatedAt = value.Time
			}
		case message.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = new(time.Time)
				*m.UpdatedAt = value.Time
			}
		case message.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				m.DeletedAt = new(time.Time)
				*m.DeletedAt = value.Time
			}
		case message.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case message.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				m.Detail = value.String
			}
		case message.FieldPublishType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publish_type", values[i])
			} else if value.Valid {
				m.PublishType = uint8(value.Int64)
			}
		case message.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = uint8(value.Int64)
			}
		case message.FieldPublishStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publish_status", values[i])
			} else if value.Valid {
				m.PublishStatus = uint8(value.Int64)
			}
		case message.FieldAutoPublishAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field auto_publish_at", values[i])
			} else if value.Valid {
				m.AutoPublishAt = new(time.Time)
				*m.AutoPublishAt = value.Time
			}
		case message.FieldMessageTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_type_id", values[i])
			} else if value.Valid {
				m.MessageTypeID = int(value.Int64)
			}
		case message.FieldCreatedAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_admin_id", values[i])
			} else if value.Valid {
				m.CreatedAdminID = int(value.Int64)
			}
		case message.FieldAttachmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_id", values[i])
			} else if value.Valid {
				m.AttachmentID = int(value.Int64)
			}
		case message.FieldCourseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				m.CourseID = int(value.Int64)
			}
		case message.FieldClassID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field class_id", values[i])
			} else if value.Valid {
				m.ClassID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMessageType queries the "Message_type" edge of the Message entity.
func (m *Message) QueryMessageType() *MessageTypeQuery {
	return (&MessageClient{config: m.config}).QueryMessageType(m)
}

// QueryAdmin queries the "admin" edge of the Message entity.
func (m *Message) QueryAdmin() *AdminQuery {
	return (&MessageClient{config: m.config}).QueryAdmin(m)
}

// QueryAttachment queries the "attachment" edge of the Message entity.
func (m *Message) QueryAttachment() *AttachmentQuery {
	return (&MessageClient{config: m.config}).QueryAttachment(m)
}

// QueryCourse queries the "course" edge of the Message entity.
func (m *Message) QueryCourse() *KcCourseQuery {
	return (&MessageClient{config: m.config}).QueryCourse(m)
}

// QueryClass queries the "class" edge of the Message entity.
func (m *Message) QueryClass() *KcClassQuery {
	return (&MessageClient{config: m.config}).QueryClass(m)
}

// QueryUsers queries the "users" edge of the Message entity.
func (m *Message) QueryUsers() *UserQuery {
	return (&MessageClient{config: m.config}).QueryUsers(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return (&MessageClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(m.UUID)
	if v := m.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := m.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := m.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", detail=")
	builder.WriteString(m.Detail)
	builder.WriteString(", publish_type=")
	builder.WriteString(fmt.Sprintf("%v", m.PublishType))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteString(", publish_status=")
	builder.WriteString(fmt.Sprintf("%v", m.PublishStatus))
	if v := m.AutoPublishAt; v != nil {
		builder.WriteString(", auto_publish_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", message_type_id=")
	builder.WriteString(fmt.Sprintf("%v", m.MessageTypeID))
	builder.WriteString(", created_admin_id=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedAdminID))
	builder.WriteString(", attachment_id=")
	builder.WriteString(fmt.Sprintf("%v", m.AttachmentID))
	builder.WriteString(", course_id=")
	builder.WriteString(fmt.Sprintf("%v", m.CourseID))
	builder.WriteString(", class_id=")
	builder.WriteString(fmt.Sprintf("%v", m.ClassID))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message

func (m Messages) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}

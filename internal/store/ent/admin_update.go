// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/activity"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/adminloginlog"
	"tkserver/internal/store/ent/adminoperationlog"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/message"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/role"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkquestionerrorfeedback"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminUpdate is the builder for updating Admin entities.
type AdminUpdate struct {
	config
	hooks    []Hook
	mutation *AdminMutation
}

// Where adds a new predicate for the AdminUpdate builder.
func (au *AdminUpdate) Where(ps ...predicate.Admin) *AdminUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetUUID sets the "uuid" field.
func (au *AdminUpdate) SetUUID(s string) *AdminUpdate {
	au.mutation.SetUUID(s)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AdminUpdate) SetUpdatedAt(t time.Time) *AdminUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AdminUpdate) ClearUpdatedAt() *AdminUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AdminUpdate) SetDeletedAt(t time.Time) *AdminUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AdminUpdate) SetNillableDeletedAt(t *time.Time) *AdminUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AdminUpdate) ClearDeletedAt() *AdminUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetPassword sets the "password" field.
func (au *AdminUpdate) SetPassword(s string) *AdminUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetSalt sets the "salt" field.
func (au *AdminUpdate) SetSalt(s string) *AdminUpdate {
	au.mutation.SetSalt(s)
	return au
}

// SetBossAdminID sets the "boss_admin_id" field.
func (au *AdminUpdate) SetBossAdminID(i int) *AdminUpdate {
	au.mutation.ResetBossAdminID()
	au.mutation.SetBossAdminID(i)
	return au
}

// SetNillableBossAdminID sets the "boss_admin_id" field if the given value is not nil.
func (au *AdminUpdate) SetNillableBossAdminID(i *int) *AdminUpdate {
	if i != nil {
		au.SetBossAdminID(*i)
	}
	return au
}

// AddBossAdminID adds i to the "boss_admin_id" field.
func (au *AdminUpdate) AddBossAdminID(i int) *AdminUpdate {
	au.mutation.AddBossAdminID(i)
	return au
}

// SetRealName sets the "real_name" field.
func (au *AdminUpdate) SetRealName(s string) *AdminUpdate {
	au.mutation.SetRealName(s)
	return au
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (au *AdminUpdate) SetNillableRealName(s *string) *AdminUpdate {
	if s != nil {
		au.SetRealName(*s)
	}
	return au
}

// SetEmail sets the "email" field.
func (au *AdminUpdate) SetEmail(s string) *AdminUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (au *AdminUpdate) SetNillableEmail(s *string) *AdminUpdate {
	if s != nil {
		au.SetEmail(*s)
	}
	return au
}

// SetPhone sets the "phone" field.
func (au *AdminUpdate) SetPhone(s string) *AdminUpdate {
	au.mutation.SetPhone(s)
	return au
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (au *AdminUpdate) SetNillablePhone(s *string) *AdminUpdate {
	if s != nil {
		au.SetPhone(*s)
	}
	return au
}

// SetThirdOpenid sets the "third_openid" field.
func (au *AdminUpdate) SetThirdOpenid(s string) *AdminUpdate {
	au.mutation.SetThirdOpenid(s)
	return au
}

// SetNillableThirdOpenid sets the "third_openid" field if the given value is not nil.
func (au *AdminUpdate) SetNillableThirdOpenid(s *string) *AdminUpdate {
	if s != nil {
		au.SetThirdOpenid(*s)
	}
	return au
}

// SetPlatform sets the "platform" field.
func (au *AdminUpdate) SetPlatform(u uint8) *AdminUpdate {
	au.mutation.ResetPlatform()
	au.mutation.SetPlatform(u)
	return au
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (au *AdminUpdate) SetNillablePlatform(u *uint8) *AdminUpdate {
	if u != nil {
		au.SetPlatform(*u)
	}
	return au
}

// AddPlatform adds u to the "platform" field.
func (au *AdminUpdate) AddPlatform(u uint8) *AdminUpdate {
	au.mutation.AddPlatform(u)
	return au
}

// SetIsActive sets the "is_active" field.
func (au *AdminUpdate) SetIsActive(u uint8) *AdminUpdate {
	au.mutation.ResetIsActive()
	au.mutation.SetIsActive(u)
	return au
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (au *AdminUpdate) SetNillableIsActive(u *uint8) *AdminUpdate {
	if u != nil {
		au.SetIsActive(*u)
	}
	return au
}

// AddIsActive adds u to the "is_active" field.
func (au *AdminUpdate) AddIsActive(u uint8) *AdminUpdate {
	au.mutation.AddIsActive(u)
	return au
}

// SetStatus sets the "status" field.
func (au *AdminUpdate) SetStatus(u uint8) *AdminUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(u)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AdminUpdate) SetNillableStatus(u *uint8) *AdminUpdate {
	if u != nil {
		au.SetStatus(*u)
	}
	return au
}

// AddStatus adds u to the "status" field.
func (au *AdminUpdate) AddStatus(u uint8) *AdminUpdate {
	au.mutation.AddStatus(u)
	return au
}

// SetAdminAvatarID sets the "admin_avatar_id" field.
func (au *AdminUpdate) SetAdminAvatarID(i int) *AdminUpdate {
	au.mutation.ResetAdminAvatarID()
	au.mutation.SetAdminAvatarID(i)
	return au
}

// SetNillableAdminAvatarID sets the "admin_avatar_id" field if the given value is not nil.
func (au *AdminUpdate) SetNillableAdminAvatarID(i *int) *AdminUpdate {
	if i != nil {
		au.SetAdminAvatarID(*i)
	}
	return au
}

// ClearAdminAvatarID clears the value of the "admin_avatar_id" field.
func (au *AdminUpdate) ClearAdminAvatarID() *AdminUpdate {
	au.mutation.ClearAdminAvatarID()
	return au
}

// SetRemark sets the "remark" field.
func (au *AdminUpdate) SetRemark(s string) *AdminUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AdminUpdate) SetNillableRemark(s *string) *AdminUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// AddAdminLoginLogIDs adds the "admin_login_logs" edge to the AdminLoginLog entity by IDs.
func (au *AdminUpdate) AddAdminLoginLogIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminLoginLogIDs(ids...)
	return au
}

// AddAdminLoginLogs adds the "admin_login_logs" edges to the AdminLoginLog entity.
func (au *AdminUpdate) AddAdminLoginLogs(a ...*AdminLoginLog) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAdminLoginLogIDs(ids...)
}

// AddOperationAdminLogIDs adds the "operation_admin_logs" edge to the AdminOperationLog entity by IDs.
func (au *AdminUpdate) AddOperationAdminLogIDs(ids ...int) *AdminUpdate {
	au.mutation.AddOperationAdminLogIDs(ids...)
	return au
}

// AddOperationAdminLogs adds the "operation_admin_logs" edges to the AdminOperationLog entity.
func (au *AdminUpdate) AddOperationAdminLogs(a ...*AdminOperationLog) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddOperationAdminLogIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (au *AdminUpdate) AddRoleIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRoleIDs(ids...)
	return au
}

// AddRoles adds the "roles" edges to the Role entity.
func (au *AdminUpdate) AddRoles(r ...*Role) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRoleIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (au *AdminUpdate) AddActivityIDs(ids ...int) *AdminUpdate {
	au.mutation.AddActivityIDs(ids...)
	return au
}

// AddActivities adds the "activities" edges to the Activity entity.
func (au *AdminUpdate) AddActivities(a ...*Activity) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddActivityIDs(ids...)
}

// AddMessageCreatedAdminIDIDs adds the "message_created_admin_id" edge to the Message entity by IDs.
func (au *AdminUpdate) AddMessageCreatedAdminIDIDs(ids ...int) *AdminUpdate {
	au.mutation.AddMessageCreatedAdminIDIDs(ids...)
	return au
}

// AddMessageCreatedAdminID adds the "message_created_admin_id" edges to the Message entity.
func (au *AdminUpdate) AddMessageCreatedAdminID(m ...*Message) *AdminUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMessageCreatedAdminIDIDs(ids...)
}

// AddAdminQuestionBankIDs adds the "admin_question_banks" edge to the TkQuestionBank entity by IDs.
func (au *AdminUpdate) AddAdminQuestionBankIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminQuestionBankIDs(ids...)
	return au
}

// AddAdminQuestionBanks adds the "admin_question_banks" edges to the TkQuestionBank entity.
func (au *AdminUpdate) AddAdminQuestionBanks(t ...*TkQuestionBank) *AdminUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddAdminQuestionBankIDs(ids...)
}

// AddAdminQuestionIDs adds the "admin_Questions" edge to the TkQuestion entity by IDs.
func (au *AdminUpdate) AddAdminQuestionIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminQuestionIDs(ids...)
	return au
}

// AddAdminQuestions adds the "admin_Questions" edges to the TkQuestion entity.
func (au *AdminUpdate) AddAdminQuestions(t ...*TkQuestion) *AdminUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddAdminQuestionIDs(ids...)
}

// AddAdminExamPaperIDs adds the "admin_exam_papers" edge to the TkExamPaper entity by IDs.
func (au *AdminUpdate) AddAdminExamPaperIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminExamPaperIDs(ids...)
	return au
}

// AddAdminExamPapers adds the "admin_exam_papers" edges to the TkExamPaper entity.
func (au *AdminUpdate) AddAdminExamPapers(t ...*TkExamPaper) *AdminUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddAdminExamPaperIDs(ids...)
}

// AddAdminErrorFeedbackIDs adds the "admin_error_feedbacks" edge to the TkQuestionErrorFeedback entity by IDs.
func (au *AdminUpdate) AddAdminErrorFeedbackIDs(ids ...int) *AdminUpdate {
	au.mutation.AddAdminErrorFeedbackIDs(ids...)
	return au
}

// AddAdminErrorFeedbacks adds the "admin_error_feedbacks" edges to the TkQuestionErrorFeedback entity.
func (au *AdminUpdate) AddAdminErrorFeedbacks(t ...*TkQuestionErrorFeedback) *AdminUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddAdminErrorFeedbackIDs(ids...)
}

// AddCourseIDs adds the "course" edge to the KcCourse entity by IDs.
func (au *AdminUpdate) AddCourseIDs(ids ...int) *AdminUpdate {
	au.mutation.AddCourseIDs(ids...)
	return au
}

// AddCourse adds the "course" edges to the KcCourse entity.
func (au *AdminUpdate) AddCourse(k ...*KcCourse) *AdminUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.AddCourseIDs(ids...)
}

// AddClassAdminIDs adds the "class_admin" edge to the KcClass entity by IDs.
func (au *AdminUpdate) AddClassAdminIDs(ids ...int) *AdminUpdate {
	au.mutation.AddClassAdminIDs(ids...)
	return au
}

// AddClassAdmin adds the "class_admin" edges to the KcClass entity.
func (au *AdminUpdate) AddClassAdmin(k ...*KcClass) *AdminUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.AddClassAdminIDs(ids...)
}

// SetAdminAttachmentsID sets the "admin_attachments" edge to the Attachment entity by ID.
func (au *AdminUpdate) SetAdminAttachmentsID(id int) *AdminUpdate {
	au.mutation.SetAdminAttachmentsID(id)
	return au
}

// SetNillableAdminAttachmentsID sets the "admin_attachments" edge to the Attachment entity by ID if the given value is not nil.
func (au *AdminUpdate) SetNillableAdminAttachmentsID(id *int) *AdminUpdate {
	if id != nil {
		au = au.SetAdminAttachmentsID(*id)
	}
	return au
}

// SetAdminAttachments sets the "admin_attachments" edge to the Attachment entity.
func (au *AdminUpdate) SetAdminAttachments(a *Attachment) *AdminUpdate {
	return au.SetAdminAttachmentsID(a.ID)
}

// Mutation returns the AdminMutation object of the builder.
func (au *AdminUpdate) Mutation() *AdminMutation {
	return au.mutation
}

// ClearAdminLoginLogs clears all "admin_login_logs" edges to the AdminLoginLog entity.
func (au *AdminUpdate) ClearAdminLoginLogs() *AdminUpdate {
	au.mutation.ClearAdminLoginLogs()
	return au
}

// RemoveAdminLoginLogIDs removes the "admin_login_logs" edge to AdminLoginLog entities by IDs.
func (au *AdminUpdate) RemoveAdminLoginLogIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminLoginLogIDs(ids...)
	return au
}

// RemoveAdminLoginLogs removes "admin_login_logs" edges to AdminLoginLog entities.
func (au *AdminUpdate) RemoveAdminLoginLogs(a ...*AdminLoginLog) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAdminLoginLogIDs(ids...)
}

// ClearOperationAdminLogs clears all "operation_admin_logs" edges to the AdminOperationLog entity.
func (au *AdminUpdate) ClearOperationAdminLogs() *AdminUpdate {
	au.mutation.ClearOperationAdminLogs()
	return au
}

// RemoveOperationAdminLogIDs removes the "operation_admin_logs" edge to AdminOperationLog entities by IDs.
func (au *AdminUpdate) RemoveOperationAdminLogIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveOperationAdminLogIDs(ids...)
	return au
}

// RemoveOperationAdminLogs removes "operation_admin_logs" edges to AdminOperationLog entities.
func (au *AdminUpdate) RemoveOperationAdminLogs(a ...*AdminOperationLog) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveOperationAdminLogIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (au *AdminUpdate) ClearRoles() *AdminUpdate {
	au.mutation.ClearRoles()
	return au
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (au *AdminUpdate) RemoveRoleIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRoleIDs(ids...)
	return au
}

// RemoveRoles removes "roles" edges to Role entities.
func (au *AdminUpdate) RemoveRoles(r ...*Role) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRoleIDs(ids...)
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (au *AdminUpdate) ClearActivities() *AdminUpdate {
	au.mutation.ClearActivities()
	return au
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (au *AdminUpdate) RemoveActivityIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveActivityIDs(ids...)
	return au
}

// RemoveActivities removes "activities" edges to Activity entities.
func (au *AdminUpdate) RemoveActivities(a ...*Activity) *AdminUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveActivityIDs(ids...)
}

// ClearMessageCreatedAdminID clears all "message_created_admin_id" edges to the Message entity.
func (au *AdminUpdate) ClearMessageCreatedAdminID() *AdminUpdate {
	au.mutation.ClearMessageCreatedAdminID()
	return au
}

// RemoveMessageCreatedAdminIDIDs removes the "message_created_admin_id" edge to Message entities by IDs.
func (au *AdminUpdate) RemoveMessageCreatedAdminIDIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveMessageCreatedAdminIDIDs(ids...)
	return au
}

// RemoveMessageCreatedAdminID removes "message_created_admin_id" edges to Message entities.
func (au *AdminUpdate) RemoveMessageCreatedAdminID(m ...*Message) *AdminUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMessageCreatedAdminIDIDs(ids...)
}

// ClearAdminQuestionBanks clears all "admin_question_banks" edges to the TkQuestionBank entity.
func (au *AdminUpdate) ClearAdminQuestionBanks() *AdminUpdate {
	au.mutation.ClearAdminQuestionBanks()
	return au
}

// RemoveAdminQuestionBankIDs removes the "admin_question_banks" edge to TkQuestionBank entities by IDs.
func (au *AdminUpdate) RemoveAdminQuestionBankIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminQuestionBankIDs(ids...)
	return au
}

// RemoveAdminQuestionBanks removes "admin_question_banks" edges to TkQuestionBank entities.
func (au *AdminUpdate) RemoveAdminQuestionBanks(t ...*TkQuestionBank) *AdminUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveAdminQuestionBankIDs(ids...)
}

// ClearAdminQuestions clears all "admin_Questions" edges to the TkQuestion entity.
func (au *AdminUpdate) ClearAdminQuestions() *AdminUpdate {
	au.mutation.ClearAdminQuestions()
	return au
}

// RemoveAdminQuestionIDs removes the "admin_Questions" edge to TkQuestion entities by IDs.
func (au *AdminUpdate) RemoveAdminQuestionIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminQuestionIDs(ids...)
	return au
}

// RemoveAdminQuestions removes "admin_Questions" edges to TkQuestion entities.
func (au *AdminUpdate) RemoveAdminQuestions(t ...*TkQuestion) *AdminUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveAdminQuestionIDs(ids...)
}

// ClearAdminExamPapers clears all "admin_exam_papers" edges to the TkExamPaper entity.
func (au *AdminUpdate) ClearAdminExamPapers() *AdminUpdate {
	au.mutation.ClearAdminExamPapers()
	return au
}

// RemoveAdminExamPaperIDs removes the "admin_exam_papers" edge to TkExamPaper entities by IDs.
func (au *AdminUpdate) RemoveAdminExamPaperIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminExamPaperIDs(ids...)
	return au
}

// RemoveAdminExamPapers removes "admin_exam_papers" edges to TkExamPaper entities.
func (au *AdminUpdate) RemoveAdminExamPapers(t ...*TkExamPaper) *AdminUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveAdminExamPaperIDs(ids...)
}

// ClearAdminErrorFeedbacks clears all "admin_error_feedbacks" edges to the TkQuestionErrorFeedback entity.
func (au *AdminUpdate) ClearAdminErrorFeedbacks() *AdminUpdate {
	au.mutation.ClearAdminErrorFeedbacks()
	return au
}

// RemoveAdminErrorFeedbackIDs removes the "admin_error_feedbacks" edge to TkQuestionErrorFeedback entities by IDs.
func (au *AdminUpdate) RemoveAdminErrorFeedbackIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveAdminErrorFeedbackIDs(ids...)
	return au
}

// RemoveAdminErrorFeedbacks removes "admin_error_feedbacks" edges to TkQuestionErrorFeedback entities.
func (au *AdminUpdate) RemoveAdminErrorFeedbacks(t ...*TkQuestionErrorFeedback) *AdminUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveAdminErrorFeedbackIDs(ids...)
}

// ClearCourse clears all "course" edges to the KcCourse entity.
func (au *AdminUpdate) ClearCourse() *AdminUpdate {
	au.mutation.ClearCourse()
	return au
}

// RemoveCourseIDs removes the "course" edge to KcCourse entities by IDs.
func (au *AdminUpdate) RemoveCourseIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveCourseIDs(ids...)
	return au
}

// RemoveCourse removes "course" edges to KcCourse entities.
func (au *AdminUpdate) RemoveCourse(k ...*KcCourse) *AdminUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.RemoveCourseIDs(ids...)
}

// ClearClassAdmin clears all "class_admin" edges to the KcClass entity.
func (au *AdminUpdate) ClearClassAdmin() *AdminUpdate {
	au.mutation.ClearClassAdmin()
	return au
}

// RemoveClassAdminIDs removes the "class_admin" edge to KcClass entities by IDs.
func (au *AdminUpdate) RemoveClassAdminIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveClassAdminIDs(ids...)
	return au
}

// RemoveClassAdmin removes "class_admin" edges to KcClass entities.
func (au *AdminUpdate) RemoveClassAdmin(k ...*KcClass) *AdminUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return au.RemoveClassAdminIDs(ids...)
}

// ClearAdminAttachments clears the "admin_attachments" edge to the Attachment entity.
func (au *AdminUpdate) ClearAdminAttachments() *AdminUpdate {
	au.mutation.ClearAdminAttachments()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdminUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdminUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdminUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdminUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdminUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := admin.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AdminUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   admin.Table,
			Columns: admin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admin.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldUUID,
		})
	}
	if au.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admin.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admin.FieldUpdatedAt,
		})
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admin.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admin.FieldDeletedAt,
		})
	}
	if au.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admin.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldPassword,
		})
	}
	if value, ok := au.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldSalt,
		})
	}
	if value, ok := au.mutation.BossAdminID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldBossAdminID,
		})
	}
	if value, ok := au.mutation.AddedBossAdminID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldBossAdminID,
		})
	}
	if value, ok := au.mutation.RealName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldRealName,
		})
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldEmail,
		})
	}
	if value, ok := au.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldPhone,
		})
	}
	if value, ok := au.mutation.ThirdOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldThirdOpenid,
		})
	}
	if value, ok := au.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldPlatform,
		})
	}
	if value, ok := au.mutation.AddedPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldPlatform,
		})
	}
	if value, ok := au.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldIsActive,
		})
	}
	if value, ok := au.mutation.AddedIsActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldIsActive,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldStatus,
		})
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldStatus,
		})
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldRemark,
		})
	}
	if au.mutation.AdminLoginLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminLoginLogsTable,
			Columns: []string{admin.AdminLoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminloginlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminLoginLogsIDs(); len(nodes) > 0 && !au.mutation.AdminLoginLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminLoginLogsTable,
			Columns: []string{admin.AdminLoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminLoginLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminLoginLogsTable,
			Columns: []string{admin.AdminLoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OperationAdminLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OperationAdminLogsTable,
			Columns: []string{admin.OperationAdminLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminoperationlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOperationAdminLogsIDs(); len(nodes) > 0 && !au.mutation.OperationAdminLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OperationAdminLogsTable,
			Columns: []string{admin.OperationAdminLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminoperationlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OperationAdminLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OperationAdminLogsTable,
			Columns: []string{admin.OperationAdminLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminoperationlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRolesIDs(); len(nodes) > 0 && !au.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ActivitiesTable,
			Columns: []string{admin.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !au.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ActivitiesTable,
			Columns: []string{admin.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ActivitiesTable,
			Columns: []string{admin.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MessageCreatedAdminIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.MessageCreatedAdminIDTable,
			Columns: []string{admin.MessageCreatedAdminIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMessageCreatedAdminIDIDs(); len(nodes) > 0 && !au.mutation.MessageCreatedAdminIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.MessageCreatedAdminIDTable,
			Columns: []string{admin.MessageCreatedAdminIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MessageCreatedAdminIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.MessageCreatedAdminIDTable,
			Columns: []string{admin.MessageCreatedAdminIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionBanksTable,
			Columns: []string{admin.AdminQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminQuestionBanksIDs(); len(nodes) > 0 && !au.mutation.AdminQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionBanksTable,
			Columns: []string{admin.AdminQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionBanksTable,
			Columns: []string{admin.AdminQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionsTable,
			Columns: []string{admin.AdminQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminQuestionsIDs(); len(nodes) > 0 && !au.mutation.AdminQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionsTable,
			Columns: []string{admin.AdminQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionsTable,
			Columns: []string{admin.AdminQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminExamPapersTable,
			Columns: []string{admin.AdminExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminExamPapersIDs(); len(nodes) > 0 && !au.mutation.AdminExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminExamPapersTable,
			Columns: []string{admin.AdminExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminExamPapersTable,
			Columns: []string{admin.AdminExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminErrorFeedbacksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminErrorFeedbacksTable,
			Columns: []string{admin.AdminErrorFeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionerrorfeedback.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAdminErrorFeedbacksIDs(); len(nodes) > 0 && !au.mutation.AdminErrorFeedbacksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminErrorFeedbacksTable,
			Columns: []string{admin.AdminErrorFeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionerrorfeedback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminErrorFeedbacksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminErrorFeedbacksTable,
			Columns: []string{admin.AdminErrorFeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionerrorfeedback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CourseTable,
			Columns: []string{admin.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCourseIDs(); len(nodes) > 0 && !au.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CourseTable,
			Columns: []string{admin.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CourseTable,
			Columns: []string{admin.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ClassAdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ClassAdminTable,
			Columns: []string{admin.ClassAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedClassAdminIDs(); len(nodes) > 0 && !au.mutation.ClassAdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ClassAdminTable,
			Columns: []string{admin.ClassAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ClassAdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ClassAdminTable,
			Columns: []string{admin.ClassAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AdminAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   admin.AdminAttachmentsTable,
			Columns: []string{admin.AdminAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AdminAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   admin.AdminAttachmentsTable,
			Columns: []string{admin.AdminAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AdminUpdateOne is the builder for updating a single Admin entity.
type AdminUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminMutation
}

// SetUUID sets the "uuid" field.
func (auo *AdminUpdateOne) SetUUID(s string) *AdminUpdateOne {
	auo.mutation.SetUUID(s)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AdminUpdateOne) SetUpdatedAt(t time.Time) *AdminUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AdminUpdateOne) ClearUpdatedAt() *AdminUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AdminUpdateOne) SetDeletedAt(t time.Time) *AdminUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AdminUpdateOne) ClearDeletedAt() *AdminUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetPassword sets the "password" field.
func (auo *AdminUpdateOne) SetPassword(s string) *AdminUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetSalt sets the "salt" field.
func (auo *AdminUpdateOne) SetSalt(s string) *AdminUpdateOne {
	auo.mutation.SetSalt(s)
	return auo
}

// SetBossAdminID sets the "boss_admin_id" field.
func (auo *AdminUpdateOne) SetBossAdminID(i int) *AdminUpdateOne {
	auo.mutation.ResetBossAdminID()
	auo.mutation.SetBossAdminID(i)
	return auo
}

// SetNillableBossAdminID sets the "boss_admin_id" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableBossAdminID(i *int) *AdminUpdateOne {
	if i != nil {
		auo.SetBossAdminID(*i)
	}
	return auo
}

// AddBossAdminID adds i to the "boss_admin_id" field.
func (auo *AdminUpdateOne) AddBossAdminID(i int) *AdminUpdateOne {
	auo.mutation.AddBossAdminID(i)
	return auo
}

// SetRealName sets the "real_name" field.
func (auo *AdminUpdateOne) SetRealName(s string) *AdminUpdateOne {
	auo.mutation.SetRealName(s)
	return auo
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableRealName(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetRealName(*s)
	}
	return auo
}

// SetEmail sets the "email" field.
func (auo *AdminUpdateOne) SetEmail(s string) *AdminUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableEmail(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetEmail(*s)
	}
	return auo
}

// SetPhone sets the "phone" field.
func (auo *AdminUpdateOne) SetPhone(s string) *AdminUpdateOne {
	auo.mutation.SetPhone(s)
	return auo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillablePhone(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetPhone(*s)
	}
	return auo
}

// SetThirdOpenid sets the "third_openid" field.
func (auo *AdminUpdateOne) SetThirdOpenid(s string) *AdminUpdateOne {
	auo.mutation.SetThirdOpenid(s)
	return auo
}

// SetNillableThirdOpenid sets the "third_openid" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableThirdOpenid(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetThirdOpenid(*s)
	}
	return auo
}

// SetPlatform sets the "platform" field.
func (auo *AdminUpdateOne) SetPlatform(u uint8) *AdminUpdateOne {
	auo.mutation.ResetPlatform()
	auo.mutation.SetPlatform(u)
	return auo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillablePlatform(u *uint8) *AdminUpdateOne {
	if u != nil {
		auo.SetPlatform(*u)
	}
	return auo
}

// AddPlatform adds u to the "platform" field.
func (auo *AdminUpdateOne) AddPlatform(u uint8) *AdminUpdateOne {
	auo.mutation.AddPlatform(u)
	return auo
}

// SetIsActive sets the "is_active" field.
func (auo *AdminUpdateOne) SetIsActive(u uint8) *AdminUpdateOne {
	auo.mutation.ResetIsActive()
	auo.mutation.SetIsActive(u)
	return auo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableIsActive(u *uint8) *AdminUpdateOne {
	if u != nil {
		auo.SetIsActive(*u)
	}
	return auo
}

// AddIsActive adds u to the "is_active" field.
func (auo *AdminUpdateOne) AddIsActive(u uint8) *AdminUpdateOne {
	auo.mutation.AddIsActive(u)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AdminUpdateOne) SetStatus(u uint8) *AdminUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(u)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableStatus(u *uint8) *AdminUpdateOne {
	if u != nil {
		auo.SetStatus(*u)
	}
	return auo
}

// AddStatus adds u to the "status" field.
func (auo *AdminUpdateOne) AddStatus(u uint8) *AdminUpdateOne {
	auo.mutation.AddStatus(u)
	return auo
}

// SetAdminAvatarID sets the "admin_avatar_id" field.
func (auo *AdminUpdateOne) SetAdminAvatarID(i int) *AdminUpdateOne {
	auo.mutation.ResetAdminAvatarID()
	auo.mutation.SetAdminAvatarID(i)
	return auo
}

// SetNillableAdminAvatarID sets the "admin_avatar_id" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableAdminAvatarID(i *int) *AdminUpdateOne {
	if i != nil {
		auo.SetAdminAvatarID(*i)
	}
	return auo
}

// ClearAdminAvatarID clears the value of the "admin_avatar_id" field.
func (auo *AdminUpdateOne) ClearAdminAvatarID() *AdminUpdateOne {
	auo.mutation.ClearAdminAvatarID()
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AdminUpdateOne) SetRemark(s string) *AdminUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableRemark(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// AddAdminLoginLogIDs adds the "admin_login_logs" edge to the AdminLoginLog entity by IDs.
func (auo *AdminUpdateOne) AddAdminLoginLogIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminLoginLogIDs(ids...)
	return auo
}

// AddAdminLoginLogs adds the "admin_login_logs" edges to the AdminLoginLog entity.
func (auo *AdminUpdateOne) AddAdminLoginLogs(a ...*AdminLoginLog) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAdminLoginLogIDs(ids...)
}

// AddOperationAdminLogIDs adds the "operation_admin_logs" edge to the AdminOperationLog entity by IDs.
func (auo *AdminUpdateOne) AddOperationAdminLogIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddOperationAdminLogIDs(ids...)
	return auo
}

// AddOperationAdminLogs adds the "operation_admin_logs" edges to the AdminOperationLog entity.
func (auo *AdminUpdateOne) AddOperationAdminLogs(a ...*AdminOperationLog) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddOperationAdminLogIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (auo *AdminUpdateOne) AddRoleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRoleIDs(ids...)
	return auo
}

// AddRoles adds the "roles" edges to the Role entity.
func (auo *AdminUpdateOne) AddRoles(r ...*Role) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRoleIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (auo *AdminUpdateOne) AddActivityIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddActivityIDs(ids...)
	return auo
}

// AddActivities adds the "activities" edges to the Activity entity.
func (auo *AdminUpdateOne) AddActivities(a ...*Activity) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddActivityIDs(ids...)
}

// AddMessageCreatedAdminIDIDs adds the "message_created_admin_id" edge to the Message entity by IDs.
func (auo *AdminUpdateOne) AddMessageCreatedAdminIDIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddMessageCreatedAdminIDIDs(ids...)
	return auo
}

// AddMessageCreatedAdminID adds the "message_created_admin_id" edges to the Message entity.
func (auo *AdminUpdateOne) AddMessageCreatedAdminID(m ...*Message) *AdminUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMessageCreatedAdminIDIDs(ids...)
}

// AddAdminQuestionBankIDs adds the "admin_question_banks" edge to the TkQuestionBank entity by IDs.
func (auo *AdminUpdateOne) AddAdminQuestionBankIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminQuestionBankIDs(ids...)
	return auo
}

// AddAdminQuestionBanks adds the "admin_question_banks" edges to the TkQuestionBank entity.
func (auo *AdminUpdateOne) AddAdminQuestionBanks(t ...*TkQuestionBank) *AdminUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddAdminQuestionBankIDs(ids...)
}

// AddAdminQuestionIDs adds the "admin_Questions" edge to the TkQuestion entity by IDs.
func (auo *AdminUpdateOne) AddAdminQuestionIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminQuestionIDs(ids...)
	return auo
}

// AddAdminQuestions adds the "admin_Questions" edges to the TkQuestion entity.
func (auo *AdminUpdateOne) AddAdminQuestions(t ...*TkQuestion) *AdminUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddAdminQuestionIDs(ids...)
}

// AddAdminExamPaperIDs adds the "admin_exam_papers" edge to the TkExamPaper entity by IDs.
func (auo *AdminUpdateOne) AddAdminExamPaperIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminExamPaperIDs(ids...)
	return auo
}

// AddAdminExamPapers adds the "admin_exam_papers" edges to the TkExamPaper entity.
func (auo *AdminUpdateOne) AddAdminExamPapers(t ...*TkExamPaper) *AdminUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddAdminExamPaperIDs(ids...)
}

// AddAdminErrorFeedbackIDs adds the "admin_error_feedbacks" edge to the TkQuestionErrorFeedback entity by IDs.
func (auo *AdminUpdateOne) AddAdminErrorFeedbackIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddAdminErrorFeedbackIDs(ids...)
	return auo
}

// AddAdminErrorFeedbacks adds the "admin_error_feedbacks" edges to the TkQuestionErrorFeedback entity.
func (auo *AdminUpdateOne) AddAdminErrorFeedbacks(t ...*TkQuestionErrorFeedback) *AdminUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddAdminErrorFeedbackIDs(ids...)
}

// AddCourseIDs adds the "course" edge to the KcCourse entity by IDs.
func (auo *AdminUpdateOne) AddCourseIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddCourseIDs(ids...)
	return auo
}

// AddCourse adds the "course" edges to the KcCourse entity.
func (auo *AdminUpdateOne) AddCourse(k ...*KcCourse) *AdminUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.AddCourseIDs(ids...)
}

// AddClassAdminIDs adds the "class_admin" edge to the KcClass entity by IDs.
func (auo *AdminUpdateOne) AddClassAdminIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddClassAdminIDs(ids...)
	return auo
}

// AddClassAdmin adds the "class_admin" edges to the KcClass entity.
func (auo *AdminUpdateOne) AddClassAdmin(k ...*KcClass) *AdminUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.AddClassAdminIDs(ids...)
}

// SetAdminAttachmentsID sets the "admin_attachments" edge to the Attachment entity by ID.
func (auo *AdminUpdateOne) SetAdminAttachmentsID(id int) *AdminUpdateOne {
	auo.mutation.SetAdminAttachmentsID(id)
	return auo
}

// SetNillableAdminAttachmentsID sets the "admin_attachments" edge to the Attachment entity by ID if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableAdminAttachmentsID(id *int) *AdminUpdateOne {
	if id != nil {
		auo = auo.SetAdminAttachmentsID(*id)
	}
	return auo
}

// SetAdminAttachments sets the "admin_attachments" edge to the Attachment entity.
func (auo *AdminUpdateOne) SetAdminAttachments(a *Attachment) *AdminUpdateOne {
	return auo.SetAdminAttachmentsID(a.ID)
}

// Mutation returns the AdminMutation object of the builder.
func (auo *AdminUpdateOne) Mutation() *AdminMutation {
	return auo.mutation
}

// ClearAdminLoginLogs clears all "admin_login_logs" edges to the AdminLoginLog entity.
func (auo *AdminUpdateOne) ClearAdminLoginLogs() *AdminUpdateOne {
	auo.mutation.ClearAdminLoginLogs()
	return auo
}

// RemoveAdminLoginLogIDs removes the "admin_login_logs" edge to AdminLoginLog entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminLoginLogIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminLoginLogIDs(ids...)
	return auo
}

// RemoveAdminLoginLogs removes "admin_login_logs" edges to AdminLoginLog entities.
func (auo *AdminUpdateOne) RemoveAdminLoginLogs(a ...*AdminLoginLog) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAdminLoginLogIDs(ids...)
}

// ClearOperationAdminLogs clears all "operation_admin_logs" edges to the AdminOperationLog entity.
func (auo *AdminUpdateOne) ClearOperationAdminLogs() *AdminUpdateOne {
	auo.mutation.ClearOperationAdminLogs()
	return auo
}

// RemoveOperationAdminLogIDs removes the "operation_admin_logs" edge to AdminOperationLog entities by IDs.
func (auo *AdminUpdateOne) RemoveOperationAdminLogIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveOperationAdminLogIDs(ids...)
	return auo
}

// RemoveOperationAdminLogs removes "operation_admin_logs" edges to AdminOperationLog entities.
func (auo *AdminUpdateOne) RemoveOperationAdminLogs(a ...*AdminOperationLog) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveOperationAdminLogIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (auo *AdminUpdateOne) ClearRoles() *AdminUpdateOne {
	auo.mutation.ClearRoles()
	return auo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (auo *AdminUpdateOne) RemoveRoleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRoleIDs(ids...)
	return auo
}

// RemoveRoles removes "roles" edges to Role entities.
func (auo *AdminUpdateOne) RemoveRoles(r ...*Role) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRoleIDs(ids...)
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (auo *AdminUpdateOne) ClearActivities() *AdminUpdateOne {
	auo.mutation.ClearActivities()
	return auo
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (auo *AdminUpdateOne) RemoveActivityIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveActivityIDs(ids...)
	return auo
}

// RemoveActivities removes "activities" edges to Activity entities.
func (auo *AdminUpdateOne) RemoveActivities(a ...*Activity) *AdminUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveActivityIDs(ids...)
}

// ClearMessageCreatedAdminID clears all "message_created_admin_id" edges to the Message entity.
func (auo *AdminUpdateOne) ClearMessageCreatedAdminID() *AdminUpdateOne {
	auo.mutation.ClearMessageCreatedAdminID()
	return auo
}

// RemoveMessageCreatedAdminIDIDs removes the "message_created_admin_id" edge to Message entities by IDs.
func (auo *AdminUpdateOne) RemoveMessageCreatedAdminIDIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveMessageCreatedAdminIDIDs(ids...)
	return auo
}

// RemoveMessageCreatedAdminID removes "message_created_admin_id" edges to Message entities.
func (auo *AdminUpdateOne) RemoveMessageCreatedAdminID(m ...*Message) *AdminUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMessageCreatedAdminIDIDs(ids...)
}

// ClearAdminQuestionBanks clears all "admin_question_banks" edges to the TkQuestionBank entity.
func (auo *AdminUpdateOne) ClearAdminQuestionBanks() *AdminUpdateOne {
	auo.mutation.ClearAdminQuestionBanks()
	return auo
}

// RemoveAdminQuestionBankIDs removes the "admin_question_banks" edge to TkQuestionBank entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminQuestionBankIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminQuestionBankIDs(ids...)
	return auo
}

// RemoveAdminQuestionBanks removes "admin_question_banks" edges to TkQuestionBank entities.
func (auo *AdminUpdateOne) RemoveAdminQuestionBanks(t ...*TkQuestionBank) *AdminUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveAdminQuestionBankIDs(ids...)
}

// ClearAdminQuestions clears all "admin_Questions" edges to the TkQuestion entity.
func (auo *AdminUpdateOne) ClearAdminQuestions() *AdminUpdateOne {
	auo.mutation.ClearAdminQuestions()
	return auo
}

// RemoveAdminQuestionIDs removes the "admin_Questions" edge to TkQuestion entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminQuestionIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminQuestionIDs(ids...)
	return auo
}

// RemoveAdminQuestions removes "admin_Questions" edges to TkQuestion entities.
func (auo *AdminUpdateOne) RemoveAdminQuestions(t ...*TkQuestion) *AdminUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveAdminQuestionIDs(ids...)
}

// ClearAdminExamPapers clears all "admin_exam_papers" edges to the TkExamPaper entity.
func (auo *AdminUpdateOne) ClearAdminExamPapers() *AdminUpdateOne {
	auo.mutation.ClearAdminExamPapers()
	return auo
}

// RemoveAdminExamPaperIDs removes the "admin_exam_papers" edge to TkExamPaper entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminExamPaperIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminExamPaperIDs(ids...)
	return auo
}

// RemoveAdminExamPapers removes "admin_exam_papers" edges to TkExamPaper entities.
func (auo *AdminUpdateOne) RemoveAdminExamPapers(t ...*TkExamPaper) *AdminUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveAdminExamPaperIDs(ids...)
}

// ClearAdminErrorFeedbacks clears all "admin_error_feedbacks" edges to the TkQuestionErrorFeedback entity.
func (auo *AdminUpdateOne) ClearAdminErrorFeedbacks() *AdminUpdateOne {
	auo.mutation.ClearAdminErrorFeedbacks()
	return auo
}

// RemoveAdminErrorFeedbackIDs removes the "admin_error_feedbacks" edge to TkQuestionErrorFeedback entities by IDs.
func (auo *AdminUpdateOne) RemoveAdminErrorFeedbackIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveAdminErrorFeedbackIDs(ids...)
	return auo
}

// RemoveAdminErrorFeedbacks removes "admin_error_feedbacks" edges to TkQuestionErrorFeedback entities.
func (auo *AdminUpdateOne) RemoveAdminErrorFeedbacks(t ...*TkQuestionErrorFeedback) *AdminUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveAdminErrorFeedbackIDs(ids...)
}

// ClearCourse clears all "course" edges to the KcCourse entity.
func (auo *AdminUpdateOne) ClearCourse() *AdminUpdateOne {
	auo.mutation.ClearCourse()
	return auo
}

// RemoveCourseIDs removes the "course" edge to KcCourse entities by IDs.
func (auo *AdminUpdateOne) RemoveCourseIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveCourseIDs(ids...)
	return auo
}

// RemoveCourse removes "course" edges to KcCourse entities.
func (auo *AdminUpdateOne) RemoveCourse(k ...*KcCourse) *AdminUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.RemoveCourseIDs(ids...)
}

// ClearClassAdmin clears all "class_admin" edges to the KcClass entity.
func (auo *AdminUpdateOne) ClearClassAdmin() *AdminUpdateOne {
	auo.mutation.ClearClassAdmin()
	return auo
}

// RemoveClassAdminIDs removes the "class_admin" edge to KcClass entities by IDs.
func (auo *AdminUpdateOne) RemoveClassAdminIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveClassAdminIDs(ids...)
	return auo
}

// RemoveClassAdmin removes "class_admin" edges to KcClass entities.
func (auo *AdminUpdateOne) RemoveClassAdmin(k ...*KcClass) *AdminUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return auo.RemoveClassAdminIDs(ids...)
}

// ClearAdminAttachments clears the "admin_attachments" edge to the Attachment entity.
func (auo *AdminUpdateOne) ClearAdminAttachments() *AdminUpdateOne {
	auo.mutation.ClearAdminAttachments()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdminUpdateOne) Select(field string, fields ...string) *AdminUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Admin entity.
func (auo *AdminUpdateOne) Save(ctx context.Context) (*Admin, error) {
	var (
		err  error
		node *Admin
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdminUpdateOne) SaveX(ctx context.Context) *Admin {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdminUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdminUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdminUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := admin.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AdminUpdateOne) sqlSave(ctx context.Context) (_node *Admin, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   admin.Table,
			Columns: admin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admin.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Admin.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admin.FieldID)
		for _, f := range fields {
			if !admin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != admin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldUUID,
		})
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admin.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admin.FieldUpdatedAt,
		})
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admin.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admin.FieldDeletedAt,
		})
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: admin.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldPassword,
		})
	}
	if value, ok := auo.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldSalt,
		})
	}
	if value, ok := auo.mutation.BossAdminID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldBossAdminID,
		})
	}
	if value, ok := auo.mutation.AddedBossAdminID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldBossAdminID,
		})
	}
	if value, ok := auo.mutation.RealName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldRealName,
		})
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldEmail,
		})
	}
	if value, ok := auo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldPhone,
		})
	}
	if value, ok := auo.mutation.ThirdOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldThirdOpenid,
		})
	}
	if value, ok := auo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldPlatform,
		})
	}
	if value, ok := auo.mutation.AddedPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldPlatform,
		})
	}
	if value, ok := auo.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldIsActive,
		})
	}
	if value, ok := auo.mutation.AddedIsActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldIsActive,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldStatus,
		})
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldStatus,
		})
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldRemark,
		})
	}
	if auo.mutation.AdminLoginLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminLoginLogsTable,
			Columns: []string{admin.AdminLoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminloginlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminLoginLogsIDs(); len(nodes) > 0 && !auo.mutation.AdminLoginLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminLoginLogsTable,
			Columns: []string{admin.AdminLoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminLoginLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminLoginLogsTable,
			Columns: []string{admin.AdminLoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OperationAdminLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OperationAdminLogsTable,
			Columns: []string{admin.OperationAdminLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminoperationlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOperationAdminLogsIDs(); len(nodes) > 0 && !auo.mutation.OperationAdminLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OperationAdminLogsTable,
			Columns: []string{admin.OperationAdminLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminoperationlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OperationAdminLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OperationAdminLogsTable,
			Columns: []string{admin.OperationAdminLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminoperationlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !auo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ActivitiesTable,
			Columns: []string{admin.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !auo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ActivitiesTable,
			Columns: []string{admin.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ActivitiesTable,
			Columns: []string{admin.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MessageCreatedAdminIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.MessageCreatedAdminIDTable,
			Columns: []string{admin.MessageCreatedAdminIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMessageCreatedAdminIDIDs(); len(nodes) > 0 && !auo.mutation.MessageCreatedAdminIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.MessageCreatedAdminIDTable,
			Columns: []string{admin.MessageCreatedAdminIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MessageCreatedAdminIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.MessageCreatedAdminIDTable,
			Columns: []string{admin.MessageCreatedAdminIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionBanksTable,
			Columns: []string{admin.AdminQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminQuestionBanksIDs(); len(nodes) > 0 && !auo.mutation.AdminQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionBanksTable,
			Columns: []string{admin.AdminQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionBanksTable,
			Columns: []string{admin.AdminQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionsTable,
			Columns: []string{admin.AdminQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminQuestionsIDs(); len(nodes) > 0 && !auo.mutation.AdminQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionsTable,
			Columns: []string{admin.AdminQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionsTable,
			Columns: []string{admin.AdminQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminExamPapersTable,
			Columns: []string{admin.AdminExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminExamPapersIDs(); len(nodes) > 0 && !auo.mutation.AdminExamPapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminExamPapersTable,
			Columns: []string{admin.AdminExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminExamPapersTable,
			Columns: []string{admin.AdminExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminErrorFeedbacksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminErrorFeedbacksTable,
			Columns: []string{admin.AdminErrorFeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionerrorfeedback.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAdminErrorFeedbacksIDs(); len(nodes) > 0 && !auo.mutation.AdminErrorFeedbacksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminErrorFeedbacksTable,
			Columns: []string{admin.AdminErrorFeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionerrorfeedback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminErrorFeedbacksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminErrorFeedbacksTable,
			Columns: []string{admin.AdminErrorFeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionerrorfeedback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CourseTable,
			Columns: []string{admin.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCourseIDs(); len(nodes) > 0 && !auo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CourseTable,
			Columns: []string{admin.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CourseTable,
			Columns: []string{admin.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ClassAdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ClassAdminTable,
			Columns: []string{admin.ClassAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedClassAdminIDs(); len(nodes) > 0 && !auo.mutation.ClassAdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ClassAdminTable,
			Columns: []string{admin.ClassAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ClassAdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ClassAdminTable,
			Columns: []string{admin.ClassAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AdminAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   admin.AdminAttachmentsTable,
			Columns: []string{admin.AdminAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AdminAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   admin.AdminAttachmentsTable,
			Columns: []string{admin.AdminAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Admin{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

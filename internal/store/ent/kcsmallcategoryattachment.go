// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kcsmallcategoryattachment"

	"entgo.io/ent/dialect/sql"
)

// KcSmallCategoryAttachment is the model entity for the KcSmallCategoryAttachment schema.
type KcSmallCategoryAttachment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// AttachmentID holds the value of the "attachment_id" field.
	// 资料id
	AttachmentID int `json:"attachment_id"`
	// AttachmentName holds the value of the "attachment_name" field.
	// 资料名称
	AttachmentName string `json:"attachment_name"`
	// SmallCategoryID holds the value of the "small_category_id" field.
	// 课时id
	SmallCategoryID int `json:"small_category_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KcSmallCategoryAttachmentQuery when eager-loading is set.
	Edges KcSmallCategoryAttachmentEdges `json:"edges"`
}

// KcSmallCategoryAttachmentEdges holds the relations/edges for other nodes in the graph.
type KcSmallCategoryAttachmentEdges struct {
	// Attachment holds the value of the attachment edge.
	Attachment *Attachment `json:"attachment,omitempty"`
	// SmallCategory holds the value of the small_category edge.
	SmallCategory *KcCourseSmallCategory `json:"small_category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttachmentOrErr returns the Attachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcSmallCategoryAttachmentEdges) AttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[0] {
		if e.Attachment == nil {
			// The edge attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.Attachment, nil
	}
	return nil, &NotLoadedError{edge: "attachment"}
}

// SmallCategoryOrErr returns the SmallCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcSmallCategoryAttachmentEdges) SmallCategoryOrErr() (*KcCourseSmallCategory, error) {
	if e.loadedTypes[1] {
		if e.SmallCategory == nil {
			// The edge small_category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccoursesmallcategory.Label}
		}
		return e.SmallCategory, nil
	}
	return nil, &NotLoadedError{edge: "small_category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KcSmallCategoryAttachment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kcsmallcategoryattachment.FieldID, kcsmallcategoryattachment.FieldAttachmentID, kcsmallcategoryattachment.FieldSmallCategoryID:
			values[i] = new(sql.NullInt64)
		case kcsmallcategoryattachment.FieldUUID, kcsmallcategoryattachment.FieldAttachmentName:
			values[i] = new(sql.NullString)
		case kcsmallcategoryattachment.FieldCreatedAt, kcsmallcategoryattachment.FieldUpdatedAt, kcsmallcategoryattachment.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KcSmallCategoryAttachment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KcSmallCategoryAttachment fields.
func (ksca *KcSmallCategoryAttachment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kcsmallcategoryattachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ksca.ID = int(value.Int64)
		case kcsmallcategoryattachment.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				ksca.UUID = value.String
			}
		case kcsmallcategoryattachment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ksca.CreatedAt = new(time.Time)
				*ksca.CreatedAt = value.Time
			}
		case kcsmallcategoryattachment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ksca.UpdatedAt = new(time.Time)
				*ksca.UpdatedAt = value.Time
			}
		case kcsmallcategoryattachment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ksca.DeletedAt = new(time.Time)
				*ksca.DeletedAt = value.Time
			}
		case kcsmallcategoryattachment.FieldAttachmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_id", values[i])
			} else if value.Valid {
				ksca.AttachmentID = int(value.Int64)
			}
		case kcsmallcategoryattachment.FieldAttachmentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_name", values[i])
			} else if value.Valid {
				ksca.AttachmentName = value.String
			}
		case kcsmallcategoryattachment.FieldSmallCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field small_category_id", values[i])
			} else if value.Valid {
				ksca.SmallCategoryID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAttachment queries the "attachment" edge of the KcSmallCategoryAttachment entity.
func (ksca *KcSmallCategoryAttachment) QueryAttachment() *AttachmentQuery {
	return (&KcSmallCategoryAttachmentClient{config: ksca.config}).QueryAttachment(ksca)
}

// QuerySmallCategory queries the "small_category" edge of the KcSmallCategoryAttachment entity.
func (ksca *KcSmallCategoryAttachment) QuerySmallCategory() *KcCourseSmallCategoryQuery {
	return (&KcSmallCategoryAttachmentClient{config: ksca.config}).QuerySmallCategory(ksca)
}

// Update returns a builder for updating this KcSmallCategoryAttachment.
// Note that you need to call KcSmallCategoryAttachment.Unwrap() before calling this method if this KcSmallCategoryAttachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ksca *KcSmallCategoryAttachment) Update() *KcSmallCategoryAttachmentUpdateOne {
	return (&KcSmallCategoryAttachmentClient{config: ksca.config}).UpdateOne(ksca)
}

// Unwrap unwraps the KcSmallCategoryAttachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ksca *KcSmallCategoryAttachment) Unwrap() *KcSmallCategoryAttachment {
	tx, ok := ksca.config.driver.(*txDriver)
	if !ok {
		panic("ent: KcSmallCategoryAttachment is not a transactional entity")
	}
	ksca.config.driver = tx.drv
	return ksca
}

// String implements the fmt.Stringer.
func (ksca *KcSmallCategoryAttachment) String() string {
	var builder strings.Builder
	builder.WriteString("KcSmallCategoryAttachment(")
	builder.WriteString(fmt.Sprintf("id=%v", ksca.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(ksca.UUID)
	if v := ksca.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ksca.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ksca.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", attachment_id=")
	builder.WriteString(fmt.Sprintf("%v", ksca.AttachmentID))
	builder.WriteString(", attachment_name=")
	builder.WriteString(ksca.AttachmentName)
	builder.WriteString(", small_category_id=")
	builder.WriteString(fmt.Sprintf("%v", ksca.SmallCategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// KcSmallCategoryAttachments is a parsable slice of KcSmallCategoryAttachment.
type KcSmallCategoryAttachments []*KcSmallCategoryAttachment

func (ksca KcSmallCategoryAttachments) config(cfg config) {
	for _i := range ksca {
		ksca[_i].config = cfg
	}
}

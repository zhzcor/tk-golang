// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/itemcategory"
	"tkserver/internal/store/ent/kcclass"

	"entgo.io/ent/dialect/sql"
)

// ItemCategory is the model entity for the ItemCategory schema.
type ItemCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name"`
	// Status holds the value of the "status" field.
	// 状态：1、锁定。2:生效
	Status uint8 `json:"status"`
	// Code holds the value of the "code" field.
	// 编码
	Code string `json:"code"`
	// Desc holds the value of the "desc" field.
	// 描述
	Desc string `json:"desc"`
	// Pid holds the value of the "pid" field.
	// 父级id
	Pid int `json:"pid"`
	// SortOrder holds the value of the "sort_order" field.
	// 排序
	SortOrder int `json:"sort_order"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemCategoryQuery when eager-loading is set.
	Edges ItemCategoryEdges `json:"edges"`
}

// ItemCategoryEdges holds the relations/edges for other nodes in the graph.
type ItemCategoryEdges struct {
	// ItemQuestionBanks holds the value of the item_question_banks edge.
	ItemQuestionBanks []*TkQuestionBank `json:"item_question_banks,omitempty"`
	// KcClass holds the value of the kc_class edge.
	KcClass *KcClass `json:"kc_class,omitempty"`
	// Course holds the value of the course edge.
	Course []*KcCourse `json:"course,omitempty"`
	// UserItemCate holds the value of the user_item_cate edge.
	UserItemCate []*User `json:"user_item_cate,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *ItemCategory `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*ItemCategory `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ItemQuestionBanksOrErr returns the ItemQuestionBanks value or an error if the edge
// was not loaded in eager-loading.
func (e ItemCategoryEdges) ItemQuestionBanksOrErr() ([]*TkQuestionBank, error) {
	if e.loadedTypes[0] {
		return e.ItemQuestionBanks, nil
	}
	return nil, &NotLoadedError{edge: "item_question_banks"}
}

// KcClassOrErr returns the KcClass value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemCategoryEdges) KcClassOrErr() (*KcClass, error) {
	if e.loadedTypes[1] {
		if e.KcClass == nil {
			// The edge kc_class was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kcclass.Label}
		}
		return e.KcClass, nil
	}
	return nil, &NotLoadedError{edge: "kc_class"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading.
func (e ItemCategoryEdges) CourseOrErr() ([]*KcCourse, error) {
	if e.loadedTypes[2] {
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// UserItemCateOrErr returns the UserItemCate value or an error if the edge
// was not loaded in eager-loading.
func (e ItemCategoryEdges) UserItemCateOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.UserItemCate, nil
	}
	return nil, &NotLoadedError{edge: "user_item_cate"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemCategoryEdges) ParentOrErr() (*ItemCategory, error) {
	if e.loadedTypes[4] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: itemcategory.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e ItemCategoryEdges) ChildrenOrErr() ([]*ItemCategory, error) {
	if e.loadedTypes[5] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ItemCategory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case itemcategory.FieldID, itemcategory.FieldStatus, itemcategory.FieldPid, itemcategory.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case itemcategory.FieldUUID, itemcategory.FieldName, itemcategory.FieldCode, itemcategory.FieldDesc:
			values[i] = new(sql.NullString)
		case itemcategory.FieldCreatedAt, itemcategory.FieldUpdatedAt, itemcategory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ItemCategory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ItemCategory fields.
func (ic *ItemCategory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case itemcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ic.ID = int(value.Int64)
		case itemcategory.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				ic.UUID = value.String
			}
		case itemcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ic.CreatedAt = new(time.Time)
				*ic.CreatedAt = value.Time
			}
		case itemcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ic.UpdatedAt = new(time.Time)
				*ic.UpdatedAt = value.Time
			}
		case itemcategory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ic.DeletedAt = new(time.Time)
				*ic.DeletedAt = value.Time
			}
		case itemcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ic.Name = value.String
			}
		case itemcategory.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ic.Status = uint8(value.Int64)
			}
		case itemcategory.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ic.Code = value.String
			}
		case itemcategory.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				ic.Desc = value.String
			}
		case itemcategory.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				ic.Pid = int(value.Int64)
			}
		case itemcategory.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				ic.SortOrder = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryItemQuestionBanks queries the "item_question_banks" edge of the ItemCategory entity.
func (ic *ItemCategory) QueryItemQuestionBanks() *TkQuestionBankQuery {
	return (&ItemCategoryClient{config: ic.config}).QueryItemQuestionBanks(ic)
}

// QueryKcClass queries the "kc_class" edge of the ItemCategory entity.
func (ic *ItemCategory) QueryKcClass() *KcClassQuery {
	return (&ItemCategoryClient{config: ic.config}).QueryKcClass(ic)
}

// QueryCourse queries the "course" edge of the ItemCategory entity.
func (ic *ItemCategory) QueryCourse() *KcCourseQuery {
	return (&ItemCategoryClient{config: ic.config}).QueryCourse(ic)
}

// QueryUserItemCate queries the "user_item_cate" edge of the ItemCategory entity.
func (ic *ItemCategory) QueryUserItemCate() *UserQuery {
	return (&ItemCategoryClient{config: ic.config}).QueryUserItemCate(ic)
}

// QueryParent queries the "parent" edge of the ItemCategory entity.
func (ic *ItemCategory) QueryParent() *ItemCategoryQuery {
	return (&ItemCategoryClient{config: ic.config}).QueryParent(ic)
}

// QueryChildren queries the "children" edge of the ItemCategory entity.
func (ic *ItemCategory) QueryChildren() *ItemCategoryQuery {
	return (&ItemCategoryClient{config: ic.config}).QueryChildren(ic)
}

// Update returns a builder for updating this ItemCategory.
// Note that you need to call ItemCategory.Unwrap() before calling this method if this ItemCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ic *ItemCategory) Update() *ItemCategoryUpdateOne {
	return (&ItemCategoryClient{config: ic.config}).UpdateOne(ic)
}

// Unwrap unwraps the ItemCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ic *ItemCategory) Unwrap() *ItemCategory {
	tx, ok := ic.config.driver.(*txDriver)
	if !ok {
		panic("ent: ItemCategory is not a transactional entity")
	}
	ic.config.driver = tx.drv
	return ic
}

// String implements the fmt.Stringer.
func (ic *ItemCategory) String() string {
	var builder strings.Builder
	builder.WriteString("ItemCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", ic.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(ic.UUID)
	if v := ic.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ic.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ic.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(ic.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ic.Status))
	builder.WriteString(", code=")
	builder.WriteString(ic.Code)
	builder.WriteString(", desc=")
	builder.WriteString(ic.Desc)
	builder.WriteString(", pid=")
	builder.WriteString(fmt.Sprintf("%v", ic.Pid))
	builder.WriteString(", sort_order=")
	builder.WriteString(fmt.Sprintf("%v", ic.SortOrder))
	builder.WriteByte(')')
	return builder.String()
}

// ItemCategories is a parsable slice of ItemCategory.
type ItemCategories []*ItemCategory

func (ic ItemCategories) config(cfg config) {
	for _i := range ic {
		ic[_i].config = cfg
	}
}

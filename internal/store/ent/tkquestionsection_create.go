// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionsection"
	"tkserver/internal/store/ent/tksection"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionSectionCreate is the builder for creating a TkQuestionSection entity.
type TkQuestionSectionCreate struct {
	config
	mutation *TkQuestionSectionMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tqsc *TkQuestionSectionCreate) SetUUID(s string) *TkQuestionSectionCreate {
	tqsc.mutation.SetUUID(s)
	return tqsc
}

// SetCreatedAt sets the "created_at" field.
func (tqsc *TkQuestionSectionCreate) SetCreatedAt(t time.Time) *TkQuestionSectionCreate {
	tqsc.mutation.SetCreatedAt(t)
	return tqsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqsc *TkQuestionSectionCreate) SetNillableCreatedAt(t *time.Time) *TkQuestionSectionCreate {
	if t != nil {
		tqsc.SetCreatedAt(*t)
	}
	return tqsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tqsc *TkQuestionSectionCreate) SetUpdatedAt(t time.Time) *TkQuestionSectionCreate {
	tqsc.mutation.SetUpdatedAt(t)
	return tqsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tqsc *TkQuestionSectionCreate) SetNillableUpdatedAt(t *time.Time) *TkQuestionSectionCreate {
	if t != nil {
		tqsc.SetUpdatedAt(*t)
	}
	return tqsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tqsc *TkQuestionSectionCreate) SetDeletedAt(t time.Time) *TkQuestionSectionCreate {
	tqsc.mutation.SetDeletedAt(t)
	return tqsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqsc *TkQuestionSectionCreate) SetNillableDeletedAt(t *time.Time) *TkQuestionSectionCreate {
	if t != nil {
		tqsc.SetDeletedAt(*t)
	}
	return tqsc
}

// SetSectionID sets the "section_id" field.
func (tqsc *TkQuestionSectionCreate) SetSectionID(i int) *TkQuestionSectionCreate {
	tqsc.mutation.SetSectionID(i)
	return tqsc
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (tqsc *TkQuestionSectionCreate) SetNillableSectionID(i *int) *TkQuestionSectionCreate {
	if i != nil {
		tqsc.SetSectionID(*i)
	}
	return tqsc
}

// SetQuestionID sets the "question_id" field.
func (tqsc *TkQuestionSectionCreate) SetQuestionID(i int) *TkQuestionSectionCreate {
	tqsc.mutation.SetQuestionID(i)
	return tqsc
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqsc *TkQuestionSectionCreate) SetNillableQuestionID(i *int) *TkQuestionSectionCreate {
	if i != nil {
		tqsc.SetQuestionID(*i)
	}
	return tqsc
}

// SetQuestionSectionID sets the "question_section" edge to the TkSection entity by ID.
func (tqsc *TkQuestionSectionCreate) SetQuestionSectionID(id int) *TkQuestionSectionCreate {
	tqsc.mutation.SetQuestionSectionID(id)
	return tqsc
}

// SetNillableQuestionSectionID sets the "question_section" edge to the TkSection entity by ID if the given value is not nil.
func (tqsc *TkQuestionSectionCreate) SetNillableQuestionSectionID(id *int) *TkQuestionSectionCreate {
	if id != nil {
		tqsc = tqsc.SetQuestionSectionID(*id)
	}
	return tqsc
}

// SetQuestionSection sets the "question_section" edge to the TkSection entity.
func (tqsc *TkQuestionSectionCreate) SetQuestionSection(t *TkSection) *TkQuestionSectionCreate {
	return tqsc.SetQuestionSectionID(t.ID)
}

// SetSectionQuestionID sets the "section_question" edge to the TkQuestion entity by ID.
func (tqsc *TkQuestionSectionCreate) SetSectionQuestionID(id int) *TkQuestionSectionCreate {
	tqsc.mutation.SetSectionQuestionID(id)
	return tqsc
}

// SetNillableSectionQuestionID sets the "section_question" edge to the TkQuestion entity by ID if the given value is not nil.
func (tqsc *TkQuestionSectionCreate) SetNillableSectionQuestionID(id *int) *TkQuestionSectionCreate {
	if id != nil {
		tqsc = tqsc.SetSectionQuestionID(*id)
	}
	return tqsc
}

// SetSectionQuestion sets the "section_question" edge to the TkQuestion entity.
func (tqsc *TkQuestionSectionCreate) SetSectionQuestion(t *TkQuestion) *TkQuestionSectionCreate {
	return tqsc.SetSectionQuestionID(t.ID)
}

// Mutation returns the TkQuestionSectionMutation object of the builder.
func (tqsc *TkQuestionSectionCreate) Mutation() *TkQuestionSectionMutation {
	return tqsc.mutation
}

// Save creates the TkQuestionSection in the database.
func (tqsc *TkQuestionSectionCreate) Save(ctx context.Context) (*TkQuestionSection, error) {
	var (
		err  error
		node *TkQuestionSection
	)
	tqsc.defaults()
	if len(tqsc.hooks) == 0 {
		if err = tqsc.check(); err != nil {
			return nil, err
		}
		node, err = tqsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tqsc.check(); err != nil {
				return nil, err
			}
			tqsc.mutation = mutation
			node, err = tqsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tqsc.hooks) - 1; i >= 0; i-- {
			mut = tqsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tqsc *TkQuestionSectionCreate) SaveX(ctx context.Context) *TkQuestionSection {
	v, err := tqsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tqsc *TkQuestionSectionCreate) defaults() {
	if _, ok := tqsc.mutation.CreatedAt(); !ok {
		v := tkquestionsection.DefaultCreatedAt()
		tqsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tqsc.mutation.UpdatedAt(); !ok {
		v := tkquestionsection.DefaultUpdatedAt()
		tqsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tqsc *TkQuestionSectionCreate) check() error {
	if _, ok := tqsc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	return nil
}

func (tqsc *TkQuestionSectionCreate) sqlSave(ctx context.Context) (*TkQuestionSection, error) {
	_node, _spec := tqsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tqsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tqsc *TkQuestionSectionCreate) createSpec() (*TkQuestionSection, *sqlgraph.CreateSpec) {
	var (
		_node = &TkQuestionSection{config: tqsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkquestionsection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionsection.FieldID,
			},
		}
	)
	if value, ok := tqsc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionsection.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tqsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionsection.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tqsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionsection.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tqsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionsection.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := tqsc.mutation.QuestionSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.QuestionSectionTable,
			Columns: []string{tkquestionsection.QuestionSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tqsc.mutation.SectionQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.SectionQuestionTable,
			Columns: []string{tkquestionsection.SectionQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkQuestionSectionCreateBulk is the builder for creating many TkQuestionSection entities in bulk.
type TkQuestionSectionCreateBulk struct {
	config
	builders []*TkQuestionSectionCreate
}

// Save creates the TkQuestionSection entities in the database.
func (tqscb *TkQuestionSectionCreateBulk) Save(ctx context.Context) ([]*TkQuestionSection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tqscb.builders))
	nodes := make([]*TkQuestionSection, len(tqscb.builders))
	mutators := make([]Mutator, len(tqscb.builders))
	for i := range tqscb.builders {
		func(i int, root context.Context) {
			builder := tqscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkQuestionSectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tqscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tqscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tqscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tqscb *TkQuestionSectionCreateBulk) SaveX(ctx context.Context) []*TkQuestionSection {
	v, err := tqscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/user"
	"tkserver/internal/store/ent/usercourseappraise"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCourseAppraiseCreate is the builder for creating a UserCourseAppraise entity.
type UserCourseAppraiseCreate struct {
	config
	mutation *UserCourseAppraiseMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (ucac *UserCourseAppraiseCreate) SetUUID(s string) *UserCourseAppraiseCreate {
	ucac.mutation.SetUUID(s)
	return ucac
}

// SetCreatedAt sets the "created_at" field.
func (ucac *UserCourseAppraiseCreate) SetCreatedAt(t time.Time) *UserCourseAppraiseCreate {
	ucac.mutation.SetCreatedAt(t)
	return ucac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableCreatedAt(t *time.Time) *UserCourseAppraiseCreate {
	if t != nil {
		ucac.SetCreatedAt(*t)
	}
	return ucac
}

// SetUpdatedAt sets the "updated_at" field.
func (ucac *UserCourseAppraiseCreate) SetUpdatedAt(t time.Time) *UserCourseAppraiseCreate {
	ucac.mutation.SetUpdatedAt(t)
	return ucac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableUpdatedAt(t *time.Time) *UserCourseAppraiseCreate {
	if t != nil {
		ucac.SetUpdatedAt(*t)
	}
	return ucac
}

// SetDeletedAt sets the "deleted_at" field.
func (ucac *UserCourseAppraiseCreate) SetDeletedAt(t time.Time) *UserCourseAppraiseCreate {
	ucac.mutation.SetDeletedAt(t)
	return ucac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableDeletedAt(t *time.Time) *UserCourseAppraiseCreate {
	if t != nil {
		ucac.SetDeletedAt(*t)
	}
	return ucac
}

// SetTeachAttitudeScore sets the "teach_attitude_score" field.
func (ucac *UserCourseAppraiseCreate) SetTeachAttitudeScore(f float64) *UserCourseAppraiseCreate {
	ucac.mutation.SetTeachAttitudeScore(f)
	return ucac
}

// SetNillableTeachAttitudeScore sets the "teach_attitude_score" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableTeachAttitudeScore(f *float64) *UserCourseAppraiseCreate {
	if f != nil {
		ucac.SetTeachAttitudeScore(*f)
	}
	return ucac
}

// SetTeachContentScore sets the "teach_content_score" field.
func (ucac *UserCourseAppraiseCreate) SetTeachContentScore(f float64) *UserCourseAppraiseCreate {
	ucac.mutation.SetTeachContentScore(f)
	return ucac
}

// SetNillableTeachContentScore sets the "teach_content_score" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableTeachContentScore(f *float64) *UserCourseAppraiseCreate {
	if f != nil {
		ucac.SetTeachContentScore(*f)
	}
	return ucac
}

// SetTeachAtmosphereScore sets the "teach_atmosphere_score" field.
func (ucac *UserCourseAppraiseCreate) SetTeachAtmosphereScore(f float64) *UserCourseAppraiseCreate {
	ucac.mutation.SetTeachAtmosphereScore(f)
	return ucac
}

// SetNillableTeachAtmosphereScore sets the "teach_atmosphere_score" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableTeachAtmosphereScore(f *float64) *UserCourseAppraiseCreate {
	if f != nil {
		ucac.SetTeachAtmosphereScore(*f)
	}
	return ucac
}

// SetCompositeScore sets the "composite_score" field.
func (ucac *UserCourseAppraiseCreate) SetCompositeScore(f float64) *UserCourseAppraiseCreate {
	ucac.mutation.SetCompositeScore(f)
	return ucac
}

// SetNillableCompositeScore sets the "composite_score" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableCompositeScore(f *float64) *UserCourseAppraiseCreate {
	if f != nil {
		ucac.SetCompositeScore(*f)
	}
	return ucac
}

// SetUserID sets the "user_id" field.
func (ucac *UserCourseAppraiseCreate) SetUserID(i int) *UserCourseAppraiseCreate {
	ucac.mutation.SetUserID(i)
	return ucac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableUserID(i *int) *UserCourseAppraiseCreate {
	if i != nil {
		ucac.SetUserID(*i)
	}
	return ucac
}

// SetSmallCateID sets the "small_cate_id" field.
func (ucac *UserCourseAppraiseCreate) SetSmallCateID(i int) *UserCourseAppraiseCreate {
	ucac.mutation.SetSmallCateID(i)
	return ucac
}

// SetNillableSmallCateID sets the "small_cate_id" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableSmallCateID(i *int) *UserCourseAppraiseCreate {
	if i != nil {
		ucac.SetSmallCateID(*i)
	}
	return ucac
}

// SetCourseID sets the "course_id" field.
func (ucac *UserCourseAppraiseCreate) SetCourseID(i int) *UserCourseAppraiseCreate {
	ucac.mutation.SetCourseID(i)
	return ucac
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableCourseID(i *int) *UserCourseAppraiseCreate {
	if i != nil {
		ucac.SetCourseID(*i)
	}
	return ucac
}

// SetType sets the "type" field.
func (ucac *UserCourseAppraiseCreate) SetType(u uint8) *UserCourseAppraiseCreate {
	ucac.mutation.SetType(u)
	return ucac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableType(u *uint8) *UserCourseAppraiseCreate {
	if u != nil {
		ucac.SetType(*u)
	}
	return ucac
}

// SetShowStatus sets the "show_status" field.
func (ucac *UserCourseAppraiseCreate) SetShowStatus(u uint8) *UserCourseAppraiseCreate {
	ucac.mutation.SetShowStatus(u)
	return ucac
}

// SetNillableShowStatus sets the "show_status" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableShowStatus(u *uint8) *UserCourseAppraiseCreate {
	if u != nil {
		ucac.SetShowStatus(*u)
	}
	return ucac
}

// SetTeacherImpression sets the "teacher_impression" field.
func (ucac *UserCourseAppraiseCreate) SetTeacherImpression(s string) *UserCourseAppraiseCreate {
	ucac.mutation.SetTeacherImpression(s)
	return ucac
}

// SetNillableTeacherImpression sets the "teacher_impression" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableTeacherImpression(s *string) *UserCourseAppraiseCreate {
	if s != nil {
		ucac.SetTeacherImpression(*s)
	}
	return ucac
}

// SetDesc sets the "desc" field.
func (ucac *UserCourseAppraiseCreate) SetDesc(s string) *UserCourseAppraiseCreate {
	ucac.mutation.SetDesc(s)
	return ucac
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableDesc(s *string) *UserCourseAppraiseCreate {
	if s != nil {
		ucac.SetDesc(*s)
	}
	return ucac
}

// SetTeacherReply sets the "teacher_reply" field.
func (ucac *UserCourseAppraiseCreate) SetTeacherReply(s string) *UserCourseAppraiseCreate {
	ucac.mutation.SetTeacherReply(s)
	return ucac
}

// SetNillableTeacherReply sets the "teacher_reply" field if the given value is not nil.
func (ucac *UserCourseAppraiseCreate) SetNillableTeacherReply(s *string) *UserCourseAppraiseCreate {
	if s != nil {
		ucac.SetTeacherReply(*s)
	}
	return ucac
}

// SetSmallCate sets the "small_cate" edge to the KcCourseSmallCategory entity.
func (ucac *UserCourseAppraiseCreate) SetSmallCate(k *KcCourseSmallCategory) *UserCourseAppraiseCreate {
	return ucac.SetSmallCateID(k.ID)
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (ucac *UserCourseAppraiseCreate) SetCourse(k *KcCourse) *UserCourseAppraiseCreate {
	return ucac.SetCourseID(k.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ucac *UserCourseAppraiseCreate) SetUser(u *User) *UserCourseAppraiseCreate {
	return ucac.SetUserID(u.ID)
}

// Mutation returns the UserCourseAppraiseMutation object of the builder.
func (ucac *UserCourseAppraiseCreate) Mutation() *UserCourseAppraiseMutation {
	return ucac.mutation
}

// Save creates the UserCourseAppraise in the database.
func (ucac *UserCourseAppraiseCreate) Save(ctx context.Context) (*UserCourseAppraise, error) {
	var (
		err  error
		node *UserCourseAppraise
	)
	ucac.defaults()
	if len(ucac.hooks) == 0 {
		if err = ucac.check(); err != nil {
			return nil, err
		}
		node, err = ucac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCourseAppraiseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucac.check(); err != nil {
				return nil, err
			}
			ucac.mutation = mutation
			node, err = ucac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ucac.hooks) - 1; i >= 0; i-- {
			mut = ucac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ucac *UserCourseAppraiseCreate) SaveX(ctx context.Context) *UserCourseAppraise {
	v, err := ucac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ucac *UserCourseAppraiseCreate) defaults() {
	if _, ok := ucac.mutation.CreatedAt(); !ok {
		v := usercourseappraise.DefaultCreatedAt()
		ucac.mutation.SetCreatedAt(v)
	}
	if _, ok := ucac.mutation.UpdatedAt(); !ok {
		v := usercourseappraise.DefaultUpdatedAt()
		ucac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ucac.mutation.TeachAttitudeScore(); !ok {
		v := usercourseappraise.DefaultTeachAttitudeScore
		ucac.mutation.SetTeachAttitudeScore(v)
	}
	if _, ok := ucac.mutation.TeachContentScore(); !ok {
		v := usercourseappraise.DefaultTeachContentScore
		ucac.mutation.SetTeachContentScore(v)
	}
	if _, ok := ucac.mutation.TeachAtmosphereScore(); !ok {
		v := usercourseappraise.DefaultTeachAtmosphereScore
		ucac.mutation.SetTeachAtmosphereScore(v)
	}
	if _, ok := ucac.mutation.CompositeScore(); !ok {
		v := usercourseappraise.DefaultCompositeScore
		ucac.mutation.SetCompositeScore(v)
	}
	if _, ok := ucac.mutation.GetType(); !ok {
		v := usercourseappraise.DefaultType
		ucac.mutation.SetType(v)
	}
	if _, ok := ucac.mutation.ShowStatus(); !ok {
		v := usercourseappraise.DefaultShowStatus
		ucac.mutation.SetShowStatus(v)
	}
	if _, ok := ucac.mutation.TeacherImpression(); !ok {
		v := usercourseappraise.DefaultTeacherImpression
		ucac.mutation.SetTeacherImpression(v)
	}
	if _, ok := ucac.mutation.Desc(); !ok {
		v := usercourseappraise.DefaultDesc
		ucac.mutation.SetDesc(v)
	}
	if _, ok := ucac.mutation.TeacherReply(); !ok {
		v := usercourseappraise.DefaultTeacherReply
		ucac.mutation.SetTeacherReply(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucac *UserCourseAppraiseCreate) check() error {
	if _, ok := ucac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := ucac.mutation.TeachAttitudeScore(); !ok {
		return &ValidationError{Name: "teach_attitude_score", err: errors.New("ent: missing required field \"teach_attitude_score\"")}
	}
	if _, ok := ucac.mutation.TeachContentScore(); !ok {
		return &ValidationError{Name: "teach_content_score", err: errors.New("ent: missing required field \"teach_content_score\"")}
	}
	if _, ok := ucac.mutation.TeachAtmosphereScore(); !ok {
		return &ValidationError{Name: "teach_atmosphere_score", err: errors.New("ent: missing required field \"teach_atmosphere_score\"")}
	}
	if _, ok := ucac.mutation.CompositeScore(); !ok {
		return &ValidationError{Name: "composite_score", err: errors.New("ent: missing required field \"composite_score\"")}
	}
	if _, ok := ucac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := ucac.mutation.ShowStatus(); !ok {
		return &ValidationError{Name: "show_status", err: errors.New("ent: missing required field \"show_status\"")}
	}
	if _, ok := ucac.mutation.TeacherImpression(); !ok {
		return &ValidationError{Name: "teacher_impression", err: errors.New("ent: missing required field \"teacher_impression\"")}
	}
	if _, ok := ucac.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New("ent: missing required field \"desc\"")}
	}
	if _, ok := ucac.mutation.TeacherReply(); !ok {
		return &ValidationError{Name: "teacher_reply", err: errors.New("ent: missing required field \"teacher_reply\"")}
	}
	return nil
}

func (ucac *UserCourseAppraiseCreate) sqlSave(ctx context.Context) (*UserCourseAppraise, error) {
	_node, _spec := ucac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ucac *UserCourseAppraiseCreate) createSpec() (*UserCourseAppraise, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCourseAppraise{config: ucac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usercourseappraise.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercourseappraise.FieldID,
			},
		}
	)
	if value, ok := ucac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ucac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercourseappraise.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := ucac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercourseappraise.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := ucac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercourseappraise.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ucac.mutation.TeachAttitudeScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAttitudeScore,
		})
		_node.TeachAttitudeScore = value
	}
	if value, ok := ucac.mutation.TeachContentScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachContentScore,
		})
		_node.TeachContentScore = value
	}
	if value, ok := ucac.mutation.TeachAtmosphereScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAtmosphereScore,
		})
		_node.TeachAtmosphereScore = value
	}
	if value, ok := ucac.mutation.CompositeScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldCompositeScore,
		})
		_node.CompositeScore = value
	}
	if value, ok := ucac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ucac.mutation.ShowStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldShowStatus,
		})
		_node.ShowStatus = value
	}
	if value, ok := ucac.mutation.TeacherImpression(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldTeacherImpression,
		})
		_node.TeacherImpression = value
	}
	if value, ok := ucac.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := ucac.mutation.TeacherReply(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldTeacherReply,
		})
		_node.TeacherReply = value
	}
	if nodes := ucac.mutation.SmallCateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.SmallCateTable,
			Columns: []string{usercourseappraise.SmallCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SmallCateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ucac.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.CourseTable,
			Columns: []string{usercourseappraise.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ucac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.UserTable,
			Columns: []string{usercourseappraise.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCourseAppraiseCreateBulk is the builder for creating many UserCourseAppraise entities in bulk.
type UserCourseAppraiseCreateBulk struct {
	config
	builders []*UserCourseAppraiseCreate
}

// Save creates the UserCourseAppraise entities in the database.
func (ucacb *UserCourseAppraiseCreateBulk) Save(ctx context.Context) ([]*UserCourseAppraise, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucacb.builders))
	nodes := make([]*UserCourseAppraise, len(ucacb.builders))
	mutators := make([]Mutator, len(ucacb.builders))
	for i := range ucacb.builders {
		func(i int, root context.Context) {
			builder := ucacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCourseAppraiseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucacb *UserCourseAppraiseCreateBulk) SaveX(ctx context.Context) []*UserCourseAppraise {
	v, err := ucacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"gserver/internal/store/ent/makeuserquestionrecord"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkchapter"
	"gserver/internal/store/ent/tkquestionsection"
	"gserver/internal/store/ent/tksection"
	"gserver/internal/store/ent/tkuserexamscorerecord"
	"gserver/internal/store/ent/tkuserquestionrecord"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkSectionQuery is the builder for querying TkSection entities.
type TkSectionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TkSection
	// eager-loading edges.
	withChapter             *TkChapterQuery
	withTkSectionLinks      *TkQuestionSectionQuery
	withSectionRecords      *TkUserQuestionRecordQuery
	withUserSectionExam     *TkUserExamScoreRecordQuery
	withMakeUserQuestionSec *MakeUserQuestionRecordQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TkSectionQuery builder.
func (tsq *TkSectionQuery) Where(ps ...predicate.TkSection) *TkSectionQuery {
	tsq.predicates = append(tsq.predicates, ps...)
	return tsq
}

// Limit adds a limit step to the query.
func (tsq *TkSectionQuery) Limit(limit int) *TkSectionQuery {
	tsq.limit = &limit
	return tsq
}

// Offset adds an offset step to the query.
func (tsq *TkSectionQuery) Offset(offset int) *TkSectionQuery {
	tsq.offset = &offset
	return tsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tsq *TkSectionQuery) Unique(unique bool) *TkSectionQuery {
	tsq.unique = &unique
	return tsq
}

// Order adds an order step to the query.
func (tsq *TkSectionQuery) Order(o ...OrderFunc) *TkSectionQuery {
	tsq.order = append(tsq.order, o...)
	return tsq
}

// QueryChapter chains the current query on the "chapter" edge.
func (tsq *TkSectionQuery) QueryChapter() *TkChapterQuery {
	query := &TkChapterQuery{config: tsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, selector),
			sqlgraph.To(tkchapter.Table, tkchapter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tksection.ChapterTable, tksection.ChapterColumn),
		)
		fromU = sqlgraph.SetNeighbors(tsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTkSectionLinks chains the current query on the "tk_section_links" edge.
func (tsq *TkSectionQuery) QueryTkSectionLinks() *TkQuestionSectionQuery {
	query := &TkQuestionSectionQuery{config: tsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, selector),
			sqlgraph.To(tkquestionsection.Table, tkquestionsection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tksection.TkSectionLinksTable, tksection.TkSectionLinksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySectionRecords chains the current query on the "section_records" edge.
func (tsq *TkSectionQuery) QuerySectionRecords() *TkUserQuestionRecordQuery {
	query := &TkUserQuestionRecordQuery{config: tsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, selector),
			sqlgraph.To(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tksection.SectionRecordsTable, tksection.SectionRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserSectionExam chains the current query on the "user_section_exam" edge.
func (tsq *TkSectionQuery) QueryUserSectionExam() *TkUserExamScoreRecordQuery {
	query := &TkUserExamScoreRecordQuery{config: tsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, selector),
			sqlgraph.To(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tksection.UserSectionExamTable, tksection.UserSectionExamColumn),
		)
		fromU = sqlgraph.SetNeighbors(tsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMakeUserQuestionSec chains the current query on the "make_user_question_sec" edge.
func (tsq *TkSectionQuery) QueryMakeUserQuestionSec() *MakeUserQuestionRecordQuery {
	query := &MakeUserQuestionRecordQuery{config: tsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tksection.Table, tksection.FieldID, selector),
			sqlgraph.To(makeuserquestionrecord.Table, makeuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tksection.MakeUserQuestionSecTable, tksection.MakeUserQuestionSecColumn),
		)
		fromU = sqlgraph.SetNeighbors(tsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TkSection entity from the query.
// Returns a *NotFoundError when no TkSection was found.
func (tsq *TkSectionQuery) First(ctx context.Context) (*TkSection, error) {
	nodes, err := tsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tksection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tsq *TkSectionQuery) FirstX(ctx context.Context) *TkSection {
	node, err := tsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TkSection ID from the query.
// Returns a *NotFoundError when no TkSection ID was found.
func (tsq *TkSectionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tksection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tsq *TkSectionQuery) FirstIDX(ctx context.Context) int {
	id, err := tsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TkSection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TkSection entity is not found.
// Returns a *NotFoundError when no TkSection entities are found.
func (tsq *TkSectionQuery) Only(ctx context.Context) (*TkSection, error) {
	nodes, err := tsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tksection.Label}
	default:
		return nil, &NotSingularError{tksection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tsq *TkSectionQuery) OnlyX(ctx context.Context) *TkSection {
	node, err := tsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TkSection ID in the query.
// Returns a *NotSingularError when exactly one TkSection ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tsq *TkSectionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tksection.Label}
	default:
		err = &NotSingularError{tksection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tsq *TkSectionQuery) OnlyIDX(ctx context.Context) int {
	id, err := tsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TkSections.
func (tsq *TkSectionQuery) All(ctx context.Context) ([]*TkSection, error) {
	if err := tsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tsq *TkSectionQuery) AllX(ctx context.Context) []*TkSection {
	nodes, err := tsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TkSection IDs.
func (tsq *TkSectionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tsq.Select(tksection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tsq *TkSectionQuery) IDsX(ctx context.Context) []int {
	ids, err := tsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tsq *TkSectionQuery) Count(ctx context.Context) (int, error) {
	if err := tsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tsq *TkSectionQuery) CountX(ctx context.Context) int {
	count, err := tsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tsq *TkSectionQuery) Exist(ctx context.Context) (bool, error) {
	if err := tsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tsq *TkSectionQuery) ExistX(ctx context.Context) bool {
	exist, err := tsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TkSectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tsq *TkSectionQuery) Clone() *TkSectionQuery {
	if tsq == nil {
		return nil
	}
	return &TkSectionQuery{
		config:                  tsq.config,
		limit:                   tsq.limit,
		offset:                  tsq.offset,
		order:                   append([]OrderFunc{}, tsq.order...),
		predicates:              append([]predicate.TkSection{}, tsq.predicates...),
		withChapter:             tsq.withChapter.Clone(),
		withTkSectionLinks:      tsq.withTkSectionLinks.Clone(),
		withSectionRecords:      tsq.withSectionRecords.Clone(),
		withUserSectionExam:     tsq.withUserSectionExam.Clone(),
		withMakeUserQuestionSec: tsq.withMakeUserQuestionSec.Clone(),
		// clone intermediate query.
		sql:  tsq.sql.Clone(),
		path: tsq.path,
	}
}

// WithChapter tells the query-builder to eager-load the nodes that are connected to
// the "chapter" edge. The optional arguments are used to configure the query builder of the edge.
func (tsq *TkSectionQuery) WithChapter(opts ...func(*TkChapterQuery)) *TkSectionQuery {
	query := &TkChapterQuery{config: tsq.config}
	for _, opt := range opts {
		opt(query)
	}
	tsq.withChapter = query
	return tsq
}

// WithTkSectionLinks tells the query-builder to eager-load the nodes that are connected to
// the "tk_section_links" edge. The optional arguments are used to configure the query builder of the edge.
func (tsq *TkSectionQuery) WithTkSectionLinks(opts ...func(*TkQuestionSectionQuery)) *TkSectionQuery {
	query := &TkQuestionSectionQuery{config: tsq.config}
	for _, opt := range opts {
		opt(query)
	}
	tsq.withTkSectionLinks = query
	return tsq
}

// WithSectionRecords tells the query-builder to eager-load the nodes that are connected to
// the "section_records" edge. The optional arguments are used to configure the query builder of the edge.
func (tsq *TkSectionQuery) WithSectionRecords(opts ...func(*TkUserQuestionRecordQuery)) *TkSectionQuery {
	query := &TkUserQuestionRecordQuery{config: tsq.config}
	for _, opt := range opts {
		opt(query)
	}
	tsq.withSectionRecords = query
	return tsq
}

// WithUserSectionExam tells the query-builder to eager-load the nodes that are connected to
// the "user_section_exam" edge. The optional arguments are used to configure the query builder of the edge.
func (tsq *TkSectionQuery) WithUserSectionExam(opts ...func(*TkUserExamScoreRecordQuery)) *TkSectionQuery {
	query := &TkUserExamScoreRecordQuery{config: tsq.config}
	for _, opt := range opts {
		opt(query)
	}
	tsq.withUserSectionExam = query
	return tsq
}

// WithMakeUserQuestionSec tells the query-builder to eager-load the nodes that are connected to
// the "make_user_question_sec" edge. The optional arguments are used to configure the query builder of the edge.
func (tsq *TkSectionQuery) WithMakeUserQuestionSec(opts ...func(*MakeUserQuestionRecordQuery)) *TkSectionQuery {
	query := &MakeUserQuestionRecordQuery{config: tsq.config}
	for _, opt := range opts {
		opt(query)
	}
	tsq.withMakeUserQuestionSec = query
	return tsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TkSection.Query().
//		GroupBy(tksection.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tsq *TkSectionQuery) GroupBy(field string, fields ...string) *TkSectionGroupBy {
	group := &TkSectionGroupBy{config: tsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.TkSection.Query().
//		Select(tksection.FieldUUID).
//		Scan(ctx, &v)
//
func (tsq *TkSectionQuery) Select(field string, fields ...string) *TkSectionSelect {
	tsq.fields = append([]string{field}, fields...)
	return &TkSectionSelect{TkSectionQuery: tsq}
}

func (tsq *TkSectionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tsq.fields {
		if !tksection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tsq.path != nil {
		prev, err := tsq.path(ctx)
		if err != nil {
			return err
		}
		tsq.sql = prev
	}
	return nil
}

func (tsq *TkSectionQuery) sqlAll(ctx context.Context) ([]*TkSection, error) {
	var (
		nodes       = []*TkSection{}
		_spec       = tsq.querySpec()
		loadedTypes = [5]bool{
			tsq.withChapter != nil,
			tsq.withTkSectionLinks != nil,
			tsq.withSectionRecords != nil,
			tsq.withUserSectionExam != nil,
			tsq.withMakeUserQuestionSec != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TkSection{config: tsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tsq.withChapter; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkSection)
		for i := range nodes {
			fk := nodes[i].ChapterID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tkchapter.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "chapter_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Chapter = n
			}
		}
	}

	if query := tsq.withTkSectionLinks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkSection)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TkSectionLinks = []*TkQuestionSection{}
		}
		query.Where(predicate.TkQuestionSection(func(s *sql.Selector) {
			s.Where(sql.InValues(tksection.TkSectionLinksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SectionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "section_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TkSectionLinks = append(node.Edges.TkSectionLinks, n)
		}
	}

	if query := tsq.withSectionRecords; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkSection)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SectionRecords = []*TkUserQuestionRecord{}
		}
		query.Where(predicate.TkUserQuestionRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(tksection.SectionRecordsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SectionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "section_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.SectionRecords = append(node.Edges.SectionRecords, n)
		}
	}

	if query := tsq.withUserSectionExam; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkSection)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserSectionExam = []*TkUserExamScoreRecord{}
		}
		query.Where(predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(tksection.UserSectionExamColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SectionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "section_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserSectionExam = append(node.Edges.UserSectionExam, n)
		}
	}

	if query := tsq.withMakeUserQuestionSec; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkSection)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MakeUserQuestionSec = []*MakeUserQuestionRecord{}
		}
		query.Where(predicate.MakeUserQuestionRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(tksection.MakeUserQuestionSecColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SecID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "sec_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.MakeUserQuestionSec = append(node.Edges.MakeUserQuestionSec, n)
		}
	}

	return nodes, nil
}

func (tsq *TkSectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tsq.querySpec()
	return sqlgraph.CountNodes(ctx, tsq.driver, _spec)
}

func (tsq *TkSectionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tsq *TkSectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tksection.Table,
			Columns: tksection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tksection.FieldID,
			},
		},
		From:   tsq.sql,
		Unique: true,
	}
	if unique := tsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tksection.FieldID)
		for i := range fields {
			if fields[i] != tksection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tsq *TkSectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tsq.driver.Dialect())
	t1 := builder.Table(tksection.Table)
	selector := builder.Select(t1.Columns(tksection.Columns...)...).From(t1)
	if tsq.sql != nil {
		selector = tsq.sql
		selector.Select(selector.Columns(tksection.Columns...)...)
	}
	for _, p := range tsq.predicates {
		p(selector)
	}
	for _, p := range tsq.order {
		p(selector)
	}
	if offset := tsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TkSectionGroupBy is the group-by builder for TkSection entities.
type TkSectionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tsgb *TkSectionGroupBy) Aggregate(fns ...AggregateFunc) *TkSectionGroupBy {
	tsgb.fns = append(tsgb.fns, fns...)
	return tsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tsgb *TkSectionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tsgb.path(ctx)
	if err != nil {
		return err
	}
	tsgb.sql = query
	return tsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tsgb *TkSectionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tsgb *TkSectionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tsgb.fields) > 1 {
		return nil, errors.New("ent: TkSectionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tsgb *TkSectionGroupBy) StringsX(ctx context.Context) []string {
	v, err := tsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tsgb *TkSectionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tksection.Label}
	default:
		err = fmt.Errorf("ent: TkSectionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tsgb *TkSectionGroupBy) StringX(ctx context.Context) string {
	v, err := tsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tsgb *TkSectionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tsgb.fields) > 1 {
		return nil, errors.New("ent: TkSectionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tsgb *TkSectionGroupBy) IntsX(ctx context.Context) []int {
	v, err := tsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tsgb *TkSectionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tksection.Label}
	default:
		err = fmt.Errorf("ent: TkSectionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tsgb *TkSectionGroupBy) IntX(ctx context.Context) int {
	v, err := tsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tsgb *TkSectionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tsgb.fields) > 1 {
		return nil, errors.New("ent: TkSectionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tsgb *TkSectionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tsgb *TkSectionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tksection.Label}
	default:
		err = fmt.Errorf("ent: TkSectionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tsgb *TkSectionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tsgb *TkSectionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tsgb.fields) > 1 {
		return nil, errors.New("ent: TkSectionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tsgb *TkSectionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tsgb *TkSectionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tksection.Label}
	default:
		err = fmt.Errorf("ent: TkSectionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tsgb *TkSectionGroupBy) BoolX(ctx context.Context) bool {
	v, err := tsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tsgb *TkSectionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tsgb.fields {
		if !tksection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tsgb *TkSectionGroupBy) sqlQuery() *sql.Selector {
	selector := tsgb.sql
	columns := make([]string, 0, len(tsgb.fields)+len(tsgb.fns))
	columns = append(columns, tsgb.fields...)
	for _, fn := range tsgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(tsgb.fields...)
}

// TkSectionSelect is the builder for selecting fields of TkSection entities.
type TkSectionSelect struct {
	*TkSectionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tss *TkSectionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tss.prepareQuery(ctx); err != nil {
		return err
	}
	tss.sql = tss.TkSectionQuery.sqlQuery(ctx)
	return tss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tss *TkSectionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tss *TkSectionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tss.fields) > 1 {
		return nil, errors.New("ent: TkSectionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tss *TkSectionSelect) StringsX(ctx context.Context) []string {
	v, err := tss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tss *TkSectionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tksection.Label}
	default:
		err = fmt.Errorf("ent: TkSectionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tss *TkSectionSelect) StringX(ctx context.Context) string {
	v, err := tss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tss *TkSectionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tss.fields) > 1 {
		return nil, errors.New("ent: TkSectionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tss *TkSectionSelect) IntsX(ctx context.Context) []int {
	v, err := tss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tss *TkSectionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tksection.Label}
	default:
		err = fmt.Errorf("ent: TkSectionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tss *TkSectionSelect) IntX(ctx context.Context) int {
	v, err := tss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tss *TkSectionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tss.fields) > 1 {
		return nil, errors.New("ent: TkSectionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tss *TkSectionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tss *TkSectionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tksection.Label}
	default:
		err = fmt.Errorf("ent: TkSectionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tss *TkSectionSelect) Float64X(ctx context.Context) float64 {
	v, err := tss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tss *TkSectionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tss.fields) > 1 {
		return nil, errors.New("ent: TkSectionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tss *TkSectionSelect) BoolsX(ctx context.Context) []bool {
	v, err := tss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tss *TkSectionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tksection.Label}
	default:
		err = fmt.Errorf("ent: TkSectionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tss *TkSectionSelect) BoolX(ctx context.Context) bool {
	v, err := tss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tss *TkSectionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tss.sqlQuery().Query()
	if err := tss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tss *TkSectionSelect) sqlQuery() sql.Querier {
	selector := tss.sql
	selector.Select(selector.Columns(tss.fields...)...)
	return selector
}

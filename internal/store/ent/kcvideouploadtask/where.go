// Code generated by entc, DO NOT EDIT.

package kcvideouploadtask

import (
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// VideoID applies equality check predicate on the "video_id" field. It's identical to VideoIDEQ.
func VideoID(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoID), v))
	})
}

// AttachmentID applies equality check predicate on the "attachment_id" field. It's identical to AttachmentIDEQ.
func AttachmentID(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttachmentID), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// VideoName applies equality check predicate on the "video_name" field. It's identical to VideoNameEQ.
func VideoName(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoName), v))
	})
}

// TotalSize applies equality check predicate on the "total_size" field. It's identical to TotalSizeEQ.
func TotalSize(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalSize), v))
	})
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// VideoIDEQ applies the EQ predicate on the "video_id" field.
func VideoIDEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoID), v))
	})
}

// VideoIDNEQ applies the NEQ predicate on the "video_id" field.
func VideoIDNEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVideoID), v))
	})
}

// VideoIDIn applies the In predicate on the "video_id" field.
func VideoIDIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVideoID), v...))
	})
}

// VideoIDNotIn applies the NotIn predicate on the "video_id" field.
func VideoIDNotIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVideoID), v...))
	})
}

// VideoIDGT applies the GT predicate on the "video_id" field.
func VideoIDGT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVideoID), v))
	})
}

// VideoIDGTE applies the GTE predicate on the "video_id" field.
func VideoIDGTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVideoID), v))
	})
}

// VideoIDLT applies the LT predicate on the "video_id" field.
func VideoIDLT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVideoID), v))
	})
}

// VideoIDLTE applies the LTE predicate on the "video_id" field.
func VideoIDLTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVideoID), v))
	})
}

// VideoIDIsNil applies the IsNil predicate on the "video_id" field.
func VideoIDIsNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVideoID)))
	})
}

// VideoIDNotNil applies the NotNil predicate on the "video_id" field.
func VideoIDNotNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVideoID)))
	})
}

// AttachmentIDEQ applies the EQ predicate on the "attachment_id" field.
func AttachmentIDEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDNEQ applies the NEQ predicate on the "attachment_id" field.
func AttachmentIDNEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDIn applies the In predicate on the "attachment_id" field.
func AttachmentIDIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAttachmentID), v...))
	})
}

// AttachmentIDNotIn applies the NotIn predicate on the "attachment_id" field.
func AttachmentIDNotIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAttachmentID), v...))
	})
}

// AttachmentIDIsNil applies the IsNil predicate on the "attachment_id" field.
func AttachmentIDIsNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAttachmentID)))
	})
}

// AttachmentIDNotNil applies the NotNil predicate on the "attachment_id" field.
func AttachmentIDNotNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAttachmentID)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseID), v))
	})
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourseID), v...))
	})
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourseID), v...))
	})
}

// CourseIDGT applies the GT predicate on the "course_id" field.
func CourseIDGT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourseID), v))
	})
}

// CourseIDGTE applies the GTE predicate on the "course_id" field.
func CourseIDGTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourseID), v))
	})
}

// CourseIDLT applies the LT predicate on the "course_id" field.
func CourseIDLT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourseID), v))
	})
}

// CourseIDLTE applies the LTE predicate on the "course_id" field.
func CourseIDLTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourseID), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// VideoNameEQ applies the EQ predicate on the "video_name" field.
func VideoNameEQ(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoName), v))
	})
}

// VideoNameNEQ applies the NEQ predicate on the "video_name" field.
func VideoNameNEQ(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVideoName), v))
	})
}

// VideoNameIn applies the In predicate on the "video_name" field.
func VideoNameIn(vs ...string) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVideoName), v...))
	})
}

// VideoNameNotIn applies the NotIn predicate on the "video_name" field.
func VideoNameNotIn(vs ...string) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVideoName), v...))
	})
}

// VideoNameGT applies the GT predicate on the "video_name" field.
func VideoNameGT(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVideoName), v))
	})
}

// VideoNameGTE applies the GTE predicate on the "video_name" field.
func VideoNameGTE(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVideoName), v))
	})
}

// VideoNameLT applies the LT predicate on the "video_name" field.
func VideoNameLT(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVideoName), v))
	})
}

// VideoNameLTE applies the LTE predicate on the "video_name" field.
func VideoNameLTE(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVideoName), v))
	})
}

// VideoNameContains applies the Contains predicate on the "video_name" field.
func VideoNameContains(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVideoName), v))
	})
}

// VideoNameHasPrefix applies the HasPrefix predicate on the "video_name" field.
func VideoNameHasPrefix(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVideoName), v))
	})
}

// VideoNameHasSuffix applies the HasSuffix predicate on the "video_name" field.
func VideoNameHasSuffix(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVideoName), v))
	})
}

// VideoNameEqualFold applies the EqualFold predicate on the "video_name" field.
func VideoNameEqualFold(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVideoName), v))
	})
}

// VideoNameContainsFold applies the ContainsFold predicate on the "video_name" field.
func VideoNameContainsFold(v string) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVideoName), v))
	})
}

// TotalSizeEQ applies the EQ predicate on the "total_size" field.
func TotalSizeEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalSize), v))
	})
}

// TotalSizeNEQ applies the NEQ predicate on the "total_size" field.
func TotalSizeNEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalSize), v))
	})
}

// TotalSizeIn applies the In predicate on the "total_size" field.
func TotalSizeIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalSize), v...))
	})
}

// TotalSizeNotIn applies the NotIn predicate on the "total_size" field.
func TotalSizeNotIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalSize), v...))
	})
}

// TotalSizeGT applies the GT predicate on the "total_size" field.
func TotalSizeGT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalSize), v))
	})
}

// TotalSizeGTE applies the GTE predicate on the "total_size" field.
func TotalSizeGTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalSize), v))
	})
}

// TotalSizeLT applies the LT predicate on the "total_size" field.
func TotalSizeLT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalSize), v))
	})
}

// TotalSizeLTE applies the LTE predicate on the "total_size" field.
func TotalSizeLTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalSize), v))
	})
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLength), v))
	})
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLength), v...))
	})
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int) predicate.KcVideoUploadTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLength), v...))
	})
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLength), v))
	})
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLength), v))
	})
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLength), v))
	})
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLength), v))
	})
}

// HasAttachment applies the HasEdge predicate on the "attachment" edge.
func HasAttachment() predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttachmentTable, AttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentWith applies the HasEdge predicate on the "attachment" edge with a given conditions (other predicates).
func HasAttachmentWith(preds ...predicate.Attachment) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttachmentTable, AttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KcVideoUploadTask) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KcVideoUploadTask) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KcVideoUploadTask) predicate.KcVideoUploadTask {
	return predicate.KcVideoUploadTask(func(s *sql.Selector) {
		p(s.Not())
	})
}

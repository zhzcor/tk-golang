// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/advertise"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kcsmallcategoryattachment"
	"tkserver/internal/store/ent/kcvideouploadtask"
	"tkserver/internal/store/ent/majordetail"
	"tkserver/internal/store/ent/message"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/shareposter"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/useraskanswerattachment"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentQuery is the builder for querying Attachment entities.
type AttachmentQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Attachment
	// eager-loading edges.
	withMajorDetailCoverImg      *MajorDetailQuery
	withMajorDetailSubjectImg    *MajorDetailQuery
	withMajorTeacherAttachment   *MajorDetailQuery
	withMajorServiceAttachment   *MajorDetailQuery
	withAdvertise                *AdvertiseQuery
	withMessageAttachment        *MessageQuery
	withSharePosterAttachments   *SharePosterQuery
	withTeacherAttachments       *TeacherQuery
	withAdminImgID               *AdminQuery
	withSmallCategoryAttachments *KcSmallCategoryAttachmentQuery
	withCourseAttachments        *KcCourseQuery
	withClassCoverAttachments    *KcClassQuery
	withCoursewareAttachment     *KcCourseSmallCategoryQuery
	withOrderAttachment          *KcCourseSmallCategoryQuery
	withVideoTaskAttachment      *KcVideoUploadTaskQuery
	withAskAttachments           *UserAskAnswerAttachmentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AttachmentQuery builder.
func (aq *AttachmentQuery) Where(ps ...predicate.Attachment) *AttachmentQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit adds a limit step to the query.
func (aq *AttachmentQuery) Limit(limit int) *AttachmentQuery {
	aq.limit = &limit
	return aq
}

// Offset adds an offset step to the query.
func (aq *AttachmentQuery) Offset(offset int) *AttachmentQuery {
	aq.offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AttachmentQuery) Unique(unique bool) *AttachmentQuery {
	aq.unique = &unique
	return aq
}

// Order adds an order step to the query.
func (aq *AttachmentQuery) Order(o ...OrderFunc) *AttachmentQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryMajorDetailCoverImg chains the current query on the "major_detail_cover_img" edge.
func (aq *AttachmentQuery) QueryMajorDetailCoverImg() *MajorDetailQuery {
	query := &MajorDetailQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.MajorDetailCoverImgTable, attachment.MajorDetailCoverImgColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMajorDetailSubjectImg chains the current query on the "major_detail_subject_img" edge.
func (aq *AttachmentQuery) QueryMajorDetailSubjectImg() *MajorDetailQuery {
	query := &MajorDetailQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.MajorDetailSubjectImgTable, attachment.MajorDetailSubjectImgColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMajorTeacherAttachment chains the current query on the "major_teacher_attachment" edge.
func (aq *AttachmentQuery) QueryMajorTeacherAttachment() *MajorDetailQuery {
	query := &MajorDetailQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, attachment.MajorTeacherAttachmentTable, attachment.MajorTeacherAttachmentPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMajorServiceAttachment chains the current query on the "major_service_attachment" edge.
func (aq *AttachmentQuery) QueryMajorServiceAttachment() *MajorDetailQuery {
	query := &MajorDetailQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(majordetail.Table, majordetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, attachment.MajorServiceAttachmentTable, attachment.MajorServiceAttachmentPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdvertise chains the current query on the "advertise" edge.
func (aq *AttachmentQuery) QueryAdvertise() *AdvertiseQuery {
	query := &AdvertiseQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(advertise.Table, advertise.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.AdvertiseTable, attachment.AdvertiseColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMessageAttachment chains the current query on the "message_attachment" edge.
func (aq *AttachmentQuery) QueryMessageAttachment() *MessageQuery {
	query := &MessageQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.MessageAttachmentTable, attachment.MessageAttachmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySharePosterAttachments chains the current query on the "share_poster_attachments" edge.
func (aq *AttachmentQuery) QuerySharePosterAttachments() *SharePosterQuery {
	query := &SharePosterQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(shareposter.Table, shareposter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.SharePosterAttachmentsTable, attachment.SharePosterAttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeacherAttachments chains the current query on the "teacher_attachments" edge.
func (aq *AttachmentQuery) QueryTeacherAttachments() *TeacherQuery {
	query := &TeacherQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.TeacherAttachmentsTable, attachment.TeacherAttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdminImgID chains the current query on the "admin_img_id" edge.
func (aq *AttachmentQuery) QueryAdminImgID() *AdminQuery {
	query := &AdminQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, attachment.AdminImgIDTable, attachment.AdminImgIDColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySmallCategoryAttachments chains the current query on the "small_category_attachments" edge.
func (aq *AttachmentQuery) QuerySmallCategoryAttachments() *KcSmallCategoryAttachmentQuery {
	query := &KcSmallCategoryAttachmentQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(kcsmallcategoryattachment.Table, kcsmallcategoryattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.SmallCategoryAttachmentsTable, attachment.SmallCategoryAttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourseAttachments chains the current query on the "course_attachments" edge.
func (aq *AttachmentQuery) QueryCourseAttachments() *KcCourseQuery {
	query := &KcCourseQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.CourseAttachmentsTable, attachment.CourseAttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClassCoverAttachments chains the current query on the "class_cover_attachments" edge.
func (aq *AttachmentQuery) QueryClassCoverAttachments() *KcClassQuery {
	query := &KcClassQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.ClassCoverAttachmentsTable, attachment.ClassCoverAttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCoursewareAttachment chains the current query on the "courseware_attachment" edge.
func (aq *AttachmentQuery) QueryCoursewareAttachment() *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, attachment.CoursewareAttachmentTable, attachment.CoursewareAttachmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderAttachment chains the current query on the "order_attachment" edge.
func (aq *AttachmentQuery) QueryOrderAttachment() *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, attachment.OrderAttachmentTable, attachment.OrderAttachmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVideoTaskAttachment chains the current query on the "video_task_attachment" edge.
func (aq *AttachmentQuery) QueryVideoTaskAttachment() *KcVideoUploadTaskQuery {
	query := &KcVideoUploadTaskQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(kcvideouploadtask.Table, kcvideouploadtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.VideoTaskAttachmentTable, attachment.VideoTaskAttachmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAskAttachments chains the current query on the "ask_attachments" edge.
func (aq *AttachmentQuery) QueryAskAttachments() *UserAskAnswerAttachmentQuery {
	query := &UserAskAnswerAttachmentQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, selector),
			sqlgraph.To(useraskanswerattachment.Table, useraskanswerattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attachment.AskAttachmentsTable, attachment.AskAttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Attachment entity from the query.
// Returns a *NotFoundError when no Attachment was found.
func (aq *AttachmentQuery) First(ctx context.Context) (*Attachment, error) {
	nodes, err := aq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{attachment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AttachmentQuery) FirstX(ctx context.Context) *Attachment {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Attachment ID from the query.
// Returns a *NotFoundError when no Attachment ID was found.
func (aq *AttachmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{attachment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AttachmentQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Attachment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Attachment entity is not found.
// Returns a *NotFoundError when no Attachment entities are found.
func (aq *AttachmentQuery) Only(ctx context.Context) (*Attachment, error) {
	nodes, err := aq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{attachment.Label}
	default:
		return nil, &NotSingularError{attachment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AttachmentQuery) OnlyX(ctx context.Context) *Attachment {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Attachment ID in the query.
// Returns a *NotSingularError when exactly one Attachment ID is not found.
// Returns a *NotFoundError when no entities are found.
func (aq *AttachmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{attachment.Label}
	default:
		err = &NotSingularError{attachment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AttachmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Attachments.
func (aq *AttachmentQuery) All(ctx context.Context) ([]*Attachment, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aq *AttachmentQuery) AllX(ctx context.Context) []*Attachment {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Attachment IDs.
func (aq *AttachmentQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aq.Select(attachment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AttachmentQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AttachmentQuery) Count(ctx context.Context) (int, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AttachmentQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AttachmentQuery) Exist(ctx context.Context) (bool, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AttachmentQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AttachmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AttachmentQuery) Clone() *AttachmentQuery {
	if aq == nil {
		return nil
	}
	return &AttachmentQuery{
		config:                       aq.config,
		limit:                        aq.limit,
		offset:                       aq.offset,
		order:                        append([]OrderFunc{}, aq.order...),
		predicates:                   append([]predicate.Attachment{}, aq.predicates...),
		withMajorDetailCoverImg:      aq.withMajorDetailCoverImg.Clone(),
		withMajorDetailSubjectImg:    aq.withMajorDetailSubjectImg.Clone(),
		withMajorTeacherAttachment:   aq.withMajorTeacherAttachment.Clone(),
		withMajorServiceAttachment:   aq.withMajorServiceAttachment.Clone(),
		withAdvertise:                aq.withAdvertise.Clone(),
		withMessageAttachment:        aq.withMessageAttachment.Clone(),
		withSharePosterAttachments:   aq.withSharePosterAttachments.Clone(),
		withTeacherAttachments:       aq.withTeacherAttachments.Clone(),
		withAdminImgID:               aq.withAdminImgID.Clone(),
		withSmallCategoryAttachments: aq.withSmallCategoryAttachments.Clone(),
		withCourseAttachments:        aq.withCourseAttachments.Clone(),
		withClassCoverAttachments:    aq.withClassCoverAttachments.Clone(),
		withCoursewareAttachment:     aq.withCoursewareAttachment.Clone(),
		withOrderAttachment:          aq.withOrderAttachment.Clone(),
		withVideoTaskAttachment:      aq.withVideoTaskAttachment.Clone(),
		withAskAttachments:           aq.withAskAttachments.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithMajorDetailCoverImg tells the query-builder to eager-load the nodes that are connected to
// the "major_detail_cover_img" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithMajorDetailCoverImg(opts ...func(*MajorDetailQuery)) *AttachmentQuery {
	query := &MajorDetailQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withMajorDetailCoverImg = query
	return aq
}

// WithMajorDetailSubjectImg tells the query-builder to eager-load the nodes that are connected to
// the "major_detail_subject_img" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithMajorDetailSubjectImg(opts ...func(*MajorDetailQuery)) *AttachmentQuery {
	query := &MajorDetailQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withMajorDetailSubjectImg = query
	return aq
}

// WithMajorTeacherAttachment tells the query-builder to eager-load the nodes that are connected to
// the "major_teacher_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithMajorTeacherAttachment(opts ...func(*MajorDetailQuery)) *AttachmentQuery {
	query := &MajorDetailQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withMajorTeacherAttachment = query
	return aq
}

// WithMajorServiceAttachment tells the query-builder to eager-load the nodes that are connected to
// the "major_service_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithMajorServiceAttachment(opts ...func(*MajorDetailQuery)) *AttachmentQuery {
	query := &MajorDetailQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withMajorServiceAttachment = query
	return aq
}

// WithAdvertise tells the query-builder to eager-load the nodes that are connected to
// the "advertise" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithAdvertise(opts ...func(*AdvertiseQuery)) *AttachmentQuery {
	query := &AdvertiseQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withAdvertise = query
	return aq
}

// WithMessageAttachment tells the query-builder to eager-load the nodes that are connected to
// the "message_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithMessageAttachment(opts ...func(*MessageQuery)) *AttachmentQuery {
	query := &MessageQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withMessageAttachment = query
	return aq
}

// WithSharePosterAttachments tells the query-builder to eager-load the nodes that are connected to
// the "share_poster_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithSharePosterAttachments(opts ...func(*SharePosterQuery)) *AttachmentQuery {
	query := &SharePosterQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withSharePosterAttachments = query
	return aq
}

// WithTeacherAttachments tells the query-builder to eager-load the nodes that are connected to
// the "teacher_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithTeacherAttachments(opts ...func(*TeacherQuery)) *AttachmentQuery {
	query := &TeacherQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withTeacherAttachments = query
	return aq
}

// WithAdminImgID tells the query-builder to eager-load the nodes that are connected to
// the "admin_img_id" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithAdminImgID(opts ...func(*AdminQuery)) *AttachmentQuery {
	query := &AdminQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withAdminImgID = query
	return aq
}

// WithSmallCategoryAttachments tells the query-builder to eager-load the nodes that are connected to
// the "small_category_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithSmallCategoryAttachments(opts ...func(*KcSmallCategoryAttachmentQuery)) *AttachmentQuery {
	query := &KcSmallCategoryAttachmentQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withSmallCategoryAttachments = query
	return aq
}

// WithCourseAttachments tells the query-builder to eager-load the nodes that are connected to
// the "course_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithCourseAttachments(opts ...func(*KcCourseQuery)) *AttachmentQuery {
	query := &KcCourseQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withCourseAttachments = query
	return aq
}

// WithClassCoverAttachments tells the query-builder to eager-load the nodes that are connected to
// the "class_cover_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithClassCoverAttachments(opts ...func(*KcClassQuery)) *AttachmentQuery {
	query := &KcClassQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withClassCoverAttachments = query
	return aq
}

// WithCoursewareAttachment tells the query-builder to eager-load the nodes that are connected to
// the "courseware_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithCoursewareAttachment(opts ...func(*KcCourseSmallCategoryQuery)) *AttachmentQuery {
	query := &KcCourseSmallCategoryQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withCoursewareAttachment = query
	return aq
}

// WithOrderAttachment tells the query-builder to eager-load the nodes that are connected to
// the "order_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithOrderAttachment(opts ...func(*KcCourseSmallCategoryQuery)) *AttachmentQuery {
	query := &KcCourseSmallCategoryQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withOrderAttachment = query
	return aq
}

// WithVideoTaskAttachment tells the query-builder to eager-load the nodes that are connected to
// the "video_task_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithVideoTaskAttachment(opts ...func(*KcVideoUploadTaskQuery)) *AttachmentQuery {
	query := &KcVideoUploadTaskQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withVideoTaskAttachment = query
	return aq
}

// WithAskAttachments tells the query-builder to eager-load the nodes that are connected to
// the "ask_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AttachmentQuery) WithAskAttachments(opts ...func(*UserAskAnswerAttachmentQuery)) *AttachmentQuery {
	query := &UserAskAnswerAttachmentQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withAskAttachments = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Attachment.Query().
//		GroupBy(attachment.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aq *AttachmentQuery) GroupBy(field string, fields ...string) *AttachmentGroupBy {
	group := &AttachmentGroupBy{config: aq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.Attachment.Query().
//		Select(attachment.FieldUUID).
//		Scan(ctx, &v)
//
func (aq *AttachmentQuery) Select(field string, fields ...string) *AttachmentSelect {
	aq.fields = append([]string{field}, fields...)
	return &AttachmentSelect{AttachmentQuery: aq}
}

func (aq *AttachmentQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aq.fields {
		if !attachment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AttachmentQuery) sqlAll(ctx context.Context) ([]*Attachment, error) {
	var (
		nodes       = []*Attachment{}
		_spec       = aq.querySpec()
		loadedTypes = [16]bool{
			aq.withMajorDetailCoverImg != nil,
			aq.withMajorDetailSubjectImg != nil,
			aq.withMajorTeacherAttachment != nil,
			aq.withMajorServiceAttachment != nil,
			aq.withAdvertise != nil,
			aq.withMessageAttachment != nil,
			aq.withSharePosterAttachments != nil,
			aq.withTeacherAttachments != nil,
			aq.withAdminImgID != nil,
			aq.withSmallCategoryAttachments != nil,
			aq.withCourseAttachments != nil,
			aq.withClassCoverAttachments != nil,
			aq.withCoursewareAttachment != nil,
			aq.withOrderAttachment != nil,
			aq.withVideoTaskAttachment != nil,
			aq.withAskAttachments != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Attachment{config: aq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := aq.withMajorDetailCoverImg; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MajorDetailCoverImg = []*MajorDetail{}
		}
		query.Where(predicate.MajorDetail(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.MajorDetailCoverImgColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.CoverImgID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cover_img_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.MajorDetailCoverImg = append(node.Edges.MajorDetailCoverImg, n)
		}
	}

	if query := aq.withMajorDetailSubjectImg; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MajorDetailSubjectImg = []*MajorDetail{}
		}
		query.Where(predicate.MajorDetail(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.MajorDetailSubjectImgColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SubjectImgID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "subject_img_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.MajorDetailSubjectImg = append(node.Edges.MajorDetailSubjectImg, n)
		}
	}

	if query := aq.withMajorTeacherAttachment; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Attachment, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.MajorTeacherAttachment = []*MajorDetail{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Attachment)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   attachment.MajorTeacherAttachmentTable,
				Columns: attachment.MajorTeacherAttachmentPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(attachment.MajorTeacherAttachmentPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, aq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "major_teacher_attachment": %w`, err)
		}
		query.Where(majordetail.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "major_teacher_attachment" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.MajorTeacherAttachment = append(nodes[i].Edges.MajorTeacherAttachment, n)
			}
		}
	}

	if query := aq.withMajorServiceAttachment; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Attachment, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.MajorServiceAttachment = []*MajorDetail{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Attachment)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   attachment.MajorServiceAttachmentTable,
				Columns: attachment.MajorServiceAttachmentPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(attachment.MajorServiceAttachmentPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, aq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "major_service_attachment": %w`, err)
		}
		query.Where(majordetail.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "major_service_attachment" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.MajorServiceAttachment = append(nodes[i].Edges.MajorServiceAttachment, n)
			}
		}
	}

	if query := aq.withAdvertise; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Advertise = []*Advertise{}
		}
		query.Where(predicate.Advertise(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.AdvertiseColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AttachmentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "attachment_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Advertise = append(node.Edges.Advertise, n)
		}
	}

	if query := aq.withMessageAttachment; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MessageAttachment = []*Message{}
		}
		query.Where(predicate.Message(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.MessageAttachmentColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AttachmentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "attachment_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.MessageAttachment = append(node.Edges.MessageAttachment, n)
		}
	}

	if query := aq.withSharePosterAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SharePosterAttachments = []*SharePoster{}
		}
		query.Where(predicate.SharePoster(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.SharePosterAttachmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SharePosterImgID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "share_poster_img_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.SharePosterAttachments = append(node.Edges.SharePosterAttachments, n)
		}
	}

	if query := aq.withTeacherAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TeacherAttachments = []*Teacher{}
		}
		query.Where(predicate.Teacher(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.TeacherAttachmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AvatarID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "avatar_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TeacherAttachments = append(node.Edges.TeacherAttachments, n)
		}
	}

	if query := aq.withAdminImgID; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.Where(predicate.Admin(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.AdminImgIDColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AdminAvatarID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "admin_avatar_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AdminImgID = n
		}
	}

	if query := aq.withSmallCategoryAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SmallCategoryAttachments = []*KcSmallCategoryAttachment{}
		}
		query.Where(predicate.KcSmallCategoryAttachment(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.SmallCategoryAttachmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AttachmentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "attachment_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.SmallCategoryAttachments = append(node.Edges.SmallCategoryAttachments, n)
		}
	}

	if query := aq.withCourseAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CourseAttachments = []*KcCourse{}
		}
		query.Where(predicate.KcCourse(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.CourseAttachmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.CourseCoverImgID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "course_cover_img_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CourseAttachments = append(node.Edges.CourseAttachments, n)
		}
	}

	if query := aq.withClassCoverAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ClassCoverAttachments = []*KcClass{}
		}
		query.Where(predicate.KcClass(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.ClassCoverAttachmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ClassCoverImgID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "class_cover_img_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ClassCoverAttachments = append(node.Edges.ClassCoverAttachments, n)
		}
	}

	if query := aq.withCoursewareAttachment; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.Where(predicate.KcCourseSmallCategory(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.CoursewareAttachmentColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.CoursewareAttachID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "courseware_attach_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CoursewareAttachment = n
		}
	}

	if query := aq.withOrderAttachment; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.Where(predicate.KcCourseSmallCategory(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.OrderAttachmentColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.OrderVideoAttachID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_video_attach_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.OrderAttachment = n
		}
	}

	if query := aq.withVideoTaskAttachment; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.VideoTaskAttachment = []*KcVideoUploadTask{}
		}
		query.Where(predicate.KcVideoUploadTask(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.VideoTaskAttachmentColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AttachmentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "attachment_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.VideoTaskAttachment = append(node.Edges.VideoTaskAttachment, n)
		}
	}

	if query := aq.withAskAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Attachment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AskAttachments = []*UserAskAnswerAttachment{}
		}
		query.Where(predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
			s.Where(sql.InValues(attachment.AskAttachmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AttachmentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "attachment_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AskAttachments = append(node.Edges.AskAttachments, n)
		}
	}

	return nodes, nil
}

func (aq *AttachmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AttachmentQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (aq *AttachmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attachment.Table,
			Columns: attachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attachment.FieldID,
			},
		},
		From:   aq.sql,
		Unique: true,
	}
	if unique := aq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attachment.FieldID)
		for i := range fields {
			if fields[i] != attachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AttachmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(attachment.Table)
	selector := builder.Select(t1.Columns(attachment.Columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(attachment.Columns...)...)
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AttachmentGroupBy is the group-by builder for Attachment entities.
type AttachmentGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AttachmentGroupBy) Aggregate(fns ...AggregateFunc) *AttachmentGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the group-by query and scans the result into the given value.
func (agb *AttachmentGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := agb.path(ctx)
	if err != nil {
		return err
	}
	agb.sql = query
	return agb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (agb *AttachmentGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := agb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AttachmentGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AttachmentGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (agb *AttachmentGroupBy) StringsX(ctx context.Context) []string {
	v, err := agb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AttachmentGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = agb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{attachment.Label}
	default:
		err = fmt.Errorf("ent: AttachmentGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (agb *AttachmentGroupBy) StringX(ctx context.Context) string {
	v, err := agb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AttachmentGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AttachmentGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (agb *AttachmentGroupBy) IntsX(ctx context.Context) []int {
	v, err := agb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AttachmentGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = agb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{attachment.Label}
	default:
		err = fmt.Errorf("ent: AttachmentGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (agb *AttachmentGroupBy) IntX(ctx context.Context) int {
	v, err := agb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AttachmentGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AttachmentGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (agb *AttachmentGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := agb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AttachmentGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = agb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{attachment.Label}
	default:
		err = fmt.Errorf("ent: AttachmentGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (agb *AttachmentGroupBy) Float64X(ctx context.Context) float64 {
	v, err := agb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AttachmentGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AttachmentGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (agb *AttachmentGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := agb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AttachmentGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = agb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{attachment.Label}
	default:
		err = fmt.Errorf("ent: AttachmentGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (agb *AttachmentGroupBy) BoolX(ctx context.Context) bool {
	v, err := agb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (agb *AttachmentGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range agb.fields {
		if !attachment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := agb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (agb *AttachmentGroupBy) sqlQuery() *sql.Selector {
	selector := agb.sql
	columns := make([]string, 0, len(agb.fields)+len(agb.fns))
	columns = append(columns, agb.fields...)
	for _, fn := range agb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(agb.fields...)
}

// AttachmentSelect is the builder for selecting fields of Attachment entities.
type AttachmentSelect struct {
	*AttachmentQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (as *AttachmentSelect) Scan(ctx context.Context, v interface{}) error {
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	as.sql = as.AttachmentQuery.sqlQuery(ctx)
	return as.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (as *AttachmentSelect) ScanX(ctx context.Context, v interface{}) {
	if err := as.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (as *AttachmentSelect) Strings(ctx context.Context) ([]string, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AttachmentSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (as *AttachmentSelect) StringsX(ctx context.Context) []string {
	v, err := as.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (as *AttachmentSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = as.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{attachment.Label}
	default:
		err = fmt.Errorf("ent: AttachmentSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (as *AttachmentSelect) StringX(ctx context.Context) string {
	v, err := as.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (as *AttachmentSelect) Ints(ctx context.Context) ([]int, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AttachmentSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (as *AttachmentSelect) IntsX(ctx context.Context) []int {
	v, err := as.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (as *AttachmentSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = as.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{attachment.Label}
	default:
		err = fmt.Errorf("ent: AttachmentSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (as *AttachmentSelect) IntX(ctx context.Context) int {
	v, err := as.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (as *AttachmentSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AttachmentSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (as *AttachmentSelect) Float64sX(ctx context.Context) []float64 {
	v, err := as.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (as *AttachmentSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = as.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{attachment.Label}
	default:
		err = fmt.Errorf("ent: AttachmentSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (as *AttachmentSelect) Float64X(ctx context.Context) float64 {
	v, err := as.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (as *AttachmentSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AttachmentSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (as *AttachmentSelect) BoolsX(ctx context.Context) []bool {
	v, err := as.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (as *AttachmentSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = as.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{attachment.Label}
	default:
		err = fmt.Errorf("ent: AttachmentSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (as *AttachmentSelect) BoolX(ctx context.Context) bool {
	v, err := as.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (as *AttachmentSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := as.sqlQuery().Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (as *AttachmentSelect) sqlQuery() sql.Querier {
	selector := as.sql
	selector.Select(selector.Columns(as.fields...)...)
	return selector
}

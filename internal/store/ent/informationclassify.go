// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/informationclassify"

	"entgo.io/ent/dialect/sql"
)

// InformationClassify is the model entity for the InformationClassify schema.
type InformationClassify struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name"`
	// Status holds the value of the "status" field.
	// 状态：1、锁定。2:生效
	Status uint8 `json:"status"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InformationClassify) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case informationclassify.FieldID, informationclassify.FieldStatus:
			values[i] = new(sql.NullInt64)
		case informationclassify.FieldUUID, informationclassify.FieldName:
			values[i] = new(sql.NullString)
		case informationclassify.FieldCreatedAt, informationclassify.FieldUpdatedAt, informationclassify.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type InformationClassify", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InformationClassify fields.
func (ic *InformationClassify) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case informationclassify.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ic.ID = int(value.Int64)
		case informationclassify.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				ic.UUID = value.String
			}
		case informationclassify.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ic.CreatedAt = new(time.Time)
				*ic.CreatedAt = value.Time
			}
		case informationclassify.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ic.UpdatedAt = new(time.Time)
				*ic.UpdatedAt = value.Time
			}
		case informationclassify.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ic.DeletedAt = new(time.Time)
				*ic.DeletedAt = value.Time
			}
		case informationclassify.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ic.Name = value.String
			}
		case informationclassify.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ic.Status = uint8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this InformationClassify.
// Note that you need to call InformationClassify.Unwrap() before calling this method if this InformationClassify
// was returned from a transaction, and the transaction was committed or rolled back.
func (ic *InformationClassify) Update() *InformationClassifyUpdateOne {
	return (&InformationClassifyClient{config: ic.config}).UpdateOne(ic)
}

// Unwrap unwraps the InformationClassify entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ic *InformationClassify) Unwrap() *InformationClassify {
	tx, ok := ic.config.driver.(*txDriver)
	if !ok {
		panic("ent: InformationClassify is not a transactional entity")
	}
	ic.config.driver = tx.drv
	return ic
}

// String implements the fmt.Stringer.
func (ic *InformationClassify) String() string {
	var builder strings.Builder
	builder.WriteString("InformationClassify(")
	builder.WriteString(fmt.Sprintf("id=%v", ic.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(ic.UUID)
	if v := ic.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ic.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ic.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(ic.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ic.Status))
	builder.WriteByte(')')
	return builder.String()
}

// InformationClassifies is a parsable slice of InformationClassify.
type InformationClassifies []*InformationClassify

func (ic InformationClassifies) config(cfg config) {
	for _i := range ic {
		ic[_i].config = cfg
	}
}

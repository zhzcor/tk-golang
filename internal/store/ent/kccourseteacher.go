// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/kccourseteacher"
	"gserver/internal/store/ent/teacher"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// KcCourseTeacher is the model entity for the KcCourseTeacher schema.
type KcCourseTeacher struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ShowStatus holds the value of the "show_status" field.
	// 显示状态：1：显示，2：不显示
	ShowStatus uint8 `json:"show_status"`
	// SortOrder holds the value of the "sort_order" field.
	// 排序
	SortOrder int `json:"sort_order"`
	// CourseID holds the value of the "course_id" field.
	// 课程id
	CourseID int `json:"course_id"`
	// TeacherID holds the value of the "teacher_id" field.
	// 老师id
	TeacherID int `json:"teacher_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KcCourseTeacherQuery when eager-loading is set.
	Edges KcCourseTeacherEdges `json:"edges"`
}

// KcCourseTeacherEdges holds the relations/edges for other nodes in the graph.
type KcCourseTeacherEdges struct {
	// Teacher holds the value of the teacher edge.
	Teacher *Teacher `json:"teacher,omitempty"`
	// Course holds the value of the course edge.
	Course *KcCourse `json:"course,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseTeacherEdges) TeacherOrErr() (*Teacher, error) {
	if e.loadedTypes[0] {
		if e.Teacher == nil {
			// The edge teacher was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.Teacher, nil
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseTeacherEdges) CourseOrErr() (*KcCourse, error) {
	if e.loadedTypes[1] {
		if e.Course == nil {
			// The edge course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccourse.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KcCourseTeacher) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kccourseteacher.FieldID, kccourseteacher.FieldShowStatus, kccourseteacher.FieldSortOrder, kccourseteacher.FieldCourseID, kccourseteacher.FieldTeacherID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KcCourseTeacher", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KcCourseTeacher fields.
func (kct *KcCourseTeacher) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kccourseteacher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kct.ID = int(value.Int64)
		case kccourseteacher.FieldShowStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field show_status", values[i])
			} else if value.Valid {
				kct.ShowStatus = uint8(value.Int64)
			}
		case kccourseteacher.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				kct.SortOrder = int(value.Int64)
			}
		case kccourseteacher.FieldCourseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				kct.CourseID = int(value.Int64)
			}
		case kccourseteacher.FieldTeacherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_id", values[i])
			} else if value.Valid {
				kct.TeacherID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTeacher queries the "teacher" edge of the KcCourseTeacher entity.
func (kct *KcCourseTeacher) QueryTeacher() *TeacherQuery {
	return (&KcCourseTeacherClient{config: kct.config}).QueryTeacher(kct)
}

// QueryCourse queries the "course" edge of the KcCourseTeacher entity.
func (kct *KcCourseTeacher) QueryCourse() *KcCourseQuery {
	return (&KcCourseTeacherClient{config: kct.config}).QueryCourse(kct)
}

// Update returns a builder for updating this KcCourseTeacher.
// Note that you need to call KcCourseTeacher.Unwrap() before calling this method if this KcCourseTeacher
// was returned from a transaction, and the transaction was committed or rolled back.
func (kct *KcCourseTeacher) Update() *KcCourseTeacherUpdateOne {
	return (&KcCourseTeacherClient{config: kct.config}).UpdateOne(kct)
}

// Unwrap unwraps the KcCourseTeacher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kct *KcCourseTeacher) Unwrap() *KcCourseTeacher {
	tx, ok := kct.config.driver.(*txDriver)
	if !ok {
		panic("ent: KcCourseTeacher is not a transactional entity")
	}
	kct.config.driver = tx.drv
	return kct
}

// String implements the fmt.Stringer.
func (kct *KcCourseTeacher) String() string {
	var builder strings.Builder
	builder.WriteString("KcCourseTeacher(")
	builder.WriteString(fmt.Sprintf("id=%v", kct.ID))
	builder.WriteString(", show_status=")
	builder.WriteString(fmt.Sprintf("%v", kct.ShowStatus))
	builder.WriteString(", sort_order=")
	builder.WriteString(fmt.Sprintf("%v", kct.SortOrder))
	builder.WriteString(", course_id=")
	builder.WriteString(fmt.Sprintf("%v", kct.CourseID))
	builder.WriteString(", teacher_id=")
	builder.WriteString(fmt.Sprintf("%v", kct.TeacherID))
	builder.WriteByte(')')
	return builder.String()
}

// KcCourseTeachers is a parsable slice of KcCourseTeacher.
type KcCourseTeachers []*KcCourseTeacher

func (kct KcCourseTeachers) config(cfg config) {
	for _i := range kct {
		kct[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/itemcategory"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemCategoryQuery is the builder for querying ItemCategory entities.
type ItemCategoryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ItemCategory
	// eager-loading edges.
	withItemQuestionBanks *TkQuestionBankQuery
	withKcClass           *KcClassQuery
	withCourse            *KcCourseQuery
	withUserItemCate      *UserQuery
	withParent            *ItemCategoryQuery
	withChildren          *ItemCategoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ItemCategoryQuery builder.
func (icq *ItemCategoryQuery) Where(ps ...predicate.ItemCategory) *ItemCategoryQuery {
	icq.predicates = append(icq.predicates, ps...)
	return icq
}

// Limit adds a limit step to the query.
func (icq *ItemCategoryQuery) Limit(limit int) *ItemCategoryQuery {
	icq.limit = &limit
	return icq
}

// Offset adds an offset step to the query.
func (icq *ItemCategoryQuery) Offset(offset int) *ItemCategoryQuery {
	icq.offset = &offset
	return icq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (icq *ItemCategoryQuery) Unique(unique bool) *ItemCategoryQuery {
	icq.unique = &unique
	return icq
}

// Order adds an order step to the query.
func (icq *ItemCategoryQuery) Order(o ...OrderFunc) *ItemCategoryQuery {
	icq.order = append(icq.order, o...)
	return icq
}

// QueryItemQuestionBanks chains the current query on the "item_question_banks" edge.
func (icq *ItemCategoryQuery) QueryItemQuestionBanks() *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: icq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := icq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, selector),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, itemcategory.ItemQuestionBanksTable, itemcategory.ItemQuestionBanksColumn),
		)
		fromU = sqlgraph.SetNeighbors(icq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKcClass chains the current query on the "kc_class" edge.
func (icq *ItemCategoryQuery) QueryKcClass() *KcClassQuery {
	query := &KcClassQuery{config: icq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := icq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, selector),
			sqlgraph.To(kcclass.Table, kcclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, itemcategory.KcClassTable, itemcategory.KcClassColumn),
		)
		fromU = sqlgraph.SetNeighbors(icq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourse chains the current query on the "course" edge.
func (icq *ItemCategoryQuery) QueryCourse() *KcCourseQuery {
	query := &KcCourseQuery{config: icq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := icq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, selector),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, itemcategory.CourseTable, itemcategory.CourseColumn),
		)
		fromU = sqlgraph.SetNeighbors(icq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserItemCate chains the current query on the "user_item_cate" edge.
func (icq *ItemCategoryQuery) QueryUserItemCate() *UserQuery {
	query := &UserQuery{config: icq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := icq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, itemcategory.UserItemCateTable, itemcategory.UserItemCateColumn),
		)
		fromU = sqlgraph.SetNeighbors(icq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (icq *ItemCategoryQuery) QueryParent() *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: icq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := icq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, selector),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, itemcategory.ParentTable, itemcategory.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(icq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (icq *ItemCategoryQuery) QueryChildren() *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: icq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := icq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(itemcategory.Table, itemcategory.FieldID, selector),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, itemcategory.ChildrenTable, itemcategory.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(icq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ItemCategory entity from the query.
// Returns a *NotFoundError when no ItemCategory was found.
func (icq *ItemCategoryQuery) First(ctx context.Context) (*ItemCategory, error) {
	nodes, err := icq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{itemcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (icq *ItemCategoryQuery) FirstX(ctx context.Context) *ItemCategory {
	node, err := icq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ItemCategory ID from the query.
// Returns a *NotFoundError when no ItemCategory ID was found.
func (icq *ItemCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = icq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{itemcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (icq *ItemCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := icq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ItemCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ItemCategory entity is not found.
// Returns a *NotFoundError when no ItemCategory entities are found.
func (icq *ItemCategoryQuery) Only(ctx context.Context) (*ItemCategory, error) {
	nodes, err := icq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{itemcategory.Label}
	default:
		return nil, &NotSingularError{itemcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (icq *ItemCategoryQuery) OnlyX(ctx context.Context) *ItemCategory {
	node, err := icq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ItemCategory ID in the query.
// Returns a *NotSingularError when exactly one ItemCategory ID is not found.
// Returns a *NotFoundError when no entities are found.
func (icq *ItemCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = icq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = &NotSingularError{itemcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (icq *ItemCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := icq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ItemCategories.
func (icq *ItemCategoryQuery) All(ctx context.Context) ([]*ItemCategory, error) {
	if err := icq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return icq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (icq *ItemCategoryQuery) AllX(ctx context.Context) []*ItemCategory {
	nodes, err := icq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ItemCategory IDs.
func (icq *ItemCategoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := icq.Select(itemcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (icq *ItemCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := icq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (icq *ItemCategoryQuery) Count(ctx context.Context) (int, error) {
	if err := icq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return icq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (icq *ItemCategoryQuery) CountX(ctx context.Context) int {
	count, err := icq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (icq *ItemCategoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := icq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return icq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (icq *ItemCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := icq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ItemCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (icq *ItemCategoryQuery) Clone() *ItemCategoryQuery {
	if icq == nil {
		return nil
	}
	return &ItemCategoryQuery{
		config:                icq.config,
		limit:                 icq.limit,
		offset:                icq.offset,
		order:                 append([]OrderFunc{}, icq.order...),
		predicates:            append([]predicate.ItemCategory{}, icq.predicates...),
		withItemQuestionBanks: icq.withItemQuestionBanks.Clone(),
		withKcClass:           icq.withKcClass.Clone(),
		withCourse:            icq.withCourse.Clone(),
		withUserItemCate:      icq.withUserItemCate.Clone(),
		withParent:            icq.withParent.Clone(),
		withChildren:          icq.withChildren.Clone(),
		// clone intermediate query.
		sql:  icq.sql.Clone(),
		path: icq.path,
	}
}

// WithItemQuestionBanks tells the query-builder to eager-load the nodes that are connected to
// the "item_question_banks" edge. The optional arguments are used to configure the query builder of the edge.
func (icq *ItemCategoryQuery) WithItemQuestionBanks(opts ...func(*TkQuestionBankQuery)) *ItemCategoryQuery {
	query := &TkQuestionBankQuery{config: icq.config}
	for _, opt := range opts {
		opt(query)
	}
	icq.withItemQuestionBanks = query
	return icq
}

// WithKcClass tells the query-builder to eager-load the nodes that are connected to
// the "kc_class" edge. The optional arguments are used to configure the query builder of the edge.
func (icq *ItemCategoryQuery) WithKcClass(opts ...func(*KcClassQuery)) *ItemCategoryQuery {
	query := &KcClassQuery{config: icq.config}
	for _, opt := range opts {
		opt(query)
	}
	icq.withKcClass = query
	return icq
}

// WithCourse tells the query-builder to eager-load the nodes that are connected to
// the "course" edge. The optional arguments are used to configure the query builder of the edge.
func (icq *ItemCategoryQuery) WithCourse(opts ...func(*KcCourseQuery)) *ItemCategoryQuery {
	query := &KcCourseQuery{config: icq.config}
	for _, opt := range opts {
		opt(query)
	}
	icq.withCourse = query
	return icq
}

// WithUserItemCate tells the query-builder to eager-load the nodes that are connected to
// the "user_item_cate" edge. The optional arguments are used to configure the query builder of the edge.
func (icq *ItemCategoryQuery) WithUserItemCate(opts ...func(*UserQuery)) *ItemCategoryQuery {
	query := &UserQuery{config: icq.config}
	for _, opt := range opts {
		opt(query)
	}
	icq.withUserItemCate = query
	return icq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (icq *ItemCategoryQuery) WithParent(opts ...func(*ItemCategoryQuery)) *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: icq.config}
	for _, opt := range opts {
		opt(query)
	}
	icq.withParent = query
	return icq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (icq *ItemCategoryQuery) WithChildren(opts ...func(*ItemCategoryQuery)) *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: icq.config}
	for _, opt := range opts {
		opt(query)
	}
	icq.withChildren = query
	return icq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ItemCategory.Query().
//		GroupBy(itemcategory.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (icq *ItemCategoryQuery) GroupBy(field string, fields ...string) *ItemCategoryGroupBy {
	group := &ItemCategoryGroupBy{config: icq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return icq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.ItemCategory.Query().
//		Select(itemcategory.FieldUUID).
//		Scan(ctx, &v)
//
func (icq *ItemCategoryQuery) Select(field string, fields ...string) *ItemCategorySelect {
	icq.fields = append([]string{field}, fields...)
	return &ItemCategorySelect{ItemCategoryQuery: icq}
}

func (icq *ItemCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range icq.fields {
		if !itemcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if icq.path != nil {
		prev, err := icq.path(ctx)
		if err != nil {
			return err
		}
		icq.sql = prev
	}
	return nil
}

func (icq *ItemCategoryQuery) sqlAll(ctx context.Context) ([]*ItemCategory, error) {
	var (
		nodes       = []*ItemCategory{}
		_spec       = icq.querySpec()
		loadedTypes = [6]bool{
			icq.withItemQuestionBanks != nil,
			icq.withKcClass != nil,
			icq.withCourse != nil,
			icq.withUserItemCate != nil,
			icq.withParent != nil,
			icq.withChildren != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ItemCategory{config: icq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, icq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := icq.withItemQuestionBanks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ItemCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ItemQuestionBanks = []*TkQuestionBank{}
		}
		query.Where(predicate.TkQuestionBank(func(s *sql.Selector) {
			s.Where(sql.InValues(itemcategory.ItemQuestionBanksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ItemCategoryID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_category_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ItemQuestionBanks = append(node.Edges.ItemQuestionBanks, n)
		}
	}

	if query := icq.withKcClass; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ItemCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.Where(predicate.KcClass(func(s *sql.Selector) {
			s.Where(sql.InValues(itemcategory.KcClassColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.CateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.KcClass = n
		}
	}

	if query := icq.withCourse; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ItemCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Course = []*KcCourse{}
		}
		query.Where(predicate.KcCourse(func(s *sql.Selector) {
			s.Where(sql.InValues(itemcategory.CourseColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.CateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Course = append(node.Edges.Course, n)
		}
	}

	if query := icq.withUserItemCate; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ItemCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserItemCate = []*User{}
		}
		query.Where(predicate.User(func(s *sql.Selector) {
			s.Where(sql.InValues(itemcategory.UserItemCateColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.FromItemCategoryID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "from_item_category_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserItemCate = append(node.Edges.UserItemCate, n)
		}
	}

	if query := icq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ItemCategory)
		for i := range nodes {
			fk := nodes[i].Pid
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(itemcategory.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pid" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := icq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ItemCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*ItemCategory{}
		}
		query.Where(predicate.ItemCategory(func(s *sql.Selector) {
			s.Where(sql.InValues(itemcategory.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.Pid
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pid" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	return nodes, nil
}

func (icq *ItemCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := icq.querySpec()
	return sqlgraph.CountNodes(ctx, icq.driver, _spec)
}

func (icq *ItemCategoryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := icq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (icq *ItemCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemcategory.Table,
			Columns: itemcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemcategory.FieldID,
			},
		},
		From:   icq.sql,
		Unique: true,
	}
	if unique := icq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := icq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemcategory.FieldID)
		for i := range fields {
			if fields[i] != itemcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := icq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := icq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := icq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := icq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (icq *ItemCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(icq.driver.Dialect())
	t1 := builder.Table(itemcategory.Table)
	selector := builder.Select(t1.Columns(itemcategory.Columns...)...).From(t1)
	if icq.sql != nil {
		selector = icq.sql
		selector.Select(selector.Columns(itemcategory.Columns...)...)
	}
	for _, p := range icq.predicates {
		p(selector)
	}
	for _, p := range icq.order {
		p(selector)
	}
	if offset := icq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := icq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ItemCategoryGroupBy is the group-by builder for ItemCategory entities.
type ItemCategoryGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (icgb *ItemCategoryGroupBy) Aggregate(fns ...AggregateFunc) *ItemCategoryGroupBy {
	icgb.fns = append(icgb.fns, fns...)
	return icgb
}

// Scan applies the group-by query and scans the result into the given value.
func (icgb *ItemCategoryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := icgb.path(ctx)
	if err != nil {
		return err
	}
	icgb.sql = query
	return icgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (icgb *ItemCategoryGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := icgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (icgb *ItemCategoryGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(icgb.fields) > 1 {
		return nil, errors.New("ent: ItemCategoryGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := icgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (icgb *ItemCategoryGroupBy) StringsX(ctx context.Context) []string {
	v, err := icgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (icgb *ItemCategoryGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = icgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = fmt.Errorf("ent: ItemCategoryGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (icgb *ItemCategoryGroupBy) StringX(ctx context.Context) string {
	v, err := icgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (icgb *ItemCategoryGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(icgb.fields) > 1 {
		return nil, errors.New("ent: ItemCategoryGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := icgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (icgb *ItemCategoryGroupBy) IntsX(ctx context.Context) []int {
	v, err := icgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (icgb *ItemCategoryGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = icgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = fmt.Errorf("ent: ItemCategoryGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (icgb *ItemCategoryGroupBy) IntX(ctx context.Context) int {
	v, err := icgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (icgb *ItemCategoryGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(icgb.fields) > 1 {
		return nil, errors.New("ent: ItemCategoryGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := icgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (icgb *ItemCategoryGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := icgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (icgb *ItemCategoryGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = icgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = fmt.Errorf("ent: ItemCategoryGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (icgb *ItemCategoryGroupBy) Float64X(ctx context.Context) float64 {
	v, err := icgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (icgb *ItemCategoryGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(icgb.fields) > 1 {
		return nil, errors.New("ent: ItemCategoryGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := icgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (icgb *ItemCategoryGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := icgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (icgb *ItemCategoryGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = icgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = fmt.Errorf("ent: ItemCategoryGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (icgb *ItemCategoryGroupBy) BoolX(ctx context.Context) bool {
	v, err := icgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (icgb *ItemCategoryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range icgb.fields {
		if !itemcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := icgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := icgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (icgb *ItemCategoryGroupBy) sqlQuery() *sql.Selector {
	selector := icgb.sql
	columns := make([]string, 0, len(icgb.fields)+len(icgb.fns))
	columns = append(columns, icgb.fields...)
	for _, fn := range icgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(icgb.fields...)
}

// ItemCategorySelect is the builder for selecting fields of ItemCategory entities.
type ItemCategorySelect struct {
	*ItemCategoryQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ics *ItemCategorySelect) Scan(ctx context.Context, v interface{}) error {
	if err := ics.prepareQuery(ctx); err != nil {
		return err
	}
	ics.sql = ics.ItemCategoryQuery.sqlQuery(ctx)
	return ics.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ics *ItemCategorySelect) ScanX(ctx context.Context, v interface{}) {
	if err := ics.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ics *ItemCategorySelect) Strings(ctx context.Context) ([]string, error) {
	if len(ics.fields) > 1 {
		return nil, errors.New("ent: ItemCategorySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ics.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ics *ItemCategorySelect) StringsX(ctx context.Context) []string {
	v, err := ics.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ics *ItemCategorySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ics.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = fmt.Errorf("ent: ItemCategorySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ics *ItemCategorySelect) StringX(ctx context.Context) string {
	v, err := ics.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ics *ItemCategorySelect) Ints(ctx context.Context) ([]int, error) {
	if len(ics.fields) > 1 {
		return nil, errors.New("ent: ItemCategorySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ics.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ics *ItemCategorySelect) IntsX(ctx context.Context) []int {
	v, err := ics.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ics *ItemCategorySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ics.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = fmt.Errorf("ent: ItemCategorySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ics *ItemCategorySelect) IntX(ctx context.Context) int {
	v, err := ics.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ics *ItemCategorySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ics.fields) > 1 {
		return nil, errors.New("ent: ItemCategorySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ics.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ics *ItemCategorySelect) Float64sX(ctx context.Context) []float64 {
	v, err := ics.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ics *ItemCategorySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ics.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = fmt.Errorf("ent: ItemCategorySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ics *ItemCategorySelect) Float64X(ctx context.Context) float64 {
	v, err := ics.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ics *ItemCategorySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ics.fields) > 1 {
		return nil, errors.New("ent: ItemCategorySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ics.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ics *ItemCategorySelect) BoolsX(ctx context.Context) []bool {
	v, err := ics.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ics *ItemCategorySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ics.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemcategory.Label}
	default:
		err = fmt.Errorf("ent: ItemCategorySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ics *ItemCategorySelect) BoolX(ctx context.Context) bool {
	v, err := ics.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ics *ItemCategorySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ics.sqlQuery().Query()
	if err := ics.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ics *ItemCategorySelect) sqlQuery() sql.Querier {
	selector := ics.sql
	selector.Select(selector.Columns(ics.fields...)...)
	return selector
}

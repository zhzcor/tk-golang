// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tksection"
	"tkserver/internal/store/ent/tkuserexamscorerecord"
	"tkserver/internal/store/ent/tkusersimulationteachermark"
	"tkserver/internal/store/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserExamScoreRecordQuery is the builder for querying TkUserExamScoreRecord entities.
type TkUserExamScoreRecordQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TkUserExamScoreRecord
	// eager-loading edges.
	withExamPaper       *TkExamPaperQuery
	withSection         *TkSectionQuery
	withTeacher         *TeacherQuery
	withUser            *UserQuery
	withUserExamDetails *TkUserSimulationTeacherMarkQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TkUserExamScoreRecordQuery builder.
func (tuesrq *TkUserExamScoreRecordQuery) Where(ps ...predicate.TkUserExamScoreRecord) *TkUserExamScoreRecordQuery {
	tuesrq.predicates = append(tuesrq.predicates, ps...)
	return tuesrq
}

// Limit adds a limit step to the query.
func (tuesrq *TkUserExamScoreRecordQuery) Limit(limit int) *TkUserExamScoreRecordQuery {
	tuesrq.limit = &limit
	return tuesrq
}

// Offset adds an offset step to the query.
func (tuesrq *TkUserExamScoreRecordQuery) Offset(offset int) *TkUserExamScoreRecordQuery {
	tuesrq.offset = &offset
	return tuesrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tuesrq *TkUserExamScoreRecordQuery) Unique(unique bool) *TkUserExamScoreRecordQuery {
	tuesrq.unique = &unique
	return tuesrq
}

// Order adds an order step to the query.
func (tuesrq *TkUserExamScoreRecordQuery) Order(o ...OrderFunc) *TkUserExamScoreRecordQuery {
	tuesrq.order = append(tuesrq.order, o...)
	return tuesrq
}

// QueryExamPaper chains the current query on the "exam_paper" edge.
func (tuesrq *TkUserExamScoreRecordQuery) QueryExamPaper() *TkExamPaperQuery {
	query := &TkExamPaperQuery{config: tuesrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuesrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuesrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, selector),
			sqlgraph.To(tkexampaper.Table, tkexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserexamscorerecord.ExamPaperTable, tkuserexamscorerecord.ExamPaperColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuesrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySection chains the current query on the "section" edge.
func (tuesrq *TkUserExamScoreRecordQuery) QuerySection() *TkSectionQuery {
	query := &TkSectionQuery{config: tuesrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuesrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuesrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, selector),
			sqlgraph.To(tksection.Table, tksection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserexamscorerecord.SectionTable, tkuserexamscorerecord.SectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuesrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeacher chains the current query on the "teacher" edge.
func (tuesrq *TkUserExamScoreRecordQuery) QueryTeacher() *TeacherQuery {
	query := &TeacherQuery{config: tuesrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuesrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuesrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, selector),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserexamscorerecord.TeacherTable, tkuserexamscorerecord.TeacherColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuesrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (tuesrq *TkUserExamScoreRecordQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: tuesrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuesrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuesrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkuserexamscorerecord.UserTable, tkuserexamscorerecord.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuesrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserExamDetails chains the current query on the "user_exam_details" edge.
func (tuesrq *TkUserExamScoreRecordQuery) QueryUserExamDetails() *TkUserSimulationTeacherMarkQuery {
	query := &TkUserSimulationTeacherMarkQuery{config: tuesrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuesrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuesrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID, selector),
			sqlgraph.To(tkusersimulationteachermark.Table, tkusersimulationteachermark.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkuserexamscorerecord.UserExamDetailsTable, tkuserexamscorerecord.UserExamDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuesrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TkUserExamScoreRecord entity from the query.
// Returns a *NotFoundError when no TkUserExamScoreRecord was found.
func (tuesrq *TkUserExamScoreRecordQuery) First(ctx context.Context) (*TkUserExamScoreRecord, error) {
	nodes, err := tuesrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tkuserexamscorerecord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tuesrq *TkUserExamScoreRecordQuery) FirstX(ctx context.Context) *TkUserExamScoreRecord {
	node, err := tuesrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TkUserExamScoreRecord ID from the query.
// Returns a *NotFoundError when no TkUserExamScoreRecord ID was found.
func (tuesrq *TkUserExamScoreRecordQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tuesrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tkuserexamscorerecord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tuesrq *TkUserExamScoreRecordQuery) FirstIDX(ctx context.Context) int {
	id, err := tuesrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TkUserExamScoreRecord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TkUserExamScoreRecord entity is not found.
// Returns a *NotFoundError when no TkUserExamScoreRecord entities are found.
func (tuesrq *TkUserExamScoreRecordQuery) Only(ctx context.Context) (*TkUserExamScoreRecord, error) {
	nodes, err := tuesrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tkuserexamscorerecord.Label}
	default:
		return nil, &NotSingularError{tkuserexamscorerecord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tuesrq *TkUserExamScoreRecordQuery) OnlyX(ctx context.Context) *TkUserExamScoreRecord {
	node, err := tuesrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TkUserExamScoreRecord ID in the query.
// Returns a *NotSingularError when exactly one TkUserExamScoreRecord ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tuesrq *TkUserExamScoreRecordQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tuesrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tkuserexamscorerecord.Label}
	default:
		err = &NotSingularError{tkuserexamscorerecord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tuesrq *TkUserExamScoreRecordQuery) OnlyIDX(ctx context.Context) int {
	id, err := tuesrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TkUserExamScoreRecords.
func (tuesrq *TkUserExamScoreRecordQuery) All(ctx context.Context) ([]*TkUserExamScoreRecord, error) {
	if err := tuesrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tuesrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tuesrq *TkUserExamScoreRecordQuery) AllX(ctx context.Context) []*TkUserExamScoreRecord {
	nodes, err := tuesrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TkUserExamScoreRecord IDs.
func (tuesrq *TkUserExamScoreRecordQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tuesrq.Select(tkuserexamscorerecord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tuesrq *TkUserExamScoreRecordQuery) IDsX(ctx context.Context) []int {
	ids, err := tuesrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tuesrq *TkUserExamScoreRecordQuery) Count(ctx context.Context) (int, error) {
	if err := tuesrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tuesrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tuesrq *TkUserExamScoreRecordQuery) CountX(ctx context.Context) int {
	count, err := tuesrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tuesrq *TkUserExamScoreRecordQuery) Exist(ctx context.Context) (bool, error) {
	if err := tuesrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tuesrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tuesrq *TkUserExamScoreRecordQuery) ExistX(ctx context.Context) bool {
	exist, err := tuesrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TkUserExamScoreRecordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tuesrq *TkUserExamScoreRecordQuery) Clone() *TkUserExamScoreRecordQuery {
	if tuesrq == nil {
		return nil
	}
	return &TkUserExamScoreRecordQuery{
		config:              tuesrq.config,
		limit:               tuesrq.limit,
		offset:              tuesrq.offset,
		order:               append([]OrderFunc{}, tuesrq.order...),
		predicates:          append([]predicate.TkUserExamScoreRecord{}, tuesrq.predicates...),
		withExamPaper:       tuesrq.withExamPaper.Clone(),
		withSection:         tuesrq.withSection.Clone(),
		withTeacher:         tuesrq.withTeacher.Clone(),
		withUser:            tuesrq.withUser.Clone(),
		withUserExamDetails: tuesrq.withUserExamDetails.Clone(),
		// clone intermediate query.
		sql:  tuesrq.sql.Clone(),
		path: tuesrq.path,
	}
}

// WithExamPaper tells the query-builder to eager-load the nodes that are connected to
// the "exam_paper" edge. The optional arguments are used to configure the query builder of the edge.
func (tuesrq *TkUserExamScoreRecordQuery) WithExamPaper(opts ...func(*TkExamPaperQuery)) *TkUserExamScoreRecordQuery {
	query := &TkExamPaperQuery{config: tuesrq.config}
	for _, opt := range opts {
		opt(query)
	}
	tuesrq.withExamPaper = query
	return tuesrq
}

// WithSection tells the query-builder to eager-load the nodes that are connected to
// the "section" edge. The optional arguments are used to configure the query builder of the edge.
func (tuesrq *TkUserExamScoreRecordQuery) WithSection(opts ...func(*TkSectionQuery)) *TkUserExamScoreRecordQuery {
	query := &TkSectionQuery{config: tuesrq.config}
	for _, opt := range opts {
		opt(query)
	}
	tuesrq.withSection = query
	return tuesrq
}

// WithTeacher tells the query-builder to eager-load the nodes that are connected to
// the "teacher" edge. The optional arguments are used to configure the query builder of the edge.
func (tuesrq *TkUserExamScoreRecordQuery) WithTeacher(opts ...func(*TeacherQuery)) *TkUserExamScoreRecordQuery {
	query := &TeacherQuery{config: tuesrq.config}
	for _, opt := range opts {
		opt(query)
	}
	tuesrq.withTeacher = query
	return tuesrq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (tuesrq *TkUserExamScoreRecordQuery) WithUser(opts ...func(*UserQuery)) *TkUserExamScoreRecordQuery {
	query := &UserQuery{config: tuesrq.config}
	for _, opt := range opts {
		opt(query)
	}
	tuesrq.withUser = query
	return tuesrq
}

// WithUserExamDetails tells the query-builder to eager-load the nodes that are connected to
// the "user_exam_details" edge. The optional arguments are used to configure the query builder of the edge.
func (tuesrq *TkUserExamScoreRecordQuery) WithUserExamDetails(opts ...func(*TkUserSimulationTeacherMarkQuery)) *TkUserExamScoreRecordQuery {
	query := &TkUserSimulationTeacherMarkQuery{config: tuesrq.config}
	for _, opt := range opts {
		opt(query)
	}
	tuesrq.withUserExamDetails = query
	return tuesrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TkUserExamScoreRecord.Query().
//		GroupBy(tkuserexamscorerecord.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tuesrq *TkUserExamScoreRecordQuery) GroupBy(field string, fields ...string) *TkUserExamScoreRecordGroupBy {
	group := &TkUserExamScoreRecordGroupBy{config: tuesrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tuesrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tuesrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.TkUserExamScoreRecord.Query().
//		Select(tkuserexamscorerecord.FieldUUID).
//		Scan(ctx, &v)
//
func (tuesrq *TkUserExamScoreRecordQuery) Select(field string, fields ...string) *TkUserExamScoreRecordSelect {
	tuesrq.fields = append([]string{field}, fields...)
	return &TkUserExamScoreRecordSelect{TkUserExamScoreRecordQuery: tuesrq}
}

func (tuesrq *TkUserExamScoreRecordQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tuesrq.fields {
		if !tkuserexamscorerecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tuesrq.path != nil {
		prev, err := tuesrq.path(ctx)
		if err != nil {
			return err
		}
		tuesrq.sql = prev
	}
	return nil
}

func (tuesrq *TkUserExamScoreRecordQuery) sqlAll(ctx context.Context) ([]*TkUserExamScoreRecord, error) {
	var (
		nodes       = []*TkUserExamScoreRecord{}
		_spec       = tuesrq.querySpec()
		loadedTypes = [5]bool{
			tuesrq.withExamPaper != nil,
			tuesrq.withSection != nil,
			tuesrq.withTeacher != nil,
			tuesrq.withUser != nil,
			tuesrq.withUserExamDetails != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TkUserExamScoreRecord{config: tuesrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tuesrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tuesrq.withExamPaper; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkUserExamScoreRecord)
		for i := range nodes {
			fk := nodes[i].ExamPaperID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tkexampaper.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "exam_paper_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ExamPaper = n
			}
		}
	}

	if query := tuesrq.withSection; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkUserExamScoreRecord)
		for i := range nodes {
			fk := nodes[i].SectionID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tksection.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "section_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Section = n
			}
		}
	}

	if query := tuesrq.withTeacher; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkUserExamScoreRecord)
		for i := range nodes {
			fk := nodes[i].OperationTeacherID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(teacher.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "operation_teacher_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Teacher = n
			}
		}
	}

	if query := tuesrq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkUserExamScoreRecord)
		for i := range nodes {
			fk := nodes[i].UserID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	if query := tuesrq.withUserExamDetails; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkUserExamScoreRecord)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserExamDetails = []*TkUserSimulationTeacherMark{}
		}
		query.Where(predicate.TkUserSimulationTeacherMark(func(s *sql.Selector) {
			s.Where(sql.InValues(tkuserexamscorerecord.UserExamDetailsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserExamRecordID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_exam_record_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserExamDetails = append(node.Edges.UserExamDetails, n)
		}
	}

	return nodes, nil
}

func (tuesrq *TkUserExamScoreRecordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tuesrq.querySpec()
	return sqlgraph.CountNodes(ctx, tuesrq.driver, _spec)
}

func (tuesrq *TkUserExamScoreRecordQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tuesrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tuesrq *TkUserExamScoreRecordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserexamscorerecord.Table,
			Columns: tkuserexamscorerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserexamscorerecord.FieldID,
			},
		},
		From:   tuesrq.sql,
		Unique: true,
	}
	if unique := tuesrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tuesrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkuserexamscorerecord.FieldID)
		for i := range fields {
			if fields[i] != tkuserexamscorerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tuesrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tuesrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tuesrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tuesrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tuesrq *TkUserExamScoreRecordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tuesrq.driver.Dialect())
	t1 := builder.Table(tkuserexamscorerecord.Table)
	selector := builder.Select(t1.Columns(tkuserexamscorerecord.Columns...)...).From(t1)
	if tuesrq.sql != nil {
		selector = tuesrq.sql
		selector.Select(selector.Columns(tkuserexamscorerecord.Columns...)...)
	}
	for _, p := range tuesrq.predicates {
		p(selector)
	}
	for _, p := range tuesrq.order {
		p(selector)
	}
	if offset := tuesrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tuesrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TkUserExamScoreRecordGroupBy is the group-by builder for TkUserExamScoreRecord entities.
type TkUserExamScoreRecordGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Aggregate(fns ...AggregateFunc) *TkUserExamScoreRecordGroupBy {
	tuesrgb.fns = append(tuesrgb.fns, fns...)
	return tuesrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tuesrgb.path(ctx)
	if err != nil {
		return err
	}
	tuesrgb.sql = query
	return tuesrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tuesrgb *TkUserExamScoreRecordGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tuesrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tuesrgb.fields) > 1 {
		return nil, errors.New("ent: TkUserExamScoreRecordGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tuesrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tuesrgb *TkUserExamScoreRecordGroupBy) StringsX(ctx context.Context) []string {
	v, err := tuesrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tuesrgb *TkUserExamScoreRecordGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tuesrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkuserexamscorerecord.Label}
	default:
		err = fmt.Errorf("ent: TkUserExamScoreRecordGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tuesrgb *TkUserExamScoreRecordGroupBy) StringX(ctx context.Context) string {
	v, err := tuesrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tuesrgb.fields) > 1 {
		return nil, errors.New("ent: TkUserExamScoreRecordGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tuesrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tuesrgb *TkUserExamScoreRecordGroupBy) IntsX(ctx context.Context) []int {
	v, err := tuesrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tuesrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkuserexamscorerecord.Label}
	default:
		err = fmt.Errorf("ent: TkUserExamScoreRecordGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tuesrgb *TkUserExamScoreRecordGroupBy) IntX(ctx context.Context) int {
	v, err := tuesrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tuesrgb.fields) > 1 {
		return nil, errors.New("ent: TkUserExamScoreRecordGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tuesrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tuesrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tuesrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkuserexamscorerecord.Label}
	default:
		err = fmt.Errorf("ent: TkUserExamScoreRecordGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tuesrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tuesrgb.fields) > 1 {
		return nil, errors.New("ent: TkUserExamScoreRecordGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tuesrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tuesrgb *TkUserExamScoreRecordGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tuesrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tuesrgb *TkUserExamScoreRecordGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tuesrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkuserexamscorerecord.Label}
	default:
		err = fmt.Errorf("ent: TkUserExamScoreRecordGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tuesrgb *TkUserExamScoreRecordGroupBy) BoolX(ctx context.Context) bool {
	v, err := tuesrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tuesrgb *TkUserExamScoreRecordGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tuesrgb.fields {
		if !tkuserexamscorerecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tuesrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tuesrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tuesrgb *TkUserExamScoreRecordGroupBy) sqlQuery() *sql.Selector {
	selector := tuesrgb.sql
	columns := make([]string, 0, len(tuesrgb.fields)+len(tuesrgb.fns))
	columns = append(columns, tuesrgb.fields...)
	for _, fn := range tuesrgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(tuesrgb.fields...)
}

// TkUserExamScoreRecordSelect is the builder for selecting fields of TkUserExamScoreRecord entities.
type TkUserExamScoreRecordSelect struct {
	*TkUserExamScoreRecordQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tuesrs *TkUserExamScoreRecordSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tuesrs.prepareQuery(ctx); err != nil {
		return err
	}
	tuesrs.sql = tuesrs.TkUserExamScoreRecordQuery.sqlQuery(ctx)
	return tuesrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tuesrs *TkUserExamScoreRecordSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tuesrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tuesrs *TkUserExamScoreRecordSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tuesrs.fields) > 1 {
		return nil, errors.New("ent: TkUserExamScoreRecordSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tuesrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tuesrs *TkUserExamScoreRecordSelect) StringsX(ctx context.Context) []string {
	v, err := tuesrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tuesrs *TkUserExamScoreRecordSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tuesrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkuserexamscorerecord.Label}
	default:
		err = fmt.Errorf("ent: TkUserExamScoreRecordSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tuesrs *TkUserExamScoreRecordSelect) StringX(ctx context.Context) string {
	v, err := tuesrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tuesrs *TkUserExamScoreRecordSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tuesrs.fields) > 1 {
		return nil, errors.New("ent: TkUserExamScoreRecordSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tuesrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tuesrs *TkUserExamScoreRecordSelect) IntsX(ctx context.Context) []int {
	v, err := tuesrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tuesrs *TkUserExamScoreRecordSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tuesrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkuserexamscorerecord.Label}
	default:
		err = fmt.Errorf("ent: TkUserExamScoreRecordSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tuesrs *TkUserExamScoreRecordSelect) IntX(ctx context.Context) int {
	v, err := tuesrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tuesrs *TkUserExamScoreRecordSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tuesrs.fields) > 1 {
		return nil, errors.New("ent: TkUserExamScoreRecordSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tuesrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tuesrs *TkUserExamScoreRecordSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tuesrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tuesrs *TkUserExamScoreRecordSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tuesrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkuserexamscorerecord.Label}
	default:
		err = fmt.Errorf("ent: TkUserExamScoreRecordSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tuesrs *TkUserExamScoreRecordSelect) Float64X(ctx context.Context) float64 {
	v, err := tuesrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tuesrs *TkUserExamScoreRecordSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tuesrs.fields) > 1 {
		return nil, errors.New("ent: TkUserExamScoreRecordSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tuesrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tuesrs *TkUserExamScoreRecordSelect) BoolsX(ctx context.Context) []bool {
	v, err := tuesrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tuesrs *TkUserExamScoreRecordSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tuesrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkuserexamscorerecord.Label}
	default:
		err = fmt.Errorf("ent: TkUserExamScoreRecordSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tuesrs *TkUserExamScoreRecordSelect) BoolX(ctx context.Context) bool {
	v, err := tuesrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tuesrs *TkUserExamScoreRecordSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tuesrs.sqlQuery().Query()
	if err := tuesrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tuesrs *TkUserExamScoreRecordSelect) sqlQuery() sql.Querier {
	selector := tuesrs.sql
	selector.Select(selector.Columns(tuesrs.fields...)...)
	return selector
}

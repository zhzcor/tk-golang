// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/teacher"
	"gserver/internal/store/ent/tkexampaper"
	"gserver/internal/store/ent/tksection"
	"gserver/internal/store/ent/tkuserexamscorerecord"
	"gserver/internal/store/ent/tkusersimulationteachermark"
	"gserver/internal/store/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserExamScoreRecordUpdate is the builder for updating TkUserExamScoreRecord entities.
type TkUserExamScoreRecordUpdate struct {
	config
	hooks    []Hook
	mutation *TkUserExamScoreRecordMutation
}

// Where adds a new predicate for the TkUserExamScoreRecordUpdate builder.
func (tuesru *TkUserExamScoreRecordUpdate) Where(ps ...predicate.TkUserExamScoreRecord) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.predicates = append(tuesru.mutation.predicates, ps...)
	return tuesru
}

// SetUUID sets the "uuid" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetUUID(s string) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.SetUUID(s)
	return tuesru
}

// SetUpdatedAt sets the "updated_at" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetUpdatedAt(t time.Time) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.SetUpdatedAt(t)
	return tuesru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuesru *TkUserExamScoreRecordUpdate) ClearUpdatedAt() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearUpdatedAt()
	return tuesru
}

// SetDeletedAt sets the "deleted_at" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetDeletedAt(t time.Time) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.SetDeletedAt(t)
	return tuesru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableDeletedAt(t *time.Time) *TkUserExamScoreRecordUpdate {
	if t != nil {
		tuesru.SetDeletedAt(*t)
	}
	return tuesru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuesru *TkUserExamScoreRecordUpdate) ClearDeletedAt() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearDeletedAt()
	return tuesru
}

// SetSubjectiveQuestionScore sets the "subjective_question_score" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetSubjectiveQuestionScore(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetSubjectiveQuestionScore()
	tuesru.mutation.SetSubjectiveQuestionScore(u)
	return tuesru
}

// SetNillableSubjectiveQuestionScore sets the "subjective_question_score" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableSubjectiveQuestionScore(u *uint8) *TkUserExamScoreRecordUpdate {
	if u != nil {
		tuesru.SetSubjectiveQuestionScore(*u)
	}
	return tuesru
}

// AddSubjectiveQuestionScore adds u to the "subjective_question_score" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddSubjectiveQuestionScore(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddSubjectiveQuestionScore(u)
	return tuesru
}

// SetObjectiveQuestionScore sets the "objective_question_score" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetObjectiveQuestionScore(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetObjectiveQuestionScore()
	tuesru.mutation.SetObjectiveQuestionScore(u)
	return tuesru
}

// SetNillableObjectiveQuestionScore sets the "objective_question_score" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableObjectiveQuestionScore(u *uint8) *TkUserExamScoreRecordUpdate {
	if u != nil {
		tuesru.SetObjectiveQuestionScore(*u)
	}
	return tuesru
}

// AddObjectiveQuestionScore adds u to the "objective_question_score" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddObjectiveQuestionScore(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddObjectiveQuestionScore(u)
	return tuesru
}

// SetTotalScore sets the "total_score" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetTotalScore(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetTotalScore()
	tuesru.mutation.SetTotalScore(u)
	return tuesru
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableTotalScore(u *uint8) *TkUserExamScoreRecordUpdate {
	if u != nil {
		tuesru.SetTotalScore(*u)
	}
	return tuesru
}

// AddTotalScore adds u to the "total_score" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddTotalScore(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddTotalScore(u)
	return tuesru
}

// SetDuration sets the "duration" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetDuration(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetDuration()
	tuesru.mutation.SetDuration(i)
	return tuesru
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableDuration(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetDuration(*i)
	}
	return tuesru
}

// AddDuration adds i to the "duration" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddDuration(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddDuration(i)
	return tuesru
}

// SetRightCount sets the "right_count" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetRightCount(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetRightCount()
	tuesru.mutation.SetRightCount(i)
	return tuesru
}

// SetNillableRightCount sets the "right_count" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableRightCount(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetRightCount(*i)
	}
	return tuesru
}

// AddRightCount adds i to the "right_count" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddRightCount(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddRightCount(i)
	return tuesru
}

// SetWrongCount sets the "wrong_count" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetWrongCount(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetWrongCount()
	tuesru.mutation.SetWrongCount(i)
	return tuesru
}

// SetNillableWrongCount sets the "wrong_count" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableWrongCount(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetWrongCount(*i)
	}
	return tuesru
}

// AddWrongCount adds i to the "wrong_count" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddWrongCount(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddWrongCount(i)
	return tuesru
}

// SetTotalCount sets the "total_count" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetTotalCount(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetTotalCount()
	tuesru.mutation.SetTotalCount(i)
	return tuesru
}

// SetNillableTotalCount sets the "total_count" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableTotalCount(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetTotalCount(*i)
	}
	return tuesru
}

// AddTotalCount adds i to the "total_count" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddTotalCount(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddTotalCount(i)
	return tuesru
}

// SetNoAnswerCount sets the "no_answer_count" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetNoAnswerCount(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetNoAnswerCount()
	tuesru.mutation.SetNoAnswerCount(i)
	return tuesru
}

// SetNillableNoAnswerCount sets the "no_answer_count" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableNoAnswerCount(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetNoAnswerCount(*i)
	}
	return tuesru
}

// AddNoAnswerCount adds i to the "no_answer_count" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddNoAnswerCount(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddNoAnswerCount(i)
	return tuesru
}

// SetRank sets the "rank" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetRank(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetRank()
	tuesru.mutation.SetRank(i)
	return tuesru
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableRank(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetRank(*i)
	}
	return tuesru
}

// AddRank adds i to the "rank" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddRank(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddRank(i)
	return tuesru
}

// SetStatus sets the "status" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetStatus(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetStatus()
	tuesru.mutation.SetStatus(u)
	return tuesru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableStatus(u *uint8) *TkUserExamScoreRecordUpdate {
	if u != nil {
		tuesru.SetStatus(*u)
	}
	return tuesru
}

// AddStatus adds u to the "status" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddStatus(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddStatus(u)
	return tuesru
}

// SetOrderStatus sets the "order_status" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetOrderStatus(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetOrderStatus()
	tuesru.mutation.SetOrderStatus(u)
	return tuesru
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableOrderStatus(u *uint8) *TkUserExamScoreRecordUpdate {
	if u != nil {
		tuesru.SetOrderStatus(*u)
	}
	return tuesru
}

// AddOrderStatus adds u to the "order_status" field.
func (tuesru *TkUserExamScoreRecordUpdate) AddOrderStatus(u uint8) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddOrderStatus(u)
	return tuesru
}

// SetExamPaperID sets the "exam_paper_id" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetExamPaperID(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetExamPaperID()
	tuesru.mutation.SetExamPaperID(i)
	return tuesru
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableExamPaperID(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetExamPaperID(*i)
	}
	return tuesru
}

// ClearExamPaperID clears the value of the "exam_paper_id" field.
func (tuesru *TkUserExamScoreRecordUpdate) ClearExamPaperID() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearExamPaperID()
	return tuesru
}

// SetSectionID sets the "section_id" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetSectionID(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetSectionID()
	tuesru.mutation.SetSectionID(i)
	return tuesru
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableSectionID(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetSectionID(*i)
	}
	return tuesru
}

// ClearSectionID clears the value of the "section_id" field.
func (tuesru *TkUserExamScoreRecordUpdate) ClearSectionID() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearSectionID()
	return tuesru
}

// SetUserID sets the "user_id" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetUserID(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetUserID()
	tuesru.mutation.SetUserID(i)
	return tuesru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableUserID(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetUserID(*i)
	}
	return tuesru
}

// ClearUserID clears the value of the "user_id" field.
func (tuesru *TkUserExamScoreRecordUpdate) ClearUserID() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearUserID()
	return tuesru
}

// SetOperationTeacherID sets the "operation_teacher_id" field.
func (tuesru *TkUserExamScoreRecordUpdate) SetOperationTeacherID(i int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ResetOperationTeacherID()
	tuesru.mutation.SetOperationTeacherID(i)
	return tuesru
}

// SetNillableOperationTeacherID sets the "operation_teacher_id" field if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableOperationTeacherID(i *int) *TkUserExamScoreRecordUpdate {
	if i != nil {
		tuesru.SetOperationTeacherID(*i)
	}
	return tuesru
}

// ClearOperationTeacherID clears the value of the "operation_teacher_id" field.
func (tuesru *TkUserExamScoreRecordUpdate) ClearOperationTeacherID() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearOperationTeacherID()
	return tuesru
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (tuesru *TkUserExamScoreRecordUpdate) SetExamPaper(t *TkExamPaper) *TkUserExamScoreRecordUpdate {
	return tuesru.SetExamPaperID(t.ID)
}

// SetSection sets the "section" edge to the TkSection entity.
func (tuesru *TkUserExamScoreRecordUpdate) SetSection(t *TkSection) *TkUserExamScoreRecordUpdate {
	return tuesru.SetSectionID(t.ID)
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (tuesru *TkUserExamScoreRecordUpdate) SetTeacherID(id int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.SetTeacherID(id)
	return tuesru
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (tuesru *TkUserExamScoreRecordUpdate) SetNillableTeacherID(id *int) *TkUserExamScoreRecordUpdate {
	if id != nil {
		tuesru = tuesru.SetTeacherID(*id)
	}
	return tuesru
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (tuesru *TkUserExamScoreRecordUpdate) SetTeacher(t *Teacher) *TkUserExamScoreRecordUpdate {
	return tuesru.SetTeacherID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuesru *TkUserExamScoreRecordUpdate) SetUser(u *User) *TkUserExamScoreRecordUpdate {
	return tuesru.SetUserID(u.ID)
}

// AddUserExamDetailIDs adds the "user_exam_details" edge to the TkUserSimulationTeacherMark entity by IDs.
func (tuesru *TkUserExamScoreRecordUpdate) AddUserExamDetailIDs(ids ...int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.AddUserExamDetailIDs(ids...)
	return tuesru
}

// AddUserExamDetails adds the "user_exam_details" edges to the TkUserSimulationTeacherMark entity.
func (tuesru *TkUserExamScoreRecordUpdate) AddUserExamDetails(t ...*TkUserSimulationTeacherMark) *TkUserExamScoreRecordUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuesru.AddUserExamDetailIDs(ids...)
}

// Mutation returns the TkUserExamScoreRecordMutation object of the builder.
func (tuesru *TkUserExamScoreRecordUpdate) Mutation() *TkUserExamScoreRecordMutation {
	return tuesru.mutation
}

// ClearExamPaper clears the "exam_paper" edge to the TkExamPaper entity.
func (tuesru *TkUserExamScoreRecordUpdate) ClearExamPaper() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearExamPaper()
	return tuesru
}

// ClearSection clears the "section" edge to the TkSection entity.
func (tuesru *TkUserExamScoreRecordUpdate) ClearSection() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearSection()
	return tuesru
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (tuesru *TkUserExamScoreRecordUpdate) ClearTeacher() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearTeacher()
	return tuesru
}

// ClearUser clears the "user" edge to the User entity.
func (tuesru *TkUserExamScoreRecordUpdate) ClearUser() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearUser()
	return tuesru
}

// ClearUserExamDetails clears all "user_exam_details" edges to the TkUserSimulationTeacherMark entity.
func (tuesru *TkUserExamScoreRecordUpdate) ClearUserExamDetails() *TkUserExamScoreRecordUpdate {
	tuesru.mutation.ClearUserExamDetails()
	return tuesru
}

// RemoveUserExamDetailIDs removes the "user_exam_details" edge to TkUserSimulationTeacherMark entities by IDs.
func (tuesru *TkUserExamScoreRecordUpdate) RemoveUserExamDetailIDs(ids ...int) *TkUserExamScoreRecordUpdate {
	tuesru.mutation.RemoveUserExamDetailIDs(ids...)
	return tuesru
}

// RemoveUserExamDetails removes "user_exam_details" edges to TkUserSimulationTeacherMark entities.
func (tuesru *TkUserExamScoreRecordUpdate) RemoveUserExamDetails(t ...*TkUserSimulationTeacherMark) *TkUserExamScoreRecordUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuesru.RemoveUserExamDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuesru *TkUserExamScoreRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tuesru.defaults()
	if len(tuesru.hooks) == 0 {
		affected, err = tuesru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserExamScoreRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuesru.mutation = mutation
			affected, err = tuesru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tuesru.hooks) - 1; i >= 0; i-- {
			mut = tuesru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuesru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuesru *TkUserExamScoreRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := tuesru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuesru *TkUserExamScoreRecordUpdate) Exec(ctx context.Context) error {
	_, err := tuesru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuesru *TkUserExamScoreRecordUpdate) ExecX(ctx context.Context) {
	if err := tuesru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuesru *TkUserExamScoreRecordUpdate) defaults() {
	if _, ok := tuesru.mutation.UpdatedAt(); !ok && !tuesru.mutation.UpdatedAtCleared() {
		v := tkuserexamscorerecord.UpdateDefaultUpdatedAt()
		tuesru.mutation.SetUpdatedAt(v)
	}
}

func (tuesru *TkUserExamScoreRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserexamscorerecord.Table,
			Columns: tkuserexamscorerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserexamscorerecord.FieldID,
			},
		},
	}
	if ps := tuesru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuesru.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserexamscorerecord.FieldUUID,
		})
	}
	if tuesru.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserexamscorerecord.FieldCreatedAt,
		})
	}
	if value, ok := tuesru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserexamscorerecord.FieldUpdatedAt,
		})
	}
	if tuesru.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserexamscorerecord.FieldUpdatedAt,
		})
	}
	if value, ok := tuesru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserexamscorerecord.FieldDeletedAt,
		})
	}
	if tuesru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserexamscorerecord.FieldDeletedAt,
		})
	}
	if value, ok := tuesru.mutation.SubjectiveQuestionScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldSubjectiveQuestionScore,
		})
	}
	if value, ok := tuesru.mutation.AddedSubjectiveQuestionScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldSubjectiveQuestionScore,
		})
	}
	if value, ok := tuesru.mutation.ObjectiveQuestionScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldObjectiveQuestionScore,
		})
	}
	if value, ok := tuesru.mutation.AddedObjectiveQuestionScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldObjectiveQuestionScore,
		})
	}
	if value, ok := tuesru.mutation.TotalScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldTotalScore,
		})
	}
	if value, ok := tuesru.mutation.AddedTotalScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldTotalScore,
		})
	}
	if value, ok := tuesru.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldDuration,
		})
	}
	if value, ok := tuesru.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldDuration,
		})
	}
	if value, ok := tuesru.mutation.RightCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldRightCount,
		})
	}
	if value, ok := tuesru.mutation.AddedRightCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldRightCount,
		})
	}
	if value, ok := tuesru.mutation.WrongCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldWrongCount,
		})
	}
	if value, ok := tuesru.mutation.AddedWrongCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldWrongCount,
		})
	}
	if value, ok := tuesru.mutation.TotalCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldTotalCount,
		})
	}
	if value, ok := tuesru.mutation.AddedTotalCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldTotalCount,
		})
	}
	if value, ok := tuesru.mutation.NoAnswerCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldNoAnswerCount,
		})
	}
	if value, ok := tuesru.mutation.AddedNoAnswerCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldNoAnswerCount,
		})
	}
	if value, ok := tuesru.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldRank,
		})
	}
	if value, ok := tuesru.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldRank,
		})
	}
	if value, ok := tuesru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldStatus,
		})
	}
	if value, ok := tuesru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldStatus,
		})
	}
	if value, ok := tuesru.mutation.OrderStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldOrderStatus,
		})
	}
	if value, ok := tuesru.mutation.AddedOrderStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldOrderStatus,
		})
	}
	if tuesru.mutation.ExamPaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.ExamPaperTable,
			Columns: []string{tkuserexamscorerecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesru.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.ExamPaperTable,
			Columns: []string{tkuserexamscorerecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuesru.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.SectionTable,
			Columns: []string{tkuserexamscorerecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesru.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.SectionTable,
			Columns: []string{tkuserexamscorerecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuesru.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.TeacherTable,
			Columns: []string{tkuserexamscorerecord.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesru.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.TeacherTable,
			Columns: []string{tkuserexamscorerecord.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuesru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.UserTable,
			Columns: []string{tkuserexamscorerecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.UserTable,
			Columns: []string{tkuserexamscorerecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuesru.mutation.UserExamDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkuserexamscorerecord.UserExamDetailsTable,
			Columns: []string{tkuserexamscorerecord.UserExamDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkusersimulationteachermark.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesru.mutation.RemovedUserExamDetailsIDs(); len(nodes) > 0 && !tuesru.mutation.UserExamDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkuserexamscorerecord.UserExamDetailsTable,
			Columns: []string{tkuserexamscorerecord.UserExamDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkusersimulationteachermark.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesru.mutation.UserExamDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkuserexamscorerecord.UserExamDetailsTable,
			Columns: []string{tkuserexamscorerecord.UserExamDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkusersimulationteachermark.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tuesru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserexamscorerecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkUserExamScoreRecordUpdateOne is the builder for updating a single TkUserExamScoreRecord entity.
type TkUserExamScoreRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkUserExamScoreRecordMutation
}

// SetUUID sets the "uuid" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetUUID(s string) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.SetUUID(s)
	return tuesruo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetUpdatedAt(t time.Time) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.SetUpdatedAt(t)
	return tuesruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearUpdatedAt() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearUpdatedAt()
	return tuesruo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetDeletedAt(t time.Time) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.SetDeletedAt(t)
	return tuesruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *TkUserExamScoreRecordUpdateOne {
	if t != nil {
		tuesruo.SetDeletedAt(*t)
	}
	return tuesruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearDeletedAt() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearDeletedAt()
	return tuesruo
}

// SetSubjectiveQuestionScore sets the "subjective_question_score" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetSubjectiveQuestionScore(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetSubjectiveQuestionScore()
	tuesruo.mutation.SetSubjectiveQuestionScore(u)
	return tuesruo
}

// SetNillableSubjectiveQuestionScore sets the "subjective_question_score" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableSubjectiveQuestionScore(u *uint8) *TkUserExamScoreRecordUpdateOne {
	if u != nil {
		tuesruo.SetSubjectiveQuestionScore(*u)
	}
	return tuesruo
}

// AddSubjectiveQuestionScore adds u to the "subjective_question_score" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddSubjectiveQuestionScore(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddSubjectiveQuestionScore(u)
	return tuesruo
}

// SetObjectiveQuestionScore sets the "objective_question_score" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetObjectiveQuestionScore(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetObjectiveQuestionScore()
	tuesruo.mutation.SetObjectiveQuestionScore(u)
	return tuesruo
}

// SetNillableObjectiveQuestionScore sets the "objective_question_score" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableObjectiveQuestionScore(u *uint8) *TkUserExamScoreRecordUpdateOne {
	if u != nil {
		tuesruo.SetObjectiveQuestionScore(*u)
	}
	return tuesruo
}

// AddObjectiveQuestionScore adds u to the "objective_question_score" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddObjectiveQuestionScore(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddObjectiveQuestionScore(u)
	return tuesruo
}

// SetTotalScore sets the "total_score" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetTotalScore(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetTotalScore()
	tuesruo.mutation.SetTotalScore(u)
	return tuesruo
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableTotalScore(u *uint8) *TkUserExamScoreRecordUpdateOne {
	if u != nil {
		tuesruo.SetTotalScore(*u)
	}
	return tuesruo
}

// AddTotalScore adds u to the "total_score" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddTotalScore(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddTotalScore(u)
	return tuesruo
}

// SetDuration sets the "duration" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetDuration(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetDuration()
	tuesruo.mutation.SetDuration(i)
	return tuesruo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableDuration(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetDuration(*i)
	}
	return tuesruo
}

// AddDuration adds i to the "duration" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddDuration(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddDuration(i)
	return tuesruo
}

// SetRightCount sets the "right_count" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetRightCount(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetRightCount()
	tuesruo.mutation.SetRightCount(i)
	return tuesruo
}

// SetNillableRightCount sets the "right_count" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableRightCount(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetRightCount(*i)
	}
	return tuesruo
}

// AddRightCount adds i to the "right_count" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddRightCount(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddRightCount(i)
	return tuesruo
}

// SetWrongCount sets the "wrong_count" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetWrongCount(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetWrongCount()
	tuesruo.mutation.SetWrongCount(i)
	return tuesruo
}

// SetNillableWrongCount sets the "wrong_count" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableWrongCount(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetWrongCount(*i)
	}
	return tuesruo
}

// AddWrongCount adds i to the "wrong_count" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddWrongCount(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddWrongCount(i)
	return tuesruo
}

// SetTotalCount sets the "total_count" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetTotalCount(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetTotalCount()
	tuesruo.mutation.SetTotalCount(i)
	return tuesruo
}

// SetNillableTotalCount sets the "total_count" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableTotalCount(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetTotalCount(*i)
	}
	return tuesruo
}

// AddTotalCount adds i to the "total_count" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddTotalCount(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddTotalCount(i)
	return tuesruo
}

// SetNoAnswerCount sets the "no_answer_count" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNoAnswerCount(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetNoAnswerCount()
	tuesruo.mutation.SetNoAnswerCount(i)
	return tuesruo
}

// SetNillableNoAnswerCount sets the "no_answer_count" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableNoAnswerCount(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetNoAnswerCount(*i)
	}
	return tuesruo
}

// AddNoAnswerCount adds i to the "no_answer_count" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddNoAnswerCount(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddNoAnswerCount(i)
	return tuesruo
}

// SetRank sets the "rank" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetRank(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetRank()
	tuesruo.mutation.SetRank(i)
	return tuesruo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableRank(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetRank(*i)
	}
	return tuesruo
}

// AddRank adds i to the "rank" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddRank(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddRank(i)
	return tuesruo
}

// SetStatus sets the "status" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetStatus(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetStatus()
	tuesruo.mutation.SetStatus(u)
	return tuesruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableStatus(u *uint8) *TkUserExamScoreRecordUpdateOne {
	if u != nil {
		tuesruo.SetStatus(*u)
	}
	return tuesruo
}

// AddStatus adds u to the "status" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddStatus(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddStatus(u)
	return tuesruo
}

// SetOrderStatus sets the "order_status" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetOrderStatus(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetOrderStatus()
	tuesruo.mutation.SetOrderStatus(u)
	return tuesruo
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableOrderStatus(u *uint8) *TkUserExamScoreRecordUpdateOne {
	if u != nil {
		tuesruo.SetOrderStatus(*u)
	}
	return tuesruo
}

// AddOrderStatus adds u to the "order_status" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddOrderStatus(u uint8) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddOrderStatus(u)
	return tuesruo
}

// SetExamPaperID sets the "exam_paper_id" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetExamPaperID(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetExamPaperID()
	tuesruo.mutation.SetExamPaperID(i)
	return tuesruo
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableExamPaperID(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetExamPaperID(*i)
	}
	return tuesruo
}

// ClearExamPaperID clears the value of the "exam_paper_id" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearExamPaperID() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearExamPaperID()
	return tuesruo
}

// SetSectionID sets the "section_id" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetSectionID(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetSectionID()
	tuesruo.mutation.SetSectionID(i)
	return tuesruo
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableSectionID(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetSectionID(*i)
	}
	return tuesruo
}

// ClearSectionID clears the value of the "section_id" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearSectionID() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearSectionID()
	return tuesruo
}

// SetUserID sets the "user_id" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetUserID(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetUserID()
	tuesruo.mutation.SetUserID(i)
	return tuesruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableUserID(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetUserID(*i)
	}
	return tuesruo
}

// ClearUserID clears the value of the "user_id" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearUserID() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearUserID()
	return tuesruo
}

// SetOperationTeacherID sets the "operation_teacher_id" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetOperationTeacherID(i int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ResetOperationTeacherID()
	tuesruo.mutation.SetOperationTeacherID(i)
	return tuesruo
}

// SetNillableOperationTeacherID sets the "operation_teacher_id" field if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableOperationTeacherID(i *int) *TkUserExamScoreRecordUpdateOne {
	if i != nil {
		tuesruo.SetOperationTeacherID(*i)
	}
	return tuesruo
}

// ClearOperationTeacherID clears the value of the "operation_teacher_id" field.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearOperationTeacherID() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearOperationTeacherID()
	return tuesruo
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetExamPaper(t *TkExamPaper) *TkUserExamScoreRecordUpdateOne {
	return tuesruo.SetExamPaperID(t.ID)
}

// SetSection sets the "section" edge to the TkSection entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetSection(t *TkSection) *TkUserExamScoreRecordUpdateOne {
	return tuesruo.SetSectionID(t.ID)
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetTeacherID(id int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.SetTeacherID(id)
	return tuesruo
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetNillableTeacherID(id *int) *TkUserExamScoreRecordUpdateOne {
	if id != nil {
		tuesruo = tuesruo.SetTeacherID(*id)
	}
	return tuesruo
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetTeacher(t *Teacher) *TkUserExamScoreRecordUpdateOne {
	return tuesruo.SetTeacherID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SetUser(u *User) *TkUserExamScoreRecordUpdateOne {
	return tuesruo.SetUserID(u.ID)
}

// AddUserExamDetailIDs adds the "user_exam_details" edge to the TkUserSimulationTeacherMark entity by IDs.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddUserExamDetailIDs(ids ...int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.AddUserExamDetailIDs(ids...)
	return tuesruo
}

// AddUserExamDetails adds the "user_exam_details" edges to the TkUserSimulationTeacherMark entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) AddUserExamDetails(t ...*TkUserSimulationTeacherMark) *TkUserExamScoreRecordUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuesruo.AddUserExamDetailIDs(ids...)
}

// Mutation returns the TkUserExamScoreRecordMutation object of the builder.
func (tuesruo *TkUserExamScoreRecordUpdateOne) Mutation() *TkUserExamScoreRecordMutation {
	return tuesruo.mutation
}

// ClearExamPaper clears the "exam_paper" edge to the TkExamPaper entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearExamPaper() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearExamPaper()
	return tuesruo
}

// ClearSection clears the "section" edge to the TkSection entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearSection() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearSection()
	return tuesruo
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearTeacher() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearTeacher()
	return tuesruo
}

// ClearUser clears the "user" edge to the User entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearUser() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearUser()
	return tuesruo
}

// ClearUserExamDetails clears all "user_exam_details" edges to the TkUserSimulationTeacherMark entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ClearUserExamDetails() *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.ClearUserExamDetails()
	return tuesruo
}

// RemoveUserExamDetailIDs removes the "user_exam_details" edge to TkUserSimulationTeacherMark entities by IDs.
func (tuesruo *TkUserExamScoreRecordUpdateOne) RemoveUserExamDetailIDs(ids ...int) *TkUserExamScoreRecordUpdateOne {
	tuesruo.mutation.RemoveUserExamDetailIDs(ids...)
	return tuesruo
}

// RemoveUserExamDetails removes "user_exam_details" edges to TkUserSimulationTeacherMark entities.
func (tuesruo *TkUserExamScoreRecordUpdateOne) RemoveUserExamDetails(t ...*TkUserSimulationTeacherMark) *TkUserExamScoreRecordUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuesruo.RemoveUserExamDetailIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuesruo *TkUserExamScoreRecordUpdateOne) Select(field string, fields ...string) *TkUserExamScoreRecordUpdateOne {
	tuesruo.fields = append([]string{field}, fields...)
	return tuesruo
}

// Save executes the query and returns the updated TkUserExamScoreRecord entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) Save(ctx context.Context) (*TkUserExamScoreRecord, error) {
	var (
		err  error
		node *TkUserExamScoreRecord
	)
	tuesruo.defaults()
	if len(tuesruo.hooks) == 0 {
		node, err = tuesruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserExamScoreRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuesruo.mutation = mutation
			node, err = tuesruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuesruo.hooks) - 1; i >= 0; i-- {
			mut = tuesruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuesruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuesruo *TkUserExamScoreRecordUpdateOne) SaveX(ctx context.Context) *TkUserExamScoreRecord {
	node, err := tuesruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuesruo *TkUserExamScoreRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := tuesruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuesruo *TkUserExamScoreRecordUpdateOne) ExecX(ctx context.Context) {
	if err := tuesruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuesruo *TkUserExamScoreRecordUpdateOne) defaults() {
	if _, ok := tuesruo.mutation.UpdatedAt(); !ok && !tuesruo.mutation.UpdatedAtCleared() {
		v := tkuserexamscorerecord.UpdateDefaultUpdatedAt()
		tuesruo.mutation.SetUpdatedAt(v)
	}
}

func (tuesruo *TkUserExamScoreRecordUpdateOne) sqlSave(ctx context.Context) (_node *TkUserExamScoreRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserexamscorerecord.Table,
			Columns: tkuserexamscorerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserexamscorerecord.FieldID,
			},
		},
	}
	id, ok := tuesruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkUserExamScoreRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuesruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkuserexamscorerecord.FieldID)
		for _, f := range fields {
			if !tkuserexamscorerecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkuserexamscorerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuesruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuesruo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserexamscorerecord.FieldUUID,
		})
	}
	if tuesruo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserexamscorerecord.FieldCreatedAt,
		})
	}
	if value, ok := tuesruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserexamscorerecord.FieldUpdatedAt,
		})
	}
	if tuesruo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserexamscorerecord.FieldUpdatedAt,
		})
	}
	if value, ok := tuesruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserexamscorerecord.FieldDeletedAt,
		})
	}
	if tuesruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserexamscorerecord.FieldDeletedAt,
		})
	}
	if value, ok := tuesruo.mutation.SubjectiveQuestionScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldSubjectiveQuestionScore,
		})
	}
	if value, ok := tuesruo.mutation.AddedSubjectiveQuestionScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldSubjectiveQuestionScore,
		})
	}
	if value, ok := tuesruo.mutation.ObjectiveQuestionScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldObjectiveQuestionScore,
		})
	}
	if value, ok := tuesruo.mutation.AddedObjectiveQuestionScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldObjectiveQuestionScore,
		})
	}
	if value, ok := tuesruo.mutation.TotalScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldTotalScore,
		})
	}
	if value, ok := tuesruo.mutation.AddedTotalScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldTotalScore,
		})
	}
	if value, ok := tuesruo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldDuration,
		})
	}
	if value, ok := tuesruo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldDuration,
		})
	}
	if value, ok := tuesruo.mutation.RightCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldRightCount,
		})
	}
	if value, ok := tuesruo.mutation.AddedRightCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldRightCount,
		})
	}
	if value, ok := tuesruo.mutation.WrongCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldWrongCount,
		})
	}
	if value, ok := tuesruo.mutation.AddedWrongCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldWrongCount,
		})
	}
	if value, ok := tuesruo.mutation.TotalCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldTotalCount,
		})
	}
	if value, ok := tuesruo.mutation.AddedTotalCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldTotalCount,
		})
	}
	if value, ok := tuesruo.mutation.NoAnswerCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldNoAnswerCount,
		})
	}
	if value, ok := tuesruo.mutation.AddedNoAnswerCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldNoAnswerCount,
		})
	}
	if value, ok := tuesruo.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldRank,
		})
	}
	if value, ok := tuesruo.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserexamscorerecord.FieldRank,
		})
	}
	if value, ok := tuesruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldStatus,
		})
	}
	if value, ok := tuesruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldStatus,
		})
	}
	if value, ok := tuesruo.mutation.OrderStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldOrderStatus,
		})
	}
	if value, ok := tuesruo.mutation.AddedOrderStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserexamscorerecord.FieldOrderStatus,
		})
	}
	if tuesruo.mutation.ExamPaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.ExamPaperTable,
			Columns: []string{tkuserexamscorerecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesruo.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.ExamPaperTable,
			Columns: []string{tkuserexamscorerecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuesruo.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.SectionTable,
			Columns: []string{tkuserexamscorerecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesruo.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.SectionTable,
			Columns: []string{tkuserexamscorerecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuesruo.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.TeacherTable,
			Columns: []string{tkuserexamscorerecord.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesruo.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.TeacherTable,
			Columns: []string{tkuserexamscorerecord.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuesruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.UserTable,
			Columns: []string{tkuserexamscorerecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserexamscorerecord.UserTable,
			Columns: []string{tkuserexamscorerecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuesruo.mutation.UserExamDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkuserexamscorerecord.UserExamDetailsTable,
			Columns: []string{tkuserexamscorerecord.UserExamDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkusersimulationteachermark.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesruo.mutation.RemovedUserExamDetailsIDs(); len(nodes) > 0 && !tuesruo.mutation.UserExamDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkuserexamscorerecord.UserExamDetailsTable,
			Columns: []string{tkuserexamscorerecord.UserExamDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkusersimulationteachermark.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuesruo.mutation.UserExamDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkuserexamscorerecord.UserExamDetailsTable,
			Columns: []string{tkuserexamscorerecord.UserExamDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkusersimulationteachermark.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkUserExamScoreRecord{config: tuesruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuesruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserexamscorerecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

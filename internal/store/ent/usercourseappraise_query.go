// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/kccoursesmallcategory"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/user"
	"gserver/internal/store/ent/usercourseappraise"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCourseAppraiseQuery is the builder for querying UserCourseAppraise entities.
type UserCourseAppraiseQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.UserCourseAppraise
	// eager-loading edges.
	withSmallCate *KcCourseSmallCategoryQuery
	withCourse    *KcCourseQuery
	withUser      *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserCourseAppraiseQuery builder.
func (ucaq *UserCourseAppraiseQuery) Where(ps ...predicate.UserCourseAppraise) *UserCourseAppraiseQuery {
	ucaq.predicates = append(ucaq.predicates, ps...)
	return ucaq
}

// Limit adds a limit step to the query.
func (ucaq *UserCourseAppraiseQuery) Limit(limit int) *UserCourseAppraiseQuery {
	ucaq.limit = &limit
	return ucaq
}

// Offset adds an offset step to the query.
func (ucaq *UserCourseAppraiseQuery) Offset(offset int) *UserCourseAppraiseQuery {
	ucaq.offset = &offset
	return ucaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ucaq *UserCourseAppraiseQuery) Unique(unique bool) *UserCourseAppraiseQuery {
	ucaq.unique = &unique
	return ucaq
}

// Order adds an order step to the query.
func (ucaq *UserCourseAppraiseQuery) Order(o ...OrderFunc) *UserCourseAppraiseQuery {
	ucaq.order = append(ucaq.order, o...)
	return ucaq
}

// QuerySmallCate chains the current query on the "small_cate" edge.
func (ucaq *UserCourseAppraiseQuery) QuerySmallCate() *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: ucaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercourseappraise.Table, usercourseappraise.FieldID, selector),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercourseappraise.SmallCateTable, usercourseappraise.SmallCateColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourse chains the current query on the "course" edge.
func (ucaq *UserCourseAppraiseQuery) QueryCourse() *KcCourseQuery {
	query := &KcCourseQuery{config: ucaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercourseappraise.Table, usercourseappraise.FieldID, selector),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercourseappraise.CourseTable, usercourseappraise.CourseColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (ucaq *UserCourseAppraiseQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: ucaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercourseappraise.Table, usercourseappraise.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercourseappraise.UserTable, usercourseappraise.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserCourseAppraise entity from the query.
// Returns a *NotFoundError when no UserCourseAppraise was found.
func (ucaq *UserCourseAppraiseQuery) First(ctx context.Context) (*UserCourseAppraise, error) {
	nodes, err := ucaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usercourseappraise.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ucaq *UserCourseAppraiseQuery) FirstX(ctx context.Context) *UserCourseAppraise {
	node, err := ucaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserCourseAppraise ID from the query.
// Returns a *NotFoundError when no UserCourseAppraise ID was found.
func (ucaq *UserCourseAppraiseQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usercourseappraise.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ucaq *UserCourseAppraiseQuery) FirstIDX(ctx context.Context) int {
	id, err := ucaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserCourseAppraise entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one UserCourseAppraise entity is not found.
// Returns a *NotFoundError when no UserCourseAppraise entities are found.
func (ucaq *UserCourseAppraiseQuery) Only(ctx context.Context) (*UserCourseAppraise, error) {
	nodes, err := ucaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usercourseappraise.Label}
	default:
		return nil, &NotSingularError{usercourseappraise.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ucaq *UserCourseAppraiseQuery) OnlyX(ctx context.Context) *UserCourseAppraise {
	node, err := ucaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserCourseAppraise ID in the query.
// Returns a *NotSingularError when exactly one UserCourseAppraise ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ucaq *UserCourseAppraiseQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usercourseappraise.Label}
	default:
		err = &NotSingularError{usercourseappraise.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ucaq *UserCourseAppraiseQuery) OnlyIDX(ctx context.Context) int {
	id, err := ucaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserCourseAppraises.
func (ucaq *UserCourseAppraiseQuery) All(ctx context.Context) ([]*UserCourseAppraise, error) {
	if err := ucaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ucaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ucaq *UserCourseAppraiseQuery) AllX(ctx context.Context) []*UserCourseAppraise {
	nodes, err := ucaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserCourseAppraise IDs.
func (ucaq *UserCourseAppraiseQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ucaq.Select(usercourseappraise.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ucaq *UserCourseAppraiseQuery) IDsX(ctx context.Context) []int {
	ids, err := ucaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ucaq *UserCourseAppraiseQuery) Count(ctx context.Context) (int, error) {
	if err := ucaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ucaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ucaq *UserCourseAppraiseQuery) CountX(ctx context.Context) int {
	count, err := ucaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ucaq *UserCourseAppraiseQuery) Exist(ctx context.Context) (bool, error) {
	if err := ucaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ucaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ucaq *UserCourseAppraiseQuery) ExistX(ctx context.Context) bool {
	exist, err := ucaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserCourseAppraiseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ucaq *UserCourseAppraiseQuery) Clone() *UserCourseAppraiseQuery {
	if ucaq == nil {
		return nil
	}
	return &UserCourseAppraiseQuery{
		config:        ucaq.config,
		limit:         ucaq.limit,
		offset:        ucaq.offset,
		order:         append([]OrderFunc{}, ucaq.order...),
		predicates:    append([]predicate.UserCourseAppraise{}, ucaq.predicates...),
		withSmallCate: ucaq.withSmallCate.Clone(),
		withCourse:    ucaq.withCourse.Clone(),
		withUser:      ucaq.withUser.Clone(),
		// clone intermediate query.
		sql:  ucaq.sql.Clone(),
		path: ucaq.path,
	}
}

// WithSmallCate tells the query-builder to eager-load the nodes that are connected to
// the "small_cate" edge. The optional arguments are used to configure the query builder of the edge.
func (ucaq *UserCourseAppraiseQuery) WithSmallCate(opts ...func(*KcCourseSmallCategoryQuery)) *UserCourseAppraiseQuery {
	query := &KcCourseSmallCategoryQuery{config: ucaq.config}
	for _, opt := range opts {
		opt(query)
	}
	ucaq.withSmallCate = query
	return ucaq
}

// WithCourse tells the query-builder to eager-load the nodes that are connected to
// the "course" edge. The optional arguments are used to configure the query builder of the edge.
func (ucaq *UserCourseAppraiseQuery) WithCourse(opts ...func(*KcCourseQuery)) *UserCourseAppraiseQuery {
	query := &KcCourseQuery{config: ucaq.config}
	for _, opt := range opts {
		opt(query)
	}
	ucaq.withCourse = query
	return ucaq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ucaq *UserCourseAppraiseQuery) WithUser(opts ...func(*UserQuery)) *UserCourseAppraiseQuery {
	query := &UserQuery{config: ucaq.config}
	for _, opt := range opts {
		opt(query)
	}
	ucaq.withUser = query
	return ucaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserCourseAppraise.Query().
//		GroupBy(usercourseappraise.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ucaq *UserCourseAppraiseQuery) GroupBy(field string, fields ...string) *UserCourseAppraiseGroupBy {
	group := &UserCourseAppraiseGroupBy{config: ucaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ucaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ucaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.UserCourseAppraise.Query().
//		Select(usercourseappraise.FieldUUID).
//		Scan(ctx, &v)
//
func (ucaq *UserCourseAppraiseQuery) Select(field string, fields ...string) *UserCourseAppraiseSelect {
	ucaq.fields = append([]string{field}, fields...)
	return &UserCourseAppraiseSelect{UserCourseAppraiseQuery: ucaq}
}

func (ucaq *UserCourseAppraiseQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ucaq.fields {
		if !usercourseappraise.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ucaq.path != nil {
		prev, err := ucaq.path(ctx)
		if err != nil {
			return err
		}
		ucaq.sql = prev
	}
	return nil
}

func (ucaq *UserCourseAppraiseQuery) sqlAll(ctx context.Context) ([]*UserCourseAppraise, error) {
	var (
		nodes       = []*UserCourseAppraise{}
		_spec       = ucaq.querySpec()
		loadedTypes = [3]bool{
			ucaq.withSmallCate != nil,
			ucaq.withCourse != nil,
			ucaq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &UserCourseAppraise{config: ucaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ucaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ucaq.withSmallCate; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserCourseAppraise)
		for i := range nodes {
			fk := nodes[i].SmallCateID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(kccoursesmallcategory.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "small_cate_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SmallCate = n
			}
		}
	}

	if query := ucaq.withCourse; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserCourseAppraise)
		for i := range nodes {
			fk := nodes[i].CourseID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(kccourse.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "course_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Course = n
			}
		}
	}

	if query := ucaq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserCourseAppraise)
		for i := range nodes {
			fk := nodes[i].UserID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	return nodes, nil
}

func (ucaq *UserCourseAppraiseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ucaq.querySpec()
	return sqlgraph.CountNodes(ctx, ucaq.driver, _spec)
}

func (ucaq *UserCourseAppraiseQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ucaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ucaq *UserCourseAppraiseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercourseappraise.Table,
			Columns: usercourseappraise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercourseappraise.FieldID,
			},
		},
		From:   ucaq.sql,
		Unique: true,
	}
	if unique := ucaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ucaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercourseappraise.FieldID)
		for i := range fields {
			if fields[i] != usercourseappraise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ucaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ucaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ucaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ucaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ucaq *UserCourseAppraiseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ucaq.driver.Dialect())
	t1 := builder.Table(usercourseappraise.Table)
	selector := builder.Select(t1.Columns(usercourseappraise.Columns...)...).From(t1)
	if ucaq.sql != nil {
		selector = ucaq.sql
		selector.Select(selector.Columns(usercourseappraise.Columns...)...)
	}
	for _, p := range ucaq.predicates {
		p(selector)
	}
	for _, p := range ucaq.order {
		p(selector)
	}
	if offset := ucaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ucaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserCourseAppraiseGroupBy is the group-by builder for UserCourseAppraise entities.
type UserCourseAppraiseGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ucagb *UserCourseAppraiseGroupBy) Aggregate(fns ...AggregateFunc) *UserCourseAppraiseGroupBy {
	ucagb.fns = append(ucagb.fns, fns...)
	return ucagb
}

// Scan applies the group-by query and scans the result into the given value.
func (ucagb *UserCourseAppraiseGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ucagb.path(ctx)
	if err != nil {
		return err
	}
	ucagb.sql = query
	return ucagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ucagb *UserCourseAppraiseGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ucagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ucagb *UserCourseAppraiseGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ucagb.fields) > 1 {
		return nil, errors.New("ent: UserCourseAppraiseGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ucagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ucagb *UserCourseAppraiseGroupBy) StringsX(ctx context.Context) []string {
	v, err := ucagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ucagb *UserCourseAppraiseGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ucagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usercourseappraise.Label}
	default:
		err = fmt.Errorf("ent: UserCourseAppraiseGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ucagb *UserCourseAppraiseGroupBy) StringX(ctx context.Context) string {
	v, err := ucagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ucagb *UserCourseAppraiseGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ucagb.fields) > 1 {
		return nil, errors.New("ent: UserCourseAppraiseGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ucagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ucagb *UserCourseAppraiseGroupBy) IntsX(ctx context.Context) []int {
	v, err := ucagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ucagb *UserCourseAppraiseGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ucagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usercourseappraise.Label}
	default:
		err = fmt.Errorf("ent: UserCourseAppraiseGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ucagb *UserCourseAppraiseGroupBy) IntX(ctx context.Context) int {
	v, err := ucagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ucagb *UserCourseAppraiseGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ucagb.fields) > 1 {
		return nil, errors.New("ent: UserCourseAppraiseGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ucagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ucagb *UserCourseAppraiseGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ucagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ucagb *UserCourseAppraiseGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ucagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usercourseappraise.Label}
	default:
		err = fmt.Errorf("ent: UserCourseAppraiseGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ucagb *UserCourseAppraiseGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ucagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ucagb *UserCourseAppraiseGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ucagb.fields) > 1 {
		return nil, errors.New("ent: UserCourseAppraiseGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ucagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ucagb *UserCourseAppraiseGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ucagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ucagb *UserCourseAppraiseGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ucagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usercourseappraise.Label}
	default:
		err = fmt.Errorf("ent: UserCourseAppraiseGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ucagb *UserCourseAppraiseGroupBy) BoolX(ctx context.Context) bool {
	v, err := ucagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ucagb *UserCourseAppraiseGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ucagb.fields {
		if !usercourseappraise.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ucagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ucagb *UserCourseAppraiseGroupBy) sqlQuery() *sql.Selector {
	selector := ucagb.sql
	columns := make([]string, 0, len(ucagb.fields)+len(ucagb.fns))
	columns = append(columns, ucagb.fields...)
	for _, fn := range ucagb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(ucagb.fields...)
}

// UserCourseAppraiseSelect is the builder for selecting fields of UserCourseAppraise entities.
type UserCourseAppraiseSelect struct {
	*UserCourseAppraiseQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ucas *UserCourseAppraiseSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ucas.prepareQuery(ctx); err != nil {
		return err
	}
	ucas.sql = ucas.UserCourseAppraiseQuery.sqlQuery(ctx)
	return ucas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ucas *UserCourseAppraiseSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ucas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ucas *UserCourseAppraiseSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ucas.fields) > 1 {
		return nil, errors.New("ent: UserCourseAppraiseSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ucas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ucas *UserCourseAppraiseSelect) StringsX(ctx context.Context) []string {
	v, err := ucas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ucas *UserCourseAppraiseSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ucas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usercourseappraise.Label}
	default:
		err = fmt.Errorf("ent: UserCourseAppraiseSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ucas *UserCourseAppraiseSelect) StringX(ctx context.Context) string {
	v, err := ucas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ucas *UserCourseAppraiseSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ucas.fields) > 1 {
		return nil, errors.New("ent: UserCourseAppraiseSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ucas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ucas *UserCourseAppraiseSelect) IntsX(ctx context.Context) []int {
	v, err := ucas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ucas *UserCourseAppraiseSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ucas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usercourseappraise.Label}
	default:
		err = fmt.Errorf("ent: UserCourseAppraiseSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ucas *UserCourseAppraiseSelect) IntX(ctx context.Context) int {
	v, err := ucas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ucas *UserCourseAppraiseSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ucas.fields) > 1 {
		return nil, errors.New("ent: UserCourseAppraiseSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ucas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ucas *UserCourseAppraiseSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ucas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ucas *UserCourseAppraiseSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ucas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usercourseappraise.Label}
	default:
		err = fmt.Errorf("ent: UserCourseAppraiseSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ucas *UserCourseAppraiseSelect) Float64X(ctx context.Context) float64 {
	v, err := ucas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ucas *UserCourseAppraiseSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ucas.fields) > 1 {
		return nil, errors.New("ent: UserCourseAppraiseSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ucas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ucas *UserCourseAppraiseSelect) BoolsX(ctx context.Context) []bool {
	v, err := ucas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ucas *UserCourseAppraiseSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ucas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usercourseappraise.Label}
	default:
		err = fmt.Errorf("ent: UserCourseAppraiseSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ucas *UserCourseAppraiseSelect) BoolX(ctx context.Context) bool {
	v, err := ucas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ucas *UserCourseAppraiseSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ucas.sqlQuery().Query()
	if err := ucas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ucas *UserCourseAppraiseSelect) sqlQuery() sql.Querier {
	selector := ucas.sql
	selector.Select(selector.Columns(ucas.fields...)...)
	return selector
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/tkexampaperpartition"
	"tkserver/internal/store/ent/tkexampaperpartitionscore"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperPartitionScoreCreate is the builder for creating a TkExamPaperPartitionScore entity.
type TkExamPaperPartitionScoreCreate struct {
	config
	mutation *TkExamPaperPartitionScoreMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetUUID(s string) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetUUID(s)
	return teppsc
}

// SetCreatedAt sets the "created_at" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetCreatedAt(t time.Time) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetCreatedAt(t)
	return teppsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableCreatedAt(t *time.Time) *TkExamPaperPartitionScoreCreate {
	if t != nil {
		teppsc.SetCreatedAt(*t)
	}
	return teppsc
}

// SetUpdatedAt sets the "updated_at" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetUpdatedAt(t time.Time) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetUpdatedAt(t)
	return teppsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableUpdatedAt(t *time.Time) *TkExamPaperPartitionScoreCreate {
	if t != nil {
		teppsc.SetUpdatedAt(*t)
	}
	return teppsc
}

// SetDeletedAt sets the "deleted_at" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetDeletedAt(t time.Time) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetDeletedAt(t)
	return teppsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableDeletedAt(t *time.Time) *TkExamPaperPartitionScoreCreate {
	if t != nil {
		teppsc.SetDeletedAt(*t)
	}
	return teppsc
}

// SetSingeSelect sets the "singe_select" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetSingeSelect(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetSingeSelect(u)
	return teppsc
}

// SetNillableSingeSelect sets the "singe_select" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableSingeSelect(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetSingeSelect(*u)
	}
	return teppsc
}

// SetJudgeQuestion sets the "judge_question" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetJudgeQuestion(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetJudgeQuestion(u)
	return teppsc
}

// SetNillableJudgeQuestion sets the "judge_question" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableJudgeQuestion(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetJudgeQuestion(*u)
	}
	return teppsc
}

// SetMultiSelect sets the "multi_select" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetMultiSelect(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetMultiSelect(u)
	return teppsc
}

// SetNillableMultiSelect sets the "multi_select" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableMultiSelect(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetMultiSelect(*u)
	}
	return teppsc
}

// SetShorterAnswer sets the "shorter_answer" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetShorterAnswer(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetShorterAnswer(u)
	return teppsc
}

// SetNillableShorterAnswer sets the "shorter_answer" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableShorterAnswer(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetShorterAnswer(*u)
	}
	return teppsc
}

// SetMaterialQuestion sets the "material_question" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetMaterialQuestion(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetMaterialQuestion(u)
	return teppsc
}

// SetNillableMaterialQuestion sets the "material_question" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableMaterialQuestion(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetMaterialQuestion(*u)
	}
	return teppsc
}

// SetSingeSelectCount sets the "singe_select_count" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetSingeSelectCount(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetSingeSelectCount(u)
	return teppsc
}

// SetNillableSingeSelectCount sets the "singe_select_count" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableSingeSelectCount(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetSingeSelectCount(*u)
	}
	return teppsc
}

// SetJudgeQuestionCount sets the "judge_question_count" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetJudgeQuestionCount(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetJudgeQuestionCount(u)
	return teppsc
}

// SetNillableJudgeQuestionCount sets the "judge_question_count" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableJudgeQuestionCount(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetJudgeQuestionCount(*u)
	}
	return teppsc
}

// SetMultiSelectCount sets the "multi_select_count" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetMultiSelectCount(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetMultiSelectCount(u)
	return teppsc
}

// SetNillableMultiSelectCount sets the "multi_select_count" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableMultiSelectCount(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetMultiSelectCount(*u)
	}
	return teppsc
}

// SetShorterAnswerCount sets the "shorter_answer_count" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetShorterAnswerCount(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetShorterAnswerCount(u)
	return teppsc
}

// SetNillableShorterAnswerCount sets the "shorter_answer_count" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableShorterAnswerCount(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetShorterAnswerCount(*u)
	}
	return teppsc
}

// SetMaterialQuestionCount sets the "material_question_count" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetMaterialQuestionCount(u uint8) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetMaterialQuestionCount(u)
	return teppsc
}

// SetNillableMaterialQuestionCount sets the "material_question_count" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableMaterialQuestionCount(u *uint8) *TkExamPaperPartitionScoreCreate {
	if u != nil {
		teppsc.SetMaterialQuestionCount(*u)
	}
	return teppsc
}

// SetExamPaperPartitionID sets the "exam_paper_partition_id" field.
func (teppsc *TkExamPaperPartitionScoreCreate) SetExamPaperPartitionID(i int) *TkExamPaperPartitionScoreCreate {
	teppsc.mutation.SetExamPaperPartitionID(i)
	return teppsc
}

// SetNillableExamPaperPartitionID sets the "exam_paper_partition_id" field if the given value is not nil.
func (teppsc *TkExamPaperPartitionScoreCreate) SetNillableExamPaperPartitionID(i *int) *TkExamPaperPartitionScoreCreate {
	if i != nil {
		teppsc.SetExamPaperPartitionID(*i)
	}
	return teppsc
}

// SetExamPaperPartition sets the "exam_paper_partition" edge to the TkExamPaperPartition entity.
func (teppsc *TkExamPaperPartitionScoreCreate) SetExamPaperPartition(t *TkExamPaperPartition) *TkExamPaperPartitionScoreCreate {
	return teppsc.SetExamPaperPartitionID(t.ID)
}

// Mutation returns the TkExamPaperPartitionScoreMutation object of the builder.
func (teppsc *TkExamPaperPartitionScoreCreate) Mutation() *TkExamPaperPartitionScoreMutation {
	return teppsc.mutation
}

// Save creates the TkExamPaperPartitionScore in the database.
func (teppsc *TkExamPaperPartitionScoreCreate) Save(ctx context.Context) (*TkExamPaperPartitionScore, error) {
	var (
		err  error
		node *TkExamPaperPartitionScore
	)
	teppsc.defaults()
	if len(teppsc.hooks) == 0 {
		if err = teppsc.check(); err != nil {
			return nil, err
		}
		node, err = teppsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperPartitionScoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = teppsc.check(); err != nil {
				return nil, err
			}
			teppsc.mutation = mutation
			node, err = teppsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teppsc.hooks) - 1; i >= 0; i-- {
			mut = teppsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teppsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (teppsc *TkExamPaperPartitionScoreCreate) SaveX(ctx context.Context) *TkExamPaperPartitionScore {
	v, err := teppsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (teppsc *TkExamPaperPartitionScoreCreate) defaults() {
	if _, ok := teppsc.mutation.CreatedAt(); !ok {
		v := tkexampaperpartitionscore.DefaultCreatedAt()
		teppsc.mutation.SetCreatedAt(v)
	}
	if _, ok := teppsc.mutation.UpdatedAt(); !ok {
		v := tkexampaperpartitionscore.DefaultUpdatedAt()
		teppsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := teppsc.mutation.SingeSelect(); !ok {
		v := tkexampaperpartitionscore.DefaultSingeSelect
		teppsc.mutation.SetSingeSelect(v)
	}
	if _, ok := teppsc.mutation.JudgeQuestion(); !ok {
		v := tkexampaperpartitionscore.DefaultJudgeQuestion
		teppsc.mutation.SetJudgeQuestion(v)
	}
	if _, ok := teppsc.mutation.MultiSelect(); !ok {
		v := tkexampaperpartitionscore.DefaultMultiSelect
		teppsc.mutation.SetMultiSelect(v)
	}
	if _, ok := teppsc.mutation.ShorterAnswer(); !ok {
		v := tkexampaperpartitionscore.DefaultShorterAnswer
		teppsc.mutation.SetShorterAnswer(v)
	}
	if _, ok := teppsc.mutation.MaterialQuestion(); !ok {
		v := tkexampaperpartitionscore.DefaultMaterialQuestion
		teppsc.mutation.SetMaterialQuestion(v)
	}
	if _, ok := teppsc.mutation.SingeSelectCount(); !ok {
		v := tkexampaperpartitionscore.DefaultSingeSelectCount
		teppsc.mutation.SetSingeSelectCount(v)
	}
	if _, ok := teppsc.mutation.JudgeQuestionCount(); !ok {
		v := tkexampaperpartitionscore.DefaultJudgeQuestionCount
		teppsc.mutation.SetJudgeQuestionCount(v)
	}
	if _, ok := teppsc.mutation.MultiSelectCount(); !ok {
		v := tkexampaperpartitionscore.DefaultMultiSelectCount
		teppsc.mutation.SetMultiSelectCount(v)
	}
	if _, ok := teppsc.mutation.ShorterAnswerCount(); !ok {
		v := tkexampaperpartitionscore.DefaultShorterAnswerCount
		teppsc.mutation.SetShorterAnswerCount(v)
	}
	if _, ok := teppsc.mutation.MaterialQuestionCount(); !ok {
		v := tkexampaperpartitionscore.DefaultMaterialQuestionCount
		teppsc.mutation.SetMaterialQuestionCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (teppsc *TkExamPaperPartitionScoreCreate) check() error {
	if _, ok := teppsc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := teppsc.mutation.SingeSelect(); !ok {
		return &ValidationError{Name: "singe_select", err: errors.New("ent: missing required field \"singe_select\"")}
	}
	if _, ok := teppsc.mutation.JudgeQuestion(); !ok {
		return &ValidationError{Name: "judge_question", err: errors.New("ent: missing required field \"judge_question\"")}
	}
	if _, ok := teppsc.mutation.MultiSelect(); !ok {
		return &ValidationError{Name: "multi_select", err: errors.New("ent: missing required field \"multi_select\"")}
	}
	if _, ok := teppsc.mutation.ShorterAnswer(); !ok {
		return &ValidationError{Name: "shorter_answer", err: errors.New("ent: missing required field \"shorter_answer\"")}
	}
	if _, ok := teppsc.mutation.MaterialQuestion(); !ok {
		return &ValidationError{Name: "material_question", err: errors.New("ent: missing required field \"material_question\"")}
	}
	if _, ok := teppsc.mutation.SingeSelectCount(); !ok {
		return &ValidationError{Name: "singe_select_count", err: errors.New("ent: missing required field \"singe_select_count\"")}
	}
	if _, ok := teppsc.mutation.JudgeQuestionCount(); !ok {
		return &ValidationError{Name: "judge_question_count", err: errors.New("ent: missing required field \"judge_question_count\"")}
	}
	if _, ok := teppsc.mutation.MultiSelectCount(); !ok {
		return &ValidationError{Name: "multi_select_count", err: errors.New("ent: missing required field \"multi_select_count\"")}
	}
	if _, ok := teppsc.mutation.ShorterAnswerCount(); !ok {
		return &ValidationError{Name: "shorter_answer_count", err: errors.New("ent: missing required field \"shorter_answer_count\"")}
	}
	if _, ok := teppsc.mutation.MaterialQuestionCount(); !ok {
		return &ValidationError{Name: "material_question_count", err: errors.New("ent: missing required field \"material_question_count\"")}
	}
	return nil
}

func (teppsc *TkExamPaperPartitionScoreCreate) sqlSave(ctx context.Context) (*TkExamPaperPartitionScore, error) {
	_node, _spec := teppsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, teppsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (teppsc *TkExamPaperPartitionScoreCreate) createSpec() (*TkExamPaperPartitionScore, *sqlgraph.CreateSpec) {
	var (
		_node = &TkExamPaperPartitionScore{config: teppsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkexampaperpartitionscore.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaperpartitionscore.FieldID,
			},
		}
	)
	if value, ok := teppsc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := teppsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := teppsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := teppsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := teppsc.mutation.SingeSelect(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelect,
		})
		_node.SingeSelect = value
	}
	if value, ok := teppsc.mutation.JudgeQuestion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestion,
		})
		_node.JudgeQuestion = value
	}
	if value, ok := teppsc.mutation.MultiSelect(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelect,
		})
		_node.MultiSelect = value
	}
	if value, ok := teppsc.mutation.ShorterAnswer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswer,
		})
		_node.ShorterAnswer = value
	}
	if value, ok := teppsc.mutation.MaterialQuestion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestion,
		})
		_node.MaterialQuestion = value
	}
	if value, ok := teppsc.mutation.SingeSelectCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldSingeSelectCount,
		})
		_node.SingeSelectCount = value
	}
	if value, ok := teppsc.mutation.JudgeQuestionCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldJudgeQuestionCount,
		})
		_node.JudgeQuestionCount = value
	}
	if value, ok := teppsc.mutation.MultiSelectCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMultiSelectCount,
		})
		_node.MultiSelectCount = value
	}
	if value, ok := teppsc.mutation.ShorterAnswerCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldShorterAnswerCount,
		})
		_node.ShorterAnswerCount = value
	}
	if value, ok := teppsc.mutation.MaterialQuestionCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartitionscore.FieldMaterialQuestionCount,
		})
		_node.MaterialQuestionCount = value
	}
	if nodes := teppsc.mutation.ExamPaperPartitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartitionscore.ExamPaperPartitionTable,
			Columns: []string{tkexampaperpartitionscore.ExamPaperPartitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamPaperPartitionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkExamPaperPartitionScoreCreateBulk is the builder for creating many TkExamPaperPartitionScore entities in bulk.
type TkExamPaperPartitionScoreCreateBulk struct {
	config
	builders []*TkExamPaperPartitionScoreCreate
}

// Save creates the TkExamPaperPartitionScore entities in the database.
func (teppscb *TkExamPaperPartitionScoreCreateBulk) Save(ctx context.Context) ([]*TkExamPaperPartitionScore, error) {
	specs := make([]*sqlgraph.CreateSpec, len(teppscb.builders))
	nodes := make([]*TkExamPaperPartitionScore, len(teppscb.builders))
	mutators := make([]Mutator, len(teppscb.builders))
	for i := range teppscb.builders {
		func(i int, root context.Context) {
			builder := teppscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkExamPaperPartitionScoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, teppscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, teppscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, teppscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (teppscb *TkExamPaperPartitionScoreCreateBulk) SaveX(ctx context.Context) []*TkExamPaperPartitionScore {
	v, err := teppscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

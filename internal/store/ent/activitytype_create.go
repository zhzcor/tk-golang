// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/activity"
	"tkserver/internal/store/ent/activitytype"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityTypeCreate is the builder for creating a ActivityType entity.
type ActivityTypeCreate struct {
	config
	mutation *ActivityTypeMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (atc *ActivityTypeCreate) SetUUID(s string) *ActivityTypeCreate {
	atc.mutation.SetUUID(s)
	return atc
}

// SetCreatedAt sets the "created_at" field.
func (atc *ActivityTypeCreate) SetCreatedAt(t time.Time) *ActivityTypeCreate {
	atc.mutation.SetCreatedAt(t)
	return atc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atc *ActivityTypeCreate) SetNillableCreatedAt(t *time.Time) *ActivityTypeCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetUpdatedAt sets the "updated_at" field.
func (atc *ActivityTypeCreate) SetUpdatedAt(t time.Time) *ActivityTypeCreate {
	atc.mutation.SetUpdatedAt(t)
	return atc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atc *ActivityTypeCreate) SetNillableUpdatedAt(t *time.Time) *ActivityTypeCreate {
	if t != nil {
		atc.SetUpdatedAt(*t)
	}
	return atc
}

// SetDeletedAt sets the "deleted_at" field.
func (atc *ActivityTypeCreate) SetDeletedAt(t time.Time) *ActivityTypeCreate {
	atc.mutation.SetDeletedAt(t)
	return atc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atc *ActivityTypeCreate) SetNillableDeletedAt(t *time.Time) *ActivityTypeCreate {
	if t != nil {
		atc.SetDeletedAt(*t)
	}
	return atc
}

// SetName sets the "name" field.
func (atc *ActivityTypeCreate) SetName(s string) *ActivityTypeCreate {
	atc.mutation.SetName(s)
	return atc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atc *ActivityTypeCreate) SetNillableName(s *string) *ActivityTypeCreate {
	if s != nil {
		atc.SetName(*s)
	}
	return atc
}

// SetStatus sets the "status" field.
func (atc *ActivityTypeCreate) SetStatus(u uint8) *ActivityTypeCreate {
	atc.mutation.SetStatus(u)
	return atc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atc *ActivityTypeCreate) SetNillableStatus(u *uint8) *ActivityTypeCreate {
	if u != nil {
		atc.SetStatus(*u)
	}
	return atc
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (atc *ActivityTypeCreate) AddActivityIDs(ids ...int) *ActivityTypeCreate {
	atc.mutation.AddActivityIDs(ids...)
	return atc
}

// AddActivities adds the "activities" edges to the Activity entity.
func (atc *ActivityTypeCreate) AddActivities(a ...*Activity) *ActivityTypeCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atc.AddActivityIDs(ids...)
}

// Mutation returns the ActivityTypeMutation object of the builder.
func (atc *ActivityTypeCreate) Mutation() *ActivityTypeMutation {
	return atc.mutation
}

// Save creates the ActivityType in the database.
func (atc *ActivityTypeCreate) Save(ctx context.Context) (*ActivityType, error) {
	var (
		err  error
		node *ActivityType
	)
	atc.defaults()
	if len(atc.hooks) == 0 {
		if err = atc.check(); err != nil {
			return nil, err
		}
		node, err = atc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atc.check(); err != nil {
				return nil, err
			}
			atc.mutation = mutation
			node, err = atc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atc.hooks) - 1; i >= 0; i-- {
			mut = atc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (atc *ActivityTypeCreate) SaveX(ctx context.Context) *ActivityType {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (atc *ActivityTypeCreate) defaults() {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		v := activitytype.DefaultCreatedAt()
		atc.mutation.SetCreatedAt(v)
	}
	if _, ok := atc.mutation.UpdatedAt(); !ok {
		v := activitytype.DefaultUpdatedAt()
		atc.mutation.SetUpdatedAt(v)
	}
	if _, ok := atc.mutation.Name(); !ok {
		v := activitytype.DefaultName
		atc.mutation.SetName(v)
	}
	if _, ok := atc.mutation.Status(); !ok {
		v := activitytype.DefaultStatus
		atc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *ActivityTypeCreate) check() error {
	if _, ok := atc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := atc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := atc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	return nil
}

func (atc *ActivityTypeCreate) sqlSave(ctx context.Context) (*ActivityType, error) {
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (atc *ActivityTypeCreate) createSpec() (*ActivityType, *sqlgraph.CreateSpec) {
	var (
		_node = &ActivityType{config: atc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: activitytype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activitytype.FieldID,
			},
		}
	)
	if value, ok := atc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitytype.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := atc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitytype.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := atc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitytype.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := atc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitytype.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := atc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitytype.FieldName,
		})
		_node.Name = value
	}
	if value, ok := atc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activitytype.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := atc.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activitytype.ActivitiesTable,
			Columns: []string{activitytype.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActivityTypeCreateBulk is the builder for creating many ActivityType entities in bulk.
type ActivityTypeCreateBulk struct {
	config
	builders []*ActivityTypeCreate
}

// Save creates the ActivityType entities in the database.
func (atcb *ActivityTypeCreateBulk) Save(ctx context.Context) ([]*ActivityType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*ActivityType, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *ActivityTypeCreateBulk) SaveX(ctx context.Context) []*ActivityType {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

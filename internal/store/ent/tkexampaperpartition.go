// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/tkexampaper"
	"gserver/internal/store/ent/tkexampaperpartition"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TkExamPaperPartition is the model entity for the TkExamPaperPartition schema.
type TkExamPaperPartition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 试卷部分名称
	Name string `json:"name"`
	// Desc holds the value of the "desc" field.
	// 答题说明
	Desc string `json:"desc"`
	// Duration holds the value of the "duration" field.
	// 作答时长，0为不限制
	Duration int `json:"duration"`
	// Type holds the value of the "type" field.
	// 题目类型，1：单选题，2：多选题，3：判断题，4：简答题，5：材料题
	Type int `json:"type"`
	// QuestionCount holds the value of the "question_count" field.
	// 题目数
	QuestionCount uint8 `json:"question_count"`
	// ExamPaperID holds the value of the "exam_paper_id" field.
	// 试卷id
	ExamPaperID int `json:"exam_paper_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkExamPaperPartitionQuery when eager-loading is set.
	Edges TkExamPaperPartitionEdges `json:"edges"`
}

// TkExamPaperPartitionEdges holds the relations/edges for other nodes in the graph.
type TkExamPaperPartitionEdges struct {
	// ExamPaper holds the value of the exam_paper edge.
	ExamPaper *TkExamPaper `json:"exam_paper,omitempty"`
	// ExamPartitionLinks holds the value of the exam_partition_links edge.
	ExamPartitionLinks []*TkExamPartitionQuestionLink `json:"exam_partition_links,omitempty"`
	// ExamPartitionScores holds the value of the exam_partition_scores edge.
	ExamPartitionScores []*TkExamPaperPartitionScore `json:"exam_partition_scores,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ExamPaperOrErr returns the ExamPaper value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkExamPaperPartitionEdges) ExamPaperOrErr() (*TkExamPaper, error) {
	if e.loadedTypes[0] {
		if e.ExamPaper == nil {
			// The edge exam_paper was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkexampaper.Label}
		}
		return e.ExamPaper, nil
	}
	return nil, &NotLoadedError{edge: "exam_paper"}
}

// ExamPartitionLinksOrErr returns the ExamPartitionLinks value or an error if the edge
// was not loaded in eager-loading.
func (e TkExamPaperPartitionEdges) ExamPartitionLinksOrErr() ([]*TkExamPartitionQuestionLink, error) {
	if e.loadedTypes[1] {
		return e.ExamPartitionLinks, nil
	}
	return nil, &NotLoadedError{edge: "exam_partition_links"}
}

// ExamPartitionScoresOrErr returns the ExamPartitionScores value or an error if the edge
// was not loaded in eager-loading.
func (e TkExamPaperPartitionEdges) ExamPartitionScoresOrErr() ([]*TkExamPaperPartitionScore, error) {
	if e.loadedTypes[2] {
		return e.ExamPartitionScores, nil
	}
	return nil, &NotLoadedError{edge: "exam_partition_scores"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkExamPaperPartition) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkexampaperpartition.FieldID, tkexampaperpartition.FieldDuration, tkexampaperpartition.FieldType, tkexampaperpartition.FieldQuestionCount, tkexampaperpartition.FieldExamPaperID:
			values[i] = new(sql.NullInt64)
		case tkexampaperpartition.FieldUUID, tkexampaperpartition.FieldName, tkexampaperpartition.FieldDesc:
			values[i] = new(sql.NullString)
		case tkexampaperpartition.FieldCreatedAt, tkexampaperpartition.FieldUpdatedAt, tkexampaperpartition.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkExamPaperPartition", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkExamPaperPartition fields.
func (tepp *TkExamPaperPartition) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkexampaperpartition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tepp.ID = int(value.Int64)
		case tkexampaperpartition.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tepp.UUID = value.String
			}
		case tkexampaperpartition.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tepp.CreatedAt = new(time.Time)
				*tepp.CreatedAt = value.Time
			}
		case tkexampaperpartition.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tepp.UpdatedAt = new(time.Time)
				*tepp.UpdatedAt = value.Time
			}
		case tkexampaperpartition.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tepp.DeletedAt = new(time.Time)
				*tepp.DeletedAt = value.Time
			}
		case tkexampaperpartition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tepp.Name = value.String
			}
		case tkexampaperpartition.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				tepp.Desc = value.String
			}
		case tkexampaperpartition.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				tepp.Duration = int(value.Int64)
			}
		case tkexampaperpartition.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				tepp.Type = int(value.Int64)
			}
		case tkexampaperpartition.FieldQuestionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_count", values[i])
			} else if value.Valid {
				tepp.QuestionCount = uint8(value.Int64)
			}
		case tkexampaperpartition.FieldExamPaperID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_paper_id", values[i])
			} else if value.Valid {
				tepp.ExamPaperID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryExamPaper queries the "exam_paper" edge of the TkExamPaperPartition entity.
func (tepp *TkExamPaperPartition) QueryExamPaper() *TkExamPaperQuery {
	return (&TkExamPaperPartitionClient{config: tepp.config}).QueryExamPaper(tepp)
}

// QueryExamPartitionLinks queries the "exam_partition_links" edge of the TkExamPaperPartition entity.
func (tepp *TkExamPaperPartition) QueryExamPartitionLinks() *TkExamPartitionQuestionLinkQuery {
	return (&TkExamPaperPartitionClient{config: tepp.config}).QueryExamPartitionLinks(tepp)
}

// QueryExamPartitionScores queries the "exam_partition_scores" edge of the TkExamPaperPartition entity.
func (tepp *TkExamPaperPartition) QueryExamPartitionScores() *TkExamPaperPartitionScoreQuery {
	return (&TkExamPaperPartitionClient{config: tepp.config}).QueryExamPartitionScores(tepp)
}

// Update returns a builder for updating this TkExamPaperPartition.
// Note that you need to call TkExamPaperPartition.Unwrap() before calling this method if this TkExamPaperPartition
// was returned from a transaction, and the transaction was committed or rolled back.
func (tepp *TkExamPaperPartition) Update() *TkExamPaperPartitionUpdateOne {
	return (&TkExamPaperPartitionClient{config: tepp.config}).UpdateOne(tepp)
}

// Unwrap unwraps the TkExamPaperPartition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tepp *TkExamPaperPartition) Unwrap() *TkExamPaperPartition {
	tx, ok := tepp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkExamPaperPartition is not a transactional entity")
	}
	tepp.config.driver = tx.drv
	return tepp
}

// String implements the fmt.Stringer.
func (tepp *TkExamPaperPartition) String() string {
	var builder strings.Builder
	builder.WriteString("TkExamPaperPartition(")
	builder.WriteString(fmt.Sprintf("id=%v", tepp.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tepp.UUID)
	if v := tepp.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tepp.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tepp.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(tepp.Name)
	builder.WriteString(", desc=")
	builder.WriteString(tepp.Desc)
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", tepp.Duration))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", tepp.Type))
	builder.WriteString(", question_count=")
	builder.WriteString(fmt.Sprintf("%v", tepp.QuestionCount))
	builder.WriteString(", exam_paper_id=")
	builder.WriteString(fmt.Sprintf("%v", tepp.ExamPaperID))
	builder.WriteByte(')')
	return builder.String()
}

// TkExamPaperPartitions is a parsable slice of TkExamPaperPartition.
type TkExamPaperPartitions []*TkExamPaperPartition

func (tepp TkExamPaperPartitions) config(cfg config) {
	for _i := range tepp {
		tepp[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/shareposter"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SharePosterUpdate is the builder for updating SharePoster entities.
type SharePosterUpdate struct {
	config
	hooks    []Hook
	mutation *SharePosterMutation
}

// Where adds a new predicate for the SharePosterUpdate builder.
func (spu *SharePosterUpdate) Where(ps ...predicate.SharePoster) *SharePosterUpdate {
	spu.mutation.predicates = append(spu.mutation.predicates, ps...)
	return spu
}

// SetUUID sets the "uuid" field.
func (spu *SharePosterUpdate) SetUUID(s string) *SharePosterUpdate {
	spu.mutation.SetUUID(s)
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SharePosterUpdate) SetUpdatedAt(t time.Time) *SharePosterUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (spu *SharePosterUpdate) ClearUpdatedAt() *SharePosterUpdate {
	spu.mutation.ClearUpdatedAt()
	return spu
}

// SetDeletedAt sets the "deleted_at" field.
func (spu *SharePosterUpdate) SetDeletedAt(t time.Time) *SharePosterUpdate {
	spu.mutation.SetDeletedAt(t)
	return spu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spu *SharePosterUpdate) SetNillableDeletedAt(t *time.Time) *SharePosterUpdate {
	if t != nil {
		spu.SetDeletedAt(*t)
	}
	return spu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spu *SharePosterUpdate) ClearDeletedAt() *SharePosterUpdate {
	spu.mutation.ClearDeletedAt()
	return spu
}

// SetName sets the "name" field.
func (spu *SharePosterUpdate) SetName(s string) *SharePosterUpdate {
	spu.mutation.SetName(s)
	return spu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spu *SharePosterUpdate) SetNillableName(s *string) *SharePosterUpdate {
	if s != nil {
		spu.SetName(*s)
	}
	return spu
}

// SetStatus sets the "status" field.
func (spu *SharePosterUpdate) SetStatus(u uint8) *SharePosterUpdate {
	spu.mutation.ResetStatus()
	spu.mutation.SetStatus(u)
	return spu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spu *SharePosterUpdate) SetNillableStatus(u *uint8) *SharePosterUpdate {
	if u != nil {
		spu.SetStatus(*u)
	}
	return spu
}

// AddStatus adds u to the "status" field.
func (spu *SharePosterUpdate) AddStatus(u uint8) *SharePosterUpdate {
	spu.mutation.AddStatus(u)
	return spu
}

// SetURL sets the "url" field.
func (spu *SharePosterUpdate) SetURL(s string) *SharePosterUpdate {
	spu.mutation.SetURL(s)
	return spu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (spu *SharePosterUpdate) SetNillableURL(s *string) *SharePosterUpdate {
	if s != nil {
		spu.SetURL(*s)
	}
	return spu
}

// SetRemark sets the "remark" field.
func (spu *SharePosterUpdate) SetRemark(s string) *SharePosterUpdate {
	spu.mutation.SetRemark(s)
	return spu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spu *SharePosterUpdate) SetNillableRemark(s *string) *SharePosterUpdate {
	if s != nil {
		spu.SetRemark(*s)
	}
	return spu
}

// SetSharePosterImgID sets the "share_poster_img_id" field.
func (spu *SharePosterUpdate) SetSharePosterImgID(i int) *SharePosterUpdate {
	spu.mutation.ResetSharePosterImgID()
	spu.mutation.SetSharePosterImgID(i)
	return spu
}

// SetNillableSharePosterImgID sets the "share_poster_img_id" field if the given value is not nil.
func (spu *SharePosterUpdate) SetNillableSharePosterImgID(i *int) *SharePosterUpdate {
	if i != nil {
		spu.SetSharePosterImgID(*i)
	}
	return spu
}

// ClearSharePosterImgID clears the value of the "share_poster_img_id" field.
func (spu *SharePosterUpdate) ClearSharePosterImgID() *SharePosterUpdate {
	spu.mutation.ClearSharePosterImgID()
	return spu
}

// SetShareCount sets the "share_count" field.
func (spu *SharePosterUpdate) SetShareCount(i int) *SharePosterUpdate {
	spu.mutation.ResetShareCount()
	spu.mutation.SetShareCount(i)
	return spu
}

// SetNillableShareCount sets the "share_count" field if the given value is not nil.
func (spu *SharePosterUpdate) SetNillableShareCount(i *int) *SharePosterUpdate {
	if i != nil {
		spu.SetShareCount(*i)
	}
	return spu
}

// AddShareCount adds i to the "share_count" field.
func (spu *SharePosterUpdate) AddShareCount(i int) *SharePosterUpdate {
	spu.mutation.AddShareCount(i)
	return spu
}

// SetSortOrder sets the "sort_order" field.
func (spu *SharePosterUpdate) SetSortOrder(i int) *SharePosterUpdate {
	spu.mutation.ResetSortOrder()
	spu.mutation.SetSortOrder(i)
	return spu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (spu *SharePosterUpdate) SetNillableSortOrder(i *int) *SharePosterUpdate {
	if i != nil {
		spu.SetSortOrder(*i)
	}
	return spu
}

// AddSortOrder adds i to the "sort_order" field.
func (spu *SharePosterUpdate) AddSortOrder(i int) *SharePosterUpdate {
	spu.mutation.AddSortOrder(i)
	return spu
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (spu *SharePosterUpdate) SetAttachmentID(id int) *SharePosterUpdate {
	spu.mutation.SetAttachmentID(id)
	return spu
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (spu *SharePosterUpdate) SetNillableAttachmentID(id *int) *SharePosterUpdate {
	if id != nil {
		spu = spu.SetAttachmentID(*id)
	}
	return spu
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (spu *SharePosterUpdate) SetAttachment(a *Attachment) *SharePosterUpdate {
	return spu.SetAttachmentID(a.ID)
}

// Mutation returns the SharePosterMutation object of the builder.
func (spu *SharePosterUpdate) Mutation() *SharePosterMutation {
	return spu.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (spu *SharePosterUpdate) ClearAttachment() *SharePosterUpdate {
	spu.mutation.ClearAttachment()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SharePosterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	spu.defaults()
	if len(spu.hooks) == 0 {
		affected, err = spu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SharePosterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spu.mutation = mutation
			affected, err = spu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spu.hooks) - 1; i >= 0; i-- {
			mut = spu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SharePosterUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SharePosterUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SharePosterUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SharePosterUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok && !spu.mutation.UpdatedAtCleared() {
		v := shareposter.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

func (spu *SharePosterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shareposter.Table,
			Columns: shareposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shareposter.FieldID,
			},
		},
	}
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldUUID,
		})
	}
	if spu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shareposter.FieldCreatedAt,
		})
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shareposter.FieldUpdatedAt,
		})
	}
	if spu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shareposter.FieldUpdatedAt,
		})
	}
	if value, ok := spu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shareposter.FieldDeletedAt,
		})
	}
	if spu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shareposter.FieldDeletedAt,
		})
	}
	if value, ok := spu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldName,
		})
	}
	if value, ok := spu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: shareposter.FieldStatus,
		})
	}
	if value, ok := spu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: shareposter.FieldStatus,
		})
	}
	if value, ok := spu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldURL,
		})
	}
	if value, ok := spu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldRemark,
		})
	}
	if value, ok := spu.mutation.ShareCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldShareCount,
		})
	}
	if value, ok := spu.mutation.AddedShareCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldShareCount,
		})
	}
	if value, ok := spu.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldSortOrder,
		})
	}
	if value, ok := spu.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldSortOrder,
		})
	}
	if spu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shareposter.AttachmentTable,
			Columns: []string{shareposter.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shareposter.AttachmentTable,
			Columns: []string{shareposter.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shareposter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SharePosterUpdateOne is the builder for updating a single SharePoster entity.
type SharePosterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SharePosterMutation
}

// SetUUID sets the "uuid" field.
func (spuo *SharePosterUpdateOne) SetUUID(s string) *SharePosterUpdateOne {
	spuo.mutation.SetUUID(s)
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SharePosterUpdateOne) SetUpdatedAt(t time.Time) *SharePosterUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (spuo *SharePosterUpdateOne) ClearUpdatedAt() *SharePosterUpdateOne {
	spuo.mutation.ClearUpdatedAt()
	return spuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spuo *SharePosterUpdateOne) SetDeletedAt(t time.Time) *SharePosterUpdateOne {
	spuo.mutation.SetDeletedAt(t)
	return spuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spuo *SharePosterUpdateOne) SetNillableDeletedAt(t *time.Time) *SharePosterUpdateOne {
	if t != nil {
		spuo.SetDeletedAt(*t)
	}
	return spuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spuo *SharePosterUpdateOne) ClearDeletedAt() *SharePosterUpdateOne {
	spuo.mutation.ClearDeletedAt()
	return spuo
}

// SetName sets the "name" field.
func (spuo *SharePosterUpdateOne) SetName(s string) *SharePosterUpdateOne {
	spuo.mutation.SetName(s)
	return spuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spuo *SharePosterUpdateOne) SetNillableName(s *string) *SharePosterUpdateOne {
	if s != nil {
		spuo.SetName(*s)
	}
	return spuo
}

// SetStatus sets the "status" field.
func (spuo *SharePosterUpdateOne) SetStatus(u uint8) *SharePosterUpdateOne {
	spuo.mutation.ResetStatus()
	spuo.mutation.SetStatus(u)
	return spuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spuo *SharePosterUpdateOne) SetNillableStatus(u *uint8) *SharePosterUpdateOne {
	if u != nil {
		spuo.SetStatus(*u)
	}
	return spuo
}

// AddStatus adds u to the "status" field.
func (spuo *SharePosterUpdateOne) AddStatus(u uint8) *SharePosterUpdateOne {
	spuo.mutation.AddStatus(u)
	return spuo
}

// SetURL sets the "url" field.
func (spuo *SharePosterUpdateOne) SetURL(s string) *SharePosterUpdateOne {
	spuo.mutation.SetURL(s)
	return spuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (spuo *SharePosterUpdateOne) SetNillableURL(s *string) *SharePosterUpdateOne {
	if s != nil {
		spuo.SetURL(*s)
	}
	return spuo
}

// SetRemark sets the "remark" field.
func (spuo *SharePosterUpdateOne) SetRemark(s string) *SharePosterUpdateOne {
	spuo.mutation.SetRemark(s)
	return spuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spuo *SharePosterUpdateOne) SetNillableRemark(s *string) *SharePosterUpdateOne {
	if s != nil {
		spuo.SetRemark(*s)
	}
	return spuo
}

// SetSharePosterImgID sets the "share_poster_img_id" field.
func (spuo *SharePosterUpdateOne) SetSharePosterImgID(i int) *SharePosterUpdateOne {
	spuo.mutation.ResetSharePosterImgID()
	spuo.mutation.SetSharePosterImgID(i)
	return spuo
}

// SetNillableSharePosterImgID sets the "share_poster_img_id" field if the given value is not nil.
func (spuo *SharePosterUpdateOne) SetNillableSharePosterImgID(i *int) *SharePosterUpdateOne {
	if i != nil {
		spuo.SetSharePosterImgID(*i)
	}
	return spuo
}

// ClearSharePosterImgID clears the value of the "share_poster_img_id" field.
func (spuo *SharePosterUpdateOne) ClearSharePosterImgID() *SharePosterUpdateOne {
	spuo.mutation.ClearSharePosterImgID()
	return spuo
}

// SetShareCount sets the "share_count" field.
func (spuo *SharePosterUpdateOne) SetShareCount(i int) *SharePosterUpdateOne {
	spuo.mutation.ResetShareCount()
	spuo.mutation.SetShareCount(i)
	return spuo
}

// SetNillableShareCount sets the "share_count" field if the given value is not nil.
func (spuo *SharePosterUpdateOne) SetNillableShareCount(i *int) *SharePosterUpdateOne {
	if i != nil {
		spuo.SetShareCount(*i)
	}
	return spuo
}

// AddShareCount adds i to the "share_count" field.
func (spuo *SharePosterUpdateOne) AddShareCount(i int) *SharePosterUpdateOne {
	spuo.mutation.AddShareCount(i)
	return spuo
}

// SetSortOrder sets the "sort_order" field.
func (spuo *SharePosterUpdateOne) SetSortOrder(i int) *SharePosterUpdateOne {
	spuo.mutation.ResetSortOrder()
	spuo.mutation.SetSortOrder(i)
	return spuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (spuo *SharePosterUpdateOne) SetNillableSortOrder(i *int) *SharePosterUpdateOne {
	if i != nil {
		spuo.SetSortOrder(*i)
	}
	return spuo
}

// AddSortOrder adds i to the "sort_order" field.
func (spuo *SharePosterUpdateOne) AddSortOrder(i int) *SharePosterUpdateOne {
	spuo.mutation.AddSortOrder(i)
	return spuo
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (spuo *SharePosterUpdateOne) SetAttachmentID(id int) *SharePosterUpdateOne {
	spuo.mutation.SetAttachmentID(id)
	return spuo
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (spuo *SharePosterUpdateOne) SetNillableAttachmentID(id *int) *SharePosterUpdateOne {
	if id != nil {
		spuo = spuo.SetAttachmentID(*id)
	}
	return spuo
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (spuo *SharePosterUpdateOne) SetAttachment(a *Attachment) *SharePosterUpdateOne {
	return spuo.SetAttachmentID(a.ID)
}

// Mutation returns the SharePosterMutation object of the builder.
func (spuo *SharePosterUpdateOne) Mutation() *SharePosterMutation {
	return spuo.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (spuo *SharePosterUpdateOne) ClearAttachment() *SharePosterUpdateOne {
	spuo.mutation.ClearAttachment()
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SharePosterUpdateOne) Select(field string, fields ...string) *SharePosterUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SharePoster entity.
func (spuo *SharePosterUpdateOne) Save(ctx context.Context) (*SharePoster, error) {
	var (
		err  error
		node *SharePoster
	)
	spuo.defaults()
	if len(spuo.hooks) == 0 {
		node, err = spuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SharePosterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spuo.mutation = mutation
			node, err = spuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spuo.hooks) - 1; i >= 0; i-- {
			mut = spuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SharePosterUpdateOne) SaveX(ctx context.Context) *SharePoster {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SharePosterUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SharePosterUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SharePosterUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok && !spuo.mutation.UpdatedAtCleared() {
		v := shareposter.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

func (spuo *SharePosterUpdateOne) sqlSave(ctx context.Context) (_node *SharePoster, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shareposter.Table,
			Columns: shareposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shareposter.FieldID,
			},
		},
	}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SharePoster.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shareposter.FieldID)
		for _, f := range fields {
			if !shareposter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shareposter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldUUID,
		})
	}
	if spuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shareposter.FieldCreatedAt,
		})
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shareposter.FieldUpdatedAt,
		})
	}
	if spuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shareposter.FieldUpdatedAt,
		})
	}
	if value, ok := spuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shareposter.FieldDeletedAt,
		})
	}
	if spuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shareposter.FieldDeletedAt,
		})
	}
	if value, ok := spuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldName,
		})
	}
	if value, ok := spuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: shareposter.FieldStatus,
		})
	}
	if value, ok := spuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: shareposter.FieldStatus,
		})
	}
	if value, ok := spuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldURL,
		})
	}
	if value, ok := spuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldRemark,
		})
	}
	if value, ok := spuo.mutation.ShareCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldShareCount,
		})
	}
	if value, ok := spuo.mutation.AddedShareCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldShareCount,
		})
	}
	if value, ok := spuo.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldSortOrder,
		})
	}
	if value, ok := spuo.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldSortOrder,
		})
	}
	if spuo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shareposter.AttachmentTable,
			Columns: []string{shareposter.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shareposter.AttachmentTable,
			Columns: []string{shareposter.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SharePoster{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shareposter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package usercourseappraise

import (
	"time"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// TeachAttitudeScore applies equality check predicate on the "teach_attitude_score" field. It's identical to TeachAttitudeScoreEQ.
func TeachAttitudeScore(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeachAttitudeScore), v))
	})
}

// TeachContentScore applies equality check predicate on the "teach_content_score" field. It's identical to TeachContentScoreEQ.
func TeachContentScore(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeachContentScore), v))
	})
}

// TeachAtmosphereScore applies equality check predicate on the "teach_atmosphere_score" field. It's identical to TeachAtmosphereScoreEQ.
func TeachAtmosphereScore(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeachAtmosphereScore), v))
	})
}

// CompositeScore applies equality check predicate on the "composite_score" field. It's identical to CompositeScoreEQ.
func CompositeScore(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompositeScore), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// SmallCateID applies equality check predicate on the "small_cate_id" field. It's identical to SmallCateIDEQ.
func SmallCateID(v int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSmallCateID), v))
	})
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// ShowStatus applies equality check predicate on the "show_status" field. It's identical to ShowStatusEQ.
func ShowStatus(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowStatus), v))
	})
}

// TeacherImpression applies equality check predicate on the "teacher_impression" field. It's identical to TeacherImpressionEQ.
func TeacherImpression(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherImpression), v))
	})
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// TeacherReply applies equality check predicate on the "teacher_reply" field. It's identical to TeacherReplyEQ.
func TeacherReply(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherReply), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// TeachAttitudeScoreEQ applies the EQ predicate on the "teach_attitude_score" field.
func TeachAttitudeScoreEQ(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeachAttitudeScore), v))
	})
}

// TeachAttitudeScoreNEQ applies the NEQ predicate on the "teach_attitude_score" field.
func TeachAttitudeScoreNEQ(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeachAttitudeScore), v))
	})
}

// TeachAttitudeScoreIn applies the In predicate on the "teach_attitude_score" field.
func TeachAttitudeScoreIn(vs ...float64) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeachAttitudeScore), v...))
	})
}

// TeachAttitudeScoreNotIn applies the NotIn predicate on the "teach_attitude_score" field.
func TeachAttitudeScoreNotIn(vs ...float64) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeachAttitudeScore), v...))
	})
}

// TeachAttitudeScoreGT applies the GT predicate on the "teach_attitude_score" field.
func TeachAttitudeScoreGT(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeachAttitudeScore), v))
	})
}

// TeachAttitudeScoreGTE applies the GTE predicate on the "teach_attitude_score" field.
func TeachAttitudeScoreGTE(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeachAttitudeScore), v))
	})
}

// TeachAttitudeScoreLT applies the LT predicate on the "teach_attitude_score" field.
func TeachAttitudeScoreLT(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeachAttitudeScore), v))
	})
}

// TeachAttitudeScoreLTE applies the LTE predicate on the "teach_attitude_score" field.
func TeachAttitudeScoreLTE(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeachAttitudeScore), v))
	})
}

// TeachContentScoreEQ applies the EQ predicate on the "teach_content_score" field.
func TeachContentScoreEQ(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeachContentScore), v))
	})
}

// TeachContentScoreNEQ applies the NEQ predicate on the "teach_content_score" field.
func TeachContentScoreNEQ(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeachContentScore), v))
	})
}

// TeachContentScoreIn applies the In predicate on the "teach_content_score" field.
func TeachContentScoreIn(vs ...float64) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeachContentScore), v...))
	})
}

// TeachContentScoreNotIn applies the NotIn predicate on the "teach_content_score" field.
func TeachContentScoreNotIn(vs ...float64) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeachContentScore), v...))
	})
}

// TeachContentScoreGT applies the GT predicate on the "teach_content_score" field.
func TeachContentScoreGT(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeachContentScore), v))
	})
}

// TeachContentScoreGTE applies the GTE predicate on the "teach_content_score" field.
func TeachContentScoreGTE(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeachContentScore), v))
	})
}

// TeachContentScoreLT applies the LT predicate on the "teach_content_score" field.
func TeachContentScoreLT(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeachContentScore), v))
	})
}

// TeachContentScoreLTE applies the LTE predicate on the "teach_content_score" field.
func TeachContentScoreLTE(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeachContentScore), v))
	})
}

// TeachAtmosphereScoreEQ applies the EQ predicate on the "teach_atmosphere_score" field.
func TeachAtmosphereScoreEQ(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeachAtmosphereScore), v))
	})
}

// TeachAtmosphereScoreNEQ applies the NEQ predicate on the "teach_atmosphere_score" field.
func TeachAtmosphereScoreNEQ(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeachAtmosphereScore), v))
	})
}

// TeachAtmosphereScoreIn applies the In predicate on the "teach_atmosphere_score" field.
func TeachAtmosphereScoreIn(vs ...float64) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeachAtmosphereScore), v...))
	})
}

// TeachAtmosphereScoreNotIn applies the NotIn predicate on the "teach_atmosphere_score" field.
func TeachAtmosphereScoreNotIn(vs ...float64) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeachAtmosphereScore), v...))
	})
}

// TeachAtmosphereScoreGT applies the GT predicate on the "teach_atmosphere_score" field.
func TeachAtmosphereScoreGT(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeachAtmosphereScore), v))
	})
}

// TeachAtmosphereScoreGTE applies the GTE predicate on the "teach_atmosphere_score" field.
func TeachAtmosphereScoreGTE(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeachAtmosphereScore), v))
	})
}

// TeachAtmosphereScoreLT applies the LT predicate on the "teach_atmosphere_score" field.
func TeachAtmosphereScoreLT(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeachAtmosphereScore), v))
	})
}

// TeachAtmosphereScoreLTE applies the LTE predicate on the "teach_atmosphere_score" field.
func TeachAtmosphereScoreLTE(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeachAtmosphereScore), v))
	})
}

// CompositeScoreEQ applies the EQ predicate on the "composite_score" field.
func CompositeScoreEQ(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompositeScore), v))
	})
}

// CompositeScoreNEQ applies the NEQ predicate on the "composite_score" field.
func CompositeScoreNEQ(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompositeScore), v))
	})
}

// CompositeScoreIn applies the In predicate on the "composite_score" field.
func CompositeScoreIn(vs ...float64) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCompositeScore), v...))
	})
}

// CompositeScoreNotIn applies the NotIn predicate on the "composite_score" field.
func CompositeScoreNotIn(vs ...float64) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCompositeScore), v...))
	})
}

// CompositeScoreGT applies the GT predicate on the "composite_score" field.
func CompositeScoreGT(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompositeScore), v))
	})
}

// CompositeScoreGTE applies the GTE predicate on the "composite_score" field.
func CompositeScoreGTE(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompositeScore), v))
	})
}

// CompositeScoreLT applies the LT predicate on the "composite_score" field.
func CompositeScoreLT(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompositeScore), v))
	})
}

// CompositeScoreLTE applies the LTE predicate on the "composite_score" field.
func CompositeScoreLTE(v float64) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompositeScore), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// SmallCateIDEQ applies the EQ predicate on the "small_cate_id" field.
func SmallCateIDEQ(v int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSmallCateID), v))
	})
}

// SmallCateIDNEQ applies the NEQ predicate on the "small_cate_id" field.
func SmallCateIDNEQ(v int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSmallCateID), v))
	})
}

// SmallCateIDIn applies the In predicate on the "small_cate_id" field.
func SmallCateIDIn(vs ...int) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSmallCateID), v...))
	})
}

// SmallCateIDNotIn applies the NotIn predicate on the "small_cate_id" field.
func SmallCateIDNotIn(vs ...int) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSmallCateID), v...))
	})
}

// SmallCateIDIsNil applies the IsNil predicate on the "small_cate_id" field.
func SmallCateIDIsNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSmallCateID)))
	})
}

// SmallCateIDNotNil applies the NotNil predicate on the "small_cate_id" field.
func SmallCateIDNotNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSmallCateID)))
	})
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseID), v))
	})
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourseID), v...))
	})
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourseID), v...))
	})
}

// CourseIDIsNil applies the IsNil predicate on the "course_id" field.
func CourseIDIsNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCourseID)))
	})
}

// CourseIDNotNil applies the NotNil predicate on the "course_id" field.
func CourseIDNotNil() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCourseID)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// ShowStatusEQ applies the EQ predicate on the "show_status" field.
func ShowStatusEQ(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowStatus), v))
	})
}

// ShowStatusNEQ applies the NEQ predicate on the "show_status" field.
func ShowStatusNEQ(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShowStatus), v))
	})
}

// ShowStatusIn applies the In predicate on the "show_status" field.
func ShowStatusIn(vs ...uint8) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShowStatus), v...))
	})
}

// ShowStatusNotIn applies the NotIn predicate on the "show_status" field.
func ShowStatusNotIn(vs ...uint8) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShowStatus), v...))
	})
}

// ShowStatusGT applies the GT predicate on the "show_status" field.
func ShowStatusGT(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShowStatus), v))
	})
}

// ShowStatusGTE applies the GTE predicate on the "show_status" field.
func ShowStatusGTE(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShowStatus), v))
	})
}

// ShowStatusLT applies the LT predicate on the "show_status" field.
func ShowStatusLT(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShowStatus), v))
	})
}

// ShowStatusLTE applies the LTE predicate on the "show_status" field.
func ShowStatusLTE(v uint8) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShowStatus), v))
	})
}

// TeacherImpressionEQ applies the EQ predicate on the "teacher_impression" field.
func TeacherImpressionEQ(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionNEQ applies the NEQ predicate on the "teacher_impression" field.
func TeacherImpressionNEQ(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionIn applies the In predicate on the "teacher_impression" field.
func TeacherImpressionIn(vs ...string) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeacherImpression), v...))
	})
}

// TeacherImpressionNotIn applies the NotIn predicate on the "teacher_impression" field.
func TeacherImpressionNotIn(vs ...string) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeacherImpression), v...))
	})
}

// TeacherImpressionGT applies the GT predicate on the "teacher_impression" field.
func TeacherImpressionGT(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionGTE applies the GTE predicate on the "teacher_impression" field.
func TeacherImpressionGTE(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionLT applies the LT predicate on the "teacher_impression" field.
func TeacherImpressionLT(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionLTE applies the LTE predicate on the "teacher_impression" field.
func TeacherImpressionLTE(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionContains applies the Contains predicate on the "teacher_impression" field.
func TeacherImpressionContains(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionHasPrefix applies the HasPrefix predicate on the "teacher_impression" field.
func TeacherImpressionHasPrefix(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionHasSuffix applies the HasSuffix predicate on the "teacher_impression" field.
func TeacherImpressionHasSuffix(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionEqualFold applies the EqualFold predicate on the "teacher_impression" field.
func TeacherImpressionEqualFold(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTeacherImpression), v))
	})
}

// TeacherImpressionContainsFold applies the ContainsFold predicate on the "teacher_impression" field.
func TeacherImpressionContainsFold(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTeacherImpression), v))
	})
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesc), v))
	})
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDesc), v...))
	})
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDesc), v...))
	})
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesc), v))
	})
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesc), v))
	})
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesc), v))
	})
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesc), v))
	})
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDesc), v))
	})
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDesc), v))
	})
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDesc), v))
	})
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDesc), v))
	})
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDesc), v))
	})
}

// TeacherReplyEQ applies the EQ predicate on the "teacher_reply" field.
func TeacherReplyEQ(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyNEQ applies the NEQ predicate on the "teacher_reply" field.
func TeacherReplyNEQ(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyIn applies the In predicate on the "teacher_reply" field.
func TeacherReplyIn(vs ...string) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeacherReply), v...))
	})
}

// TeacherReplyNotIn applies the NotIn predicate on the "teacher_reply" field.
func TeacherReplyNotIn(vs ...string) predicate.UserCourseAppraise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeacherReply), v...))
	})
}

// TeacherReplyGT applies the GT predicate on the "teacher_reply" field.
func TeacherReplyGT(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyGTE applies the GTE predicate on the "teacher_reply" field.
func TeacherReplyGTE(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyLT applies the LT predicate on the "teacher_reply" field.
func TeacherReplyLT(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyLTE applies the LTE predicate on the "teacher_reply" field.
func TeacherReplyLTE(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyContains applies the Contains predicate on the "teacher_reply" field.
func TeacherReplyContains(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyHasPrefix applies the HasPrefix predicate on the "teacher_reply" field.
func TeacherReplyHasPrefix(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyHasSuffix applies the HasSuffix predicate on the "teacher_reply" field.
func TeacherReplyHasSuffix(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyEqualFold applies the EqualFold predicate on the "teacher_reply" field.
func TeacherReplyEqualFold(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTeacherReply), v))
	})
}

// TeacherReplyContainsFold applies the ContainsFold predicate on the "teacher_reply" field.
func TeacherReplyContainsFold(v string) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTeacherReply), v))
	})
}

// HasSmallCate applies the HasEdge predicate on the "small_cate" edge.
func HasSmallCate() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmallCateTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SmallCateTable, SmallCateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSmallCateWith applies the HasEdge predicate on the "small_cate" edge with a given conditions (other predicates).
func HasSmallCateWith(preds ...predicate.KcCourseSmallCategory) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmallCateInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SmallCateTable, SmallCateColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.KcCourse) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserCourseAppraise) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserCourseAppraise) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserCourseAppraise) predicate.UserCourseAppraise {
	return predicate.UserCourseAppraise(func(s *sql.Selector) {
		p(s.Not())
	})
}

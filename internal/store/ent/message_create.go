// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/kcclass"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/message"
	"gserver/internal/store/ent/messagetype"
	"gserver/internal/store/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageCreate is the builder for creating a Message entity.
type MessageCreate struct {
	config
	mutation *MessageMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (mc *MessageCreate) SetUUID(s string) *MessageCreate {
	mc.mutation.SetUUID(s)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MessageCreate) SetCreatedAt(t time.Time) *MessageCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MessageCreate) SetNillableCreatedAt(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MessageCreate) SetUpdatedAt(t time.Time) *MessageCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MessageCreate) SetNillableUpdatedAt(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MessageCreate) SetDeletedAt(t time.Time) *MessageCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MessageCreate) SetNillableDeletedAt(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MessageCreate) SetName(s string) *MessageCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mc *MessageCreate) SetNillableName(s *string) *MessageCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// SetDetail sets the "detail" field.
func (mc *MessageCreate) SetDetail(s string) *MessageCreate {
	mc.mutation.SetDetail(s)
	return mc
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (mc *MessageCreate) SetNillableDetail(s *string) *MessageCreate {
	if s != nil {
		mc.SetDetail(*s)
	}
	return mc
}

// SetPublishType sets the "publish_type" field.
func (mc *MessageCreate) SetPublishType(u uint8) *MessageCreate {
	mc.mutation.SetPublishType(u)
	return mc
}

// SetNillablePublishType sets the "publish_type" field if the given value is not nil.
func (mc *MessageCreate) SetNillablePublishType(u *uint8) *MessageCreate {
	if u != nil {
		mc.SetPublishType(*u)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MessageCreate) SetStatus(u uint8) *MessageCreate {
	mc.mutation.SetStatus(u)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MessageCreate) SetNillableStatus(u *uint8) *MessageCreate {
	if u != nil {
		mc.SetStatus(*u)
	}
	return mc
}

// SetPublishStatus sets the "publish_status" field.
func (mc *MessageCreate) SetPublishStatus(u uint8) *MessageCreate {
	mc.mutation.SetPublishStatus(u)
	return mc
}

// SetNillablePublishStatus sets the "publish_status" field if the given value is not nil.
func (mc *MessageCreate) SetNillablePublishStatus(u *uint8) *MessageCreate {
	if u != nil {
		mc.SetPublishStatus(*u)
	}
	return mc
}

// SetAutoPublishAt sets the "auto_publish_at" field.
func (mc *MessageCreate) SetAutoPublishAt(t time.Time) *MessageCreate {
	mc.mutation.SetAutoPublishAt(t)
	return mc
}

// SetNillableAutoPublishAt sets the "auto_publish_at" field if the given value is not nil.
func (mc *MessageCreate) SetNillableAutoPublishAt(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetAutoPublishAt(*t)
	}
	return mc
}

// SetMessageTypeID sets the "message_type_id" field.
func (mc *MessageCreate) SetMessageTypeID(i int) *MessageCreate {
	mc.mutation.SetMessageTypeID(i)
	return mc
}

// SetNillableMessageTypeID sets the "message_type_id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableMessageTypeID(i *int) *MessageCreate {
	if i != nil {
		mc.SetMessageTypeID(*i)
	}
	return mc
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (mc *MessageCreate) SetCreatedAdminID(i int) *MessageCreate {
	mc.mutation.SetCreatedAdminID(i)
	return mc
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableCreatedAdminID(i *int) *MessageCreate {
	if i != nil {
		mc.SetCreatedAdminID(*i)
	}
	return mc
}

// SetAttachmentID sets the "attachment_id" field.
func (mc *MessageCreate) SetAttachmentID(i int) *MessageCreate {
	mc.mutation.SetAttachmentID(i)
	return mc
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableAttachmentID(i *int) *MessageCreate {
	if i != nil {
		mc.SetAttachmentID(*i)
	}
	return mc
}

// SetCourseID sets the "course_id" field.
func (mc *MessageCreate) SetCourseID(i int) *MessageCreate {
	mc.mutation.SetCourseID(i)
	return mc
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableCourseID(i *int) *MessageCreate {
	if i != nil {
		mc.SetCourseID(*i)
	}
	return mc
}

// SetClassID sets the "class_id" field.
func (mc *MessageCreate) SetClassID(i int) *MessageCreate {
	mc.mutation.SetClassID(i)
	return mc
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableClassID(i *int) *MessageCreate {
	if i != nil {
		mc.SetClassID(*i)
	}
	return mc
}

// SetMessageType sets the "Message_type" edge to the MessageType entity.
func (mc *MessageCreate) SetMessageType(m *MessageType) *MessageCreate {
	return mc.SetMessageTypeID(m.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (mc *MessageCreate) SetAdminID(id int) *MessageCreate {
	mc.mutation.SetAdminID(id)
	return mc
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (mc *MessageCreate) SetNillableAdminID(id *int) *MessageCreate {
	if id != nil {
		mc = mc.SetAdminID(*id)
	}
	return mc
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (mc *MessageCreate) SetAdmin(a *Admin) *MessageCreate {
	return mc.SetAdminID(a.ID)
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (mc *MessageCreate) SetAttachment(a *Attachment) *MessageCreate {
	return mc.SetAttachmentID(a.ID)
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (mc *MessageCreate) SetCourse(k *KcCourse) *MessageCreate {
	return mc.SetCourseID(k.ID)
}

// SetClass sets the "class" edge to the KcClass entity.
func (mc *MessageCreate) SetClass(k *KcClass) *MessageCreate {
	return mc.SetClassID(k.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (mc *MessageCreate) AddUserIDs(ids ...int) *MessageCreate {
	mc.mutation.AddUserIDs(ids...)
	return mc
}

// AddUsers adds the "users" edges to the User entity.
func (mc *MessageCreate) AddUsers(u ...*User) *MessageCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mc.AddUserIDs(ids...)
}

// Mutation returns the MessageMutation object of the builder.
func (mc *MessageCreate) Mutation() *MessageMutation {
	return mc.mutation
}

// Save creates the Message in the database.
func (mc *MessageCreate) Save(ctx context.Context) (*Message, error) {
	var (
		err  error
		node *Message
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MessageCreate) SaveX(ctx context.Context) *Message {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mc *MessageCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := message.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := message.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.Name(); !ok {
		v := message.DefaultName
		mc.mutation.SetName(v)
	}
	if _, ok := mc.mutation.Detail(); !ok {
		v := message.DefaultDetail
		mc.mutation.SetDetail(v)
	}
	if _, ok := mc.mutation.PublishType(); !ok {
		v := message.DefaultPublishType
		mc.mutation.SetPublishType(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := message.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.PublishStatus(); !ok {
		v := message.DefaultPublishStatus
		mc.mutation.SetPublishStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MessageCreate) check() error {
	if _, ok := mc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mc.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New("ent: missing required field \"detail\"")}
	}
	if _, ok := mc.mutation.PublishType(); !ok {
		return &ValidationError{Name: "publish_type", err: errors.New("ent: missing required field \"publish_type\"")}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := mc.mutation.PublishStatus(); !ok {
		return &ValidationError{Name: "publish_status", err: errors.New("ent: missing required field \"publish_status\"")}
	}
	return nil
}

func (mc *MessageCreate) sqlSave(ctx context.Context) (*Message, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MessageCreate) createSpec() (*Message, *sqlgraph.CreateSpec) {
	var (
		_node = &Message{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: message.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldDetail,
		})
		_node.Detail = value
	}
	if value, ok := mc.mutation.PublishType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishType,
		})
		_node.PublishType = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := mc.mutation.PublishStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: message.FieldPublishStatus,
		})
		_node.PublishStatus = value
	}
	if value, ok := mc.mutation.AutoPublishAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldAutoPublishAt,
		})
		_node.AutoPublishAt = &value
	}
	if nodes := mc.mutation.MessageTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.MessageTypeTable,
			Columns: []string{message.MessageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messagetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MessageTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AdminTable,
			Columns: []string{message.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedAdminID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AttachmentTable,
			Columns: []string{message.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AttachmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.CourseTable,
			Columns: []string{message.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ClassTable,
			Columns: []string{message.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClassID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   message.UsersTable,
			Columns: message.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MessageCreateBulk is the builder for creating many Message entities in bulk.
type MessageCreateBulk struct {
	config
	builders []*MessageCreate
}

// Save creates the Message entities in the database.
func (mcb *MessageCreateBulk) Save(ctx context.Context) ([]*Message, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Message, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MessageCreateBulk) SaveX(ctx context.Context) []*Message {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

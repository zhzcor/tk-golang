// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/tkexampapersimulation"

	"entgo.io/ent/dialect/sql"
)

// TkExamPaperSimulation is the model entity for the TkExamPaperSimulation schema.
type TkExamPaperSimulation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// StartAt holds the value of the "start_at" field.
	// 考试开始试卷
	StartAt time.Time `json:"start_at"`
	// EndAt holds the value of the "end_at" field.
	// 考试结束时间
	EndAt time.Time `json:"end_at"`
	// EnableStatus holds the value of the "enable_status" field.
	// 启用状态 1：未启用，2：启用
	EnableStatus uint8 `json:"enable_status"`
	// ExamPaperID holds the value of the "exam_paper_id" field.
	// 试卷id
	ExamPaperID int `json:"exam_paper_id"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkExamPaperSimulation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkexampapersimulation.FieldID, tkexampapersimulation.FieldEnableStatus, tkexampapersimulation.FieldExamPaperID:
			values[i] = new(sql.NullInt64)
		case tkexampapersimulation.FieldUUID:
			values[i] = new(sql.NullString)
		case tkexampapersimulation.FieldCreatedAt, tkexampapersimulation.FieldUpdatedAt, tkexampapersimulation.FieldDeletedAt, tkexampapersimulation.FieldStartAt, tkexampapersimulation.FieldEndAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkExamPaperSimulation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkExamPaperSimulation fields.
func (teps *TkExamPaperSimulation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkexampapersimulation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			teps.ID = int(value.Int64)
		case tkexampapersimulation.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				teps.UUID = value.String
			}
		case tkexampapersimulation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				teps.CreatedAt = new(time.Time)
				*teps.CreatedAt = value.Time
			}
		case tkexampapersimulation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				teps.UpdatedAt = new(time.Time)
				*teps.UpdatedAt = value.Time
			}
		case tkexampapersimulation.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				teps.DeletedAt = new(time.Time)
				*teps.DeletedAt = value.Time
			}
		case tkexampapersimulation.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				teps.StartAt = value.Time
			}
		case tkexampapersimulation.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				teps.EndAt = value.Time
			}
		case tkexampapersimulation.FieldEnableStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enable_status", values[i])
			} else if value.Valid {
				teps.EnableStatus = uint8(value.Int64)
			}
		case tkexampapersimulation.FieldExamPaperID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_paper_id", values[i])
			} else if value.Valid {
				teps.ExamPaperID = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TkExamPaperSimulation.
// Note that you need to call TkExamPaperSimulation.Unwrap() before calling this method if this TkExamPaperSimulation
// was returned from a transaction, and the transaction was committed or rolled back.
func (teps *TkExamPaperSimulation) Update() *TkExamPaperSimulationUpdateOne {
	return (&TkExamPaperSimulationClient{config: teps.config}).UpdateOne(teps)
}

// Unwrap unwraps the TkExamPaperSimulation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (teps *TkExamPaperSimulation) Unwrap() *TkExamPaperSimulation {
	tx, ok := teps.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkExamPaperSimulation is not a transactional entity")
	}
	teps.config.driver = tx.drv
	return teps
}

// String implements the fmt.Stringer.
func (teps *TkExamPaperSimulation) String() string {
	var builder strings.Builder
	builder.WriteString("TkExamPaperSimulation(")
	builder.WriteString(fmt.Sprintf("id=%v", teps.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(teps.UUID)
	if v := teps.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := teps.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := teps.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", start_at=")
	builder.WriteString(teps.StartAt.Format(time.ANSIC))
	builder.WriteString(", end_at=")
	builder.WriteString(teps.EndAt.Format(time.ANSIC))
	builder.WriteString(", enable_status=")
	builder.WriteString(fmt.Sprintf("%v", teps.EnableStatus))
	builder.WriteString(", exam_paper_id=")
	builder.WriteString(fmt.Sprintf("%v", teps.ExamPaperID))
	builder.WriteByte(')')
	return builder.String()
}

// TkExamPaperSimulations is a parsable slice of TkExamPaperSimulation.
type TkExamPaperSimulations []*TkExamPaperSimulation

func (teps TkExamPaperSimulations) config(cfg config) {
	for _i := range teps {
		teps[_i].config = cfg
	}
}

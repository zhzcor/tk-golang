// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/advertise"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kcsmallcategoryattachment"
	"tkserver/internal/store/ent/kcvideouploadtask"
	"tkserver/internal/store/ent/majordetail"
	"tkserver/internal/store/ent/message"
	"tkserver/internal/store/ent/shareposter"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/useraskanswerattachment"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentCreate is the builder for creating a Attachment entity.
type AttachmentCreate struct {
	config
	mutation *AttachmentMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (ac *AttachmentCreate) SetUUID(s string) *AttachmentCreate {
	ac.mutation.SetUUID(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AttachmentCreate) SetCreatedAt(t time.Time) *AttachmentCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableCreatedAt(t *time.Time) *AttachmentCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AttachmentCreate) SetUpdatedAt(t time.Time) *AttachmentCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableUpdatedAt(t *time.Time) *AttachmentCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AttachmentCreate) SetDeletedAt(t time.Time) *AttachmentCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableDeletedAt(t *time.Time) *AttachmentCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetFilename sets the "filename" field.
func (ac *AttachmentCreate) SetFilename(s string) *AttachmentCreate {
	ac.mutation.SetFilename(s)
	return ac
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableFilename(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetFilename(*s)
	}
	return ac
}

// SetFileSize sets the "file_size" field.
func (ac *AttachmentCreate) SetFileSize(u uint32) *AttachmentCreate {
	ac.mutation.SetFileSize(u)
	return ac
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableFileSize(u *uint32) *AttachmentCreate {
	if u != nil {
		ac.SetFileSize(*u)
	}
	return ac
}

// SetMimeType sets the "mime_type" field.
func (ac *AttachmentCreate) SetMimeType(s string) *AttachmentCreate {
	ac.mutation.SetMimeType(s)
	return ac
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableMimeType(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetMimeType(*s)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *AttachmentCreate) SetUserID(i int) *AttachmentCreate {
	ac.mutation.SetUserID(i)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableUserID(i *int) *AttachmentCreate {
	if i != nil {
		ac.SetUserID(*i)
	}
	return ac
}

// SetAdminID sets the "admin_id" field.
func (ac *AttachmentCreate) SetAdminID(i int) *AttachmentCreate {
	ac.mutation.SetAdminID(i)
	return ac
}

// SetNillableAdminID sets the "admin_id" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableAdminID(i *int) *AttachmentCreate {
	if i != nil {
		ac.SetAdminID(*i)
	}
	return ac
}

// AddMajorDetailCoverImgIDs adds the "major_detail_cover_img" edge to the MajorDetail entity by IDs.
func (ac *AttachmentCreate) AddMajorDetailCoverImgIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddMajorDetailCoverImgIDs(ids...)
	return ac
}

// AddMajorDetailCoverImg adds the "major_detail_cover_img" edges to the MajorDetail entity.
func (ac *AttachmentCreate) AddMajorDetailCoverImg(m ...*MajorDetail) *AttachmentCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ac.AddMajorDetailCoverImgIDs(ids...)
}

// AddMajorDetailSubjectImgIDs adds the "major_detail_subject_img" edge to the MajorDetail entity by IDs.
func (ac *AttachmentCreate) AddMajorDetailSubjectImgIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddMajorDetailSubjectImgIDs(ids...)
	return ac
}

// AddMajorDetailSubjectImg adds the "major_detail_subject_img" edges to the MajorDetail entity.
func (ac *AttachmentCreate) AddMajorDetailSubjectImg(m ...*MajorDetail) *AttachmentCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ac.AddMajorDetailSubjectImgIDs(ids...)
}

// AddMajorTeacherAttachmentIDs adds the "major_teacher_attachment" edge to the MajorDetail entity by IDs.
func (ac *AttachmentCreate) AddMajorTeacherAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddMajorTeacherAttachmentIDs(ids...)
	return ac
}

// AddMajorTeacherAttachment adds the "major_teacher_attachment" edges to the MajorDetail entity.
func (ac *AttachmentCreate) AddMajorTeacherAttachment(m ...*MajorDetail) *AttachmentCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ac.AddMajorTeacherAttachmentIDs(ids...)
}

// AddMajorServiceAttachmentIDs adds the "major_service_attachment" edge to the MajorDetail entity by IDs.
func (ac *AttachmentCreate) AddMajorServiceAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddMajorServiceAttachmentIDs(ids...)
	return ac
}

// AddMajorServiceAttachment adds the "major_service_attachment" edges to the MajorDetail entity.
func (ac *AttachmentCreate) AddMajorServiceAttachment(m ...*MajorDetail) *AttachmentCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ac.AddMajorServiceAttachmentIDs(ids...)
}

// AddAdvertiseIDs adds the "advertise" edge to the Advertise entity by IDs.
func (ac *AttachmentCreate) AddAdvertiseIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddAdvertiseIDs(ids...)
	return ac
}

// AddAdvertise adds the "advertise" edges to the Advertise entity.
func (ac *AttachmentCreate) AddAdvertise(a ...*Advertise) *AttachmentCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAdvertiseIDs(ids...)
}

// AddMessageAttachmentIDs adds the "message_attachment" edge to the Message entity by IDs.
func (ac *AttachmentCreate) AddMessageAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddMessageAttachmentIDs(ids...)
	return ac
}

// AddMessageAttachment adds the "message_attachment" edges to the Message entity.
func (ac *AttachmentCreate) AddMessageAttachment(m ...*Message) *AttachmentCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ac.AddMessageAttachmentIDs(ids...)
}

// AddSharePosterAttachmentIDs adds the "share_poster_attachments" edge to the SharePoster entity by IDs.
func (ac *AttachmentCreate) AddSharePosterAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddSharePosterAttachmentIDs(ids...)
	return ac
}

// AddSharePosterAttachments adds the "share_poster_attachments" edges to the SharePoster entity.
func (ac *AttachmentCreate) AddSharePosterAttachments(s ...*SharePoster) *AttachmentCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSharePosterAttachmentIDs(ids...)
}

// AddTeacherAttachmentIDs adds the "teacher_attachments" edge to the Teacher entity by IDs.
func (ac *AttachmentCreate) AddTeacherAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddTeacherAttachmentIDs(ids...)
	return ac
}

// AddTeacherAttachments adds the "teacher_attachments" edges to the Teacher entity.
func (ac *AttachmentCreate) AddTeacherAttachments(t ...*Teacher) *AttachmentCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddTeacherAttachmentIDs(ids...)
}

// SetAdminImgIDID sets the "admin_img_id" edge to the Admin entity by ID.
func (ac *AttachmentCreate) SetAdminImgIDID(id int) *AttachmentCreate {
	ac.mutation.SetAdminImgIDID(id)
	return ac
}

// SetNillableAdminImgIDID sets the "admin_img_id" edge to the Admin entity by ID if the given value is not nil.
func (ac *AttachmentCreate) SetNillableAdminImgIDID(id *int) *AttachmentCreate {
	if id != nil {
		ac = ac.SetAdminImgIDID(*id)
	}
	return ac
}

// SetAdminImgID sets the "admin_img_id" edge to the Admin entity.
func (ac *AttachmentCreate) SetAdminImgID(a *Admin) *AttachmentCreate {
	return ac.SetAdminImgIDID(a.ID)
}

// AddSmallCategoryAttachmentIDs adds the "small_category_attachments" edge to the KcSmallCategoryAttachment entity by IDs.
func (ac *AttachmentCreate) AddSmallCategoryAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddSmallCategoryAttachmentIDs(ids...)
	return ac
}

// AddSmallCategoryAttachments adds the "small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (ac *AttachmentCreate) AddSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *AttachmentCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ac.AddSmallCategoryAttachmentIDs(ids...)
}

// AddCourseAttachmentIDs adds the "course_attachments" edge to the KcCourse entity by IDs.
func (ac *AttachmentCreate) AddCourseAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddCourseAttachmentIDs(ids...)
	return ac
}

// AddCourseAttachments adds the "course_attachments" edges to the KcCourse entity.
func (ac *AttachmentCreate) AddCourseAttachments(k ...*KcCourse) *AttachmentCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ac.AddCourseAttachmentIDs(ids...)
}

// AddClassCoverAttachmentIDs adds the "class_cover_attachments" edge to the KcClass entity by IDs.
func (ac *AttachmentCreate) AddClassCoverAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddClassCoverAttachmentIDs(ids...)
	return ac
}

// AddClassCoverAttachments adds the "class_cover_attachments" edges to the KcClass entity.
func (ac *AttachmentCreate) AddClassCoverAttachments(k ...*KcClass) *AttachmentCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ac.AddClassCoverAttachmentIDs(ids...)
}

// SetCoursewareAttachmentID sets the "courseware_attachment" edge to the KcCourseSmallCategory entity by ID.
func (ac *AttachmentCreate) SetCoursewareAttachmentID(id int) *AttachmentCreate {
	ac.mutation.SetCoursewareAttachmentID(id)
	return ac
}

// SetNillableCoursewareAttachmentID sets the "courseware_attachment" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (ac *AttachmentCreate) SetNillableCoursewareAttachmentID(id *int) *AttachmentCreate {
	if id != nil {
		ac = ac.SetCoursewareAttachmentID(*id)
	}
	return ac
}

// SetCoursewareAttachment sets the "courseware_attachment" edge to the KcCourseSmallCategory entity.
func (ac *AttachmentCreate) SetCoursewareAttachment(k *KcCourseSmallCategory) *AttachmentCreate {
	return ac.SetCoursewareAttachmentID(k.ID)
}

// SetOrderAttachmentID sets the "order_attachment" edge to the KcCourseSmallCategory entity by ID.
func (ac *AttachmentCreate) SetOrderAttachmentID(id int) *AttachmentCreate {
	ac.mutation.SetOrderAttachmentID(id)
	return ac
}

// SetNillableOrderAttachmentID sets the "order_attachment" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (ac *AttachmentCreate) SetNillableOrderAttachmentID(id *int) *AttachmentCreate {
	if id != nil {
		ac = ac.SetOrderAttachmentID(*id)
	}
	return ac
}

// SetOrderAttachment sets the "order_attachment" edge to the KcCourseSmallCategory entity.
func (ac *AttachmentCreate) SetOrderAttachment(k *KcCourseSmallCategory) *AttachmentCreate {
	return ac.SetOrderAttachmentID(k.ID)
}

// AddVideoTaskAttachmentIDs adds the "video_task_attachment" edge to the KcVideoUploadTask entity by IDs.
func (ac *AttachmentCreate) AddVideoTaskAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddVideoTaskAttachmentIDs(ids...)
	return ac
}

// AddVideoTaskAttachment adds the "video_task_attachment" edges to the KcVideoUploadTask entity.
func (ac *AttachmentCreate) AddVideoTaskAttachment(k ...*KcVideoUploadTask) *AttachmentCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ac.AddVideoTaskAttachmentIDs(ids...)
}

// AddAskAttachmentIDs adds the "ask_attachments" edge to the UserAskAnswerAttachment entity by IDs.
func (ac *AttachmentCreate) AddAskAttachmentIDs(ids ...int) *AttachmentCreate {
	ac.mutation.AddAskAttachmentIDs(ids...)
	return ac
}

// AddAskAttachments adds the "ask_attachments" edges to the UserAskAnswerAttachment entity.
func (ac *AttachmentCreate) AddAskAttachments(u ...*UserAskAnswerAttachment) *AttachmentCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ac.AddAskAttachmentIDs(ids...)
}

// Mutation returns the AttachmentMutation object of the builder.
func (ac *AttachmentCreate) Mutation() *AttachmentMutation {
	return ac.mutation
}

// Save creates the Attachment in the database.
func (ac *AttachmentCreate) Save(ctx context.Context) (*Attachment, error) {
	var (
		err  error
		node *Attachment
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttachmentCreate) SaveX(ctx context.Context) *Attachment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *AttachmentCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := attachment.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := attachment.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Filename(); !ok {
		v := attachment.DefaultFilename
		ac.mutation.SetFilename(v)
	}
	if _, ok := ac.mutation.FileSize(); !ok {
		v := attachment.DefaultFileSize
		ac.mutation.SetFileSize(v)
	}
	if _, ok := ac.mutation.MimeType(); !ok {
		v := attachment.DefaultMimeType
		ac.mutation.SetMimeType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttachmentCreate) check() error {
	if _, ok := ac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := ac.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New("ent: missing required field \"filename\"")}
	}
	if _, ok := ac.mutation.FileSize(); !ok {
		return &ValidationError{Name: "file_size", err: errors.New("ent: missing required field \"file_size\"")}
	}
	if _, ok := ac.mutation.MimeType(); !ok {
		return &ValidationError{Name: "mime_type", err: errors.New("ent: missing required field \"mime_type\"")}
	}
	return nil
}

func (ac *AttachmentCreate) sqlSave(ctx context.Context) (*Attachment, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AttachmentCreate) createSpec() (*Attachment, *sqlgraph.CreateSpec) {
	var (
		_node = &Attachment{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: attachment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attachment.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attachment.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attachment.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attachment.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Filename(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldFilename,
		})
		_node.Filename = value
	}
	if value, ok := ac.mutation.FileSize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: attachment.FieldFileSize,
		})
		_node.FileSize = value
	}
	if value, ok := ac.mutation.MimeType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldMimeType,
		})
		_node.MimeType = value
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := ac.mutation.AdminID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: attachment.FieldAdminID,
		})
		_node.AdminID = value
	}
	if nodes := ac.mutation.MajorDetailCoverImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailCoverImgTable,
			Columns: []string{attachment.MajorDetailCoverImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MajorDetailSubjectImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MajorDetailSubjectImgTable,
			Columns: []string{attachment.MajorDetailSubjectImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MajorTeacherAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorTeacherAttachmentTable,
			Columns: attachment.MajorTeacherAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MajorServiceAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   attachment.MajorServiceAttachmentTable,
			Columns: attachment.MajorServiceAttachmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdvertiseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AdvertiseTable,
			Columns: []string{attachment.AdvertiseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: advertise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MessageAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.MessageAttachmentTable,
			Columns: []string{attachment.MessageAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SharePosterAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SharePosterAttachmentsTable,
			Columns: []string{attachment.SharePosterAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shareposter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.TeacherAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.TeacherAttachmentsTable,
			Columns: []string{attachment.TeacherAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminImgIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.AdminImgIDTable,
			Columns: []string{attachment.AdminImgIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SmallCategoryAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.SmallCategoryAttachmentsTable,
			Columns: []string{attachment.SmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CourseAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.CourseAttachmentsTable,
			Columns: []string{attachment.CourseAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ClassCoverAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.ClassCoverAttachmentsTable,
			Columns: []string{attachment.ClassCoverAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CoursewareAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.CoursewareAttachmentTable,
			Columns: []string{attachment.CoursewareAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrderAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   attachment.OrderAttachmentTable,
			Columns: []string{attachment.OrderAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.VideoTaskAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.VideoTaskAttachmentTable,
			Columns: []string{attachment.VideoTaskAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcvideouploadtask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AskAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attachment.AskAttachmentsTable,
			Columns: []string{attachment.AskAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttachmentCreateBulk is the builder for creating many Attachment entities in bulk.
type AttachmentCreateBulk struct {
	config
	builders []*AttachmentCreate
}

// Save creates the Attachment entities in the database.
func (acb *AttachmentCreateBulk) Save(ctx context.Context) ([]*Attachment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attachment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttachmentCreateBulk) SaveX(ctx context.Context) []*Attachment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

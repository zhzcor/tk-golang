// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/groupcard"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupCardUpdate is the builder for updating GroupCard entities.
type GroupCardUpdate struct {
	config
	hooks    []Hook
	mutation *GroupCardMutation
}

// Where adds a new predicate for the GroupCardUpdate builder.
func (gcu *GroupCardUpdate) Where(ps ...predicate.GroupCard) *GroupCardUpdate {
	gcu.mutation.predicates = append(gcu.mutation.predicates, ps...)
	return gcu
}

// SetUUID sets the "uuid" field.
func (gcu *GroupCardUpdate) SetUUID(s string) *GroupCardUpdate {
	gcu.mutation.SetUUID(s)
	return gcu
}

// SetUpdatedAt sets the "updated_at" field.
func (gcu *GroupCardUpdate) SetUpdatedAt(t time.Time) *GroupCardUpdate {
	gcu.mutation.SetUpdatedAt(t)
	return gcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gcu *GroupCardUpdate) ClearUpdatedAt() *GroupCardUpdate {
	gcu.mutation.ClearUpdatedAt()
	return gcu
}

// SetDeletedAt sets the "deleted_at" field.
func (gcu *GroupCardUpdate) SetDeletedAt(t time.Time) *GroupCardUpdate {
	gcu.mutation.SetDeletedAt(t)
	return gcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gcu *GroupCardUpdate) SetNillableDeletedAt(t *time.Time) *GroupCardUpdate {
	if t != nil {
		gcu.SetDeletedAt(*t)
	}
	return gcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gcu *GroupCardUpdate) ClearDeletedAt() *GroupCardUpdate {
	gcu.mutation.ClearDeletedAt()
	return gcu
}

// SetTitle sets the "title" field.
func (gcu *GroupCardUpdate) SetTitle(s string) *GroupCardUpdate {
	gcu.mutation.SetTitle(s)
	return gcu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (gcu *GroupCardUpdate) SetNillableTitle(s *string) *GroupCardUpdate {
	if s != nil {
		gcu.SetTitle(*s)
	}
	return gcu
}

// SetSubTitle sets the "sub_title" field.
func (gcu *GroupCardUpdate) SetSubTitle(s string) *GroupCardUpdate {
	gcu.mutation.SetSubTitle(s)
	return gcu
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (gcu *GroupCardUpdate) SetNillableSubTitle(s *string) *GroupCardUpdate {
	if s != nil {
		gcu.SetSubTitle(*s)
	}
	return gcu
}

// SetStatus sets the "status" field.
func (gcu *GroupCardUpdate) SetStatus(u uint8) *GroupCardUpdate {
	gcu.mutation.ResetStatus()
	gcu.mutation.SetStatus(u)
	return gcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gcu *GroupCardUpdate) SetNillableStatus(u *uint8) *GroupCardUpdate {
	if u != nil {
		gcu.SetStatus(*u)
	}
	return gcu
}

// AddStatus adds u to the "status" field.
func (gcu *GroupCardUpdate) AddStatus(u uint8) *GroupCardUpdate {
	gcu.mutation.AddStatus(u)
	return gcu
}

// SetDesc sets the "desc" field.
func (gcu *GroupCardUpdate) SetDesc(s string) *GroupCardUpdate {
	gcu.mutation.SetDesc(s)
	return gcu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (gcu *GroupCardUpdate) SetNillableDesc(s *string) *GroupCardUpdate {
	if s != nil {
		gcu.SetDesc(*s)
	}
	return gcu
}

// SetSortOrder sets the "sort_order" field.
func (gcu *GroupCardUpdate) SetSortOrder(i int) *GroupCardUpdate {
	gcu.mutation.ResetSortOrder()
	gcu.mutation.SetSortOrder(i)
	return gcu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (gcu *GroupCardUpdate) SetNillableSortOrder(i *int) *GroupCardUpdate {
	if i != nil {
		gcu.SetSortOrder(*i)
	}
	return gcu
}

// AddSortOrder adds i to the "sort_order" field.
func (gcu *GroupCardUpdate) AddSortOrder(i int) *GroupCardUpdate {
	gcu.mutation.AddSortOrder(i)
	return gcu
}

// SetAttachmentID sets the "attachment_id" field.
func (gcu *GroupCardUpdate) SetAttachmentID(i int) *GroupCardUpdate {
	gcu.mutation.ResetAttachmentID()
	gcu.mutation.SetAttachmentID(i)
	return gcu
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (gcu *GroupCardUpdate) SetNillableAttachmentID(i *int) *GroupCardUpdate {
	if i != nil {
		gcu.SetAttachmentID(*i)
	}
	return gcu
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (gcu *GroupCardUpdate) ClearAttachmentID() *GroupCardUpdate {
	gcu.mutation.ClearAttachmentID()
	return gcu
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (gcu *GroupCardUpdate) SetAttachment(a *Attachment) *GroupCardUpdate {
	return gcu.SetAttachmentID(a.ID)
}

// Mutation returns the GroupCardMutation object of the builder.
func (gcu *GroupCardUpdate) Mutation() *GroupCardMutation {
	return gcu.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (gcu *GroupCardUpdate) ClearAttachment() *GroupCardUpdate {
	gcu.mutation.ClearAttachment()
	return gcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcu *GroupCardUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gcu.defaults()
	if len(gcu.hooks) == 0 {
		affected, err = gcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupCardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gcu.mutation = mutation
			affected, err = gcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gcu.hooks) - 1; i >= 0; i-- {
			mut = gcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GroupCardUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GroupCardUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GroupCardUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcu *GroupCardUpdate) defaults() {
	if _, ok := gcu.mutation.UpdatedAt(); !ok && !gcu.mutation.UpdatedAtCleared() {
		v := groupcard.UpdateDefaultUpdatedAt()
		gcu.mutation.SetUpdatedAt(v)
	}
}

func (gcu *GroupCardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupcard.Table,
			Columns: groupcard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupcard.FieldID,
			},
		},
	}
	if ps := gcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupcard.FieldUUID,
		})
	}
	if gcu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupcard.FieldCreatedAt,
		})
	}
	if value, ok := gcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupcard.FieldUpdatedAt,
		})
	}
	if gcu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupcard.FieldUpdatedAt,
		})
	}
	if value, ok := gcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupcard.FieldDeletedAt,
		})
	}
	if gcu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupcard.FieldDeletedAt,
		})
	}
	if value, ok := gcu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupcard.FieldTitle,
		})
	}
	if value, ok := gcu.mutation.SubTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupcard.FieldSubTitle,
		})
	}
	if value, ok := gcu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: groupcard.FieldStatus,
		})
	}
	if value, ok := gcu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: groupcard.FieldStatus,
		})
	}
	if value, ok := gcu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupcard.FieldDesc,
		})
	}
	if value, ok := gcu.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupcard.FieldSortOrder,
		})
	}
	if value, ok := gcu.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupcard.FieldSortOrder,
		})
	}
	if gcu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupcard.AttachmentTable,
			Columns: []string{groupcard.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupcard.AttachmentTable,
			Columns: []string{groupcard.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupcard.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GroupCardUpdateOne is the builder for updating a single GroupCard entity.
type GroupCardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupCardMutation
}

// SetUUID sets the "uuid" field.
func (gcuo *GroupCardUpdateOne) SetUUID(s string) *GroupCardUpdateOne {
	gcuo.mutation.SetUUID(s)
	return gcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (gcuo *GroupCardUpdateOne) SetUpdatedAt(t time.Time) *GroupCardUpdateOne {
	gcuo.mutation.SetUpdatedAt(t)
	return gcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gcuo *GroupCardUpdateOne) ClearUpdatedAt() *GroupCardUpdateOne {
	gcuo.mutation.ClearUpdatedAt()
	return gcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gcuo *GroupCardUpdateOne) SetDeletedAt(t time.Time) *GroupCardUpdateOne {
	gcuo.mutation.SetDeletedAt(t)
	return gcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gcuo *GroupCardUpdateOne) SetNillableDeletedAt(t *time.Time) *GroupCardUpdateOne {
	if t != nil {
		gcuo.SetDeletedAt(*t)
	}
	return gcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gcuo *GroupCardUpdateOne) ClearDeletedAt() *GroupCardUpdateOne {
	gcuo.mutation.ClearDeletedAt()
	return gcuo
}

// SetTitle sets the "title" field.
func (gcuo *GroupCardUpdateOne) SetTitle(s string) *GroupCardUpdateOne {
	gcuo.mutation.SetTitle(s)
	return gcuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (gcuo *GroupCardUpdateOne) SetNillableTitle(s *string) *GroupCardUpdateOne {
	if s != nil {
		gcuo.SetTitle(*s)
	}
	return gcuo
}

// SetSubTitle sets the "sub_title" field.
func (gcuo *GroupCardUpdateOne) SetSubTitle(s string) *GroupCardUpdateOne {
	gcuo.mutation.SetSubTitle(s)
	return gcuo
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (gcuo *GroupCardUpdateOne) SetNillableSubTitle(s *string) *GroupCardUpdateOne {
	if s != nil {
		gcuo.SetSubTitle(*s)
	}
	return gcuo
}

// SetStatus sets the "status" field.
func (gcuo *GroupCardUpdateOne) SetStatus(u uint8) *GroupCardUpdateOne {
	gcuo.mutation.ResetStatus()
	gcuo.mutation.SetStatus(u)
	return gcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gcuo *GroupCardUpdateOne) SetNillableStatus(u *uint8) *GroupCardUpdateOne {
	if u != nil {
		gcuo.SetStatus(*u)
	}
	return gcuo
}

// AddStatus adds u to the "status" field.
func (gcuo *GroupCardUpdateOne) AddStatus(u uint8) *GroupCardUpdateOne {
	gcuo.mutation.AddStatus(u)
	return gcuo
}

// SetDesc sets the "desc" field.
func (gcuo *GroupCardUpdateOne) SetDesc(s string) *GroupCardUpdateOne {
	gcuo.mutation.SetDesc(s)
	return gcuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (gcuo *GroupCardUpdateOne) SetNillableDesc(s *string) *GroupCardUpdateOne {
	if s != nil {
		gcuo.SetDesc(*s)
	}
	return gcuo
}

// SetSortOrder sets the "sort_order" field.
func (gcuo *GroupCardUpdateOne) SetSortOrder(i int) *GroupCardUpdateOne {
	gcuo.mutation.ResetSortOrder()
	gcuo.mutation.SetSortOrder(i)
	return gcuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (gcuo *GroupCardUpdateOne) SetNillableSortOrder(i *int) *GroupCardUpdateOne {
	if i != nil {
		gcuo.SetSortOrder(*i)
	}
	return gcuo
}

// AddSortOrder adds i to the "sort_order" field.
func (gcuo *GroupCardUpdateOne) AddSortOrder(i int) *GroupCardUpdateOne {
	gcuo.mutation.AddSortOrder(i)
	return gcuo
}

// SetAttachmentID sets the "attachment_id" field.
func (gcuo *GroupCardUpdateOne) SetAttachmentID(i int) *GroupCardUpdateOne {
	gcuo.mutation.ResetAttachmentID()
	gcuo.mutation.SetAttachmentID(i)
	return gcuo
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (gcuo *GroupCardUpdateOne) SetNillableAttachmentID(i *int) *GroupCardUpdateOne {
	if i != nil {
		gcuo.SetAttachmentID(*i)
	}
	return gcuo
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (gcuo *GroupCardUpdateOne) ClearAttachmentID() *GroupCardUpdateOne {
	gcuo.mutation.ClearAttachmentID()
	return gcuo
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (gcuo *GroupCardUpdateOne) SetAttachment(a *Attachment) *GroupCardUpdateOne {
	return gcuo.SetAttachmentID(a.ID)
}

// Mutation returns the GroupCardMutation object of the builder.
func (gcuo *GroupCardUpdateOne) Mutation() *GroupCardMutation {
	return gcuo.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (gcuo *GroupCardUpdateOne) ClearAttachment() *GroupCardUpdateOne {
	gcuo.mutation.ClearAttachment()
	return gcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcuo *GroupCardUpdateOne) Select(field string, fields ...string) *GroupCardUpdateOne {
	gcuo.fields = append([]string{field}, fields...)
	return gcuo
}

// Save executes the query and returns the updated GroupCard entity.
func (gcuo *GroupCardUpdateOne) Save(ctx context.Context) (*GroupCard, error) {
	var (
		err  error
		node *GroupCard
	)
	gcuo.defaults()
	if len(gcuo.hooks) == 0 {
		node, err = gcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupCardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gcuo.mutation = mutation
			node, err = gcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gcuo.hooks) - 1; i >= 0; i-- {
			mut = gcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GroupCardUpdateOne) SaveX(ctx context.Context) *GroupCard {
	node, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcuo *GroupCardUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GroupCardUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcuo *GroupCardUpdateOne) defaults() {
	if _, ok := gcuo.mutation.UpdatedAt(); !ok && !gcuo.mutation.UpdatedAtCleared() {
		v := groupcard.UpdateDefaultUpdatedAt()
		gcuo.mutation.SetUpdatedAt(v)
	}
}

func (gcuo *GroupCardUpdateOne) sqlSave(ctx context.Context) (_node *GroupCard, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupcard.Table,
			Columns: groupcard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupcard.FieldID,
			},
		},
	}
	id, ok := gcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GroupCard.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupcard.FieldID)
		for _, f := range fields {
			if !groupcard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupcard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupcard.FieldUUID,
		})
	}
	if gcuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupcard.FieldCreatedAt,
		})
	}
	if value, ok := gcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupcard.FieldUpdatedAt,
		})
	}
	if gcuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupcard.FieldUpdatedAt,
		})
	}
	if value, ok := gcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupcard.FieldDeletedAt,
		})
	}
	if gcuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groupcard.FieldDeletedAt,
		})
	}
	if value, ok := gcuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupcard.FieldTitle,
		})
	}
	if value, ok := gcuo.mutation.SubTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupcard.FieldSubTitle,
		})
	}
	if value, ok := gcuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: groupcard.FieldStatus,
		})
	}
	if value, ok := gcuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: groupcard.FieldStatus,
		})
	}
	if value, ok := gcuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupcard.FieldDesc,
		})
	}
	if value, ok := gcuo.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupcard.FieldSortOrder,
		})
	}
	if value, ok := gcuo.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupcard.FieldSortOrder,
		})
	}
	if gcuo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupcard.AttachmentTable,
			Columns: []string{groupcard.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupcard.AttachmentTable,
			Columns: []string{groupcard.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupCard{config: gcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupcard.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/adminoperationlog"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminOperationLogQuery is the builder for querying AdminOperationLog entities.
type AdminOperationLogQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AdminOperationLog
	// eager-loading edges.
	withAdmin *AdminQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdminOperationLogQuery builder.
func (aolq *AdminOperationLogQuery) Where(ps ...predicate.AdminOperationLog) *AdminOperationLogQuery {
	aolq.predicates = append(aolq.predicates, ps...)
	return aolq
}

// Limit adds a limit step to the query.
func (aolq *AdminOperationLogQuery) Limit(limit int) *AdminOperationLogQuery {
	aolq.limit = &limit
	return aolq
}

// Offset adds an offset step to the query.
func (aolq *AdminOperationLogQuery) Offset(offset int) *AdminOperationLogQuery {
	aolq.offset = &offset
	return aolq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aolq *AdminOperationLogQuery) Unique(unique bool) *AdminOperationLogQuery {
	aolq.unique = &unique
	return aolq
}

// Order adds an order step to the query.
func (aolq *AdminOperationLogQuery) Order(o ...OrderFunc) *AdminOperationLogQuery {
	aolq.order = append(aolq.order, o...)
	return aolq
}

// QueryAdmin chains the current query on the "admin" edge.
func (aolq *AdminOperationLogQuery) QueryAdmin() *AdminQuery {
	query := &AdminQuery{config: aolq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aolq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aolq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adminoperationlog.Table, adminoperationlog.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminoperationlog.AdminTable, adminoperationlog.AdminColumn),
		)
		fromU = sqlgraph.SetNeighbors(aolq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AdminOperationLog entity from the query.
// Returns a *NotFoundError when no AdminOperationLog was found.
func (aolq *AdminOperationLogQuery) First(ctx context.Context) (*AdminOperationLog, error) {
	nodes, err := aolq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{adminoperationlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aolq *AdminOperationLogQuery) FirstX(ctx context.Context) *AdminOperationLog {
	node, err := aolq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AdminOperationLog ID from the query.
// Returns a *NotFoundError when no AdminOperationLog ID was found.
func (aolq *AdminOperationLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aolq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{adminoperationlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aolq *AdminOperationLogQuery) FirstIDX(ctx context.Context) int {
	id, err := aolq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AdminOperationLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AdminOperationLog entity is not found.
// Returns a *NotFoundError when no AdminOperationLog entities are found.
func (aolq *AdminOperationLogQuery) Only(ctx context.Context) (*AdminOperationLog, error) {
	nodes, err := aolq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{adminoperationlog.Label}
	default:
		return nil, &NotSingularError{adminoperationlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aolq *AdminOperationLogQuery) OnlyX(ctx context.Context) *AdminOperationLog {
	node, err := aolq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AdminOperationLog ID in the query.
// Returns a *NotSingularError when exactly one AdminOperationLog ID is not found.
// Returns a *NotFoundError when no entities are found.
func (aolq *AdminOperationLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aolq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{adminoperationlog.Label}
	default:
		err = &NotSingularError{adminoperationlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aolq *AdminOperationLogQuery) OnlyIDX(ctx context.Context) int {
	id, err := aolq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AdminOperationLogs.
func (aolq *AdminOperationLogQuery) All(ctx context.Context) ([]*AdminOperationLog, error) {
	if err := aolq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aolq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aolq *AdminOperationLogQuery) AllX(ctx context.Context) []*AdminOperationLog {
	nodes, err := aolq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AdminOperationLog IDs.
func (aolq *AdminOperationLogQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aolq.Select(adminoperationlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aolq *AdminOperationLogQuery) IDsX(ctx context.Context) []int {
	ids, err := aolq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aolq *AdminOperationLogQuery) Count(ctx context.Context) (int, error) {
	if err := aolq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aolq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aolq *AdminOperationLogQuery) CountX(ctx context.Context) int {
	count, err := aolq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aolq *AdminOperationLogQuery) Exist(ctx context.Context) (bool, error) {
	if err := aolq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aolq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aolq *AdminOperationLogQuery) ExistX(ctx context.Context) bool {
	exist, err := aolq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdminOperationLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aolq *AdminOperationLogQuery) Clone() *AdminOperationLogQuery {
	if aolq == nil {
		return nil
	}
	return &AdminOperationLogQuery{
		config:     aolq.config,
		limit:      aolq.limit,
		offset:     aolq.offset,
		order:      append([]OrderFunc{}, aolq.order...),
		predicates: append([]predicate.AdminOperationLog{}, aolq.predicates...),
		withAdmin:  aolq.withAdmin.Clone(),
		// clone intermediate query.
		sql:  aolq.sql.Clone(),
		path: aolq.path,
	}
}

// WithAdmin tells the query-builder to eager-load the nodes that are connected to
// the "admin" edge. The optional arguments are used to configure the query builder of the edge.
func (aolq *AdminOperationLogQuery) WithAdmin(opts ...func(*AdminQuery)) *AdminOperationLogQuery {
	query := &AdminQuery{config: aolq.config}
	for _, opt := range opts {
		opt(query)
	}
	aolq.withAdmin = query
	return aolq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AdminOperationLog.Query().
//		GroupBy(adminoperationlog.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aolq *AdminOperationLogQuery) GroupBy(field string, fields ...string) *AdminOperationLogGroupBy {
	group := &AdminOperationLogGroupBy{config: aolq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aolq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aolq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.AdminOperationLog.Query().
//		Select(adminoperationlog.FieldUUID).
//		Scan(ctx, &v)
//
func (aolq *AdminOperationLogQuery) Select(field string, fields ...string) *AdminOperationLogSelect {
	aolq.fields = append([]string{field}, fields...)
	return &AdminOperationLogSelect{AdminOperationLogQuery: aolq}
}

func (aolq *AdminOperationLogQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aolq.fields {
		if !adminoperationlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aolq.path != nil {
		prev, err := aolq.path(ctx)
		if err != nil {
			return err
		}
		aolq.sql = prev
	}
	return nil
}

func (aolq *AdminOperationLogQuery) sqlAll(ctx context.Context) ([]*AdminOperationLog, error) {
	var (
		nodes       = []*AdminOperationLog{}
		_spec       = aolq.querySpec()
		loadedTypes = [1]bool{
			aolq.withAdmin != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AdminOperationLog{config: aolq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, aolq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := aolq.withAdmin; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AdminOperationLog)
		for i := range nodes {
			fk := nodes[i].AdminID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(admin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "admin_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Admin = n
			}
		}
	}

	return nodes, nil
}

func (aolq *AdminOperationLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aolq.querySpec()
	return sqlgraph.CountNodes(ctx, aolq.driver, _spec)
}

func (aolq *AdminOperationLogQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aolq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (aolq *AdminOperationLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminoperationlog.Table,
			Columns: adminoperationlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminoperationlog.FieldID,
			},
		},
		From:   aolq.sql,
		Unique: true,
	}
	if unique := aolq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aolq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminoperationlog.FieldID)
		for i := range fields {
			if fields[i] != adminoperationlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aolq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aolq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aolq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aolq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aolq *AdminOperationLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aolq.driver.Dialect())
	t1 := builder.Table(adminoperationlog.Table)
	selector := builder.Select(t1.Columns(adminoperationlog.Columns...)...).From(t1)
	if aolq.sql != nil {
		selector = aolq.sql
		selector.Select(selector.Columns(adminoperationlog.Columns...)...)
	}
	for _, p := range aolq.predicates {
		p(selector)
	}
	for _, p := range aolq.order {
		p(selector)
	}
	if offset := aolq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aolq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AdminOperationLogGroupBy is the group-by builder for AdminOperationLog entities.
type AdminOperationLogGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aolgb *AdminOperationLogGroupBy) Aggregate(fns ...AggregateFunc) *AdminOperationLogGroupBy {
	aolgb.fns = append(aolgb.fns, fns...)
	return aolgb
}

// Scan applies the group-by query and scans the result into the given value.
func (aolgb *AdminOperationLogGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := aolgb.path(ctx)
	if err != nil {
		return err
	}
	aolgb.sql = query
	return aolgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aolgb *AdminOperationLogGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := aolgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (aolgb *AdminOperationLogGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(aolgb.fields) > 1 {
		return nil, errors.New("ent: AdminOperationLogGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := aolgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aolgb *AdminOperationLogGroupBy) StringsX(ctx context.Context) []string {
	v, err := aolgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aolgb *AdminOperationLogGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aolgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminoperationlog.Label}
	default:
		err = fmt.Errorf("ent: AdminOperationLogGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aolgb *AdminOperationLogGroupBy) StringX(ctx context.Context) string {
	v, err := aolgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (aolgb *AdminOperationLogGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(aolgb.fields) > 1 {
		return nil, errors.New("ent: AdminOperationLogGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := aolgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aolgb *AdminOperationLogGroupBy) IntsX(ctx context.Context) []int {
	v, err := aolgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aolgb *AdminOperationLogGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aolgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminoperationlog.Label}
	default:
		err = fmt.Errorf("ent: AdminOperationLogGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aolgb *AdminOperationLogGroupBy) IntX(ctx context.Context) int {
	v, err := aolgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (aolgb *AdminOperationLogGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(aolgb.fields) > 1 {
		return nil, errors.New("ent: AdminOperationLogGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := aolgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aolgb *AdminOperationLogGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := aolgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aolgb *AdminOperationLogGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aolgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminoperationlog.Label}
	default:
		err = fmt.Errorf("ent: AdminOperationLogGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aolgb *AdminOperationLogGroupBy) Float64X(ctx context.Context) float64 {
	v, err := aolgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (aolgb *AdminOperationLogGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(aolgb.fields) > 1 {
		return nil, errors.New("ent: AdminOperationLogGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := aolgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aolgb *AdminOperationLogGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := aolgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aolgb *AdminOperationLogGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aolgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminoperationlog.Label}
	default:
		err = fmt.Errorf("ent: AdminOperationLogGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aolgb *AdminOperationLogGroupBy) BoolX(ctx context.Context) bool {
	v, err := aolgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aolgb *AdminOperationLogGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range aolgb.fields {
		if !adminoperationlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := aolgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aolgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aolgb *AdminOperationLogGroupBy) sqlQuery() *sql.Selector {
	selector := aolgb.sql
	columns := make([]string, 0, len(aolgb.fields)+len(aolgb.fns))
	columns = append(columns, aolgb.fields...)
	for _, fn := range aolgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(aolgb.fields...)
}

// AdminOperationLogSelect is the builder for selecting fields of AdminOperationLog entities.
type AdminOperationLogSelect struct {
	*AdminOperationLogQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aols *AdminOperationLogSelect) Scan(ctx context.Context, v interface{}) error {
	if err := aols.prepareQuery(ctx); err != nil {
		return err
	}
	aols.sql = aols.AdminOperationLogQuery.sqlQuery(ctx)
	return aols.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aols *AdminOperationLogSelect) ScanX(ctx context.Context, v interface{}) {
	if err := aols.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (aols *AdminOperationLogSelect) Strings(ctx context.Context) ([]string, error) {
	if len(aols.fields) > 1 {
		return nil, errors.New("ent: AdminOperationLogSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := aols.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aols *AdminOperationLogSelect) StringsX(ctx context.Context) []string {
	v, err := aols.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (aols *AdminOperationLogSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aols.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminoperationlog.Label}
	default:
		err = fmt.Errorf("ent: AdminOperationLogSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aols *AdminOperationLogSelect) StringX(ctx context.Context) string {
	v, err := aols.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (aols *AdminOperationLogSelect) Ints(ctx context.Context) ([]int, error) {
	if len(aols.fields) > 1 {
		return nil, errors.New("ent: AdminOperationLogSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := aols.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aols *AdminOperationLogSelect) IntsX(ctx context.Context) []int {
	v, err := aols.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (aols *AdminOperationLogSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aols.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminoperationlog.Label}
	default:
		err = fmt.Errorf("ent: AdminOperationLogSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aols *AdminOperationLogSelect) IntX(ctx context.Context) int {
	v, err := aols.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (aols *AdminOperationLogSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(aols.fields) > 1 {
		return nil, errors.New("ent: AdminOperationLogSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := aols.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aols *AdminOperationLogSelect) Float64sX(ctx context.Context) []float64 {
	v, err := aols.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (aols *AdminOperationLogSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aols.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminoperationlog.Label}
	default:
		err = fmt.Errorf("ent: AdminOperationLogSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aols *AdminOperationLogSelect) Float64X(ctx context.Context) float64 {
	v, err := aols.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (aols *AdminOperationLogSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(aols.fields) > 1 {
		return nil, errors.New("ent: AdminOperationLogSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := aols.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aols *AdminOperationLogSelect) BoolsX(ctx context.Context) []bool {
	v, err := aols.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (aols *AdminOperationLogSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aols.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminoperationlog.Label}
	default:
		err = fmt.Errorf("ent: AdminOperationLogSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aols *AdminOperationLogSelect) BoolX(ctx context.Context) bool {
	v, err := aols.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aols *AdminOperationLogSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := aols.sqlQuery().Query()
	if err := aols.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aols *AdminOperationLogSelect) sqlQuery() sql.Querier {
	selector := aols.sql
	selector.Select(selector.Columns(aols.fields...)...)
	return selector
}

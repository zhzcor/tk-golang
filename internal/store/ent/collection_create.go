// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/collection"
	"gserver/internal/store/ent/tkquestion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectionCreate is the builder for creating a Collection entity.
type CollectionCreate struct {
	config
	mutation *CollectionMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (cc *CollectionCreate) SetUUID(s string) *CollectionCreate {
	cc.mutation.SetUUID(s)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CollectionCreate) SetCreatedAt(t time.Time) *CollectionCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableCreatedAt(t *time.Time) *CollectionCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CollectionCreate) SetUpdatedAt(t time.Time) *CollectionCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableUpdatedAt(t *time.Time) *CollectionCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CollectionCreate) SetDeletedAt(t time.Time) *CollectionCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableDeletedAt(t *time.Time) *CollectionCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CollectionCreate) SetType(i int) *CollectionCreate {
	cc.mutation.SetType(i)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableType(i *int) *CollectionCreate {
	if i != nil {
		cc.SetType(*i)
	}
	return cc
}

// SetValueID sets the "value_id" field.
func (cc *CollectionCreate) SetValueID(i int) *CollectionCreate {
	cc.mutation.SetValueID(i)
	return cc
}

// SetNillableValueID sets the "value_id" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableValueID(i *int) *CollectionCreate {
	if i != nil {
		cc.SetValueID(*i)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CollectionCreate) SetUserID(i int) *CollectionCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableUserID(i *int) *CollectionCreate {
	if i != nil {
		cc.SetUserID(*i)
	}
	return cc
}

// SetExamID sets the "exam_id" field.
func (cc *CollectionCreate) SetExamID(i int) *CollectionCreate {
	cc.mutation.SetExamID(i)
	return cc
}

// SetNillableExamID sets the "exam_id" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableExamID(i *int) *CollectionCreate {
	if i != nil {
		cc.SetExamID(*i)
	}
	return cc
}

// SetSecID sets the "sec_id" field.
func (cc *CollectionCreate) SetSecID(i int) *CollectionCreate {
	cc.mutation.SetSecID(i)
	return cc
}

// SetNillableSecID sets the "sec_id" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableSecID(i *int) *CollectionCreate {
	if i != nil {
		cc.SetSecID(*i)
	}
	return cc
}

// SetQuestionBankID sets the "question_bank_id" field.
func (cc *CollectionCreate) SetQuestionBankID(i int) *CollectionCreate {
	cc.mutation.SetQuestionBankID(i)
	return cc
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableQuestionBankID(i *int) *CollectionCreate {
	if i != nil {
		cc.SetQuestionBankID(*i)
	}
	return cc
}

// SetExamQuestionType sets the "exam_question_type" field.
func (cc *CollectionCreate) SetExamQuestionType(i int) *CollectionCreate {
	cc.mutation.SetExamQuestionType(i)
	return cc
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableExamQuestionType(i *int) *CollectionCreate {
	if i != nil {
		cc.SetExamQuestionType(*i)
	}
	return cc
}

// SetQuestionID sets the "question" edge to the TkQuestion entity by ID.
func (cc *CollectionCreate) SetQuestionID(id int) *CollectionCreate {
	cc.mutation.SetQuestionID(id)
	return cc
}

// SetNillableQuestionID sets the "question" edge to the TkQuestion entity by ID if the given value is not nil.
func (cc *CollectionCreate) SetNillableQuestionID(id *int) *CollectionCreate {
	if id != nil {
		cc = cc.SetQuestionID(*id)
	}
	return cc
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (cc *CollectionCreate) SetQuestion(t *TkQuestion) *CollectionCreate {
	return cc.SetQuestionID(t.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cc *CollectionCreate) Mutation() *CollectionMutation {
	return cc.mutation
}

// Save creates the Collection in the database.
func (cc *CollectionCreate) Save(ctx context.Context) (*Collection, error) {
	var (
		err  error
		node *Collection
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CollectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CollectionCreate) SaveX(ctx context.Context) *Collection {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *CollectionCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := collection.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := collection.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CollectionCreate) check() error {
	if _, ok := cc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	return nil
}

func (cc *CollectionCreate) sqlSave(ctx context.Context) (*Collection, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CollectionCreate) createSpec() (*Collection, *sqlgraph.CreateSpec) {
	var (
		_node = &Collection{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: collection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: collection.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collection.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collection.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collection.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collection.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldType,
		})
		_node.Type = value
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := cc.mutation.ExamID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamID,
		})
		_node.ExamID = value
	}
	if value, ok := cc.mutation.SecID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldSecID,
		})
		_node.SecID = value
	}
	if value, ok := cc.mutation.QuestionBankID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldQuestionBankID,
		})
		_node.QuestionBankID = value
	}
	if value, ok := cc.mutation.ExamQuestionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamQuestionType,
		})
		_node.ExamQuestionType = value
	}
	if nodes := cc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.QuestionTable,
			Columns: []string{collection.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ValueID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CollectionCreateBulk is the builder for creating many Collection entities in bulk.
type CollectionCreateBulk struct {
	config
	builders []*CollectionCreate
}

// Save creates the Collection entities in the database.
func (ccb *CollectionCreateBulk) Save(ctx context.Context) ([]*Collection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Collection, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CollectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CollectionCreateBulk) SaveX(ctx context.Context) []*Collection {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

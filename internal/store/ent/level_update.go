// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/level"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkquestionbank"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LevelUpdate is the builder for updating Level entities.
type LevelUpdate struct {
	config
	hooks    []Hook
	mutation *LevelMutation
}

// Where adds a new predicate for the LevelUpdate builder.
func (lu *LevelUpdate) Where(ps ...predicate.Level) *LevelUpdate {
	lu.mutation.predicates = append(lu.mutation.predicates, ps...)
	return lu
}

// SetUUID sets the "uuid" field.
func (lu *LevelUpdate) SetUUID(s string) *LevelUpdate {
	lu.mutation.SetUUID(s)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LevelUpdate) SetUpdatedAt(t time.Time) *LevelUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (lu *LevelUpdate) ClearUpdatedAt() *LevelUpdate {
	lu.mutation.ClearUpdatedAt()
	return lu
}

// SetDeletedAt sets the "deleted_at" field.
func (lu *LevelUpdate) SetDeletedAt(t time.Time) *LevelUpdate {
	lu.mutation.SetDeletedAt(t)
	return lu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lu *LevelUpdate) SetNillableDeletedAt(t *time.Time) *LevelUpdate {
	if t != nil {
		lu.SetDeletedAt(*t)
	}
	return lu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (lu *LevelUpdate) ClearDeletedAt() *LevelUpdate {
	lu.mutation.ClearDeletedAt()
	return lu
}

// SetName sets the "name" field.
func (lu *LevelUpdate) SetName(s string) *LevelUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lu *LevelUpdate) SetNillableName(s *string) *LevelUpdate {
	if s != nil {
		lu.SetName(*s)
	}
	return lu
}

// SetStatus sets the "status" field.
func (lu *LevelUpdate) SetStatus(u uint8) *LevelUpdate {
	lu.mutation.ResetStatus()
	lu.mutation.SetStatus(u)
	return lu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lu *LevelUpdate) SetNillableStatus(u *uint8) *LevelUpdate {
	if u != nil {
		lu.SetStatus(*u)
	}
	return lu
}

// AddStatus adds u to the "status" field.
func (lu *LevelUpdate) AddStatus(u uint8) *LevelUpdate {
	lu.mutation.AddStatus(u)
	return lu
}

// SetCode sets the "code" field.
func (lu *LevelUpdate) SetCode(s string) *LevelUpdate {
	lu.mutation.SetCode(s)
	return lu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (lu *LevelUpdate) SetNillableCode(s *string) *LevelUpdate {
	if s != nil {
		lu.SetCode(*s)
	}
	return lu
}

// SetDesc sets the "desc" field.
func (lu *LevelUpdate) SetDesc(s string) *LevelUpdate {
	lu.mutation.SetDesc(s)
	return lu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (lu *LevelUpdate) SetNillableDesc(s *string) *LevelUpdate {
	if s != nil {
		lu.SetDesc(*s)
	}
	return lu
}

// SetSortOrder sets the "sort_order" field.
func (lu *LevelUpdate) SetSortOrder(i int) *LevelUpdate {
	lu.mutation.ResetSortOrder()
	lu.mutation.SetSortOrder(i)
	return lu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (lu *LevelUpdate) SetNillableSortOrder(i *int) *LevelUpdate {
	if i != nil {
		lu.SetSortOrder(*i)
	}
	return lu
}

// AddSortOrder adds i to the "sort_order" field.
func (lu *LevelUpdate) AddSortOrder(i int) *LevelUpdate {
	lu.mutation.AddSortOrder(i)
	return lu
}

// AddLevelQuestionBankIDs adds the "level_question_banks" edge to the TkQuestionBank entity by IDs.
func (lu *LevelUpdate) AddLevelQuestionBankIDs(ids ...int) *LevelUpdate {
	lu.mutation.AddLevelQuestionBankIDs(ids...)
	return lu
}

// AddLevelQuestionBanks adds the "level_question_banks" edges to the TkQuestionBank entity.
func (lu *LevelUpdate) AddLevelQuestionBanks(t ...*TkQuestionBank) *LevelUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lu.AddLevelQuestionBankIDs(ids...)
}

// Mutation returns the LevelMutation object of the builder.
func (lu *LevelUpdate) Mutation() *LevelMutation {
	return lu.mutation
}

// ClearLevelQuestionBanks clears all "level_question_banks" edges to the TkQuestionBank entity.
func (lu *LevelUpdate) ClearLevelQuestionBanks() *LevelUpdate {
	lu.mutation.ClearLevelQuestionBanks()
	return lu
}

// RemoveLevelQuestionBankIDs removes the "level_question_banks" edge to TkQuestionBank entities by IDs.
func (lu *LevelUpdate) RemoveLevelQuestionBankIDs(ids ...int) *LevelUpdate {
	lu.mutation.RemoveLevelQuestionBankIDs(ids...)
	return lu
}

// RemoveLevelQuestionBanks removes "level_question_banks" edges to TkQuestionBank entities.
func (lu *LevelUpdate) RemoveLevelQuestionBanks(t ...*TkQuestionBank) *LevelUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lu.RemoveLevelQuestionBankIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LevelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	lu.defaults()
	if len(lu.hooks) == 0 {
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LevelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LevelUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LevelUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LevelUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LevelUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok && !lu.mutation.UpdatedAtCleared() {
		v := level.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

func (lu *LevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   level.Table,
			Columns: level.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: level.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldUUID,
		})
	}
	if lu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: level.FieldCreatedAt,
		})
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: level.FieldUpdatedAt,
		})
	}
	if lu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: level.FieldUpdatedAt,
		})
	}
	if value, ok := lu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: level.FieldDeletedAt,
		})
	}
	if lu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: level.FieldDeletedAt,
		})
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldName,
		})
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: level.FieldStatus,
		})
	}
	if value, ok := lu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: level.FieldStatus,
		})
	}
	if value, ok := lu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldCode,
		})
	}
	if value, ok := lu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldDesc,
		})
	}
	if value, ok := lu.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: level.FieldSortOrder,
		})
	}
	if value, ok := lu.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: level.FieldSortOrder,
		})
	}
	if lu.mutation.LevelQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   level.LevelQuestionBanksTable,
			Columns: []string{level.LevelQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLevelQuestionBanksIDs(); len(nodes) > 0 && !lu.mutation.LevelQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   level.LevelQuestionBanksTable,
			Columns: []string{level.LevelQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LevelQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   level.LevelQuestionBanksTable,
			Columns: []string{level.LevelQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{level.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LevelUpdateOne is the builder for updating a single Level entity.
type LevelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LevelMutation
}

// SetUUID sets the "uuid" field.
func (luo *LevelUpdateOne) SetUUID(s string) *LevelUpdateOne {
	luo.mutation.SetUUID(s)
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LevelUpdateOne) SetUpdatedAt(t time.Time) *LevelUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (luo *LevelUpdateOne) ClearUpdatedAt() *LevelUpdateOne {
	luo.mutation.ClearUpdatedAt()
	return luo
}

// SetDeletedAt sets the "deleted_at" field.
func (luo *LevelUpdateOne) SetDeletedAt(t time.Time) *LevelUpdateOne {
	luo.mutation.SetDeletedAt(t)
	return luo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (luo *LevelUpdateOne) SetNillableDeletedAt(t *time.Time) *LevelUpdateOne {
	if t != nil {
		luo.SetDeletedAt(*t)
	}
	return luo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (luo *LevelUpdateOne) ClearDeletedAt() *LevelUpdateOne {
	luo.mutation.ClearDeletedAt()
	return luo
}

// SetName sets the "name" field.
func (luo *LevelUpdateOne) SetName(s string) *LevelUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (luo *LevelUpdateOne) SetNillableName(s *string) *LevelUpdateOne {
	if s != nil {
		luo.SetName(*s)
	}
	return luo
}

// SetStatus sets the "status" field.
func (luo *LevelUpdateOne) SetStatus(u uint8) *LevelUpdateOne {
	luo.mutation.ResetStatus()
	luo.mutation.SetStatus(u)
	return luo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (luo *LevelUpdateOne) SetNillableStatus(u *uint8) *LevelUpdateOne {
	if u != nil {
		luo.SetStatus(*u)
	}
	return luo
}

// AddStatus adds u to the "status" field.
func (luo *LevelUpdateOne) AddStatus(u uint8) *LevelUpdateOne {
	luo.mutation.AddStatus(u)
	return luo
}

// SetCode sets the "code" field.
func (luo *LevelUpdateOne) SetCode(s string) *LevelUpdateOne {
	luo.mutation.SetCode(s)
	return luo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (luo *LevelUpdateOne) SetNillableCode(s *string) *LevelUpdateOne {
	if s != nil {
		luo.SetCode(*s)
	}
	return luo
}

// SetDesc sets the "desc" field.
func (luo *LevelUpdateOne) SetDesc(s string) *LevelUpdateOne {
	luo.mutation.SetDesc(s)
	return luo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (luo *LevelUpdateOne) SetNillableDesc(s *string) *LevelUpdateOne {
	if s != nil {
		luo.SetDesc(*s)
	}
	return luo
}

// SetSortOrder sets the "sort_order" field.
func (luo *LevelUpdateOne) SetSortOrder(i int) *LevelUpdateOne {
	luo.mutation.ResetSortOrder()
	luo.mutation.SetSortOrder(i)
	return luo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (luo *LevelUpdateOne) SetNillableSortOrder(i *int) *LevelUpdateOne {
	if i != nil {
		luo.SetSortOrder(*i)
	}
	return luo
}

// AddSortOrder adds i to the "sort_order" field.
func (luo *LevelUpdateOne) AddSortOrder(i int) *LevelUpdateOne {
	luo.mutation.AddSortOrder(i)
	return luo
}

// AddLevelQuestionBankIDs adds the "level_question_banks" edge to the TkQuestionBank entity by IDs.
func (luo *LevelUpdateOne) AddLevelQuestionBankIDs(ids ...int) *LevelUpdateOne {
	luo.mutation.AddLevelQuestionBankIDs(ids...)
	return luo
}

// AddLevelQuestionBanks adds the "level_question_banks" edges to the TkQuestionBank entity.
func (luo *LevelUpdateOne) AddLevelQuestionBanks(t ...*TkQuestionBank) *LevelUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luo.AddLevelQuestionBankIDs(ids...)
}

// Mutation returns the LevelMutation object of the builder.
func (luo *LevelUpdateOne) Mutation() *LevelMutation {
	return luo.mutation
}

// ClearLevelQuestionBanks clears all "level_question_banks" edges to the TkQuestionBank entity.
func (luo *LevelUpdateOne) ClearLevelQuestionBanks() *LevelUpdateOne {
	luo.mutation.ClearLevelQuestionBanks()
	return luo
}

// RemoveLevelQuestionBankIDs removes the "level_question_banks" edge to TkQuestionBank entities by IDs.
func (luo *LevelUpdateOne) RemoveLevelQuestionBankIDs(ids ...int) *LevelUpdateOne {
	luo.mutation.RemoveLevelQuestionBankIDs(ids...)
	return luo
}

// RemoveLevelQuestionBanks removes "level_question_banks" edges to TkQuestionBank entities.
func (luo *LevelUpdateOne) RemoveLevelQuestionBanks(t ...*TkQuestionBank) *LevelUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luo.RemoveLevelQuestionBankIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LevelUpdateOne) Select(field string, fields ...string) *LevelUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Level entity.
func (luo *LevelUpdateOne) Save(ctx context.Context) (*Level, error) {
	var (
		err  error
		node *Level
	)
	luo.defaults()
	if len(luo.hooks) == 0 {
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LevelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LevelUpdateOne) SaveX(ctx context.Context) *Level {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LevelUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LevelUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LevelUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok && !luo.mutation.UpdatedAtCleared() {
		v := level.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

func (luo *LevelUpdateOne) sqlSave(ctx context.Context) (_node *Level, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   level.Table,
			Columns: level.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: level.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Level.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, level.FieldID)
		for _, f := range fields {
			if !level.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != level.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldUUID,
		})
	}
	if luo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: level.FieldCreatedAt,
		})
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: level.FieldUpdatedAt,
		})
	}
	if luo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: level.FieldUpdatedAt,
		})
	}
	if value, ok := luo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: level.FieldDeletedAt,
		})
	}
	if luo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: level.FieldDeletedAt,
		})
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldName,
		})
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: level.FieldStatus,
		})
	}
	if value, ok := luo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: level.FieldStatus,
		})
	}
	if value, ok := luo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldCode,
		})
	}
	if value, ok := luo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldDesc,
		})
	}
	if value, ok := luo.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: level.FieldSortOrder,
		})
	}
	if value, ok := luo.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: level.FieldSortOrder,
		})
	}
	if luo.mutation.LevelQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   level.LevelQuestionBanksTable,
			Columns: []string{level.LevelQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLevelQuestionBanksIDs(); len(nodes) > 0 && !luo.mutation.LevelQuestionBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   level.LevelQuestionBanksTable,
			Columns: []string{level.LevelQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LevelQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   level.LevelQuestionBanksTable,
			Columns: []string{level.LevelQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Level{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{level.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

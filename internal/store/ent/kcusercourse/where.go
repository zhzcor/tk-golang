// Code generated by entc, DO NOT EDIT.

package kcusercourse

import (
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// PeriodType applies equality check predicate on the "period_type" field. It's identical to PeriodTypeEQ.
func PeriodType(v uint8) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPeriodType), v))
	})
}

// ClosingDate applies equality check predicate on the "closing_date" field. It's identical to ClosingDateEQ.
func ClosingDate(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosingDate), v))
	})
}

// StudyRate applies equality check predicate on the "study_rate" field. It's identical to StudyRateEQ.
func StudyRate(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudyRate), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// PeriodTypeEQ applies the EQ predicate on the "period_type" field.
func PeriodTypeEQ(v uint8) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPeriodType), v))
	})
}

// PeriodTypeNEQ applies the NEQ predicate on the "period_type" field.
func PeriodTypeNEQ(v uint8) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPeriodType), v))
	})
}

// PeriodTypeIn applies the In predicate on the "period_type" field.
func PeriodTypeIn(vs ...uint8) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPeriodType), v...))
	})
}

// PeriodTypeNotIn applies the NotIn predicate on the "period_type" field.
func PeriodTypeNotIn(vs ...uint8) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPeriodType), v...))
	})
}

// PeriodTypeGT applies the GT predicate on the "period_type" field.
func PeriodTypeGT(v uint8) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPeriodType), v))
	})
}

// PeriodTypeGTE applies the GTE predicate on the "period_type" field.
func PeriodTypeGTE(v uint8) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPeriodType), v))
	})
}

// PeriodTypeLT applies the LT predicate on the "period_type" field.
func PeriodTypeLT(v uint8) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPeriodType), v))
	})
}

// PeriodTypeLTE applies the LTE predicate on the "period_type" field.
func PeriodTypeLTE(v uint8) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPeriodType), v))
	})
}

// ClosingDateEQ applies the EQ predicate on the "closing_date" field.
func ClosingDateEQ(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosingDate), v))
	})
}

// ClosingDateNEQ applies the NEQ predicate on the "closing_date" field.
func ClosingDateNEQ(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClosingDate), v))
	})
}

// ClosingDateIn applies the In predicate on the "closing_date" field.
func ClosingDateIn(vs ...time.Time) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClosingDate), v...))
	})
}

// ClosingDateNotIn applies the NotIn predicate on the "closing_date" field.
func ClosingDateNotIn(vs ...time.Time) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClosingDate), v...))
	})
}

// ClosingDateGT applies the GT predicate on the "closing_date" field.
func ClosingDateGT(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClosingDate), v))
	})
}

// ClosingDateGTE applies the GTE predicate on the "closing_date" field.
func ClosingDateGTE(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClosingDate), v))
	})
}

// ClosingDateLT applies the LT predicate on the "closing_date" field.
func ClosingDateLT(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClosingDate), v))
	})
}

// ClosingDateLTE applies the LTE predicate on the "closing_date" field.
func ClosingDateLTE(v time.Time) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClosingDate), v))
	})
}

// ClosingDateIsNil applies the IsNil predicate on the "closing_date" field.
func ClosingDateIsNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClosingDate)))
	})
}

// ClosingDateNotNil applies the NotNil predicate on the "closing_date" field.
func ClosingDateNotNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClosingDate)))
	})
}

// StudyRateEQ applies the EQ predicate on the "study_rate" field.
func StudyRateEQ(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudyRate), v))
	})
}

// StudyRateNEQ applies the NEQ predicate on the "study_rate" field.
func StudyRateNEQ(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStudyRate), v))
	})
}

// StudyRateIn applies the In predicate on the "study_rate" field.
func StudyRateIn(vs ...float64) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStudyRate), v...))
	})
}

// StudyRateNotIn applies the NotIn predicate on the "study_rate" field.
func StudyRateNotIn(vs ...float64) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStudyRate), v...))
	})
}

// StudyRateGT applies the GT predicate on the "study_rate" field.
func StudyRateGT(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStudyRate), v))
	})
}

// StudyRateGTE applies the GTE predicate on the "study_rate" field.
func StudyRateGTE(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStudyRate), v))
	})
}

// StudyRateLT applies the LT predicate on the "study_rate" field.
func StudyRateLT(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStudyRate), v))
	})
}

// StudyRateLTE applies the LTE predicate on the "study_rate" field.
func StudyRateLTE(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStudyRate), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseID), v))
	})
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourseID), v...))
	})
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.KcUserCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcUserCourse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourseID), v...))
	})
}

// CourseIDIsNil applies the IsNil predicate on the "course_id" field.
func CourseIDIsNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCourseID)))
	})
}

// CourseIDNotNil applies the NotNil predicate on the "course_id" field.
func CourseIDNotNil() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCourseID)))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.KcCourse) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KcUserCourse) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KcUserCourse) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KcUserCourse) predicate.KcUserCourse {
	return predicate.KcUserCourse(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package tkquestionbank

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the tkquestionbank type in the database.
	Label = "tk_question_bank"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldQuestionCount holds the string denoting the question_count field in the database.
	FieldQuestionCount = "question_count"
	// FieldCreatedAdminID holds the string denoting the created_admin_id field in the database.
	FieldCreatedAdminID = "created_admin_id"
	// FieldItemCategoryID holds the string denoting the item_category_id field in the database.
	FieldItemCategoryID = "item_category_id"
	// FieldLevelID holds the string denoting the level_id field in the database.
	FieldLevelID = "level_id"
	// EdgeItemCategory holds the string denoting the item_category edge name in mutations.
	EdgeItemCategory = "item_category"
	// EdgeLevel holds the string denoting the level edge name in mutations.
	EdgeLevel = "level"
	// EdgeAdmin holds the string denoting the admin edge name in mutations.
	EdgeAdmin = "admin"
	// EdgeQuestionChapters holds the string denoting the question_chapters edge name in mutations.
	EdgeQuestionChapters = "question_chapters"
	// EdgeQuestionBankCourses holds the string denoting the question_bank_courses edge name in mutations.
	EdgeQuestionBankCourses = "question_bank_courses"
	// EdgeQuestions holds the string denoting the questions edge name in mutations.
	EdgeQuestions = "questions"
	// EdgeExamPapers holds the string denoting the exam_papers edge name in mutations.
	EdgeExamPapers = "exam_papers"
	// EdgeExamQuestionTypes holds the string denoting the exam_question_types edge name in mutations.
	EdgeExamQuestionTypes = "exam_question_types"
	// EdgeUserQuestionBank holds the string denoting the user_question_bank edge name in mutations.
	EdgeUserQuestionBank = "user_question_bank"
	// EdgeUserBankRecords holds the string denoting the user_bank_records edge name in mutations.
	EdgeUserBankRecords = "user_bank_records"
	// EdgeKnowledgePoints holds the string denoting the knowledge_points edge name in mutations.
	EdgeKnowledgePoints = "knowledge_points"
	// EdgeCityQuestionBanks holds the string denoting the city_question_banks edge name in mutations.
	EdgeCityQuestionBanks = "city_question_banks"
	// EdgeMajorQuestionBanks holds the string denoting the major_question_banks edge name in mutations.
	EdgeMajorQuestionBanks = "major_question_banks"
	// Table holds the table name of the tkquestionbank in the database.
	Table = "tk_question_banks"
	// ItemCategoryTable is the table the holds the item_category relation/edge.
	ItemCategoryTable = "tk_question_banks"
	// ItemCategoryInverseTable is the table name for the ItemCategory entity.
	// It exists in this package in order to avoid circular dependency with the "itemcategory" package.
	ItemCategoryInverseTable = "item_categories"
	// ItemCategoryColumn is the table column denoting the item_category relation/edge.
	ItemCategoryColumn = "item_category_id"
	// LevelTable is the table the holds the level relation/edge.
	LevelTable = "tk_question_banks"
	// LevelInverseTable is the table name for the Level entity.
	// It exists in this package in order to avoid circular dependency with the "level" package.
	LevelInverseTable = "levels"
	// LevelColumn is the table column denoting the level relation/edge.
	LevelColumn = "level_id"
	// AdminTable is the table the holds the admin relation/edge.
	AdminTable = "tk_question_banks"
	// AdminInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	AdminInverseTable = "admins"
	// AdminColumn is the table column denoting the admin relation/edge.
	AdminColumn = "created_admin_id"
	// QuestionChaptersTable is the table the holds the question_chapters relation/edge.
	QuestionChaptersTable = "tk_chapters"
	// QuestionChaptersInverseTable is the table name for the TkChapter entity.
	// It exists in this package in order to avoid circular dependency with the "tkchapter" package.
	QuestionChaptersInverseTable = "tk_chapters"
	// QuestionChaptersColumn is the table column denoting the question_chapters relation/edge.
	QuestionChaptersColumn = "question_bank_id"
	// QuestionBankCoursesTable is the table the holds the question_bank_courses relation/edge.
	QuestionBankCoursesTable = "kc_courses"
	// QuestionBankCoursesInverseTable is the table name for the KcCourse entity.
	// It exists in this package in order to avoid circular dependency with the "kccourse" package.
	QuestionBankCoursesInverseTable = "kc_courses"
	// QuestionBankCoursesColumn is the table column denoting the question_bank_courses relation/edge.
	QuestionBankCoursesColumn = "question_bank_id"
	// QuestionsTable is the table the holds the questions relation/edge.
	QuestionsTable = "tk_questions"
	// QuestionsInverseTable is the table name for the TkQuestion entity.
	// It exists in this package in order to avoid circular dependency with the "tkquestion" package.
	QuestionsInverseTable = "tk_questions"
	// QuestionsColumn is the table column denoting the questions relation/edge.
	QuestionsColumn = "question_bank_id"
	// ExamPapersTable is the table the holds the exam_papers relation/edge.
	ExamPapersTable = "tk_exam_papers"
	// ExamPapersInverseTable is the table name for the TkExamPaper entity.
	// It exists in this package in order to avoid circular dependency with the "tkexampaper" package.
	ExamPapersInverseTable = "tk_exam_papers"
	// ExamPapersColumn is the table column denoting the exam_papers relation/edge.
	ExamPapersColumn = "question_bank_id"
	// ExamQuestionTypesTable is the table the holds the exam_question_types relation/edge.
	ExamQuestionTypesTable = "tk_exam_question_types"
	// ExamQuestionTypesInverseTable is the table name for the TkExamQuestionType entity.
	// It exists in this package in order to avoid circular dependency with the "tkexamquestiontype" package.
	ExamQuestionTypesInverseTable = "tk_exam_question_types"
	// ExamQuestionTypesColumn is the table column denoting the exam_question_types relation/edge.
	ExamQuestionTypesColumn = "question_bank_id"
	// UserQuestionBankTable is the table the holds the user_question_bank relation/edge.
	UserQuestionBankTable = "tk_user_question_bank_records"
	// UserQuestionBankInverseTable is the table name for the TkUserQuestionBankRecord entity.
	// It exists in this package in order to avoid circular dependency with the "tkuserquestionbankrecord" package.
	UserQuestionBankInverseTable = "tk_user_question_bank_records"
	// UserQuestionBankColumn is the table column denoting the user_question_bank relation/edge.
	UserQuestionBankColumn = "question_bank_id"
	// UserBankRecordsTable is the table the holds the user_bank_records relation/edge.
	UserBankRecordsTable = "tk_user_question_records"
	// UserBankRecordsInverseTable is the table name for the TkUserQuestionRecord entity.
	// It exists in this package in order to avoid circular dependency with the "tkuserquestionrecord" package.
	UserBankRecordsInverseTable = "tk_user_question_records"
	// UserBankRecordsColumn is the table column denoting the user_bank_records relation/edge.
	UserBankRecordsColumn = "question_bank_id"
	// KnowledgePointsTable is the table the holds the knowledge_points relation/edge.
	KnowledgePointsTable = "tk_knowledge_points"
	// KnowledgePointsInverseTable is the table name for the TkKnowledgePoint entity.
	// It exists in this package in order to avoid circular dependency with the "tkknowledgepoint" package.
	KnowledgePointsInverseTable = "tk_knowledge_points"
	// KnowledgePointsColumn is the table column denoting the knowledge_points relation/edge.
	KnowledgePointsColumn = "question_bank_id"
	// CityQuestionBanksTable is the table the holds the city_question_banks relation/edge.
	CityQuestionBanksTable = "tk_question_bank_cities"
	// CityQuestionBanksInverseTable is the table name for the TkQuestionBankCity entity.
	// It exists in this package in order to avoid circular dependency with the "tkquestionbankcity" package.
	CityQuestionBanksInverseTable = "tk_question_bank_cities"
	// CityQuestionBanksColumn is the table column denoting the city_question_banks relation/edge.
	CityQuestionBanksColumn = "question_bank_id"
	// MajorQuestionBanksTable is the table the holds the major_question_banks relation/edge.
	MajorQuestionBanksTable = "tk_question_bank_majors"
	// MajorQuestionBanksInverseTable is the table name for the TkQuestionBankMajor entity.
	// It exists in this package in order to avoid circular dependency with the "tkquestionbankmajor" package.
	MajorQuestionBanksInverseTable = "tk_question_bank_majors"
	// MajorQuestionBanksColumn is the table column denoting the major_question_banks relation/edge.
	MajorQuestionBanksColumn = "question_bank_id"
)

// Columns holds all SQL columns for tkquestionbank fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldStatus,
	FieldQuestionCount,
	FieldCreatedAdminID,
	FieldItemCategoryID,
	FieldLevelID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "tkserver/internal/store/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultQuestionCount holds the default value on creation for the "question_count" field.
	DefaultQuestionCount int
)

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/shareposter"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SharePosterCreate is the builder for creating a SharePoster entity.
type SharePosterCreate struct {
	config
	mutation *SharePosterMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (spc *SharePosterCreate) SetUUID(s string) *SharePosterCreate {
	spc.mutation.SetUUID(s)
	return spc
}

// SetCreatedAt sets the "created_at" field.
func (spc *SharePosterCreate) SetCreatedAt(t time.Time) *SharePosterCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableCreatedAt(t *time.Time) *SharePosterCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *SharePosterCreate) SetUpdatedAt(t time.Time) *SharePosterCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableUpdatedAt(t *time.Time) *SharePosterCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetDeletedAt sets the "deleted_at" field.
func (spc *SharePosterCreate) SetDeletedAt(t time.Time) *SharePosterCreate {
	spc.mutation.SetDeletedAt(t)
	return spc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableDeletedAt(t *time.Time) *SharePosterCreate {
	if t != nil {
		spc.SetDeletedAt(*t)
	}
	return spc
}

// SetName sets the "name" field.
func (spc *SharePosterCreate) SetName(s string) *SharePosterCreate {
	spc.mutation.SetName(s)
	return spc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableName(s *string) *SharePosterCreate {
	if s != nil {
		spc.SetName(*s)
	}
	return spc
}

// SetStatus sets the "status" field.
func (spc *SharePosterCreate) SetStatus(u uint8) *SharePosterCreate {
	spc.mutation.SetStatus(u)
	return spc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableStatus(u *uint8) *SharePosterCreate {
	if u != nil {
		spc.SetStatus(*u)
	}
	return spc
}

// SetURL sets the "url" field.
func (spc *SharePosterCreate) SetURL(s string) *SharePosterCreate {
	spc.mutation.SetURL(s)
	return spc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableURL(s *string) *SharePosterCreate {
	if s != nil {
		spc.SetURL(*s)
	}
	return spc
}

// SetRemark sets the "remark" field.
func (spc *SharePosterCreate) SetRemark(s string) *SharePosterCreate {
	spc.mutation.SetRemark(s)
	return spc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableRemark(s *string) *SharePosterCreate {
	if s != nil {
		spc.SetRemark(*s)
	}
	return spc
}

// SetSharePosterImgID sets the "share_poster_img_id" field.
func (spc *SharePosterCreate) SetSharePosterImgID(i int) *SharePosterCreate {
	spc.mutation.SetSharePosterImgID(i)
	return spc
}

// SetNillableSharePosterImgID sets the "share_poster_img_id" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableSharePosterImgID(i *int) *SharePosterCreate {
	if i != nil {
		spc.SetSharePosterImgID(*i)
	}
	return spc
}

// SetShareCount sets the "share_count" field.
func (spc *SharePosterCreate) SetShareCount(i int) *SharePosterCreate {
	spc.mutation.SetShareCount(i)
	return spc
}

// SetNillableShareCount sets the "share_count" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableShareCount(i *int) *SharePosterCreate {
	if i != nil {
		spc.SetShareCount(*i)
	}
	return spc
}

// SetSortOrder sets the "sort_order" field.
func (spc *SharePosterCreate) SetSortOrder(i int) *SharePosterCreate {
	spc.mutation.SetSortOrder(i)
	return spc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (spc *SharePosterCreate) SetNillableSortOrder(i *int) *SharePosterCreate {
	if i != nil {
		spc.SetSortOrder(*i)
	}
	return spc
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (spc *SharePosterCreate) SetAttachmentID(id int) *SharePosterCreate {
	spc.mutation.SetAttachmentID(id)
	return spc
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (spc *SharePosterCreate) SetNillableAttachmentID(id *int) *SharePosterCreate {
	if id != nil {
		spc = spc.SetAttachmentID(*id)
	}
	return spc
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (spc *SharePosterCreate) SetAttachment(a *Attachment) *SharePosterCreate {
	return spc.SetAttachmentID(a.ID)
}

// Mutation returns the SharePosterMutation object of the builder.
func (spc *SharePosterCreate) Mutation() *SharePosterMutation {
	return spc.mutation
}

// Save creates the SharePoster in the database.
func (spc *SharePosterCreate) Save(ctx context.Context) (*SharePoster, error) {
	var (
		err  error
		node *SharePoster
	)
	spc.defaults()
	if len(spc.hooks) == 0 {
		if err = spc.check(); err != nil {
			return nil, err
		}
		node, err = spc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SharePosterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spc.check(); err != nil {
				return nil, err
			}
			spc.mutation = mutation
			node, err = spc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spc.hooks) - 1; i >= 0; i-- {
			mut = spc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SharePosterCreate) SaveX(ctx context.Context) *SharePoster {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (spc *SharePosterCreate) defaults() {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		v := shareposter.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		v := shareposter.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
	if _, ok := spc.mutation.Name(); !ok {
		v := shareposter.DefaultName
		spc.mutation.SetName(v)
	}
	if _, ok := spc.mutation.Status(); !ok {
		v := shareposter.DefaultStatus
		spc.mutation.SetStatus(v)
	}
	if _, ok := spc.mutation.URL(); !ok {
		v := shareposter.DefaultURL
		spc.mutation.SetURL(v)
	}
	if _, ok := spc.mutation.Remark(); !ok {
		v := shareposter.DefaultRemark
		spc.mutation.SetRemark(v)
	}
	if _, ok := spc.mutation.ShareCount(); !ok {
		v := shareposter.DefaultShareCount
		spc.mutation.SetShareCount(v)
	}
	if _, ok := spc.mutation.SortOrder(); !ok {
		v := shareposter.DefaultSortOrder
		spc.mutation.SetSortOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SharePosterCreate) check() error {
	if _, ok := spc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := spc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := spc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := spc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New("ent: missing required field \"url\"")}
	}
	if _, ok := spc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New("ent: missing required field \"remark\"")}
	}
	if _, ok := spc.mutation.ShareCount(); !ok {
		return &ValidationError{Name: "share_count", err: errors.New("ent: missing required field \"share_count\"")}
	}
	if _, ok := spc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New("ent: missing required field \"sort_order\"")}
	}
	return nil
}

func (spc *SharePosterCreate) sqlSave(ctx context.Context) (*SharePoster, error) {
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (spc *SharePosterCreate) createSpec() (*SharePoster, *sqlgraph.CreateSpec) {
	var (
		_node = &SharePoster{config: spc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shareposter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shareposter.FieldID,
			},
		}
	)
	if value, ok := spc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shareposter.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shareposter.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := spc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shareposter.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := spc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldName,
		})
		_node.Name = value
	}
	if value, ok := spc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: shareposter.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := spc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := spc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shareposter.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := spc.mutation.ShareCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldShareCount,
		})
		_node.ShareCount = value
	}
	if value, ok := spc.mutation.SortOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shareposter.FieldSortOrder,
		})
		_node.SortOrder = value
	}
	if nodes := spc.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shareposter.AttachmentTable,
			Columns: []string{shareposter.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SharePosterImgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SharePosterCreateBulk is the builder for creating many SharePoster entities in bulk.
type SharePosterCreateBulk struct {
	config
	builders []*SharePosterCreate
}

// Save creates the SharePoster entities in the database.
func (spcb *SharePosterCreateBulk) Save(ctx context.Context) ([]*SharePoster, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SharePoster, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SharePosterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SharePosterCreateBulk) SaveX(ctx context.Context) []*SharePoster {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

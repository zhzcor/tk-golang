// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionsection"
	"tkserver/internal/store/ent/tksection"

	"entgo.io/ent/dialect/sql"
)

// TkQuestionSection is the model entity for the TkQuestionSection schema.
type TkQuestionSection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// SectionID holds the value of the "section_id" field.
	// 节id
	SectionID int `json:"section_id"`
	// QuestionID holds the value of the "question_id" field.
	// 题目id
	QuestionID int `json:"question_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkQuestionSectionQuery when eager-loading is set.
	Edges TkQuestionSectionEdges `json:"edges"`
}

// TkQuestionSectionEdges holds the relations/edges for other nodes in the graph.
type TkQuestionSectionEdges struct {
	// QuestionSection holds the value of the question_section edge.
	QuestionSection *TkSection `json:"question_section,omitempty"`
	// SectionQuestion holds the value of the section_question edge.
	SectionQuestion *TkQuestion `json:"section_question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionSectionOrErr returns the QuestionSection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionSectionEdges) QuestionSectionOrErr() (*TkSection, error) {
	if e.loadedTypes[0] {
		if e.QuestionSection == nil {
			// The edge question_section was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tksection.Label}
		}
		return e.QuestionSection, nil
	}
	return nil, &NotLoadedError{edge: "question_section"}
}

// SectionQuestionOrErr returns the SectionQuestion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionSectionEdges) SectionQuestionOrErr() (*TkQuestion, error) {
	if e.loadedTypes[1] {
		if e.SectionQuestion == nil {
			// The edge section_question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestion.Label}
		}
		return e.SectionQuestion, nil
	}
	return nil, &NotLoadedError{edge: "section_question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkQuestionSection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkquestionsection.FieldID, tkquestionsection.FieldSectionID, tkquestionsection.FieldQuestionID:
			values[i] = new(sql.NullInt64)
		case tkquestionsection.FieldUUID:
			values[i] = new(sql.NullString)
		case tkquestionsection.FieldCreatedAt, tkquestionsection.FieldUpdatedAt, tkquestionsection.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkQuestionSection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkQuestionSection fields.
func (tqs *TkQuestionSection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkquestionsection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tqs.ID = int(value.Int64)
		case tkquestionsection.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tqs.UUID = value.String
			}
		case tkquestionsection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tqs.CreatedAt = new(time.Time)
				*tqs.CreatedAt = value.Time
			}
		case tkquestionsection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tqs.UpdatedAt = new(time.Time)
				*tqs.UpdatedAt = value.Time
			}
		case tkquestionsection.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tqs.DeletedAt = new(time.Time)
				*tqs.DeletedAt = value.Time
			}
		case tkquestionsection.FieldSectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field section_id", values[i])
			} else if value.Valid {
				tqs.SectionID = int(value.Int64)
			}
		case tkquestionsection.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				tqs.QuestionID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestionSection queries the "question_section" edge of the TkQuestionSection entity.
func (tqs *TkQuestionSection) QueryQuestionSection() *TkSectionQuery {
	return (&TkQuestionSectionClient{config: tqs.config}).QueryQuestionSection(tqs)
}

// QuerySectionQuestion queries the "section_question" edge of the TkQuestionSection entity.
func (tqs *TkQuestionSection) QuerySectionQuestion() *TkQuestionQuery {
	return (&TkQuestionSectionClient{config: tqs.config}).QuerySectionQuestion(tqs)
}

// Update returns a builder for updating this TkQuestionSection.
// Note that you need to call TkQuestionSection.Unwrap() before calling this method if this TkQuestionSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (tqs *TkQuestionSection) Update() *TkQuestionSectionUpdateOne {
	return (&TkQuestionSectionClient{config: tqs.config}).UpdateOne(tqs)
}

// Unwrap unwraps the TkQuestionSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tqs *TkQuestionSection) Unwrap() *TkQuestionSection {
	tx, ok := tqs.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkQuestionSection is not a transactional entity")
	}
	tqs.config.driver = tx.drv
	return tqs
}

// String implements the fmt.Stringer.
func (tqs *TkQuestionSection) String() string {
	var builder strings.Builder
	builder.WriteString("TkQuestionSection(")
	builder.WriteString(fmt.Sprintf("id=%v", tqs.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tqs.UUID)
	if v := tqs.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tqs.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tqs.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", section_id=")
	builder.WriteString(fmt.Sprintf("%v", tqs.SectionID))
	builder.WriteString(", question_id=")
	builder.WriteString(fmt.Sprintf("%v", tqs.QuestionID))
	builder.WriteByte(')')
	return builder.String()
}

// TkQuestionSections is a parsable slice of TkQuestionSection.
type TkQuestionSections []*TkQuestionSection

func (tqs TkQuestionSections) config(cfg config) {
	for _i := range tqs {
		tqs[_i].config = cfg
	}
}

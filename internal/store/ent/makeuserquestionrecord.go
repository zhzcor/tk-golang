// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/makeuserquestionrecord"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tksection"

	"entgo.io/ent/dialect/sql"
)

// MakeUserQuestionRecord is the model entity for the MakeUserQuestionRecord schema.
type MakeUserQuestionRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// UserID holds the value of the "user_id" field.
	// userId
	UserID int `json:"user_id"`
	// ExamID holds the value of the "exam_id" field.
	// 试卷id
	ExamID int `json:"exam_id"`
	// SecID holds the value of the "sec_id" field.
	// 节id
	SecID int `json:"sec_id"`
	// QuestionBankID holds the value of the "question_bank_id" field.
	// 题库
	QuestionBankID int `json:"question_bank_id"`
	// ExamQuestionType holds the value of the "exam_question_type" field.
	// 试卷题目分类，1：模拟考试，2：章节练习，3：历年真题，4：通关必做300题，5：考前密押卷
	ExamQuestionType int `json:"exam_question_type"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MakeUserQuestionRecordQuery when eager-loading is set.
	Edges MakeUserQuestionRecordEdges `json:"edges"`
}

// MakeUserQuestionRecordEdges holds the relations/edges for other nodes in the graph.
type MakeUserQuestionRecordEdges struct {
	// Section holds the value of the section edge.
	Section *TkSection `json:"section,omitempty"`
	// ExamPaper holds the value of the exam_paper edge.
	ExamPaper *TkExamPaper `json:"exam_paper,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SectionOrErr returns the Section value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MakeUserQuestionRecordEdges) SectionOrErr() (*TkSection, error) {
	if e.loadedTypes[0] {
		if e.Section == nil {
			// The edge section was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tksection.Label}
		}
		return e.Section, nil
	}
	return nil, &NotLoadedError{edge: "section"}
}

// ExamPaperOrErr returns the ExamPaper value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MakeUserQuestionRecordEdges) ExamPaperOrErr() (*TkExamPaper, error) {
	if e.loadedTypes[1] {
		if e.ExamPaper == nil {
			// The edge exam_paper was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkexampaper.Label}
		}
		return e.ExamPaper, nil
	}
	return nil, &NotLoadedError{edge: "exam_paper"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MakeUserQuestionRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case makeuserquestionrecord.FieldID, makeuserquestionrecord.FieldUserID, makeuserquestionrecord.FieldExamID, makeuserquestionrecord.FieldSecID, makeuserquestionrecord.FieldQuestionBankID, makeuserquestionrecord.FieldExamQuestionType:
			values[i] = new(sql.NullInt64)
		case makeuserquestionrecord.FieldUUID:
			values[i] = new(sql.NullString)
		case makeuserquestionrecord.FieldCreatedAt, makeuserquestionrecord.FieldUpdatedAt, makeuserquestionrecord.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MakeUserQuestionRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MakeUserQuestionRecord fields.
func (muqr *MakeUserQuestionRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case makeuserquestionrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			muqr.ID = int(value.Int64)
		case makeuserquestionrecord.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				muqr.UUID = value.String
			}
		case makeuserquestionrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				muqr.CreatedAt = new(time.Time)
				*muqr.CreatedAt = value.Time
			}
		case makeuserquestionrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				muqr.UpdatedAt = new(time.Time)
				*muqr.UpdatedAt = value.Time
			}
		case makeuserquestionrecord.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				muqr.DeletedAt = new(time.Time)
				*muqr.DeletedAt = value.Time
			}
		case makeuserquestionrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				muqr.UserID = int(value.Int64)
			}
		case makeuserquestionrecord.FieldExamID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_id", values[i])
			} else if value.Valid {
				muqr.ExamID = int(value.Int64)
			}
		case makeuserquestionrecord.FieldSecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sec_id", values[i])
			} else if value.Valid {
				muqr.SecID = int(value.Int64)
			}
		case makeuserquestionrecord.FieldQuestionBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_bank_id", values[i])
			} else if value.Valid {
				muqr.QuestionBankID = int(value.Int64)
			}
		case makeuserquestionrecord.FieldExamQuestionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_question_type", values[i])
			} else if value.Valid {
				muqr.ExamQuestionType = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySection queries the "section" edge of the MakeUserQuestionRecord entity.
func (muqr *MakeUserQuestionRecord) QuerySection() *TkSectionQuery {
	return (&MakeUserQuestionRecordClient{config: muqr.config}).QuerySection(muqr)
}

// QueryExamPaper queries the "exam_paper" edge of the MakeUserQuestionRecord entity.
func (muqr *MakeUserQuestionRecord) QueryExamPaper() *TkExamPaperQuery {
	return (&MakeUserQuestionRecordClient{config: muqr.config}).QueryExamPaper(muqr)
}

// Update returns a builder for updating this MakeUserQuestionRecord.
// Note that you need to call MakeUserQuestionRecord.Unwrap() before calling this method if this MakeUserQuestionRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (muqr *MakeUserQuestionRecord) Update() *MakeUserQuestionRecordUpdateOne {
	return (&MakeUserQuestionRecordClient{config: muqr.config}).UpdateOne(muqr)
}

// Unwrap unwraps the MakeUserQuestionRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (muqr *MakeUserQuestionRecord) Unwrap() *MakeUserQuestionRecord {
	tx, ok := muqr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MakeUserQuestionRecord is not a transactional entity")
	}
	muqr.config.driver = tx.drv
	return muqr
}

// String implements the fmt.Stringer.
func (muqr *MakeUserQuestionRecord) String() string {
	var builder strings.Builder
	builder.WriteString("MakeUserQuestionRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", muqr.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(muqr.UUID)
	if v := muqr.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := muqr.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := muqr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", muqr.UserID))
	builder.WriteString(", exam_id=")
	builder.WriteString(fmt.Sprintf("%v", muqr.ExamID))
	builder.WriteString(", sec_id=")
	builder.WriteString(fmt.Sprintf("%v", muqr.SecID))
	builder.WriteString(", question_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", muqr.QuestionBankID))
	builder.WriteString(", exam_question_type=")
	builder.WriteString(fmt.Sprintf("%v", muqr.ExamQuestionType))
	builder.WriteByte(')')
	return builder.String()
}

// MakeUserQuestionRecords is a parsable slice of MakeUserQuestionRecord.
type MakeUserQuestionRecords []*MakeUserQuestionRecord

func (muqr MakeUserQuestionRecords) config(cfg config) {
	for _i := range muqr {
		muqr[_i].config = cfg
	}
}

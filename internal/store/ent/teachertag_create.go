// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/teachertag"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeacherTagCreate is the builder for creating a TeacherTag entity.
type TeacherTagCreate struct {
	config
	mutation *TeacherTagMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (ttc *TeacherTagCreate) SetUUID(s string) *TeacherTagCreate {
	ttc.mutation.SetUUID(s)
	return ttc
}

// SetCreatedAt sets the "created_at" field.
func (ttc *TeacherTagCreate) SetCreatedAt(t time.Time) *TeacherTagCreate {
	ttc.mutation.SetCreatedAt(t)
	return ttc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttc *TeacherTagCreate) SetNillableCreatedAt(t *time.Time) *TeacherTagCreate {
	if t != nil {
		ttc.SetCreatedAt(*t)
	}
	return ttc
}

// SetUpdatedAt sets the "updated_at" field.
func (ttc *TeacherTagCreate) SetUpdatedAt(t time.Time) *TeacherTagCreate {
	ttc.mutation.SetUpdatedAt(t)
	return ttc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ttc *TeacherTagCreate) SetNillableUpdatedAt(t *time.Time) *TeacherTagCreate {
	if t != nil {
		ttc.SetUpdatedAt(*t)
	}
	return ttc
}

// SetDeletedAt sets the "deleted_at" field.
func (ttc *TeacherTagCreate) SetDeletedAt(t time.Time) *TeacherTagCreate {
	ttc.mutation.SetDeletedAt(t)
	return ttc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ttc *TeacherTagCreate) SetNillableDeletedAt(t *time.Time) *TeacherTagCreate {
	if t != nil {
		ttc.SetDeletedAt(*t)
	}
	return ttc
}

// SetName sets the "name" field.
func (ttc *TeacherTagCreate) SetName(s string) *TeacherTagCreate {
	ttc.mutation.SetName(s)
	return ttc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttc *TeacherTagCreate) SetNillableName(s *string) *TeacherTagCreate {
	if s != nil {
		ttc.SetName(*s)
	}
	return ttc
}

// SetTeacherID sets the "teacher_id" field.
func (ttc *TeacherTagCreate) SetTeacherID(i int) *TeacherTagCreate {
	ttc.mutation.SetTeacherID(i)
	return ttc
}

// SetNillableTeacherID sets the "teacher_id" field if the given value is not nil.
func (ttc *TeacherTagCreate) SetNillableTeacherID(i *int) *TeacherTagCreate {
	if i != nil {
		ttc.SetTeacherID(*i)
	}
	return ttc
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (ttc *TeacherTagCreate) SetTeacher(t *Teacher) *TeacherTagCreate {
	return ttc.SetTeacherID(t.ID)
}

// Mutation returns the TeacherTagMutation object of the builder.
func (ttc *TeacherTagCreate) Mutation() *TeacherTagMutation {
	return ttc.mutation
}

// Save creates the TeacherTag in the database.
func (ttc *TeacherTagCreate) Save(ctx context.Context) (*TeacherTag, error) {
	var (
		err  error
		node *TeacherTag
	)
	ttc.defaults()
	if len(ttc.hooks) == 0 {
		if err = ttc.check(); err != nil {
			return nil, err
		}
		node, err = ttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeacherTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttc.check(); err != nil {
				return nil, err
			}
			ttc.mutation = mutation
			node, err = ttc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttc.hooks) - 1; i >= 0; i-- {
			mut = ttc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TeacherTagCreate) SaveX(ctx context.Context) *TeacherTag {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ttc *TeacherTagCreate) defaults() {
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		v := teachertag.DefaultCreatedAt()
		ttc.mutation.SetCreatedAt(v)
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		v := teachertag.DefaultUpdatedAt()
		ttc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ttc.mutation.Name(); !ok {
		v := teachertag.DefaultName
		ttc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TeacherTagCreate) check() error {
	if _, ok := ttc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := ttc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	return nil
}

func (ttc *TeacherTagCreate) sqlSave(ctx context.Context) (*TeacherTag, error) {
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ttc *TeacherTagCreate) createSpec() (*TeacherTag, *sqlgraph.CreateSpec) {
	var (
		_node = &TeacherTag{config: ttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teachertag.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teachertag.FieldID,
			},
		}
	)
	if value, ok := ttc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teachertag.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ttc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teachertag.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := ttc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teachertag.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := ttc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teachertag.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ttc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teachertag.FieldName,
		})
		_node.Name = value
	}
	if nodes := ttc.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teachertag.TeacherTable,
			Columns: []string{teachertag.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeacherID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TeacherTagCreateBulk is the builder for creating many TeacherTag entities in bulk.
type TeacherTagCreateBulk struct {
	config
	builders []*TeacherTagCreate
}

// Save creates the TeacherTag entities in the database.
func (ttcb *TeacherTagCreateBulk) Save(ctx context.Context) ([]*TeacherTag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TeacherTag, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeacherTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TeacherTagCreateBulk) SaveX(ctx context.Context) []*TeacherTag {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

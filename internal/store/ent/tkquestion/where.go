// Code generated by entc, DO NOT EDIT.

package tkquestion

import (
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Difficulty applies equality check predicate on the "difficulty" field. It's identical to DifficultyEQ.
func Difficulty(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDifficulty), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// CreatedAdminID applies equality check predicate on the "created_admin_id" field. It's identical to CreatedAdminIDEQ.
func CreatedAdminID(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAdminID), v))
	})
}

// QuestionBankID applies equality check predicate on the "question_bank_id" field. It's identical to QuestionBankIDEQ.
func QuestionBankID(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionBankID), v))
	})
}

// AnswerCount applies equality check predicate on the "answer_count" field. It's identical to AnswerCountEQ.
func AnswerCount(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerCount), v))
	})
}

// RightCount applies equality check predicate on the "right_count" field. It's identical to RightCountEQ.
func RightCount(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightCount), v))
	})
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DifficultyEQ applies the EQ predicate on the "difficulty" field.
func DifficultyEQ(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDifficulty), v))
	})
}

// DifficultyNEQ applies the NEQ predicate on the "difficulty" field.
func DifficultyNEQ(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDifficulty), v))
	})
}

// DifficultyIn applies the In predicate on the "difficulty" field.
func DifficultyIn(vs ...uint8) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDifficulty), v...))
	})
}

// DifficultyNotIn applies the NotIn predicate on the "difficulty" field.
func DifficultyNotIn(vs ...uint8) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDifficulty), v...))
	})
}

// DifficultyGT applies the GT predicate on the "difficulty" field.
func DifficultyGT(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDifficulty), v))
	})
}

// DifficultyGTE applies the GTE predicate on the "difficulty" field.
func DifficultyGTE(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDifficulty), v))
	})
}

// DifficultyLT applies the LT predicate on the "difficulty" field.
func DifficultyLT(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDifficulty), v))
	})
}

// DifficultyLTE applies the LTE predicate on the "difficulty" field.
func DifficultyLTE(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDifficulty), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesc), v))
	})
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDesc), v...))
	})
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDesc), v...))
	})
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesc), v))
	})
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesc), v))
	})
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesc), v))
	})
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesc), v))
	})
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDesc), v))
	})
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDesc), v))
	})
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDesc), v))
	})
}

// DescIsNil applies the IsNil predicate on the "desc" field.
func DescIsNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDesc)))
	})
}

// DescNotNil applies the NotNil predicate on the "desc" field.
func DescNotNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDesc)))
	})
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDesc), v))
	})
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDesc), v))
	})
}

// CreatedAdminIDEQ applies the EQ predicate on the "created_admin_id" field.
func CreatedAdminIDEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAdminID), v))
	})
}

// CreatedAdminIDNEQ applies the NEQ predicate on the "created_admin_id" field.
func CreatedAdminIDNEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAdminID), v))
	})
}

// CreatedAdminIDIn applies the In predicate on the "created_admin_id" field.
func CreatedAdminIDIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAdminID), v...))
	})
}

// CreatedAdminIDNotIn applies the NotIn predicate on the "created_admin_id" field.
func CreatedAdminIDNotIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAdminID), v...))
	})
}

// CreatedAdminIDIsNil applies the IsNil predicate on the "created_admin_id" field.
func CreatedAdminIDIsNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAdminID)))
	})
}

// CreatedAdminIDNotNil applies the NotNil predicate on the "created_admin_id" field.
func CreatedAdminIDNotNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAdminID)))
	})
}

// QuestionBankIDEQ applies the EQ predicate on the "question_bank_id" field.
func QuestionBankIDEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionBankID), v))
	})
}

// QuestionBankIDNEQ applies the NEQ predicate on the "question_bank_id" field.
func QuestionBankIDNEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionBankID), v))
	})
}

// QuestionBankIDIn applies the In predicate on the "question_bank_id" field.
func QuestionBankIDIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionBankID), v...))
	})
}

// QuestionBankIDNotIn applies the NotIn predicate on the "question_bank_id" field.
func QuestionBankIDNotIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionBankID), v...))
	})
}

// QuestionBankIDIsNil applies the IsNil predicate on the "question_bank_id" field.
func QuestionBankIDIsNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuestionBankID)))
	})
}

// QuestionBankIDNotNil applies the NotNil predicate on the "question_bank_id" field.
func QuestionBankIDNotNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuestionBankID)))
	})
}

// AnswerCountEQ applies the EQ predicate on the "answer_count" field.
func AnswerCountEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountNEQ applies the NEQ predicate on the "answer_count" field.
func AnswerCountNEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountIn applies the In predicate on the "answer_count" field.
func AnswerCountIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnswerCount), v...))
	})
}

// AnswerCountNotIn applies the NotIn predicate on the "answer_count" field.
func AnswerCountNotIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnswerCount), v...))
	})
}

// AnswerCountGT applies the GT predicate on the "answer_count" field.
func AnswerCountGT(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountGTE applies the GTE predicate on the "answer_count" field.
func AnswerCountGTE(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountLT applies the LT predicate on the "answer_count" field.
func AnswerCountLT(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountLTE applies the LTE predicate on the "answer_count" field.
func AnswerCountLTE(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnswerCount), v))
	})
}

// RightCountEQ applies the EQ predicate on the "right_count" field.
func RightCountEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightCount), v))
	})
}

// RightCountNEQ applies the NEQ predicate on the "right_count" field.
func RightCountNEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRightCount), v))
	})
}

// RightCountIn applies the In predicate on the "right_count" field.
func RightCountIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRightCount), v...))
	})
}

// RightCountNotIn applies the NotIn predicate on the "right_count" field.
func RightCountNotIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRightCount), v...))
	})
}

// RightCountGT applies the GT predicate on the "right_count" field.
func RightCountGT(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRightCount), v))
	})
}

// RightCountGTE applies the GTE predicate on the "right_count" field.
func RightCountGTE(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRightCount), v))
	})
}

// RightCountLT applies the LT predicate on the "right_count" field.
func RightCountLT(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRightCount), v))
	})
}

// RightCountLTE applies the LTE predicate on the "right_count" field.
func RightCountLTE(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRightCount), v))
	})
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v int) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPid), v))
	})
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPid), v...))
	})
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...int) predicate.TkQuestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPid), v...))
	})
}

// PidIsNil applies the IsNil predicate on the "pid" field.
func PidIsNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPid)))
	})
}

// PidNotNil applies the NotNil predicate on the "pid" field.
func PidNotNil() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPid)))
	})
}

// HasQuestionBank applies the HasEdge predicate on the "question_bank" edge.
func HasQuestionBank() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionBankTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionBankTable, QuestionBankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionBankWith applies the HasEdge predicate on the "question_bank" edge with a given conditions (other predicates).
func HasQuestionBankWith(preds ...predicate.TkQuestionBank) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionBankInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionBankTable, QuestionBankColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmin applies the HasEdge predicate on the "admin" edge.
func HasAdmin() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminWith applies the HasEdge predicate on the "admin" edge with a given conditions (other predicates).
func HasAdminWith(preds ...predicate.Admin) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRandDom applies the HasEdge predicate on the "user_rand_dom" edge.
func HasUserRandDom() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserRandDomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserRandDomTable, UserRandDomPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRandDomWith applies the HasEdge predicate on the "user_rand_dom" edge with a given conditions (other predicates).
func HasUserRandDomWith(preds ...predicate.TkUserRandomExamRecode) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserRandDomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserRandDomTable, UserRandDomPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswerOptions applies the HasEdge predicate on the "answer_options" edge.
func HasAnswerOptions() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnswerOptionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerOptionsTable, AnswerOptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerOptionsWith applies the HasEdge predicate on the "answer_options" edge with a given conditions (other predicates).
func HasAnswerOptionsWith(preds ...predicate.TkQuestionAnswerOption) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnswerOptionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerOptionsTable, AnswerOptionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasKnowledgePoints applies the HasEdge predicate on the "knowledge_points" edge.
func HasKnowledgePoints() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KnowledgePointsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, KnowledgePointsTable, KnowledgePointsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKnowledgePointsWith applies the HasEdge predicate on the "knowledge_points" edge with a given conditions (other predicates).
func HasKnowledgePointsWith(preds ...predicate.TkKnowledgePoint) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KnowledgePointsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, KnowledgePointsTable, KnowledgePointsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionSectionLinks applies the HasEdge predicate on the "question_section_links" edge.
func HasQuestionSectionLinks() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionSectionLinksTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionSectionLinksTable, QuestionSectionLinksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionSectionLinksWith applies the HasEdge predicate on the "question_section_links" edge with a given conditions (other predicates).
func HasQuestionSectionLinksWith(preds ...predicate.TkQuestionSection) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionSectionLinksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionSectionLinksTable, QuestionSectionLinksColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamPartitionQuestions applies the HasEdge predicate on the "exam_partition_questions" edge.
func HasExamPartitionQuestions() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPartitionQuestionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamPartitionQuestionsTable, ExamPartitionQuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamPartitionQuestionsWith applies the HasEdge predicate on the "exam_partition_questions" edge with a given conditions (other predicates).
func HasExamPartitionQuestionsWith(preds ...predicate.TkExamPartitionQuestionLink) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPartitionQuestionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamPartitionQuestionsTable, ExamPartitionQuestionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionErrorFeedbacks applies the HasEdge predicate on the "question_error_feedbacks" edge.
func HasQuestionErrorFeedbacks() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionErrorFeedbacksTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionErrorFeedbacksTable, QuestionErrorFeedbacksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionErrorFeedbacksWith applies the HasEdge predicate on the "question_error_feedbacks" edge with a given conditions (other predicates).
func HasQuestionErrorFeedbacksWith(preds ...predicate.TkQuestionErrorFeedback) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionErrorFeedbacksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionErrorFeedbacksTable, QuestionErrorFeedbacksColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRecords applies the HasEdge predicate on the "user_records" edge.
func HasUserRecords() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserRecordsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRecordsTable, UserRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRecordsWith applies the HasEdge predicate on the "user_records" edge with a given conditions (other predicates).
func HasUserRecordsWith(preds ...predicate.TkUserQuestionRecord) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserRecordsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRecordsTable, UserRecordsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSmallCategoryQuestions applies the HasEdge predicate on the "small_category_questions" edge.
func HasSmallCategoryQuestions() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmallCategoryQuestionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SmallCategoryQuestionsTable, SmallCategoryQuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSmallCategoryQuestionsWith applies the HasEdge predicate on the "small_category_questions" edge with a given conditions (other predicates).
func HasSmallCategoryQuestionsWith(preds ...predicate.KcSmallCategoryQuestion) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmallCategoryQuestionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SmallCategoryQuestionsTable, SmallCategoryQuestionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserExamQuestions applies the HasEdge predicate on the "user_exam_questions" edge.
func HasUserExamQuestions() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserExamQuestionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserExamQuestionsTable, UserExamQuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserExamQuestionsWith applies the HasEdge predicate on the "user_exam_questions" edge with a given conditions (other predicates).
func HasUserExamQuestionsWith(preds ...predicate.TkUserSimulationTeacherMark) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserExamQuestionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserExamQuestionsTable, UserExamQuestionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRecodeWrong applies the HasEdge predicate on the "user_recode_wrong" edge.
func HasUserRecodeWrong() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserRecodeWrongTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRecodeWrongTable, UserRecodeWrongColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRecodeWrongWith applies the HasEdge predicate on the "user_recode_wrong" edge with a given conditions (other predicates).
func HasUserRecodeWrongWith(preds ...predicate.TkUserWrongQuestionRecode) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserRecodeWrongInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRecodeWrongTable, UserRecodeWrongColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.TkQuestion) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.TkQuestion) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCollectionQuestion applies the HasEdge predicate on the "collection_question" edge.
func HasCollectionQuestion() predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CollectionQuestionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CollectionQuestionTable, CollectionQuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectionQuestionWith applies the HasEdge predicate on the "collection_question" edge with a given conditions (other predicates).
func HasCollectionQuestionWith(preds ...predicate.Collection) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CollectionQuestionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CollectionQuestionTable, CollectionQuestionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TkQuestion) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TkQuestion) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TkQuestion) predicate.TkQuestion {
	return predicate.TkQuestion(func(s *sql.Selector) {
		p(s.Not())
	})
}

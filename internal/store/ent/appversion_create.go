// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/appversion"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppVersionCreate is the builder for creating a AppVersion entity.
type AppVersionCreate struct {
	config
	mutation *AppVersionMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (avc *AppVersionCreate) SetUUID(s string) *AppVersionCreate {
	avc.mutation.SetUUID(s)
	return avc
}

// SetCreatedAt sets the "created_at" field.
func (avc *AppVersionCreate) SetCreatedAt(t time.Time) *AppVersionCreate {
	avc.mutation.SetCreatedAt(t)
	return avc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableCreatedAt(t *time.Time) *AppVersionCreate {
	if t != nil {
		avc.SetCreatedAt(*t)
	}
	return avc
}

// SetUpdatedAt sets the "updated_at" field.
func (avc *AppVersionCreate) SetUpdatedAt(t time.Time) *AppVersionCreate {
	avc.mutation.SetUpdatedAt(t)
	return avc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableUpdatedAt(t *time.Time) *AppVersionCreate {
	if t != nil {
		avc.SetUpdatedAt(*t)
	}
	return avc
}

// SetDeletedAt sets the "deleted_at" field.
func (avc *AppVersionCreate) SetDeletedAt(t time.Time) *AppVersionCreate {
	avc.mutation.SetDeletedAt(t)
	return avc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableDeletedAt(t *time.Time) *AppVersionCreate {
	if t != nil {
		avc.SetDeletedAt(*t)
	}
	return avc
}

// SetIP sets the "ip" field.
func (avc *AppVersionCreate) SetIP(u uint16) *AppVersionCreate {
	avc.mutation.SetIP(u)
	return avc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableIP(u *uint16) *AppVersionCreate {
	if u != nil {
		avc.SetIP(*u)
	}
	return avc
}

// SetName sets the "name" field.
func (avc *AppVersionCreate) SetName(s string) *AppVersionCreate {
	avc.mutation.SetName(s)
	return avc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableName(s *string) *AppVersionCreate {
	if s != nil {
		avc.SetName(*s)
	}
	return avc
}

// SetSn sets the "sn" field.
func (avc *AppVersionCreate) SetSn(s string) *AppVersionCreate {
	avc.mutation.SetSn(s)
	return avc
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableSn(s *string) *AppVersionCreate {
	if s != nil {
		avc.SetSn(*s)
	}
	return avc
}

// SetRemark sets the "remark" field.
func (avc *AppVersionCreate) SetRemark(s string) *AppVersionCreate {
	avc.mutation.SetRemark(s)
	return avc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableRemark(s *string) *AppVersionCreate {
	if s != nil {
		avc.SetRemark(*s)
	}
	return avc
}

// SetURL sets the "url" field.
func (avc *AppVersionCreate) SetURL(s string) *AppVersionCreate {
	avc.mutation.SetURL(s)
	return avc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableURL(s *string) *AppVersionCreate {
	if s != nil {
		avc.SetURL(*s)
	}
	return avc
}

// SetPhoneType sets the "phone_type" field.
func (avc *AppVersionCreate) SetPhoneType(u uint8) *AppVersionCreate {
	avc.mutation.SetPhoneType(u)
	return avc
}

// SetNillablePhoneType sets the "phone_type" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillablePhoneType(u *uint8) *AppVersionCreate {
	if u != nil {
		avc.SetPhoneType(*u)
	}
	return avc
}

// SetIsForceUpdate sets the "is_force_update" field.
func (avc *AppVersionCreate) SetIsForceUpdate(u uint8) *AppVersionCreate {
	avc.mutation.SetIsForceUpdate(u)
	return avc
}

// SetNillableIsForceUpdate sets the "is_force_update" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableIsForceUpdate(u *uint8) *AppVersionCreate {
	if u != nil {
		avc.SetIsForceUpdate(*u)
	}
	return avc
}

// Mutation returns the AppVersionMutation object of the builder.
func (avc *AppVersionCreate) Mutation() *AppVersionMutation {
	return avc.mutation
}

// Save creates the AppVersion in the database.
func (avc *AppVersionCreate) Save(ctx context.Context) (*AppVersion, error) {
	var (
		err  error
		node *AppVersion
	)
	avc.defaults()
	if len(avc.hooks) == 0 {
		if err = avc.check(); err != nil {
			return nil, err
		}
		node, err = avc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = avc.check(); err != nil {
				return nil, err
			}
			avc.mutation = mutation
			node, err = avc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(avc.hooks) - 1; i >= 0; i-- {
			mut = avc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, avc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (avc *AppVersionCreate) SaveX(ctx context.Context) *AppVersion {
	v, err := avc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (avc *AppVersionCreate) defaults() {
	if _, ok := avc.mutation.CreatedAt(); !ok {
		v := appversion.DefaultCreatedAt()
		avc.mutation.SetCreatedAt(v)
	}
	if _, ok := avc.mutation.UpdatedAt(); !ok {
		v := appversion.DefaultUpdatedAt()
		avc.mutation.SetUpdatedAt(v)
	}
	if _, ok := avc.mutation.IP(); !ok {
		v := appversion.DefaultIP
		avc.mutation.SetIP(v)
	}
	if _, ok := avc.mutation.Name(); !ok {
		v := appversion.DefaultName
		avc.mutation.SetName(v)
	}
	if _, ok := avc.mutation.Sn(); !ok {
		v := appversion.DefaultSn
		avc.mutation.SetSn(v)
	}
	if _, ok := avc.mutation.URL(); !ok {
		v := appversion.DefaultURL
		avc.mutation.SetURL(v)
	}
	if _, ok := avc.mutation.PhoneType(); !ok {
		v := appversion.DefaultPhoneType
		avc.mutation.SetPhoneType(v)
	}
	if _, ok := avc.mutation.IsForceUpdate(); !ok {
		v := appversion.DefaultIsForceUpdate
		avc.mutation.SetIsForceUpdate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avc *AppVersionCreate) check() error {
	if _, ok := avc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := avc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New("ent: missing required field \"ip\"")}
	}
	if _, ok := avc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := avc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New("ent: missing required field \"sn\"")}
	}
	if _, ok := avc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New("ent: missing required field \"url\"")}
	}
	if _, ok := avc.mutation.PhoneType(); !ok {
		return &ValidationError{Name: "phone_type", err: errors.New("ent: missing required field \"phone_type\"")}
	}
	if _, ok := avc.mutation.IsForceUpdate(); !ok {
		return &ValidationError{Name: "is_force_update", err: errors.New("ent: missing required field \"is_force_update\"")}
	}
	return nil
}

func (avc *AppVersionCreate) sqlSave(ctx context.Context) (*AppVersion, error) {
	_node, _spec := avc.createSpec()
	if err := sqlgraph.CreateNode(ctx, avc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (avc *AppVersionCreate) createSpec() (*AppVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &AppVersion{config: avc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appversion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appversion.FieldID,
			},
		}
	)
	if value, ok := avc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := avc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appversion.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := avc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appversion.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := avc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appversion.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := avc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: appversion.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := avc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldName,
		})
		_node.Name = value
	}
	if value, ok := avc.mutation.Sn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldSn,
		})
		_node.Sn = value
	}
	if value, ok := avc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := avc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := avc.mutation.PhoneType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appversion.FieldPhoneType,
		})
		_node.PhoneType = value
	}
	if value, ok := avc.mutation.IsForceUpdate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appversion.FieldIsForceUpdate,
		})
		_node.IsForceUpdate = value
	}
	return _node, _spec
}

// AppVersionCreateBulk is the builder for creating many AppVersion entities in bulk.
type AppVersionCreateBulk struct {
	config
	builders []*AppVersionCreate
}

// Save creates the AppVersion entities in the database.
func (avcb *AppVersionCreateBulk) Save(ctx context.Context) ([]*AppVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(avcb.builders))
	nodes := make([]*AppVersion, len(avcb.builders))
	mutators := make([]Mutator, len(avcb.builders))
	for i := range avcb.builders {
		func(i int, root context.Context) {
			builder := avcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, avcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, avcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, avcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (avcb *AppVersionCreateBulk) SaveX(ctx context.Context) []*AppVersion {
	v, err := avcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/activity"
	"gserver/internal/store/ent/activityapplyinfo"
	"gserver/internal/store/ent/activitytype"
	"gserver/internal/store/ent/admin"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (ac *ActivityCreate) SetUUID(s string) *ActivityCreate {
	ac.mutation.SetUUID(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *ActivityCreate) SetCreatedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCreatedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ActivityCreate) SetUpdatedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableUpdatedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *ActivityCreate) SetDeletedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableDeletedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetTitle sets the "title" field.
func (ac *ActivityCreate) SetTitle(s string) *ActivityCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableTitle(s *string) *ActivityCreate {
	if s != nil {
		ac.SetTitle(*s)
	}
	return ac
}

// SetSubTitle sets the "sub_title" field.
func (ac *ActivityCreate) SetSubTitle(s string) *ActivityCreate {
	ac.mutation.SetSubTitle(s)
	return ac
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableSubTitle(s *string) *ActivityCreate {
	if s != nil {
		ac.SetSubTitle(*s)
	}
	return ac
}

// SetCoverImgID sets the "cover_img_id" field.
func (ac *ActivityCreate) SetCoverImgID(i int) *ActivityCreate {
	ac.mutation.SetCoverImgID(i)
	return ac
}

// SetNillableCoverImgID sets the "cover_img_id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCoverImgID(i *int) *ActivityCreate {
	if i != nil {
		ac.SetCoverImgID(*i)
	}
	return ac
}

// SetNotice sets the "notice" field.
func (ac *ActivityCreate) SetNotice(s string) *ActivityCreate {
	ac.mutation.SetNotice(s)
	return ac
}

// SetNillableNotice sets the "notice" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableNotice(s *string) *ActivityCreate {
	if s != nil {
		ac.SetNotice(*s)
	}
	return ac
}

// SetDetail sets the "detail" field.
func (ac *ActivityCreate) SetDetail(s string) *ActivityCreate {
	ac.mutation.SetDetail(s)
	return ac
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableDetail(s *string) *ActivityCreate {
	if s != nil {
		ac.SetDetail(*s)
	}
	return ac
}

// SetPlace sets the "place" field.
func (ac *ActivityCreate) SetPlace(s string) *ActivityCreate {
	ac.mutation.SetPlace(s)
	return ac
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (ac *ActivityCreate) SetNillablePlace(s *string) *ActivityCreate {
	if s != nil {
		ac.SetPlace(*s)
	}
	return ac
}

// SetIsFree sets the "is_free" field.
func (ac *ActivityCreate) SetIsFree(u uint8) *ActivityCreate {
	ac.mutation.SetIsFree(u)
	return ac
}

// SetNillableIsFree sets the "is_free" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableIsFree(u *uint8) *ActivityCreate {
	if u != nil {
		ac.SetIsFree(*u)
	}
	return ac
}

// SetIsPublish sets the "is_publish" field.
func (ac *ActivityCreate) SetIsPublish(u uint8) *ActivityCreate {
	ac.mutation.SetIsPublish(u)
	return ac
}

// SetNillableIsPublish sets the "is_publish" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableIsPublish(u *uint8) *ActivityCreate {
	if u != nil {
		ac.SetIsPublish(*u)
	}
	return ac
}

// SetAmount sets the "amount" field.
func (ac *ActivityCreate) SetAmount(i int) *ActivityCreate {
	ac.mutation.SetAmount(i)
	return ac
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableAmount(i *int) *ActivityCreate {
	if i != nil {
		ac.SetAmount(*i)
	}
	return ac
}

// SetStartAt sets the "start_at" field.
func (ac *ActivityCreate) SetStartAt(t time.Time) *ActivityCreate {
	ac.mutation.SetStartAt(t)
	return ac
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableStartAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetStartAt(*t)
	}
	return ac
}

// SetEndAt sets the "end_at" field.
func (ac *ActivityCreate) SetEndAt(t time.Time) *ActivityCreate {
	ac.mutation.SetEndAt(t)
	return ac
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableEndAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetEndAt(*t)
	}
	return ac
}

// SetApplyStartAt sets the "apply_start_at" field.
func (ac *ActivityCreate) SetApplyStartAt(t time.Time) *ActivityCreate {
	ac.mutation.SetApplyStartAt(t)
	return ac
}

// SetNillableApplyStartAt sets the "apply_start_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableApplyStartAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetApplyStartAt(*t)
	}
	return ac
}

// SetApplyEndAt sets the "apply_end_at" field.
func (ac *ActivityCreate) SetApplyEndAt(t time.Time) *ActivityCreate {
	ac.mutation.SetApplyEndAt(t)
	return ac
}

// SetNillableApplyEndAt sets the "apply_end_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableApplyEndAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetApplyEndAt(*t)
	}
	return ac
}

// SetIsHot sets the "is_hot" field.
func (ac *ActivityCreate) SetIsHot(u uint8) *ActivityCreate {
	ac.mutation.SetIsHot(u)
	return ac
}

// SetNillableIsHot sets the "is_hot" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableIsHot(u *uint8) *ActivityCreate {
	if u != nil {
		ac.SetIsHot(*u)
	}
	return ac
}

// SetIsAutoPublish sets the "is_auto_publish" field.
func (ac *ActivityCreate) SetIsAutoPublish(u uint8) *ActivityCreate {
	ac.mutation.SetIsAutoPublish(u)
	return ac
}

// SetNillableIsAutoPublish sets the "is_auto_publish" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableIsAutoPublish(u *uint8) *ActivityCreate {
	if u != nil {
		ac.SetIsAutoPublish(*u)
	}
	return ac
}

// SetApplyCount sets the "apply_count" field.
func (ac *ActivityCreate) SetApplyCount(i int) *ActivityCreate {
	ac.mutation.SetApplyCount(i)
	return ac
}

// SetNillableApplyCount sets the "apply_count" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableApplyCount(i *int) *ActivityCreate {
	if i != nil {
		ac.SetApplyCount(*i)
	}
	return ac
}

// SetJoinCount sets the "join_count" field.
func (ac *ActivityCreate) SetJoinCount(i int) *ActivityCreate {
	ac.mutation.SetJoinCount(i)
	return ac
}

// SetNillableJoinCount sets the "join_count" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableJoinCount(i *int) *ActivityCreate {
	if i != nil {
		ac.SetJoinCount(*i)
	}
	return ac
}

// SetIsLimitJoinCount sets the "is_limit_join_count" field.
func (ac *ActivityCreate) SetIsLimitJoinCount(u uint8) *ActivityCreate {
	ac.mutation.SetIsLimitJoinCount(u)
	return ac
}

// SetNillableIsLimitJoinCount sets the "is_limit_join_count" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableIsLimitJoinCount(u *uint8) *ActivityCreate {
	if u != nil {
		ac.SetIsLimitJoinCount(*u)
	}
	return ac
}

// SetBirthday sets the "birthday" field.
func (ac *ActivityCreate) SetBirthday(t time.Time) *ActivityCreate {
	ac.mutation.SetBirthday(t)
	return ac
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableBirthday(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetBirthday(*t)
	}
	return ac
}

// SetSignRemark sets the "sign_remark" field.
func (ac *ActivityCreate) SetSignRemark(s string) *ActivityCreate {
	ac.mutation.SetSignRemark(s)
	return ac
}

// SetNillableSignRemark sets the "sign_remark" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableSignRemark(s *string) *ActivityCreate {
	if s != nil {
		ac.SetSignRemark(*s)
	}
	return ac
}

// SetActivityTypeID sets the "activity_type_id" field.
func (ac *ActivityCreate) SetActivityTypeID(i int) *ActivityCreate {
	ac.mutation.SetActivityTypeID(i)
	return ac
}

// SetNillableActivityTypeID sets the "activity_type_id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableActivityTypeID(i *int) *ActivityCreate {
	if i != nil {
		ac.SetActivityTypeID(*i)
	}
	return ac
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (ac *ActivityCreate) SetCreatedAdminID(i int) *ActivityCreate {
	ac.mutation.SetCreatedAdminID(i)
	return ac
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCreatedAdminID(i *int) *ActivityCreate {
	if i != nil {
		ac.SetCreatedAdminID(*i)
	}
	return ac
}

// SetActivityType sets the "activity_type" edge to the ActivityType entity.
func (ac *ActivityCreate) SetActivityType(a *ActivityType) *ActivityCreate {
	return ac.SetActivityTypeID(a.ID)
}

// AddApplyActivityIDs adds the "apply_activities" edge to the ActivityApplyInfo entity by IDs.
func (ac *ActivityCreate) AddApplyActivityIDs(ids ...int) *ActivityCreate {
	ac.mutation.AddApplyActivityIDs(ids...)
	return ac
}

// AddApplyActivities adds the "apply_activities" edges to the ActivityApplyInfo entity.
func (ac *ActivityCreate) AddApplyActivities(a ...*ActivityApplyInfo) *ActivityCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddApplyActivityIDs(ids...)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (ac *ActivityCreate) SetAdminID(id int) *ActivityCreate {
	ac.mutation.SetAdminID(id)
	return ac
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (ac *ActivityCreate) SetNillableAdminID(id *int) *ActivityCreate {
	if id != nil {
		ac = ac.SetAdminID(*id)
	}
	return ac
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (ac *ActivityCreate) SetAdmin(a *Admin) *ActivityCreate {
	return ac.SetAdminID(a.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	var (
		err  error
		node *Activity
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *ActivityCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := activity.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := activity.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Title(); !ok {
		v := activity.DefaultTitle
		ac.mutation.SetTitle(v)
	}
	if _, ok := ac.mutation.SubTitle(); !ok {
		v := activity.DefaultSubTitle
		ac.mutation.SetSubTitle(v)
	}
	if _, ok := ac.mutation.CoverImgID(); !ok {
		v := activity.DefaultCoverImgID
		ac.mutation.SetCoverImgID(v)
	}
	if _, ok := ac.mutation.Place(); !ok {
		v := activity.DefaultPlace
		ac.mutation.SetPlace(v)
	}
	if _, ok := ac.mutation.IsFree(); !ok {
		v := activity.DefaultIsFree
		ac.mutation.SetIsFree(v)
	}
	if _, ok := ac.mutation.IsPublish(); !ok {
		v := activity.DefaultIsPublish
		ac.mutation.SetIsPublish(v)
	}
	if _, ok := ac.mutation.Amount(); !ok {
		v := activity.DefaultAmount
		ac.mutation.SetAmount(v)
	}
	if _, ok := ac.mutation.IsHot(); !ok {
		v := activity.DefaultIsHot
		ac.mutation.SetIsHot(v)
	}
	if _, ok := ac.mutation.IsAutoPublish(); !ok {
		v := activity.DefaultIsAutoPublish
		ac.mutation.SetIsAutoPublish(v)
	}
	if _, ok := ac.mutation.ApplyCount(); !ok {
		v := activity.DefaultApplyCount
		ac.mutation.SetApplyCount(v)
	}
	if _, ok := ac.mutation.JoinCount(); !ok {
		v := activity.DefaultJoinCount
		ac.mutation.SetJoinCount(v)
	}
	if _, ok := ac.mutation.IsLimitJoinCount(); !ok {
		v := activity.DefaultIsLimitJoinCount
		ac.mutation.SetIsLimitJoinCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivityCreate) check() error {
	if _, ok := ac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New("ent: missing required field \"title\"")}
	}
	if _, ok := ac.mutation.SubTitle(); !ok {
		return &ValidationError{Name: "sub_title", err: errors.New("ent: missing required field \"sub_title\"")}
	}
	if _, ok := ac.mutation.CoverImgID(); !ok {
		return &ValidationError{Name: "cover_img_id", err: errors.New("ent: missing required field \"cover_img_id\"")}
	}
	if _, ok := ac.mutation.Place(); !ok {
		return &ValidationError{Name: "place", err: errors.New("ent: missing required field \"place\"")}
	}
	if _, ok := ac.mutation.IsFree(); !ok {
		return &ValidationError{Name: "is_free", err: errors.New("ent: missing required field \"is_free\"")}
	}
	if _, ok := ac.mutation.IsPublish(); !ok {
		return &ValidationError{Name: "is_publish", err: errors.New("ent: missing required field \"is_publish\"")}
	}
	if _, ok := ac.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New("ent: missing required field \"amount\"")}
	}
	if _, ok := ac.mutation.IsHot(); !ok {
		return &ValidationError{Name: "is_hot", err: errors.New("ent: missing required field \"is_hot\"")}
	}
	if _, ok := ac.mutation.IsAutoPublish(); !ok {
		return &ValidationError{Name: "is_auto_publish", err: errors.New("ent: missing required field \"is_auto_publish\"")}
	}
	if _, ok := ac.mutation.ApplyCount(); !ok {
		return &ValidationError{Name: "apply_count", err: errors.New("ent: missing required field \"apply_count\"")}
	}
	if _, ok := ac.mutation.JoinCount(); !ok {
		return &ValidationError{Name: "join_count", err: errors.New("ent: missing required field \"join_count\"")}
	}
	if _, ok := ac.mutation.IsLimitJoinCount(); !ok {
		return &ValidationError{Name: "is_limit_join_count", err: errors.New("ent: missing required field \"is_limit_join_count\"")}
	}
	return nil
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		_node = &Activity{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: activity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.SubTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldSubTitle,
		})
		_node.SubTitle = value
	}
	if value, ok := ac.mutation.CoverImgID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldCoverImgID,
		})
		_node.CoverImgID = value
	}
	if value, ok := ac.mutation.Notice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldNotice,
		})
		_node.Notice = value
	}
	if value, ok := ac.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldDetail,
		})
		_node.Detail = value
	}
	if value, ok := ac.mutation.Place(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldPlace,
		})
		_node.Place = value
	}
	if value, ok := ac.mutation.IsFree(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsFree,
		})
		_node.IsFree = value
	}
	if value, ok := ac.mutation.IsPublish(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsPublish,
		})
		_node.IsPublish = value
	}
	if value, ok := ac.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := ac.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := ac.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := ac.mutation.ApplyStartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldApplyStartAt,
		})
		_node.ApplyStartAt = value
	}
	if value, ok := ac.mutation.ApplyEndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldApplyEndAt,
		})
		_node.ApplyEndAt = value
	}
	if value, ok := ac.mutation.IsHot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsHot,
		})
		_node.IsHot = value
	}
	if value, ok := ac.mutation.IsAutoPublish(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsAutoPublish,
		})
		_node.IsAutoPublish = value
	}
	if value, ok := ac.mutation.ApplyCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldApplyCount,
		})
		_node.ApplyCount = value
	}
	if value, ok := ac.mutation.JoinCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldJoinCount,
		})
		_node.JoinCount = value
	}
	if value, ok := ac.mutation.IsLimitJoinCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activity.FieldIsLimitJoinCount,
		})
		_node.IsLimitJoinCount = value
	}
	if value, ok := ac.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldBirthday,
		})
		_node.Birthday = value
	}
	if value, ok := ac.mutation.SignRemark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldSignRemark,
		})
		_node.SignRemark = value
	}
	if nodes := ac.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActivityTypeTable,
			Columns: []string{activity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ActivityTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ApplyActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ApplyActivitiesTable,
			Columns: []string{activity.ApplyActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activityapplyinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.AdminTable,
			Columns: []string{activity.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedAdminID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActivityCreateBulk is the builder for creating many Activity entities in bulk.
type ActivityCreateBulk struct {
	config
	builders []*ActivityCreate
}

// Save creates the Activity entities in the database.
func (acb *ActivityCreateBulk) Save(ctx context.Context) ([]*Activity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activity, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActivityCreateBulk) SaveX(ctx context.Context) []*Activity {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

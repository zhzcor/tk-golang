// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionerrorfeedback"

	"entgo.io/ent/dialect/sql"
)

// TkQuestionErrorFeedback is the model entity for the TkQuestionErrorFeedback schema.
type TkQuestionErrorFeedback struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Username holds the value of the "username" field.
	// 用户名
	Username string `json:"username"`
	// Phone holds the value of the "phone" field.
	// 手机号
	Phone string `json:"phone"`
	// ErrorDesc holds the value of the "error_desc" field.
	// 错误描述
	ErrorDesc string `json:"error_desc"`
	// ErrorType holds the value of the "error_type" field.
	// 错误类型，1：题干错误，2：选项错误，3：答案错误，4：解析错误，5：其他
	ErrorType uint8 `json:"error_type"`
	// Status holds the value of the "status" field.
	// 处理状态，1：已处理，2：未处理，3：没问题
	Status uint8 `json:"status"`
	// DealRemark holds the value of the "deal_remark" field.
	// 处理信息备注
	DealRemark string `json:"deal_remark"`
	// OperatorAdminID holds the value of the "operator_admin_id" field.
	// 处理人id
	OperatorAdminID int `json:"operator_admin_id"`
	// QuestionID holds the value of the "question_id" field.
	// 题目id
	QuestionID int `json:"question_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkQuestionErrorFeedbackQuery when eager-loading is set.
	Edges TkQuestionErrorFeedbackEdges `json:"edges"`
}

// TkQuestionErrorFeedbackEdges holds the relations/edges for other nodes in the graph.
type TkQuestionErrorFeedbackEdges struct {
	// Question holds the value of the question edge.
	Question *TkQuestion `json:"question,omitempty"`
	// Admin holds the value of the admin edge.
	Admin *Admin `json:"admin,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionErrorFeedbackEdges) QuestionOrErr() (*TkQuestion, error) {
	if e.loadedTypes[0] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestion.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionErrorFeedbackEdges) AdminOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Admin == nil {
			// The edge admin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkQuestionErrorFeedback) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkquestionerrorfeedback.FieldID, tkquestionerrorfeedback.FieldErrorType, tkquestionerrorfeedback.FieldStatus, tkquestionerrorfeedback.FieldOperatorAdminID, tkquestionerrorfeedback.FieldQuestionID:
			values[i] = new(sql.NullInt64)
		case tkquestionerrorfeedback.FieldUUID, tkquestionerrorfeedback.FieldUsername, tkquestionerrorfeedback.FieldPhone, tkquestionerrorfeedback.FieldErrorDesc, tkquestionerrorfeedback.FieldDealRemark:
			values[i] = new(sql.NullString)
		case tkquestionerrorfeedback.FieldCreatedAt, tkquestionerrorfeedback.FieldUpdatedAt, tkquestionerrorfeedback.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkQuestionErrorFeedback", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkQuestionErrorFeedback fields.
func (tqef *TkQuestionErrorFeedback) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkquestionerrorfeedback.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tqef.ID = int(value.Int64)
		case tkquestionerrorfeedback.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tqef.UUID = value.String
			}
		case tkquestionerrorfeedback.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tqef.CreatedAt = new(time.Time)
				*tqef.CreatedAt = value.Time
			}
		case tkquestionerrorfeedback.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tqef.UpdatedAt = new(time.Time)
				*tqef.UpdatedAt = value.Time
			}
		case tkquestionerrorfeedback.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tqef.DeletedAt = new(time.Time)
				*tqef.DeletedAt = value.Time
			}
		case tkquestionerrorfeedback.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				tqef.Username = value.String
			}
		case tkquestionerrorfeedback.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				tqef.Phone = value.String
			}
		case tkquestionerrorfeedback.FieldErrorDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_desc", values[i])
			} else if value.Valid {
				tqef.ErrorDesc = value.String
			}
		case tkquestionerrorfeedback.FieldErrorType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_type", values[i])
			} else if value.Valid {
				tqef.ErrorType = uint8(value.Int64)
			}
		case tkquestionerrorfeedback.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tqef.Status = uint8(value.Int64)
			}
		case tkquestionerrorfeedback.FieldDealRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deal_remark", values[i])
			} else if value.Valid {
				tqef.DealRemark = value.String
			}
		case tkquestionerrorfeedback.FieldOperatorAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operator_admin_id", values[i])
			} else if value.Valid {
				tqef.OperatorAdminID = int(value.Int64)
			}
		case tkquestionerrorfeedback.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				tqef.QuestionID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestion queries the "question" edge of the TkQuestionErrorFeedback entity.
func (tqef *TkQuestionErrorFeedback) QueryQuestion() *TkQuestionQuery {
	return (&TkQuestionErrorFeedbackClient{config: tqef.config}).QueryQuestion(tqef)
}

// QueryAdmin queries the "admin" edge of the TkQuestionErrorFeedback entity.
func (tqef *TkQuestionErrorFeedback) QueryAdmin() *AdminQuery {
	return (&TkQuestionErrorFeedbackClient{config: tqef.config}).QueryAdmin(tqef)
}

// Update returns a builder for updating this TkQuestionErrorFeedback.
// Note that you need to call TkQuestionErrorFeedback.Unwrap() before calling this method if this TkQuestionErrorFeedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (tqef *TkQuestionErrorFeedback) Update() *TkQuestionErrorFeedbackUpdateOne {
	return (&TkQuestionErrorFeedbackClient{config: tqef.config}).UpdateOne(tqef)
}

// Unwrap unwraps the TkQuestionErrorFeedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tqef *TkQuestionErrorFeedback) Unwrap() *TkQuestionErrorFeedback {
	tx, ok := tqef.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkQuestionErrorFeedback is not a transactional entity")
	}
	tqef.config.driver = tx.drv
	return tqef
}

// String implements the fmt.Stringer.
func (tqef *TkQuestionErrorFeedback) String() string {
	var builder strings.Builder
	builder.WriteString("TkQuestionErrorFeedback(")
	builder.WriteString(fmt.Sprintf("id=%v", tqef.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tqef.UUID)
	if v := tqef.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tqef.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tqef.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", username=")
	builder.WriteString(tqef.Username)
	builder.WriteString(", phone=")
	builder.WriteString(tqef.Phone)
	builder.WriteString(", error_desc=")
	builder.WriteString(tqef.ErrorDesc)
	builder.WriteString(", error_type=")
	builder.WriteString(fmt.Sprintf("%v", tqef.ErrorType))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", tqef.Status))
	builder.WriteString(", deal_remark=")
	builder.WriteString(tqef.DealRemark)
	builder.WriteString(", operator_admin_id=")
	builder.WriteString(fmt.Sprintf("%v", tqef.OperatorAdminID))
	builder.WriteString(", question_id=")
	builder.WriteString(fmt.Sprintf("%v", tqef.QuestionID))
	builder.WriteByte(')')
	return builder.String()
}

// TkQuestionErrorFeedbacks is a parsable slice of TkQuestionErrorFeedback.
type TkQuestionErrorFeedbacks []*TkQuestionErrorFeedback

func (tqef TkQuestionErrorFeedbacks) config(cfg config) {
	for _i := range tqef {
		tqef[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/kccoursesmallcategory"
	"gserver/internal/store/ent/user"
	"gserver/internal/store/ent/videorecord"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// VideoRecord is the model entity for the VideoRecord schema.
type VideoRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// VideoName holds the value of the "video_name" field.
	// 视频名称
	VideoName string `json:"video_name"`
	// ViewTime holds the value of the "view_time" field.
	// 观看时长 s
	ViewTime uint8 `json:"view_time"`
	// UserID holds the value of the "user_id" field.
	// 学生用户id
	UserID int `json:"user_id"`
	// SmallID holds the value of the "small_id" field.
	// 小节id
	SmallID int `json:"small_id"`
	// VideoTime holds the value of the "video_time" field.
	// 视频时长
	VideoTime int `json:"video_time"`
	// ViewAt holds the value of the "view_at" field.
	// 最近一次观看时间
	ViewAt *time.Time `json:"view_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideoRecordQuery when eager-loading is set.
	Edges VideoRecordEdges `json:"edges"`
}

// VideoRecordEdges holds the relations/edges for other nodes in the graph.
type VideoRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// SmallCourse holds the value of the small_course edge.
	SmallCourse *KcCourseSmallCategory `json:"small_course,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoRecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SmallCourseOrErr returns the SmallCourse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoRecordEdges) SmallCourseOrErr() (*KcCourseSmallCategory, error) {
	if e.loadedTypes[1] {
		if e.SmallCourse == nil {
			// The edge small_course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccoursesmallcategory.Label}
		}
		return e.SmallCourse, nil
	}
	return nil, &NotLoadedError{edge: "small_course"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VideoRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case videorecord.FieldID, videorecord.FieldViewTime, videorecord.FieldUserID, videorecord.FieldSmallID, videorecord.FieldVideoTime:
			values[i] = new(sql.NullInt64)
		case videorecord.FieldUUID, videorecord.FieldVideoName:
			values[i] = new(sql.NullString)
		case videorecord.FieldCreatedAt, videorecord.FieldUpdatedAt, videorecord.FieldDeletedAt, videorecord.FieldViewAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VideoRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VideoRecord fields.
func (vr *VideoRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case videorecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vr.ID = int(value.Int64)
		case videorecord.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				vr.UUID = value.String
			}
		case videorecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vr.CreatedAt = new(time.Time)
				*vr.CreatedAt = value.Time
			}
		case videorecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vr.UpdatedAt = new(time.Time)
				*vr.UpdatedAt = value.Time
			}
		case videorecord.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vr.DeletedAt = new(time.Time)
				*vr.DeletedAt = value.Time
			}
		case videorecord.FieldVideoName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_name", values[i])
			} else if value.Valid {
				vr.VideoName = value.String
			}
		case videorecord.FieldViewTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view_time", values[i])
			} else if value.Valid {
				vr.ViewTime = uint8(value.Int64)
			}
		case videorecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				vr.UserID = int(value.Int64)
			}
		case videorecord.FieldSmallID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field small_id", values[i])
			} else if value.Valid {
				vr.SmallID = int(value.Int64)
			}
		case videorecord.FieldVideoTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_time", values[i])
			} else if value.Valid {
				vr.VideoTime = int(value.Int64)
			}
		case videorecord.FieldViewAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field view_at", values[i])
			} else if value.Valid {
				vr.ViewAt = new(time.Time)
				*vr.ViewAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the VideoRecord entity.
func (vr *VideoRecord) QueryUser() *UserQuery {
	return (&VideoRecordClient{config: vr.config}).QueryUser(vr)
}

// QuerySmallCourse queries the "small_course" edge of the VideoRecord entity.
func (vr *VideoRecord) QuerySmallCourse() *KcCourseSmallCategoryQuery {
	return (&VideoRecordClient{config: vr.config}).QuerySmallCourse(vr)
}

// Update returns a builder for updating this VideoRecord.
// Note that you need to call VideoRecord.Unwrap() before calling this method if this VideoRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (vr *VideoRecord) Update() *VideoRecordUpdateOne {
	return (&VideoRecordClient{config: vr.config}).UpdateOne(vr)
}

// Unwrap unwraps the VideoRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vr *VideoRecord) Unwrap() *VideoRecord {
	tx, ok := vr.config.driver.(*txDriver)
	if !ok {
		panic("ent: VideoRecord is not a transactional entity")
	}
	vr.config.driver = tx.drv
	return vr
}

// String implements the fmt.Stringer.
func (vr *VideoRecord) String() string {
	var builder strings.Builder
	builder.WriteString("VideoRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", vr.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(vr.UUID)
	if v := vr.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := vr.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := vr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", video_name=")
	builder.WriteString(vr.VideoName)
	builder.WriteString(", view_time=")
	builder.WriteString(fmt.Sprintf("%v", vr.ViewTime))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", vr.UserID))
	builder.WriteString(", small_id=")
	builder.WriteString(fmt.Sprintf("%v", vr.SmallID))
	builder.WriteString(", video_time=")
	builder.WriteString(fmt.Sprintf("%v", vr.VideoTime))
	if v := vr.ViewAt; v != nil {
		builder.WriteString(", view_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// VideoRecords is a parsable slice of VideoRecord.
type VideoRecords []*VideoRecord

func (vr VideoRecords) config(cfg config) {
	for _i := range vr {
		vr[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/kcvideouploadtask"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcVideoUploadTaskCreate is the builder for creating a KcVideoUploadTask entity.
type KcVideoUploadTaskCreate struct {
	config
	mutation *KcVideoUploadTaskMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (kvutc *KcVideoUploadTaskCreate) SetUUID(s string) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetUUID(s)
	return kvutc
}

// SetCreatedAt sets the "created_at" field.
func (kvutc *KcVideoUploadTaskCreate) SetCreatedAt(t time.Time) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetCreatedAt(t)
	return kvutc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableCreatedAt(t *time.Time) *KcVideoUploadTaskCreate {
	if t != nil {
		kvutc.SetCreatedAt(*t)
	}
	return kvutc
}

// SetUpdatedAt sets the "updated_at" field.
func (kvutc *KcVideoUploadTaskCreate) SetUpdatedAt(t time.Time) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetUpdatedAt(t)
	return kvutc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableUpdatedAt(t *time.Time) *KcVideoUploadTaskCreate {
	if t != nil {
		kvutc.SetUpdatedAt(*t)
	}
	return kvutc
}

// SetDeletedAt sets the "deleted_at" field.
func (kvutc *KcVideoUploadTaskCreate) SetDeletedAt(t time.Time) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetDeletedAt(t)
	return kvutc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableDeletedAt(t *time.Time) *KcVideoUploadTaskCreate {
	if t != nil {
		kvutc.SetDeletedAt(*t)
	}
	return kvutc
}

// SetVideoID sets the "video_id" field.
func (kvutc *KcVideoUploadTaskCreate) SetVideoID(i int) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetVideoID(i)
	return kvutc
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableVideoID(i *int) *KcVideoUploadTaskCreate {
	if i != nil {
		kvutc.SetVideoID(*i)
	}
	return kvutc
}

// SetAttachmentID sets the "attachment_id" field.
func (kvutc *KcVideoUploadTaskCreate) SetAttachmentID(i int) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetAttachmentID(i)
	return kvutc
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableAttachmentID(i *int) *KcVideoUploadTaskCreate {
	if i != nil {
		kvutc.SetAttachmentID(*i)
	}
	return kvutc
}

// SetType sets the "type" field.
func (kvutc *KcVideoUploadTaskCreate) SetType(u uint8) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetType(u)
	return kvutc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableType(u *uint8) *KcVideoUploadTaskCreate {
	if u != nil {
		kvutc.SetType(*u)
	}
	return kvutc
}

// SetCourseID sets the "course_id" field.
func (kvutc *KcVideoUploadTaskCreate) SetCourseID(i int) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetCourseID(i)
	return kvutc
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableCourseID(i *int) *KcVideoUploadTaskCreate {
	if i != nil {
		kvutc.SetCourseID(*i)
	}
	return kvutc
}

// SetStatus sets the "status" field.
func (kvutc *KcVideoUploadTaskCreate) SetStatus(i int) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetStatus(i)
	return kvutc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableStatus(i *int) *KcVideoUploadTaskCreate {
	if i != nil {
		kvutc.SetStatus(*i)
	}
	return kvutc
}

// SetRemark sets the "remark" field.
func (kvutc *KcVideoUploadTaskCreate) SetRemark(s string) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetRemark(s)
	return kvutc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableRemark(s *string) *KcVideoUploadTaskCreate {
	if s != nil {
		kvutc.SetRemark(*s)
	}
	return kvutc
}

// SetTitle sets the "title" field.
func (kvutc *KcVideoUploadTaskCreate) SetTitle(s string) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetTitle(s)
	return kvutc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableTitle(s *string) *KcVideoUploadTaskCreate {
	if s != nil {
		kvutc.SetTitle(*s)
	}
	return kvutc
}

// SetVideoName sets the "video_name" field.
func (kvutc *KcVideoUploadTaskCreate) SetVideoName(s string) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetVideoName(s)
	return kvutc
}

// SetNillableVideoName sets the "video_name" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableVideoName(s *string) *KcVideoUploadTaskCreate {
	if s != nil {
		kvutc.SetVideoName(*s)
	}
	return kvutc
}

// SetTotalSize sets the "total_size" field.
func (kvutc *KcVideoUploadTaskCreate) SetTotalSize(i int) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetTotalSize(i)
	return kvutc
}

// SetNillableTotalSize sets the "total_size" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableTotalSize(i *int) *KcVideoUploadTaskCreate {
	if i != nil {
		kvutc.SetTotalSize(*i)
	}
	return kvutc
}

// SetLength sets the "length" field.
func (kvutc *KcVideoUploadTaskCreate) SetLength(i int) *KcVideoUploadTaskCreate {
	kvutc.mutation.SetLength(i)
	return kvutc
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (kvutc *KcVideoUploadTaskCreate) SetNillableLength(i *int) *KcVideoUploadTaskCreate {
	if i != nil {
		kvutc.SetLength(*i)
	}
	return kvutc
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (kvutc *KcVideoUploadTaskCreate) SetAttachment(a *Attachment) *KcVideoUploadTaskCreate {
	return kvutc.SetAttachmentID(a.ID)
}

// Mutation returns the KcVideoUploadTaskMutation object of the builder.
func (kvutc *KcVideoUploadTaskCreate) Mutation() *KcVideoUploadTaskMutation {
	return kvutc.mutation
}

// Save creates the KcVideoUploadTask in the database.
func (kvutc *KcVideoUploadTaskCreate) Save(ctx context.Context) (*KcVideoUploadTask, error) {
	var (
		err  error
		node *KcVideoUploadTask
	)
	kvutc.defaults()
	if len(kvutc.hooks) == 0 {
		if err = kvutc.check(); err != nil {
			return nil, err
		}
		node, err = kvutc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcVideoUploadTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kvutc.check(); err != nil {
				return nil, err
			}
			kvutc.mutation = mutation
			node, err = kvutc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kvutc.hooks) - 1; i >= 0; i-- {
			mut = kvutc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kvutc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kvutc *KcVideoUploadTaskCreate) SaveX(ctx context.Context) *KcVideoUploadTask {
	v, err := kvutc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (kvutc *KcVideoUploadTaskCreate) defaults() {
	if _, ok := kvutc.mutation.CreatedAt(); !ok {
		v := kcvideouploadtask.DefaultCreatedAt()
		kvutc.mutation.SetCreatedAt(v)
	}
	if _, ok := kvutc.mutation.UpdatedAt(); !ok {
		v := kcvideouploadtask.DefaultUpdatedAt()
		kvutc.mutation.SetUpdatedAt(v)
	}
	if _, ok := kvutc.mutation.GetType(); !ok {
		v := kcvideouploadtask.DefaultType
		kvutc.mutation.SetType(v)
	}
	if _, ok := kvutc.mutation.CourseID(); !ok {
		v := kcvideouploadtask.DefaultCourseID
		kvutc.mutation.SetCourseID(v)
	}
	if _, ok := kvutc.mutation.Status(); !ok {
		v := kcvideouploadtask.DefaultStatus
		kvutc.mutation.SetStatus(v)
	}
	if _, ok := kvutc.mutation.Title(); !ok {
		v := kcvideouploadtask.DefaultTitle
		kvutc.mutation.SetTitle(v)
	}
	if _, ok := kvutc.mutation.VideoName(); !ok {
		v := kcvideouploadtask.DefaultVideoName
		kvutc.mutation.SetVideoName(v)
	}
	if _, ok := kvutc.mutation.TotalSize(); !ok {
		v := kcvideouploadtask.DefaultTotalSize
		kvutc.mutation.SetTotalSize(v)
	}
	if _, ok := kvutc.mutation.Length(); !ok {
		v := kcvideouploadtask.DefaultLength
		kvutc.mutation.SetLength(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kvutc *KcVideoUploadTaskCreate) check() error {
	if _, ok := kvutc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := kvutc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := kvutc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course_id", err: errors.New("ent: missing required field \"course_id\"")}
	}
	if _, ok := kvutc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := kvutc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New("ent: missing required field \"title\"")}
	}
	if _, ok := kvutc.mutation.VideoName(); !ok {
		return &ValidationError{Name: "video_name", err: errors.New("ent: missing required field \"video_name\"")}
	}
	if _, ok := kvutc.mutation.TotalSize(); !ok {
		return &ValidationError{Name: "total_size", err: errors.New("ent: missing required field \"total_size\"")}
	}
	if _, ok := kvutc.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New("ent: missing required field \"length\"")}
	}
	return nil
}

func (kvutc *KcVideoUploadTaskCreate) sqlSave(ctx context.Context) (*KcVideoUploadTask, error) {
	_node, _spec := kvutc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kvutc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (kvutc *KcVideoUploadTaskCreate) createSpec() (*KcVideoUploadTask, *sqlgraph.CreateSpec) {
	var (
		_node = &KcVideoUploadTask{config: kvutc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kcvideouploadtask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcvideouploadtask.FieldID,
			},
		}
	)
	if value, ok := kvutc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := kvutc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcvideouploadtask.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := kvutc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcvideouploadtask.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := kvutc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcvideouploadtask.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := kvutc.mutation.VideoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldVideoID,
		})
		_node.VideoID = value
	}
	if value, ok := kvutc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcvideouploadtask.FieldType,
		})
		_node.Type = value
	}
	if value, ok := kvutc.mutation.CourseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldCourseID,
		})
		_node.CourseID = value
	}
	if value, ok := kvutc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := kvutc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := kvutc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := kvutc.mutation.VideoName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldVideoName,
		})
		_node.VideoName = value
	}
	if value, ok := kvutc.mutation.TotalSize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldTotalSize,
		})
		_node.TotalSize = value
	}
	if value, ok := kvutc.mutation.Length(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldLength,
		})
		_node.Length = value
	}
	if nodes := kvutc.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcvideouploadtask.AttachmentTable,
			Columns: []string{kcvideouploadtask.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AttachmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KcVideoUploadTaskCreateBulk is the builder for creating many KcVideoUploadTask entities in bulk.
type KcVideoUploadTaskCreateBulk struct {
	config
	builders []*KcVideoUploadTaskCreate
}

// Save creates the KcVideoUploadTask entities in the database.
func (kvutcb *KcVideoUploadTaskCreateBulk) Save(ctx context.Context) ([]*KcVideoUploadTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kvutcb.builders))
	nodes := make([]*KcVideoUploadTask, len(kvutcb.builders))
	mutators := make([]Mutator, len(kvutcb.builders))
	for i := range kvutcb.builders {
		func(i int, root context.Context) {
			builder := kvutcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KcVideoUploadTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kvutcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kvutcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kvutcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kvutcb *KcVideoUploadTaskCreateBulk) SaveX(ctx context.Context) []*KcVideoUploadTask {
	v, err := kvutcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

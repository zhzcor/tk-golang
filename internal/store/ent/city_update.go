// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/city"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkquestionbankcity"
	"tkserver/internal/store/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CityUpdate is the builder for updating City entities.
type CityUpdate struct {
	config
	hooks    []Hook
	mutation *CityMutation
}

// Where adds a new predicate for the CityUpdate builder.
func (cu *CityUpdate) Where(ps ...predicate.City) *CityUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetUUID sets the "uuid" field.
func (cu *CityUpdate) SetUUID(s string) *CityUpdate {
	cu.mutation.SetUUID(s)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CityUpdate) SetUpdatedAt(t time.Time) *CityUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CityUpdate) ClearUpdatedAt() *CityUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CityUpdate) SetDeletedAt(t time.Time) *CityUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CityUpdate) SetNillableDeletedAt(t *time.Time) *CityUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CityUpdate) ClearDeletedAt() *CityUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetName sets the "name" field.
func (cu *CityUpdate) SetName(s string) *CityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CityUpdate) SetNillableName(s *string) *CityUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *CityUpdate) SetStatus(u uint8) *CityUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(u)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CityUpdate) SetNillableStatus(u *uint8) *CityUpdate {
	if u != nil {
		cu.SetStatus(*u)
	}
	return cu
}

// AddStatus adds u to the "status" field.
func (cu *CityUpdate) AddStatus(u uint8) *CityUpdate {
	cu.mutation.AddStatus(u)
	return cu
}

// SetCode sets the "code" field.
func (cu *CityUpdate) SetCode(s string) *CityUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *CityUpdate) SetNillableCode(s *string) *CityUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// SetDesc sets the "desc" field.
func (cu *CityUpdate) SetDesc(s string) *CityUpdate {
	cu.mutation.SetDesc(s)
	return cu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cu *CityUpdate) SetNillableDesc(s *string) *CityUpdate {
	if s != nil {
		cu.SetDesc(*s)
	}
	return cu
}

// SetSortOrder sets the "sort_order" field.
func (cu *CityUpdate) SetSortOrder(i int) *CityUpdate {
	cu.mutation.ResetSortOrder()
	cu.mutation.SetSortOrder(i)
	return cu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (cu *CityUpdate) SetNillableSortOrder(i *int) *CityUpdate {
	if i != nil {
		cu.SetSortOrder(*i)
	}
	return cu
}

// AddSortOrder adds i to the "sort_order" field.
func (cu *CityUpdate) AddSortOrder(i int) *CityUpdate {
	cu.mutation.AddSortOrder(i)
	return cu
}

// AddKcClasIDs adds the "kc_class" edge to the KcClass entity by IDs.
func (cu *CityUpdate) AddKcClasIDs(ids ...int) *CityUpdate {
	cu.mutation.AddKcClasIDs(ids...)
	return cu
}

// AddKcClass adds the "kc_class" edges to the KcClass entity.
func (cu *CityUpdate) AddKcClass(k ...*KcClass) *CityUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cu.AddKcClasIDs(ids...)
}

// AddCourseIDs adds the "course" edge to the KcCourse entity by IDs.
func (cu *CityUpdate) AddCourseIDs(ids ...int) *CityUpdate {
	cu.mutation.AddCourseIDs(ids...)
	return cu
}

// AddCourse adds the "course" edges to the KcCourse entity.
func (cu *CityUpdate) AddCourse(k ...*KcCourse) *CityUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cu.AddCourseIDs(ids...)
}

// AddUserCityIDs adds the "user_city" edge to the User entity by IDs.
func (cu *CityUpdate) AddUserCityIDs(ids ...int) *CityUpdate {
	cu.mutation.AddUserCityIDs(ids...)
	return cu
}

// AddUserCity adds the "user_city" edges to the User entity.
func (cu *CityUpdate) AddUserCity(u ...*User) *CityUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserCityIDs(ids...)
}

// AddQuestionBankCityIDs adds the "question_bank_cities" edge to the TkQuestionBankCity entity by IDs.
func (cu *CityUpdate) AddQuestionBankCityIDs(ids ...int) *CityUpdate {
	cu.mutation.AddQuestionBankCityIDs(ids...)
	return cu
}

// AddQuestionBankCities adds the "question_bank_cities" edges to the TkQuestionBankCity entity.
func (cu *CityUpdate) AddQuestionBankCities(t ...*TkQuestionBankCity) *CityUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddQuestionBankCityIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cu *CityUpdate) Mutation() *CityMutation {
	return cu.mutation
}

// ClearKcClass clears all "kc_class" edges to the KcClass entity.
func (cu *CityUpdate) ClearKcClass() *CityUpdate {
	cu.mutation.ClearKcClass()
	return cu
}

// RemoveKcClasIDs removes the "kc_class" edge to KcClass entities by IDs.
func (cu *CityUpdate) RemoveKcClasIDs(ids ...int) *CityUpdate {
	cu.mutation.RemoveKcClasIDs(ids...)
	return cu
}

// RemoveKcClass removes "kc_class" edges to KcClass entities.
func (cu *CityUpdate) RemoveKcClass(k ...*KcClass) *CityUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cu.RemoveKcClasIDs(ids...)
}

// ClearCourse clears all "course" edges to the KcCourse entity.
func (cu *CityUpdate) ClearCourse() *CityUpdate {
	cu.mutation.ClearCourse()
	return cu
}

// RemoveCourseIDs removes the "course" edge to KcCourse entities by IDs.
func (cu *CityUpdate) RemoveCourseIDs(ids ...int) *CityUpdate {
	cu.mutation.RemoveCourseIDs(ids...)
	return cu
}

// RemoveCourse removes "course" edges to KcCourse entities.
func (cu *CityUpdate) RemoveCourse(k ...*KcCourse) *CityUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cu.RemoveCourseIDs(ids...)
}

// ClearUserCity clears all "user_city" edges to the User entity.
func (cu *CityUpdate) ClearUserCity() *CityUpdate {
	cu.mutation.ClearUserCity()
	return cu
}

// RemoveUserCityIDs removes the "user_city" edge to User entities by IDs.
func (cu *CityUpdate) RemoveUserCityIDs(ids ...int) *CityUpdate {
	cu.mutation.RemoveUserCityIDs(ids...)
	return cu
}

// RemoveUserCity removes "user_city" edges to User entities.
func (cu *CityUpdate) RemoveUserCity(u ...*User) *CityUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserCityIDs(ids...)
}

// ClearQuestionBankCities clears all "question_bank_cities" edges to the TkQuestionBankCity entity.
func (cu *CityUpdate) ClearQuestionBankCities() *CityUpdate {
	cu.mutation.ClearQuestionBankCities()
	return cu
}

// RemoveQuestionBankCityIDs removes the "question_bank_cities" edge to TkQuestionBankCity entities by IDs.
func (cu *CityUpdate) RemoveQuestionBankCityIDs(ids ...int) *CityUpdate {
	cu.mutation.RemoveQuestionBankCityIDs(ids...)
	return cu
}

// RemoveQuestionBankCities removes "question_bank_cities" edges to TkQuestionBankCity entities.
func (cu *CityUpdate) RemoveQuestionBankCities(t ...*TkQuestionBankCity) *CityUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveQuestionBankCityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CityUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := city.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: city.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldUUID,
		})
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: city.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldUpdatedAt,
		})
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: city.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldDeletedAt,
		})
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: city.FieldDeletedAt,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldName,
		})
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: city.FieldStatus,
		})
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: city.FieldStatus,
		})
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldCode,
		})
	}
	if value, ok := cu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldDesc,
		})
	}
	if value, ok := cu.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldSortOrder,
		})
	}
	if value, ok := cu.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldSortOrder,
		})
	}
	if cu.mutation.KcClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.KcClassTable,
			Columns: []string{city.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedKcClassIDs(); len(nodes) > 0 && !cu.mutation.KcClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.KcClassTable,
			Columns: []string{city.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.KcClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.KcClassTable,
			Columns: []string{city.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CourseTable,
			Columns: []string{city.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCourseIDs(); len(nodes) > 0 && !cu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CourseTable,
			Columns: []string{city.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CourseTable,
			Columns: []string{city.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UserCityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.UserCityTable,
			Columns: []string{city.UserCityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUserCityIDs(); len(nodes) > 0 && !cu.mutation.UserCityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.UserCityTable,
			Columns: []string{city.UserCityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserCityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.UserCityTable,
			Columns: []string{city.UserCityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.QuestionBankCitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QuestionBankCitiesTable,
			Columns: []string{city.QuestionBankCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedQuestionBankCitiesIDs(); len(nodes) > 0 && !cu.mutation.QuestionBankCitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QuestionBankCitiesTable,
			Columns: []string{city.QuestionBankCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.QuestionBankCitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QuestionBankCitiesTable,
			Columns: []string{city.QuestionBankCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CityUpdateOne is the builder for updating a single City entity.
type CityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CityMutation
}

// SetUUID sets the "uuid" field.
func (cuo *CityUpdateOne) SetUUID(s string) *CityUpdateOne {
	cuo.mutation.SetUUID(s)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CityUpdateOne) SetUpdatedAt(t time.Time) *CityUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CityUpdateOne) ClearUpdatedAt() *CityUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CityUpdateOne) SetDeletedAt(t time.Time) *CityUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableDeletedAt(t *time.Time) *CityUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CityUpdateOne) ClearDeletedAt() *CityUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CityUpdateOne) SetName(s string) *CityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableName(s *string) *CityUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CityUpdateOne) SetStatus(u uint8) *CityUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(u)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableStatus(u *uint8) *CityUpdateOne {
	if u != nil {
		cuo.SetStatus(*u)
	}
	return cuo
}

// AddStatus adds u to the "status" field.
func (cuo *CityUpdateOne) AddStatus(u uint8) *CityUpdateOne {
	cuo.mutation.AddStatus(u)
	return cuo
}

// SetCode sets the "code" field.
func (cuo *CityUpdateOne) SetCode(s string) *CityUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableCode(s *string) *CityUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// SetDesc sets the "desc" field.
func (cuo *CityUpdateOne) SetDesc(s string) *CityUpdateOne {
	cuo.mutation.SetDesc(s)
	return cuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableDesc(s *string) *CityUpdateOne {
	if s != nil {
		cuo.SetDesc(*s)
	}
	return cuo
}

// SetSortOrder sets the "sort_order" field.
func (cuo *CityUpdateOne) SetSortOrder(i int) *CityUpdateOne {
	cuo.mutation.ResetSortOrder()
	cuo.mutation.SetSortOrder(i)
	return cuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableSortOrder(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetSortOrder(*i)
	}
	return cuo
}

// AddSortOrder adds i to the "sort_order" field.
func (cuo *CityUpdateOne) AddSortOrder(i int) *CityUpdateOne {
	cuo.mutation.AddSortOrder(i)
	return cuo
}

// AddKcClasIDs adds the "kc_class" edge to the KcClass entity by IDs.
func (cuo *CityUpdateOne) AddKcClasIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.AddKcClasIDs(ids...)
	return cuo
}

// AddKcClass adds the "kc_class" edges to the KcClass entity.
func (cuo *CityUpdateOne) AddKcClass(k ...*KcClass) *CityUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cuo.AddKcClasIDs(ids...)
}

// AddCourseIDs adds the "course" edge to the KcCourse entity by IDs.
func (cuo *CityUpdateOne) AddCourseIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.AddCourseIDs(ids...)
	return cuo
}

// AddCourse adds the "course" edges to the KcCourse entity.
func (cuo *CityUpdateOne) AddCourse(k ...*KcCourse) *CityUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cuo.AddCourseIDs(ids...)
}

// AddUserCityIDs adds the "user_city" edge to the User entity by IDs.
func (cuo *CityUpdateOne) AddUserCityIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.AddUserCityIDs(ids...)
	return cuo
}

// AddUserCity adds the "user_city" edges to the User entity.
func (cuo *CityUpdateOne) AddUserCity(u ...*User) *CityUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserCityIDs(ids...)
}

// AddQuestionBankCityIDs adds the "question_bank_cities" edge to the TkQuestionBankCity entity by IDs.
func (cuo *CityUpdateOne) AddQuestionBankCityIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.AddQuestionBankCityIDs(ids...)
	return cuo
}

// AddQuestionBankCities adds the "question_bank_cities" edges to the TkQuestionBankCity entity.
func (cuo *CityUpdateOne) AddQuestionBankCities(t ...*TkQuestionBankCity) *CityUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddQuestionBankCityIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cuo *CityUpdateOne) Mutation() *CityMutation {
	return cuo.mutation
}

// ClearKcClass clears all "kc_class" edges to the KcClass entity.
func (cuo *CityUpdateOne) ClearKcClass() *CityUpdateOne {
	cuo.mutation.ClearKcClass()
	return cuo
}

// RemoveKcClasIDs removes the "kc_class" edge to KcClass entities by IDs.
func (cuo *CityUpdateOne) RemoveKcClasIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.RemoveKcClasIDs(ids...)
	return cuo
}

// RemoveKcClass removes "kc_class" edges to KcClass entities.
func (cuo *CityUpdateOne) RemoveKcClass(k ...*KcClass) *CityUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cuo.RemoveKcClasIDs(ids...)
}

// ClearCourse clears all "course" edges to the KcCourse entity.
func (cuo *CityUpdateOne) ClearCourse() *CityUpdateOne {
	cuo.mutation.ClearCourse()
	return cuo
}

// RemoveCourseIDs removes the "course" edge to KcCourse entities by IDs.
func (cuo *CityUpdateOne) RemoveCourseIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.RemoveCourseIDs(ids...)
	return cuo
}

// RemoveCourse removes "course" edges to KcCourse entities.
func (cuo *CityUpdateOne) RemoveCourse(k ...*KcCourse) *CityUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cuo.RemoveCourseIDs(ids...)
}

// ClearUserCity clears all "user_city" edges to the User entity.
func (cuo *CityUpdateOne) ClearUserCity() *CityUpdateOne {
	cuo.mutation.ClearUserCity()
	return cuo
}

// RemoveUserCityIDs removes the "user_city" edge to User entities by IDs.
func (cuo *CityUpdateOne) RemoveUserCityIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.RemoveUserCityIDs(ids...)
	return cuo
}

// RemoveUserCity removes "user_city" edges to User entities.
func (cuo *CityUpdateOne) RemoveUserCity(u ...*User) *CityUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserCityIDs(ids...)
}

// ClearQuestionBankCities clears all "question_bank_cities" edges to the TkQuestionBankCity entity.
func (cuo *CityUpdateOne) ClearQuestionBankCities() *CityUpdateOne {
	cuo.mutation.ClearQuestionBankCities()
	return cuo
}

// RemoveQuestionBankCityIDs removes the "question_bank_cities" edge to TkQuestionBankCity entities by IDs.
func (cuo *CityUpdateOne) RemoveQuestionBankCityIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.RemoveQuestionBankCityIDs(ids...)
	return cuo
}

// RemoveQuestionBankCities removes "question_bank_cities" edges to TkQuestionBankCity entities.
func (cuo *CityUpdateOne) RemoveQuestionBankCities(t ...*TkQuestionBankCity) *CityUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveQuestionBankCityIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CityUpdateOne) Select(field string, fields ...string) *CityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated City entity.
func (cuo *CityUpdateOne) Save(ctx context.Context) (*City, error) {
	var (
		err  error
		node *City
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CityUpdateOne) SaveX(ctx context.Context) *City {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CityUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := city.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CityUpdateOne) sqlSave(ctx context.Context) (_node *City, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: city.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing City.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, city.FieldID)
		for _, f := range fields {
			if !city.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != city.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldUUID,
		})
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: city.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldUpdatedAt,
		})
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: city.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: city.FieldDeletedAt,
		})
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: city.FieldDeletedAt,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldName,
		})
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: city.FieldStatus,
		})
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: city.FieldStatus,
		})
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldCode,
		})
	}
	if value, ok := cuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: city.FieldDesc,
		})
	}
	if value, ok := cuo.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldSortOrder,
		})
	}
	if value, ok := cuo.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: city.FieldSortOrder,
		})
	}
	if cuo.mutation.KcClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.KcClassTable,
			Columns: []string{city.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedKcClassIDs(); len(nodes) > 0 && !cuo.mutation.KcClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.KcClassTable,
			Columns: []string{city.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.KcClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.KcClassTable,
			Columns: []string{city.KcClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CourseTable,
			Columns: []string{city.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCourseIDs(); len(nodes) > 0 && !cuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CourseTable,
			Columns: []string{city.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.CourseTable,
			Columns: []string{city.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UserCityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.UserCityTable,
			Columns: []string{city.UserCityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUserCityIDs(); len(nodes) > 0 && !cuo.mutation.UserCityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.UserCityTable,
			Columns: []string{city.UserCityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserCityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.UserCityTable,
			Columns: []string{city.UserCityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.QuestionBankCitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QuestionBankCitiesTable,
			Columns: []string{city.QuestionBankCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedQuestionBankCitiesIDs(); len(nodes) > 0 && !cuo.mutation.QuestionBankCitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QuestionBankCitiesTable,
			Columns: []string{city.QuestionBankCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.QuestionBankCitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.QuestionBankCitiesTable,
			Columns: []string{city.QuestionBankCitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankcity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &City{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

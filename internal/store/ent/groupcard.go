// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/groupcard"

	"entgo.io/ent/dialect/sql"
)

// GroupCard is the model entity for the GroupCard schema.
type GroupCard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Title holds the value of the "title" field.
	// 名片标题
	Title string `json:"title"`
	// SubTitle holds the value of the "sub_title" field.
	// 名片副标题
	SubTitle string `json:"sub_title"`
	// Status holds the value of the "status" field.
	// 状态：1、锁定。2:生效
	Status uint8 `json:"status"`
	// Desc holds the value of the "desc" field.
	// 描述
	Desc string `json:"desc"`
	// SortOrder holds the value of the "sort_order" field.
	// 排序
	SortOrder int `json:"sort_order"`
	// AttachmentID holds the value of the "attachment_id" field.
	// 图片id
	AttachmentID int `json:"attachment_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupCardQuery when eager-loading is set.
	Edges GroupCardEdges `json:"edges"`
}

// GroupCardEdges holds the relations/edges for other nodes in the graph.
type GroupCardEdges struct {
	// Attachment holds the value of the attachment edge.
	Attachment *Attachment `json:"attachment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AttachmentOrErr returns the Attachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupCardEdges) AttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[0] {
		if e.Attachment == nil {
			// The edge attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.Attachment, nil
	}
	return nil, &NotLoadedError{edge: "attachment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupCard) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupcard.FieldID, groupcard.FieldStatus, groupcard.FieldSortOrder, groupcard.FieldAttachmentID:
			values[i] = new(sql.NullInt64)
		case groupcard.FieldUUID, groupcard.FieldTitle, groupcard.FieldSubTitle, groupcard.FieldDesc:
			values[i] = new(sql.NullString)
		case groupcard.FieldCreatedAt, groupcard.FieldUpdatedAt, groupcard.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GroupCard", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupCard fields.
func (gc *GroupCard) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupcard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gc.ID = int(value.Int64)
		case groupcard.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				gc.UUID = value.String
			}
		case groupcard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gc.CreatedAt = new(time.Time)
				*gc.CreatedAt = value.Time
			}
		case groupcard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gc.UpdatedAt = new(time.Time)
				*gc.UpdatedAt = value.Time
			}
		case groupcard.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gc.DeletedAt = new(time.Time)
				*gc.DeletedAt = value.Time
			}
		case groupcard.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				gc.Title = value.String
			}
		case groupcard.FieldSubTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_title", values[i])
			} else if value.Valid {
				gc.SubTitle = value.String
			}
		case groupcard.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				gc.Status = uint8(value.Int64)
			}
		case groupcard.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				gc.Desc = value.String
			}
		case groupcard.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				gc.SortOrder = int(value.Int64)
			}
		case groupcard.FieldAttachmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_id", values[i])
			} else if value.Valid {
				gc.AttachmentID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAttachment queries the "attachment" edge of the GroupCard entity.
func (gc *GroupCard) QueryAttachment() *AttachmentQuery {
	return (&GroupCardClient{config: gc.config}).QueryAttachment(gc)
}

// Update returns a builder for updating this GroupCard.
// Note that you need to call GroupCard.Unwrap() before calling this method if this GroupCard
// was returned from a transaction, and the transaction was committed or rolled back.
func (gc *GroupCard) Update() *GroupCardUpdateOne {
	return (&GroupCardClient{config: gc.config}).UpdateOne(gc)
}

// Unwrap unwraps the GroupCard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gc *GroupCard) Unwrap() *GroupCard {
	tx, ok := gc.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupCard is not a transactional entity")
	}
	gc.config.driver = tx.drv
	return gc
}

// String implements the fmt.Stringer.
func (gc *GroupCard) String() string {
	var builder strings.Builder
	builder.WriteString("GroupCard(")
	builder.WriteString(fmt.Sprintf("id=%v", gc.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(gc.UUID)
	if v := gc.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := gc.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := gc.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", title=")
	builder.WriteString(gc.Title)
	builder.WriteString(", sub_title=")
	builder.WriteString(gc.SubTitle)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", gc.Status))
	builder.WriteString(", desc=")
	builder.WriteString(gc.Desc)
	builder.WriteString(", sort_order=")
	builder.WriteString(fmt.Sprintf("%v", gc.SortOrder))
	builder.WriteString(", attachment_id=")
	builder.WriteString(fmt.Sprintf("%v", gc.AttachmentID))
	builder.WriteByte(')')
	return builder.String()
}

// GroupCards is a parsable slice of GroupCard.
type GroupCards []*GroupCard

func (gc GroupCards) config(cfg config) {
	for _i := range gc {
		gc[_i].config = cfg
	}
}

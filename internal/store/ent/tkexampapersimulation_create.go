// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/tkexampapersimulation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperSimulationCreate is the builder for creating a TkExamPaperSimulation entity.
type TkExamPaperSimulationCreate struct {
	config
	mutation *TkExamPaperSimulationMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tepsc *TkExamPaperSimulationCreate) SetUUID(s string) *TkExamPaperSimulationCreate {
	tepsc.mutation.SetUUID(s)
	return tepsc
}

// SetCreatedAt sets the "created_at" field.
func (tepsc *TkExamPaperSimulationCreate) SetCreatedAt(t time.Time) *TkExamPaperSimulationCreate {
	tepsc.mutation.SetCreatedAt(t)
	return tepsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tepsc *TkExamPaperSimulationCreate) SetNillableCreatedAt(t *time.Time) *TkExamPaperSimulationCreate {
	if t != nil {
		tepsc.SetCreatedAt(*t)
	}
	return tepsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tepsc *TkExamPaperSimulationCreate) SetUpdatedAt(t time.Time) *TkExamPaperSimulationCreate {
	tepsc.mutation.SetUpdatedAt(t)
	return tepsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tepsc *TkExamPaperSimulationCreate) SetNillableUpdatedAt(t *time.Time) *TkExamPaperSimulationCreate {
	if t != nil {
		tepsc.SetUpdatedAt(*t)
	}
	return tepsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tepsc *TkExamPaperSimulationCreate) SetDeletedAt(t time.Time) *TkExamPaperSimulationCreate {
	tepsc.mutation.SetDeletedAt(t)
	return tepsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tepsc *TkExamPaperSimulationCreate) SetNillableDeletedAt(t *time.Time) *TkExamPaperSimulationCreate {
	if t != nil {
		tepsc.SetDeletedAt(*t)
	}
	return tepsc
}

// SetStartAt sets the "start_at" field.
func (tepsc *TkExamPaperSimulationCreate) SetStartAt(t time.Time) *TkExamPaperSimulationCreate {
	tepsc.mutation.SetStartAt(t)
	return tepsc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tepsc *TkExamPaperSimulationCreate) SetNillableStartAt(t *time.Time) *TkExamPaperSimulationCreate {
	if t != nil {
		tepsc.SetStartAt(*t)
	}
	return tepsc
}

// SetEndAt sets the "end_at" field.
func (tepsc *TkExamPaperSimulationCreate) SetEndAt(t time.Time) *TkExamPaperSimulationCreate {
	tepsc.mutation.SetEndAt(t)
	return tepsc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tepsc *TkExamPaperSimulationCreate) SetNillableEndAt(t *time.Time) *TkExamPaperSimulationCreate {
	if t != nil {
		tepsc.SetEndAt(*t)
	}
	return tepsc
}

// SetEnableStatus sets the "enable_status" field.
func (tepsc *TkExamPaperSimulationCreate) SetEnableStatus(u uint8) *TkExamPaperSimulationCreate {
	tepsc.mutation.SetEnableStatus(u)
	return tepsc
}

// SetNillableEnableStatus sets the "enable_status" field if the given value is not nil.
func (tepsc *TkExamPaperSimulationCreate) SetNillableEnableStatus(u *uint8) *TkExamPaperSimulationCreate {
	if u != nil {
		tepsc.SetEnableStatus(*u)
	}
	return tepsc
}

// SetExamPaperID sets the "exam_paper_id" field.
func (tepsc *TkExamPaperSimulationCreate) SetExamPaperID(i int) *TkExamPaperSimulationCreate {
	tepsc.mutation.SetExamPaperID(i)
	return tepsc
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (tepsc *TkExamPaperSimulationCreate) SetNillableExamPaperID(i *int) *TkExamPaperSimulationCreate {
	if i != nil {
		tepsc.SetExamPaperID(*i)
	}
	return tepsc
}

// Mutation returns the TkExamPaperSimulationMutation object of the builder.
func (tepsc *TkExamPaperSimulationCreate) Mutation() *TkExamPaperSimulationMutation {
	return tepsc.mutation
}

// Save creates the TkExamPaperSimulation in the database.
func (tepsc *TkExamPaperSimulationCreate) Save(ctx context.Context) (*TkExamPaperSimulation, error) {
	var (
		err  error
		node *TkExamPaperSimulation
	)
	tepsc.defaults()
	if len(tepsc.hooks) == 0 {
		if err = tepsc.check(); err != nil {
			return nil, err
		}
		node, err = tepsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperSimulationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tepsc.check(); err != nil {
				return nil, err
			}
			tepsc.mutation = mutation
			node, err = tepsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tepsc.hooks) - 1; i >= 0; i-- {
			mut = tepsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tepsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tepsc *TkExamPaperSimulationCreate) SaveX(ctx context.Context) *TkExamPaperSimulation {
	v, err := tepsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tepsc *TkExamPaperSimulationCreate) defaults() {
	if _, ok := tepsc.mutation.CreatedAt(); !ok {
		v := tkexampapersimulation.DefaultCreatedAt()
		tepsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tepsc.mutation.UpdatedAt(); !ok {
		v := tkexampapersimulation.DefaultUpdatedAt()
		tepsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tepsc.mutation.EnableStatus(); !ok {
		v := tkexampapersimulation.DefaultEnableStatus
		tepsc.mutation.SetEnableStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tepsc *TkExamPaperSimulationCreate) check() error {
	if _, ok := tepsc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tepsc.mutation.EnableStatus(); !ok {
		return &ValidationError{Name: "enable_status", err: errors.New("ent: missing required field \"enable_status\"")}
	}
	return nil
}

func (tepsc *TkExamPaperSimulationCreate) sqlSave(ctx context.Context) (*TkExamPaperSimulation, error) {
	_node, _spec := tepsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tepsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tepsc *TkExamPaperSimulationCreate) createSpec() (*TkExamPaperSimulation, *sqlgraph.CreateSpec) {
	var (
		_node = &TkExamPaperSimulation{config: tepsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkexampapersimulation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampapersimulation.FieldID,
			},
		}
	)
	if value, ok := tepsc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampapersimulation.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tepsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tepsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tepsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tepsc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := tepsc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := tepsc.mutation.EnableStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampapersimulation.FieldEnableStatus,
		})
		_node.EnableStatus = value
	}
	if value, ok := tepsc.mutation.ExamPaperID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampapersimulation.FieldExamPaperID,
		})
		_node.ExamPaperID = value
	}
	return _node, _spec
}

// TkExamPaperSimulationCreateBulk is the builder for creating many TkExamPaperSimulation entities in bulk.
type TkExamPaperSimulationCreateBulk struct {
	config
	builders []*TkExamPaperSimulationCreate
}

// Save creates the TkExamPaperSimulation entities in the database.
func (tepscb *TkExamPaperSimulationCreateBulk) Save(ctx context.Context) ([]*TkExamPaperSimulation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tepscb.builders))
	nodes := make([]*TkExamPaperSimulation, len(tepscb.builders))
	mutators := make([]Mutator, len(tepscb.builders))
	for i := range tepscb.builders {
		func(i int, root context.Context) {
			builder := tepscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkExamPaperSimulationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tepscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tepscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tepscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tepscb *TkExamPaperSimulationCreateBulk) SaveX(ctx context.Context) []*TkExamPaperSimulation {
	v, err := tepscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkexampaperpartition"
	"gserver/internal/store/ent/tkexampartitionquestionlink"
	"gserver/internal/store/ent/tkquestion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPartitionQuestionLinkUpdate is the builder for updating TkExamPartitionQuestionLink entities.
type TkExamPartitionQuestionLinkUpdate struct {
	config
	hooks    []Hook
	mutation *TkExamPartitionQuestionLinkMutation
}

// Where adds a new predicate for the TkExamPartitionQuestionLinkUpdate builder.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) Where(ps ...predicate.TkExamPartitionQuestionLink) *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.predicates = append(tepqlu.mutation.predicates, ps...)
	return tepqlu
}

// SetUUID sets the "uuid" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetUUID(s string) *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.SetUUID(s)
	return tepqlu
}

// SetUpdatedAt sets the "updated_at" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetUpdatedAt(t time.Time) *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.SetUpdatedAt(t)
	return tepqlu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) ClearUpdatedAt() *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.ClearUpdatedAt()
	return tepqlu
}

// SetDeletedAt sets the "deleted_at" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetDeletedAt(t time.Time) *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.SetDeletedAt(t)
	return tepqlu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetNillableDeletedAt(t *time.Time) *TkExamPartitionQuestionLinkUpdate {
	if t != nil {
		tepqlu.SetDeletedAt(*t)
	}
	return tepqlu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) ClearDeletedAt() *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.ClearDeletedAt()
	return tepqlu
}

// SetQuestionScore sets the "question_score" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetQuestionScore(u uint8) *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.ResetQuestionScore()
	tepqlu.mutation.SetQuestionScore(u)
	return tepqlu
}

// SetNillableQuestionScore sets the "question_score" field if the given value is not nil.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetNillableQuestionScore(u *uint8) *TkExamPartitionQuestionLinkUpdate {
	if u != nil {
		tepqlu.SetQuestionScore(*u)
	}
	return tepqlu
}

// AddQuestionScore adds u to the "question_score" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) AddQuestionScore(u uint8) *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.AddQuestionScore(u)
	return tepqlu
}

// SetExamPaperPartitionID sets the "exam_paper_partition_id" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetExamPaperPartitionID(i int) *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.ResetExamPaperPartitionID()
	tepqlu.mutation.SetExamPaperPartitionID(i)
	return tepqlu
}

// SetNillableExamPaperPartitionID sets the "exam_paper_partition_id" field if the given value is not nil.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetNillableExamPaperPartitionID(i *int) *TkExamPartitionQuestionLinkUpdate {
	if i != nil {
		tepqlu.SetExamPaperPartitionID(*i)
	}
	return tepqlu
}

// ClearExamPaperPartitionID clears the value of the "exam_paper_partition_id" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) ClearExamPaperPartitionID() *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.ClearExamPaperPartitionID()
	return tepqlu
}

// SetQuestionID sets the "question_id" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetQuestionID(i int) *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.ResetQuestionID()
	tepqlu.mutation.SetQuestionID(i)
	return tepqlu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetNillableQuestionID(i *int) *TkExamPartitionQuestionLinkUpdate {
	if i != nil {
		tepqlu.SetQuestionID(*i)
	}
	return tepqlu
}

// ClearQuestionID clears the value of the "question_id" field.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) ClearQuestionID() *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.ClearQuestionID()
	return tepqlu
}

// SetExamPaperPartition sets the "exam_paper_partition" edge to the TkExamPaperPartition entity.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetExamPaperPartition(t *TkExamPaperPartition) *TkExamPartitionQuestionLinkUpdate {
	return tepqlu.SetExamPaperPartitionID(t.ID)
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SetQuestion(t *TkQuestion) *TkExamPartitionQuestionLinkUpdate {
	return tepqlu.SetQuestionID(t.ID)
}

// Mutation returns the TkExamPartitionQuestionLinkMutation object of the builder.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) Mutation() *TkExamPartitionQuestionLinkMutation {
	return tepqlu.mutation
}

// ClearExamPaperPartition clears the "exam_paper_partition" edge to the TkExamPaperPartition entity.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) ClearExamPaperPartition() *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.ClearExamPaperPartition()
	return tepqlu
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) ClearQuestion() *TkExamPartitionQuestionLinkUpdate {
	tepqlu.mutation.ClearQuestion()
	return tepqlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tepqlu.defaults()
	if len(tepqlu.hooks) == 0 {
		affected, err = tepqlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPartitionQuestionLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tepqlu.mutation = mutation
			affected, err = tepqlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tepqlu.hooks) - 1; i >= 0; i-- {
			mut = tepqlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tepqlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := tepqlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) Exec(ctx context.Context) error {
	_, err := tepqlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) ExecX(ctx context.Context) {
	if err := tepqlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tepqlu *TkExamPartitionQuestionLinkUpdate) defaults() {
	if _, ok := tepqlu.mutation.UpdatedAt(); !ok && !tepqlu.mutation.UpdatedAtCleared() {
		v := tkexampartitionquestionlink.UpdateDefaultUpdatedAt()
		tepqlu.mutation.SetUpdatedAt(v)
	}
}

func (tepqlu *TkExamPartitionQuestionLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampartitionquestionlink.Table,
			Columns: tkexampartitionquestionlink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampartitionquestionlink.FieldID,
			},
		},
	}
	if ps := tepqlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tepqlu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldUUID,
		})
	}
	if tepqlu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampartitionquestionlink.FieldCreatedAt,
		})
	}
	if value, ok := tepqlu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldUpdatedAt,
		})
	}
	if tepqlu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampartitionquestionlink.FieldUpdatedAt,
		})
	}
	if value, ok := tepqlu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldDeletedAt,
		})
	}
	if tepqlu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampartitionquestionlink.FieldDeletedAt,
		})
	}
	if value, ok := tepqlu.mutation.QuestionScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldQuestionScore,
		})
	}
	if value, ok := tepqlu.mutation.AddedQuestionScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldQuestionScore,
		})
	}
	if tepqlu.mutation.ExamPaperPartitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampartitionquestionlink.ExamPaperPartitionTable,
			Columns: []string{tkexampartitionquestionlink.ExamPaperPartitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepqlu.mutation.ExamPaperPartitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampartitionquestionlink.ExamPaperPartitionTable,
			Columns: []string{tkexampartitionquestionlink.ExamPaperPartitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepqlu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampartitionquestionlink.QuestionTable,
			Columns: []string{tkexampartitionquestionlink.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepqlu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampartitionquestionlink.QuestionTable,
			Columns: []string{tkexampartitionquestionlink.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tepqlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampartitionquestionlink.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkExamPartitionQuestionLinkUpdateOne is the builder for updating a single TkExamPartitionQuestionLink entity.
type TkExamPartitionQuestionLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkExamPartitionQuestionLinkMutation
}

// SetUUID sets the "uuid" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetUUID(s string) *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.SetUUID(s)
	return tepqluo
}

// SetUpdatedAt sets the "updated_at" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetUpdatedAt(t time.Time) *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.SetUpdatedAt(t)
	return tepqluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) ClearUpdatedAt() *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.ClearUpdatedAt()
	return tepqluo
}

// SetDeletedAt sets the "deleted_at" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetDeletedAt(t time.Time) *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.SetDeletedAt(t)
	return tepqluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetNillableDeletedAt(t *time.Time) *TkExamPartitionQuestionLinkUpdateOne {
	if t != nil {
		tepqluo.SetDeletedAt(*t)
	}
	return tepqluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) ClearDeletedAt() *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.ClearDeletedAt()
	return tepqluo
}

// SetQuestionScore sets the "question_score" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetQuestionScore(u uint8) *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.ResetQuestionScore()
	tepqluo.mutation.SetQuestionScore(u)
	return tepqluo
}

// SetNillableQuestionScore sets the "question_score" field if the given value is not nil.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetNillableQuestionScore(u *uint8) *TkExamPartitionQuestionLinkUpdateOne {
	if u != nil {
		tepqluo.SetQuestionScore(*u)
	}
	return tepqluo
}

// AddQuestionScore adds u to the "question_score" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) AddQuestionScore(u uint8) *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.AddQuestionScore(u)
	return tepqluo
}

// SetExamPaperPartitionID sets the "exam_paper_partition_id" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetExamPaperPartitionID(i int) *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.ResetExamPaperPartitionID()
	tepqluo.mutation.SetExamPaperPartitionID(i)
	return tepqluo
}

// SetNillableExamPaperPartitionID sets the "exam_paper_partition_id" field if the given value is not nil.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetNillableExamPaperPartitionID(i *int) *TkExamPartitionQuestionLinkUpdateOne {
	if i != nil {
		tepqluo.SetExamPaperPartitionID(*i)
	}
	return tepqluo
}

// ClearExamPaperPartitionID clears the value of the "exam_paper_partition_id" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) ClearExamPaperPartitionID() *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.ClearExamPaperPartitionID()
	return tepqluo
}

// SetQuestionID sets the "question_id" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetQuestionID(i int) *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.ResetQuestionID()
	tepqluo.mutation.SetQuestionID(i)
	return tepqluo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetNillableQuestionID(i *int) *TkExamPartitionQuestionLinkUpdateOne {
	if i != nil {
		tepqluo.SetQuestionID(*i)
	}
	return tepqluo
}

// ClearQuestionID clears the value of the "question_id" field.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) ClearQuestionID() *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.ClearQuestionID()
	return tepqluo
}

// SetExamPaperPartition sets the "exam_paper_partition" edge to the TkExamPaperPartition entity.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetExamPaperPartition(t *TkExamPaperPartition) *TkExamPartitionQuestionLinkUpdateOne {
	return tepqluo.SetExamPaperPartitionID(t.ID)
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SetQuestion(t *TkQuestion) *TkExamPartitionQuestionLinkUpdateOne {
	return tepqluo.SetQuestionID(t.ID)
}

// Mutation returns the TkExamPartitionQuestionLinkMutation object of the builder.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) Mutation() *TkExamPartitionQuestionLinkMutation {
	return tepqluo.mutation
}

// ClearExamPaperPartition clears the "exam_paper_partition" edge to the TkExamPaperPartition entity.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) ClearExamPaperPartition() *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.ClearExamPaperPartition()
	return tepqluo
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) ClearQuestion() *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.mutation.ClearQuestion()
	return tepqluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) Select(field string, fields ...string) *TkExamPartitionQuestionLinkUpdateOne {
	tepqluo.fields = append([]string{field}, fields...)
	return tepqluo
}

// Save executes the query and returns the updated TkExamPartitionQuestionLink entity.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) Save(ctx context.Context) (*TkExamPartitionQuestionLink, error) {
	var (
		err  error
		node *TkExamPartitionQuestionLink
	)
	tepqluo.defaults()
	if len(tepqluo.hooks) == 0 {
		node, err = tepqluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPartitionQuestionLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tepqluo.mutation = mutation
			node, err = tepqluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tepqluo.hooks) - 1; i >= 0; i-- {
			mut = tepqluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tepqluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) SaveX(ctx context.Context) *TkExamPartitionQuestionLink {
	node, err := tepqluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := tepqluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) ExecX(ctx context.Context) {
	if err := tepqluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) defaults() {
	if _, ok := tepqluo.mutation.UpdatedAt(); !ok && !tepqluo.mutation.UpdatedAtCleared() {
		v := tkexampartitionquestionlink.UpdateDefaultUpdatedAt()
		tepqluo.mutation.SetUpdatedAt(v)
	}
}

func (tepqluo *TkExamPartitionQuestionLinkUpdateOne) sqlSave(ctx context.Context) (_node *TkExamPartitionQuestionLink, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampartitionquestionlink.Table,
			Columns: tkexampartitionquestionlink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampartitionquestionlink.FieldID,
			},
		},
	}
	id, ok := tepqluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkExamPartitionQuestionLink.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tepqluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkexampartitionquestionlink.FieldID)
		for _, f := range fields {
			if !tkexampartitionquestionlink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkexampartitionquestionlink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tepqluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tepqluo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldUUID,
		})
	}
	if tepqluo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampartitionquestionlink.FieldCreatedAt,
		})
	}
	if value, ok := tepqluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldUpdatedAt,
		})
	}
	if tepqluo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampartitionquestionlink.FieldUpdatedAt,
		})
	}
	if value, ok := tepqluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldDeletedAt,
		})
	}
	if tepqluo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampartitionquestionlink.FieldDeletedAt,
		})
	}
	if value, ok := tepqluo.mutation.QuestionScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldQuestionScore,
		})
	}
	if value, ok := tepqluo.mutation.AddedQuestionScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampartitionquestionlink.FieldQuestionScore,
		})
	}
	if tepqluo.mutation.ExamPaperPartitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampartitionquestionlink.ExamPaperPartitionTable,
			Columns: []string{tkexampartitionquestionlink.ExamPaperPartitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepqluo.mutation.ExamPaperPartitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampartitionquestionlink.ExamPaperPartitionTable,
			Columns: []string{tkexampartitionquestionlink.ExamPaperPartitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tepqluo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampartitionquestionlink.QuestionTable,
			Columns: []string{tkexampartitionquestionlink.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tepqluo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampartitionquestionlink.QuestionTable,
			Columns: []string{tkexampartitionquestionlink.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkExamPartitionQuestionLink{config: tepqluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tepqluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampartitionquestionlink.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

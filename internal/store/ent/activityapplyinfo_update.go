// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/activity"
	"tkserver/internal/store/ent/activityapplyinfo"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityApplyInfoUpdate is the builder for updating ActivityApplyInfo entities.
type ActivityApplyInfoUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityApplyInfoMutation
}

// Where adds a new predicate for the ActivityApplyInfoUpdate builder.
func (aaiu *ActivityApplyInfoUpdate) Where(ps ...predicate.ActivityApplyInfo) *ActivityApplyInfoUpdate {
	aaiu.mutation.predicates = append(aaiu.mutation.predicates, ps...)
	return aaiu
}

// SetUUID sets the "uuid" field.
func (aaiu *ActivityApplyInfoUpdate) SetUUID(s string) *ActivityApplyInfoUpdate {
	aaiu.mutation.SetUUID(s)
	return aaiu
}

// SetUpdatedAt sets the "updated_at" field.
func (aaiu *ActivityApplyInfoUpdate) SetUpdatedAt(t time.Time) *ActivityApplyInfoUpdate {
	aaiu.mutation.SetUpdatedAt(t)
	return aaiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aaiu *ActivityApplyInfoUpdate) ClearUpdatedAt() *ActivityApplyInfoUpdate {
	aaiu.mutation.ClearUpdatedAt()
	return aaiu
}

// SetDeletedAt sets the "deleted_at" field.
func (aaiu *ActivityApplyInfoUpdate) SetDeletedAt(t time.Time) *ActivityApplyInfoUpdate {
	aaiu.mutation.SetDeletedAt(t)
	return aaiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aaiu *ActivityApplyInfoUpdate) SetNillableDeletedAt(t *time.Time) *ActivityApplyInfoUpdate {
	if t != nil {
		aaiu.SetDeletedAt(*t)
	}
	return aaiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aaiu *ActivityApplyInfoUpdate) ClearDeletedAt() *ActivityApplyInfoUpdate {
	aaiu.mutation.ClearDeletedAt()
	return aaiu
}

// SetName sets the "name" field.
func (aaiu *ActivityApplyInfoUpdate) SetName(s string) *ActivityApplyInfoUpdate {
	aaiu.mutation.SetName(s)
	return aaiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aaiu *ActivityApplyInfoUpdate) SetNillableName(s *string) *ActivityApplyInfoUpdate {
	if s != nil {
		aaiu.SetName(*s)
	}
	return aaiu
}

// SetPhone sets the "phone" field.
func (aaiu *ActivityApplyInfoUpdate) SetPhone(s string) *ActivityApplyInfoUpdate {
	aaiu.mutation.SetPhone(s)
	return aaiu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (aaiu *ActivityApplyInfoUpdate) SetNillablePhone(s *string) *ActivityApplyInfoUpdate {
	if s != nil {
		aaiu.SetPhone(*s)
	}
	return aaiu
}

// SetRemark sets the "remark" field.
func (aaiu *ActivityApplyInfoUpdate) SetRemark(s string) *ActivityApplyInfoUpdate {
	aaiu.mutation.SetRemark(s)
	return aaiu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aaiu *ActivityApplyInfoUpdate) SetNillableRemark(s *string) *ActivityApplyInfoUpdate {
	if s != nil {
		aaiu.SetRemark(*s)
	}
	return aaiu
}

// SetIsOurStudent sets the "is_our_student" field.
func (aaiu *ActivityApplyInfoUpdate) SetIsOurStudent(u uint8) *ActivityApplyInfoUpdate {
	aaiu.mutation.ResetIsOurStudent()
	aaiu.mutation.SetIsOurStudent(u)
	return aaiu
}

// SetNillableIsOurStudent sets the "is_our_student" field if the given value is not nil.
func (aaiu *ActivityApplyInfoUpdate) SetNillableIsOurStudent(u *uint8) *ActivityApplyInfoUpdate {
	if u != nil {
		aaiu.SetIsOurStudent(*u)
	}
	return aaiu
}

// AddIsOurStudent adds u to the "is_our_student" field.
func (aaiu *ActivityApplyInfoUpdate) AddIsOurStudent(u uint8) *ActivityApplyInfoUpdate {
	aaiu.mutation.AddIsOurStudent(u)
	return aaiu
}

// SetActivityID sets the "activity_id" field.
func (aaiu *ActivityApplyInfoUpdate) SetActivityID(i int) *ActivityApplyInfoUpdate {
	aaiu.mutation.ResetActivityID()
	aaiu.mutation.SetActivityID(i)
	return aaiu
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (aaiu *ActivityApplyInfoUpdate) SetNillableActivityID(i *int) *ActivityApplyInfoUpdate {
	if i != nil {
		aaiu.SetActivityID(*i)
	}
	return aaiu
}

// ClearActivityID clears the value of the "activity_id" field.
func (aaiu *ActivityApplyInfoUpdate) ClearActivityID() *ActivityApplyInfoUpdate {
	aaiu.mutation.ClearActivityID()
	return aaiu
}

// SetActivity sets the "activity" edge to the Activity entity.
func (aaiu *ActivityApplyInfoUpdate) SetActivity(a *Activity) *ActivityApplyInfoUpdate {
	return aaiu.SetActivityID(a.ID)
}

// Mutation returns the ActivityApplyInfoMutation object of the builder.
func (aaiu *ActivityApplyInfoUpdate) Mutation() *ActivityApplyInfoMutation {
	return aaiu.mutation
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (aaiu *ActivityApplyInfoUpdate) ClearActivity() *ActivityApplyInfoUpdate {
	aaiu.mutation.ClearActivity()
	return aaiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aaiu *ActivityApplyInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aaiu.defaults()
	if len(aaiu.hooks) == 0 {
		affected, err = aaiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityApplyInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aaiu.mutation = mutation
			affected, err = aaiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aaiu.hooks) - 1; i >= 0; i-- {
			mut = aaiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aaiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aaiu *ActivityApplyInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := aaiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aaiu *ActivityApplyInfoUpdate) Exec(ctx context.Context) error {
	_, err := aaiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaiu *ActivityApplyInfoUpdate) ExecX(ctx context.Context) {
	if err := aaiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aaiu *ActivityApplyInfoUpdate) defaults() {
	if _, ok := aaiu.mutation.UpdatedAt(); !ok && !aaiu.mutation.UpdatedAtCleared() {
		v := activityapplyinfo.UpdateDefaultUpdatedAt()
		aaiu.mutation.SetUpdatedAt(v)
	}
}

func (aaiu *ActivityApplyInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activityapplyinfo.Table,
			Columns: activityapplyinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activityapplyinfo.FieldID,
			},
		},
	}
	if ps := aaiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aaiu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldUUID,
		})
	}
	if aaiu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activityapplyinfo.FieldCreatedAt,
		})
	}
	if value, ok := aaiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activityapplyinfo.FieldUpdatedAt,
		})
	}
	if aaiu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activityapplyinfo.FieldUpdatedAt,
		})
	}
	if value, ok := aaiu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activityapplyinfo.FieldDeletedAt,
		})
	}
	if aaiu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activityapplyinfo.FieldDeletedAt,
		})
	}
	if value, ok := aaiu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldName,
		})
	}
	if value, ok := aaiu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldPhone,
		})
	}
	if value, ok := aaiu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldRemark,
		})
	}
	if value, ok := aaiu.mutation.IsOurStudent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activityapplyinfo.FieldIsOurStudent,
		})
	}
	if value, ok := aaiu.mutation.AddedIsOurStudent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activityapplyinfo.FieldIsOurStudent,
		})
	}
	if aaiu.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activityapplyinfo.ActivityTable,
			Columns: []string{activityapplyinfo.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaiu.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activityapplyinfo.ActivityTable,
			Columns: []string{activityapplyinfo.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aaiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityapplyinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActivityApplyInfoUpdateOne is the builder for updating a single ActivityApplyInfo entity.
type ActivityApplyInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityApplyInfoMutation
}

// SetUUID sets the "uuid" field.
func (aaiuo *ActivityApplyInfoUpdateOne) SetUUID(s string) *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.SetUUID(s)
	return aaiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (aaiuo *ActivityApplyInfoUpdateOne) SetUpdatedAt(t time.Time) *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.SetUpdatedAt(t)
	return aaiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aaiuo *ActivityApplyInfoUpdateOne) ClearUpdatedAt() *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.ClearUpdatedAt()
	return aaiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aaiuo *ActivityApplyInfoUpdateOne) SetDeletedAt(t time.Time) *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.SetDeletedAt(t)
	return aaiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aaiuo *ActivityApplyInfoUpdateOne) SetNillableDeletedAt(t *time.Time) *ActivityApplyInfoUpdateOne {
	if t != nil {
		aaiuo.SetDeletedAt(*t)
	}
	return aaiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aaiuo *ActivityApplyInfoUpdateOne) ClearDeletedAt() *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.ClearDeletedAt()
	return aaiuo
}

// SetName sets the "name" field.
func (aaiuo *ActivityApplyInfoUpdateOne) SetName(s string) *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.SetName(s)
	return aaiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aaiuo *ActivityApplyInfoUpdateOne) SetNillableName(s *string) *ActivityApplyInfoUpdateOne {
	if s != nil {
		aaiuo.SetName(*s)
	}
	return aaiuo
}

// SetPhone sets the "phone" field.
func (aaiuo *ActivityApplyInfoUpdateOne) SetPhone(s string) *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.SetPhone(s)
	return aaiuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (aaiuo *ActivityApplyInfoUpdateOne) SetNillablePhone(s *string) *ActivityApplyInfoUpdateOne {
	if s != nil {
		aaiuo.SetPhone(*s)
	}
	return aaiuo
}

// SetRemark sets the "remark" field.
func (aaiuo *ActivityApplyInfoUpdateOne) SetRemark(s string) *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.SetRemark(s)
	return aaiuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aaiuo *ActivityApplyInfoUpdateOne) SetNillableRemark(s *string) *ActivityApplyInfoUpdateOne {
	if s != nil {
		aaiuo.SetRemark(*s)
	}
	return aaiuo
}

// SetIsOurStudent sets the "is_our_student" field.
func (aaiuo *ActivityApplyInfoUpdateOne) SetIsOurStudent(u uint8) *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.ResetIsOurStudent()
	aaiuo.mutation.SetIsOurStudent(u)
	return aaiuo
}

// SetNillableIsOurStudent sets the "is_our_student" field if the given value is not nil.
func (aaiuo *ActivityApplyInfoUpdateOne) SetNillableIsOurStudent(u *uint8) *ActivityApplyInfoUpdateOne {
	if u != nil {
		aaiuo.SetIsOurStudent(*u)
	}
	return aaiuo
}

// AddIsOurStudent adds u to the "is_our_student" field.
func (aaiuo *ActivityApplyInfoUpdateOne) AddIsOurStudent(u uint8) *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.AddIsOurStudent(u)
	return aaiuo
}

// SetActivityID sets the "activity_id" field.
func (aaiuo *ActivityApplyInfoUpdateOne) SetActivityID(i int) *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.ResetActivityID()
	aaiuo.mutation.SetActivityID(i)
	return aaiuo
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (aaiuo *ActivityApplyInfoUpdateOne) SetNillableActivityID(i *int) *ActivityApplyInfoUpdateOne {
	if i != nil {
		aaiuo.SetActivityID(*i)
	}
	return aaiuo
}

// ClearActivityID clears the value of the "activity_id" field.
func (aaiuo *ActivityApplyInfoUpdateOne) ClearActivityID() *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.ClearActivityID()
	return aaiuo
}

// SetActivity sets the "activity" edge to the Activity entity.
func (aaiuo *ActivityApplyInfoUpdateOne) SetActivity(a *Activity) *ActivityApplyInfoUpdateOne {
	return aaiuo.SetActivityID(a.ID)
}

// Mutation returns the ActivityApplyInfoMutation object of the builder.
func (aaiuo *ActivityApplyInfoUpdateOne) Mutation() *ActivityApplyInfoMutation {
	return aaiuo.mutation
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (aaiuo *ActivityApplyInfoUpdateOne) ClearActivity() *ActivityApplyInfoUpdateOne {
	aaiuo.mutation.ClearActivity()
	return aaiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aaiuo *ActivityApplyInfoUpdateOne) Select(field string, fields ...string) *ActivityApplyInfoUpdateOne {
	aaiuo.fields = append([]string{field}, fields...)
	return aaiuo
}

// Save executes the query and returns the updated ActivityApplyInfo entity.
func (aaiuo *ActivityApplyInfoUpdateOne) Save(ctx context.Context) (*ActivityApplyInfo, error) {
	var (
		err  error
		node *ActivityApplyInfo
	)
	aaiuo.defaults()
	if len(aaiuo.hooks) == 0 {
		node, err = aaiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityApplyInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aaiuo.mutation = mutation
			node, err = aaiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aaiuo.hooks) - 1; i >= 0; i-- {
			mut = aaiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aaiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aaiuo *ActivityApplyInfoUpdateOne) SaveX(ctx context.Context) *ActivityApplyInfo {
	node, err := aaiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aaiuo *ActivityApplyInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := aaiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaiuo *ActivityApplyInfoUpdateOne) ExecX(ctx context.Context) {
	if err := aaiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aaiuo *ActivityApplyInfoUpdateOne) defaults() {
	if _, ok := aaiuo.mutation.UpdatedAt(); !ok && !aaiuo.mutation.UpdatedAtCleared() {
		v := activityapplyinfo.UpdateDefaultUpdatedAt()
		aaiuo.mutation.SetUpdatedAt(v)
	}
}

func (aaiuo *ActivityApplyInfoUpdateOne) sqlSave(ctx context.Context) (_node *ActivityApplyInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activityapplyinfo.Table,
			Columns: activityapplyinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activityapplyinfo.FieldID,
			},
		},
	}
	id, ok := aaiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ActivityApplyInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aaiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activityapplyinfo.FieldID)
		for _, f := range fields {
			if !activityapplyinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activityapplyinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aaiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aaiuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldUUID,
		})
	}
	if aaiuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activityapplyinfo.FieldCreatedAt,
		})
	}
	if value, ok := aaiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activityapplyinfo.FieldUpdatedAt,
		})
	}
	if aaiuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activityapplyinfo.FieldUpdatedAt,
		})
	}
	if value, ok := aaiuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activityapplyinfo.FieldDeletedAt,
		})
	}
	if aaiuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activityapplyinfo.FieldDeletedAt,
		})
	}
	if value, ok := aaiuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldName,
		})
	}
	if value, ok := aaiuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldPhone,
		})
	}
	if value, ok := aaiuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldRemark,
		})
	}
	if value, ok := aaiuo.mutation.IsOurStudent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activityapplyinfo.FieldIsOurStudent,
		})
	}
	if value, ok := aaiuo.mutation.AddedIsOurStudent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activityapplyinfo.FieldIsOurStudent,
		})
	}
	if aaiuo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activityapplyinfo.ActivityTable,
			Columns: []string{activityapplyinfo.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaiuo.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activityapplyinfo.ActivityTable,
			Columns: []string{activityapplyinfo.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityApplyInfo{config: aaiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aaiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityapplyinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

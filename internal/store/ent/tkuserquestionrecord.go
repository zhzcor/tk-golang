// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tksection"
	"tkserver/internal/store/ent/tkuserquestionrecord"
	"tkserver/internal/store/ent/user"

	"entgo.io/ent/dialect/sql"
)

// TkUserQuestionRecord is the model entity for the TkUserQuestionRecord schema.
type TkUserQuestionRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// CorrectCount holds the value of the "correct_count" field.
	// 正确次数
	CorrectCount int `json:"correct_count"`
	// AnswerCount holds the value of the "answer_count" field.
	// 答题次数
	AnswerCount int `json:"answer_count"`
	// Answer holds the value of the "answer" field.
	// 答案 例：多选题 A,B
	Answer string `json:"answer"`
	// IsRight holds the value of the "is_right" field.
	// 是否正确 1：否，2：是
	IsRight uint8 `json:"is_right"`
	// ExamQuestionType holds the value of the "exam_question_type" field.
	// 试卷题目分类，1：模拟考试，2：考点练习，3：历年真题，4：通关必做300题，5：考前密押卷
	ExamQuestionType uint8 `json:"exam_question_type"`
	// QuestionType holds the value of the "question_type" field.
	// 题目类型，1：单选题，2：多选题，3：判断题，4：简答题，5：材料题
	QuestionType uint8 `json:"question_type"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int `json:"user_id"`
	// QuestionBankID holds the value of the "question_bank_id" field.
	// 题库id
	QuestionBankID int `json:"question_bank_id"`
	// QuestionID holds the value of the "question_id" field.
	// 题目id
	QuestionID int `json:"question_id"`
	// ExamPaperID holds the value of the "exam_paper_id" field.
	// 试卷id
	ExamPaperID int `json:"exam_paper_id"`
	// SectionID holds the value of the "section_id" field.
	// 节id
	SectionID int `json:"section_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkUserQuestionRecordQuery when eager-loading is set.
	Edges TkUserQuestionRecordEdges `json:"edges"`
}

// TkUserQuestionRecordEdges holds the relations/edges for other nodes in the graph.
type TkUserQuestionRecordEdges struct {
	// QuestionBank holds the value of the question_bank edge.
	QuestionBank *TkQuestionBank `json:"question_bank,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Question holds the value of the question edge.
	Question *TkQuestion `json:"question,omitempty"`
	// ExamPaper holds the value of the exam_paper edge.
	ExamPaper *TkExamPaper `json:"exam_paper,omitempty"`
	// Section holds the value of the section edge.
	Section *TkSection `json:"section,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// QuestionBankOrErr returns the QuestionBank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserQuestionRecordEdges) QuestionBankOrErr() (*TkQuestionBank, error) {
	if e.loadedTypes[0] {
		if e.QuestionBank == nil {
			// The edge question_bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestionbank.Label}
		}
		return e.QuestionBank, nil
	}
	return nil, &NotLoadedError{edge: "question_bank"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserQuestionRecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserQuestionRecordEdges) QuestionOrErr() (*TkQuestion, error) {
	if e.loadedTypes[2] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestion.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// ExamPaperOrErr returns the ExamPaper value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserQuestionRecordEdges) ExamPaperOrErr() (*TkExamPaper, error) {
	if e.loadedTypes[3] {
		if e.ExamPaper == nil {
			// The edge exam_paper was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkexampaper.Label}
		}
		return e.ExamPaper, nil
	}
	return nil, &NotLoadedError{edge: "exam_paper"}
}

// SectionOrErr returns the Section value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserQuestionRecordEdges) SectionOrErr() (*TkSection, error) {
	if e.loadedTypes[4] {
		if e.Section == nil {
			// The edge section was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tksection.Label}
		}
		return e.Section, nil
	}
	return nil, &NotLoadedError{edge: "section"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkUserQuestionRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkuserquestionrecord.FieldID, tkuserquestionrecord.FieldCorrectCount, tkuserquestionrecord.FieldAnswerCount, tkuserquestionrecord.FieldIsRight, tkuserquestionrecord.FieldExamQuestionType, tkuserquestionrecord.FieldQuestionType, tkuserquestionrecord.FieldUserID, tkuserquestionrecord.FieldQuestionBankID, tkuserquestionrecord.FieldQuestionID, tkuserquestionrecord.FieldExamPaperID, tkuserquestionrecord.FieldSectionID:
			values[i] = new(sql.NullInt64)
		case tkuserquestionrecord.FieldUUID, tkuserquestionrecord.FieldAnswer:
			values[i] = new(sql.NullString)
		case tkuserquestionrecord.FieldCreatedAt, tkuserquestionrecord.FieldUpdatedAt, tkuserquestionrecord.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkUserQuestionRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkUserQuestionRecord fields.
func (tuqr *TkUserQuestionRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkuserquestionrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tuqr.ID = int(value.Int64)
		case tkuserquestionrecord.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tuqr.UUID = value.String
			}
		case tkuserquestionrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tuqr.CreatedAt = new(time.Time)
				*tuqr.CreatedAt = value.Time
			}
		case tkuserquestionrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tuqr.UpdatedAt = new(time.Time)
				*tuqr.UpdatedAt = value.Time
			}
		case tkuserquestionrecord.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tuqr.DeletedAt = new(time.Time)
				*tuqr.DeletedAt = value.Time
			}
		case tkuserquestionrecord.FieldCorrectCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field correct_count", values[i])
			} else if value.Valid {
				tuqr.CorrectCount = int(value.Int64)
			}
		case tkuserquestionrecord.FieldAnswerCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field answer_count", values[i])
			} else if value.Valid {
				tuqr.AnswerCount = int(value.Int64)
			}
		case tkuserquestionrecord.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				tuqr.Answer = value.String
			}
		case tkuserquestionrecord.FieldIsRight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_right", values[i])
			} else if value.Valid {
				tuqr.IsRight = uint8(value.Int64)
			}
		case tkuserquestionrecord.FieldExamQuestionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_question_type", values[i])
			} else if value.Valid {
				tuqr.ExamQuestionType = uint8(value.Int64)
			}
		case tkuserquestionrecord.FieldQuestionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_type", values[i])
			} else if value.Valid {
				tuqr.QuestionType = uint8(value.Int64)
			}
		case tkuserquestionrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tuqr.UserID = int(value.Int64)
			}
		case tkuserquestionrecord.FieldQuestionBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_bank_id", values[i])
			} else if value.Valid {
				tuqr.QuestionBankID = int(value.Int64)
			}
		case tkuserquestionrecord.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				tuqr.QuestionID = int(value.Int64)
			}
		case tkuserquestionrecord.FieldExamPaperID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_paper_id", values[i])
			} else if value.Valid {
				tuqr.ExamPaperID = int(value.Int64)
			}
		case tkuserquestionrecord.FieldSectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field section_id", values[i])
			} else if value.Valid {
				tuqr.SectionID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestionBank queries the "question_bank" edge of the TkUserQuestionRecord entity.
func (tuqr *TkUserQuestionRecord) QueryQuestionBank() *TkQuestionBankQuery {
	return (&TkUserQuestionRecordClient{config: tuqr.config}).QueryQuestionBank(tuqr)
}

// QueryUser queries the "user" edge of the TkUserQuestionRecord entity.
func (tuqr *TkUserQuestionRecord) QueryUser() *UserQuery {
	return (&TkUserQuestionRecordClient{config: tuqr.config}).QueryUser(tuqr)
}

// QueryQuestion queries the "question" edge of the TkUserQuestionRecord entity.
func (tuqr *TkUserQuestionRecord) QueryQuestion() *TkQuestionQuery {
	return (&TkUserQuestionRecordClient{config: tuqr.config}).QueryQuestion(tuqr)
}

// QueryExamPaper queries the "exam_paper" edge of the TkUserQuestionRecord entity.
func (tuqr *TkUserQuestionRecord) QueryExamPaper() *TkExamPaperQuery {
	return (&TkUserQuestionRecordClient{config: tuqr.config}).QueryExamPaper(tuqr)
}

// QuerySection queries the "section" edge of the TkUserQuestionRecord entity.
func (tuqr *TkUserQuestionRecord) QuerySection() *TkSectionQuery {
	return (&TkUserQuestionRecordClient{config: tuqr.config}).QuerySection(tuqr)
}

// Update returns a builder for updating this TkUserQuestionRecord.
// Note that you need to call TkUserQuestionRecord.Unwrap() before calling this method if this TkUserQuestionRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (tuqr *TkUserQuestionRecord) Update() *TkUserQuestionRecordUpdateOne {
	return (&TkUserQuestionRecordClient{config: tuqr.config}).UpdateOne(tuqr)
}

// Unwrap unwraps the TkUserQuestionRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tuqr *TkUserQuestionRecord) Unwrap() *TkUserQuestionRecord {
	tx, ok := tuqr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkUserQuestionRecord is not a transactional entity")
	}
	tuqr.config.driver = tx.drv
	return tuqr
}

// String implements the fmt.Stringer.
func (tuqr *TkUserQuestionRecord) String() string {
	var builder strings.Builder
	builder.WriteString("TkUserQuestionRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", tuqr.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tuqr.UUID)
	if v := tuqr.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tuqr.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tuqr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", correct_count=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.CorrectCount))
	builder.WriteString(", answer_count=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.AnswerCount))
	builder.WriteString(", answer=")
	builder.WriteString(tuqr.Answer)
	builder.WriteString(", is_right=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.IsRight))
	builder.WriteString(", exam_question_type=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.ExamQuestionType))
	builder.WriteString(", question_type=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.QuestionType))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.UserID))
	builder.WriteString(", question_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.QuestionBankID))
	builder.WriteString(", question_id=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.QuestionID))
	builder.WriteString(", exam_paper_id=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.ExamPaperID))
	builder.WriteString(", section_id=")
	builder.WriteString(fmt.Sprintf("%v", tuqr.SectionID))
	builder.WriteByte(')')
	return builder.String()
}

// TkUserQuestionRecords is a parsable slice of TkUserQuestionRecord.
type TkUserQuestionRecords []*TkUserQuestionRecord

func (tuqr TkUserQuestionRecords) config(cfg config) {
	for _i := range tuqr {
		tuqr[_i].config = cfg
	}
}

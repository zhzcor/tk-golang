// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkquestion"
	"gserver/internal/store/ent/tkuserexamscorerecord"
	"gserver/internal/store/ent/tkusersimulationteachermark"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserSimulationTeacherMarkUpdate is the builder for updating TkUserSimulationTeacherMark entities.
type TkUserSimulationTeacherMarkUpdate struct {
	config
	hooks    []Hook
	mutation *TkUserSimulationTeacherMarkMutation
}

// Where adds a new predicate for the TkUserSimulationTeacherMarkUpdate builder.
func (tustmu *TkUserSimulationTeacherMarkUpdate) Where(ps ...predicate.TkUserSimulationTeacherMark) *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.predicates = append(tustmu.mutation.predicates, ps...)
	return tustmu
}

// SetUUID sets the "uuid" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetUUID(s string) *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.SetUUID(s)
	return tustmu
}

// SetUpdatedAt sets the "updated_at" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetUpdatedAt(t time.Time) *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.SetUpdatedAt(t)
	return tustmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) ClearUpdatedAt() *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ClearUpdatedAt()
	return tustmu
}

// SetDeletedAt sets the "deleted_at" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetDeletedAt(t time.Time) *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.SetDeletedAt(t)
	return tustmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetNillableDeletedAt(t *time.Time) *TkUserSimulationTeacherMarkUpdate {
	if t != nil {
		tustmu.SetDeletedAt(*t)
	}
	return tustmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) ClearDeletedAt() *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ClearDeletedAt()
	return tustmu
}

// SetScore sets the "score" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetScore(u uint8) *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ResetScore()
	tustmu.mutation.SetScore(u)
	return tustmu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetNillableScore(u *uint8) *TkUserSimulationTeacherMarkUpdate {
	if u != nil {
		tustmu.SetScore(*u)
	}
	return tustmu
}

// AddScore adds u to the "score" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) AddScore(u uint8) *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.AddScore(u)
	return tustmu
}

// SetDesc sets the "desc" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetDesc(s string) *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.SetDesc(s)
	return tustmu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetNillableDesc(s *string) *TkUserSimulationTeacherMarkUpdate {
	if s != nil {
		tustmu.SetDesc(*s)
	}
	return tustmu
}

// ClearDesc clears the value of the "desc" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) ClearDesc() *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ClearDesc()
	return tustmu
}

// SetQuestionID sets the "question_id" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetQuestionID(i int) *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ResetQuestionID()
	tustmu.mutation.SetQuestionID(i)
	return tustmu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetNillableQuestionID(i *int) *TkUserSimulationTeacherMarkUpdate {
	if i != nil {
		tustmu.SetQuestionID(*i)
	}
	return tustmu
}

// ClearQuestionID clears the value of the "question_id" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) ClearQuestionID() *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ClearQuestionID()
	return tustmu
}

// SetUserExamRecordID sets the "user_exam_record_id" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetUserExamRecordID(i int) *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ResetUserExamRecordID()
	tustmu.mutation.SetUserExamRecordID(i)
	return tustmu
}

// SetNillableUserExamRecordID sets the "user_exam_record_id" field if the given value is not nil.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetNillableUserExamRecordID(i *int) *TkUserSimulationTeacherMarkUpdate {
	if i != nil {
		tustmu.SetUserExamRecordID(*i)
	}
	return tustmu
}

// ClearUserExamRecordID clears the value of the "user_exam_record_id" field.
func (tustmu *TkUserSimulationTeacherMarkUpdate) ClearUserExamRecordID() *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ClearUserExamRecordID()
	return tustmu
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetQuestion(t *TkQuestion) *TkUserSimulationTeacherMarkUpdate {
	return tustmu.SetQuestionID(t.ID)
}

// SetUserExamRecord sets the "user_exam_record" edge to the TkUserExamScoreRecord entity.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SetUserExamRecord(t *TkUserExamScoreRecord) *TkUserSimulationTeacherMarkUpdate {
	return tustmu.SetUserExamRecordID(t.ID)
}

// Mutation returns the TkUserSimulationTeacherMarkMutation object of the builder.
func (tustmu *TkUserSimulationTeacherMarkUpdate) Mutation() *TkUserSimulationTeacherMarkMutation {
	return tustmu.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tustmu *TkUserSimulationTeacherMarkUpdate) ClearQuestion() *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ClearQuestion()
	return tustmu
}

// ClearUserExamRecord clears the "user_exam_record" edge to the TkUserExamScoreRecord entity.
func (tustmu *TkUserSimulationTeacherMarkUpdate) ClearUserExamRecord() *TkUserSimulationTeacherMarkUpdate {
	tustmu.mutation.ClearUserExamRecord()
	return tustmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tustmu *TkUserSimulationTeacherMarkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tustmu.defaults()
	if len(tustmu.hooks) == 0 {
		affected, err = tustmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserSimulationTeacherMarkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tustmu.mutation = mutation
			affected, err = tustmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tustmu.hooks) - 1; i >= 0; i-- {
			mut = tustmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tustmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tustmu *TkUserSimulationTeacherMarkUpdate) SaveX(ctx context.Context) int {
	affected, err := tustmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tustmu *TkUserSimulationTeacherMarkUpdate) Exec(ctx context.Context) error {
	_, err := tustmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tustmu *TkUserSimulationTeacherMarkUpdate) ExecX(ctx context.Context) {
	if err := tustmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tustmu *TkUserSimulationTeacherMarkUpdate) defaults() {
	if _, ok := tustmu.mutation.UpdatedAt(); !ok && !tustmu.mutation.UpdatedAtCleared() {
		v := tkusersimulationteachermark.UpdateDefaultUpdatedAt()
		tustmu.mutation.SetUpdatedAt(v)
	}
}

func (tustmu *TkUserSimulationTeacherMarkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkusersimulationteachermark.Table,
			Columns: tkusersimulationteachermark.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkusersimulationteachermark.FieldID,
			},
		},
	}
	if ps := tustmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tustmu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkusersimulationteachermark.FieldUUID,
		})
	}
	if tustmu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkusersimulationteachermark.FieldCreatedAt,
		})
	}
	if value, ok := tustmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkusersimulationteachermark.FieldUpdatedAt,
		})
	}
	if tustmu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkusersimulationteachermark.FieldUpdatedAt,
		})
	}
	if value, ok := tustmu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkusersimulationteachermark.FieldDeletedAt,
		})
	}
	if tustmu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkusersimulationteachermark.FieldDeletedAt,
		})
	}
	if value, ok := tustmu.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkusersimulationteachermark.FieldScore,
		})
	}
	if value, ok := tustmu.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkusersimulationteachermark.FieldScore,
		})
	}
	if value, ok := tustmu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkusersimulationteachermark.FieldDesc,
		})
	}
	if tustmu.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tkusersimulationteachermark.FieldDesc,
		})
	}
	if tustmu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.QuestionTable,
			Columns: []string{tkusersimulationteachermark.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tustmu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.QuestionTable,
			Columns: []string{tkusersimulationteachermark.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tustmu.mutation.UserExamRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.UserExamRecordTable,
			Columns: []string{tkusersimulationteachermark.UserExamRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tustmu.mutation.UserExamRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.UserExamRecordTable,
			Columns: []string{tkusersimulationteachermark.UserExamRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tustmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkusersimulationteachermark.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkUserSimulationTeacherMarkUpdateOne is the builder for updating a single TkUserSimulationTeacherMark entity.
type TkUserSimulationTeacherMarkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkUserSimulationTeacherMarkMutation
}

// SetUUID sets the "uuid" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetUUID(s string) *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.SetUUID(s)
	return tustmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetUpdatedAt(t time.Time) *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.SetUpdatedAt(t)
	return tustmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) ClearUpdatedAt() *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ClearUpdatedAt()
	return tustmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetDeletedAt(t time.Time) *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.SetDeletedAt(t)
	return tustmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetNillableDeletedAt(t *time.Time) *TkUserSimulationTeacherMarkUpdateOne {
	if t != nil {
		tustmuo.SetDeletedAt(*t)
	}
	return tustmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) ClearDeletedAt() *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ClearDeletedAt()
	return tustmuo
}

// SetScore sets the "score" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetScore(u uint8) *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ResetScore()
	tustmuo.mutation.SetScore(u)
	return tustmuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetNillableScore(u *uint8) *TkUserSimulationTeacherMarkUpdateOne {
	if u != nil {
		tustmuo.SetScore(*u)
	}
	return tustmuo
}

// AddScore adds u to the "score" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) AddScore(u uint8) *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.AddScore(u)
	return tustmuo
}

// SetDesc sets the "desc" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetDesc(s string) *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.SetDesc(s)
	return tustmuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetNillableDesc(s *string) *TkUserSimulationTeacherMarkUpdateOne {
	if s != nil {
		tustmuo.SetDesc(*s)
	}
	return tustmuo
}

// ClearDesc clears the value of the "desc" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) ClearDesc() *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ClearDesc()
	return tustmuo
}

// SetQuestionID sets the "question_id" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetQuestionID(i int) *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ResetQuestionID()
	tustmuo.mutation.SetQuestionID(i)
	return tustmuo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetNillableQuestionID(i *int) *TkUserSimulationTeacherMarkUpdateOne {
	if i != nil {
		tustmuo.SetQuestionID(*i)
	}
	return tustmuo
}

// ClearQuestionID clears the value of the "question_id" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) ClearQuestionID() *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ClearQuestionID()
	return tustmuo
}

// SetUserExamRecordID sets the "user_exam_record_id" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetUserExamRecordID(i int) *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ResetUserExamRecordID()
	tustmuo.mutation.SetUserExamRecordID(i)
	return tustmuo
}

// SetNillableUserExamRecordID sets the "user_exam_record_id" field if the given value is not nil.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetNillableUserExamRecordID(i *int) *TkUserSimulationTeacherMarkUpdateOne {
	if i != nil {
		tustmuo.SetUserExamRecordID(*i)
	}
	return tustmuo
}

// ClearUserExamRecordID clears the value of the "user_exam_record_id" field.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) ClearUserExamRecordID() *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ClearUserExamRecordID()
	return tustmuo
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetQuestion(t *TkQuestion) *TkUserSimulationTeacherMarkUpdateOne {
	return tustmuo.SetQuestionID(t.ID)
}

// SetUserExamRecord sets the "user_exam_record" edge to the TkUserExamScoreRecord entity.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SetUserExamRecord(t *TkUserExamScoreRecord) *TkUserSimulationTeacherMarkUpdateOne {
	return tustmuo.SetUserExamRecordID(t.ID)
}

// Mutation returns the TkUserSimulationTeacherMarkMutation object of the builder.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) Mutation() *TkUserSimulationTeacherMarkMutation {
	return tustmuo.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) ClearQuestion() *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ClearQuestion()
	return tustmuo
}

// ClearUserExamRecord clears the "user_exam_record" edge to the TkUserExamScoreRecord entity.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) ClearUserExamRecord() *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.mutation.ClearUserExamRecord()
	return tustmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) Select(field string, fields ...string) *TkUserSimulationTeacherMarkUpdateOne {
	tustmuo.fields = append([]string{field}, fields...)
	return tustmuo
}

// Save executes the query and returns the updated TkUserSimulationTeacherMark entity.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) Save(ctx context.Context) (*TkUserSimulationTeacherMark, error) {
	var (
		err  error
		node *TkUserSimulationTeacherMark
	)
	tustmuo.defaults()
	if len(tustmuo.hooks) == 0 {
		node, err = tustmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserSimulationTeacherMarkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tustmuo.mutation = mutation
			node, err = tustmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tustmuo.hooks) - 1; i >= 0; i-- {
			mut = tustmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tustmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) SaveX(ctx context.Context) *TkUserSimulationTeacherMark {
	node, err := tustmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) Exec(ctx context.Context) error {
	_, err := tustmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) ExecX(ctx context.Context) {
	if err := tustmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) defaults() {
	if _, ok := tustmuo.mutation.UpdatedAt(); !ok && !tustmuo.mutation.UpdatedAtCleared() {
		v := tkusersimulationteachermark.UpdateDefaultUpdatedAt()
		tustmuo.mutation.SetUpdatedAt(v)
	}
}

func (tustmuo *TkUserSimulationTeacherMarkUpdateOne) sqlSave(ctx context.Context) (_node *TkUserSimulationTeacherMark, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkusersimulationteachermark.Table,
			Columns: tkusersimulationteachermark.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkusersimulationteachermark.FieldID,
			},
		},
	}
	id, ok := tustmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkUserSimulationTeacherMark.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tustmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkusersimulationteachermark.FieldID)
		for _, f := range fields {
			if !tkusersimulationteachermark.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkusersimulationteachermark.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tustmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tustmuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkusersimulationteachermark.FieldUUID,
		})
	}
	if tustmuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkusersimulationteachermark.FieldCreatedAt,
		})
	}
	if value, ok := tustmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkusersimulationteachermark.FieldUpdatedAt,
		})
	}
	if tustmuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkusersimulationteachermark.FieldUpdatedAt,
		})
	}
	if value, ok := tustmuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkusersimulationteachermark.FieldDeletedAt,
		})
	}
	if tustmuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkusersimulationteachermark.FieldDeletedAt,
		})
	}
	if value, ok := tustmuo.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkusersimulationteachermark.FieldScore,
		})
	}
	if value, ok := tustmuo.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkusersimulationteachermark.FieldScore,
		})
	}
	if value, ok := tustmuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkusersimulationteachermark.FieldDesc,
		})
	}
	if tustmuo.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tkusersimulationteachermark.FieldDesc,
		})
	}
	if tustmuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.QuestionTable,
			Columns: []string{tkusersimulationteachermark.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tustmuo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.QuestionTable,
			Columns: []string{tkusersimulationteachermark.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tustmuo.mutation.UserExamRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.UserExamRecordTable,
			Columns: []string{tkusersimulationteachermark.UserExamRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tustmuo.mutation.UserExamRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.UserExamRecordTable,
			Columns: []string{tkusersimulationteachermark.UserExamRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkUserSimulationTeacherMark{config: tustmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tustmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkusersimulationteachermark.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

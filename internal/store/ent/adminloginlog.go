// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/adminloginlog"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AdminLoginLog is the model entity for the AdminLoginLog schema.
type AdminLoginLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// IP holds the value of the "ip" field.
	// 登录ip
	IP string `json:"ip"`
	// City holds the value of the "city" field.
	// 登录地区
	City string `json:"city"`
	// Browser holds the value of the "browser" field.
	// 登录浏览器
	Browser string `json:"browser"`
	// AdminID holds the value of the "admin_id" field.
	// 管理员id
	AdminID int `json:"admin_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminLoginLogQuery when eager-loading is set.
	Edges AdminLoginLogEdges `json:"edges"`
}

// AdminLoginLogEdges holds the relations/edges for other nodes in the graph.
type AdminLoginLogEdges struct {
	// Admin holds the value of the admin edge.
	Admin *Admin `json:"admin,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminLoginLogEdges) AdminOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Admin == nil {
			// The edge admin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminLoginLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminloginlog.FieldID, adminloginlog.FieldAdminID:
			values[i] = new(sql.NullInt64)
		case adminloginlog.FieldUUID, adminloginlog.FieldIP, adminloginlog.FieldCity, adminloginlog.FieldBrowser:
			values[i] = new(sql.NullString)
		case adminloginlog.FieldCreatedAt, adminloginlog.FieldUpdatedAt, adminloginlog.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdminLoginLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminLoginLog fields.
func (all *AdminLoginLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminloginlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			all.ID = int(value.Int64)
		case adminloginlog.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				all.UUID = value.String
			}
		case adminloginlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				all.CreatedAt = new(time.Time)
				*all.CreatedAt = value.Time
			}
		case adminloginlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				all.UpdatedAt = new(time.Time)
				*all.UpdatedAt = value.Time
			}
		case adminloginlog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				all.DeletedAt = new(time.Time)
				*all.DeletedAt = value.Time
			}
		case adminloginlog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				all.IP = value.String
			}
		case adminloginlog.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				all.City = value.String
			}
		case adminloginlog.FieldBrowser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser", values[i])
			} else if value.Valid {
				all.Browser = value.String
			}
		case adminloginlog.FieldAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field admin_id", values[i])
			} else if value.Valid {
				all.AdminID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAdmin queries the "admin" edge of the AdminLoginLog entity.
func (all *AdminLoginLog) QueryAdmin() *AdminQuery {
	return (&AdminLoginLogClient{config: all.config}).QueryAdmin(all)
}

// Update returns a builder for updating this AdminLoginLog.
// Note that you need to call AdminLoginLog.Unwrap() before calling this method if this AdminLoginLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (all *AdminLoginLog) Update() *AdminLoginLogUpdateOne {
	return (&AdminLoginLogClient{config: all.config}).UpdateOne(all)
}

// Unwrap unwraps the AdminLoginLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (all *AdminLoginLog) Unwrap() *AdminLoginLog {
	tx, ok := all.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminLoginLog is not a transactional entity")
	}
	all.config.driver = tx.drv
	return all
}

// String implements the fmt.Stringer.
func (all *AdminLoginLog) String() string {
	var builder strings.Builder
	builder.WriteString("AdminLoginLog(")
	builder.WriteString(fmt.Sprintf("id=%v", all.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(all.UUID)
	if v := all.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := all.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := all.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ip=")
	builder.WriteString(all.IP)
	builder.WriteString(", city=")
	builder.WriteString(all.City)
	builder.WriteString(", browser=")
	builder.WriteString(all.Browser)
	builder.WriteString(", admin_id=")
	builder.WriteString(fmt.Sprintf("%v", all.AdminID))
	builder.WriteByte(')')
	return builder.String()
}

// AdminLoginLogs is a parsable slice of AdminLoginLog.
type AdminLoginLogs []*AdminLoginLog

func (all AdminLoginLogs) config(cfg config) {
	for _i := range all {
		all[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/kcvideouploadtask"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcVideoUploadTaskUpdate is the builder for updating KcVideoUploadTask entities.
type KcVideoUploadTaskUpdate struct {
	config
	hooks    []Hook
	mutation *KcVideoUploadTaskMutation
}

// Where adds a new predicate for the KcVideoUploadTaskUpdate builder.
func (kvutu *KcVideoUploadTaskUpdate) Where(ps ...predicate.KcVideoUploadTask) *KcVideoUploadTaskUpdate {
	kvutu.mutation.predicates = append(kvutu.mutation.predicates, ps...)
	return kvutu
}

// SetUUID sets the "uuid" field.
func (kvutu *KcVideoUploadTaskUpdate) SetUUID(s string) *KcVideoUploadTaskUpdate {
	kvutu.mutation.SetUUID(s)
	return kvutu
}

// SetUpdatedAt sets the "updated_at" field.
func (kvutu *KcVideoUploadTaskUpdate) SetUpdatedAt(t time.Time) *KcVideoUploadTaskUpdate {
	kvutu.mutation.SetUpdatedAt(t)
	return kvutu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kvutu *KcVideoUploadTaskUpdate) ClearUpdatedAt() *KcVideoUploadTaskUpdate {
	kvutu.mutation.ClearUpdatedAt()
	return kvutu
}

// SetDeletedAt sets the "deleted_at" field.
func (kvutu *KcVideoUploadTaskUpdate) SetDeletedAt(t time.Time) *KcVideoUploadTaskUpdate {
	kvutu.mutation.SetDeletedAt(t)
	return kvutu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableDeletedAt(t *time.Time) *KcVideoUploadTaskUpdate {
	if t != nil {
		kvutu.SetDeletedAt(*t)
	}
	return kvutu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (kvutu *KcVideoUploadTaskUpdate) ClearDeletedAt() *KcVideoUploadTaskUpdate {
	kvutu.mutation.ClearDeletedAt()
	return kvutu
}

// SetVideoID sets the "video_id" field.
func (kvutu *KcVideoUploadTaskUpdate) SetVideoID(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.ResetVideoID()
	kvutu.mutation.SetVideoID(i)
	return kvutu
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableVideoID(i *int) *KcVideoUploadTaskUpdate {
	if i != nil {
		kvutu.SetVideoID(*i)
	}
	return kvutu
}

// AddVideoID adds i to the "video_id" field.
func (kvutu *KcVideoUploadTaskUpdate) AddVideoID(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.AddVideoID(i)
	return kvutu
}

// ClearVideoID clears the value of the "video_id" field.
func (kvutu *KcVideoUploadTaskUpdate) ClearVideoID() *KcVideoUploadTaskUpdate {
	kvutu.mutation.ClearVideoID()
	return kvutu
}

// SetAttachmentID sets the "attachment_id" field.
func (kvutu *KcVideoUploadTaskUpdate) SetAttachmentID(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.ResetAttachmentID()
	kvutu.mutation.SetAttachmentID(i)
	return kvutu
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableAttachmentID(i *int) *KcVideoUploadTaskUpdate {
	if i != nil {
		kvutu.SetAttachmentID(*i)
	}
	return kvutu
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (kvutu *KcVideoUploadTaskUpdate) ClearAttachmentID() *KcVideoUploadTaskUpdate {
	kvutu.mutation.ClearAttachmentID()
	return kvutu
}

// SetType sets the "type" field.
func (kvutu *KcVideoUploadTaskUpdate) SetType(u uint8) *KcVideoUploadTaskUpdate {
	kvutu.mutation.ResetType()
	kvutu.mutation.SetType(u)
	return kvutu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableType(u *uint8) *KcVideoUploadTaskUpdate {
	if u != nil {
		kvutu.SetType(*u)
	}
	return kvutu
}

// AddType adds u to the "type" field.
func (kvutu *KcVideoUploadTaskUpdate) AddType(u uint8) *KcVideoUploadTaskUpdate {
	kvutu.mutation.AddType(u)
	return kvutu
}

// SetCourseID sets the "course_id" field.
func (kvutu *KcVideoUploadTaskUpdate) SetCourseID(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.ResetCourseID()
	kvutu.mutation.SetCourseID(i)
	return kvutu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableCourseID(i *int) *KcVideoUploadTaskUpdate {
	if i != nil {
		kvutu.SetCourseID(*i)
	}
	return kvutu
}

// AddCourseID adds i to the "course_id" field.
func (kvutu *KcVideoUploadTaskUpdate) AddCourseID(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.AddCourseID(i)
	return kvutu
}

// SetStatus sets the "status" field.
func (kvutu *KcVideoUploadTaskUpdate) SetStatus(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.ResetStatus()
	kvutu.mutation.SetStatus(i)
	return kvutu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableStatus(i *int) *KcVideoUploadTaskUpdate {
	if i != nil {
		kvutu.SetStatus(*i)
	}
	return kvutu
}

// AddStatus adds i to the "status" field.
func (kvutu *KcVideoUploadTaskUpdate) AddStatus(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.AddStatus(i)
	return kvutu
}

// SetRemark sets the "remark" field.
func (kvutu *KcVideoUploadTaskUpdate) SetRemark(s string) *KcVideoUploadTaskUpdate {
	kvutu.mutation.SetRemark(s)
	return kvutu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableRemark(s *string) *KcVideoUploadTaskUpdate {
	if s != nil {
		kvutu.SetRemark(*s)
	}
	return kvutu
}

// ClearRemark clears the value of the "remark" field.
func (kvutu *KcVideoUploadTaskUpdate) ClearRemark() *KcVideoUploadTaskUpdate {
	kvutu.mutation.ClearRemark()
	return kvutu
}

// SetTitle sets the "title" field.
func (kvutu *KcVideoUploadTaskUpdate) SetTitle(s string) *KcVideoUploadTaskUpdate {
	kvutu.mutation.SetTitle(s)
	return kvutu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableTitle(s *string) *KcVideoUploadTaskUpdate {
	if s != nil {
		kvutu.SetTitle(*s)
	}
	return kvutu
}

// SetVideoName sets the "video_name" field.
func (kvutu *KcVideoUploadTaskUpdate) SetVideoName(s string) *KcVideoUploadTaskUpdate {
	kvutu.mutation.SetVideoName(s)
	return kvutu
}

// SetNillableVideoName sets the "video_name" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableVideoName(s *string) *KcVideoUploadTaskUpdate {
	if s != nil {
		kvutu.SetVideoName(*s)
	}
	return kvutu
}

// SetTotalSize sets the "total_size" field.
func (kvutu *KcVideoUploadTaskUpdate) SetTotalSize(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.ResetTotalSize()
	kvutu.mutation.SetTotalSize(i)
	return kvutu
}

// SetNillableTotalSize sets the "total_size" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableTotalSize(i *int) *KcVideoUploadTaskUpdate {
	if i != nil {
		kvutu.SetTotalSize(*i)
	}
	return kvutu
}

// AddTotalSize adds i to the "total_size" field.
func (kvutu *KcVideoUploadTaskUpdate) AddTotalSize(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.AddTotalSize(i)
	return kvutu
}

// SetLength sets the "length" field.
func (kvutu *KcVideoUploadTaskUpdate) SetLength(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.ResetLength()
	kvutu.mutation.SetLength(i)
	return kvutu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (kvutu *KcVideoUploadTaskUpdate) SetNillableLength(i *int) *KcVideoUploadTaskUpdate {
	if i != nil {
		kvutu.SetLength(*i)
	}
	return kvutu
}

// AddLength adds i to the "length" field.
func (kvutu *KcVideoUploadTaskUpdate) AddLength(i int) *KcVideoUploadTaskUpdate {
	kvutu.mutation.AddLength(i)
	return kvutu
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (kvutu *KcVideoUploadTaskUpdate) SetAttachment(a *Attachment) *KcVideoUploadTaskUpdate {
	return kvutu.SetAttachmentID(a.ID)
}

// Mutation returns the KcVideoUploadTaskMutation object of the builder.
func (kvutu *KcVideoUploadTaskUpdate) Mutation() *KcVideoUploadTaskMutation {
	return kvutu.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (kvutu *KcVideoUploadTaskUpdate) ClearAttachment() *KcVideoUploadTaskUpdate {
	kvutu.mutation.ClearAttachment()
	return kvutu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kvutu *KcVideoUploadTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kvutu.defaults()
	if len(kvutu.hooks) == 0 {
		affected, err = kvutu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcVideoUploadTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kvutu.mutation = mutation
			affected, err = kvutu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kvutu.hooks) - 1; i >= 0; i-- {
			mut = kvutu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kvutu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kvutu *KcVideoUploadTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := kvutu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kvutu *KcVideoUploadTaskUpdate) Exec(ctx context.Context) error {
	_, err := kvutu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kvutu *KcVideoUploadTaskUpdate) ExecX(ctx context.Context) {
	if err := kvutu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kvutu *KcVideoUploadTaskUpdate) defaults() {
	if _, ok := kvutu.mutation.UpdatedAt(); !ok && !kvutu.mutation.UpdatedAtCleared() {
		v := kcvideouploadtask.UpdateDefaultUpdatedAt()
		kvutu.mutation.SetUpdatedAt(v)
	}
}

func (kvutu *KcVideoUploadTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kcvideouploadtask.Table,
			Columns: kcvideouploadtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcvideouploadtask.FieldID,
			},
		},
	}
	if ps := kvutu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kvutu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldUUID,
		})
	}
	if kvutu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcvideouploadtask.FieldCreatedAt,
		})
	}
	if value, ok := kvutu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcvideouploadtask.FieldUpdatedAt,
		})
	}
	if kvutu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcvideouploadtask.FieldUpdatedAt,
		})
	}
	if value, ok := kvutu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcvideouploadtask.FieldDeletedAt,
		})
	}
	if kvutu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcvideouploadtask.FieldDeletedAt,
		})
	}
	if value, ok := kvutu.mutation.VideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldVideoID,
		})
	}
	if value, ok := kvutu.mutation.AddedVideoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldVideoID,
		})
	}
	if kvutu.mutation.VideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kcvideouploadtask.FieldVideoID,
		})
	}
	if value, ok := kvutu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcvideouploadtask.FieldType,
		})
	}
	if value, ok := kvutu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcvideouploadtask.FieldType,
		})
	}
	if value, ok := kvutu.mutation.CourseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldCourseID,
		})
	}
	if value, ok := kvutu.mutation.AddedCourseID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldCourseID,
		})
	}
	if value, ok := kvutu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldStatus,
		})
	}
	if value, ok := kvutu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldStatus,
		})
	}
	if value, ok := kvutu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldRemark,
		})
	}
	if kvutu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: kcvideouploadtask.FieldRemark,
		})
	}
	if value, ok := kvutu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldTitle,
		})
	}
	if value, ok := kvutu.mutation.VideoName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldVideoName,
		})
	}
	if value, ok := kvutu.mutation.TotalSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldTotalSize,
		})
	}
	if value, ok := kvutu.mutation.AddedTotalSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldTotalSize,
		})
	}
	if value, ok := kvutu.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldLength,
		})
	}
	if value, ok := kvutu.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldLength,
		})
	}
	if kvutu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcvideouploadtask.AttachmentTable,
			Columns: []string{kcvideouploadtask.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kvutu.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcvideouploadtask.AttachmentTable,
			Columns: []string{kcvideouploadtask.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kvutu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kcvideouploadtask.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KcVideoUploadTaskUpdateOne is the builder for updating a single KcVideoUploadTask entity.
type KcVideoUploadTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KcVideoUploadTaskMutation
}

// SetUUID sets the "uuid" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetUUID(s string) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.SetUUID(s)
	return kvutuo
}

// SetUpdatedAt sets the "updated_at" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetUpdatedAt(t time.Time) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.SetUpdatedAt(t)
	return kvutuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) ClearUpdatedAt() *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ClearUpdatedAt()
	return kvutuo
}

// SetDeletedAt sets the "deleted_at" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetDeletedAt(t time.Time) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.SetDeletedAt(t)
	return kvutuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableDeletedAt(t *time.Time) *KcVideoUploadTaskUpdateOne {
	if t != nil {
		kvutuo.SetDeletedAt(*t)
	}
	return kvutuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) ClearDeletedAt() *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ClearDeletedAt()
	return kvutuo
}

// SetVideoID sets the "video_id" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetVideoID(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ResetVideoID()
	kvutuo.mutation.SetVideoID(i)
	return kvutuo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableVideoID(i *int) *KcVideoUploadTaskUpdateOne {
	if i != nil {
		kvutuo.SetVideoID(*i)
	}
	return kvutuo
}

// AddVideoID adds i to the "video_id" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) AddVideoID(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.AddVideoID(i)
	return kvutuo
}

// ClearVideoID clears the value of the "video_id" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) ClearVideoID() *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ClearVideoID()
	return kvutuo
}

// SetAttachmentID sets the "attachment_id" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetAttachmentID(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ResetAttachmentID()
	kvutuo.mutation.SetAttachmentID(i)
	return kvutuo
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableAttachmentID(i *int) *KcVideoUploadTaskUpdateOne {
	if i != nil {
		kvutuo.SetAttachmentID(*i)
	}
	return kvutuo
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) ClearAttachmentID() *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ClearAttachmentID()
	return kvutuo
}

// SetType sets the "type" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetType(u uint8) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ResetType()
	kvutuo.mutation.SetType(u)
	return kvutuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableType(u *uint8) *KcVideoUploadTaskUpdateOne {
	if u != nil {
		kvutuo.SetType(*u)
	}
	return kvutuo
}

// AddType adds u to the "type" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) AddType(u uint8) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.AddType(u)
	return kvutuo
}

// SetCourseID sets the "course_id" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetCourseID(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ResetCourseID()
	kvutuo.mutation.SetCourseID(i)
	return kvutuo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableCourseID(i *int) *KcVideoUploadTaskUpdateOne {
	if i != nil {
		kvutuo.SetCourseID(*i)
	}
	return kvutuo
}

// AddCourseID adds i to the "course_id" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) AddCourseID(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.AddCourseID(i)
	return kvutuo
}

// SetStatus sets the "status" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetStatus(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ResetStatus()
	kvutuo.mutation.SetStatus(i)
	return kvutuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableStatus(i *int) *KcVideoUploadTaskUpdateOne {
	if i != nil {
		kvutuo.SetStatus(*i)
	}
	return kvutuo
}

// AddStatus adds i to the "status" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) AddStatus(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.AddStatus(i)
	return kvutuo
}

// SetRemark sets the "remark" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetRemark(s string) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.SetRemark(s)
	return kvutuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableRemark(s *string) *KcVideoUploadTaskUpdateOne {
	if s != nil {
		kvutuo.SetRemark(*s)
	}
	return kvutuo
}

// ClearRemark clears the value of the "remark" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) ClearRemark() *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ClearRemark()
	return kvutuo
}

// SetTitle sets the "title" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetTitle(s string) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.SetTitle(s)
	return kvutuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableTitle(s *string) *KcVideoUploadTaskUpdateOne {
	if s != nil {
		kvutuo.SetTitle(*s)
	}
	return kvutuo
}

// SetVideoName sets the "video_name" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetVideoName(s string) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.SetVideoName(s)
	return kvutuo
}

// SetNillableVideoName sets the "video_name" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableVideoName(s *string) *KcVideoUploadTaskUpdateOne {
	if s != nil {
		kvutuo.SetVideoName(*s)
	}
	return kvutuo
}

// SetTotalSize sets the "total_size" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetTotalSize(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ResetTotalSize()
	kvutuo.mutation.SetTotalSize(i)
	return kvutuo
}

// SetNillableTotalSize sets the "total_size" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableTotalSize(i *int) *KcVideoUploadTaskUpdateOne {
	if i != nil {
		kvutuo.SetTotalSize(*i)
	}
	return kvutuo
}

// AddTotalSize adds i to the "total_size" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) AddTotalSize(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.AddTotalSize(i)
	return kvutuo
}

// SetLength sets the "length" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetLength(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ResetLength()
	kvutuo.mutation.SetLength(i)
	return kvutuo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetNillableLength(i *int) *KcVideoUploadTaskUpdateOne {
	if i != nil {
		kvutuo.SetLength(*i)
	}
	return kvutuo
}

// AddLength adds i to the "length" field.
func (kvutuo *KcVideoUploadTaskUpdateOne) AddLength(i int) *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.AddLength(i)
	return kvutuo
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (kvutuo *KcVideoUploadTaskUpdateOne) SetAttachment(a *Attachment) *KcVideoUploadTaskUpdateOne {
	return kvutuo.SetAttachmentID(a.ID)
}

// Mutation returns the KcVideoUploadTaskMutation object of the builder.
func (kvutuo *KcVideoUploadTaskUpdateOne) Mutation() *KcVideoUploadTaskMutation {
	return kvutuo.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (kvutuo *KcVideoUploadTaskUpdateOne) ClearAttachment() *KcVideoUploadTaskUpdateOne {
	kvutuo.mutation.ClearAttachment()
	return kvutuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kvutuo *KcVideoUploadTaskUpdateOne) Select(field string, fields ...string) *KcVideoUploadTaskUpdateOne {
	kvutuo.fields = append([]string{field}, fields...)
	return kvutuo
}

// Save executes the query and returns the updated KcVideoUploadTask entity.
func (kvutuo *KcVideoUploadTaskUpdateOne) Save(ctx context.Context) (*KcVideoUploadTask, error) {
	var (
		err  error
		node *KcVideoUploadTask
	)
	kvutuo.defaults()
	if len(kvutuo.hooks) == 0 {
		node, err = kvutuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcVideoUploadTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kvutuo.mutation = mutation
			node, err = kvutuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kvutuo.hooks) - 1; i >= 0; i-- {
			mut = kvutuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kvutuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kvutuo *KcVideoUploadTaskUpdateOne) SaveX(ctx context.Context) *KcVideoUploadTask {
	node, err := kvutuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kvutuo *KcVideoUploadTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := kvutuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kvutuo *KcVideoUploadTaskUpdateOne) ExecX(ctx context.Context) {
	if err := kvutuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kvutuo *KcVideoUploadTaskUpdateOne) defaults() {
	if _, ok := kvutuo.mutation.UpdatedAt(); !ok && !kvutuo.mutation.UpdatedAtCleared() {
		v := kcvideouploadtask.UpdateDefaultUpdatedAt()
		kvutuo.mutation.SetUpdatedAt(v)
	}
}

func (kvutuo *KcVideoUploadTaskUpdateOne) sqlSave(ctx context.Context) (_node *KcVideoUploadTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kcvideouploadtask.Table,
			Columns: kcvideouploadtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcvideouploadtask.FieldID,
			},
		},
	}
	id, ok := kvutuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KcVideoUploadTask.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kvutuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kcvideouploadtask.FieldID)
		for _, f := range fields {
			if !kcvideouploadtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kcvideouploadtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kvutuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kvutuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldUUID,
		})
	}
	if kvutuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcvideouploadtask.FieldCreatedAt,
		})
	}
	if value, ok := kvutuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcvideouploadtask.FieldUpdatedAt,
		})
	}
	if kvutuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcvideouploadtask.FieldUpdatedAt,
		})
	}
	if value, ok := kvutuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcvideouploadtask.FieldDeletedAt,
		})
	}
	if kvutuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcvideouploadtask.FieldDeletedAt,
		})
	}
	if value, ok := kvutuo.mutation.VideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldVideoID,
		})
	}
	if value, ok := kvutuo.mutation.AddedVideoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldVideoID,
		})
	}
	if kvutuo.mutation.VideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kcvideouploadtask.FieldVideoID,
		})
	}
	if value, ok := kvutuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcvideouploadtask.FieldType,
		})
	}
	if value, ok := kvutuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcvideouploadtask.FieldType,
		})
	}
	if value, ok := kvutuo.mutation.CourseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldCourseID,
		})
	}
	if value, ok := kvutuo.mutation.AddedCourseID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldCourseID,
		})
	}
	if value, ok := kvutuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldStatus,
		})
	}
	if value, ok := kvutuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldStatus,
		})
	}
	if value, ok := kvutuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldRemark,
		})
	}
	if kvutuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: kcvideouploadtask.FieldRemark,
		})
	}
	if value, ok := kvutuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldTitle,
		})
	}
	if value, ok := kvutuo.mutation.VideoName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcvideouploadtask.FieldVideoName,
		})
	}
	if value, ok := kvutuo.mutation.TotalSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldTotalSize,
		})
	}
	if value, ok := kvutuo.mutation.AddedTotalSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldTotalSize,
		})
	}
	if value, ok := kvutuo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldLength,
		})
	}
	if value, ok := kvutuo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcvideouploadtask.FieldLength,
		})
	}
	if kvutuo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcvideouploadtask.AttachmentTable,
			Columns: []string{kcvideouploadtask.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kvutuo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcvideouploadtask.AttachmentTable,
			Columns: []string{kcvideouploadtask.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KcVideoUploadTask{config: kvutuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kvutuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kcvideouploadtask.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

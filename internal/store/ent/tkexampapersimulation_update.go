// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkexampapersimulation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperSimulationUpdate is the builder for updating TkExamPaperSimulation entities.
type TkExamPaperSimulationUpdate struct {
	config
	hooks    []Hook
	mutation *TkExamPaperSimulationMutation
}

// Where adds a new predicate for the TkExamPaperSimulationUpdate builder.
func (tepsu *TkExamPaperSimulationUpdate) Where(ps ...predicate.TkExamPaperSimulation) *TkExamPaperSimulationUpdate {
	tepsu.mutation.predicates = append(tepsu.mutation.predicates, ps...)
	return tepsu
}

// SetUUID sets the "uuid" field.
func (tepsu *TkExamPaperSimulationUpdate) SetUUID(s string) *TkExamPaperSimulationUpdate {
	tepsu.mutation.SetUUID(s)
	return tepsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tepsu *TkExamPaperSimulationUpdate) SetUpdatedAt(t time.Time) *TkExamPaperSimulationUpdate {
	tepsu.mutation.SetUpdatedAt(t)
	return tepsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tepsu *TkExamPaperSimulationUpdate) ClearUpdatedAt() *TkExamPaperSimulationUpdate {
	tepsu.mutation.ClearUpdatedAt()
	return tepsu
}

// SetDeletedAt sets the "deleted_at" field.
func (tepsu *TkExamPaperSimulationUpdate) SetDeletedAt(t time.Time) *TkExamPaperSimulationUpdate {
	tepsu.mutation.SetDeletedAt(t)
	return tepsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tepsu *TkExamPaperSimulationUpdate) SetNillableDeletedAt(t *time.Time) *TkExamPaperSimulationUpdate {
	if t != nil {
		tepsu.SetDeletedAt(*t)
	}
	return tepsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tepsu *TkExamPaperSimulationUpdate) ClearDeletedAt() *TkExamPaperSimulationUpdate {
	tepsu.mutation.ClearDeletedAt()
	return tepsu
}

// SetStartAt sets the "start_at" field.
func (tepsu *TkExamPaperSimulationUpdate) SetStartAt(t time.Time) *TkExamPaperSimulationUpdate {
	tepsu.mutation.SetStartAt(t)
	return tepsu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tepsu *TkExamPaperSimulationUpdate) SetNillableStartAt(t *time.Time) *TkExamPaperSimulationUpdate {
	if t != nil {
		tepsu.SetStartAt(*t)
	}
	return tepsu
}

// ClearStartAt clears the value of the "start_at" field.
func (tepsu *TkExamPaperSimulationUpdate) ClearStartAt() *TkExamPaperSimulationUpdate {
	tepsu.mutation.ClearStartAt()
	return tepsu
}

// SetEndAt sets the "end_at" field.
func (tepsu *TkExamPaperSimulationUpdate) SetEndAt(t time.Time) *TkExamPaperSimulationUpdate {
	tepsu.mutation.SetEndAt(t)
	return tepsu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tepsu *TkExamPaperSimulationUpdate) SetNillableEndAt(t *time.Time) *TkExamPaperSimulationUpdate {
	if t != nil {
		tepsu.SetEndAt(*t)
	}
	return tepsu
}

// ClearEndAt clears the value of the "end_at" field.
func (tepsu *TkExamPaperSimulationUpdate) ClearEndAt() *TkExamPaperSimulationUpdate {
	tepsu.mutation.ClearEndAt()
	return tepsu
}

// SetEnableStatus sets the "enable_status" field.
func (tepsu *TkExamPaperSimulationUpdate) SetEnableStatus(u uint8) *TkExamPaperSimulationUpdate {
	tepsu.mutation.ResetEnableStatus()
	tepsu.mutation.SetEnableStatus(u)
	return tepsu
}

// SetNillableEnableStatus sets the "enable_status" field if the given value is not nil.
func (tepsu *TkExamPaperSimulationUpdate) SetNillableEnableStatus(u *uint8) *TkExamPaperSimulationUpdate {
	if u != nil {
		tepsu.SetEnableStatus(*u)
	}
	return tepsu
}

// AddEnableStatus adds u to the "enable_status" field.
func (tepsu *TkExamPaperSimulationUpdate) AddEnableStatus(u uint8) *TkExamPaperSimulationUpdate {
	tepsu.mutation.AddEnableStatus(u)
	return tepsu
}

// SetExamPaperID sets the "exam_paper_id" field.
func (tepsu *TkExamPaperSimulationUpdate) SetExamPaperID(i int) *TkExamPaperSimulationUpdate {
	tepsu.mutation.ResetExamPaperID()
	tepsu.mutation.SetExamPaperID(i)
	return tepsu
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (tepsu *TkExamPaperSimulationUpdate) SetNillableExamPaperID(i *int) *TkExamPaperSimulationUpdate {
	if i != nil {
		tepsu.SetExamPaperID(*i)
	}
	return tepsu
}

// AddExamPaperID adds i to the "exam_paper_id" field.
func (tepsu *TkExamPaperSimulationUpdate) AddExamPaperID(i int) *TkExamPaperSimulationUpdate {
	tepsu.mutation.AddExamPaperID(i)
	return tepsu
}

// ClearExamPaperID clears the value of the "exam_paper_id" field.
func (tepsu *TkExamPaperSimulationUpdate) ClearExamPaperID() *TkExamPaperSimulationUpdate {
	tepsu.mutation.ClearExamPaperID()
	return tepsu
}

// Mutation returns the TkExamPaperSimulationMutation object of the builder.
func (tepsu *TkExamPaperSimulationUpdate) Mutation() *TkExamPaperSimulationMutation {
	return tepsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tepsu *TkExamPaperSimulationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tepsu.defaults()
	if len(tepsu.hooks) == 0 {
		affected, err = tepsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperSimulationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tepsu.mutation = mutation
			affected, err = tepsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tepsu.hooks) - 1; i >= 0; i-- {
			mut = tepsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tepsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tepsu *TkExamPaperSimulationUpdate) SaveX(ctx context.Context) int {
	affected, err := tepsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tepsu *TkExamPaperSimulationUpdate) Exec(ctx context.Context) error {
	_, err := tepsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tepsu *TkExamPaperSimulationUpdate) ExecX(ctx context.Context) {
	if err := tepsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tepsu *TkExamPaperSimulationUpdate) defaults() {
	if _, ok := tepsu.mutation.UpdatedAt(); !ok && !tepsu.mutation.UpdatedAtCleared() {
		v := tkexampapersimulation.UpdateDefaultUpdatedAt()
		tepsu.mutation.SetUpdatedAt(v)
	}
}

func (tepsu *TkExamPaperSimulationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampapersimulation.Table,
			Columns: tkexampapersimulation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampapersimulation.FieldID,
			},
		},
	}
	if ps := tepsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tepsu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampapersimulation.FieldUUID,
		})
	}
	if tepsu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldCreatedAt,
		})
	}
	if value, ok := tepsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldUpdatedAt,
		})
	}
	if tepsu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldUpdatedAt,
		})
	}
	if value, ok := tepsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldDeletedAt,
		})
	}
	if tepsu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldDeletedAt,
		})
	}
	if value, ok := tepsu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldStartAt,
		})
	}
	if tepsu.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldStartAt,
		})
	}
	if value, ok := tepsu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldEndAt,
		})
	}
	if tepsu.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldEndAt,
		})
	}
	if value, ok := tepsu.mutation.EnableStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampapersimulation.FieldEnableStatus,
		})
	}
	if value, ok := tepsu.mutation.AddedEnableStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampapersimulation.FieldEnableStatus,
		})
	}
	if value, ok := tepsu.mutation.ExamPaperID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampapersimulation.FieldExamPaperID,
		})
	}
	if value, ok := tepsu.mutation.AddedExamPaperID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampapersimulation.FieldExamPaperID,
		})
	}
	if tepsu.mutation.ExamPaperIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tkexampapersimulation.FieldExamPaperID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tepsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampapersimulation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkExamPaperSimulationUpdateOne is the builder for updating a single TkExamPaperSimulation entity.
type TkExamPaperSimulationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkExamPaperSimulationMutation
}

// SetUUID sets the "uuid" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetUUID(s string) *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.SetUUID(s)
	return tepsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetUpdatedAt(t time.Time) *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.SetUpdatedAt(t)
	return tepsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) ClearUpdatedAt() *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.ClearUpdatedAt()
	return tepsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetDeletedAt(t time.Time) *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.SetDeletedAt(t)
	return tepsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetNillableDeletedAt(t *time.Time) *TkExamPaperSimulationUpdateOne {
	if t != nil {
		tepsuo.SetDeletedAt(*t)
	}
	return tepsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) ClearDeletedAt() *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.ClearDeletedAt()
	return tepsuo
}

// SetStartAt sets the "start_at" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetStartAt(t time.Time) *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.SetStartAt(t)
	return tepsuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetNillableStartAt(t *time.Time) *TkExamPaperSimulationUpdateOne {
	if t != nil {
		tepsuo.SetStartAt(*t)
	}
	return tepsuo
}

// ClearStartAt clears the value of the "start_at" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) ClearStartAt() *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.ClearStartAt()
	return tepsuo
}

// SetEndAt sets the "end_at" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetEndAt(t time.Time) *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.SetEndAt(t)
	return tepsuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetNillableEndAt(t *time.Time) *TkExamPaperSimulationUpdateOne {
	if t != nil {
		tepsuo.SetEndAt(*t)
	}
	return tepsuo
}

// ClearEndAt clears the value of the "end_at" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) ClearEndAt() *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.ClearEndAt()
	return tepsuo
}

// SetEnableStatus sets the "enable_status" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetEnableStatus(u uint8) *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.ResetEnableStatus()
	tepsuo.mutation.SetEnableStatus(u)
	return tepsuo
}

// SetNillableEnableStatus sets the "enable_status" field if the given value is not nil.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetNillableEnableStatus(u *uint8) *TkExamPaperSimulationUpdateOne {
	if u != nil {
		tepsuo.SetEnableStatus(*u)
	}
	return tepsuo
}

// AddEnableStatus adds u to the "enable_status" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) AddEnableStatus(u uint8) *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.AddEnableStatus(u)
	return tepsuo
}

// SetExamPaperID sets the "exam_paper_id" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetExamPaperID(i int) *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.ResetExamPaperID()
	tepsuo.mutation.SetExamPaperID(i)
	return tepsuo
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (tepsuo *TkExamPaperSimulationUpdateOne) SetNillableExamPaperID(i *int) *TkExamPaperSimulationUpdateOne {
	if i != nil {
		tepsuo.SetExamPaperID(*i)
	}
	return tepsuo
}

// AddExamPaperID adds i to the "exam_paper_id" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) AddExamPaperID(i int) *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.AddExamPaperID(i)
	return tepsuo
}

// ClearExamPaperID clears the value of the "exam_paper_id" field.
func (tepsuo *TkExamPaperSimulationUpdateOne) ClearExamPaperID() *TkExamPaperSimulationUpdateOne {
	tepsuo.mutation.ClearExamPaperID()
	return tepsuo
}

// Mutation returns the TkExamPaperSimulationMutation object of the builder.
func (tepsuo *TkExamPaperSimulationUpdateOne) Mutation() *TkExamPaperSimulationMutation {
	return tepsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tepsuo *TkExamPaperSimulationUpdateOne) Select(field string, fields ...string) *TkExamPaperSimulationUpdateOne {
	tepsuo.fields = append([]string{field}, fields...)
	return tepsuo
}

// Save executes the query and returns the updated TkExamPaperSimulation entity.
func (tepsuo *TkExamPaperSimulationUpdateOne) Save(ctx context.Context) (*TkExamPaperSimulation, error) {
	var (
		err  error
		node *TkExamPaperSimulation
	)
	tepsuo.defaults()
	if len(tepsuo.hooks) == 0 {
		node, err = tepsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperSimulationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tepsuo.mutation = mutation
			node, err = tepsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tepsuo.hooks) - 1; i >= 0; i-- {
			mut = tepsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tepsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tepsuo *TkExamPaperSimulationUpdateOne) SaveX(ctx context.Context) *TkExamPaperSimulation {
	node, err := tepsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tepsuo *TkExamPaperSimulationUpdateOne) Exec(ctx context.Context) error {
	_, err := tepsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tepsuo *TkExamPaperSimulationUpdateOne) ExecX(ctx context.Context) {
	if err := tepsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tepsuo *TkExamPaperSimulationUpdateOne) defaults() {
	if _, ok := tepsuo.mutation.UpdatedAt(); !ok && !tepsuo.mutation.UpdatedAtCleared() {
		v := tkexampapersimulation.UpdateDefaultUpdatedAt()
		tepsuo.mutation.SetUpdatedAt(v)
	}
}

func (tepsuo *TkExamPaperSimulationUpdateOne) sqlSave(ctx context.Context) (_node *TkExamPaperSimulation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampapersimulation.Table,
			Columns: tkexampapersimulation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampapersimulation.FieldID,
			},
		},
	}
	id, ok := tepsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkExamPaperSimulation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tepsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkexampapersimulation.FieldID)
		for _, f := range fields {
			if !tkexampapersimulation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkexampapersimulation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tepsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tepsuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampapersimulation.FieldUUID,
		})
	}
	if tepsuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldCreatedAt,
		})
	}
	if value, ok := tepsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldUpdatedAt,
		})
	}
	if tepsuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldUpdatedAt,
		})
	}
	if value, ok := tepsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldDeletedAt,
		})
	}
	if tepsuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldDeletedAt,
		})
	}
	if value, ok := tepsuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldStartAt,
		})
	}
	if tepsuo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldStartAt,
		})
	}
	if value, ok := tepsuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampapersimulation.FieldEndAt,
		})
	}
	if tepsuo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampapersimulation.FieldEndAt,
		})
	}
	if value, ok := tepsuo.mutation.EnableStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampapersimulation.FieldEnableStatus,
		})
	}
	if value, ok := tepsuo.mutation.AddedEnableStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampapersimulation.FieldEnableStatus,
		})
	}
	if value, ok := tepsuo.mutation.ExamPaperID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampapersimulation.FieldExamPaperID,
		})
	}
	if value, ok := tepsuo.mutation.AddedExamPaperID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampapersimulation.FieldExamPaperID,
		})
	}
	if tepsuo.mutation.ExamPaperIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tkexampapersimulation.FieldExamPaperID,
		})
	}
	_node = &TkExamPaperSimulation{config: tepsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tepsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampapersimulation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

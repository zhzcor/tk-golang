// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/activity"
	"gserver/internal/store/ent/activitytype"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityTypeUpdate is the builder for updating ActivityType entities.
type ActivityTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityTypeMutation
}

// Where adds a new predicate for the ActivityTypeUpdate builder.
func (atu *ActivityTypeUpdate) Where(ps ...predicate.ActivityType) *ActivityTypeUpdate {
	atu.mutation.predicates = append(atu.mutation.predicates, ps...)
	return atu
}

// SetUUID sets the "uuid" field.
func (atu *ActivityTypeUpdate) SetUUID(s string) *ActivityTypeUpdate {
	atu.mutation.SetUUID(s)
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *ActivityTypeUpdate) SetUpdatedAt(t time.Time) *ActivityTypeUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (atu *ActivityTypeUpdate) ClearUpdatedAt() *ActivityTypeUpdate {
	atu.mutation.ClearUpdatedAt()
	return atu
}

// SetDeletedAt sets the "deleted_at" field.
func (atu *ActivityTypeUpdate) SetDeletedAt(t time.Time) *ActivityTypeUpdate {
	atu.mutation.SetDeletedAt(t)
	return atu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atu *ActivityTypeUpdate) SetNillableDeletedAt(t *time.Time) *ActivityTypeUpdate {
	if t != nil {
		atu.SetDeletedAt(*t)
	}
	return atu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atu *ActivityTypeUpdate) ClearDeletedAt() *ActivityTypeUpdate {
	atu.mutation.ClearDeletedAt()
	return atu
}

// SetName sets the "name" field.
func (atu *ActivityTypeUpdate) SetName(s string) *ActivityTypeUpdate {
	atu.mutation.SetName(s)
	return atu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atu *ActivityTypeUpdate) SetNillableName(s *string) *ActivityTypeUpdate {
	if s != nil {
		atu.SetName(*s)
	}
	return atu
}

// SetStatus sets the "status" field.
func (atu *ActivityTypeUpdate) SetStatus(u uint8) *ActivityTypeUpdate {
	atu.mutation.ResetStatus()
	atu.mutation.SetStatus(u)
	return atu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atu *ActivityTypeUpdate) SetNillableStatus(u *uint8) *ActivityTypeUpdate {
	if u != nil {
		atu.SetStatus(*u)
	}
	return atu
}

// AddStatus adds u to the "status" field.
func (atu *ActivityTypeUpdate) AddStatus(u uint8) *ActivityTypeUpdate {
	atu.mutation.AddStatus(u)
	return atu
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (atu *ActivityTypeUpdate) AddActivityIDs(ids ...int) *ActivityTypeUpdate {
	atu.mutation.AddActivityIDs(ids...)
	return atu
}

// AddActivities adds the "activities" edges to the Activity entity.
func (atu *ActivityTypeUpdate) AddActivities(a ...*Activity) *ActivityTypeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.AddActivityIDs(ids...)
}

// Mutation returns the ActivityTypeMutation object of the builder.
func (atu *ActivityTypeUpdate) Mutation() *ActivityTypeMutation {
	return atu.mutation
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (atu *ActivityTypeUpdate) ClearActivities() *ActivityTypeUpdate {
	atu.mutation.ClearActivities()
	return atu
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (atu *ActivityTypeUpdate) RemoveActivityIDs(ids ...int) *ActivityTypeUpdate {
	atu.mutation.RemoveActivityIDs(ids...)
	return atu
}

// RemoveActivities removes "activities" edges to Activity entities.
func (atu *ActivityTypeUpdate) RemoveActivities(a ...*Activity) *ActivityTypeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *ActivityTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	atu.defaults()
	if len(atu.hooks) == 0 {
		affected, err = atu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atu.mutation = mutation
			affected, err = atu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atu.hooks) - 1; i >= 0; i-- {
			mut = atu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atu *ActivityTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *ActivityTypeUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *ActivityTypeUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *ActivityTypeUpdate) defaults() {
	if _, ok := atu.mutation.UpdatedAt(); !ok && !atu.mutation.UpdatedAtCleared() {
		v := activitytype.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
}

func (atu *ActivityTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activitytype.Table,
			Columns: activitytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activitytype.FieldID,
			},
		},
	}
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitytype.FieldUUID,
		})
	}
	if atu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activitytype.FieldCreatedAt,
		})
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitytype.FieldUpdatedAt,
		})
	}
	if atu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activitytype.FieldUpdatedAt,
		})
	}
	if value, ok := atu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitytype.FieldDeletedAt,
		})
	}
	if atu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activitytype.FieldDeletedAt,
		})
	}
	if value, ok := atu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitytype.FieldName,
		})
	}
	if value, ok := atu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activitytype.FieldStatus,
		})
	}
	if value, ok := atu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activitytype.FieldStatus,
		})
	}
	if atu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activitytype.ActivitiesTable,
			Columns: []string{activitytype.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !atu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activitytype.ActivitiesTable,
			Columns: []string{activitytype.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activitytype.ActivitiesTable,
			Columns: []string{activitytype.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActivityTypeUpdateOne is the builder for updating a single ActivityType entity.
type ActivityTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityTypeMutation
}

// SetUUID sets the "uuid" field.
func (atuo *ActivityTypeUpdateOne) SetUUID(s string) *ActivityTypeUpdateOne {
	atuo.mutation.SetUUID(s)
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *ActivityTypeUpdateOne) SetUpdatedAt(t time.Time) *ActivityTypeUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (atuo *ActivityTypeUpdateOne) ClearUpdatedAt() *ActivityTypeUpdateOne {
	atuo.mutation.ClearUpdatedAt()
	return atuo
}

// SetDeletedAt sets the "deleted_at" field.
func (atuo *ActivityTypeUpdateOne) SetDeletedAt(t time.Time) *ActivityTypeUpdateOne {
	atuo.mutation.SetDeletedAt(t)
	return atuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atuo *ActivityTypeUpdateOne) SetNillableDeletedAt(t *time.Time) *ActivityTypeUpdateOne {
	if t != nil {
		atuo.SetDeletedAt(*t)
	}
	return atuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atuo *ActivityTypeUpdateOne) ClearDeletedAt() *ActivityTypeUpdateOne {
	atuo.mutation.ClearDeletedAt()
	return atuo
}

// SetName sets the "name" field.
func (atuo *ActivityTypeUpdateOne) SetName(s string) *ActivityTypeUpdateOne {
	atuo.mutation.SetName(s)
	return atuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atuo *ActivityTypeUpdateOne) SetNillableName(s *string) *ActivityTypeUpdateOne {
	if s != nil {
		atuo.SetName(*s)
	}
	return atuo
}

// SetStatus sets the "status" field.
func (atuo *ActivityTypeUpdateOne) SetStatus(u uint8) *ActivityTypeUpdateOne {
	atuo.mutation.ResetStatus()
	atuo.mutation.SetStatus(u)
	return atuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atuo *ActivityTypeUpdateOne) SetNillableStatus(u *uint8) *ActivityTypeUpdateOne {
	if u != nil {
		atuo.SetStatus(*u)
	}
	return atuo
}

// AddStatus adds u to the "status" field.
func (atuo *ActivityTypeUpdateOne) AddStatus(u uint8) *ActivityTypeUpdateOne {
	atuo.mutation.AddStatus(u)
	return atuo
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (atuo *ActivityTypeUpdateOne) AddActivityIDs(ids ...int) *ActivityTypeUpdateOne {
	atuo.mutation.AddActivityIDs(ids...)
	return atuo
}

// AddActivities adds the "activities" edges to the Activity entity.
func (atuo *ActivityTypeUpdateOne) AddActivities(a ...*Activity) *ActivityTypeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.AddActivityIDs(ids...)
}

// Mutation returns the ActivityTypeMutation object of the builder.
func (atuo *ActivityTypeUpdateOne) Mutation() *ActivityTypeMutation {
	return atuo.mutation
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (atuo *ActivityTypeUpdateOne) ClearActivities() *ActivityTypeUpdateOne {
	atuo.mutation.ClearActivities()
	return atuo
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (atuo *ActivityTypeUpdateOne) RemoveActivityIDs(ids ...int) *ActivityTypeUpdateOne {
	atuo.mutation.RemoveActivityIDs(ids...)
	return atuo
}

// RemoveActivities removes "activities" edges to Activity entities.
func (atuo *ActivityTypeUpdateOne) RemoveActivities(a ...*Activity) *ActivityTypeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.RemoveActivityIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *ActivityTypeUpdateOne) Select(field string, fields ...string) *ActivityTypeUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated ActivityType entity.
func (atuo *ActivityTypeUpdateOne) Save(ctx context.Context) (*ActivityType, error) {
	var (
		err  error
		node *ActivityType
	)
	atuo.defaults()
	if len(atuo.hooks) == 0 {
		node, err = atuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atuo.mutation = mutation
			node, err = atuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atuo.hooks) - 1; i >= 0; i-- {
			mut = atuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *ActivityTypeUpdateOne) SaveX(ctx context.Context) *ActivityType {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *ActivityTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *ActivityTypeUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *ActivityTypeUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdatedAt(); !ok && !atuo.mutation.UpdatedAtCleared() {
		v := activitytype.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
}

func (atuo *ActivityTypeUpdateOne) sqlSave(ctx context.Context) (_node *ActivityType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activitytype.Table,
			Columns: activitytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activitytype.FieldID,
			},
		},
	}
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ActivityType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activitytype.FieldID)
		for _, f := range fields {
			if !activitytype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activitytype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitytype.FieldUUID,
		})
	}
	if atuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activitytype.FieldCreatedAt,
		})
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitytype.FieldUpdatedAt,
		})
	}
	if atuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activitytype.FieldUpdatedAt,
		})
	}
	if value, ok := atuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitytype.FieldDeletedAt,
		})
	}
	if atuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activitytype.FieldDeletedAt,
		})
	}
	if value, ok := atuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitytype.FieldName,
		})
	}
	if value, ok := atuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activitytype.FieldStatus,
		})
	}
	if value, ok := atuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activitytype.FieldStatus,
		})
	}
	if atuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activitytype.ActivitiesTable,
			Columns: []string{activitytype.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !atuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activitytype.ActivitiesTable,
			Columns: []string{activitytype.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activitytype.ActivitiesTable,
			Columns: []string{activitytype.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityType{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

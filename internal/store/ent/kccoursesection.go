// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tkserver/internal/store/ent/kccoursechapter"
	"tkserver/internal/store/ent/kccoursesection"

	"entgo.io/ent/dialect/sql"
)

// KcCourseSection is the model entity for the KcCourseSection schema.
type KcCourseSection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CourseChapterID holds the value of the "course_chapter_id" field.
	// 直播章节id
	CourseChapterID int `json:"course_chapter_id"`
	// Title holds the value of the "title" field.
	// 名称
	Title string `json:"title"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KcCourseSectionQuery when eager-loading is set.
	Edges KcCourseSectionEdges `json:"edges"`
}

// KcCourseSectionEdges holds the relations/edges for other nodes in the graph.
type KcCourseSectionEdges struct {
	// Chapter holds the value of the chapter edge.
	Chapter *KcCourseChapter `json:"chapter,omitempty"`
	// CourseSmallSections holds the value of the course_small_sections edge.
	CourseSmallSections []*KcCourseSmallCategory `json:"course_small_sections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChapterOrErr returns the Chapter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseSectionEdges) ChapterOrErr() (*KcCourseChapter, error) {
	if e.loadedTypes[0] {
		if e.Chapter == nil {
			// The edge chapter was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccoursechapter.Label}
		}
		return e.Chapter, nil
	}
	return nil, &NotLoadedError{edge: "chapter"}
}

// CourseSmallSectionsOrErr returns the CourseSmallSections value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseSectionEdges) CourseSmallSectionsOrErr() ([]*KcCourseSmallCategory, error) {
	if e.loadedTypes[1] {
		return e.CourseSmallSections, nil
	}
	return nil, &NotLoadedError{edge: "course_small_sections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KcCourseSection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kccoursesection.FieldID, kccoursesection.FieldCourseChapterID:
			values[i] = new(sql.NullInt64)
		case kccoursesection.FieldTitle:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KcCourseSection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KcCourseSection fields.
func (kcs *KcCourseSection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kccoursesection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kcs.ID = int(value.Int64)
		case kccoursesection.FieldCourseChapterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_chapter_id", values[i])
			} else if value.Valid {
				kcs.CourseChapterID = int(value.Int64)
			}
		case kccoursesection.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				kcs.Title = value.String
			}
		}
	}
	return nil
}

// QueryChapter queries the "chapter" edge of the KcCourseSection entity.
func (kcs *KcCourseSection) QueryChapter() *KcCourseChapterQuery {
	return (&KcCourseSectionClient{config: kcs.config}).QueryChapter(kcs)
}

// QueryCourseSmallSections queries the "course_small_sections" edge of the KcCourseSection entity.
func (kcs *KcCourseSection) QueryCourseSmallSections() *KcCourseSmallCategoryQuery {
	return (&KcCourseSectionClient{config: kcs.config}).QueryCourseSmallSections(kcs)
}

// Update returns a builder for updating this KcCourseSection.
// Note that you need to call KcCourseSection.Unwrap() before calling this method if this KcCourseSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (kcs *KcCourseSection) Update() *KcCourseSectionUpdateOne {
	return (&KcCourseSectionClient{config: kcs.config}).UpdateOne(kcs)
}

// Unwrap unwraps the KcCourseSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kcs *KcCourseSection) Unwrap() *KcCourseSection {
	tx, ok := kcs.config.driver.(*txDriver)
	if !ok {
		panic("ent: KcCourseSection is not a transactional entity")
	}
	kcs.config.driver = tx.drv
	return kcs
}

// String implements the fmt.Stringer.
func (kcs *KcCourseSection) String() string {
	var builder strings.Builder
	builder.WriteString("KcCourseSection(")
	builder.WriteString(fmt.Sprintf("id=%v", kcs.ID))
	builder.WriteString(", course_chapter_id=")
	builder.WriteString(fmt.Sprintf("%v", kcs.CourseChapterID))
	builder.WriteString(", title=")
	builder.WriteString(kcs.Title)
	builder.WriteByte(')')
	return builder.String()
}

// KcCourseSections is a parsable slice of KcCourseSection.
type KcCourseSections []*KcCourseSection

func (kcs KcCourseSections) config(cfg config) {
	for _i := range kcs {
		kcs[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/kccoursesmallcategory"
	"gserver/internal/store/ent/user"
	"gserver/internal/store/ent/videorecord"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoRecordCreate is the builder for creating a VideoRecord entity.
type VideoRecordCreate struct {
	config
	mutation *VideoRecordMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (vrc *VideoRecordCreate) SetUUID(s string) *VideoRecordCreate {
	vrc.mutation.SetUUID(s)
	return vrc
}

// SetCreatedAt sets the "created_at" field.
func (vrc *VideoRecordCreate) SetCreatedAt(t time.Time) *VideoRecordCreate {
	vrc.mutation.SetCreatedAt(t)
	return vrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableCreatedAt(t *time.Time) *VideoRecordCreate {
	if t != nil {
		vrc.SetCreatedAt(*t)
	}
	return vrc
}

// SetUpdatedAt sets the "updated_at" field.
func (vrc *VideoRecordCreate) SetUpdatedAt(t time.Time) *VideoRecordCreate {
	vrc.mutation.SetUpdatedAt(t)
	return vrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableUpdatedAt(t *time.Time) *VideoRecordCreate {
	if t != nil {
		vrc.SetUpdatedAt(*t)
	}
	return vrc
}

// SetDeletedAt sets the "deleted_at" field.
func (vrc *VideoRecordCreate) SetDeletedAt(t time.Time) *VideoRecordCreate {
	vrc.mutation.SetDeletedAt(t)
	return vrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableDeletedAt(t *time.Time) *VideoRecordCreate {
	if t != nil {
		vrc.SetDeletedAt(*t)
	}
	return vrc
}

// SetVideoName sets the "video_name" field.
func (vrc *VideoRecordCreate) SetVideoName(s string) *VideoRecordCreate {
	vrc.mutation.SetVideoName(s)
	return vrc
}

// SetNillableVideoName sets the "video_name" field if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableVideoName(s *string) *VideoRecordCreate {
	if s != nil {
		vrc.SetVideoName(*s)
	}
	return vrc
}

// SetViewTime sets the "view_time" field.
func (vrc *VideoRecordCreate) SetViewTime(u uint8) *VideoRecordCreate {
	vrc.mutation.SetViewTime(u)
	return vrc
}

// SetNillableViewTime sets the "view_time" field if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableViewTime(u *uint8) *VideoRecordCreate {
	if u != nil {
		vrc.SetViewTime(*u)
	}
	return vrc
}

// SetUserID sets the "user_id" field.
func (vrc *VideoRecordCreate) SetUserID(i int) *VideoRecordCreate {
	vrc.mutation.SetUserID(i)
	return vrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableUserID(i *int) *VideoRecordCreate {
	if i != nil {
		vrc.SetUserID(*i)
	}
	return vrc
}

// SetSmallID sets the "small_id" field.
func (vrc *VideoRecordCreate) SetSmallID(i int) *VideoRecordCreate {
	vrc.mutation.SetSmallID(i)
	return vrc
}

// SetNillableSmallID sets the "small_id" field if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableSmallID(i *int) *VideoRecordCreate {
	if i != nil {
		vrc.SetSmallID(*i)
	}
	return vrc
}

// SetVideoTime sets the "video_time" field.
func (vrc *VideoRecordCreate) SetVideoTime(i int) *VideoRecordCreate {
	vrc.mutation.SetVideoTime(i)
	return vrc
}

// SetNillableVideoTime sets the "video_time" field if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableVideoTime(i *int) *VideoRecordCreate {
	if i != nil {
		vrc.SetVideoTime(*i)
	}
	return vrc
}

// SetViewAt sets the "view_at" field.
func (vrc *VideoRecordCreate) SetViewAt(t time.Time) *VideoRecordCreate {
	vrc.mutation.SetViewAt(t)
	return vrc
}

// SetNillableViewAt sets the "view_at" field if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableViewAt(t *time.Time) *VideoRecordCreate {
	if t != nil {
		vrc.SetViewAt(*t)
	}
	return vrc
}

// SetUser sets the "user" edge to the User entity.
func (vrc *VideoRecordCreate) SetUser(u *User) *VideoRecordCreate {
	return vrc.SetUserID(u.ID)
}

// SetSmallCourseID sets the "small_course" edge to the KcCourseSmallCategory entity by ID.
func (vrc *VideoRecordCreate) SetSmallCourseID(id int) *VideoRecordCreate {
	vrc.mutation.SetSmallCourseID(id)
	return vrc
}

// SetNillableSmallCourseID sets the "small_course" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (vrc *VideoRecordCreate) SetNillableSmallCourseID(id *int) *VideoRecordCreate {
	if id != nil {
		vrc = vrc.SetSmallCourseID(*id)
	}
	return vrc
}

// SetSmallCourse sets the "small_course" edge to the KcCourseSmallCategory entity.
func (vrc *VideoRecordCreate) SetSmallCourse(k *KcCourseSmallCategory) *VideoRecordCreate {
	return vrc.SetSmallCourseID(k.ID)
}

// Mutation returns the VideoRecordMutation object of the builder.
func (vrc *VideoRecordCreate) Mutation() *VideoRecordMutation {
	return vrc.mutation
}

// Save creates the VideoRecord in the database.
func (vrc *VideoRecordCreate) Save(ctx context.Context) (*VideoRecord, error) {
	var (
		err  error
		node *VideoRecord
	)
	vrc.defaults()
	if len(vrc.hooks) == 0 {
		if err = vrc.check(); err != nil {
			return nil, err
		}
		node, err = vrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VideoRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vrc.check(); err != nil {
				return nil, err
			}
			vrc.mutation = mutation
			node, err = vrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vrc.hooks) - 1; i >= 0; i-- {
			mut = vrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vrc *VideoRecordCreate) SaveX(ctx context.Context) *VideoRecord {
	v, err := vrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (vrc *VideoRecordCreate) defaults() {
	if _, ok := vrc.mutation.CreatedAt(); !ok {
		v := videorecord.DefaultCreatedAt()
		vrc.mutation.SetCreatedAt(v)
	}
	if _, ok := vrc.mutation.UpdatedAt(); !ok {
		v := videorecord.DefaultUpdatedAt()
		vrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vrc.mutation.VideoName(); !ok {
		v := videorecord.DefaultVideoName
		vrc.mutation.SetVideoName(v)
	}
	if _, ok := vrc.mutation.ViewAt(); !ok {
		v := videorecord.DefaultViewAt()
		vrc.mutation.SetViewAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vrc *VideoRecordCreate) check() error {
	if _, ok := vrc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := vrc.mutation.VideoName(); !ok {
		return &ValidationError{Name: "video_name", err: errors.New("ent: missing required field \"video_name\"")}
	}
	return nil
}

func (vrc *VideoRecordCreate) sqlSave(ctx context.Context) (*VideoRecord, error) {
	_node, _spec := vrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vrc *VideoRecordCreate) createSpec() (*VideoRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &VideoRecord{config: vrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: videorecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: videorecord.FieldID,
			},
		}
	)
	if value, ok := vrc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: videorecord.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := vrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := vrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := vrc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := vrc.mutation.VideoName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: videorecord.FieldVideoName,
		})
		_node.VideoName = value
	}
	if value, ok := vrc.mutation.ViewTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: videorecord.FieldViewTime,
		})
		_node.ViewTime = value
	}
	if value, ok := vrc.mutation.VideoTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: videorecord.FieldVideoTime,
		})
		_node.VideoTime = value
	}
	if value, ok := vrc.mutation.ViewAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: videorecord.FieldViewAt,
		})
		_node.ViewAt = &value
	}
	if nodes := vrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.UserTable,
			Columns: []string{videorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vrc.mutation.SmallCourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videorecord.SmallCourseTable,
			Columns: []string{videorecord.SmallCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SmallID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VideoRecordCreateBulk is the builder for creating many VideoRecord entities in bulk.
type VideoRecordCreateBulk struct {
	config
	builders []*VideoRecordCreate
}

// Save creates the VideoRecord entities in the database.
func (vrcb *VideoRecordCreateBulk) Save(ctx context.Context) ([]*VideoRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vrcb.builders))
	nodes := make([]*VideoRecord, len(vrcb.builders))
	mutators := make([]Mutator, len(vrcb.builders))
	for i := range vrcb.builders {
		func(i int, root context.Context) {
			builder := vrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vrcb *VideoRecordCreateBulk) SaveX(ctx context.Context) []*VideoRecord {
	v, err := vrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/adminoperationlog"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminOperationLogUpdate is the builder for updating AdminOperationLog entities.
type AdminOperationLogUpdate struct {
	config
	hooks    []Hook
	mutation *AdminOperationLogMutation
}

// Where adds a new predicate for the AdminOperationLogUpdate builder.
func (aolu *AdminOperationLogUpdate) Where(ps ...predicate.AdminOperationLog) *AdminOperationLogUpdate {
	aolu.mutation.predicates = append(aolu.mutation.predicates, ps...)
	return aolu
}

// SetUUID sets the "uuid" field.
func (aolu *AdminOperationLogUpdate) SetUUID(s string) *AdminOperationLogUpdate {
	aolu.mutation.SetUUID(s)
	return aolu
}

// SetUpdatedAt sets the "updated_at" field.
func (aolu *AdminOperationLogUpdate) SetUpdatedAt(t time.Time) *AdminOperationLogUpdate {
	aolu.mutation.SetUpdatedAt(t)
	return aolu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aolu *AdminOperationLogUpdate) ClearUpdatedAt() *AdminOperationLogUpdate {
	aolu.mutation.ClearUpdatedAt()
	return aolu
}

// SetDeletedAt sets the "deleted_at" field.
func (aolu *AdminOperationLogUpdate) SetDeletedAt(t time.Time) *AdminOperationLogUpdate {
	aolu.mutation.SetDeletedAt(t)
	return aolu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aolu *AdminOperationLogUpdate) SetNillableDeletedAt(t *time.Time) *AdminOperationLogUpdate {
	if t != nil {
		aolu.SetDeletedAt(*t)
	}
	return aolu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aolu *AdminOperationLogUpdate) ClearDeletedAt() *AdminOperationLogUpdate {
	aolu.mutation.ClearDeletedAt()
	return aolu
}

// SetIP sets the "ip" field.
func (aolu *AdminOperationLogUpdate) SetIP(s string) *AdminOperationLogUpdate {
	aolu.mutation.SetIP(s)
	return aolu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aolu *AdminOperationLogUpdate) SetNillableIP(s *string) *AdminOperationLogUpdate {
	if s != nil {
		aolu.SetIP(*s)
	}
	return aolu
}

// SetRecord sets the "record" field.
func (aolu *AdminOperationLogUpdate) SetRecord(s string) *AdminOperationLogUpdate {
	aolu.mutation.SetRecord(s)
	return aolu
}

// SetNillableRecord sets the "record" field if the given value is not nil.
func (aolu *AdminOperationLogUpdate) SetNillableRecord(s *string) *AdminOperationLogUpdate {
	if s != nil {
		aolu.SetRecord(*s)
	}
	return aolu
}

// SetRemark sets the "remark" field.
func (aolu *AdminOperationLogUpdate) SetRemark(s string) *AdminOperationLogUpdate {
	aolu.mutation.SetRemark(s)
	return aolu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aolu *AdminOperationLogUpdate) SetNillableRemark(s *string) *AdminOperationLogUpdate {
	if s != nil {
		aolu.SetRemark(*s)
	}
	return aolu
}

// SetAdminID sets the "admin_id" field.
func (aolu *AdminOperationLogUpdate) SetAdminID(i int) *AdminOperationLogUpdate {
	aolu.mutation.ResetAdminID()
	aolu.mutation.SetAdminID(i)
	return aolu
}

// SetNillableAdminID sets the "admin_id" field if the given value is not nil.
func (aolu *AdminOperationLogUpdate) SetNillableAdminID(i *int) *AdminOperationLogUpdate {
	if i != nil {
		aolu.SetAdminID(*i)
	}
	return aolu
}

// ClearAdminID clears the value of the "admin_id" field.
func (aolu *AdminOperationLogUpdate) ClearAdminID() *AdminOperationLogUpdate {
	aolu.mutation.ClearAdminID()
	return aolu
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (aolu *AdminOperationLogUpdate) SetAdmin(a *Admin) *AdminOperationLogUpdate {
	return aolu.SetAdminID(a.ID)
}

// Mutation returns the AdminOperationLogMutation object of the builder.
func (aolu *AdminOperationLogUpdate) Mutation() *AdminOperationLogMutation {
	return aolu.mutation
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (aolu *AdminOperationLogUpdate) ClearAdmin() *AdminOperationLogUpdate {
	aolu.mutation.ClearAdmin()
	return aolu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aolu *AdminOperationLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aolu.defaults()
	if len(aolu.hooks) == 0 {
		affected, err = aolu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminOperationLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aolu.mutation = mutation
			affected, err = aolu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aolu.hooks) - 1; i >= 0; i-- {
			mut = aolu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aolu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aolu *AdminOperationLogUpdate) SaveX(ctx context.Context) int {
	affected, err := aolu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aolu *AdminOperationLogUpdate) Exec(ctx context.Context) error {
	_, err := aolu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aolu *AdminOperationLogUpdate) ExecX(ctx context.Context) {
	if err := aolu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aolu *AdminOperationLogUpdate) defaults() {
	if _, ok := aolu.mutation.UpdatedAt(); !ok && !aolu.mutation.UpdatedAtCleared() {
		v := adminoperationlog.UpdateDefaultUpdatedAt()
		aolu.mutation.SetUpdatedAt(v)
	}
}

func (aolu *AdminOperationLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminoperationlog.Table,
			Columns: adminoperationlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminoperationlog.FieldID,
			},
		},
	}
	if ps := aolu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aolu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminoperationlog.FieldUUID,
		})
	}
	if aolu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminoperationlog.FieldCreatedAt,
		})
	}
	if value, ok := aolu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminoperationlog.FieldUpdatedAt,
		})
	}
	if aolu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminoperationlog.FieldUpdatedAt,
		})
	}
	if value, ok := aolu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminoperationlog.FieldDeletedAt,
		})
	}
	if aolu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminoperationlog.FieldDeletedAt,
		})
	}
	if value, ok := aolu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminoperationlog.FieldIP,
		})
	}
	if value, ok := aolu.mutation.Record(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminoperationlog.FieldRecord,
		})
	}
	if value, ok := aolu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminoperationlog.FieldRemark,
		})
	}
	if aolu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminoperationlog.AdminTable,
			Columns: []string{adminoperationlog.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aolu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminoperationlog.AdminTable,
			Columns: []string{adminoperationlog.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aolu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminoperationlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AdminOperationLogUpdateOne is the builder for updating a single AdminOperationLog entity.
type AdminOperationLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminOperationLogMutation
}

// SetUUID sets the "uuid" field.
func (aoluo *AdminOperationLogUpdateOne) SetUUID(s string) *AdminOperationLogUpdateOne {
	aoluo.mutation.SetUUID(s)
	return aoluo
}

// SetUpdatedAt sets the "updated_at" field.
func (aoluo *AdminOperationLogUpdateOne) SetUpdatedAt(t time.Time) *AdminOperationLogUpdateOne {
	aoluo.mutation.SetUpdatedAt(t)
	return aoluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aoluo *AdminOperationLogUpdateOne) ClearUpdatedAt() *AdminOperationLogUpdateOne {
	aoluo.mutation.ClearUpdatedAt()
	return aoluo
}

// SetDeletedAt sets the "deleted_at" field.
func (aoluo *AdminOperationLogUpdateOne) SetDeletedAt(t time.Time) *AdminOperationLogUpdateOne {
	aoluo.mutation.SetDeletedAt(t)
	return aoluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aoluo *AdminOperationLogUpdateOne) SetNillableDeletedAt(t *time.Time) *AdminOperationLogUpdateOne {
	if t != nil {
		aoluo.SetDeletedAt(*t)
	}
	return aoluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aoluo *AdminOperationLogUpdateOne) ClearDeletedAt() *AdminOperationLogUpdateOne {
	aoluo.mutation.ClearDeletedAt()
	return aoluo
}

// SetIP sets the "ip" field.
func (aoluo *AdminOperationLogUpdateOne) SetIP(s string) *AdminOperationLogUpdateOne {
	aoluo.mutation.SetIP(s)
	return aoluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aoluo *AdminOperationLogUpdateOne) SetNillableIP(s *string) *AdminOperationLogUpdateOne {
	if s != nil {
		aoluo.SetIP(*s)
	}
	return aoluo
}

// SetRecord sets the "record" field.
func (aoluo *AdminOperationLogUpdateOne) SetRecord(s string) *AdminOperationLogUpdateOne {
	aoluo.mutation.SetRecord(s)
	return aoluo
}

// SetNillableRecord sets the "record" field if the given value is not nil.
func (aoluo *AdminOperationLogUpdateOne) SetNillableRecord(s *string) *AdminOperationLogUpdateOne {
	if s != nil {
		aoluo.SetRecord(*s)
	}
	return aoluo
}

// SetRemark sets the "remark" field.
func (aoluo *AdminOperationLogUpdateOne) SetRemark(s string) *AdminOperationLogUpdateOne {
	aoluo.mutation.SetRemark(s)
	return aoluo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aoluo *AdminOperationLogUpdateOne) SetNillableRemark(s *string) *AdminOperationLogUpdateOne {
	if s != nil {
		aoluo.SetRemark(*s)
	}
	return aoluo
}

// SetAdminID sets the "admin_id" field.
func (aoluo *AdminOperationLogUpdateOne) SetAdminID(i int) *AdminOperationLogUpdateOne {
	aoluo.mutation.ResetAdminID()
	aoluo.mutation.SetAdminID(i)
	return aoluo
}

// SetNillableAdminID sets the "admin_id" field if the given value is not nil.
func (aoluo *AdminOperationLogUpdateOne) SetNillableAdminID(i *int) *AdminOperationLogUpdateOne {
	if i != nil {
		aoluo.SetAdminID(*i)
	}
	return aoluo
}

// ClearAdminID clears the value of the "admin_id" field.
func (aoluo *AdminOperationLogUpdateOne) ClearAdminID() *AdminOperationLogUpdateOne {
	aoluo.mutation.ClearAdminID()
	return aoluo
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (aoluo *AdminOperationLogUpdateOne) SetAdmin(a *Admin) *AdminOperationLogUpdateOne {
	return aoluo.SetAdminID(a.ID)
}

// Mutation returns the AdminOperationLogMutation object of the builder.
func (aoluo *AdminOperationLogUpdateOne) Mutation() *AdminOperationLogMutation {
	return aoluo.mutation
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (aoluo *AdminOperationLogUpdateOne) ClearAdmin() *AdminOperationLogUpdateOne {
	aoluo.mutation.ClearAdmin()
	return aoluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aoluo *AdminOperationLogUpdateOne) Select(field string, fields ...string) *AdminOperationLogUpdateOne {
	aoluo.fields = append([]string{field}, fields...)
	return aoluo
}

// Save executes the query and returns the updated AdminOperationLog entity.
func (aoluo *AdminOperationLogUpdateOne) Save(ctx context.Context) (*AdminOperationLog, error) {
	var (
		err  error
		node *AdminOperationLog
	)
	aoluo.defaults()
	if len(aoluo.hooks) == 0 {
		node, err = aoluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminOperationLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aoluo.mutation = mutation
			node, err = aoluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aoluo.hooks) - 1; i >= 0; i-- {
			mut = aoluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aoluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aoluo *AdminOperationLogUpdateOne) SaveX(ctx context.Context) *AdminOperationLog {
	node, err := aoluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aoluo *AdminOperationLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aoluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aoluo *AdminOperationLogUpdateOne) ExecX(ctx context.Context) {
	if err := aoluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aoluo *AdminOperationLogUpdateOne) defaults() {
	if _, ok := aoluo.mutation.UpdatedAt(); !ok && !aoluo.mutation.UpdatedAtCleared() {
		v := adminoperationlog.UpdateDefaultUpdatedAt()
		aoluo.mutation.SetUpdatedAt(v)
	}
}

func (aoluo *AdminOperationLogUpdateOne) sqlSave(ctx context.Context) (_node *AdminOperationLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminoperationlog.Table,
			Columns: adminoperationlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminoperationlog.FieldID,
			},
		},
	}
	id, ok := aoluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AdminOperationLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aoluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminoperationlog.FieldID)
		for _, f := range fields {
			if !adminoperationlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminoperationlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aoluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aoluo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminoperationlog.FieldUUID,
		})
	}
	if aoluo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminoperationlog.FieldCreatedAt,
		})
	}
	if value, ok := aoluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminoperationlog.FieldUpdatedAt,
		})
	}
	if aoluo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminoperationlog.FieldUpdatedAt,
		})
	}
	if value, ok := aoluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminoperationlog.FieldDeletedAt,
		})
	}
	if aoluo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminoperationlog.FieldDeletedAt,
		})
	}
	if value, ok := aoluo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminoperationlog.FieldIP,
		})
	}
	if value, ok := aoluo.mutation.Record(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminoperationlog.FieldRecord,
		})
	}
	if value, ok := aoluo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminoperationlog.FieldRemark,
		})
	}
	if aoluo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminoperationlog.AdminTable,
			Columns: []string{adminoperationlog.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aoluo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminoperationlog.AdminTable,
			Columns: []string{adminoperationlog.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminOperationLog{config: aoluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aoluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminoperationlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/city"
	"tkserver/internal/store/ent/itemcategory"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kcclassteacher"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kcuserclass"
	"tkserver/internal/store/ent/major"
	"tkserver/internal/store/ent/message"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/teacher"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcClassUpdate is the builder for updating KcClass entities.
type KcClassUpdate struct {
	config
	hooks    []Hook
	mutation *KcClassMutation
}

// Where adds a new predicate for the KcClassUpdate builder.
func (kcu *KcClassUpdate) Where(ps ...predicate.KcClass) *KcClassUpdate {
	kcu.mutation.predicates = append(kcu.mutation.predicates, ps...)
	return kcu
}

// SetUUID sets the "uuid" field.
func (kcu *KcClassUpdate) SetUUID(s string) *KcClassUpdate {
	kcu.mutation.SetUUID(s)
	return kcu
}

// SetUpdatedAt sets the "updated_at" field.
func (kcu *KcClassUpdate) SetUpdatedAt(t time.Time) *KcClassUpdate {
	kcu.mutation.SetUpdatedAt(t)
	return kcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kcu *KcClassUpdate) ClearUpdatedAt() *KcClassUpdate {
	kcu.mutation.ClearUpdatedAt()
	return kcu
}

// SetDeletedAt sets the "deleted_at" field.
func (kcu *KcClassUpdate) SetDeletedAt(t time.Time) *KcClassUpdate {
	kcu.mutation.SetDeletedAt(t)
	return kcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableDeletedAt(t *time.Time) *KcClassUpdate {
	if t != nil {
		kcu.SetDeletedAt(*t)
	}
	return kcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (kcu *KcClassUpdate) ClearDeletedAt() *KcClassUpdate {
	kcu.mutation.ClearDeletedAt()
	return kcu
}

// SetClassTitle sets the "class_title" field.
func (kcu *KcClassUpdate) SetClassTitle(s string) *KcClassUpdate {
	kcu.mutation.SetClassTitle(s)
	return kcu
}

// SetNillableClassTitle sets the "class_title" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableClassTitle(s *string) *KcClassUpdate {
	if s != nil {
		kcu.SetClassTitle(*s)
	}
	return kcu
}

// SetClassCode sets the "class_code" field.
func (kcu *KcClassUpdate) SetClassCode(s string) *KcClassUpdate {
	kcu.mutation.SetClassCode(s)
	return kcu
}

// SetNillableClassCode sets the "class_code" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableClassCode(s *string) *KcClassUpdate {
	if s != nil {
		kcu.SetClassCode(*s)
	}
	return kcu
}

// SetClassDesc sets the "class_desc" field.
func (kcu *KcClassUpdate) SetClassDesc(s string) *KcClassUpdate {
	kcu.mutation.SetClassDesc(s)
	return kcu
}

// SetNillableClassDesc sets the "class_desc" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableClassDesc(s *string) *KcClassUpdate {
	if s != nil {
		kcu.SetClassDesc(*s)
	}
	return kcu
}

// SetIsDisplay sets the "is_display" field.
func (kcu *KcClassUpdate) SetIsDisplay(u uint8) *KcClassUpdate {
	kcu.mutation.ResetIsDisplay()
	kcu.mutation.SetIsDisplay(u)
	return kcu
}

// SetNillableIsDisplay sets the "is_display" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableIsDisplay(u *uint8) *KcClassUpdate {
	if u != nil {
		kcu.SetIsDisplay(*u)
	}
	return kcu
}

// AddIsDisplay adds u to the "is_display" field.
func (kcu *KcClassUpdate) AddIsDisplay(u uint8) *KcClassUpdate {
	kcu.mutation.AddIsDisplay(u)
	return kcu
}

// SetIsBuy sets the "is_buy" field.
func (kcu *KcClassUpdate) SetIsBuy(u uint8) *KcClassUpdate {
	kcu.mutation.ResetIsBuy()
	kcu.mutation.SetIsBuy(u)
	return kcu
}

// SetNillableIsBuy sets the "is_buy" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableIsBuy(u *uint8) *KcClassUpdate {
	if u != nil {
		kcu.SetIsBuy(*u)
	}
	return kcu
}

// AddIsBuy adds u to the "is_buy" field.
func (kcu *KcClassUpdate) AddIsBuy(u uint8) *KcClassUpdate {
	kcu.mutation.AddIsBuy(u)
	return kcu
}

// SetClassPeriodType sets the "class_period_type" field.
func (kcu *KcClassUpdate) SetClassPeriodType(u uint8) *KcClassUpdate {
	kcu.mutation.ResetClassPeriodType()
	kcu.mutation.SetClassPeriodType(u)
	return kcu
}

// SetNillableClassPeriodType sets the "class_period_type" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableClassPeriodType(u *uint8) *KcClassUpdate {
	if u != nil {
		kcu.SetClassPeriodType(*u)
	}
	return kcu
}

// AddClassPeriodType adds u to the "class_period_type" field.
func (kcu *KcClassUpdate) AddClassPeriodType(u uint8) *KcClassUpdate {
	kcu.mutation.AddClassPeriodType(u)
	return kcu
}

// SetClassStartDate sets the "class_start_date" field.
func (kcu *KcClassUpdate) SetClassStartDate(t time.Time) *KcClassUpdate {
	kcu.mutation.SetClassStartDate(t)
	return kcu
}

// SetNillableClassStartDate sets the "class_start_date" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableClassStartDate(t *time.Time) *KcClassUpdate {
	if t != nil {
		kcu.SetClassStartDate(*t)
	}
	return kcu
}

// ClearClassStartDate clears the value of the "class_start_date" field.
func (kcu *KcClassUpdate) ClearClassStartDate() *KcClassUpdate {
	kcu.mutation.ClearClassStartDate()
	return kcu
}

// SetClassEndDate sets the "class_end_date" field.
func (kcu *KcClassUpdate) SetClassEndDate(t time.Time) *KcClassUpdate {
	kcu.mutation.SetClassEndDate(t)
	return kcu
}

// SetNillableClassEndDate sets the "class_end_date" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableClassEndDate(t *time.Time) *KcClassUpdate {
	if t != nil {
		kcu.SetClassEndDate(*t)
	}
	return kcu
}

// ClearClassEndDate clears the value of the "class_end_date" field.
func (kcu *KcClassUpdate) ClearClassEndDate() *KcClassUpdate {
	kcu.mutation.ClearClassEndDate()
	return kcu
}

// SetClosingDate sets the "closing_date" field.
func (kcu *KcClassUpdate) SetClosingDate(t time.Time) *KcClassUpdate {
	kcu.mutation.SetClosingDate(t)
	return kcu
}

// SetNillableClosingDate sets the "closing_date" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableClosingDate(t *time.Time) *KcClassUpdate {
	if t != nil {
		kcu.SetClosingDate(*t)
	}
	return kcu
}

// ClearClosingDate clears the value of the "closing_date" field.
func (kcu *KcClassUpdate) ClearClosingDate() *KcClassUpdate {
	kcu.mutation.ClearClosingDate()
	return kcu
}

// SetDaysValidity sets the "days_validity" field.
func (kcu *KcClassUpdate) SetDaysValidity(i int) *KcClassUpdate {
	kcu.mutation.ResetDaysValidity()
	kcu.mutation.SetDaysValidity(i)
	return kcu
}

// SetNillableDaysValidity sets the "days_validity" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableDaysValidity(i *int) *KcClassUpdate {
	if i != nil {
		kcu.SetDaysValidity(*i)
	}
	return kcu
}

// AddDaysValidity adds i to the "days_validity" field.
func (kcu *KcClassUpdate) AddDaysValidity(i int) *KcClassUpdate {
	kcu.mutation.AddDaysValidity(i)
	return kcu
}

// SetClassHeadMasterID sets the "class_head_master_id" field.
func (kcu *KcClassUpdate) SetClassHeadMasterID(i int) *KcClassUpdate {
	kcu.mutation.ResetClassHeadMasterID()
	kcu.mutation.SetClassHeadMasterID(i)
	return kcu
}

// SetNillableClassHeadMasterID sets the "class_head_master_id" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableClassHeadMasterID(i *int) *KcClassUpdate {
	if i != nil {
		kcu.SetClassHeadMasterID(*i)
	}
	return kcu
}

// ClearClassHeadMasterID clears the value of the "class_head_master_id" field.
func (kcu *KcClassUpdate) ClearClassHeadMasterID() *KcClassUpdate {
	kcu.mutation.ClearClassHeadMasterID()
	return kcu
}

// SetClassCoverImgID sets the "class_cover_img_id" field.
func (kcu *KcClassUpdate) SetClassCoverImgID(i int) *KcClassUpdate {
	kcu.mutation.ResetClassCoverImgID()
	kcu.mutation.SetClassCoverImgID(i)
	return kcu
}

// SetNillableClassCoverImgID sets the "class_cover_img_id" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableClassCoverImgID(i *int) *KcClassUpdate {
	if i != nil {
		kcu.SetClassCoverImgID(*i)
	}
	return kcu
}

// ClearClassCoverImgID clears the value of the "class_cover_img_id" field.
func (kcu *KcClassUpdate) ClearClassCoverImgID() *KcClassUpdate {
	kcu.mutation.ClearClassCoverImgID()
	return kcu
}

// SetStatus sets the "status" field.
func (kcu *KcClassUpdate) SetStatus(u uint8) *KcClassUpdate {
	kcu.mutation.ResetStatus()
	kcu.mutation.SetStatus(u)
	return kcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableStatus(u *uint8) *KcClassUpdate {
	if u != nil {
		kcu.SetStatus(*u)
	}
	return kcu
}

// AddStatus adds u to the "status" field.
func (kcu *KcClassUpdate) AddStatus(u uint8) *KcClassUpdate {
	kcu.mutation.AddStatus(u)
	return kcu
}

// SetPrice sets the "price" field.
func (kcu *KcClassUpdate) SetPrice(f float64) *KcClassUpdate {
	kcu.mutation.ResetPrice()
	kcu.mutation.SetPrice(f)
	return kcu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillablePrice(f *float64) *KcClassUpdate {
	if f != nil {
		kcu.SetPrice(*f)
	}
	return kcu
}

// AddPrice adds f to the "price" field.
func (kcu *KcClassUpdate) AddPrice(f float64) *KcClassUpdate {
	kcu.mutation.AddPrice(f)
	return kcu
}

// SetStudentCount sets the "student_count" field.
func (kcu *KcClassUpdate) SetStudentCount(i int) *KcClassUpdate {
	kcu.mutation.ResetStudentCount()
	kcu.mutation.SetStudentCount(i)
	return kcu
}

// SetNillableStudentCount sets the "student_count" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableStudentCount(i *int) *KcClassUpdate {
	if i != nil {
		kcu.SetStudentCount(*i)
	}
	return kcu
}

// AddStudentCount adds i to the "student_count" field.
func (kcu *KcClassUpdate) AddStudentCount(i int) *KcClassUpdate {
	kcu.mutation.AddStudentCount(i)
	return kcu
}

// SetCourseCount sets the "course_count" field.
func (kcu *KcClassUpdate) SetCourseCount(i int) *KcClassUpdate {
	kcu.mutation.ResetCourseCount()
	kcu.mutation.SetCourseCount(i)
	return kcu
}

// SetNillableCourseCount sets the "course_count" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableCourseCount(i *int) *KcClassUpdate {
	if i != nil {
		kcu.SetCourseCount(*i)
	}
	return kcu
}

// AddCourseCount adds i to the "course_count" field.
func (kcu *KcClassUpdate) AddCourseCount(i int) *KcClassUpdate {
	kcu.mutation.AddCourseCount(i)
	return kcu
}

// SetCateID sets the "cate_id" field.
func (kcu *KcClassUpdate) SetCateID(i int) *KcClassUpdate {
	kcu.mutation.ResetCateID()
	kcu.mutation.SetCateID(i)
	return kcu
}

// SetNillableCateID sets the "cate_id" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableCateID(i *int) *KcClassUpdate {
	if i != nil {
		kcu.SetCateID(*i)
	}
	return kcu
}

// ClearCateID clears the value of the "cate_id" field.
func (kcu *KcClassUpdate) ClearCateID() *KcClassUpdate {
	kcu.mutation.ClearCateID()
	return kcu
}

// SetCityID sets the "city_id" field.
func (kcu *KcClassUpdate) SetCityID(i int) *KcClassUpdate {
	kcu.mutation.ResetCityID()
	kcu.mutation.SetCityID(i)
	return kcu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableCityID(i *int) *KcClassUpdate {
	if i != nil {
		kcu.SetCityID(*i)
	}
	return kcu
}

// ClearCityID clears the value of the "city_id" field.
func (kcu *KcClassUpdate) ClearCityID() *KcClassUpdate {
	kcu.mutation.ClearCityID()
	return kcu
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (kcu *KcClassUpdate) SetCreatedAdminID(i int) *KcClassUpdate {
	kcu.mutation.ResetCreatedAdminID()
	kcu.mutation.SetCreatedAdminID(i)
	return kcu
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableCreatedAdminID(i *int) *KcClassUpdate {
	if i != nil {
		kcu.SetCreatedAdminID(*i)
	}
	return kcu
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (kcu *KcClassUpdate) ClearCreatedAdminID() *KcClassUpdate {
	kcu.mutation.ClearCreatedAdminID()
	return kcu
}

// AddMajorIDs adds the "majors" edge to the Major entity by IDs.
func (kcu *KcClassUpdate) AddMajorIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.AddMajorIDs(ids...)
	return kcu
}

// AddMajors adds the "majors" edges to the Major entity.
func (kcu *KcClassUpdate) AddMajors(m ...*Major) *KcClassUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return kcu.AddMajorIDs(ids...)
}

// SetItemID sets the "item" edge to the ItemCategory entity by ID.
func (kcu *KcClassUpdate) SetItemID(id int) *KcClassUpdate {
	kcu.mutation.SetItemID(id)
	return kcu
}

// SetNillableItemID sets the "item" edge to the ItemCategory entity by ID if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableItemID(id *int) *KcClassUpdate {
	if id != nil {
		kcu = kcu.SetItemID(*id)
	}
	return kcu
}

// SetItem sets the "item" edge to the ItemCategory entity.
func (kcu *KcClassUpdate) SetItem(i *ItemCategory) *KcClassUpdate {
	return kcu.SetItemID(i.ID)
}

// SetCity sets the "city" edge to the City entity.
func (kcu *KcClassUpdate) SetCity(c *City) *KcClassUpdate {
	return kcu.SetCityID(c.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (kcu *KcClassUpdate) SetAdminID(id int) *KcClassUpdate {
	kcu.mutation.SetAdminID(id)
	return kcu
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableAdminID(id *int) *KcClassUpdate {
	if id != nil {
		kcu = kcu.SetAdminID(*id)
	}
	return kcu
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (kcu *KcClassUpdate) SetAdmin(a *Admin) *KcClassUpdate {
	return kcu.SetAdminID(a.ID)
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (kcu *KcClassUpdate) SetAttachmentID(id int) *KcClassUpdate {
	kcu.mutation.SetAttachmentID(id)
	return kcu
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableAttachmentID(id *int) *KcClassUpdate {
	if id != nil {
		kcu = kcu.SetAttachmentID(*id)
	}
	return kcu
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (kcu *KcClassUpdate) SetAttachment(a *Attachment) *KcClassUpdate {
	return kcu.SetAttachmentID(a.ID)
}

// SetMasterTeachersID sets the "master_teachers" edge to the Teacher entity by ID.
func (kcu *KcClassUpdate) SetMasterTeachersID(id int) *KcClassUpdate {
	kcu.mutation.SetMasterTeachersID(id)
	return kcu
}

// SetNillableMasterTeachersID sets the "master_teachers" edge to the Teacher entity by ID if the given value is not nil.
func (kcu *KcClassUpdate) SetNillableMasterTeachersID(id *int) *KcClassUpdate {
	if id != nil {
		kcu = kcu.SetMasterTeachersID(*id)
	}
	return kcu
}

// SetMasterTeachers sets the "master_teachers" edge to the Teacher entity.
func (kcu *KcClassUpdate) SetMasterTeachers(t *Teacher) *KcClassUpdate {
	return kcu.SetMasterTeachersID(t.ID)
}

// AddClassTeacherIDs adds the "class_teachers" edge to the KcClassTeacher entity by IDs.
func (kcu *KcClassUpdate) AddClassTeacherIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.AddClassTeacherIDs(ids...)
	return kcu
}

// AddClassTeachers adds the "class_teachers" edges to the KcClassTeacher entity.
func (kcu *KcClassUpdate) AddClassTeachers(k ...*KcClassTeacher) *KcClassUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.AddClassTeacherIDs(ids...)
}

// AddKcClassCourseIDs adds the "kc_class_courses" edge to the KcCourse entity by IDs.
func (kcu *KcClassUpdate) AddKcClassCourseIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.AddKcClassCourseIDs(ids...)
	return kcu
}

// AddKcClassCourses adds the "kc_class_courses" edges to the KcCourse entity.
func (kcu *KcClassUpdate) AddKcClassCourses(k ...*KcCourse) *KcClassUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.AddKcClassCourseIDs(ids...)
}

// AddKcUserClassIDs adds the "kc_user_classes" edge to the KcUserClass entity by IDs.
func (kcu *KcClassUpdate) AddKcUserClassIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.AddKcUserClassIDs(ids...)
	return kcu
}

// AddKcUserClasses adds the "kc_user_classes" edges to the KcUserClass entity.
func (kcu *KcClassUpdate) AddKcUserClasses(k ...*KcUserClass) *KcClassUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.AddKcUserClassIDs(ids...)
}

// AddMessageClassIDs adds the "message_classes" edge to the Message entity by IDs.
func (kcu *KcClassUpdate) AddMessageClassIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.AddMessageClassIDs(ids...)
	return kcu
}

// AddMessageClasses adds the "message_classes" edges to the Message entity.
func (kcu *KcClassUpdate) AddMessageClasses(m ...*Message) *KcClassUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return kcu.AddMessageClassIDs(ids...)
}

// Mutation returns the KcClassMutation object of the builder.
func (kcu *KcClassUpdate) Mutation() *KcClassMutation {
	return kcu.mutation
}

// ClearMajors clears all "majors" edges to the Major entity.
func (kcu *KcClassUpdate) ClearMajors() *KcClassUpdate {
	kcu.mutation.ClearMajors()
	return kcu
}

// RemoveMajorIDs removes the "majors" edge to Major entities by IDs.
func (kcu *KcClassUpdate) RemoveMajorIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.RemoveMajorIDs(ids...)
	return kcu
}

// RemoveMajors removes "majors" edges to Major entities.
func (kcu *KcClassUpdate) RemoveMajors(m ...*Major) *KcClassUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return kcu.RemoveMajorIDs(ids...)
}

// ClearItem clears the "item" edge to the ItemCategory entity.
func (kcu *KcClassUpdate) ClearItem() *KcClassUpdate {
	kcu.mutation.ClearItem()
	return kcu
}

// ClearCity clears the "city" edge to the City entity.
func (kcu *KcClassUpdate) ClearCity() *KcClassUpdate {
	kcu.mutation.ClearCity()
	return kcu
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (kcu *KcClassUpdate) ClearAdmin() *KcClassUpdate {
	kcu.mutation.ClearAdmin()
	return kcu
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (kcu *KcClassUpdate) ClearAttachment() *KcClassUpdate {
	kcu.mutation.ClearAttachment()
	return kcu
}

// ClearMasterTeachers clears the "master_teachers" edge to the Teacher entity.
func (kcu *KcClassUpdate) ClearMasterTeachers() *KcClassUpdate {
	kcu.mutation.ClearMasterTeachers()
	return kcu
}

// ClearClassTeachers clears all "class_teachers" edges to the KcClassTeacher entity.
func (kcu *KcClassUpdate) ClearClassTeachers() *KcClassUpdate {
	kcu.mutation.ClearClassTeachers()
	return kcu
}

// RemoveClassTeacherIDs removes the "class_teachers" edge to KcClassTeacher entities by IDs.
func (kcu *KcClassUpdate) RemoveClassTeacherIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.RemoveClassTeacherIDs(ids...)
	return kcu
}

// RemoveClassTeachers removes "class_teachers" edges to KcClassTeacher entities.
func (kcu *KcClassUpdate) RemoveClassTeachers(k ...*KcClassTeacher) *KcClassUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.RemoveClassTeacherIDs(ids...)
}

// ClearKcClassCourses clears all "kc_class_courses" edges to the KcCourse entity.
func (kcu *KcClassUpdate) ClearKcClassCourses() *KcClassUpdate {
	kcu.mutation.ClearKcClassCourses()
	return kcu
}

// RemoveKcClassCourseIDs removes the "kc_class_courses" edge to KcCourse entities by IDs.
func (kcu *KcClassUpdate) RemoveKcClassCourseIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.RemoveKcClassCourseIDs(ids...)
	return kcu
}

// RemoveKcClassCourses removes "kc_class_courses" edges to KcCourse entities.
func (kcu *KcClassUpdate) RemoveKcClassCourses(k ...*KcCourse) *KcClassUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.RemoveKcClassCourseIDs(ids...)
}

// ClearKcUserClasses clears all "kc_user_classes" edges to the KcUserClass entity.
func (kcu *KcClassUpdate) ClearKcUserClasses() *KcClassUpdate {
	kcu.mutation.ClearKcUserClasses()
	return kcu
}

// RemoveKcUserClassIDs removes the "kc_user_classes" edge to KcUserClass entities by IDs.
func (kcu *KcClassUpdate) RemoveKcUserClassIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.RemoveKcUserClassIDs(ids...)
	return kcu
}

// RemoveKcUserClasses removes "kc_user_classes" edges to KcUserClass entities.
func (kcu *KcClassUpdate) RemoveKcUserClasses(k ...*KcUserClass) *KcClassUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.RemoveKcUserClassIDs(ids...)
}

// ClearMessageClasses clears all "message_classes" edges to the Message entity.
func (kcu *KcClassUpdate) ClearMessageClasses() *KcClassUpdate {
	kcu.mutation.ClearMessageClasses()
	return kcu
}

// RemoveMessageClassIDs removes the "message_classes" edge to Message entities by IDs.
func (kcu *KcClassUpdate) RemoveMessageClassIDs(ids ...int) *KcClassUpdate {
	kcu.mutation.RemoveMessageClassIDs(ids...)
	return kcu
}

// RemoveMessageClasses removes "message_classes" edges to Message entities.
func (kcu *KcClassUpdate) RemoveMessageClasses(m ...*Message) *KcClassUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return kcu.RemoveMessageClassIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcu *KcClassUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kcu.defaults()
	if len(kcu.hooks) == 0 {
		affected, err = kcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcu.mutation = mutation
			affected, err = kcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcu.hooks) - 1; i >= 0; i-- {
			mut = kcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcu *KcClassUpdate) SaveX(ctx context.Context) int {
	affected, err := kcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcu *KcClassUpdate) Exec(ctx context.Context) error {
	_, err := kcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcu *KcClassUpdate) ExecX(ctx context.Context) {
	if err := kcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcu *KcClassUpdate) defaults() {
	if _, ok := kcu.mutation.UpdatedAt(); !ok && !kcu.mutation.UpdatedAtCleared() {
		v := kcclass.UpdateDefaultUpdatedAt()
		kcu.mutation.SetUpdatedAt(v)
	}
}

func (kcu *KcClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kcclass.Table,
			Columns: kcclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcclass.FieldID,
			},
		},
	}
	if ps := kcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcclass.FieldUUID,
		})
	}
	if kcu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldCreatedAt,
		})
	}
	if value, ok := kcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldUpdatedAt,
		})
	}
	if kcu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldUpdatedAt,
		})
	}
	if value, ok := kcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldDeletedAt,
		})
	}
	if kcu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldDeletedAt,
		})
	}
	if value, ok := kcu.mutation.ClassTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcclass.FieldClassTitle,
		})
	}
	if value, ok := kcu.mutation.ClassCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcclass.FieldClassCode,
		})
	}
	if value, ok := kcu.mutation.ClassDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcclass.FieldClassDesc,
		})
	}
	if value, ok := kcu.mutation.IsDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldIsDisplay,
		})
	}
	if value, ok := kcu.mutation.AddedIsDisplay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldIsDisplay,
		})
	}
	if value, ok := kcu.mutation.IsBuy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldIsBuy,
		})
	}
	if value, ok := kcu.mutation.AddedIsBuy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldIsBuy,
		})
	}
	if value, ok := kcu.mutation.ClassPeriodType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldClassPeriodType,
		})
	}
	if value, ok := kcu.mutation.AddedClassPeriodType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldClassPeriodType,
		})
	}
	if value, ok := kcu.mutation.ClassStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldClassStartDate,
		})
	}
	if kcu.mutation.ClassStartDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldClassStartDate,
		})
	}
	if value, ok := kcu.mutation.ClassEndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldClassEndDate,
		})
	}
	if kcu.mutation.ClassEndDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldClassEndDate,
		})
	}
	if value, ok := kcu.mutation.ClosingDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldClosingDate,
		})
	}
	if kcu.mutation.ClosingDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldClosingDate,
		})
	}
	if value, ok := kcu.mutation.DaysValidity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldDaysValidity,
		})
	}
	if value, ok := kcu.mutation.AddedDaysValidity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldDaysValidity,
		})
	}
	if value, ok := kcu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldStatus,
		})
	}
	if value, ok := kcu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldStatus,
		})
	}
	if value, ok := kcu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kcclass.FieldPrice,
		})
	}
	if value, ok := kcu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kcclass.FieldPrice,
		})
	}
	if value, ok := kcu.mutation.StudentCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldStudentCount,
		})
	}
	if value, ok := kcu.mutation.AddedStudentCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldStudentCount,
		})
	}
	if value, ok := kcu.mutation.CourseCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldCourseCount,
		})
	}
	if value, ok := kcu.mutation.AddedCourseCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldCourseCount,
		})
	}
	if kcu.mutation.MajorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   kcclass.MajorsTable,
			Columns: kcclass.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.RemovedMajorsIDs(); len(nodes) > 0 && !kcu.mutation.MajorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   kcclass.MajorsTable,
			Columns: kcclass.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.MajorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   kcclass.MajorsTable,
			Columns: kcclass.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kcclass.ItemTable,
			Columns: []string{kcclass.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kcclass.ItemTable,
			Columns: []string{kcclass.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.CityTable,
			Columns: []string{kcclass.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.CityTable,
			Columns: []string{kcclass.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.AdminTable,
			Columns: []string{kcclass.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.AdminTable,
			Columns: []string{kcclass.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.AttachmentTable,
			Columns: []string{kcclass.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.AttachmentTable,
			Columns: []string{kcclass.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.MasterTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.MasterTeachersTable,
			Columns: []string{kcclass.MasterTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.MasterTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.MasterTeachersTable,
			Columns: []string{kcclass.MasterTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.ClassTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.ClassTeachersTable,
			Columns: []string{kcclass.ClassTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.RemovedClassTeachersIDs(); len(nodes) > 0 && !kcu.mutation.ClassTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.ClassTeachersTable,
			Columns: []string{kcclass.ClassTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.ClassTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.ClassTeachersTable,
			Columns: []string{kcclass.ClassTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.KcClassCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   kcclass.KcClassCoursesTable,
			Columns: kcclass.KcClassCoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.RemovedKcClassCoursesIDs(); len(nodes) > 0 && !kcu.mutation.KcClassCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   kcclass.KcClassCoursesTable,
			Columns: kcclass.KcClassCoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.KcClassCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   kcclass.KcClassCoursesTable,
			Columns: kcclass.KcClassCoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.KcUserClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.KcUserClassesTable,
			Columns: []string{kcclass.KcUserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.RemovedKcUserClassesIDs(); len(nodes) > 0 && !kcu.mutation.KcUserClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.KcUserClassesTable,
			Columns: []string{kcclass.KcUserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.KcUserClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.KcUserClassesTable,
			Columns: []string{kcclass.KcUserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.MessageClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.MessageClassesTable,
			Columns: []string{kcclass.MessageClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.RemovedMessageClassesIDs(); len(nodes) > 0 && !kcu.mutation.MessageClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.MessageClassesTable,
			Columns: []string{kcclass.MessageClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.MessageClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.MessageClassesTable,
			Columns: []string{kcclass.MessageClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kcclass.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KcClassUpdateOne is the builder for updating a single KcClass entity.
type KcClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KcClassMutation
}

// SetUUID sets the "uuid" field.
func (kcuo *KcClassUpdateOne) SetUUID(s string) *KcClassUpdateOne {
	kcuo.mutation.SetUUID(s)
	return kcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (kcuo *KcClassUpdateOne) SetUpdatedAt(t time.Time) *KcClassUpdateOne {
	kcuo.mutation.SetUpdatedAt(t)
	return kcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kcuo *KcClassUpdateOne) ClearUpdatedAt() *KcClassUpdateOne {
	kcuo.mutation.ClearUpdatedAt()
	return kcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (kcuo *KcClassUpdateOne) SetDeletedAt(t time.Time) *KcClassUpdateOne {
	kcuo.mutation.SetDeletedAt(t)
	return kcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableDeletedAt(t *time.Time) *KcClassUpdateOne {
	if t != nil {
		kcuo.SetDeletedAt(*t)
	}
	return kcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (kcuo *KcClassUpdateOne) ClearDeletedAt() *KcClassUpdateOne {
	kcuo.mutation.ClearDeletedAt()
	return kcuo
}

// SetClassTitle sets the "class_title" field.
func (kcuo *KcClassUpdateOne) SetClassTitle(s string) *KcClassUpdateOne {
	kcuo.mutation.SetClassTitle(s)
	return kcuo
}

// SetNillableClassTitle sets the "class_title" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableClassTitle(s *string) *KcClassUpdateOne {
	if s != nil {
		kcuo.SetClassTitle(*s)
	}
	return kcuo
}

// SetClassCode sets the "class_code" field.
func (kcuo *KcClassUpdateOne) SetClassCode(s string) *KcClassUpdateOne {
	kcuo.mutation.SetClassCode(s)
	return kcuo
}

// SetNillableClassCode sets the "class_code" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableClassCode(s *string) *KcClassUpdateOne {
	if s != nil {
		kcuo.SetClassCode(*s)
	}
	return kcuo
}

// SetClassDesc sets the "class_desc" field.
func (kcuo *KcClassUpdateOne) SetClassDesc(s string) *KcClassUpdateOne {
	kcuo.mutation.SetClassDesc(s)
	return kcuo
}

// SetNillableClassDesc sets the "class_desc" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableClassDesc(s *string) *KcClassUpdateOne {
	if s != nil {
		kcuo.SetClassDesc(*s)
	}
	return kcuo
}

// SetIsDisplay sets the "is_display" field.
func (kcuo *KcClassUpdateOne) SetIsDisplay(u uint8) *KcClassUpdateOne {
	kcuo.mutation.ResetIsDisplay()
	kcuo.mutation.SetIsDisplay(u)
	return kcuo
}

// SetNillableIsDisplay sets the "is_display" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableIsDisplay(u *uint8) *KcClassUpdateOne {
	if u != nil {
		kcuo.SetIsDisplay(*u)
	}
	return kcuo
}

// AddIsDisplay adds u to the "is_display" field.
func (kcuo *KcClassUpdateOne) AddIsDisplay(u uint8) *KcClassUpdateOne {
	kcuo.mutation.AddIsDisplay(u)
	return kcuo
}

// SetIsBuy sets the "is_buy" field.
func (kcuo *KcClassUpdateOne) SetIsBuy(u uint8) *KcClassUpdateOne {
	kcuo.mutation.ResetIsBuy()
	kcuo.mutation.SetIsBuy(u)
	return kcuo
}

// SetNillableIsBuy sets the "is_buy" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableIsBuy(u *uint8) *KcClassUpdateOne {
	if u != nil {
		kcuo.SetIsBuy(*u)
	}
	return kcuo
}

// AddIsBuy adds u to the "is_buy" field.
func (kcuo *KcClassUpdateOne) AddIsBuy(u uint8) *KcClassUpdateOne {
	kcuo.mutation.AddIsBuy(u)
	return kcuo
}

// SetClassPeriodType sets the "class_period_type" field.
func (kcuo *KcClassUpdateOne) SetClassPeriodType(u uint8) *KcClassUpdateOne {
	kcuo.mutation.ResetClassPeriodType()
	kcuo.mutation.SetClassPeriodType(u)
	return kcuo
}

// SetNillableClassPeriodType sets the "class_period_type" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableClassPeriodType(u *uint8) *KcClassUpdateOne {
	if u != nil {
		kcuo.SetClassPeriodType(*u)
	}
	return kcuo
}

// AddClassPeriodType adds u to the "class_period_type" field.
func (kcuo *KcClassUpdateOne) AddClassPeriodType(u uint8) *KcClassUpdateOne {
	kcuo.mutation.AddClassPeriodType(u)
	return kcuo
}

// SetClassStartDate sets the "class_start_date" field.
func (kcuo *KcClassUpdateOne) SetClassStartDate(t time.Time) *KcClassUpdateOne {
	kcuo.mutation.SetClassStartDate(t)
	return kcuo
}

// SetNillableClassStartDate sets the "class_start_date" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableClassStartDate(t *time.Time) *KcClassUpdateOne {
	if t != nil {
		kcuo.SetClassStartDate(*t)
	}
	return kcuo
}

// ClearClassStartDate clears the value of the "class_start_date" field.
func (kcuo *KcClassUpdateOne) ClearClassStartDate() *KcClassUpdateOne {
	kcuo.mutation.ClearClassStartDate()
	return kcuo
}

// SetClassEndDate sets the "class_end_date" field.
func (kcuo *KcClassUpdateOne) SetClassEndDate(t time.Time) *KcClassUpdateOne {
	kcuo.mutation.SetClassEndDate(t)
	return kcuo
}

// SetNillableClassEndDate sets the "class_end_date" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableClassEndDate(t *time.Time) *KcClassUpdateOne {
	if t != nil {
		kcuo.SetClassEndDate(*t)
	}
	return kcuo
}

// ClearClassEndDate clears the value of the "class_end_date" field.
func (kcuo *KcClassUpdateOne) ClearClassEndDate() *KcClassUpdateOne {
	kcuo.mutation.ClearClassEndDate()
	return kcuo
}

// SetClosingDate sets the "closing_date" field.
func (kcuo *KcClassUpdateOne) SetClosingDate(t time.Time) *KcClassUpdateOne {
	kcuo.mutation.SetClosingDate(t)
	return kcuo
}

// SetNillableClosingDate sets the "closing_date" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableClosingDate(t *time.Time) *KcClassUpdateOne {
	if t != nil {
		kcuo.SetClosingDate(*t)
	}
	return kcuo
}

// ClearClosingDate clears the value of the "closing_date" field.
func (kcuo *KcClassUpdateOne) ClearClosingDate() *KcClassUpdateOne {
	kcuo.mutation.ClearClosingDate()
	return kcuo
}

// SetDaysValidity sets the "days_validity" field.
func (kcuo *KcClassUpdateOne) SetDaysValidity(i int) *KcClassUpdateOne {
	kcuo.mutation.ResetDaysValidity()
	kcuo.mutation.SetDaysValidity(i)
	return kcuo
}

// SetNillableDaysValidity sets the "days_validity" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableDaysValidity(i *int) *KcClassUpdateOne {
	if i != nil {
		kcuo.SetDaysValidity(*i)
	}
	return kcuo
}

// AddDaysValidity adds i to the "days_validity" field.
func (kcuo *KcClassUpdateOne) AddDaysValidity(i int) *KcClassUpdateOne {
	kcuo.mutation.AddDaysValidity(i)
	return kcuo
}

// SetClassHeadMasterID sets the "class_head_master_id" field.
func (kcuo *KcClassUpdateOne) SetClassHeadMasterID(i int) *KcClassUpdateOne {
	kcuo.mutation.ResetClassHeadMasterID()
	kcuo.mutation.SetClassHeadMasterID(i)
	return kcuo
}

// SetNillableClassHeadMasterID sets the "class_head_master_id" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableClassHeadMasterID(i *int) *KcClassUpdateOne {
	if i != nil {
		kcuo.SetClassHeadMasterID(*i)
	}
	return kcuo
}

// ClearClassHeadMasterID clears the value of the "class_head_master_id" field.
func (kcuo *KcClassUpdateOne) ClearClassHeadMasterID() *KcClassUpdateOne {
	kcuo.mutation.ClearClassHeadMasterID()
	return kcuo
}

// SetClassCoverImgID sets the "class_cover_img_id" field.
func (kcuo *KcClassUpdateOne) SetClassCoverImgID(i int) *KcClassUpdateOne {
	kcuo.mutation.ResetClassCoverImgID()
	kcuo.mutation.SetClassCoverImgID(i)
	return kcuo
}

// SetNillableClassCoverImgID sets the "class_cover_img_id" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableClassCoverImgID(i *int) *KcClassUpdateOne {
	if i != nil {
		kcuo.SetClassCoverImgID(*i)
	}
	return kcuo
}

// ClearClassCoverImgID clears the value of the "class_cover_img_id" field.
func (kcuo *KcClassUpdateOne) ClearClassCoverImgID() *KcClassUpdateOne {
	kcuo.mutation.ClearClassCoverImgID()
	return kcuo
}

// SetStatus sets the "status" field.
func (kcuo *KcClassUpdateOne) SetStatus(u uint8) *KcClassUpdateOne {
	kcuo.mutation.ResetStatus()
	kcuo.mutation.SetStatus(u)
	return kcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableStatus(u *uint8) *KcClassUpdateOne {
	if u != nil {
		kcuo.SetStatus(*u)
	}
	return kcuo
}

// AddStatus adds u to the "status" field.
func (kcuo *KcClassUpdateOne) AddStatus(u uint8) *KcClassUpdateOne {
	kcuo.mutation.AddStatus(u)
	return kcuo
}

// SetPrice sets the "price" field.
func (kcuo *KcClassUpdateOne) SetPrice(f float64) *KcClassUpdateOne {
	kcuo.mutation.ResetPrice()
	kcuo.mutation.SetPrice(f)
	return kcuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillablePrice(f *float64) *KcClassUpdateOne {
	if f != nil {
		kcuo.SetPrice(*f)
	}
	return kcuo
}

// AddPrice adds f to the "price" field.
func (kcuo *KcClassUpdateOne) AddPrice(f float64) *KcClassUpdateOne {
	kcuo.mutation.AddPrice(f)
	return kcuo
}

// SetStudentCount sets the "student_count" field.
func (kcuo *KcClassUpdateOne) SetStudentCount(i int) *KcClassUpdateOne {
	kcuo.mutation.ResetStudentCount()
	kcuo.mutation.SetStudentCount(i)
	return kcuo
}

// SetNillableStudentCount sets the "student_count" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableStudentCount(i *int) *KcClassUpdateOne {
	if i != nil {
		kcuo.SetStudentCount(*i)
	}
	return kcuo
}

// AddStudentCount adds i to the "student_count" field.
func (kcuo *KcClassUpdateOne) AddStudentCount(i int) *KcClassUpdateOne {
	kcuo.mutation.AddStudentCount(i)
	return kcuo
}

// SetCourseCount sets the "course_count" field.
func (kcuo *KcClassUpdateOne) SetCourseCount(i int) *KcClassUpdateOne {
	kcuo.mutation.ResetCourseCount()
	kcuo.mutation.SetCourseCount(i)
	return kcuo
}

// SetNillableCourseCount sets the "course_count" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableCourseCount(i *int) *KcClassUpdateOne {
	if i != nil {
		kcuo.SetCourseCount(*i)
	}
	return kcuo
}

// AddCourseCount adds i to the "course_count" field.
func (kcuo *KcClassUpdateOne) AddCourseCount(i int) *KcClassUpdateOne {
	kcuo.mutation.AddCourseCount(i)
	return kcuo
}

// SetCateID sets the "cate_id" field.
func (kcuo *KcClassUpdateOne) SetCateID(i int) *KcClassUpdateOne {
	kcuo.mutation.ResetCateID()
	kcuo.mutation.SetCateID(i)
	return kcuo
}

// SetNillableCateID sets the "cate_id" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableCateID(i *int) *KcClassUpdateOne {
	if i != nil {
		kcuo.SetCateID(*i)
	}
	return kcuo
}

// ClearCateID clears the value of the "cate_id" field.
func (kcuo *KcClassUpdateOne) ClearCateID() *KcClassUpdateOne {
	kcuo.mutation.ClearCateID()
	return kcuo
}

// SetCityID sets the "city_id" field.
func (kcuo *KcClassUpdateOne) SetCityID(i int) *KcClassUpdateOne {
	kcuo.mutation.ResetCityID()
	kcuo.mutation.SetCityID(i)
	return kcuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableCityID(i *int) *KcClassUpdateOne {
	if i != nil {
		kcuo.SetCityID(*i)
	}
	return kcuo
}

// ClearCityID clears the value of the "city_id" field.
func (kcuo *KcClassUpdateOne) ClearCityID() *KcClassUpdateOne {
	kcuo.mutation.ClearCityID()
	return kcuo
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (kcuo *KcClassUpdateOne) SetCreatedAdminID(i int) *KcClassUpdateOne {
	kcuo.mutation.ResetCreatedAdminID()
	kcuo.mutation.SetCreatedAdminID(i)
	return kcuo
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableCreatedAdminID(i *int) *KcClassUpdateOne {
	if i != nil {
		kcuo.SetCreatedAdminID(*i)
	}
	return kcuo
}

// ClearCreatedAdminID clears the value of the "created_admin_id" field.
func (kcuo *KcClassUpdateOne) ClearCreatedAdminID() *KcClassUpdateOne {
	kcuo.mutation.ClearCreatedAdminID()
	return kcuo
}

// AddMajorIDs adds the "majors" edge to the Major entity by IDs.
func (kcuo *KcClassUpdateOne) AddMajorIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.AddMajorIDs(ids...)
	return kcuo
}

// AddMajors adds the "majors" edges to the Major entity.
func (kcuo *KcClassUpdateOne) AddMajors(m ...*Major) *KcClassUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return kcuo.AddMajorIDs(ids...)
}

// SetItemID sets the "item" edge to the ItemCategory entity by ID.
func (kcuo *KcClassUpdateOne) SetItemID(id int) *KcClassUpdateOne {
	kcuo.mutation.SetItemID(id)
	return kcuo
}

// SetNillableItemID sets the "item" edge to the ItemCategory entity by ID if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableItemID(id *int) *KcClassUpdateOne {
	if id != nil {
		kcuo = kcuo.SetItemID(*id)
	}
	return kcuo
}

// SetItem sets the "item" edge to the ItemCategory entity.
func (kcuo *KcClassUpdateOne) SetItem(i *ItemCategory) *KcClassUpdateOne {
	return kcuo.SetItemID(i.ID)
}

// SetCity sets the "city" edge to the City entity.
func (kcuo *KcClassUpdateOne) SetCity(c *City) *KcClassUpdateOne {
	return kcuo.SetCityID(c.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (kcuo *KcClassUpdateOne) SetAdminID(id int) *KcClassUpdateOne {
	kcuo.mutation.SetAdminID(id)
	return kcuo
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableAdminID(id *int) *KcClassUpdateOne {
	if id != nil {
		kcuo = kcuo.SetAdminID(*id)
	}
	return kcuo
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (kcuo *KcClassUpdateOne) SetAdmin(a *Admin) *KcClassUpdateOne {
	return kcuo.SetAdminID(a.ID)
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (kcuo *KcClassUpdateOne) SetAttachmentID(id int) *KcClassUpdateOne {
	kcuo.mutation.SetAttachmentID(id)
	return kcuo
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableAttachmentID(id *int) *KcClassUpdateOne {
	if id != nil {
		kcuo = kcuo.SetAttachmentID(*id)
	}
	return kcuo
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (kcuo *KcClassUpdateOne) SetAttachment(a *Attachment) *KcClassUpdateOne {
	return kcuo.SetAttachmentID(a.ID)
}

// SetMasterTeachersID sets the "master_teachers" edge to the Teacher entity by ID.
func (kcuo *KcClassUpdateOne) SetMasterTeachersID(id int) *KcClassUpdateOne {
	kcuo.mutation.SetMasterTeachersID(id)
	return kcuo
}

// SetNillableMasterTeachersID sets the "master_teachers" edge to the Teacher entity by ID if the given value is not nil.
func (kcuo *KcClassUpdateOne) SetNillableMasterTeachersID(id *int) *KcClassUpdateOne {
	if id != nil {
		kcuo = kcuo.SetMasterTeachersID(*id)
	}
	return kcuo
}

// SetMasterTeachers sets the "master_teachers" edge to the Teacher entity.
func (kcuo *KcClassUpdateOne) SetMasterTeachers(t *Teacher) *KcClassUpdateOne {
	return kcuo.SetMasterTeachersID(t.ID)
}

// AddClassTeacherIDs adds the "class_teachers" edge to the KcClassTeacher entity by IDs.
func (kcuo *KcClassUpdateOne) AddClassTeacherIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.AddClassTeacherIDs(ids...)
	return kcuo
}

// AddClassTeachers adds the "class_teachers" edges to the KcClassTeacher entity.
func (kcuo *KcClassUpdateOne) AddClassTeachers(k ...*KcClassTeacher) *KcClassUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.AddClassTeacherIDs(ids...)
}

// AddKcClassCourseIDs adds the "kc_class_courses" edge to the KcCourse entity by IDs.
func (kcuo *KcClassUpdateOne) AddKcClassCourseIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.AddKcClassCourseIDs(ids...)
	return kcuo
}

// AddKcClassCourses adds the "kc_class_courses" edges to the KcCourse entity.
func (kcuo *KcClassUpdateOne) AddKcClassCourses(k ...*KcCourse) *KcClassUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.AddKcClassCourseIDs(ids...)
}

// AddKcUserClassIDs adds the "kc_user_classes" edge to the KcUserClass entity by IDs.
func (kcuo *KcClassUpdateOne) AddKcUserClassIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.AddKcUserClassIDs(ids...)
	return kcuo
}

// AddKcUserClasses adds the "kc_user_classes" edges to the KcUserClass entity.
func (kcuo *KcClassUpdateOne) AddKcUserClasses(k ...*KcUserClass) *KcClassUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.AddKcUserClassIDs(ids...)
}

// AddMessageClassIDs adds the "message_classes" edge to the Message entity by IDs.
func (kcuo *KcClassUpdateOne) AddMessageClassIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.AddMessageClassIDs(ids...)
	return kcuo
}

// AddMessageClasses adds the "message_classes" edges to the Message entity.
func (kcuo *KcClassUpdateOne) AddMessageClasses(m ...*Message) *KcClassUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return kcuo.AddMessageClassIDs(ids...)
}

// Mutation returns the KcClassMutation object of the builder.
func (kcuo *KcClassUpdateOne) Mutation() *KcClassMutation {
	return kcuo.mutation
}

// ClearMajors clears all "majors" edges to the Major entity.
func (kcuo *KcClassUpdateOne) ClearMajors() *KcClassUpdateOne {
	kcuo.mutation.ClearMajors()
	return kcuo
}

// RemoveMajorIDs removes the "majors" edge to Major entities by IDs.
func (kcuo *KcClassUpdateOne) RemoveMajorIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.RemoveMajorIDs(ids...)
	return kcuo
}

// RemoveMajors removes "majors" edges to Major entities.
func (kcuo *KcClassUpdateOne) RemoveMajors(m ...*Major) *KcClassUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return kcuo.RemoveMajorIDs(ids...)
}

// ClearItem clears the "item" edge to the ItemCategory entity.
func (kcuo *KcClassUpdateOne) ClearItem() *KcClassUpdateOne {
	kcuo.mutation.ClearItem()
	return kcuo
}

// ClearCity clears the "city" edge to the City entity.
func (kcuo *KcClassUpdateOne) ClearCity() *KcClassUpdateOne {
	kcuo.mutation.ClearCity()
	return kcuo
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (kcuo *KcClassUpdateOne) ClearAdmin() *KcClassUpdateOne {
	kcuo.mutation.ClearAdmin()
	return kcuo
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (kcuo *KcClassUpdateOne) ClearAttachment() *KcClassUpdateOne {
	kcuo.mutation.ClearAttachment()
	return kcuo
}

// ClearMasterTeachers clears the "master_teachers" edge to the Teacher entity.
func (kcuo *KcClassUpdateOne) ClearMasterTeachers() *KcClassUpdateOne {
	kcuo.mutation.ClearMasterTeachers()
	return kcuo
}

// ClearClassTeachers clears all "class_teachers" edges to the KcClassTeacher entity.
func (kcuo *KcClassUpdateOne) ClearClassTeachers() *KcClassUpdateOne {
	kcuo.mutation.ClearClassTeachers()
	return kcuo
}

// RemoveClassTeacherIDs removes the "class_teachers" edge to KcClassTeacher entities by IDs.
func (kcuo *KcClassUpdateOne) RemoveClassTeacherIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.RemoveClassTeacherIDs(ids...)
	return kcuo
}

// RemoveClassTeachers removes "class_teachers" edges to KcClassTeacher entities.
func (kcuo *KcClassUpdateOne) RemoveClassTeachers(k ...*KcClassTeacher) *KcClassUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.RemoveClassTeacherIDs(ids...)
}

// ClearKcClassCourses clears all "kc_class_courses" edges to the KcCourse entity.
func (kcuo *KcClassUpdateOne) ClearKcClassCourses() *KcClassUpdateOne {
	kcuo.mutation.ClearKcClassCourses()
	return kcuo
}

// RemoveKcClassCourseIDs removes the "kc_class_courses" edge to KcCourse entities by IDs.
func (kcuo *KcClassUpdateOne) RemoveKcClassCourseIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.RemoveKcClassCourseIDs(ids...)
	return kcuo
}

// RemoveKcClassCourses removes "kc_class_courses" edges to KcCourse entities.
func (kcuo *KcClassUpdateOne) RemoveKcClassCourses(k ...*KcCourse) *KcClassUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.RemoveKcClassCourseIDs(ids...)
}

// ClearKcUserClasses clears all "kc_user_classes" edges to the KcUserClass entity.
func (kcuo *KcClassUpdateOne) ClearKcUserClasses() *KcClassUpdateOne {
	kcuo.mutation.ClearKcUserClasses()
	return kcuo
}

// RemoveKcUserClassIDs removes the "kc_user_classes" edge to KcUserClass entities by IDs.
func (kcuo *KcClassUpdateOne) RemoveKcUserClassIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.RemoveKcUserClassIDs(ids...)
	return kcuo
}

// RemoveKcUserClasses removes "kc_user_classes" edges to KcUserClass entities.
func (kcuo *KcClassUpdateOne) RemoveKcUserClasses(k ...*KcUserClass) *KcClassUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.RemoveKcUserClassIDs(ids...)
}

// ClearMessageClasses clears all "message_classes" edges to the Message entity.
func (kcuo *KcClassUpdateOne) ClearMessageClasses() *KcClassUpdateOne {
	kcuo.mutation.ClearMessageClasses()
	return kcuo
}

// RemoveMessageClassIDs removes the "message_classes" edge to Message entities by IDs.
func (kcuo *KcClassUpdateOne) RemoveMessageClassIDs(ids ...int) *KcClassUpdateOne {
	kcuo.mutation.RemoveMessageClassIDs(ids...)
	return kcuo
}

// RemoveMessageClasses removes "message_classes" edges to Message entities.
func (kcuo *KcClassUpdateOne) RemoveMessageClasses(m ...*Message) *KcClassUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return kcuo.RemoveMessageClassIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kcuo *KcClassUpdateOne) Select(field string, fields ...string) *KcClassUpdateOne {
	kcuo.fields = append([]string{field}, fields...)
	return kcuo
}

// Save executes the query and returns the updated KcClass entity.
func (kcuo *KcClassUpdateOne) Save(ctx context.Context) (*KcClass, error) {
	var (
		err  error
		node *KcClass
	)
	kcuo.defaults()
	if len(kcuo.hooks) == 0 {
		node, err = kcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcuo.mutation = mutation
			node, err = kcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcuo.hooks) - 1; i >= 0; i-- {
			mut = kcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcuo *KcClassUpdateOne) SaveX(ctx context.Context) *KcClass {
	node, err := kcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcuo *KcClassUpdateOne) Exec(ctx context.Context) error {
	_, err := kcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcuo *KcClassUpdateOne) ExecX(ctx context.Context) {
	if err := kcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcuo *KcClassUpdateOne) defaults() {
	if _, ok := kcuo.mutation.UpdatedAt(); !ok && !kcuo.mutation.UpdatedAtCleared() {
		v := kcclass.UpdateDefaultUpdatedAt()
		kcuo.mutation.SetUpdatedAt(v)
	}
}

func (kcuo *KcClassUpdateOne) sqlSave(ctx context.Context) (_node *KcClass, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kcclass.Table,
			Columns: kcclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcclass.FieldID,
			},
		},
	}
	id, ok := kcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KcClass.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kcclass.FieldID)
		for _, f := range fields {
			if !kcclass.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kcclass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcclass.FieldUUID,
		})
	}
	if kcuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldCreatedAt,
		})
	}
	if value, ok := kcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldUpdatedAt,
		})
	}
	if kcuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldUpdatedAt,
		})
	}
	if value, ok := kcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldDeletedAt,
		})
	}
	if kcuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldDeletedAt,
		})
	}
	if value, ok := kcuo.mutation.ClassTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcclass.FieldClassTitle,
		})
	}
	if value, ok := kcuo.mutation.ClassCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcclass.FieldClassCode,
		})
	}
	if value, ok := kcuo.mutation.ClassDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcclass.FieldClassDesc,
		})
	}
	if value, ok := kcuo.mutation.IsDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldIsDisplay,
		})
	}
	if value, ok := kcuo.mutation.AddedIsDisplay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldIsDisplay,
		})
	}
	if value, ok := kcuo.mutation.IsBuy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldIsBuy,
		})
	}
	if value, ok := kcuo.mutation.AddedIsBuy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldIsBuy,
		})
	}
	if value, ok := kcuo.mutation.ClassPeriodType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldClassPeriodType,
		})
	}
	if value, ok := kcuo.mutation.AddedClassPeriodType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldClassPeriodType,
		})
	}
	if value, ok := kcuo.mutation.ClassStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldClassStartDate,
		})
	}
	if kcuo.mutation.ClassStartDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldClassStartDate,
		})
	}
	if value, ok := kcuo.mutation.ClassEndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldClassEndDate,
		})
	}
	if kcuo.mutation.ClassEndDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldClassEndDate,
		})
	}
	if value, ok := kcuo.mutation.ClosingDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcclass.FieldClosingDate,
		})
	}
	if kcuo.mutation.ClosingDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcclass.FieldClosingDate,
		})
	}
	if value, ok := kcuo.mutation.DaysValidity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldDaysValidity,
		})
	}
	if value, ok := kcuo.mutation.AddedDaysValidity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldDaysValidity,
		})
	}
	if value, ok := kcuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldStatus,
		})
	}
	if value, ok := kcuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclass.FieldStatus,
		})
	}
	if value, ok := kcuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kcclass.FieldPrice,
		})
	}
	if value, ok := kcuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kcclass.FieldPrice,
		})
	}
	if value, ok := kcuo.mutation.StudentCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldStudentCount,
		})
	}
	if value, ok := kcuo.mutation.AddedStudentCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldStudentCount,
		})
	}
	if value, ok := kcuo.mutation.CourseCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldCourseCount,
		})
	}
	if value, ok := kcuo.mutation.AddedCourseCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclass.FieldCourseCount,
		})
	}
	if kcuo.mutation.MajorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   kcclass.MajorsTable,
			Columns: kcclass.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.RemovedMajorsIDs(); len(nodes) > 0 && !kcuo.mutation.MajorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   kcclass.MajorsTable,
			Columns: kcclass.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.MajorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   kcclass.MajorsTable,
			Columns: kcclass.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kcclass.ItemTable,
			Columns: []string{kcclass.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kcclass.ItemTable,
			Columns: []string{kcclass.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.CityTable,
			Columns: []string{kcclass.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.CityTable,
			Columns: []string{kcclass.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.AdminTable,
			Columns: []string{kcclass.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.AdminTable,
			Columns: []string{kcclass.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.AttachmentTable,
			Columns: []string{kcclass.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.AttachmentTable,
			Columns: []string{kcclass.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.MasterTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.MasterTeachersTable,
			Columns: []string{kcclass.MasterTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.MasterTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclass.MasterTeachersTable,
			Columns: []string{kcclass.MasterTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.ClassTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.ClassTeachersTable,
			Columns: []string{kcclass.ClassTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.RemovedClassTeachersIDs(); len(nodes) > 0 && !kcuo.mutation.ClassTeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.ClassTeachersTable,
			Columns: []string{kcclass.ClassTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.ClassTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.ClassTeachersTable,
			Columns: []string{kcclass.ClassTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.KcClassCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   kcclass.KcClassCoursesTable,
			Columns: kcclass.KcClassCoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.RemovedKcClassCoursesIDs(); len(nodes) > 0 && !kcuo.mutation.KcClassCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   kcclass.KcClassCoursesTable,
			Columns: kcclass.KcClassCoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.KcClassCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   kcclass.KcClassCoursesTable,
			Columns: kcclass.KcClassCoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.KcUserClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.KcUserClassesTable,
			Columns: []string{kcclass.KcUserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.RemovedKcUserClassesIDs(); len(nodes) > 0 && !kcuo.mutation.KcUserClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.KcUserClassesTable,
			Columns: []string{kcclass.KcUserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.KcUserClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.KcUserClassesTable,
			Columns: []string{kcclass.KcUserClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcuserclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.MessageClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.MessageClassesTable,
			Columns: []string{kcclass.MessageClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.RemovedMessageClassesIDs(); len(nodes) > 0 && !kcuo.mutation.MessageClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.MessageClassesTable,
			Columns: []string{kcclass.MessageClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.MessageClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kcclass.MessageClassesTable,
			Columns: []string{kcclass.MessageClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KcClass{config: kcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kcclass.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package tkexampaperpartitionscore

import (
	"time"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// SingeSelect applies equality check predicate on the "singe_select" field. It's identical to SingeSelectEQ.
func SingeSelect(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSingeSelect), v))
	})
}

// JudgeQuestion applies equality check predicate on the "judge_question" field. It's identical to JudgeQuestionEQ.
func JudgeQuestion(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJudgeQuestion), v))
	})
}

// MultiSelect applies equality check predicate on the "multi_select" field. It's identical to MultiSelectEQ.
func MultiSelect(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiSelect), v))
	})
}

// ShorterAnswer applies equality check predicate on the "shorter_answer" field. It's identical to ShorterAnswerEQ.
func ShorterAnswer(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShorterAnswer), v))
	})
}

// MaterialQuestion applies equality check predicate on the "material_question" field. It's identical to MaterialQuestionEQ.
func MaterialQuestion(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialQuestion), v))
	})
}

// SingeSelectCount applies equality check predicate on the "singe_select_count" field. It's identical to SingeSelectCountEQ.
func SingeSelectCount(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSingeSelectCount), v))
	})
}

// JudgeQuestionCount applies equality check predicate on the "judge_question_count" field. It's identical to JudgeQuestionCountEQ.
func JudgeQuestionCount(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJudgeQuestionCount), v))
	})
}

// MultiSelectCount applies equality check predicate on the "multi_select_count" field. It's identical to MultiSelectCountEQ.
func MultiSelectCount(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiSelectCount), v))
	})
}

// ShorterAnswerCount applies equality check predicate on the "shorter_answer_count" field. It's identical to ShorterAnswerCountEQ.
func ShorterAnswerCount(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShorterAnswerCount), v))
	})
}

// MaterialQuestionCount applies equality check predicate on the "material_question_count" field. It's identical to MaterialQuestionCountEQ.
func MaterialQuestionCount(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialQuestionCount), v))
	})
}

// ExamPaperPartitionID applies equality check predicate on the "exam_paper_partition_id" field. It's identical to ExamPaperPartitionIDEQ.
func ExamPaperPartitionID(v int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamPaperPartitionID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// SingeSelectEQ applies the EQ predicate on the "singe_select" field.
func SingeSelectEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSingeSelect), v))
	})
}

// SingeSelectNEQ applies the NEQ predicate on the "singe_select" field.
func SingeSelectNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSingeSelect), v))
	})
}

// SingeSelectIn applies the In predicate on the "singe_select" field.
func SingeSelectIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSingeSelect), v...))
	})
}

// SingeSelectNotIn applies the NotIn predicate on the "singe_select" field.
func SingeSelectNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSingeSelect), v...))
	})
}

// SingeSelectGT applies the GT predicate on the "singe_select" field.
func SingeSelectGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSingeSelect), v))
	})
}

// SingeSelectGTE applies the GTE predicate on the "singe_select" field.
func SingeSelectGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSingeSelect), v))
	})
}

// SingeSelectLT applies the LT predicate on the "singe_select" field.
func SingeSelectLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSingeSelect), v))
	})
}

// SingeSelectLTE applies the LTE predicate on the "singe_select" field.
func SingeSelectLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSingeSelect), v))
	})
}

// JudgeQuestionEQ applies the EQ predicate on the "judge_question" field.
func JudgeQuestionEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJudgeQuestion), v))
	})
}

// JudgeQuestionNEQ applies the NEQ predicate on the "judge_question" field.
func JudgeQuestionNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJudgeQuestion), v))
	})
}

// JudgeQuestionIn applies the In predicate on the "judge_question" field.
func JudgeQuestionIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJudgeQuestion), v...))
	})
}

// JudgeQuestionNotIn applies the NotIn predicate on the "judge_question" field.
func JudgeQuestionNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJudgeQuestion), v...))
	})
}

// JudgeQuestionGT applies the GT predicate on the "judge_question" field.
func JudgeQuestionGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJudgeQuestion), v))
	})
}

// JudgeQuestionGTE applies the GTE predicate on the "judge_question" field.
func JudgeQuestionGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJudgeQuestion), v))
	})
}

// JudgeQuestionLT applies the LT predicate on the "judge_question" field.
func JudgeQuestionLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJudgeQuestion), v))
	})
}

// JudgeQuestionLTE applies the LTE predicate on the "judge_question" field.
func JudgeQuestionLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJudgeQuestion), v))
	})
}

// MultiSelectEQ applies the EQ predicate on the "multi_select" field.
func MultiSelectEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiSelect), v))
	})
}

// MultiSelectNEQ applies the NEQ predicate on the "multi_select" field.
func MultiSelectNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMultiSelect), v))
	})
}

// MultiSelectIn applies the In predicate on the "multi_select" field.
func MultiSelectIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMultiSelect), v...))
	})
}

// MultiSelectNotIn applies the NotIn predicate on the "multi_select" field.
func MultiSelectNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMultiSelect), v...))
	})
}

// MultiSelectGT applies the GT predicate on the "multi_select" field.
func MultiSelectGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMultiSelect), v))
	})
}

// MultiSelectGTE applies the GTE predicate on the "multi_select" field.
func MultiSelectGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMultiSelect), v))
	})
}

// MultiSelectLT applies the LT predicate on the "multi_select" field.
func MultiSelectLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMultiSelect), v))
	})
}

// MultiSelectLTE applies the LTE predicate on the "multi_select" field.
func MultiSelectLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMultiSelect), v))
	})
}

// ShorterAnswerEQ applies the EQ predicate on the "shorter_answer" field.
func ShorterAnswerEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShorterAnswer), v))
	})
}

// ShorterAnswerNEQ applies the NEQ predicate on the "shorter_answer" field.
func ShorterAnswerNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShorterAnswer), v))
	})
}

// ShorterAnswerIn applies the In predicate on the "shorter_answer" field.
func ShorterAnswerIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShorterAnswer), v...))
	})
}

// ShorterAnswerNotIn applies the NotIn predicate on the "shorter_answer" field.
func ShorterAnswerNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShorterAnswer), v...))
	})
}

// ShorterAnswerGT applies the GT predicate on the "shorter_answer" field.
func ShorterAnswerGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShorterAnswer), v))
	})
}

// ShorterAnswerGTE applies the GTE predicate on the "shorter_answer" field.
func ShorterAnswerGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShorterAnswer), v))
	})
}

// ShorterAnswerLT applies the LT predicate on the "shorter_answer" field.
func ShorterAnswerLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShorterAnswer), v))
	})
}

// ShorterAnswerLTE applies the LTE predicate on the "shorter_answer" field.
func ShorterAnswerLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShorterAnswer), v))
	})
}

// MaterialQuestionEQ applies the EQ predicate on the "material_question" field.
func MaterialQuestionEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialQuestion), v))
	})
}

// MaterialQuestionNEQ applies the NEQ predicate on the "material_question" field.
func MaterialQuestionNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialQuestion), v))
	})
}

// MaterialQuestionIn applies the In predicate on the "material_question" field.
func MaterialQuestionIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialQuestion), v...))
	})
}

// MaterialQuestionNotIn applies the NotIn predicate on the "material_question" field.
func MaterialQuestionNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialQuestion), v...))
	})
}

// MaterialQuestionGT applies the GT predicate on the "material_question" field.
func MaterialQuestionGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialQuestion), v))
	})
}

// MaterialQuestionGTE applies the GTE predicate on the "material_question" field.
func MaterialQuestionGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialQuestion), v))
	})
}

// MaterialQuestionLT applies the LT predicate on the "material_question" field.
func MaterialQuestionLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialQuestion), v))
	})
}

// MaterialQuestionLTE applies the LTE predicate on the "material_question" field.
func MaterialQuestionLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialQuestion), v))
	})
}

// SingeSelectCountEQ applies the EQ predicate on the "singe_select_count" field.
func SingeSelectCountEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSingeSelectCount), v))
	})
}

// SingeSelectCountNEQ applies the NEQ predicate on the "singe_select_count" field.
func SingeSelectCountNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSingeSelectCount), v))
	})
}

// SingeSelectCountIn applies the In predicate on the "singe_select_count" field.
func SingeSelectCountIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSingeSelectCount), v...))
	})
}

// SingeSelectCountNotIn applies the NotIn predicate on the "singe_select_count" field.
func SingeSelectCountNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSingeSelectCount), v...))
	})
}

// SingeSelectCountGT applies the GT predicate on the "singe_select_count" field.
func SingeSelectCountGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSingeSelectCount), v))
	})
}

// SingeSelectCountGTE applies the GTE predicate on the "singe_select_count" field.
func SingeSelectCountGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSingeSelectCount), v))
	})
}

// SingeSelectCountLT applies the LT predicate on the "singe_select_count" field.
func SingeSelectCountLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSingeSelectCount), v))
	})
}

// SingeSelectCountLTE applies the LTE predicate on the "singe_select_count" field.
func SingeSelectCountLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSingeSelectCount), v))
	})
}

// JudgeQuestionCountEQ applies the EQ predicate on the "judge_question_count" field.
func JudgeQuestionCountEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJudgeQuestionCount), v))
	})
}

// JudgeQuestionCountNEQ applies the NEQ predicate on the "judge_question_count" field.
func JudgeQuestionCountNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJudgeQuestionCount), v))
	})
}

// JudgeQuestionCountIn applies the In predicate on the "judge_question_count" field.
func JudgeQuestionCountIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJudgeQuestionCount), v...))
	})
}

// JudgeQuestionCountNotIn applies the NotIn predicate on the "judge_question_count" field.
func JudgeQuestionCountNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJudgeQuestionCount), v...))
	})
}

// JudgeQuestionCountGT applies the GT predicate on the "judge_question_count" field.
func JudgeQuestionCountGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJudgeQuestionCount), v))
	})
}

// JudgeQuestionCountGTE applies the GTE predicate on the "judge_question_count" field.
func JudgeQuestionCountGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJudgeQuestionCount), v))
	})
}

// JudgeQuestionCountLT applies the LT predicate on the "judge_question_count" field.
func JudgeQuestionCountLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJudgeQuestionCount), v))
	})
}

// JudgeQuestionCountLTE applies the LTE predicate on the "judge_question_count" field.
func JudgeQuestionCountLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJudgeQuestionCount), v))
	})
}

// MultiSelectCountEQ applies the EQ predicate on the "multi_select_count" field.
func MultiSelectCountEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiSelectCount), v))
	})
}

// MultiSelectCountNEQ applies the NEQ predicate on the "multi_select_count" field.
func MultiSelectCountNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMultiSelectCount), v))
	})
}

// MultiSelectCountIn applies the In predicate on the "multi_select_count" field.
func MultiSelectCountIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMultiSelectCount), v...))
	})
}

// MultiSelectCountNotIn applies the NotIn predicate on the "multi_select_count" field.
func MultiSelectCountNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMultiSelectCount), v...))
	})
}

// MultiSelectCountGT applies the GT predicate on the "multi_select_count" field.
func MultiSelectCountGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMultiSelectCount), v))
	})
}

// MultiSelectCountGTE applies the GTE predicate on the "multi_select_count" field.
func MultiSelectCountGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMultiSelectCount), v))
	})
}

// MultiSelectCountLT applies the LT predicate on the "multi_select_count" field.
func MultiSelectCountLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMultiSelectCount), v))
	})
}

// MultiSelectCountLTE applies the LTE predicate on the "multi_select_count" field.
func MultiSelectCountLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMultiSelectCount), v))
	})
}

// ShorterAnswerCountEQ applies the EQ predicate on the "shorter_answer_count" field.
func ShorterAnswerCountEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShorterAnswerCount), v))
	})
}

// ShorterAnswerCountNEQ applies the NEQ predicate on the "shorter_answer_count" field.
func ShorterAnswerCountNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShorterAnswerCount), v))
	})
}

// ShorterAnswerCountIn applies the In predicate on the "shorter_answer_count" field.
func ShorterAnswerCountIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShorterAnswerCount), v...))
	})
}

// ShorterAnswerCountNotIn applies the NotIn predicate on the "shorter_answer_count" field.
func ShorterAnswerCountNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShorterAnswerCount), v...))
	})
}

// ShorterAnswerCountGT applies the GT predicate on the "shorter_answer_count" field.
func ShorterAnswerCountGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShorterAnswerCount), v))
	})
}

// ShorterAnswerCountGTE applies the GTE predicate on the "shorter_answer_count" field.
func ShorterAnswerCountGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShorterAnswerCount), v))
	})
}

// ShorterAnswerCountLT applies the LT predicate on the "shorter_answer_count" field.
func ShorterAnswerCountLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShorterAnswerCount), v))
	})
}

// ShorterAnswerCountLTE applies the LTE predicate on the "shorter_answer_count" field.
func ShorterAnswerCountLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShorterAnswerCount), v))
	})
}

// MaterialQuestionCountEQ applies the EQ predicate on the "material_question_count" field.
func MaterialQuestionCountEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialQuestionCount), v))
	})
}

// MaterialQuestionCountNEQ applies the NEQ predicate on the "material_question_count" field.
func MaterialQuestionCountNEQ(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialQuestionCount), v))
	})
}

// MaterialQuestionCountIn applies the In predicate on the "material_question_count" field.
func MaterialQuestionCountIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialQuestionCount), v...))
	})
}

// MaterialQuestionCountNotIn applies the NotIn predicate on the "material_question_count" field.
func MaterialQuestionCountNotIn(vs ...uint8) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialQuestionCount), v...))
	})
}

// MaterialQuestionCountGT applies the GT predicate on the "material_question_count" field.
func MaterialQuestionCountGT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialQuestionCount), v))
	})
}

// MaterialQuestionCountGTE applies the GTE predicate on the "material_question_count" field.
func MaterialQuestionCountGTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialQuestionCount), v))
	})
}

// MaterialQuestionCountLT applies the LT predicate on the "material_question_count" field.
func MaterialQuestionCountLT(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialQuestionCount), v))
	})
}

// MaterialQuestionCountLTE applies the LTE predicate on the "material_question_count" field.
func MaterialQuestionCountLTE(v uint8) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialQuestionCount), v))
	})
}

// ExamPaperPartitionIDEQ applies the EQ predicate on the "exam_paper_partition_id" field.
func ExamPaperPartitionIDEQ(v int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamPaperPartitionID), v))
	})
}

// ExamPaperPartitionIDNEQ applies the NEQ predicate on the "exam_paper_partition_id" field.
func ExamPaperPartitionIDNEQ(v int) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExamPaperPartitionID), v))
	})
}

// ExamPaperPartitionIDIn applies the In predicate on the "exam_paper_partition_id" field.
func ExamPaperPartitionIDIn(vs ...int) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExamPaperPartitionID), v...))
	})
}

// ExamPaperPartitionIDNotIn applies the NotIn predicate on the "exam_paper_partition_id" field.
func ExamPaperPartitionIDNotIn(vs ...int) predicate.TkExamPaperPartitionScore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExamPaperPartitionID), v...))
	})
}

// ExamPaperPartitionIDIsNil applies the IsNil predicate on the "exam_paper_partition_id" field.
func ExamPaperPartitionIDIsNil() predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExamPaperPartitionID)))
	})
}

// ExamPaperPartitionIDNotNil applies the NotNil predicate on the "exam_paper_partition_id" field.
func ExamPaperPartitionIDNotNil() predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExamPaperPartitionID)))
	})
}

// HasExamPaperPartition applies the HasEdge predicate on the "exam_paper_partition" edge.
func HasExamPaperPartition() predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPaperPartitionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamPaperPartitionTable, ExamPaperPartitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamPaperPartitionWith applies the HasEdge predicate on the "exam_paper_partition" edge with a given conditions (other predicates).
func HasExamPaperPartitionWith(preds ...predicate.TkExamPaperPartition) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPaperPartitionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamPaperPartitionTable, ExamPaperPartitionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TkExamPaperPartitionScore) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TkExamPaperPartitionScore) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TkExamPaperPartitionScore) predicate.TkExamPaperPartitionScore {
	return predicate.TkExamPaperPartitionScore(func(s *sql.Selector) {
		p(s.Not())
	})
}

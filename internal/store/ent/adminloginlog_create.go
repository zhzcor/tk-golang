// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/adminloginlog"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminLoginLogCreate is the builder for creating a AdminLoginLog entity.
type AdminLoginLogCreate struct {
	config
	mutation *AdminLoginLogMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (allc *AdminLoginLogCreate) SetUUID(s string) *AdminLoginLogCreate {
	allc.mutation.SetUUID(s)
	return allc
}

// SetCreatedAt sets the "created_at" field.
func (allc *AdminLoginLogCreate) SetCreatedAt(t time.Time) *AdminLoginLogCreate {
	allc.mutation.SetCreatedAt(t)
	return allc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (allc *AdminLoginLogCreate) SetNillableCreatedAt(t *time.Time) *AdminLoginLogCreate {
	if t != nil {
		allc.SetCreatedAt(*t)
	}
	return allc
}

// SetUpdatedAt sets the "updated_at" field.
func (allc *AdminLoginLogCreate) SetUpdatedAt(t time.Time) *AdminLoginLogCreate {
	allc.mutation.SetUpdatedAt(t)
	return allc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (allc *AdminLoginLogCreate) SetNillableUpdatedAt(t *time.Time) *AdminLoginLogCreate {
	if t != nil {
		allc.SetUpdatedAt(*t)
	}
	return allc
}

// SetDeletedAt sets the "deleted_at" field.
func (allc *AdminLoginLogCreate) SetDeletedAt(t time.Time) *AdminLoginLogCreate {
	allc.mutation.SetDeletedAt(t)
	return allc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (allc *AdminLoginLogCreate) SetNillableDeletedAt(t *time.Time) *AdminLoginLogCreate {
	if t != nil {
		allc.SetDeletedAt(*t)
	}
	return allc
}

// SetIP sets the "ip" field.
func (allc *AdminLoginLogCreate) SetIP(s string) *AdminLoginLogCreate {
	allc.mutation.SetIP(s)
	return allc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (allc *AdminLoginLogCreate) SetNillableIP(s *string) *AdminLoginLogCreate {
	if s != nil {
		allc.SetIP(*s)
	}
	return allc
}

// SetCity sets the "city" field.
func (allc *AdminLoginLogCreate) SetCity(s string) *AdminLoginLogCreate {
	allc.mutation.SetCity(s)
	return allc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (allc *AdminLoginLogCreate) SetNillableCity(s *string) *AdminLoginLogCreate {
	if s != nil {
		allc.SetCity(*s)
	}
	return allc
}

// SetBrowser sets the "browser" field.
func (allc *AdminLoginLogCreate) SetBrowser(s string) *AdminLoginLogCreate {
	allc.mutation.SetBrowser(s)
	return allc
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (allc *AdminLoginLogCreate) SetNillableBrowser(s *string) *AdminLoginLogCreate {
	if s != nil {
		allc.SetBrowser(*s)
	}
	return allc
}

// SetAdminID sets the "admin_id" field.
func (allc *AdminLoginLogCreate) SetAdminID(i int) *AdminLoginLogCreate {
	allc.mutation.SetAdminID(i)
	return allc
}

// SetNillableAdminID sets the "admin_id" field if the given value is not nil.
func (allc *AdminLoginLogCreate) SetNillableAdminID(i *int) *AdminLoginLogCreate {
	if i != nil {
		allc.SetAdminID(*i)
	}
	return allc
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (allc *AdminLoginLogCreate) SetAdmin(a *Admin) *AdminLoginLogCreate {
	return allc.SetAdminID(a.ID)
}

// Mutation returns the AdminLoginLogMutation object of the builder.
func (allc *AdminLoginLogCreate) Mutation() *AdminLoginLogMutation {
	return allc.mutation
}

// Save creates the AdminLoginLog in the database.
func (allc *AdminLoginLogCreate) Save(ctx context.Context) (*AdminLoginLog, error) {
	var (
		err  error
		node *AdminLoginLog
	)
	allc.defaults()
	if len(allc.hooks) == 0 {
		if err = allc.check(); err != nil {
			return nil, err
		}
		node, err = allc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = allc.check(); err != nil {
				return nil, err
			}
			allc.mutation = mutation
			node, err = allc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(allc.hooks) - 1; i >= 0; i-- {
			mut = allc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, allc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (allc *AdminLoginLogCreate) SaveX(ctx context.Context) *AdminLoginLog {
	v, err := allc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (allc *AdminLoginLogCreate) defaults() {
	if _, ok := allc.mutation.CreatedAt(); !ok {
		v := adminloginlog.DefaultCreatedAt()
		allc.mutation.SetCreatedAt(v)
	}
	if _, ok := allc.mutation.UpdatedAt(); !ok {
		v := adminloginlog.DefaultUpdatedAt()
		allc.mutation.SetUpdatedAt(v)
	}
	if _, ok := allc.mutation.IP(); !ok {
		v := adminloginlog.DefaultIP
		allc.mutation.SetIP(v)
	}
	if _, ok := allc.mutation.City(); !ok {
		v := adminloginlog.DefaultCity
		allc.mutation.SetCity(v)
	}
	if _, ok := allc.mutation.Browser(); !ok {
		v := adminloginlog.DefaultBrowser
		allc.mutation.SetBrowser(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (allc *AdminLoginLogCreate) check() error {
	if _, ok := allc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := allc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New("ent: missing required field \"ip\"")}
	}
	if _, ok := allc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New("ent: missing required field \"city\"")}
	}
	if _, ok := allc.mutation.Browser(); !ok {
		return &ValidationError{Name: "browser", err: errors.New("ent: missing required field \"browser\"")}
	}
	return nil
}

func (allc *AdminLoginLogCreate) sqlSave(ctx context.Context) (*AdminLoginLog, error) {
	_node, _spec := allc.createSpec()
	if err := sqlgraph.CreateNode(ctx, allc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (allc *AdminLoginLogCreate) createSpec() (*AdminLoginLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminLoginLog{config: allc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: adminloginlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminloginlog.FieldID,
			},
		}
	)
	if value, ok := allc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := allc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminloginlog.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := allc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminloginlog.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := allc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminloginlog.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := allc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := allc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldCity,
		})
		_node.City = value
	}
	if value, ok := allc.mutation.Browser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminloginlog.FieldBrowser,
		})
		_node.Browser = value
	}
	if nodes := allc.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminloginlog.AdminTable,
			Columns: []string{adminloginlog.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AdminID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminLoginLogCreateBulk is the builder for creating many AdminLoginLog entities in bulk.
type AdminLoginLogCreateBulk struct {
	config
	builders []*AdminLoginLogCreate
}

// Save creates the AdminLoginLog entities in the database.
func (allcb *AdminLoginLogCreateBulk) Save(ctx context.Context) ([]*AdminLoginLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(allcb.builders))
	nodes := make([]*AdminLoginLog, len(allcb.builders))
	mutators := make([]Mutator, len(allcb.builders))
	for i := range allcb.builders {
		func(i int, root context.Context) {
			builder := allcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminLoginLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, allcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, allcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, allcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (allcb *AdminLoginLogCreateBulk) SaveX(ctx context.Context) []*AdminLoginLog {
	v, err := allcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

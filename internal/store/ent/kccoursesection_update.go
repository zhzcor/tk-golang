// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"tkserver/internal/store/ent/kccoursechapter"
	"tkserver/internal/store/ent/kccoursesection"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseSectionUpdate is the builder for updating KcCourseSection entities.
type KcCourseSectionUpdate struct {
	config
	hooks    []Hook
	mutation *KcCourseSectionMutation
}

// Where adds a new predicate for the KcCourseSectionUpdate builder.
func (kcsu *KcCourseSectionUpdate) Where(ps ...predicate.KcCourseSection) *KcCourseSectionUpdate {
	kcsu.mutation.predicates = append(kcsu.mutation.predicates, ps...)
	return kcsu
}

// SetCourseChapterID sets the "course_chapter_id" field.
func (kcsu *KcCourseSectionUpdate) SetCourseChapterID(i int) *KcCourseSectionUpdate {
	kcsu.mutation.ResetCourseChapterID()
	kcsu.mutation.SetCourseChapterID(i)
	return kcsu
}

// SetNillableCourseChapterID sets the "course_chapter_id" field if the given value is not nil.
func (kcsu *KcCourseSectionUpdate) SetNillableCourseChapterID(i *int) *KcCourseSectionUpdate {
	if i != nil {
		kcsu.SetCourseChapterID(*i)
	}
	return kcsu
}

// ClearCourseChapterID clears the value of the "course_chapter_id" field.
func (kcsu *KcCourseSectionUpdate) ClearCourseChapterID() *KcCourseSectionUpdate {
	kcsu.mutation.ClearCourseChapterID()
	return kcsu
}

// SetTitle sets the "title" field.
func (kcsu *KcCourseSectionUpdate) SetTitle(s string) *KcCourseSectionUpdate {
	kcsu.mutation.SetTitle(s)
	return kcsu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kcsu *KcCourseSectionUpdate) SetNillableTitle(s *string) *KcCourseSectionUpdate {
	if s != nil {
		kcsu.SetTitle(*s)
	}
	return kcsu
}

// SetChapterID sets the "chapter" edge to the KcCourseChapter entity by ID.
func (kcsu *KcCourseSectionUpdate) SetChapterID(id int) *KcCourseSectionUpdate {
	kcsu.mutation.SetChapterID(id)
	return kcsu
}

// SetNillableChapterID sets the "chapter" edge to the KcCourseChapter entity by ID if the given value is not nil.
func (kcsu *KcCourseSectionUpdate) SetNillableChapterID(id *int) *KcCourseSectionUpdate {
	if id != nil {
		kcsu = kcsu.SetChapterID(*id)
	}
	return kcsu
}

// SetChapter sets the "chapter" edge to the KcCourseChapter entity.
func (kcsu *KcCourseSectionUpdate) SetChapter(k *KcCourseChapter) *KcCourseSectionUpdate {
	return kcsu.SetChapterID(k.ID)
}

// AddCourseSmallSectionIDs adds the "course_small_sections" edge to the KcCourseSmallCategory entity by IDs.
func (kcsu *KcCourseSectionUpdate) AddCourseSmallSectionIDs(ids ...int) *KcCourseSectionUpdate {
	kcsu.mutation.AddCourseSmallSectionIDs(ids...)
	return kcsu
}

// AddCourseSmallSections adds the "course_small_sections" edges to the KcCourseSmallCategory entity.
func (kcsu *KcCourseSectionUpdate) AddCourseSmallSections(k ...*KcCourseSmallCategory) *KcCourseSectionUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcsu.AddCourseSmallSectionIDs(ids...)
}

// Mutation returns the KcCourseSectionMutation object of the builder.
func (kcsu *KcCourseSectionUpdate) Mutation() *KcCourseSectionMutation {
	return kcsu.mutation
}

// ClearChapter clears the "chapter" edge to the KcCourseChapter entity.
func (kcsu *KcCourseSectionUpdate) ClearChapter() *KcCourseSectionUpdate {
	kcsu.mutation.ClearChapter()
	return kcsu
}

// ClearCourseSmallSections clears all "course_small_sections" edges to the KcCourseSmallCategory entity.
func (kcsu *KcCourseSectionUpdate) ClearCourseSmallSections() *KcCourseSectionUpdate {
	kcsu.mutation.ClearCourseSmallSections()
	return kcsu
}

// RemoveCourseSmallSectionIDs removes the "course_small_sections" edge to KcCourseSmallCategory entities by IDs.
func (kcsu *KcCourseSectionUpdate) RemoveCourseSmallSectionIDs(ids ...int) *KcCourseSectionUpdate {
	kcsu.mutation.RemoveCourseSmallSectionIDs(ids...)
	return kcsu
}

// RemoveCourseSmallSections removes "course_small_sections" edges to KcCourseSmallCategory entities.
func (kcsu *KcCourseSectionUpdate) RemoveCourseSmallSections(k ...*KcCourseSmallCategory) *KcCourseSectionUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcsu.RemoveCourseSmallSectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcsu *KcCourseSectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(kcsu.hooks) == 0 {
		affected, err = kcsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcsu.mutation = mutation
			affected, err = kcsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcsu.hooks) - 1; i >= 0; i-- {
			mut = kcsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcsu *KcCourseSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := kcsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcsu *KcCourseSectionUpdate) Exec(ctx context.Context) error {
	_, err := kcsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcsu *KcCourseSectionUpdate) ExecX(ctx context.Context) {
	if err := kcsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kcsu *KcCourseSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursesection.Table,
			Columns: kccoursesection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursesection.FieldID,
			},
		},
	}
	if ps := kcsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcsu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesection.FieldTitle,
		})
	}
	if kcsu.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesection.ChapterTable,
			Columns: []string{kccoursesection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcsu.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesection.ChapterTable,
			Columns: []string{kccoursesection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcsu.mutation.CourseSmallSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesection.CourseSmallSectionsTable,
			Columns: []string{kccoursesection.CourseSmallSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcsu.mutation.RemovedCourseSmallSectionsIDs(); len(nodes) > 0 && !kcsu.mutation.CourseSmallSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesection.CourseSmallSectionsTable,
			Columns: []string{kccoursesection.CourseSmallSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcsu.mutation.CourseSmallSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesection.CourseSmallSectionsTable,
			Columns: []string{kccoursesection.CourseSmallSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccoursesection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KcCourseSectionUpdateOne is the builder for updating a single KcCourseSection entity.
type KcCourseSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KcCourseSectionMutation
}

// SetCourseChapterID sets the "course_chapter_id" field.
func (kcsuo *KcCourseSectionUpdateOne) SetCourseChapterID(i int) *KcCourseSectionUpdateOne {
	kcsuo.mutation.ResetCourseChapterID()
	kcsuo.mutation.SetCourseChapterID(i)
	return kcsuo
}

// SetNillableCourseChapterID sets the "course_chapter_id" field if the given value is not nil.
func (kcsuo *KcCourseSectionUpdateOne) SetNillableCourseChapterID(i *int) *KcCourseSectionUpdateOne {
	if i != nil {
		kcsuo.SetCourseChapterID(*i)
	}
	return kcsuo
}

// ClearCourseChapterID clears the value of the "course_chapter_id" field.
func (kcsuo *KcCourseSectionUpdateOne) ClearCourseChapterID() *KcCourseSectionUpdateOne {
	kcsuo.mutation.ClearCourseChapterID()
	return kcsuo
}

// SetTitle sets the "title" field.
func (kcsuo *KcCourseSectionUpdateOne) SetTitle(s string) *KcCourseSectionUpdateOne {
	kcsuo.mutation.SetTitle(s)
	return kcsuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kcsuo *KcCourseSectionUpdateOne) SetNillableTitle(s *string) *KcCourseSectionUpdateOne {
	if s != nil {
		kcsuo.SetTitle(*s)
	}
	return kcsuo
}

// SetChapterID sets the "chapter" edge to the KcCourseChapter entity by ID.
func (kcsuo *KcCourseSectionUpdateOne) SetChapterID(id int) *KcCourseSectionUpdateOne {
	kcsuo.mutation.SetChapterID(id)
	return kcsuo
}

// SetNillableChapterID sets the "chapter" edge to the KcCourseChapter entity by ID if the given value is not nil.
func (kcsuo *KcCourseSectionUpdateOne) SetNillableChapterID(id *int) *KcCourseSectionUpdateOne {
	if id != nil {
		kcsuo = kcsuo.SetChapterID(*id)
	}
	return kcsuo
}

// SetChapter sets the "chapter" edge to the KcCourseChapter entity.
func (kcsuo *KcCourseSectionUpdateOne) SetChapter(k *KcCourseChapter) *KcCourseSectionUpdateOne {
	return kcsuo.SetChapterID(k.ID)
}

// AddCourseSmallSectionIDs adds the "course_small_sections" edge to the KcCourseSmallCategory entity by IDs.
func (kcsuo *KcCourseSectionUpdateOne) AddCourseSmallSectionIDs(ids ...int) *KcCourseSectionUpdateOne {
	kcsuo.mutation.AddCourseSmallSectionIDs(ids...)
	return kcsuo
}

// AddCourseSmallSections adds the "course_small_sections" edges to the KcCourseSmallCategory entity.
func (kcsuo *KcCourseSectionUpdateOne) AddCourseSmallSections(k ...*KcCourseSmallCategory) *KcCourseSectionUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcsuo.AddCourseSmallSectionIDs(ids...)
}

// Mutation returns the KcCourseSectionMutation object of the builder.
func (kcsuo *KcCourseSectionUpdateOne) Mutation() *KcCourseSectionMutation {
	return kcsuo.mutation
}

// ClearChapter clears the "chapter" edge to the KcCourseChapter entity.
func (kcsuo *KcCourseSectionUpdateOne) ClearChapter() *KcCourseSectionUpdateOne {
	kcsuo.mutation.ClearChapter()
	return kcsuo
}

// ClearCourseSmallSections clears all "course_small_sections" edges to the KcCourseSmallCategory entity.
func (kcsuo *KcCourseSectionUpdateOne) ClearCourseSmallSections() *KcCourseSectionUpdateOne {
	kcsuo.mutation.ClearCourseSmallSections()
	return kcsuo
}

// RemoveCourseSmallSectionIDs removes the "course_small_sections" edge to KcCourseSmallCategory entities by IDs.
func (kcsuo *KcCourseSectionUpdateOne) RemoveCourseSmallSectionIDs(ids ...int) *KcCourseSectionUpdateOne {
	kcsuo.mutation.RemoveCourseSmallSectionIDs(ids...)
	return kcsuo
}

// RemoveCourseSmallSections removes "course_small_sections" edges to KcCourseSmallCategory entities.
func (kcsuo *KcCourseSectionUpdateOne) RemoveCourseSmallSections(k ...*KcCourseSmallCategory) *KcCourseSectionUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcsuo.RemoveCourseSmallSectionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kcsuo *KcCourseSectionUpdateOne) Select(field string, fields ...string) *KcCourseSectionUpdateOne {
	kcsuo.fields = append([]string{field}, fields...)
	return kcsuo
}

// Save executes the query and returns the updated KcCourseSection entity.
func (kcsuo *KcCourseSectionUpdateOne) Save(ctx context.Context) (*KcCourseSection, error) {
	var (
		err  error
		node *KcCourseSection
	)
	if len(kcsuo.hooks) == 0 {
		node, err = kcsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcsuo.mutation = mutation
			node, err = kcsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcsuo.hooks) - 1; i >= 0; i-- {
			mut = kcsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcsuo *KcCourseSectionUpdateOne) SaveX(ctx context.Context) *KcCourseSection {
	node, err := kcsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcsuo *KcCourseSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := kcsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcsuo *KcCourseSectionUpdateOne) ExecX(ctx context.Context) {
	if err := kcsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kcsuo *KcCourseSectionUpdateOne) sqlSave(ctx context.Context) (_node *KcCourseSection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursesection.Table,
			Columns: kccoursesection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursesection.FieldID,
			},
		},
	}
	id, ok := kcsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KcCourseSection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kcsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kccoursesection.FieldID)
		for _, f := range fields {
			if !kccoursesection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kccoursesection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kcsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcsuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesection.FieldTitle,
		})
	}
	if kcsuo.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesection.ChapterTable,
			Columns: []string{kccoursesection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcsuo.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesection.ChapterTable,
			Columns: []string{kccoursesection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcsuo.mutation.CourseSmallSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesection.CourseSmallSectionsTable,
			Columns: []string{kccoursesection.CourseSmallSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcsuo.mutation.RemovedCourseSmallSectionsIDs(); len(nodes) > 0 && !kcsuo.mutation.CourseSmallSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesection.CourseSmallSectionsTable,
			Columns: []string{kccoursesection.CourseSmallSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcsuo.mutation.CourseSmallSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesection.CourseSmallSectionsTable,
			Columns: []string{kccoursesection.CourseSmallSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KcCourseSection{config: kcsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kcsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccoursesection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursechapter"
	"tkserver/internal/store/ent/kccoursesection"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kcsmallcategoryattachment"
	"tkserver/internal/store/ent/kcsmallcategoryexampaper"
	"tkserver/internal/store/ent/kcsmallcategoryquestion"
	"tkserver/internal/store/ent/usercourseappraise"
	"tkserver/internal/store/ent/videorecord"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseSmallCategoryCreate is the builder for creating a KcCourseSmallCategory entity.
type KcCourseSmallCategoryCreate struct {
	config
	mutation *KcCourseSmallCategoryMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (kcscc *KcCourseSmallCategoryCreate) SetUUID(s string) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetUUID(s)
	return kcscc
}

// SetCreatedAt sets the "created_at" field.
func (kcscc *KcCourseSmallCategoryCreate) SetCreatedAt(t time.Time) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetCreatedAt(t)
	return kcscc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableCreatedAt(t *time.Time) *KcCourseSmallCategoryCreate {
	if t != nil {
		kcscc.SetCreatedAt(*t)
	}
	return kcscc
}

// SetUpdatedAt sets the "updated_at" field.
func (kcscc *KcCourseSmallCategoryCreate) SetUpdatedAt(t time.Time) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetUpdatedAt(t)
	return kcscc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableUpdatedAt(t *time.Time) *KcCourseSmallCategoryCreate {
	if t != nil {
		kcscc.SetUpdatedAt(*t)
	}
	return kcscc
}

// SetDeletedAt sets the "deleted_at" field.
func (kcscc *KcCourseSmallCategoryCreate) SetDeletedAt(t time.Time) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetDeletedAt(t)
	return kcscc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableDeletedAt(t *time.Time) *KcCourseSmallCategoryCreate {
	if t != nil {
		kcscc.SetDeletedAt(*t)
	}
	return kcscc
}

// SetSmallName sets the "small_name" field.
func (kcscc *KcCourseSmallCategoryCreate) SetSmallName(s string) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetSmallName(s)
	return kcscc
}

// SetNillableSmallName sets the "small_name" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableSmallName(s *string) *KcCourseSmallCategoryCreate {
	if s != nil {
		kcscc.SetSmallName(*s)
	}
	return kcscc
}

// SetViewingTime sets the "viewing_time" field.
func (kcscc *KcCourseSmallCategoryCreate) SetViewingTime(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetViewingTime(i)
	return kcscc
}

// SetNillableViewingTime sets the "viewing_time" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableViewingTime(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetViewingTime(*i)
	}
	return kcscc
}

// SetFinishType sets the "finish_type" field.
func (kcscc *KcCourseSmallCategoryCreate) SetFinishType(u uint8) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetFinishType(u)
	return kcscc
}

// SetNillableFinishType sets the "finish_type" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableFinishType(u *uint8) *KcCourseSmallCategoryCreate {
	if u != nil {
		kcscc.SetFinishType(*u)
	}
	return kcscc
}

// SetTeachType sets the "teach_type" field.
func (kcscc *KcCourseSmallCategoryCreate) SetTeachType(u uint8) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetTeachType(u)
	return kcscc
}

// SetNillableTeachType sets the "teach_type" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableTeachType(u *uint8) *KcCourseSmallCategoryCreate {
	if u != nil {
		kcscc.SetTeachType(*u)
	}
	return kcscc
}

// SetType sets the "type" field.
func (kcscc *KcCourseSmallCategoryCreate) SetType(u uint8) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetType(u)
	return kcscc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableType(u *uint8) *KcCourseSmallCategoryCreate {
	if u != nil {
		kcscc.SetType(*u)
	}
	return kcscc
}

// SetLiveSmallStart sets the "live_small_start" field.
func (kcscc *KcCourseSmallCategoryCreate) SetLiveSmallStart(t time.Time) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetLiveSmallStart(t)
	return kcscc
}

// SetNillableLiveSmallStart sets the "live_small_start" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableLiveSmallStart(t *time.Time) *KcCourseSmallCategoryCreate {
	if t != nil {
		kcscc.SetLiveSmallStart(*t)
	}
	return kcscc
}

// SetLiveSmallStatus sets the "live_small_status" field.
func (kcscc *KcCourseSmallCategoryCreate) SetLiveSmallStatus(i int8) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetLiveSmallStatus(i)
	return kcscc
}

// SetNillableLiveSmallStatus sets the "live_small_status" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableLiveSmallStatus(i *int8) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetLiveSmallStatus(*i)
	}
	return kcscc
}

// SetLiveRoomID sets the "live_room_id" field.
func (kcscc *KcCourseSmallCategoryCreate) SetLiveRoomID(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetLiveRoomID(i)
	return kcscc
}

// SetNillableLiveRoomID sets the "live_room_id" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableLiveRoomID(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetLiveRoomID(*i)
	}
	return kcscc
}

// SetBackVideoID sets the "back_video_id" field.
func (kcscc *KcCourseSmallCategoryCreate) SetBackVideoID(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetBackVideoID(i)
	return kcscc
}

// SetNillableBackVideoID sets the "back_video_id" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableBackVideoID(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetBackVideoID(*i)
	}
	return kcscc
}

// SetFalseVideoID sets the "false_video_id" field.
func (kcscc *KcCourseSmallCategoryCreate) SetFalseVideoID(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetFalseVideoID(i)
	return kcscc
}

// SetNillableFalseVideoID sets the "false_video_id" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableFalseVideoID(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetFalseVideoID(*i)
	}
	return kcscc
}

// SetOrderVideoID sets the "order_video_id" field.
func (kcscc *KcCourseSmallCategoryCreate) SetOrderVideoID(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetOrderVideoID(i)
	return kcscc
}

// SetNillableOrderVideoID sets the "order_video_id" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableOrderVideoID(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetOrderVideoID(*i)
	}
	return kcscc
}

// SetOrderVideoAttachID sets the "order_video_attach_id" field.
func (kcscc *KcCourseSmallCategoryCreate) SetOrderVideoAttachID(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetOrderVideoAttachID(i)
	return kcscc
}

// SetNillableOrderVideoAttachID sets the "order_video_attach_id" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableOrderVideoAttachID(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetOrderVideoAttachID(*i)
	}
	return kcscc
}

// SetLiveSmallTime sets the "live_small_time" field.
func (kcscc *KcCourseSmallCategoryCreate) SetLiveSmallTime(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetLiveSmallTime(i)
	return kcscc
}

// SetNillableLiveSmallTime sets the "live_small_time" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableLiveSmallTime(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetLiveSmallTime(*i)
	}
	return kcscc
}

// SetPushStatus sets the "push_status" field.
func (kcscc *KcCourseSmallCategoryCreate) SetPushStatus(u uint8) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetPushStatus(u)
	return kcscc
}

// SetNillablePushStatus sets the "push_status" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillablePushStatus(u *uint8) *KcCourseSmallCategoryCreate {
	if u != nil {
		kcscc.SetPushStatus(*u)
	}
	return kcscc
}

// SetLiveSmallRemark sets the "live_small_remark" field.
func (kcscc *KcCourseSmallCategoryCreate) SetLiveSmallRemark(s string) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetLiveSmallRemark(s)
	return kcscc
}

// SetNillableLiveSmallRemark sets the "live_small_remark" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableLiveSmallRemark(s *string) *KcCourseSmallCategoryCreate {
	if s != nil {
		kcscc.SetLiveSmallRemark(*s)
	}
	return kcscc
}

// SetCoursewareAttachID sets the "courseware_attach_id" field.
func (kcscc *KcCourseSmallCategoryCreate) SetCoursewareAttachID(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetCoursewareAttachID(i)
	return kcscc
}

// SetNillableCoursewareAttachID sets the "courseware_attach_id" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableCoursewareAttachID(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetCoursewareAttachID(*i)
	}
	return kcscc
}

// SetCoursewareName sets the "courseware_name" field.
func (kcscc *KcCourseSmallCategoryCreate) SetCoursewareName(s string) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetCoursewareName(s)
	return kcscc
}

// SetNillableCoursewareName sets the "courseware_name" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableCoursewareName(s *string) *KcCourseSmallCategoryCreate {
	if s != nil {
		kcscc.SetCoursewareName(*s)
	}
	return kcscc
}

// SetAttachmentCount sets the "attachment_count" field.
func (kcscc *KcCourseSmallCategoryCreate) SetAttachmentCount(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetAttachmentCount(i)
	return kcscc
}

// SetNillableAttachmentCount sets the "attachment_count" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableAttachmentCount(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetAttachmentCount(*i)
	}
	return kcscc
}

// SetQuestionCount sets the "question_count" field.
func (kcscc *KcCourseSmallCategoryCreate) SetQuestionCount(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetQuestionCount(i)
	return kcscc
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableQuestionCount(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetQuestionCount(*i)
	}
	return kcscc
}

// SetExamCount sets the "exam_count" field.
func (kcscc *KcCourseSmallCategoryCreate) SetExamCount(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetExamCount(i)
	return kcscc
}

// SetNillableExamCount sets the "exam_count" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableExamCount(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetExamCount(*i)
	}
	return kcscc
}

// SetHomeworkCount sets the "homework_count" field.
func (kcscc *KcCourseSmallCategoryCreate) SetHomeworkCount(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetHomeworkCount(i)
	return kcscc
}

// SetNillableHomeworkCount sets the "homework_count" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableHomeworkCount(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetHomeworkCount(*i)
	}
	return kcscc
}

// SetStudyCount sets the "study_count" field.
func (kcscc *KcCourseSmallCategoryCreate) SetStudyCount(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetStudyCount(i)
	return kcscc
}

// SetNillableStudyCount sets the "study_count" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableStudyCount(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetStudyCount(*i)
	}
	return kcscc
}

// SetFinishCount sets the "finish_count" field.
func (kcscc *KcCourseSmallCategoryCreate) SetFinishCount(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetFinishCount(i)
	return kcscc
}

// SetNillableFinishCount sets the "finish_count" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableFinishCount(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetFinishCount(*i)
	}
	return kcscc
}

// SetAverageViewDuration sets the "average_view_duration" field.
func (kcscc *KcCourseSmallCategoryCreate) SetAverageViewDuration(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetAverageViewDuration(i)
	return kcscc
}

// SetNillableAverageViewDuration sets the "average_view_duration" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableAverageViewDuration(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetAverageViewDuration(*i)
	}
	return kcscc
}

// SetCourseID sets the "course_id" field.
func (kcscc *KcCourseSmallCategoryCreate) SetCourseID(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetCourseID(i)
	return kcscc
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableCourseID(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetCourseID(*i)
	}
	return kcscc
}

// SetChapterID sets the "chapter_id" field.
func (kcscc *KcCourseSmallCategoryCreate) SetChapterID(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetChapterID(i)
	return kcscc
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableChapterID(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetChapterID(*i)
	}
	return kcscc
}

// SetSectionID sets the "section_id" field.
func (kcscc *KcCourseSmallCategoryCreate) SetSectionID(i int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetSectionID(i)
	return kcscc
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableSectionID(i *int) *KcCourseSmallCategoryCreate {
	if i != nil {
		kcscc.SetSectionID(*i)
	}
	return kcscc
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (kcscc *KcCourseSmallCategoryCreate) SetCourse(k *KcCourse) *KcCourseSmallCategoryCreate {
	return kcscc.SetCourseID(k.ID)
}

// SetChapter sets the "chapter" edge to the KcCourseChapter entity.
func (kcscc *KcCourseSmallCategoryCreate) SetChapter(k *KcCourseChapter) *KcCourseSmallCategoryCreate {
	return kcscc.SetChapterID(k.ID)
}

// SetSection sets the "section" edge to the KcCourseSection entity.
func (kcscc *KcCourseSmallCategoryCreate) SetSection(k *KcCourseSection) *KcCourseSmallCategoryCreate {
	return kcscc.SetSectionID(k.ID)
}

// AddCourseSmallCategoryAttachmentIDs adds the "course_small_category_attachments" edge to the KcSmallCategoryAttachment entity by IDs.
func (kcscc *KcCourseSmallCategoryCreate) AddCourseSmallCategoryAttachmentIDs(ids ...int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.AddCourseSmallCategoryAttachmentIDs(ids...)
	return kcscc
}

// AddCourseSmallCategoryAttachments adds the "course_small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (kcscc *KcCourseSmallCategoryCreate) AddCourseSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *KcCourseSmallCategoryCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscc.AddCourseSmallCategoryAttachmentIDs(ids...)
}

// AddCourseSmallCategoryExampaperIDs adds the "course_small_category_exampapers" edge to the KcSmallCategoryExamPaper entity by IDs.
func (kcscc *KcCourseSmallCategoryCreate) AddCourseSmallCategoryExampaperIDs(ids ...int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.AddCourseSmallCategoryExampaperIDs(ids...)
	return kcscc
}

// AddCourseSmallCategoryExampapers adds the "course_small_category_exampapers" edges to the KcSmallCategoryExamPaper entity.
func (kcscc *KcCourseSmallCategoryCreate) AddCourseSmallCategoryExampapers(k ...*KcSmallCategoryExamPaper) *KcCourseSmallCategoryCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscc.AddCourseSmallCategoryExampaperIDs(ids...)
}

// AddCourseSmallCategoryQuestionIDs adds the "course_small_category_questions" edge to the KcSmallCategoryQuestion entity by IDs.
func (kcscc *KcCourseSmallCategoryCreate) AddCourseSmallCategoryQuestionIDs(ids ...int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.AddCourseSmallCategoryQuestionIDs(ids...)
	return kcscc
}

// AddCourseSmallCategoryQuestions adds the "course_small_category_questions" edges to the KcSmallCategoryQuestion entity.
func (kcscc *KcCourseSmallCategoryCreate) AddCourseSmallCategoryQuestions(k ...*KcSmallCategoryQuestion) *KcCourseSmallCategoryCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscc.AddCourseSmallCategoryQuestionIDs(ids...)
}

// AddCourseAppraiseSmallIDs adds the "course_appraise_smalls" edge to the UserCourseAppraise entity by IDs.
func (kcscc *KcCourseSmallCategoryCreate) AddCourseAppraiseSmallIDs(ids ...int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.AddCourseAppraiseSmallIDs(ids...)
	return kcscc
}

// AddCourseAppraiseSmalls adds the "course_appraise_smalls" edges to the UserCourseAppraise entity.
func (kcscc *KcCourseSmallCategoryCreate) AddCourseAppraiseSmalls(u ...*UserCourseAppraise) *KcCourseSmallCategoryCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return kcscc.AddCourseAppraiseSmallIDs(ids...)
}

// AddVideoRecordSmallIDs adds the "video_record_small" edge to the VideoRecord entity by IDs.
func (kcscc *KcCourseSmallCategoryCreate) AddVideoRecordSmallIDs(ids ...int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.AddVideoRecordSmallIDs(ids...)
	return kcscc
}

// AddVideoRecordSmall adds the "video_record_small" edges to the VideoRecord entity.
func (kcscc *KcCourseSmallCategoryCreate) AddVideoRecordSmall(v ...*VideoRecord) *KcCourseSmallCategoryCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return kcscc.AddVideoRecordSmallIDs(ids...)
}

// SetCsAttachmentID sets the "cs_attachment" edge to the Attachment entity by ID.
func (kcscc *KcCourseSmallCategoryCreate) SetCsAttachmentID(id int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetCsAttachmentID(id)
	return kcscc
}

// SetNillableCsAttachmentID sets the "cs_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableCsAttachmentID(id *int) *KcCourseSmallCategoryCreate {
	if id != nil {
		kcscc = kcscc.SetCsAttachmentID(*id)
	}
	return kcscc
}

// SetCsAttachment sets the "cs_attachment" edge to the Attachment entity.
func (kcscc *KcCourseSmallCategoryCreate) SetCsAttachment(a *Attachment) *KcCourseSmallCategoryCreate {
	return kcscc.SetCsAttachmentID(a.ID)
}

// SetOdAttachmentID sets the "od_attachment" edge to the Attachment entity by ID.
func (kcscc *KcCourseSmallCategoryCreate) SetOdAttachmentID(id int) *KcCourseSmallCategoryCreate {
	kcscc.mutation.SetOdAttachmentID(id)
	return kcscc
}

// SetNillableOdAttachmentID sets the "od_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (kcscc *KcCourseSmallCategoryCreate) SetNillableOdAttachmentID(id *int) *KcCourseSmallCategoryCreate {
	if id != nil {
		kcscc = kcscc.SetOdAttachmentID(*id)
	}
	return kcscc
}

// SetOdAttachment sets the "od_attachment" edge to the Attachment entity.
func (kcscc *KcCourseSmallCategoryCreate) SetOdAttachment(a *Attachment) *KcCourseSmallCategoryCreate {
	return kcscc.SetOdAttachmentID(a.ID)
}

// Mutation returns the KcCourseSmallCategoryMutation object of the builder.
func (kcscc *KcCourseSmallCategoryCreate) Mutation() *KcCourseSmallCategoryMutation {
	return kcscc.mutation
}

// Save creates the KcCourseSmallCategory in the database.
func (kcscc *KcCourseSmallCategoryCreate) Save(ctx context.Context) (*KcCourseSmallCategory, error) {
	var (
		err  error
		node *KcCourseSmallCategory
	)
	kcscc.defaults()
	if len(kcscc.hooks) == 0 {
		if err = kcscc.check(); err != nil {
			return nil, err
		}
		node, err = kcscc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseSmallCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcscc.check(); err != nil {
				return nil, err
			}
			kcscc.mutation = mutation
			node, err = kcscc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcscc.hooks) - 1; i >= 0; i-- {
			mut = kcscc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcscc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kcscc *KcCourseSmallCategoryCreate) SaveX(ctx context.Context) *KcCourseSmallCategory {
	v, err := kcscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (kcscc *KcCourseSmallCategoryCreate) defaults() {
	if _, ok := kcscc.mutation.CreatedAt(); !ok {
		v := kccoursesmallcategory.DefaultCreatedAt()
		kcscc.mutation.SetCreatedAt(v)
	}
	if _, ok := kcscc.mutation.UpdatedAt(); !ok {
		v := kccoursesmallcategory.DefaultUpdatedAt()
		kcscc.mutation.SetUpdatedAt(v)
	}
	if _, ok := kcscc.mutation.SmallName(); !ok {
		v := kccoursesmallcategory.DefaultSmallName
		kcscc.mutation.SetSmallName(v)
	}
	if _, ok := kcscc.mutation.ViewingTime(); !ok {
		v := kccoursesmallcategory.DefaultViewingTime
		kcscc.mutation.SetViewingTime(v)
	}
	if _, ok := kcscc.mutation.FinishType(); !ok {
		v := kccoursesmallcategory.DefaultFinishType
		kcscc.mutation.SetFinishType(v)
	}
	if _, ok := kcscc.mutation.TeachType(); !ok {
		v := kccoursesmallcategory.DefaultTeachType
		kcscc.mutation.SetTeachType(v)
	}
	if _, ok := kcscc.mutation.GetType(); !ok {
		v := kccoursesmallcategory.DefaultType
		kcscc.mutation.SetType(v)
	}
	if _, ok := kcscc.mutation.LiveSmallStatus(); !ok {
		v := kccoursesmallcategory.DefaultLiveSmallStatus
		kcscc.mutation.SetLiveSmallStatus(v)
	}
	if _, ok := kcscc.mutation.LiveSmallTime(); !ok {
		v := kccoursesmallcategory.DefaultLiveSmallTime
		kcscc.mutation.SetLiveSmallTime(v)
	}
	if _, ok := kcscc.mutation.PushStatus(); !ok {
		v := kccoursesmallcategory.DefaultPushStatus
		kcscc.mutation.SetPushStatus(v)
	}
	if _, ok := kcscc.mutation.LiveSmallRemark(); !ok {
		v := kccoursesmallcategory.DefaultLiveSmallRemark
		kcscc.mutation.SetLiveSmallRemark(v)
	}
	if _, ok := kcscc.mutation.CoursewareName(); !ok {
		v := kccoursesmallcategory.DefaultCoursewareName
		kcscc.mutation.SetCoursewareName(v)
	}
	if _, ok := kcscc.mutation.AttachmentCount(); !ok {
		v := kccoursesmallcategory.DefaultAttachmentCount
		kcscc.mutation.SetAttachmentCount(v)
	}
	if _, ok := kcscc.mutation.QuestionCount(); !ok {
		v := kccoursesmallcategory.DefaultQuestionCount
		kcscc.mutation.SetQuestionCount(v)
	}
	if _, ok := kcscc.mutation.ExamCount(); !ok {
		v := kccoursesmallcategory.DefaultExamCount
		kcscc.mutation.SetExamCount(v)
	}
	if _, ok := kcscc.mutation.HomeworkCount(); !ok {
		v := kccoursesmallcategory.DefaultHomeworkCount
		kcscc.mutation.SetHomeworkCount(v)
	}
	if _, ok := kcscc.mutation.StudyCount(); !ok {
		v := kccoursesmallcategory.DefaultStudyCount
		kcscc.mutation.SetStudyCount(v)
	}
	if _, ok := kcscc.mutation.FinishCount(); !ok {
		v := kccoursesmallcategory.DefaultFinishCount
		kcscc.mutation.SetFinishCount(v)
	}
	if _, ok := kcscc.mutation.AverageViewDuration(); !ok {
		v := kccoursesmallcategory.DefaultAverageViewDuration
		kcscc.mutation.SetAverageViewDuration(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcscc *KcCourseSmallCategoryCreate) check() error {
	if _, ok := kcscc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := kcscc.mutation.SmallName(); !ok {
		return &ValidationError{Name: "small_name", err: errors.New("ent: missing required field \"small_name\"")}
	}
	if _, ok := kcscc.mutation.ViewingTime(); !ok {
		return &ValidationError{Name: "viewing_time", err: errors.New("ent: missing required field \"viewing_time\"")}
	}
	if _, ok := kcscc.mutation.FinishType(); !ok {
		return &ValidationError{Name: "finish_type", err: errors.New("ent: missing required field \"finish_type\"")}
	}
	if _, ok := kcscc.mutation.TeachType(); !ok {
		return &ValidationError{Name: "teach_type", err: errors.New("ent: missing required field \"teach_type\"")}
	}
	if _, ok := kcscc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := kcscc.mutation.LiveSmallStatus(); !ok {
		return &ValidationError{Name: "live_small_status", err: errors.New("ent: missing required field \"live_small_status\"")}
	}
	if _, ok := kcscc.mutation.LiveSmallTime(); !ok {
		return &ValidationError{Name: "live_small_time", err: errors.New("ent: missing required field \"live_small_time\"")}
	}
	if _, ok := kcscc.mutation.PushStatus(); !ok {
		return &ValidationError{Name: "push_status", err: errors.New("ent: missing required field \"push_status\"")}
	}
	if _, ok := kcscc.mutation.LiveSmallRemark(); !ok {
		return &ValidationError{Name: "live_small_remark", err: errors.New("ent: missing required field \"live_small_remark\"")}
	}
	if _, ok := kcscc.mutation.CoursewareName(); !ok {
		return &ValidationError{Name: "courseware_name", err: errors.New("ent: missing required field \"courseware_name\"")}
	}
	if _, ok := kcscc.mutation.AttachmentCount(); !ok {
		return &ValidationError{Name: "attachment_count", err: errors.New("ent: missing required field \"attachment_count\"")}
	}
	if _, ok := kcscc.mutation.QuestionCount(); !ok {
		return &ValidationError{Name: "question_count", err: errors.New("ent: missing required field \"question_count\"")}
	}
	if _, ok := kcscc.mutation.ExamCount(); !ok {
		return &ValidationError{Name: "exam_count", err: errors.New("ent: missing required field \"exam_count\"")}
	}
	if _, ok := kcscc.mutation.HomeworkCount(); !ok {
		return &ValidationError{Name: "homework_count", err: errors.New("ent: missing required field \"homework_count\"")}
	}
	if _, ok := kcscc.mutation.StudyCount(); !ok {
		return &ValidationError{Name: "study_count", err: errors.New("ent: missing required field \"study_count\"")}
	}
	if _, ok := kcscc.mutation.FinishCount(); !ok {
		return &ValidationError{Name: "finish_count", err: errors.New("ent: missing required field \"finish_count\"")}
	}
	if _, ok := kcscc.mutation.AverageViewDuration(); !ok {
		return &ValidationError{Name: "average_view_duration", err: errors.New("ent: missing required field \"average_view_duration\"")}
	}
	return nil
}

func (kcscc *KcCourseSmallCategoryCreate) sqlSave(ctx context.Context) (*KcCourseSmallCategory, error) {
	_node, _spec := kcscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kcscc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (kcscc *KcCourseSmallCategoryCreate) createSpec() (*KcCourseSmallCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &KcCourseSmallCategory{config: kcscc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kccoursesmallcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursesmallcategory.FieldID,
			},
		}
	)
	if value, ok := kcscc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := kcscc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := kcscc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := kcscc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := kcscc.mutation.SmallName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldSmallName,
		})
		_node.SmallName = value
	}
	if value, ok := kcscc.mutation.ViewingTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldViewingTime,
		})
		_node.ViewingTime = value
	}
	if value, ok := kcscc.mutation.FinishType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishType,
		})
		_node.FinishType = value
	}
	if value, ok := kcscc.mutation.TeachType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldTeachType,
		})
		_node.TeachType = value
	}
	if value, ok := kcscc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldType,
		})
		_node.Type = value
	}
	if value, ok := kcscc.mutation.LiveSmallStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallStart,
		})
		_node.LiveSmallStart = value
	}
	if value, ok := kcscc.mutation.LiveSmallStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallStatus,
		})
		_node.LiveSmallStatus = value
	}
	if value, ok := kcscc.mutation.LiveRoomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveRoomID,
		})
		_node.LiveRoomID = value
	}
	if value, ok := kcscc.mutation.BackVideoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldBackVideoID,
		})
		_node.BackVideoID = value
	}
	if value, ok := kcscc.mutation.FalseVideoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFalseVideoID,
		})
		_node.FalseVideoID = value
	}
	if value, ok := kcscc.mutation.OrderVideoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldOrderVideoID,
		})
		_node.OrderVideoID = value
	}
	if value, ok := kcscc.mutation.LiveSmallTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallTime,
		})
		_node.LiveSmallTime = value
	}
	if value, ok := kcscc.mutation.PushStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldPushStatus,
		})
		_node.PushStatus = value
	}
	if value, ok := kcscc.mutation.LiveSmallRemark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallRemark,
		})
		_node.LiveSmallRemark = value
	}
	if value, ok := kcscc.mutation.CoursewareName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldCoursewareName,
		})
		_node.CoursewareName = value
	}
	if value, ok := kcscc.mutation.AttachmentCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAttachmentCount,
		})
		_node.AttachmentCount = value
	}
	if value, ok := kcscc.mutation.QuestionCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldQuestionCount,
		})
		_node.QuestionCount = value
	}
	if value, ok := kcscc.mutation.ExamCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldExamCount,
		})
		_node.ExamCount = value
	}
	if value, ok := kcscc.mutation.HomeworkCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldHomeworkCount,
		})
		_node.HomeworkCount = value
	}
	if value, ok := kcscc.mutation.StudyCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldStudyCount,
		})
		_node.StudyCount = value
	}
	if value, ok := kcscc.mutation.FinishCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishCount,
		})
		_node.FinishCount = value
	}
	if value, ok := kcscc.mutation.AverageViewDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAverageViewDuration,
		})
		_node.AverageViewDuration = value
	}
	if nodes := kcscc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CourseTable,
			Columns: []string{kccoursesmallcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcscc.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.ChapterTable,
			Columns: []string{kccoursesmallcategory.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChapterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcscc.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.SectionTable,
			Columns: []string{kccoursesmallcategory.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcscc.mutation.CourseSmallCategoryAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryAttachmentsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcscc.mutation.CourseSmallCategoryExampapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryExampapersTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryExampapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcscc.mutation.CourseSmallCategoryQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryQuestionsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcscc.mutation.CourseAppraiseSmallsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseAppraiseSmallsTable,
			Columns: []string{kccoursesmallcategory.CourseAppraiseSmallsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcscc.mutation.VideoRecordSmallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.VideoRecordSmallTable,
			Columns: []string{kccoursesmallcategory.VideoRecordSmallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcscc.mutation.CsAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CsAttachmentTable,
			Columns: []string{kccoursesmallcategory.CsAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CoursewareAttachID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcscc.mutation.OdAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.OdAttachmentTable,
			Columns: []string{kccoursesmallcategory.OdAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderVideoAttachID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KcCourseSmallCategoryCreateBulk is the builder for creating many KcCourseSmallCategory entities in bulk.
type KcCourseSmallCategoryCreateBulk struct {
	config
	builders []*KcCourseSmallCategoryCreate
}

// Save creates the KcCourseSmallCategory entities in the database.
func (kcsccb *KcCourseSmallCategoryCreateBulk) Save(ctx context.Context) ([]*KcCourseSmallCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcsccb.builders))
	nodes := make([]*KcCourseSmallCategory, len(kcsccb.builders))
	mutators := make([]Mutator, len(kcsccb.builders))
	for i := range kcsccb.builders {
		func(i int, root context.Context) {
			builder := kcsccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KcCourseSmallCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcsccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcsccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcsccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcsccb *KcCourseSmallCategoryCreateBulk) SaveX(ctx context.Context) []*KcCourseSmallCategory {
	v, err := kcsccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

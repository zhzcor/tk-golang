// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/city"
	"gserver/internal/store/ent/itemcategory"
	"gserver/internal/store/ent/kcclass"
	"gserver/internal/store/ent/kcclassteacher"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/kcuserclass"
	"gserver/internal/store/ent/major"
	"gserver/internal/store/ent/message"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/teacher"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcClassQuery is the builder for querying KcClass entities.
type KcClassQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.KcClass
	// eager-loading edges.
	withMajors         *MajorQuery
	withItem           *ItemCategoryQuery
	withCity           *CityQuery
	withAdmin          *AdminQuery
	withAttachment     *AttachmentQuery
	withMasterTeachers *TeacherQuery
	withClassTeachers  *KcClassTeacherQuery
	withKcClassCourses *KcCourseQuery
	withKcUserClasses  *KcUserClassQuery
	withMessageClasses *MessageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KcClassQuery builder.
func (kcq *KcClassQuery) Where(ps ...predicate.KcClass) *KcClassQuery {
	kcq.predicates = append(kcq.predicates, ps...)
	return kcq
}

// Limit adds a limit step to the query.
func (kcq *KcClassQuery) Limit(limit int) *KcClassQuery {
	kcq.limit = &limit
	return kcq
}

// Offset adds an offset step to the query.
func (kcq *KcClassQuery) Offset(offset int) *KcClassQuery {
	kcq.offset = &offset
	return kcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kcq *KcClassQuery) Unique(unique bool) *KcClassQuery {
	kcq.unique = &unique
	return kcq
}

// Order adds an order step to the query.
func (kcq *KcClassQuery) Order(o ...OrderFunc) *KcClassQuery {
	kcq.order = append(kcq.order, o...)
	return kcq
}

// QueryMajors chains the current query on the "majors" edge.
func (kcq *KcClassQuery) QueryMajors() *MajorQuery {
	query := &MajorQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(major.Table, major.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, kcclass.MajorsTable, kcclass.MajorsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItem chains the current query on the "item" edge.
func (kcq *KcClassQuery) QueryItem() *ItemCategoryQuery {
	query := &ItemCategoryQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(itemcategory.Table, itemcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, kcclass.ItemTable, kcclass.ItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (kcq *KcClassQuery) QueryCity() *CityQuery {
	query := &CityQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclass.CityTable, kcclass.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdmin chains the current query on the "admin" edge.
func (kcq *KcClassQuery) QueryAdmin() *AdminQuery {
	query := &AdminQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclass.AdminTable, kcclass.AdminColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttachment chains the current query on the "attachment" edge.
func (kcq *KcClassQuery) QueryAttachment() *AttachmentQuery {
	query := &AttachmentQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclass.AttachmentTable, kcclass.AttachmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMasterTeachers chains the current query on the "master_teachers" edge.
func (kcq *KcClassQuery) QueryMasterTeachers() *TeacherQuery {
	query := &TeacherQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kcclass.MasterTeachersTable, kcclass.MasterTeachersColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClassTeachers chains the current query on the "class_teachers" edge.
func (kcq *KcClassQuery) QueryClassTeachers() *KcClassTeacherQuery {
	query := &KcClassTeacherQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(kcclassteacher.Table, kcclassteacher.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kcclass.ClassTeachersTable, kcclass.ClassTeachersColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKcClassCourses chains the current query on the "kc_class_courses" edge.
func (kcq *KcClassQuery) QueryKcClassCourses() *KcCourseQuery {
	query := &KcCourseQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, kcclass.KcClassCoursesTable, kcclass.KcClassCoursesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKcUserClasses chains the current query on the "kc_user_classes" edge.
func (kcq *KcClassQuery) QueryKcUserClasses() *KcUserClassQuery {
	query := &KcUserClassQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(kcuserclass.Table, kcuserclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kcclass.KcUserClassesTable, kcclass.KcUserClassesColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMessageClasses chains the current query on the "message_classes" edge.
func (kcq *KcClassQuery) QueryMessageClasses() *MessageQuery {
	query := &MessageQuery{config: kcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kcclass.Table, kcclass.FieldID, selector),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kcclass.MessageClassesTable, kcclass.MessageClassesColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KcClass entity from the query.
// Returns a *NotFoundError when no KcClass was found.
func (kcq *KcClassQuery) First(ctx context.Context) (*KcClass, error) {
	nodes, err := kcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kcclass.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kcq *KcClassQuery) FirstX(ctx context.Context) *KcClass {
	node, err := kcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KcClass ID from the query.
// Returns a *NotFoundError when no KcClass ID was found.
func (kcq *KcClassQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kcclass.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kcq *KcClassQuery) FirstIDX(ctx context.Context) int {
	id, err := kcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KcClass entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one KcClass entity is not found.
// Returns a *NotFoundError when no KcClass entities are found.
func (kcq *KcClassQuery) Only(ctx context.Context) (*KcClass, error) {
	nodes, err := kcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kcclass.Label}
	default:
		return nil, &NotSingularError{kcclass.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kcq *KcClassQuery) OnlyX(ctx context.Context) *KcClass {
	node, err := kcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KcClass ID in the query.
// Returns a *NotSingularError when exactly one KcClass ID is not found.
// Returns a *NotFoundError when no entities are found.
func (kcq *KcClassQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kcclass.Label}
	default:
		err = &NotSingularError{kcclass.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kcq *KcClassQuery) OnlyIDX(ctx context.Context) int {
	id, err := kcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KcClasses.
func (kcq *KcClassQuery) All(ctx context.Context) ([]*KcClass, error) {
	if err := kcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return kcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (kcq *KcClassQuery) AllX(ctx context.Context) []*KcClass {
	nodes, err := kcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KcClass IDs.
func (kcq *KcClassQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := kcq.Select(kcclass.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kcq *KcClassQuery) IDsX(ctx context.Context) []int {
	ids, err := kcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kcq *KcClassQuery) Count(ctx context.Context) (int, error) {
	if err := kcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return kcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (kcq *KcClassQuery) CountX(ctx context.Context) int {
	count, err := kcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kcq *KcClassQuery) Exist(ctx context.Context) (bool, error) {
	if err := kcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return kcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (kcq *KcClassQuery) ExistX(ctx context.Context) bool {
	exist, err := kcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KcClassQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kcq *KcClassQuery) Clone() *KcClassQuery {
	if kcq == nil {
		return nil
	}
	return &KcClassQuery{
		config:             kcq.config,
		limit:              kcq.limit,
		offset:             kcq.offset,
		order:              append([]OrderFunc{}, kcq.order...),
		predicates:         append([]predicate.KcClass{}, kcq.predicates...),
		withMajors:         kcq.withMajors.Clone(),
		withItem:           kcq.withItem.Clone(),
		withCity:           kcq.withCity.Clone(),
		withAdmin:          kcq.withAdmin.Clone(),
		withAttachment:     kcq.withAttachment.Clone(),
		withMasterTeachers: kcq.withMasterTeachers.Clone(),
		withClassTeachers:  kcq.withClassTeachers.Clone(),
		withKcClassCourses: kcq.withKcClassCourses.Clone(),
		withKcUserClasses:  kcq.withKcUserClasses.Clone(),
		withMessageClasses: kcq.withMessageClasses.Clone(),
		// clone intermediate query.
		sql:  kcq.sql.Clone(),
		path: kcq.path,
	}
}

// WithMajors tells the query-builder to eager-load the nodes that are connected to
// the "majors" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithMajors(opts ...func(*MajorQuery)) *KcClassQuery {
	query := &MajorQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withMajors = query
	return kcq
}

// WithItem tells the query-builder to eager-load the nodes that are connected to
// the "item" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithItem(opts ...func(*ItemCategoryQuery)) *KcClassQuery {
	query := &ItemCategoryQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withItem = query
	return kcq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithCity(opts ...func(*CityQuery)) *KcClassQuery {
	query := &CityQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withCity = query
	return kcq
}

// WithAdmin tells the query-builder to eager-load the nodes that are connected to
// the "admin" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithAdmin(opts ...func(*AdminQuery)) *KcClassQuery {
	query := &AdminQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withAdmin = query
	return kcq
}

// WithAttachment tells the query-builder to eager-load the nodes that are connected to
// the "attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithAttachment(opts ...func(*AttachmentQuery)) *KcClassQuery {
	query := &AttachmentQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withAttachment = query
	return kcq
}

// WithMasterTeachers tells the query-builder to eager-load the nodes that are connected to
// the "master_teachers" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithMasterTeachers(opts ...func(*TeacherQuery)) *KcClassQuery {
	query := &TeacherQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withMasterTeachers = query
	return kcq
}

// WithClassTeachers tells the query-builder to eager-load the nodes that are connected to
// the "class_teachers" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithClassTeachers(opts ...func(*KcClassTeacherQuery)) *KcClassQuery {
	query := &KcClassTeacherQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withClassTeachers = query
	return kcq
}

// WithKcClassCourses tells the query-builder to eager-load the nodes that are connected to
// the "kc_class_courses" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithKcClassCourses(opts ...func(*KcCourseQuery)) *KcClassQuery {
	query := &KcCourseQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withKcClassCourses = query
	return kcq
}

// WithKcUserClasses tells the query-builder to eager-load the nodes that are connected to
// the "kc_user_classes" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithKcUserClasses(opts ...func(*KcUserClassQuery)) *KcClassQuery {
	query := &KcUserClassQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withKcUserClasses = query
	return kcq
}

// WithMessageClasses tells the query-builder to eager-load the nodes that are connected to
// the "message_classes" edge. The optional arguments are used to configure the query builder of the edge.
func (kcq *KcClassQuery) WithMessageClasses(opts ...func(*MessageQuery)) *KcClassQuery {
	query := &MessageQuery{config: kcq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcq.withMessageClasses = query
	return kcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KcClass.Query().
//		GroupBy(kcclass.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (kcq *KcClassQuery) GroupBy(field string, fields ...string) *KcClassGroupBy {
	group := &KcClassGroupBy{config: kcq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kcq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.KcClass.Query().
//		Select(kcclass.FieldUUID).
//		Scan(ctx, &v)
//
func (kcq *KcClassQuery) Select(field string, fields ...string) *KcClassSelect {
	kcq.fields = append([]string{field}, fields...)
	return &KcClassSelect{KcClassQuery: kcq}
}

func (kcq *KcClassQuery) prepareQuery(ctx context.Context) error {
	for _, f := range kcq.fields {
		if !kcclass.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kcq.path != nil {
		prev, err := kcq.path(ctx)
		if err != nil {
			return err
		}
		kcq.sql = prev
	}
	return nil
}

func (kcq *KcClassQuery) sqlAll(ctx context.Context) ([]*KcClass, error) {
	var (
		nodes       = []*KcClass{}
		_spec       = kcq.querySpec()
		loadedTypes = [10]bool{
			kcq.withMajors != nil,
			kcq.withItem != nil,
			kcq.withCity != nil,
			kcq.withAdmin != nil,
			kcq.withAttachment != nil,
			kcq.withMasterTeachers != nil,
			kcq.withClassTeachers != nil,
			kcq.withKcClassCourses != nil,
			kcq.withKcUserClasses != nil,
			kcq.withMessageClasses != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &KcClass{config: kcq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, kcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := kcq.withMajors; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*KcClass, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Majors = []*Major{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*KcClass)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   kcclass.MajorsTable,
				Columns: kcclass.MajorsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(kcclass.MajorsPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, kcq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "majors": %w`, err)
		}
		query.Where(major.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "majors" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Majors = append(nodes[i].Edges.Majors, n)
			}
		}
	}

	if query := kcq.withItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcClass)
		for i := range nodes {
			fk := nodes[i].CateID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(itemcategory.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cate_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Item = n
			}
		}
	}

	if query := kcq.withCity; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcClass)
		for i := range nodes {
			fk := nodes[i].CityID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(city.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.City = n
			}
		}
	}

	if query := kcq.withAdmin; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcClass)
		for i := range nodes {
			fk := nodes[i].CreatedAdminID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(admin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "created_admin_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Admin = n
			}
		}
	}

	if query := kcq.withAttachment; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcClass)
		for i := range nodes {
			fk := nodes[i].ClassCoverImgID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(attachment.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "class_cover_img_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Attachment = n
			}
		}
	}

	if query := kcq.withMasterTeachers; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcClass)
		for i := range nodes {
			fk := nodes[i].ClassHeadMasterID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(teacher.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "class_head_master_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.MasterTeachers = n
			}
		}
	}

	if query := kcq.withClassTeachers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcClass)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ClassTeachers = []*KcClassTeacher{}
		}
		query.Where(predicate.KcClassTeacher(func(s *sql.Selector) {
			s.Where(sql.InValues(kcclass.ClassTeachersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ClassID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "class_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ClassTeachers = append(node.Edges.ClassTeachers, n)
		}
	}

	if query := kcq.withKcClassCourses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*KcClass, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.KcClassCourses = []*KcCourse{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*KcClass)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   kcclass.KcClassCoursesTable,
				Columns: kcclass.KcClassCoursesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(kcclass.KcClassCoursesPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, kcq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "kc_class_courses": %w`, err)
		}
		query.Where(kccourse.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "kc_class_courses" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.KcClassCourses = append(nodes[i].Edges.KcClassCourses, n)
			}
		}
	}

	if query := kcq.withKcUserClasses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcClass)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.KcUserClasses = []*KcUserClass{}
		}
		query.Where(predicate.KcUserClass(func(s *sql.Selector) {
			s.Where(sql.InValues(kcclass.KcUserClassesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ClassID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "class_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.KcUserClasses = append(node.Edges.KcUserClasses, n)
		}
	}

	if query := kcq.withMessageClasses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcClass)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MessageClasses = []*Message{}
		}
		query.Where(predicate.Message(func(s *sql.Selector) {
			s.Where(sql.InValues(kcclass.MessageClassesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ClassID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "class_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.MessageClasses = append(node.Edges.MessageClasses, n)
		}
	}

	return nodes, nil
}

func (kcq *KcClassQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kcq.querySpec()
	return sqlgraph.CountNodes(ctx, kcq.driver, _spec)
}

func (kcq *KcClassQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := kcq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (kcq *KcClassQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kcclass.Table,
			Columns: kcclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcclass.FieldID,
			},
		},
		From:   kcq.sql,
		Unique: true,
	}
	if unique := kcq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := kcq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kcclass.FieldID)
		for i := range fields {
			if fields[i] != kcclass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kcq *KcClassQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kcq.driver.Dialect())
	t1 := builder.Table(kcclass.Table)
	selector := builder.Select(t1.Columns(kcclass.Columns...)...).From(t1)
	if kcq.sql != nil {
		selector = kcq.sql
		selector.Select(selector.Columns(kcclass.Columns...)...)
	}
	for _, p := range kcq.predicates {
		p(selector)
	}
	for _, p := range kcq.order {
		p(selector)
	}
	if offset := kcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KcClassGroupBy is the group-by builder for KcClass entities.
type KcClassGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kcgb *KcClassGroupBy) Aggregate(fns ...AggregateFunc) *KcClassGroupBy {
	kcgb.fns = append(kcgb.fns, fns...)
	return kcgb
}

// Scan applies the group-by query and scans the result into the given value.
func (kcgb *KcClassGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := kcgb.path(ctx)
	if err != nil {
		return err
	}
	kcgb.sql = query
	return kcgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kcgb *KcClassGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := kcgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcgb *KcClassGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(kcgb.fields) > 1 {
		return nil, errors.New("ent: KcClassGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := kcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kcgb *KcClassGroupBy) StringsX(ctx context.Context) []string {
	v, err := kcgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcgb *KcClassGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kcgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kcclass.Label}
	default:
		err = fmt.Errorf("ent: KcClassGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kcgb *KcClassGroupBy) StringX(ctx context.Context) string {
	v, err := kcgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcgb *KcClassGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(kcgb.fields) > 1 {
		return nil, errors.New("ent: KcClassGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := kcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kcgb *KcClassGroupBy) IntsX(ctx context.Context) []int {
	v, err := kcgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcgb *KcClassGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kcgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kcclass.Label}
	default:
		err = fmt.Errorf("ent: KcClassGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kcgb *KcClassGroupBy) IntX(ctx context.Context) int {
	v, err := kcgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcgb *KcClassGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(kcgb.fields) > 1 {
		return nil, errors.New("ent: KcClassGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := kcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kcgb *KcClassGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := kcgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcgb *KcClassGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kcgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kcclass.Label}
	default:
		err = fmt.Errorf("ent: KcClassGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kcgb *KcClassGroupBy) Float64X(ctx context.Context) float64 {
	v, err := kcgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcgb *KcClassGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(kcgb.fields) > 1 {
		return nil, errors.New("ent: KcClassGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := kcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kcgb *KcClassGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := kcgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcgb *KcClassGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kcgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kcclass.Label}
	default:
		err = fmt.Errorf("ent: KcClassGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kcgb *KcClassGroupBy) BoolX(ctx context.Context) bool {
	v, err := kcgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kcgb *KcClassGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range kcgb.fields {
		if !kcclass.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kcgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kcgb *KcClassGroupBy) sqlQuery() *sql.Selector {
	selector := kcgb.sql
	columns := make([]string, 0, len(kcgb.fields)+len(kcgb.fns))
	columns = append(columns, kcgb.fields...)
	for _, fn := range kcgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(kcgb.fields...)
}

// KcClassSelect is the builder for selecting fields of KcClass entities.
type KcClassSelect struct {
	*KcClassQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (kcs *KcClassSelect) Scan(ctx context.Context, v interface{}) error {
	if err := kcs.prepareQuery(ctx); err != nil {
		return err
	}
	kcs.sql = kcs.KcClassQuery.sqlQuery(ctx)
	return kcs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kcs *KcClassSelect) ScanX(ctx context.Context, v interface{}) {
	if err := kcs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (kcs *KcClassSelect) Strings(ctx context.Context) ([]string, error) {
	if len(kcs.fields) > 1 {
		return nil, errors.New("ent: KcClassSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := kcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kcs *KcClassSelect) StringsX(ctx context.Context) []string {
	v, err := kcs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (kcs *KcClassSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kcs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kcclass.Label}
	default:
		err = fmt.Errorf("ent: KcClassSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kcs *KcClassSelect) StringX(ctx context.Context) string {
	v, err := kcs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (kcs *KcClassSelect) Ints(ctx context.Context) ([]int, error) {
	if len(kcs.fields) > 1 {
		return nil, errors.New("ent: KcClassSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := kcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kcs *KcClassSelect) IntsX(ctx context.Context) []int {
	v, err := kcs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (kcs *KcClassSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kcs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kcclass.Label}
	default:
		err = fmt.Errorf("ent: KcClassSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kcs *KcClassSelect) IntX(ctx context.Context) int {
	v, err := kcs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (kcs *KcClassSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(kcs.fields) > 1 {
		return nil, errors.New("ent: KcClassSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := kcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kcs *KcClassSelect) Float64sX(ctx context.Context) []float64 {
	v, err := kcs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (kcs *KcClassSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kcs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kcclass.Label}
	default:
		err = fmt.Errorf("ent: KcClassSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kcs *KcClassSelect) Float64X(ctx context.Context) float64 {
	v, err := kcs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (kcs *KcClassSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(kcs.fields) > 1 {
		return nil, errors.New("ent: KcClassSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := kcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kcs *KcClassSelect) BoolsX(ctx context.Context) []bool {
	v, err := kcs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (kcs *KcClassSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kcs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kcclass.Label}
	default:
		err = fmt.Errorf("ent: KcClassSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kcs *KcClassSelect) BoolX(ctx context.Context) bool {
	v, err := kcs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kcs *KcClassSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := kcs.sqlQuery().Query()
	if err := kcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kcs *KcClassSelect) sqlQuery() sql.Querier {
	selector := kcs.sql
	selector.Select(selector.Columns(kcs.fields...)...)
	return selector
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/major"
	"tkserver/internal/store/ent/majordetail"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/tkquestionbankmajor"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MajorCreate is the builder for creating a Major entity.
type MajorCreate struct {
	config
	mutation *MajorMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (mc *MajorCreate) SetUUID(s string) *MajorCreate {
	mc.mutation.SetUUID(s)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MajorCreate) SetCreatedAt(t time.Time) *MajorCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MajorCreate) SetNillableCreatedAt(t *time.Time) *MajorCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MajorCreate) SetUpdatedAt(t time.Time) *MajorCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MajorCreate) SetNillableUpdatedAt(t *time.Time) *MajorCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MajorCreate) SetDeletedAt(t time.Time) *MajorCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MajorCreate) SetNillableDeletedAt(t *time.Time) *MajorCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MajorCreate) SetName(s string) *MajorCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mc *MajorCreate) SetNillableName(s *string) *MajorCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MajorCreate) SetStatus(u uint8) *MajorCreate {
	mc.mutation.SetStatus(u)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MajorCreate) SetNillableStatus(u *uint8) *MajorCreate {
	if u != nil {
		mc.SetStatus(*u)
	}
	return mc
}

// SetCode sets the "code" field.
func (mc *MajorCreate) SetCode(s string) *MajorCreate {
	mc.mutation.SetCode(s)
	return mc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (mc *MajorCreate) SetNillableCode(s *string) *MajorCreate {
	if s != nil {
		mc.SetCode(*s)
	}
	return mc
}

// SetDesc sets the "desc" field.
func (mc *MajorCreate) SetDesc(s string) *MajorCreate {
	mc.mutation.SetDesc(s)
	return mc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (mc *MajorCreate) SetNillableDesc(s *string) *MajorCreate {
	if s != nil {
		mc.SetDesc(*s)
	}
	return mc
}

// SetSortOrder sets the "sort_order" field.
func (mc *MajorCreate) SetSortOrder(i int) *MajorCreate {
	mc.mutation.SetSortOrder(i)
	return mc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (mc *MajorCreate) SetNillableSortOrder(i *int) *MajorCreate {
	if i != nil {
		mc.SetSortOrder(*i)
	}
	return mc
}

// AddTeacherIDs adds the "teachers" edge to the Teacher entity by IDs.
func (mc *MajorCreate) AddTeacherIDs(ids ...int) *MajorCreate {
	mc.mutation.AddTeacherIDs(ids...)
	return mc
}

// AddTeachers adds the "teachers" edges to the Teacher entity.
func (mc *MajorCreate) AddTeachers(t ...*Teacher) *MajorCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddTeacherIDs(ids...)
}

// SetMajorDetailID sets the "major_detail" edge to the MajorDetail entity by ID.
func (mc *MajorCreate) SetMajorDetailID(id int) *MajorCreate {
	mc.mutation.SetMajorDetailID(id)
	return mc
}

// SetNillableMajorDetailID sets the "major_detail" edge to the MajorDetail entity by ID if the given value is not nil.
func (mc *MajorCreate) SetNillableMajorDetailID(id *int) *MajorCreate {
	if id != nil {
		mc = mc.SetMajorDetailID(*id)
	}
	return mc
}

// SetMajorDetail sets the "major_detail" edge to the MajorDetail entity.
func (mc *MajorCreate) SetMajorDetail(m *MajorDetail) *MajorCreate {
	return mc.SetMajorDetailID(m.ID)
}

// AddKcClassIDs adds the "kc_classes" edge to the KcClass entity by IDs.
func (mc *MajorCreate) AddKcClassIDs(ids ...int) *MajorCreate {
	mc.mutation.AddKcClassIDs(ids...)
	return mc
}

// AddKcClasses adds the "kc_classes" edges to the KcClass entity.
func (mc *MajorCreate) AddKcClasses(k ...*KcClass) *MajorCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return mc.AddKcClassIDs(ids...)
}

// AddCourseIDs adds the "courses" edge to the KcCourse entity by IDs.
func (mc *MajorCreate) AddCourseIDs(ids ...int) *MajorCreate {
	mc.mutation.AddCourseIDs(ids...)
	return mc
}

// AddCourses adds the "courses" edges to the KcCourse entity.
func (mc *MajorCreate) AddCourses(k ...*KcCourse) *MajorCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return mc.AddCourseIDs(ids...)
}

// AddQuestionBankMajorIDs adds the "question_bank_majors" edge to the TkQuestionBankMajor entity by IDs.
func (mc *MajorCreate) AddQuestionBankMajorIDs(ids ...int) *MajorCreate {
	mc.mutation.AddQuestionBankMajorIDs(ids...)
	return mc
}

// AddQuestionBankMajors adds the "question_bank_majors" edges to the TkQuestionBankMajor entity.
func (mc *MajorCreate) AddQuestionBankMajors(t ...*TkQuestionBankMajor) *MajorCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddQuestionBankMajorIDs(ids...)
}

// Mutation returns the MajorMutation object of the builder.
func (mc *MajorCreate) Mutation() *MajorMutation {
	return mc.mutation
}

// Save creates the Major in the database.
func (mc *MajorCreate) Save(ctx context.Context) (*Major, error) {
	var (
		err  error
		node *Major
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MajorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MajorCreate) SaveX(ctx context.Context) *Major {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mc *MajorCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := major.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := major.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.Name(); !ok {
		v := major.DefaultName
		mc.mutation.SetName(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := major.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.Code(); !ok {
		v := major.DefaultCode
		mc.mutation.SetCode(v)
	}
	if _, ok := mc.mutation.Desc(); !ok {
		v := major.DefaultDesc
		mc.mutation.SetDesc(v)
	}
	if _, ok := mc.mutation.SortOrder(); !ok {
		v := major.DefaultSortOrder
		mc.mutation.SetSortOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MajorCreate) check() error {
	if _, ok := mc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := mc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := mc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New("ent: missing required field \"desc\"")}
	}
	if _, ok := mc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New("ent: missing required field \"sort_order\"")}
	}
	return nil
}

func (mc *MajorCreate) sqlSave(ctx context.Context) (*Major, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MajorCreate) createSpec() (*Major, *sqlgraph.CreateSpec) {
	var (
		_node = &Major{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: major.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: major.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: major.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: major.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: major.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: major.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: major.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: major.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := mc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: major.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := mc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: major.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := mc.mutation.SortOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: major.FieldSortOrder,
		})
		_node.SortOrder = value
	}
	if nodes := mc.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   major.TeachersTable,
			Columns: major.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MajorDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   major.MajorDetailTable,
			Columns: []string{major.MajorDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.KcClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   major.KcClassesTable,
			Columns: major.KcClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   major.CoursesTable,
			Columns: major.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.QuestionBankMajorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.QuestionBankMajorsTable,
			Columns: []string{major.QuestionBankMajorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbankmajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MajorCreateBulk is the builder for creating many Major entities in bulk.
type MajorCreateBulk struct {
	config
	builders []*MajorCreate
}

// Save creates the Major entities in the database.
func (mcb *MajorCreateBulk) Save(ctx context.Context) ([]*Major, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Major, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MajorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MajorCreateBulk) SaveX(ctx context.Context) []*Major {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/kccoursesmallcategory"
	"gserver/internal/store/ent/user"
	"gserver/internal/store/ent/usercourseappraise"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserCourseAppraise is the model entity for the UserCourseAppraise schema.
type UserCourseAppraise struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// TeachAttitudeScore holds the value of the "teach_attitude_score" field.
	// 授课态度评分
	TeachAttitudeScore float64 `json:"teach_attitude_score"`
	// TeachContentScore holds the value of the "teach_content_score" field.
	// 授课内容评分
	TeachContentScore float64 `json:"teach_content_score"`
	// TeachAtmosphereScore holds the value of the "teach_atmosphere_score" field.
	// 授课氛围评分
	TeachAtmosphereScore float64 `json:"teach_atmosphere_score"`
	// CompositeScore holds the value of the "composite_score" field.
	// 综合评分
	CompositeScore float64 `json:"composite_score"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int `json:"user_id"`
	// SmallCateID holds the value of the "small_cate_id" field.
	// 课时id
	SmallCateID int `json:"small_cate_id"`
	// CourseID holds the value of the "course_id" field.
	// 课程id
	CourseID int `json:"course_id"`
	// Type holds the value of the "type" field.
	// 评价类型：1:普通课程，2:直播课程，3:直播公开课，4:录播公开课
	Type uint8 `json:"type"`
	// ShowStatus holds the value of the "show_status" field.
	// 是否显示 1：显示 2：不显示
	ShowStatus uint8 `json:"show_status"`
	// TeacherImpression holds the value of the "teacher_impression" field.
	// 老师印象
	TeacherImpression string `json:"teacher_impression"`
	// Desc holds the value of the "desc" field.
	// 评论描述
	Desc string `json:"desc"`
	// TeacherReply holds the value of the "teacher_reply" field.
	// 老师回复
	TeacherReply string `json:"teacher_reply"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserCourseAppraiseQuery when eager-loading is set.
	Edges UserCourseAppraiseEdges `json:"edges"`
}

// UserCourseAppraiseEdges holds the relations/edges for other nodes in the graph.
type UserCourseAppraiseEdges struct {
	// SmallCate holds the value of the small_cate edge.
	SmallCate *KcCourseSmallCategory `json:"small_cate,omitempty"`
	// Course holds the value of the course edge.
	Course *KcCourse `json:"course,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SmallCateOrErr returns the SmallCate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCourseAppraiseEdges) SmallCateOrErr() (*KcCourseSmallCategory, error) {
	if e.loadedTypes[0] {
		if e.SmallCate == nil {
			// The edge small_cate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccoursesmallcategory.Label}
		}
		return e.SmallCate, nil
	}
	return nil, &NotLoadedError{edge: "small_cate"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCourseAppraiseEdges) CourseOrErr() (*KcCourse, error) {
	if e.loadedTypes[1] {
		if e.Course == nil {
			// The edge course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccourse.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCourseAppraiseEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCourseAppraise) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercourseappraise.FieldTeachAttitudeScore, usercourseappraise.FieldTeachContentScore, usercourseappraise.FieldTeachAtmosphereScore, usercourseappraise.FieldCompositeScore:
			values[i] = new(sql.NullFloat64)
		case usercourseappraise.FieldID, usercourseappraise.FieldUserID, usercourseappraise.FieldSmallCateID, usercourseappraise.FieldCourseID, usercourseappraise.FieldType, usercourseappraise.FieldShowStatus:
			values[i] = new(sql.NullInt64)
		case usercourseappraise.FieldUUID, usercourseappraise.FieldTeacherImpression, usercourseappraise.FieldDesc, usercourseappraise.FieldTeacherReply:
			values[i] = new(sql.NullString)
		case usercourseappraise.FieldCreatedAt, usercourseappraise.FieldUpdatedAt, usercourseappraise.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserCourseAppraise", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCourseAppraise fields.
func (uca *UserCourseAppraise) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercourseappraise.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uca.ID = int(value.Int64)
		case usercourseappraise.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				uca.UUID = value.String
			}
		case usercourseappraise.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uca.CreatedAt = new(time.Time)
				*uca.CreatedAt = value.Time
			}
		case usercourseappraise.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uca.UpdatedAt = new(time.Time)
				*uca.UpdatedAt = value.Time
			}
		case usercourseappraise.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				uca.DeletedAt = new(time.Time)
				*uca.DeletedAt = value.Time
			}
		case usercourseappraise.FieldTeachAttitudeScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field teach_attitude_score", values[i])
			} else if value.Valid {
				uca.TeachAttitudeScore = value.Float64
			}
		case usercourseappraise.FieldTeachContentScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field teach_content_score", values[i])
			} else if value.Valid {
				uca.TeachContentScore = value.Float64
			}
		case usercourseappraise.FieldTeachAtmosphereScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field teach_atmosphere_score", values[i])
			} else if value.Valid {
				uca.TeachAtmosphereScore = value.Float64
			}
		case usercourseappraise.FieldCompositeScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field composite_score", values[i])
			} else if value.Valid {
				uca.CompositeScore = value.Float64
			}
		case usercourseappraise.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uca.UserID = int(value.Int64)
			}
		case usercourseappraise.FieldSmallCateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field small_cate_id", values[i])
			} else if value.Valid {
				uca.SmallCateID = int(value.Int64)
			}
		case usercourseappraise.FieldCourseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				uca.CourseID = int(value.Int64)
			}
		case usercourseappraise.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				uca.Type = uint8(value.Int64)
			}
		case usercourseappraise.FieldShowStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field show_status", values[i])
			} else if value.Valid {
				uca.ShowStatus = uint8(value.Int64)
			}
		case usercourseappraise.FieldTeacherImpression:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_impression", values[i])
			} else if value.Valid {
				uca.TeacherImpression = value.String
			}
		case usercourseappraise.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				uca.Desc = value.String
			}
		case usercourseappraise.FieldTeacherReply:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_reply", values[i])
			} else if value.Valid {
				uca.TeacherReply = value.String
			}
		}
	}
	return nil
}

// QuerySmallCate queries the "small_cate" edge of the UserCourseAppraise entity.
func (uca *UserCourseAppraise) QuerySmallCate() *KcCourseSmallCategoryQuery {
	return (&UserCourseAppraiseClient{config: uca.config}).QuerySmallCate(uca)
}

// QueryCourse queries the "course" edge of the UserCourseAppraise entity.
func (uca *UserCourseAppraise) QueryCourse() *KcCourseQuery {
	return (&UserCourseAppraiseClient{config: uca.config}).QueryCourse(uca)
}

// QueryUser queries the "user" edge of the UserCourseAppraise entity.
func (uca *UserCourseAppraise) QueryUser() *UserQuery {
	return (&UserCourseAppraiseClient{config: uca.config}).QueryUser(uca)
}

// Update returns a builder for updating this UserCourseAppraise.
// Note that you need to call UserCourseAppraise.Unwrap() before calling this method if this UserCourseAppraise
// was returned from a transaction, and the transaction was committed or rolled back.
func (uca *UserCourseAppraise) Update() *UserCourseAppraiseUpdateOne {
	return (&UserCourseAppraiseClient{config: uca.config}).UpdateOne(uca)
}

// Unwrap unwraps the UserCourseAppraise entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uca *UserCourseAppraise) Unwrap() *UserCourseAppraise {
	tx, ok := uca.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserCourseAppraise is not a transactional entity")
	}
	uca.config.driver = tx.drv
	return uca
}

// String implements the fmt.Stringer.
func (uca *UserCourseAppraise) String() string {
	var builder strings.Builder
	builder.WriteString("UserCourseAppraise(")
	builder.WriteString(fmt.Sprintf("id=%v", uca.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(uca.UUID)
	if v := uca.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := uca.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := uca.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", teach_attitude_score=")
	builder.WriteString(fmt.Sprintf("%v", uca.TeachAttitudeScore))
	builder.WriteString(", teach_content_score=")
	builder.WriteString(fmt.Sprintf("%v", uca.TeachContentScore))
	builder.WriteString(", teach_atmosphere_score=")
	builder.WriteString(fmt.Sprintf("%v", uca.TeachAtmosphereScore))
	builder.WriteString(", composite_score=")
	builder.WriteString(fmt.Sprintf("%v", uca.CompositeScore))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", uca.UserID))
	builder.WriteString(", small_cate_id=")
	builder.WriteString(fmt.Sprintf("%v", uca.SmallCateID))
	builder.WriteString(", course_id=")
	builder.WriteString(fmt.Sprintf("%v", uca.CourseID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", uca.Type))
	builder.WriteString(", show_status=")
	builder.WriteString(fmt.Sprintf("%v", uca.ShowStatus))
	builder.WriteString(", teacher_impression=")
	builder.WriteString(uca.TeacherImpression)
	builder.WriteString(", desc=")
	builder.WriteString(uca.Desc)
	builder.WriteString(", teacher_reply=")
	builder.WriteString(uca.TeacherReply)
	builder.WriteByte(')')
	return builder.String()
}

// UserCourseAppraises is a parsable slice of UserCourseAppraise.
type UserCourseAppraises []*UserCourseAppraise

func (uca UserCourseAppraises) config(cfg config) {
	for _i := range uca {
		uca[_i].config = cfg
	}
}

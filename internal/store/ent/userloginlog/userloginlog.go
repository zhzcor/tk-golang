// Code generated by entc, DO NOT EDIT.

package userloginlog

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the userloginlog type in the database.
	Label = "user_login_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCid holds the string denoting the cid field in the database.
	FieldCid = "cid"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldDevice holds the string denoting the device field in the database.
	FieldDevice = "device"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldLatestLoginAt holds the string denoting the latest_login_at field in the database.
	FieldLatestLoginAt = "latest_login_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userloginlog in the database.
	Table = "user_login_logs"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "user_login_logs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_login_log"
)

// Columns holds all SQL columns for userloginlog fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCid,
	FieldPlatform,
	FieldDevice,
	FieldVersion,
	FieldIP,
	FieldProvince,
	FieldCity,
	FieldLatestLoginAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_login_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_login_log",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "tkserver/internal/store/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCid holds the default value on creation for the "cid" field.
	DefaultCid string
	// DefaultPlatform holds the default value on creation for the "platform" field.
	DefaultPlatform string
	// DefaultDevice holds the default value on creation for the "device" field.
	DefaultDevice string
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion string
)

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/kccoursesmallcategory"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/user"
	"gserver/internal/store/ent/usercourseappraise"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCourseAppraiseUpdate is the builder for updating UserCourseAppraise entities.
type UserCourseAppraiseUpdate struct {
	config
	hooks    []Hook
	mutation *UserCourseAppraiseMutation
}

// Where adds a new predicate for the UserCourseAppraiseUpdate builder.
func (ucau *UserCourseAppraiseUpdate) Where(ps ...predicate.UserCourseAppraise) *UserCourseAppraiseUpdate {
	ucau.mutation.predicates = append(ucau.mutation.predicates, ps...)
	return ucau
}

// SetUUID sets the "uuid" field.
func (ucau *UserCourseAppraiseUpdate) SetUUID(s string) *UserCourseAppraiseUpdate {
	ucau.mutation.SetUUID(s)
	return ucau
}

// SetUpdatedAt sets the "updated_at" field.
func (ucau *UserCourseAppraiseUpdate) SetUpdatedAt(t time.Time) *UserCourseAppraiseUpdate {
	ucau.mutation.SetUpdatedAt(t)
	return ucau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ucau *UserCourseAppraiseUpdate) ClearUpdatedAt() *UserCourseAppraiseUpdate {
	ucau.mutation.ClearUpdatedAt()
	return ucau
}

// SetDeletedAt sets the "deleted_at" field.
func (ucau *UserCourseAppraiseUpdate) SetDeletedAt(t time.Time) *UserCourseAppraiseUpdate {
	ucau.mutation.SetDeletedAt(t)
	return ucau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableDeletedAt(t *time.Time) *UserCourseAppraiseUpdate {
	if t != nil {
		ucau.SetDeletedAt(*t)
	}
	return ucau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ucau *UserCourseAppraiseUpdate) ClearDeletedAt() *UserCourseAppraiseUpdate {
	ucau.mutation.ClearDeletedAt()
	return ucau
}

// SetTeachAttitudeScore sets the "teach_attitude_score" field.
func (ucau *UserCourseAppraiseUpdate) SetTeachAttitudeScore(f float64) *UserCourseAppraiseUpdate {
	ucau.mutation.ResetTeachAttitudeScore()
	ucau.mutation.SetTeachAttitudeScore(f)
	return ucau
}

// SetNillableTeachAttitudeScore sets the "teach_attitude_score" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableTeachAttitudeScore(f *float64) *UserCourseAppraiseUpdate {
	if f != nil {
		ucau.SetTeachAttitudeScore(*f)
	}
	return ucau
}

// AddTeachAttitudeScore adds f to the "teach_attitude_score" field.
func (ucau *UserCourseAppraiseUpdate) AddTeachAttitudeScore(f float64) *UserCourseAppraiseUpdate {
	ucau.mutation.AddTeachAttitudeScore(f)
	return ucau
}

// SetTeachContentScore sets the "teach_content_score" field.
func (ucau *UserCourseAppraiseUpdate) SetTeachContentScore(f float64) *UserCourseAppraiseUpdate {
	ucau.mutation.ResetTeachContentScore()
	ucau.mutation.SetTeachContentScore(f)
	return ucau
}

// SetNillableTeachContentScore sets the "teach_content_score" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableTeachContentScore(f *float64) *UserCourseAppraiseUpdate {
	if f != nil {
		ucau.SetTeachContentScore(*f)
	}
	return ucau
}

// AddTeachContentScore adds f to the "teach_content_score" field.
func (ucau *UserCourseAppraiseUpdate) AddTeachContentScore(f float64) *UserCourseAppraiseUpdate {
	ucau.mutation.AddTeachContentScore(f)
	return ucau
}

// SetTeachAtmosphereScore sets the "teach_atmosphere_score" field.
func (ucau *UserCourseAppraiseUpdate) SetTeachAtmosphereScore(f float64) *UserCourseAppraiseUpdate {
	ucau.mutation.ResetTeachAtmosphereScore()
	ucau.mutation.SetTeachAtmosphereScore(f)
	return ucau
}

// SetNillableTeachAtmosphereScore sets the "teach_atmosphere_score" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableTeachAtmosphereScore(f *float64) *UserCourseAppraiseUpdate {
	if f != nil {
		ucau.SetTeachAtmosphereScore(*f)
	}
	return ucau
}

// AddTeachAtmosphereScore adds f to the "teach_atmosphere_score" field.
func (ucau *UserCourseAppraiseUpdate) AddTeachAtmosphereScore(f float64) *UserCourseAppraiseUpdate {
	ucau.mutation.AddTeachAtmosphereScore(f)
	return ucau
}

// SetCompositeScore sets the "composite_score" field.
func (ucau *UserCourseAppraiseUpdate) SetCompositeScore(f float64) *UserCourseAppraiseUpdate {
	ucau.mutation.ResetCompositeScore()
	ucau.mutation.SetCompositeScore(f)
	return ucau
}

// SetNillableCompositeScore sets the "composite_score" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableCompositeScore(f *float64) *UserCourseAppraiseUpdate {
	if f != nil {
		ucau.SetCompositeScore(*f)
	}
	return ucau
}

// AddCompositeScore adds f to the "composite_score" field.
func (ucau *UserCourseAppraiseUpdate) AddCompositeScore(f float64) *UserCourseAppraiseUpdate {
	ucau.mutation.AddCompositeScore(f)
	return ucau
}

// SetUserID sets the "user_id" field.
func (ucau *UserCourseAppraiseUpdate) SetUserID(i int) *UserCourseAppraiseUpdate {
	ucau.mutation.ResetUserID()
	ucau.mutation.SetUserID(i)
	return ucau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableUserID(i *int) *UserCourseAppraiseUpdate {
	if i != nil {
		ucau.SetUserID(*i)
	}
	return ucau
}

// ClearUserID clears the value of the "user_id" field.
func (ucau *UserCourseAppraiseUpdate) ClearUserID() *UserCourseAppraiseUpdate {
	ucau.mutation.ClearUserID()
	return ucau
}

// SetSmallCateID sets the "small_cate_id" field.
func (ucau *UserCourseAppraiseUpdate) SetSmallCateID(i int) *UserCourseAppraiseUpdate {
	ucau.mutation.ResetSmallCateID()
	ucau.mutation.SetSmallCateID(i)
	return ucau
}

// SetNillableSmallCateID sets the "small_cate_id" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableSmallCateID(i *int) *UserCourseAppraiseUpdate {
	if i != nil {
		ucau.SetSmallCateID(*i)
	}
	return ucau
}

// ClearSmallCateID clears the value of the "small_cate_id" field.
func (ucau *UserCourseAppraiseUpdate) ClearSmallCateID() *UserCourseAppraiseUpdate {
	ucau.mutation.ClearSmallCateID()
	return ucau
}

// SetCourseID sets the "course_id" field.
func (ucau *UserCourseAppraiseUpdate) SetCourseID(i int) *UserCourseAppraiseUpdate {
	ucau.mutation.ResetCourseID()
	ucau.mutation.SetCourseID(i)
	return ucau
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableCourseID(i *int) *UserCourseAppraiseUpdate {
	if i != nil {
		ucau.SetCourseID(*i)
	}
	return ucau
}

// ClearCourseID clears the value of the "course_id" field.
func (ucau *UserCourseAppraiseUpdate) ClearCourseID() *UserCourseAppraiseUpdate {
	ucau.mutation.ClearCourseID()
	return ucau
}

// SetType sets the "type" field.
func (ucau *UserCourseAppraiseUpdate) SetType(u uint8) *UserCourseAppraiseUpdate {
	ucau.mutation.ResetType()
	ucau.mutation.SetType(u)
	return ucau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableType(u *uint8) *UserCourseAppraiseUpdate {
	if u != nil {
		ucau.SetType(*u)
	}
	return ucau
}

// AddType adds u to the "type" field.
func (ucau *UserCourseAppraiseUpdate) AddType(u uint8) *UserCourseAppraiseUpdate {
	ucau.mutation.AddType(u)
	return ucau
}

// SetShowStatus sets the "show_status" field.
func (ucau *UserCourseAppraiseUpdate) SetShowStatus(u uint8) *UserCourseAppraiseUpdate {
	ucau.mutation.ResetShowStatus()
	ucau.mutation.SetShowStatus(u)
	return ucau
}

// SetNillableShowStatus sets the "show_status" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableShowStatus(u *uint8) *UserCourseAppraiseUpdate {
	if u != nil {
		ucau.SetShowStatus(*u)
	}
	return ucau
}

// AddShowStatus adds u to the "show_status" field.
func (ucau *UserCourseAppraiseUpdate) AddShowStatus(u uint8) *UserCourseAppraiseUpdate {
	ucau.mutation.AddShowStatus(u)
	return ucau
}

// SetTeacherImpression sets the "teacher_impression" field.
func (ucau *UserCourseAppraiseUpdate) SetTeacherImpression(s string) *UserCourseAppraiseUpdate {
	ucau.mutation.SetTeacherImpression(s)
	return ucau
}

// SetNillableTeacherImpression sets the "teacher_impression" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableTeacherImpression(s *string) *UserCourseAppraiseUpdate {
	if s != nil {
		ucau.SetTeacherImpression(*s)
	}
	return ucau
}

// SetDesc sets the "desc" field.
func (ucau *UserCourseAppraiseUpdate) SetDesc(s string) *UserCourseAppraiseUpdate {
	ucau.mutation.SetDesc(s)
	return ucau
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableDesc(s *string) *UserCourseAppraiseUpdate {
	if s != nil {
		ucau.SetDesc(*s)
	}
	return ucau
}

// SetTeacherReply sets the "teacher_reply" field.
func (ucau *UserCourseAppraiseUpdate) SetTeacherReply(s string) *UserCourseAppraiseUpdate {
	ucau.mutation.SetTeacherReply(s)
	return ucau
}

// SetNillableTeacherReply sets the "teacher_reply" field if the given value is not nil.
func (ucau *UserCourseAppraiseUpdate) SetNillableTeacherReply(s *string) *UserCourseAppraiseUpdate {
	if s != nil {
		ucau.SetTeacherReply(*s)
	}
	return ucau
}

// SetSmallCate sets the "small_cate" edge to the KcCourseSmallCategory entity.
func (ucau *UserCourseAppraiseUpdate) SetSmallCate(k *KcCourseSmallCategory) *UserCourseAppraiseUpdate {
	return ucau.SetSmallCateID(k.ID)
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (ucau *UserCourseAppraiseUpdate) SetCourse(k *KcCourse) *UserCourseAppraiseUpdate {
	return ucau.SetCourseID(k.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ucau *UserCourseAppraiseUpdate) SetUser(u *User) *UserCourseAppraiseUpdate {
	return ucau.SetUserID(u.ID)
}

// Mutation returns the UserCourseAppraiseMutation object of the builder.
func (ucau *UserCourseAppraiseUpdate) Mutation() *UserCourseAppraiseMutation {
	return ucau.mutation
}

// ClearSmallCate clears the "small_cate" edge to the KcCourseSmallCategory entity.
func (ucau *UserCourseAppraiseUpdate) ClearSmallCate() *UserCourseAppraiseUpdate {
	ucau.mutation.ClearSmallCate()
	return ucau
}

// ClearCourse clears the "course" edge to the KcCourse entity.
func (ucau *UserCourseAppraiseUpdate) ClearCourse() *UserCourseAppraiseUpdate {
	ucau.mutation.ClearCourse()
	return ucau
}

// ClearUser clears the "user" edge to the User entity.
func (ucau *UserCourseAppraiseUpdate) ClearUser() *UserCourseAppraiseUpdate {
	ucau.mutation.ClearUser()
	return ucau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucau *UserCourseAppraiseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ucau.defaults()
	if len(ucau.hooks) == 0 {
		affected, err = ucau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCourseAppraiseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucau.mutation = mutation
			affected, err = ucau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ucau.hooks) - 1; i >= 0; i-- {
			mut = ucau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucau *UserCourseAppraiseUpdate) SaveX(ctx context.Context) int {
	affected, err := ucau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucau *UserCourseAppraiseUpdate) Exec(ctx context.Context) error {
	_, err := ucau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucau *UserCourseAppraiseUpdate) ExecX(ctx context.Context) {
	if err := ucau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucau *UserCourseAppraiseUpdate) defaults() {
	if _, ok := ucau.mutation.UpdatedAt(); !ok && !ucau.mutation.UpdatedAtCleared() {
		v := usercourseappraise.UpdateDefaultUpdatedAt()
		ucau.mutation.SetUpdatedAt(v)
	}
}

func (ucau *UserCourseAppraiseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercourseappraise.Table,
			Columns: usercourseappraise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercourseappraise.FieldID,
			},
		},
	}
	if ps := ucau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucau.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldUUID,
		})
	}
	if ucau.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: usercourseappraise.FieldCreatedAt,
		})
	}
	if value, ok := ucau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercourseappraise.FieldUpdatedAt,
		})
	}
	if ucau.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: usercourseappraise.FieldUpdatedAt,
		})
	}
	if value, ok := ucau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercourseappraise.FieldDeletedAt,
		})
	}
	if ucau.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: usercourseappraise.FieldDeletedAt,
		})
	}
	if value, ok := ucau.mutation.TeachAttitudeScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAttitudeScore,
		})
	}
	if value, ok := ucau.mutation.AddedTeachAttitudeScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAttitudeScore,
		})
	}
	if value, ok := ucau.mutation.TeachContentScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachContentScore,
		})
	}
	if value, ok := ucau.mutation.AddedTeachContentScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachContentScore,
		})
	}
	if value, ok := ucau.mutation.TeachAtmosphereScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAtmosphereScore,
		})
	}
	if value, ok := ucau.mutation.AddedTeachAtmosphereScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAtmosphereScore,
		})
	}
	if value, ok := ucau.mutation.CompositeScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldCompositeScore,
		})
	}
	if value, ok := ucau.mutation.AddedCompositeScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldCompositeScore,
		})
	}
	if value, ok := ucau.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldType,
		})
	}
	if value, ok := ucau.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldType,
		})
	}
	if value, ok := ucau.mutation.ShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldShowStatus,
		})
	}
	if value, ok := ucau.mutation.AddedShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldShowStatus,
		})
	}
	if value, ok := ucau.mutation.TeacherImpression(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldTeacherImpression,
		})
	}
	if value, ok := ucau.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldDesc,
		})
	}
	if value, ok := ucau.mutation.TeacherReply(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldTeacherReply,
		})
	}
	if ucau.mutation.SmallCateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.SmallCateTable,
			Columns: []string{usercourseappraise.SmallCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucau.mutation.SmallCateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.SmallCateTable,
			Columns: []string{usercourseappraise.SmallCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucau.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.CourseTable,
			Columns: []string{usercourseappraise.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucau.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.CourseTable,
			Columns: []string{usercourseappraise.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.UserTable,
			Columns: []string{usercourseappraise.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.UserTable,
			Columns: []string{usercourseappraise.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercourseappraise.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserCourseAppraiseUpdateOne is the builder for updating a single UserCourseAppraise entity.
type UserCourseAppraiseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserCourseAppraiseMutation
}

// SetUUID sets the "uuid" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetUUID(s string) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.SetUUID(s)
	return ucauo
}

// SetUpdatedAt sets the "updated_at" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetUpdatedAt(t time.Time) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.SetUpdatedAt(t)
	return ucauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ucauo *UserCourseAppraiseUpdateOne) ClearUpdatedAt() *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ClearUpdatedAt()
	return ucauo
}

// SetDeletedAt sets the "deleted_at" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetDeletedAt(t time.Time) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.SetDeletedAt(t)
	return ucauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableDeletedAt(t *time.Time) *UserCourseAppraiseUpdateOne {
	if t != nil {
		ucauo.SetDeletedAt(*t)
	}
	return ucauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ucauo *UserCourseAppraiseUpdateOne) ClearDeletedAt() *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ClearDeletedAt()
	return ucauo
}

// SetTeachAttitudeScore sets the "teach_attitude_score" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetTeachAttitudeScore(f float64) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ResetTeachAttitudeScore()
	ucauo.mutation.SetTeachAttitudeScore(f)
	return ucauo
}

// SetNillableTeachAttitudeScore sets the "teach_attitude_score" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableTeachAttitudeScore(f *float64) *UserCourseAppraiseUpdateOne {
	if f != nil {
		ucauo.SetTeachAttitudeScore(*f)
	}
	return ucauo
}

// AddTeachAttitudeScore adds f to the "teach_attitude_score" field.
func (ucauo *UserCourseAppraiseUpdateOne) AddTeachAttitudeScore(f float64) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.AddTeachAttitudeScore(f)
	return ucauo
}

// SetTeachContentScore sets the "teach_content_score" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetTeachContentScore(f float64) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ResetTeachContentScore()
	ucauo.mutation.SetTeachContentScore(f)
	return ucauo
}

// SetNillableTeachContentScore sets the "teach_content_score" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableTeachContentScore(f *float64) *UserCourseAppraiseUpdateOne {
	if f != nil {
		ucauo.SetTeachContentScore(*f)
	}
	return ucauo
}

// AddTeachContentScore adds f to the "teach_content_score" field.
func (ucauo *UserCourseAppraiseUpdateOne) AddTeachContentScore(f float64) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.AddTeachContentScore(f)
	return ucauo
}

// SetTeachAtmosphereScore sets the "teach_atmosphere_score" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetTeachAtmosphereScore(f float64) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ResetTeachAtmosphereScore()
	ucauo.mutation.SetTeachAtmosphereScore(f)
	return ucauo
}

// SetNillableTeachAtmosphereScore sets the "teach_atmosphere_score" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableTeachAtmosphereScore(f *float64) *UserCourseAppraiseUpdateOne {
	if f != nil {
		ucauo.SetTeachAtmosphereScore(*f)
	}
	return ucauo
}

// AddTeachAtmosphereScore adds f to the "teach_atmosphere_score" field.
func (ucauo *UserCourseAppraiseUpdateOne) AddTeachAtmosphereScore(f float64) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.AddTeachAtmosphereScore(f)
	return ucauo
}

// SetCompositeScore sets the "composite_score" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetCompositeScore(f float64) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ResetCompositeScore()
	ucauo.mutation.SetCompositeScore(f)
	return ucauo
}

// SetNillableCompositeScore sets the "composite_score" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableCompositeScore(f *float64) *UserCourseAppraiseUpdateOne {
	if f != nil {
		ucauo.SetCompositeScore(*f)
	}
	return ucauo
}

// AddCompositeScore adds f to the "composite_score" field.
func (ucauo *UserCourseAppraiseUpdateOne) AddCompositeScore(f float64) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.AddCompositeScore(f)
	return ucauo
}

// SetUserID sets the "user_id" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetUserID(i int) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ResetUserID()
	ucauo.mutation.SetUserID(i)
	return ucauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableUserID(i *int) *UserCourseAppraiseUpdateOne {
	if i != nil {
		ucauo.SetUserID(*i)
	}
	return ucauo
}

// ClearUserID clears the value of the "user_id" field.
func (ucauo *UserCourseAppraiseUpdateOne) ClearUserID() *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ClearUserID()
	return ucauo
}

// SetSmallCateID sets the "small_cate_id" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetSmallCateID(i int) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ResetSmallCateID()
	ucauo.mutation.SetSmallCateID(i)
	return ucauo
}

// SetNillableSmallCateID sets the "small_cate_id" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableSmallCateID(i *int) *UserCourseAppraiseUpdateOne {
	if i != nil {
		ucauo.SetSmallCateID(*i)
	}
	return ucauo
}

// ClearSmallCateID clears the value of the "small_cate_id" field.
func (ucauo *UserCourseAppraiseUpdateOne) ClearSmallCateID() *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ClearSmallCateID()
	return ucauo
}

// SetCourseID sets the "course_id" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetCourseID(i int) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ResetCourseID()
	ucauo.mutation.SetCourseID(i)
	return ucauo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableCourseID(i *int) *UserCourseAppraiseUpdateOne {
	if i != nil {
		ucauo.SetCourseID(*i)
	}
	return ucauo
}

// ClearCourseID clears the value of the "course_id" field.
func (ucauo *UserCourseAppraiseUpdateOne) ClearCourseID() *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ClearCourseID()
	return ucauo
}

// SetType sets the "type" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetType(u uint8) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ResetType()
	ucauo.mutation.SetType(u)
	return ucauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableType(u *uint8) *UserCourseAppraiseUpdateOne {
	if u != nil {
		ucauo.SetType(*u)
	}
	return ucauo
}

// AddType adds u to the "type" field.
func (ucauo *UserCourseAppraiseUpdateOne) AddType(u uint8) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.AddType(u)
	return ucauo
}

// SetShowStatus sets the "show_status" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetShowStatus(u uint8) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ResetShowStatus()
	ucauo.mutation.SetShowStatus(u)
	return ucauo
}

// SetNillableShowStatus sets the "show_status" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableShowStatus(u *uint8) *UserCourseAppraiseUpdateOne {
	if u != nil {
		ucauo.SetShowStatus(*u)
	}
	return ucauo
}

// AddShowStatus adds u to the "show_status" field.
func (ucauo *UserCourseAppraiseUpdateOne) AddShowStatus(u uint8) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.AddShowStatus(u)
	return ucauo
}

// SetTeacherImpression sets the "teacher_impression" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetTeacherImpression(s string) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.SetTeacherImpression(s)
	return ucauo
}

// SetNillableTeacherImpression sets the "teacher_impression" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableTeacherImpression(s *string) *UserCourseAppraiseUpdateOne {
	if s != nil {
		ucauo.SetTeacherImpression(*s)
	}
	return ucauo
}

// SetDesc sets the "desc" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetDesc(s string) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.SetDesc(s)
	return ucauo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableDesc(s *string) *UserCourseAppraiseUpdateOne {
	if s != nil {
		ucauo.SetDesc(*s)
	}
	return ucauo
}

// SetTeacherReply sets the "teacher_reply" field.
func (ucauo *UserCourseAppraiseUpdateOne) SetTeacherReply(s string) *UserCourseAppraiseUpdateOne {
	ucauo.mutation.SetTeacherReply(s)
	return ucauo
}

// SetNillableTeacherReply sets the "teacher_reply" field if the given value is not nil.
func (ucauo *UserCourseAppraiseUpdateOne) SetNillableTeacherReply(s *string) *UserCourseAppraiseUpdateOne {
	if s != nil {
		ucauo.SetTeacherReply(*s)
	}
	return ucauo
}

// SetSmallCate sets the "small_cate" edge to the KcCourseSmallCategory entity.
func (ucauo *UserCourseAppraiseUpdateOne) SetSmallCate(k *KcCourseSmallCategory) *UserCourseAppraiseUpdateOne {
	return ucauo.SetSmallCateID(k.ID)
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (ucauo *UserCourseAppraiseUpdateOne) SetCourse(k *KcCourse) *UserCourseAppraiseUpdateOne {
	return ucauo.SetCourseID(k.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ucauo *UserCourseAppraiseUpdateOne) SetUser(u *User) *UserCourseAppraiseUpdateOne {
	return ucauo.SetUserID(u.ID)
}

// Mutation returns the UserCourseAppraiseMutation object of the builder.
func (ucauo *UserCourseAppraiseUpdateOne) Mutation() *UserCourseAppraiseMutation {
	return ucauo.mutation
}

// ClearSmallCate clears the "small_cate" edge to the KcCourseSmallCategory entity.
func (ucauo *UserCourseAppraiseUpdateOne) ClearSmallCate() *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ClearSmallCate()
	return ucauo
}

// ClearCourse clears the "course" edge to the KcCourse entity.
func (ucauo *UserCourseAppraiseUpdateOne) ClearCourse() *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ClearCourse()
	return ucauo
}

// ClearUser clears the "user" edge to the User entity.
func (ucauo *UserCourseAppraiseUpdateOne) ClearUser() *UserCourseAppraiseUpdateOne {
	ucauo.mutation.ClearUser()
	return ucauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucauo *UserCourseAppraiseUpdateOne) Select(field string, fields ...string) *UserCourseAppraiseUpdateOne {
	ucauo.fields = append([]string{field}, fields...)
	return ucauo
}

// Save executes the query and returns the updated UserCourseAppraise entity.
func (ucauo *UserCourseAppraiseUpdateOne) Save(ctx context.Context) (*UserCourseAppraise, error) {
	var (
		err  error
		node *UserCourseAppraise
	)
	ucauo.defaults()
	if len(ucauo.hooks) == 0 {
		node, err = ucauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCourseAppraiseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucauo.mutation = mutation
			node, err = ucauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ucauo.hooks) - 1; i >= 0; i-- {
			mut = ucauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucauo *UserCourseAppraiseUpdateOne) SaveX(ctx context.Context) *UserCourseAppraise {
	node, err := ucauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucauo *UserCourseAppraiseUpdateOne) Exec(ctx context.Context) error {
	_, err := ucauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucauo *UserCourseAppraiseUpdateOne) ExecX(ctx context.Context) {
	if err := ucauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucauo *UserCourseAppraiseUpdateOne) defaults() {
	if _, ok := ucauo.mutation.UpdatedAt(); !ok && !ucauo.mutation.UpdatedAtCleared() {
		v := usercourseappraise.UpdateDefaultUpdatedAt()
		ucauo.mutation.SetUpdatedAt(v)
	}
}

func (ucauo *UserCourseAppraiseUpdateOne) sqlSave(ctx context.Context) (_node *UserCourseAppraise, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercourseappraise.Table,
			Columns: usercourseappraise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercourseappraise.FieldID,
			},
		},
	}
	id, ok := ucauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserCourseAppraise.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ucauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercourseappraise.FieldID)
		for _, f := range fields {
			if !usercourseappraise.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usercourseappraise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucauo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldUUID,
		})
	}
	if ucauo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: usercourseappraise.FieldCreatedAt,
		})
	}
	if value, ok := ucauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercourseappraise.FieldUpdatedAt,
		})
	}
	if ucauo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: usercourseappraise.FieldUpdatedAt,
		})
	}
	if value, ok := ucauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercourseappraise.FieldDeletedAt,
		})
	}
	if ucauo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: usercourseappraise.FieldDeletedAt,
		})
	}
	if value, ok := ucauo.mutation.TeachAttitudeScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAttitudeScore,
		})
	}
	if value, ok := ucauo.mutation.AddedTeachAttitudeScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAttitudeScore,
		})
	}
	if value, ok := ucauo.mutation.TeachContentScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachContentScore,
		})
	}
	if value, ok := ucauo.mutation.AddedTeachContentScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachContentScore,
		})
	}
	if value, ok := ucauo.mutation.TeachAtmosphereScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAtmosphereScore,
		})
	}
	if value, ok := ucauo.mutation.AddedTeachAtmosphereScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldTeachAtmosphereScore,
		})
	}
	if value, ok := ucauo.mutation.CompositeScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldCompositeScore,
		})
	}
	if value, ok := ucauo.mutation.AddedCompositeScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercourseappraise.FieldCompositeScore,
		})
	}
	if value, ok := ucauo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldType,
		})
	}
	if value, ok := ucauo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldType,
		})
	}
	if value, ok := ucauo.mutation.ShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldShowStatus,
		})
	}
	if value, ok := ucauo.mutation.AddedShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: usercourseappraise.FieldShowStatus,
		})
	}
	if value, ok := ucauo.mutation.TeacherImpression(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldTeacherImpression,
		})
	}
	if value, ok := ucauo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldDesc,
		})
	}
	if value, ok := ucauo.mutation.TeacherReply(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usercourseappraise.FieldTeacherReply,
		})
	}
	if ucauo.mutation.SmallCateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.SmallCateTable,
			Columns: []string{usercourseappraise.SmallCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucauo.mutation.SmallCateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.SmallCateTable,
			Columns: []string{usercourseappraise.SmallCateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucauo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.CourseTable,
			Columns: []string{usercourseappraise.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucauo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.CourseTable,
			Columns: []string{usercourseappraise.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.UserTable,
			Columns: []string{usercourseappraise.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercourseappraise.UserTable,
			Columns: []string{usercourseappraise.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserCourseAppraise{config: ucauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercourseappraise.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

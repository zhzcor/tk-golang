// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/tkquestion"
	"gserver/internal/store/ent/tkquestionbank"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TkQuestion is the model entity for the TkQuestion schema.
type TkQuestion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 题干
	Name string `json:"name"`
	// Difficulty holds the value of the "difficulty" field.
	// 难易度，1：易，2：较易，3：较难，4：难，5：一般
	Difficulty uint8 `json:"difficulty"`
	// Type holds the value of the "type" field.
	// 题目类型，1：单选题，2：多选题，3：判断题，4：简答题，5：材料题
	Type uint8 `json:"type"`
	// Desc holds the value of the "desc" field.
	// 题目解析
	Desc string `json:"desc"`
	// CreatedAdminID holds the value of the "created_admin_id" field.
	// 创建人id
	CreatedAdminID int `json:"created_admin_id"`
	// QuestionBankID holds the value of the "question_bank_id" field.
	// 题库id
	QuestionBankID int `json:"question_bank_id"`
	// AnswerCount holds the value of the "answer_count" field.
	// 答题次数
	AnswerCount int `json:"answer_count"`
	// RightCount holds the value of the "right_count" field.
	// 答对次数
	RightCount int `json:"right_count"`
	// Pid holds the value of the "pid" field.
	// 父级id
	Pid int `json:"pid"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkQuestionQuery when eager-loading is set.
	Edges TkQuestionEdges `json:"edges"`
}

// TkQuestionEdges holds the relations/edges for other nodes in the graph.
type TkQuestionEdges struct {
	// QuestionBank holds the value of the question_bank edge.
	QuestionBank *TkQuestionBank `json:"question_bank,omitempty"`
	// Admin holds the value of the admin edge.
	Admin *Admin `json:"admin,omitempty"`
	// UserRandDom holds the value of the user_rand_dom edge.
	UserRandDom []*TkUserRandomExamRecode `json:"user_rand_dom,omitempty"`
	// AnswerOptions holds the value of the answer_options edge.
	AnswerOptions []*TkQuestionAnswerOption `json:"answer_options,omitempty"`
	// KnowledgePoints holds the value of the knowledge_points edge.
	KnowledgePoints []*TkKnowledgePoint `json:"knowledge_points,omitempty"`
	// QuestionSectionLinks holds the value of the question_section_links edge.
	QuestionSectionLinks []*TkQuestionSection `json:"question_section_links,omitempty"`
	// ExamPartitionQuestions holds the value of the exam_partition_questions edge.
	ExamPartitionQuestions []*TkExamPartitionQuestionLink `json:"exam_partition_questions,omitempty"`
	// QuestionErrorFeedbacks holds the value of the question_error_feedbacks edge.
	QuestionErrorFeedbacks []*TkQuestionErrorFeedback `json:"question_error_feedbacks,omitempty"`
	// UserRecords holds the value of the user_records edge.
	UserRecords []*TkUserQuestionRecord `json:"user_records,omitempty"`
	// SmallCategoryQuestions holds the value of the small_category_questions edge.
	SmallCategoryQuestions []*KcSmallCategoryQuestion `json:"small_category_questions,omitempty"`
	// UserExamQuestions holds the value of the user_exam_questions edge.
	UserExamQuestions []*TkUserSimulationTeacherMark `json:"user_exam_questions,omitempty"`
	// UserRecodeWrong holds the value of the user_recode_wrong edge.
	UserRecodeWrong []*TkUserWrongQuestionRecode `json:"user_recode_wrong,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *TkQuestion `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*TkQuestion `json:"children,omitempty"`
	// CollectionQuestion holds the value of the collection_question edge.
	CollectionQuestion []*Collection `json:"collection_question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
}

// QuestionBankOrErr returns the QuestionBank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionEdges) QuestionBankOrErr() (*TkQuestionBank, error) {
	if e.loadedTypes[0] {
		if e.QuestionBank == nil {
			// The edge question_bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestionbank.Label}
		}
		return e.QuestionBank, nil
	}
	return nil, &NotLoadedError{edge: "question_bank"}
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionEdges) AdminOrErr() (*Admin, error) {
	if e.loadedTypes[1] {
		if e.Admin == nil {
			// The edge admin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// UserRandDomOrErr returns the UserRandDom value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) UserRandDomOrErr() ([]*TkUserRandomExamRecode, error) {
	if e.loadedTypes[2] {
		return e.UserRandDom, nil
	}
	return nil, &NotLoadedError{edge: "user_rand_dom"}
}

// AnswerOptionsOrErr returns the AnswerOptions value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) AnswerOptionsOrErr() ([]*TkQuestionAnswerOption, error) {
	if e.loadedTypes[3] {
		return e.AnswerOptions, nil
	}
	return nil, &NotLoadedError{edge: "answer_options"}
}

// KnowledgePointsOrErr returns the KnowledgePoints value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) KnowledgePointsOrErr() ([]*TkKnowledgePoint, error) {
	if e.loadedTypes[4] {
		return e.KnowledgePoints, nil
	}
	return nil, &NotLoadedError{edge: "knowledge_points"}
}

// QuestionSectionLinksOrErr returns the QuestionSectionLinks value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) QuestionSectionLinksOrErr() ([]*TkQuestionSection, error) {
	if e.loadedTypes[5] {
		return e.QuestionSectionLinks, nil
	}
	return nil, &NotLoadedError{edge: "question_section_links"}
}

// ExamPartitionQuestionsOrErr returns the ExamPartitionQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) ExamPartitionQuestionsOrErr() ([]*TkExamPartitionQuestionLink, error) {
	if e.loadedTypes[6] {
		return e.ExamPartitionQuestions, nil
	}
	return nil, &NotLoadedError{edge: "exam_partition_questions"}
}

// QuestionErrorFeedbacksOrErr returns the QuestionErrorFeedbacks value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) QuestionErrorFeedbacksOrErr() ([]*TkQuestionErrorFeedback, error) {
	if e.loadedTypes[7] {
		return e.QuestionErrorFeedbacks, nil
	}
	return nil, &NotLoadedError{edge: "question_error_feedbacks"}
}

// UserRecordsOrErr returns the UserRecords value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) UserRecordsOrErr() ([]*TkUserQuestionRecord, error) {
	if e.loadedTypes[8] {
		return e.UserRecords, nil
	}
	return nil, &NotLoadedError{edge: "user_records"}
}

// SmallCategoryQuestionsOrErr returns the SmallCategoryQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) SmallCategoryQuestionsOrErr() ([]*KcSmallCategoryQuestion, error) {
	if e.loadedTypes[9] {
		return e.SmallCategoryQuestions, nil
	}
	return nil, &NotLoadedError{edge: "small_category_questions"}
}

// UserExamQuestionsOrErr returns the UserExamQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) UserExamQuestionsOrErr() ([]*TkUserSimulationTeacherMark, error) {
	if e.loadedTypes[10] {
		return e.UserExamQuestions, nil
	}
	return nil, &NotLoadedError{edge: "user_exam_questions"}
}

// UserRecodeWrongOrErr returns the UserRecodeWrong value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) UserRecodeWrongOrErr() ([]*TkUserWrongQuestionRecode, error) {
	if e.loadedTypes[11] {
		return e.UserRecodeWrong, nil
	}
	return nil, &NotLoadedError{edge: "user_recode_wrong"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionEdges) ParentOrErr() (*TkQuestion, error) {
	if e.loadedTypes[12] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestion.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) ChildrenOrErr() ([]*TkQuestion, error) {
	if e.loadedTypes[13] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// CollectionQuestionOrErr returns the CollectionQuestion value or an error if the edge
// was not loaded in eager-loading.
func (e TkQuestionEdges) CollectionQuestionOrErr() ([]*Collection, error) {
	if e.loadedTypes[14] {
		return e.CollectionQuestion, nil
	}
	return nil, &NotLoadedError{edge: "collection_question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkQuestion) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkquestion.FieldID, tkquestion.FieldDifficulty, tkquestion.FieldType, tkquestion.FieldCreatedAdminID, tkquestion.FieldQuestionBankID, tkquestion.FieldAnswerCount, tkquestion.FieldRightCount, tkquestion.FieldPid:
			values[i] = new(sql.NullInt64)
		case tkquestion.FieldUUID, tkquestion.FieldName, tkquestion.FieldDesc:
			values[i] = new(sql.NullString)
		case tkquestion.FieldCreatedAt, tkquestion.FieldUpdatedAt, tkquestion.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkQuestion", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkQuestion fields.
func (tq *TkQuestion) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkquestion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tq.ID = int(value.Int64)
		case tkquestion.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tq.UUID = value.String
			}
		case tkquestion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tq.CreatedAt = new(time.Time)
				*tq.CreatedAt = value.Time
			}
		case tkquestion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tq.UpdatedAt = new(time.Time)
				*tq.UpdatedAt = value.Time
			}
		case tkquestion.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tq.DeletedAt = new(time.Time)
				*tq.DeletedAt = value.Time
			}
		case tkquestion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tq.Name = value.String
			}
		case tkquestion.FieldDifficulty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				tq.Difficulty = uint8(value.Int64)
			}
		case tkquestion.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				tq.Type = uint8(value.Int64)
			}
		case tkquestion.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				tq.Desc = value.String
			}
		case tkquestion.FieldCreatedAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_admin_id", values[i])
			} else if value.Valid {
				tq.CreatedAdminID = int(value.Int64)
			}
		case tkquestion.FieldQuestionBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_bank_id", values[i])
			} else if value.Valid {
				tq.QuestionBankID = int(value.Int64)
			}
		case tkquestion.FieldAnswerCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field answer_count", values[i])
			} else if value.Valid {
				tq.AnswerCount = int(value.Int64)
			}
		case tkquestion.FieldRightCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field right_count", values[i])
			} else if value.Valid {
				tq.RightCount = int(value.Int64)
			}
		case tkquestion.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				tq.Pid = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestionBank queries the "question_bank" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryQuestionBank() *TkQuestionBankQuery {
	return (&TkQuestionClient{config: tq.config}).QueryQuestionBank(tq)
}

// QueryAdmin queries the "admin" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryAdmin() *AdminQuery {
	return (&TkQuestionClient{config: tq.config}).QueryAdmin(tq)
}

// QueryUserRandDom queries the "user_rand_dom" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryUserRandDom() *TkUserRandomExamRecodeQuery {
	return (&TkQuestionClient{config: tq.config}).QueryUserRandDom(tq)
}

// QueryAnswerOptions queries the "answer_options" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryAnswerOptions() *TkQuestionAnswerOptionQuery {
	return (&TkQuestionClient{config: tq.config}).QueryAnswerOptions(tq)
}

// QueryKnowledgePoints queries the "knowledge_points" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryKnowledgePoints() *TkKnowledgePointQuery {
	return (&TkQuestionClient{config: tq.config}).QueryKnowledgePoints(tq)
}

// QueryQuestionSectionLinks queries the "question_section_links" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryQuestionSectionLinks() *TkQuestionSectionQuery {
	return (&TkQuestionClient{config: tq.config}).QueryQuestionSectionLinks(tq)
}

// QueryExamPartitionQuestions queries the "exam_partition_questions" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryExamPartitionQuestions() *TkExamPartitionQuestionLinkQuery {
	return (&TkQuestionClient{config: tq.config}).QueryExamPartitionQuestions(tq)
}

// QueryQuestionErrorFeedbacks queries the "question_error_feedbacks" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryQuestionErrorFeedbacks() *TkQuestionErrorFeedbackQuery {
	return (&TkQuestionClient{config: tq.config}).QueryQuestionErrorFeedbacks(tq)
}

// QueryUserRecords queries the "user_records" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryUserRecords() *TkUserQuestionRecordQuery {
	return (&TkQuestionClient{config: tq.config}).QueryUserRecords(tq)
}

// QuerySmallCategoryQuestions queries the "small_category_questions" edge of the TkQuestion entity.
func (tq *TkQuestion) QuerySmallCategoryQuestions() *KcSmallCategoryQuestionQuery {
	return (&TkQuestionClient{config: tq.config}).QuerySmallCategoryQuestions(tq)
}

// QueryUserExamQuestions queries the "user_exam_questions" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryUserExamQuestions() *TkUserSimulationTeacherMarkQuery {
	return (&TkQuestionClient{config: tq.config}).QueryUserExamQuestions(tq)
}

// QueryUserRecodeWrong queries the "user_recode_wrong" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryUserRecodeWrong() *TkUserWrongQuestionRecodeQuery {
	return (&TkQuestionClient{config: tq.config}).QueryUserRecodeWrong(tq)
}

// QueryParent queries the "parent" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryParent() *TkQuestionQuery {
	return (&TkQuestionClient{config: tq.config}).QueryParent(tq)
}

// QueryChildren queries the "children" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryChildren() *TkQuestionQuery {
	return (&TkQuestionClient{config: tq.config}).QueryChildren(tq)
}

// QueryCollectionQuestion queries the "collection_question" edge of the TkQuestion entity.
func (tq *TkQuestion) QueryCollectionQuestion() *CollectionQuery {
	return (&TkQuestionClient{config: tq.config}).QueryCollectionQuestion(tq)
}

// Update returns a builder for updating this TkQuestion.
// Note that you need to call TkQuestion.Unwrap() before calling this method if this TkQuestion
// was returned from a transaction, and the transaction was committed or rolled back.
func (tq *TkQuestion) Update() *TkQuestionUpdateOne {
	return (&TkQuestionClient{config: tq.config}).UpdateOne(tq)
}

// Unwrap unwraps the TkQuestion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tq *TkQuestion) Unwrap() *TkQuestion {
	tx, ok := tq.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkQuestion is not a transactional entity")
	}
	tq.config.driver = tx.drv
	return tq
}

// String implements the fmt.Stringer.
func (tq *TkQuestion) String() string {
	var builder strings.Builder
	builder.WriteString("TkQuestion(")
	builder.WriteString(fmt.Sprintf("id=%v", tq.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tq.UUID)
	if v := tq.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tq.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tq.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(tq.Name)
	builder.WriteString(", difficulty=")
	builder.WriteString(fmt.Sprintf("%v", tq.Difficulty))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", tq.Type))
	builder.WriteString(", desc=")
	builder.WriteString(tq.Desc)
	builder.WriteString(", created_admin_id=")
	builder.WriteString(fmt.Sprintf("%v", tq.CreatedAdminID))
	builder.WriteString(", question_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", tq.QuestionBankID))
	builder.WriteString(", answer_count=")
	builder.WriteString(fmt.Sprintf("%v", tq.AnswerCount))
	builder.WriteString(", right_count=")
	builder.WriteString(fmt.Sprintf("%v", tq.RightCount))
	builder.WriteString(", pid=")
	builder.WriteString(fmt.Sprintf("%v", tq.Pid))
	builder.WriteByte(')')
	return builder.String()
}

// TkQuestions is a parsable slice of TkQuestion.
type TkQuestions []*TkQuestion

func (tq TkQuestions) config(cfg config) {
	for _i := range tq {
		tq[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/kccoursechapter"
	"gserver/internal/store/ent/kccoursesection"
	"gserver/internal/store/ent/kccoursesmallcategory"
	"gserver/internal/store/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseChapterQuery is the builder for querying KcCourseChapter entities.
type KcCourseChapterQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.KcCourseChapter
	// eager-loading edges.
	withChapterCourse       *KcCourseQuery
	withChapterSections     *KcCourseSectionQuery
	withCourseSmallChapters *KcCourseSmallCategoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KcCourseChapterQuery builder.
func (kccq *KcCourseChapterQuery) Where(ps ...predicate.KcCourseChapter) *KcCourseChapterQuery {
	kccq.predicates = append(kccq.predicates, ps...)
	return kccq
}

// Limit adds a limit step to the query.
func (kccq *KcCourseChapterQuery) Limit(limit int) *KcCourseChapterQuery {
	kccq.limit = &limit
	return kccq
}

// Offset adds an offset step to the query.
func (kccq *KcCourseChapterQuery) Offset(offset int) *KcCourseChapterQuery {
	kccq.offset = &offset
	return kccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kccq *KcCourseChapterQuery) Unique(unique bool) *KcCourseChapterQuery {
	kccq.unique = &unique
	return kccq
}

// Order adds an order step to the query.
func (kccq *KcCourseChapterQuery) Order(o ...OrderFunc) *KcCourseChapterQuery {
	kccq.order = append(kccq.order, o...)
	return kccq
}

// QueryChapterCourse chains the current query on the "chapter_course" edge.
func (kccq *KcCourseChapterQuery) QueryChapterCourse() *KcCourseQuery {
	query := &KcCourseQuery{config: kccq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursechapter.Table, kccoursechapter.FieldID, selector),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursechapter.ChapterCourseTable, kccoursechapter.ChapterCourseColumn),
		)
		fromU = sqlgraph.SetNeighbors(kccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChapterSections chains the current query on the "chapter_sections" edge.
func (kccq *KcCourseChapterQuery) QueryChapterSections() *KcCourseSectionQuery {
	query := &KcCourseSectionQuery{config: kccq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursechapter.Table, kccoursechapter.FieldID, selector),
			sqlgraph.To(kccoursesection.Table, kccoursesection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursechapter.ChapterSectionsTable, kccoursechapter.ChapterSectionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(kccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourseSmallChapters chains the current query on the "course_small_chapters" edge.
func (kccq *KcCourseChapterQuery) QueryCourseSmallChapters() *KcCourseSmallCategoryQuery {
	query := &KcCourseSmallCategoryQuery{config: kccq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursechapter.Table, kccoursechapter.FieldID, selector),
			sqlgraph.To(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursechapter.CourseSmallChaptersTable, kccoursechapter.CourseSmallChaptersColumn),
		)
		fromU = sqlgraph.SetNeighbors(kccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KcCourseChapter entity from the query.
// Returns a *NotFoundError when no KcCourseChapter was found.
func (kccq *KcCourseChapterQuery) First(ctx context.Context) (*KcCourseChapter, error) {
	nodes, err := kccq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kccoursechapter.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kccq *KcCourseChapterQuery) FirstX(ctx context.Context) *KcCourseChapter {
	node, err := kccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KcCourseChapter ID from the query.
// Returns a *NotFoundError when no KcCourseChapter ID was found.
func (kccq *KcCourseChapterQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kccq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kccoursechapter.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kccq *KcCourseChapterQuery) FirstIDX(ctx context.Context) int {
	id, err := kccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KcCourseChapter entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one KcCourseChapter entity is not found.
// Returns a *NotFoundError when no KcCourseChapter entities are found.
func (kccq *KcCourseChapterQuery) Only(ctx context.Context) (*KcCourseChapter, error) {
	nodes, err := kccq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kccoursechapter.Label}
	default:
		return nil, &NotSingularError{kccoursechapter.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kccq *KcCourseChapterQuery) OnlyX(ctx context.Context) *KcCourseChapter {
	node, err := kccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KcCourseChapter ID in the query.
// Returns a *NotSingularError when exactly one KcCourseChapter ID is not found.
// Returns a *NotFoundError when no entities are found.
func (kccq *KcCourseChapterQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kccq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kccoursechapter.Label}
	default:
		err = &NotSingularError{kccoursechapter.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kccq *KcCourseChapterQuery) OnlyIDX(ctx context.Context) int {
	id, err := kccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KcCourseChapters.
func (kccq *KcCourseChapterQuery) All(ctx context.Context) ([]*KcCourseChapter, error) {
	if err := kccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return kccq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (kccq *KcCourseChapterQuery) AllX(ctx context.Context) []*KcCourseChapter {
	nodes, err := kccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KcCourseChapter IDs.
func (kccq *KcCourseChapterQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := kccq.Select(kccoursechapter.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kccq *KcCourseChapterQuery) IDsX(ctx context.Context) []int {
	ids, err := kccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kccq *KcCourseChapterQuery) Count(ctx context.Context) (int, error) {
	if err := kccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return kccq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (kccq *KcCourseChapterQuery) CountX(ctx context.Context) int {
	count, err := kccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kccq *KcCourseChapterQuery) Exist(ctx context.Context) (bool, error) {
	if err := kccq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return kccq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (kccq *KcCourseChapterQuery) ExistX(ctx context.Context) bool {
	exist, err := kccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KcCourseChapterQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kccq *KcCourseChapterQuery) Clone() *KcCourseChapterQuery {
	if kccq == nil {
		return nil
	}
	return &KcCourseChapterQuery{
		config:                  kccq.config,
		limit:                   kccq.limit,
		offset:                  kccq.offset,
		order:                   append([]OrderFunc{}, kccq.order...),
		predicates:              append([]predicate.KcCourseChapter{}, kccq.predicates...),
		withChapterCourse:       kccq.withChapterCourse.Clone(),
		withChapterSections:     kccq.withChapterSections.Clone(),
		withCourseSmallChapters: kccq.withCourseSmallChapters.Clone(),
		// clone intermediate query.
		sql:  kccq.sql.Clone(),
		path: kccq.path,
	}
}

// WithChapterCourse tells the query-builder to eager-load the nodes that are connected to
// the "chapter_course" edge. The optional arguments are used to configure the query builder of the edge.
func (kccq *KcCourseChapterQuery) WithChapterCourse(opts ...func(*KcCourseQuery)) *KcCourseChapterQuery {
	query := &KcCourseQuery{config: kccq.config}
	for _, opt := range opts {
		opt(query)
	}
	kccq.withChapterCourse = query
	return kccq
}

// WithChapterSections tells the query-builder to eager-load the nodes that are connected to
// the "chapter_sections" edge. The optional arguments are used to configure the query builder of the edge.
func (kccq *KcCourseChapterQuery) WithChapterSections(opts ...func(*KcCourseSectionQuery)) *KcCourseChapterQuery {
	query := &KcCourseSectionQuery{config: kccq.config}
	for _, opt := range opts {
		opt(query)
	}
	kccq.withChapterSections = query
	return kccq
}

// WithCourseSmallChapters tells the query-builder to eager-load the nodes that are connected to
// the "course_small_chapters" edge. The optional arguments are used to configure the query builder of the edge.
func (kccq *KcCourseChapterQuery) WithCourseSmallChapters(opts ...func(*KcCourseSmallCategoryQuery)) *KcCourseChapterQuery {
	query := &KcCourseSmallCategoryQuery{config: kccq.config}
	for _, opt := range opts {
		opt(query)
	}
	kccq.withCourseSmallChapters = query
	return kccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CourseID int `json:"course_id"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KcCourseChapter.Query().
//		GroupBy(kccoursechapter.FieldCourseID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (kccq *KcCourseChapterQuery) GroupBy(field string, fields ...string) *KcCourseChapterGroupBy {
	group := &KcCourseChapterGroupBy{config: kccq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kccq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CourseID int `json:"course_id"`
//	}
//
//	client.KcCourseChapter.Query().
//		Select(kccoursechapter.FieldCourseID).
//		Scan(ctx, &v)
//
func (kccq *KcCourseChapterQuery) Select(field string, fields ...string) *KcCourseChapterSelect {
	kccq.fields = append([]string{field}, fields...)
	return &KcCourseChapterSelect{KcCourseChapterQuery: kccq}
}

func (kccq *KcCourseChapterQuery) prepareQuery(ctx context.Context) error {
	for _, f := range kccq.fields {
		if !kccoursechapter.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kccq.path != nil {
		prev, err := kccq.path(ctx)
		if err != nil {
			return err
		}
		kccq.sql = prev
	}
	return nil
}

func (kccq *KcCourseChapterQuery) sqlAll(ctx context.Context) ([]*KcCourseChapter, error) {
	var (
		nodes       = []*KcCourseChapter{}
		_spec       = kccq.querySpec()
		loadedTypes = [3]bool{
			kccq.withChapterCourse != nil,
			kccq.withChapterSections != nil,
			kccq.withCourseSmallChapters != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &KcCourseChapter{config: kccq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, kccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := kccq.withChapterCourse; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcCourseChapter)
		for i := range nodes {
			fk := nodes[i].CourseID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(kccourse.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "course_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ChapterCourse = n
			}
		}
	}

	if query := kccq.withChapterSections; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcCourseChapter)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ChapterSections = []*KcCourseSection{}
		}
		query.Where(predicate.KcCourseSection(func(s *sql.Selector) {
			s.Where(sql.InValues(kccoursechapter.ChapterSectionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.CourseChapterID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "course_chapter_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ChapterSections = append(node.Edges.ChapterSections, n)
		}
	}

	if query := kccq.withCourseSmallChapters; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcCourseChapter)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CourseSmallChapters = []*KcCourseSmallCategory{}
		}
		query.Where(predicate.KcCourseSmallCategory(func(s *sql.Selector) {
			s.Where(sql.InValues(kccoursechapter.CourseSmallChaptersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ChapterID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "chapter_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CourseSmallChapters = append(node.Edges.CourseSmallChapters, n)
		}
	}

	return nodes, nil
}

func (kccq *KcCourseChapterQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kccq.querySpec()
	return sqlgraph.CountNodes(ctx, kccq.driver, _spec)
}

func (kccq *KcCourseChapterQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := kccq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (kccq *KcCourseChapterQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursechapter.Table,
			Columns: kccoursechapter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursechapter.FieldID,
			},
		},
		From:   kccq.sql,
		Unique: true,
	}
	if unique := kccq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := kccq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kccoursechapter.FieldID)
		for i := range fields {
			if fields[i] != kccoursechapter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kccq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kccq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kccq *KcCourseChapterQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kccq.driver.Dialect())
	t1 := builder.Table(kccoursechapter.Table)
	selector := builder.Select(t1.Columns(kccoursechapter.Columns...)...).From(t1)
	if kccq.sql != nil {
		selector = kccq.sql
		selector.Select(selector.Columns(kccoursechapter.Columns...)...)
	}
	for _, p := range kccq.predicates {
		p(selector)
	}
	for _, p := range kccq.order {
		p(selector)
	}
	if offset := kccq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kccq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KcCourseChapterGroupBy is the group-by builder for KcCourseChapter entities.
type KcCourseChapterGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kccgb *KcCourseChapterGroupBy) Aggregate(fns ...AggregateFunc) *KcCourseChapterGroupBy {
	kccgb.fns = append(kccgb.fns, fns...)
	return kccgb
}

// Scan applies the group-by query and scans the result into the given value.
func (kccgb *KcCourseChapterGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := kccgb.path(ctx)
	if err != nil {
		return err
	}
	kccgb.sql = query
	return kccgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kccgb *KcCourseChapterGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := kccgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (kccgb *KcCourseChapterGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(kccgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseChapterGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := kccgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kccgb *KcCourseChapterGroupBy) StringsX(ctx context.Context) []string {
	v, err := kccgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kccgb *KcCourseChapterGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kccgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursechapter.Label}
	default:
		err = fmt.Errorf("ent: KcCourseChapterGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kccgb *KcCourseChapterGroupBy) StringX(ctx context.Context) string {
	v, err := kccgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (kccgb *KcCourseChapterGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(kccgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseChapterGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := kccgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kccgb *KcCourseChapterGroupBy) IntsX(ctx context.Context) []int {
	v, err := kccgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kccgb *KcCourseChapterGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kccgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursechapter.Label}
	default:
		err = fmt.Errorf("ent: KcCourseChapterGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kccgb *KcCourseChapterGroupBy) IntX(ctx context.Context) int {
	v, err := kccgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (kccgb *KcCourseChapterGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(kccgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseChapterGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := kccgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kccgb *KcCourseChapterGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := kccgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kccgb *KcCourseChapterGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kccgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursechapter.Label}
	default:
		err = fmt.Errorf("ent: KcCourseChapterGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kccgb *KcCourseChapterGroupBy) Float64X(ctx context.Context) float64 {
	v, err := kccgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (kccgb *KcCourseChapterGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(kccgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseChapterGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := kccgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kccgb *KcCourseChapterGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := kccgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kccgb *KcCourseChapterGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kccgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursechapter.Label}
	default:
		err = fmt.Errorf("ent: KcCourseChapterGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kccgb *KcCourseChapterGroupBy) BoolX(ctx context.Context) bool {
	v, err := kccgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kccgb *KcCourseChapterGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range kccgb.fields {
		if !kccoursechapter.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kccgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kccgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kccgb *KcCourseChapterGroupBy) sqlQuery() *sql.Selector {
	selector := kccgb.sql
	columns := make([]string, 0, len(kccgb.fields)+len(kccgb.fns))
	columns = append(columns, kccgb.fields...)
	for _, fn := range kccgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(kccgb.fields...)
}

// KcCourseChapterSelect is the builder for selecting fields of KcCourseChapter entities.
type KcCourseChapterSelect struct {
	*KcCourseChapterQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (kccs *KcCourseChapterSelect) Scan(ctx context.Context, v interface{}) error {
	if err := kccs.prepareQuery(ctx); err != nil {
		return err
	}
	kccs.sql = kccs.KcCourseChapterQuery.sqlQuery(ctx)
	return kccs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kccs *KcCourseChapterSelect) ScanX(ctx context.Context, v interface{}) {
	if err := kccs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (kccs *KcCourseChapterSelect) Strings(ctx context.Context) ([]string, error) {
	if len(kccs.fields) > 1 {
		return nil, errors.New("ent: KcCourseChapterSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := kccs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kccs *KcCourseChapterSelect) StringsX(ctx context.Context) []string {
	v, err := kccs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (kccs *KcCourseChapterSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kccs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursechapter.Label}
	default:
		err = fmt.Errorf("ent: KcCourseChapterSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kccs *KcCourseChapterSelect) StringX(ctx context.Context) string {
	v, err := kccs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (kccs *KcCourseChapterSelect) Ints(ctx context.Context) ([]int, error) {
	if len(kccs.fields) > 1 {
		return nil, errors.New("ent: KcCourseChapterSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := kccs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kccs *KcCourseChapterSelect) IntsX(ctx context.Context) []int {
	v, err := kccs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (kccs *KcCourseChapterSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kccs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursechapter.Label}
	default:
		err = fmt.Errorf("ent: KcCourseChapterSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kccs *KcCourseChapterSelect) IntX(ctx context.Context) int {
	v, err := kccs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (kccs *KcCourseChapterSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(kccs.fields) > 1 {
		return nil, errors.New("ent: KcCourseChapterSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := kccs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kccs *KcCourseChapterSelect) Float64sX(ctx context.Context) []float64 {
	v, err := kccs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (kccs *KcCourseChapterSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kccs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursechapter.Label}
	default:
		err = fmt.Errorf("ent: KcCourseChapterSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kccs *KcCourseChapterSelect) Float64X(ctx context.Context) float64 {
	v, err := kccs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (kccs *KcCourseChapterSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(kccs.fields) > 1 {
		return nil, errors.New("ent: KcCourseChapterSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := kccs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kccs *KcCourseChapterSelect) BoolsX(ctx context.Context) []bool {
	v, err := kccs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (kccs *KcCourseChapterSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kccs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursechapter.Label}
	default:
		err = fmt.Errorf("ent: KcCourseChapterSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kccs *KcCourseChapterSelect) BoolX(ctx context.Context) bool {
	v, err := kccs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kccs *KcCourseChapterSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := kccs.sqlQuery().Query()
	if err := kccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kccs *KcCourseChapterSelect) sqlQuery() sql.Querier {
	selector := kccs.sql
	selector.Select(selector.Columns(kccs.fields...)...)
	return selector
}

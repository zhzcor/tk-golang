// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursechapter"
	"tkserver/internal/store/ent/kccoursesection"
	"tkserver/internal/store/ent/kccoursesmallcategory"

	"entgo.io/ent/dialect/sql"
)

// KcCourseSmallCategory is the model entity for the KcCourseSmallCategory schema.
type KcCourseSmallCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// SmallName holds the value of the "small_name" field.
	// 小节课程名称
	SmallName string `json:"small_name"`
	// ViewingTime holds the value of the "viewing_time" field.
	// 0分钟表示完成到最后
	ViewingTime int `json:"viewing_time"`
	// FinishType holds the value of the "finish_type" field.
	// 完成条件：1：视频观看到最后，2：视频观看时长，3：音频收听到最后，4：音频收听时长，5：进入过直播间，6：下载过资料
	FinishType uint8 `json:"finish_type"`
	// TeachType holds the value of the "teach_type" field.
	// 1:大班，2:小班
	TeachType uint8 `json:"teach_type"`
	// Type holds the value of the "type" field.
	// 课时类型：1：视频，2：音频，3：直播，4：资料下载
	Type uint8 `json:"type"`
	// LiveSmallStart holds the value of the "live_small_start" field.
	// 直播开始时间
	LiveSmallStart time.Time `json:"live_small_start"`
	// LiveSmallStatus holds the value of the "live_small_status" field.
	// 直播状态1.未开始，2:直播中，3：直播结束，4：回放生成中，5：已生成回放，6回放生成失败，7：已上传录像
	LiveSmallStatus int8 `json:"live_small_status"`
	// LiveRoomID holds the value of the "live_room_id" field.
	// 直播房间id
	LiveRoomID int `json:"live_room_id"`
	// BackVideoID holds the value of the "back_video_id" field.
	// 回放video_id
	BackVideoID int `json:"back_video_id"`
	// FalseVideoID holds the value of the "false_video_id" field.
	// 伪直播video_id
	FalseVideoID int `json:"false_video_id"`
	// OrderVideoID holds the value of the "order_video_id" field.
	// 点播video_id
	OrderVideoID int `json:"order_video_id"`
	// OrderVideoAttachID holds the value of the "order_video_attach_id" field.
	// 点播视频oss 附件
	OrderVideoAttachID int `json:"order_video_attach_id"`
	// LiveSmallTime holds the value of the "live_small_time" field.
	// 直播时长
	LiveSmallTime int `json:"live_small_time"`
	// PushStatus holds the value of the "push_status" field.
	// 1，发布 2：未发布 3 关闭
	PushStatus uint8 `json:"push_status"`
	// LiveSmallRemark holds the value of the "live_small_remark" field.
	// 直播说明
	LiveSmallRemark string `json:"live_small_remark"`
	// CoursewareAttachID holds the value of the "courseware_attach_id" field.
	// 资料下载附件ID
	CoursewareAttachID int `json:"courseware_attach_id"`
	// CoursewareName holds the value of the "courseware_name" field.
	// 资料名称
	CoursewareName string `json:"courseware_name"`
	// AttachmentCount holds the value of the "attachment_count" field.
	// 课时资料数量
	AttachmentCount int `json:"attachment_count"`
	// QuestionCount holds the value of the "question_count" field.
	// 课时练习数量
	QuestionCount int `json:"question_count"`
	// ExamCount holds the value of the "exam_count" field.
	// 课时考试试卷数量
	ExamCount int `json:"exam_count"`
	// HomeworkCount holds the value of the "homework_count" field.
	// 课时作业数量
	HomeworkCount int `json:"homework_count"`
	// StudyCount holds the value of the "study_count" field.
	// 学习人数
	StudyCount int `json:"study_count"`
	// FinishCount holds the value of the "finish_count" field.
	// 完成人数
	FinishCount int `json:"finish_count"`
	// AverageViewDuration holds the value of the "average_view_duration" field.
	// 平均观看时长
	AverageViewDuration int `json:"average_view_duration"`
	// CourseID holds the value of the "course_id" field.
	// 课程id
	CourseID int `json:"course_id"`
	// ChapterID holds the value of the "chapter_id" field.
	// 章id
	ChapterID int `json:"chapter_id"`
	// SectionID holds the value of the "section_id" field.
	// 节id
	SectionID int `json:"section_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KcCourseSmallCategoryQuery when eager-loading is set.
	Edges KcCourseSmallCategoryEdges `json:"edges"`
}

// KcCourseSmallCategoryEdges holds the relations/edges for other nodes in the graph.
type KcCourseSmallCategoryEdges struct {
	// Course holds the value of the course edge.
	Course *KcCourse `json:"course,omitempty"`
	// Chapter holds the value of the chapter edge.
	Chapter *KcCourseChapter `json:"chapter,omitempty"`
	// Section holds the value of the section edge.
	Section *KcCourseSection `json:"section,omitempty"`
	// CourseSmallCategoryAttachments holds the value of the course_small_category_attachments edge.
	CourseSmallCategoryAttachments []*KcSmallCategoryAttachment `json:"course_small_category_attachments,omitempty"`
	// CourseSmallCategoryExampapers holds the value of the course_small_category_exampapers edge.
	CourseSmallCategoryExampapers []*KcSmallCategoryExamPaper `json:"course_small_category_exampapers,omitempty"`
	// CourseSmallCategoryQuestions holds the value of the course_small_category_questions edge.
	CourseSmallCategoryQuestions []*KcSmallCategoryQuestion `json:"course_small_category_questions,omitempty"`
	// CourseAppraiseSmalls holds the value of the course_appraise_smalls edge.
	CourseAppraiseSmalls []*UserCourseAppraise `json:"course_appraise_smalls,omitempty"`
	// VideoRecordSmall holds the value of the video_record_small edge.
	VideoRecordSmall []*VideoRecord `json:"video_record_small,omitempty"`
	// CsAttachment holds the value of the cs_attachment edge.
	CsAttachment *Attachment `json:"cs_attachment,omitempty"`
	// OdAttachment holds the value of the od_attachment edge.
	OdAttachment *Attachment `json:"od_attachment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseSmallCategoryEdges) CourseOrErr() (*KcCourse, error) {
	if e.loadedTypes[0] {
		if e.Course == nil {
			// The edge course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccourse.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// ChapterOrErr returns the Chapter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseSmallCategoryEdges) ChapterOrErr() (*KcCourseChapter, error) {
	if e.loadedTypes[1] {
		if e.Chapter == nil {
			// The edge chapter was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccoursechapter.Label}
		}
		return e.Chapter, nil
	}
	return nil, &NotLoadedError{edge: "chapter"}
}

// SectionOrErr returns the Section value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseSmallCategoryEdges) SectionOrErr() (*KcCourseSection, error) {
	if e.loadedTypes[2] {
		if e.Section == nil {
			// The edge section was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccoursesection.Label}
		}
		return e.Section, nil
	}
	return nil, &NotLoadedError{edge: "section"}
}

// CourseSmallCategoryAttachmentsOrErr returns the CourseSmallCategoryAttachments value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseSmallCategoryEdges) CourseSmallCategoryAttachmentsOrErr() ([]*KcSmallCategoryAttachment, error) {
	if e.loadedTypes[3] {
		return e.CourseSmallCategoryAttachments, nil
	}
	return nil, &NotLoadedError{edge: "course_small_category_attachments"}
}

// CourseSmallCategoryExampapersOrErr returns the CourseSmallCategoryExampapers value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseSmallCategoryEdges) CourseSmallCategoryExampapersOrErr() ([]*KcSmallCategoryExamPaper, error) {
	if e.loadedTypes[4] {
		return e.CourseSmallCategoryExampapers, nil
	}
	return nil, &NotLoadedError{edge: "course_small_category_exampapers"}
}

// CourseSmallCategoryQuestionsOrErr returns the CourseSmallCategoryQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseSmallCategoryEdges) CourseSmallCategoryQuestionsOrErr() ([]*KcSmallCategoryQuestion, error) {
	if e.loadedTypes[5] {
		return e.CourseSmallCategoryQuestions, nil
	}
	return nil, &NotLoadedError{edge: "course_small_category_questions"}
}

// CourseAppraiseSmallsOrErr returns the CourseAppraiseSmalls value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseSmallCategoryEdges) CourseAppraiseSmallsOrErr() ([]*UserCourseAppraise, error) {
	if e.loadedTypes[6] {
		return e.CourseAppraiseSmalls, nil
	}
	return nil, &NotLoadedError{edge: "course_appraise_smalls"}
}

// VideoRecordSmallOrErr returns the VideoRecordSmall value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseSmallCategoryEdges) VideoRecordSmallOrErr() ([]*VideoRecord, error) {
	if e.loadedTypes[7] {
		return e.VideoRecordSmall, nil
	}
	return nil, &NotLoadedError{edge: "video_record_small"}
}

// CsAttachmentOrErr returns the CsAttachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseSmallCategoryEdges) CsAttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[8] {
		if e.CsAttachment == nil {
			// The edge cs_attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.CsAttachment, nil
	}
	return nil, &NotLoadedError{edge: "cs_attachment"}
}

// OdAttachmentOrErr returns the OdAttachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseSmallCategoryEdges) OdAttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[9] {
		if e.OdAttachment == nil {
			// The edge od_attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.OdAttachment, nil
	}
	return nil, &NotLoadedError{edge: "od_attachment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KcCourseSmallCategory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kccoursesmallcategory.FieldID, kccoursesmallcategory.FieldViewingTime, kccoursesmallcategory.FieldFinishType, kccoursesmallcategory.FieldTeachType, kccoursesmallcategory.FieldType, kccoursesmallcategory.FieldLiveSmallStatus, kccoursesmallcategory.FieldLiveRoomID, kccoursesmallcategory.FieldBackVideoID, kccoursesmallcategory.FieldFalseVideoID, kccoursesmallcategory.FieldOrderVideoID, kccoursesmallcategory.FieldOrderVideoAttachID, kccoursesmallcategory.FieldLiveSmallTime, kccoursesmallcategory.FieldPushStatus, kccoursesmallcategory.FieldCoursewareAttachID, kccoursesmallcategory.FieldAttachmentCount, kccoursesmallcategory.FieldQuestionCount, kccoursesmallcategory.FieldExamCount, kccoursesmallcategory.FieldHomeworkCount, kccoursesmallcategory.FieldStudyCount, kccoursesmallcategory.FieldFinishCount, kccoursesmallcategory.FieldAverageViewDuration, kccoursesmallcategory.FieldCourseID, kccoursesmallcategory.FieldChapterID, kccoursesmallcategory.FieldSectionID:
			values[i] = new(sql.NullInt64)
		case kccoursesmallcategory.FieldUUID, kccoursesmallcategory.FieldSmallName, kccoursesmallcategory.FieldLiveSmallRemark, kccoursesmallcategory.FieldCoursewareName:
			values[i] = new(sql.NullString)
		case kccoursesmallcategory.FieldCreatedAt, kccoursesmallcategory.FieldUpdatedAt, kccoursesmallcategory.FieldDeletedAt, kccoursesmallcategory.FieldLiveSmallStart:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KcCourseSmallCategory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KcCourseSmallCategory fields.
func (kcsc *KcCourseSmallCategory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kccoursesmallcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kcsc.ID = int(value.Int64)
		case kccoursesmallcategory.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				kcsc.UUID = value.String
			}
		case kccoursesmallcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kcsc.CreatedAt = new(time.Time)
				*kcsc.CreatedAt = value.Time
			}
		case kccoursesmallcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kcsc.UpdatedAt = new(time.Time)
				*kcsc.UpdatedAt = value.Time
			}
		case kccoursesmallcategory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				kcsc.DeletedAt = new(time.Time)
				*kcsc.DeletedAt = value.Time
			}
		case kccoursesmallcategory.FieldSmallName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field small_name", values[i])
			} else if value.Valid {
				kcsc.SmallName = value.String
			}
		case kccoursesmallcategory.FieldViewingTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field viewing_time", values[i])
			} else if value.Valid {
				kcsc.ViewingTime = int(value.Int64)
			}
		case kccoursesmallcategory.FieldFinishType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field finish_type", values[i])
			} else if value.Valid {
				kcsc.FinishType = uint8(value.Int64)
			}
		case kccoursesmallcategory.FieldTeachType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field teach_type", values[i])
			} else if value.Valid {
				kcsc.TeachType = uint8(value.Int64)
			}
		case kccoursesmallcategory.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				kcsc.Type = uint8(value.Int64)
			}
		case kccoursesmallcategory.FieldLiveSmallStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field live_small_start", values[i])
			} else if value.Valid {
				kcsc.LiveSmallStart = value.Time
			}
		case kccoursesmallcategory.FieldLiveSmallStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field live_small_status", values[i])
			} else if value.Valid {
				kcsc.LiveSmallStatus = int8(value.Int64)
			}
		case kccoursesmallcategory.FieldLiveRoomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field live_room_id", values[i])
			} else if value.Valid {
				kcsc.LiveRoomID = int(value.Int64)
			}
		case kccoursesmallcategory.FieldBackVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field back_video_id", values[i])
			} else if value.Valid {
				kcsc.BackVideoID = int(value.Int64)
			}
		case kccoursesmallcategory.FieldFalseVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field false_video_id", values[i])
			} else if value.Valid {
				kcsc.FalseVideoID = int(value.Int64)
			}
		case kccoursesmallcategory.FieldOrderVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_video_id", values[i])
			} else if value.Valid {
				kcsc.OrderVideoID = int(value.Int64)
			}
		case kccoursesmallcategory.FieldOrderVideoAttachID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_video_attach_id", values[i])
			} else if value.Valid {
				kcsc.OrderVideoAttachID = int(value.Int64)
			}
		case kccoursesmallcategory.FieldLiveSmallTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field live_small_time", values[i])
			} else if value.Valid {
				kcsc.LiveSmallTime = int(value.Int64)
			}
		case kccoursesmallcategory.FieldPushStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field push_status", values[i])
			} else if value.Valid {
				kcsc.PushStatus = uint8(value.Int64)
			}
		case kccoursesmallcategory.FieldLiveSmallRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field live_small_remark", values[i])
			} else if value.Valid {
				kcsc.LiveSmallRemark = value.String
			}
		case kccoursesmallcategory.FieldCoursewareAttachID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field courseware_attach_id", values[i])
			} else if value.Valid {
				kcsc.CoursewareAttachID = int(value.Int64)
			}
		case kccoursesmallcategory.FieldCoursewareName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field courseware_name", values[i])
			} else if value.Valid {
				kcsc.CoursewareName = value.String
			}
		case kccoursesmallcategory.FieldAttachmentCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_count", values[i])
			} else if value.Valid {
				kcsc.AttachmentCount = int(value.Int64)
			}
		case kccoursesmallcategory.FieldQuestionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_count", values[i])
			} else if value.Valid {
				kcsc.QuestionCount = int(value.Int64)
			}
		case kccoursesmallcategory.FieldExamCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_count", values[i])
			} else if value.Valid {
				kcsc.ExamCount = int(value.Int64)
			}
		case kccoursesmallcategory.FieldHomeworkCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homework_count", values[i])
			} else if value.Valid {
				kcsc.HomeworkCount = int(value.Int64)
			}
		case kccoursesmallcategory.FieldStudyCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field study_count", values[i])
			} else if value.Valid {
				kcsc.StudyCount = int(value.Int64)
			}
		case kccoursesmallcategory.FieldFinishCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field finish_count", values[i])
			} else if value.Valid {
				kcsc.FinishCount = int(value.Int64)
			}
		case kccoursesmallcategory.FieldAverageViewDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field average_view_duration", values[i])
			} else if value.Valid {
				kcsc.AverageViewDuration = int(value.Int64)
			}
		case kccoursesmallcategory.FieldCourseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				kcsc.CourseID = int(value.Int64)
			}
		case kccoursesmallcategory.FieldChapterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chapter_id", values[i])
			} else if value.Valid {
				kcsc.ChapterID = int(value.Int64)
			}
		case kccoursesmallcategory.FieldSectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field section_id", values[i])
			} else if value.Valid {
				kcsc.SectionID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCourse queries the "course" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QueryCourse() *KcCourseQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QueryCourse(kcsc)
}

// QueryChapter queries the "chapter" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QueryChapter() *KcCourseChapterQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QueryChapter(kcsc)
}

// QuerySection queries the "section" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QuerySection() *KcCourseSectionQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QuerySection(kcsc)
}

// QueryCourseSmallCategoryAttachments queries the "course_small_category_attachments" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QueryCourseSmallCategoryAttachments() *KcSmallCategoryAttachmentQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QueryCourseSmallCategoryAttachments(kcsc)
}

// QueryCourseSmallCategoryExampapers queries the "course_small_category_exampapers" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QueryCourseSmallCategoryExampapers() *KcSmallCategoryExamPaperQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QueryCourseSmallCategoryExampapers(kcsc)
}

// QueryCourseSmallCategoryQuestions queries the "course_small_category_questions" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QueryCourseSmallCategoryQuestions() *KcSmallCategoryQuestionQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QueryCourseSmallCategoryQuestions(kcsc)
}

// QueryCourseAppraiseSmalls queries the "course_appraise_smalls" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QueryCourseAppraiseSmalls() *UserCourseAppraiseQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QueryCourseAppraiseSmalls(kcsc)
}

// QueryVideoRecordSmall queries the "video_record_small" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QueryVideoRecordSmall() *VideoRecordQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QueryVideoRecordSmall(kcsc)
}

// QueryCsAttachment queries the "cs_attachment" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QueryCsAttachment() *AttachmentQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QueryCsAttachment(kcsc)
}

// QueryOdAttachment queries the "od_attachment" edge of the KcCourseSmallCategory entity.
func (kcsc *KcCourseSmallCategory) QueryOdAttachment() *AttachmentQuery {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).QueryOdAttachment(kcsc)
}

// Update returns a builder for updating this KcCourseSmallCategory.
// Note that you need to call KcCourseSmallCategory.Unwrap() before calling this method if this KcCourseSmallCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (kcsc *KcCourseSmallCategory) Update() *KcCourseSmallCategoryUpdateOne {
	return (&KcCourseSmallCategoryClient{config: kcsc.config}).UpdateOne(kcsc)
}

// Unwrap unwraps the KcCourseSmallCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kcsc *KcCourseSmallCategory) Unwrap() *KcCourseSmallCategory {
	tx, ok := kcsc.config.driver.(*txDriver)
	if !ok {
		panic("ent: KcCourseSmallCategory is not a transactional entity")
	}
	kcsc.config.driver = tx.drv
	return kcsc
}

// String implements the fmt.Stringer.
func (kcsc *KcCourseSmallCategory) String() string {
	var builder strings.Builder
	builder.WriteString("KcCourseSmallCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", kcsc.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(kcsc.UUID)
	if v := kcsc.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := kcsc.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := kcsc.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", small_name=")
	builder.WriteString(kcsc.SmallName)
	builder.WriteString(", viewing_time=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.ViewingTime))
	builder.WriteString(", finish_type=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.FinishType))
	builder.WriteString(", teach_type=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.TeachType))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.Type))
	builder.WriteString(", live_small_start=")
	builder.WriteString(kcsc.LiveSmallStart.Format(time.ANSIC))
	builder.WriteString(", live_small_status=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.LiveSmallStatus))
	builder.WriteString(", live_room_id=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.LiveRoomID))
	builder.WriteString(", back_video_id=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.BackVideoID))
	builder.WriteString(", false_video_id=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.FalseVideoID))
	builder.WriteString(", order_video_id=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.OrderVideoID))
	builder.WriteString(", order_video_attach_id=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.OrderVideoAttachID))
	builder.WriteString(", live_small_time=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.LiveSmallTime))
	builder.WriteString(", push_status=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.PushStatus))
	builder.WriteString(", live_small_remark=")
	builder.WriteString(kcsc.LiveSmallRemark)
	builder.WriteString(", courseware_attach_id=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.CoursewareAttachID))
	builder.WriteString(", courseware_name=")
	builder.WriteString(kcsc.CoursewareName)
	builder.WriteString(", attachment_count=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.AttachmentCount))
	builder.WriteString(", question_count=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.QuestionCount))
	builder.WriteString(", exam_count=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.ExamCount))
	builder.WriteString(", homework_count=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.HomeworkCount))
	builder.WriteString(", study_count=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.StudyCount))
	builder.WriteString(", finish_count=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.FinishCount))
	builder.WriteString(", average_view_duration=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.AverageViewDuration))
	builder.WriteString(", course_id=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.CourseID))
	builder.WriteString(", chapter_id=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.ChapterID))
	builder.WriteString(", section_id=")
	builder.WriteString(fmt.Sprintf("%v", kcsc.SectionID))
	builder.WriteByte(')')
	return builder.String()
}

// KcCourseSmallCategories is a parsable slice of KcCourseSmallCategory.
type KcCourseSmallCategories []*KcCourseSmallCategory

func (kcsc KcCourseSmallCategories) config(cfg config) {
	for _i := range kcsc {
		kcsc[_i].config = cfg
	}
}

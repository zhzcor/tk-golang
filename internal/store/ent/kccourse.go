// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/city"
	"gserver/internal/store/ent/itemcategory"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/tkquestionbank"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// KcCourse is the model entity for the KcCourse schema.
type KcCourse struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// CourseName holds the value of the "course_name" field.
	// 名称
	CourseName string `json:"course_name"`
	// CourseType holds the value of the "course_type" field.
	// 1:普通课程，2:直播课程，3:直播公开课，4:录播公开课
	CourseType uint8 `json:"course_type"`
	// PeopleNum holds the value of the "people_num" field.
	// 学习人数
	PeopleNum int `json:"people_num"`
	// CoursePrice holds the value of the "course_price" field.
	// 价格
	CoursePrice float64 `json:"course_price"`
	// CourseDesc holds the value of the "course_desc" field.
	// 简介
	CourseDesc string `json:"course_desc"`
	// PushStatus holds the value of the "push_status" field.
	// 1，发布 2：未发布 3 关闭
	PushStatus uint8 `json:"push_status"`
	// CateID holds the value of the "cate_id" field.
	// 项目id
	CateID int `json:"cate_id"`
	// CityID holds the value of the "city_id" field.
	// 地区id
	CityID int `json:"city_id"`
	// QuestionBankID holds the value of the "question_bank_id" field.
	// 题库id
	QuestionBankID int `json:"question_bank_id"`
	// CourseCoverImgID holds the value of the "course_cover_img_id" field.
	// 课程封面图id
	CourseCoverImgID int `json:"course_cover_img_id"`
	// CreatedAdminID holds the value of the "created_admin_id" field.
	// 创建人id
	CreatedAdminID int `json:"created_admin_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KcCourseQuery when eager-loading is set.
	Edges KcCourseEdges `json:"edges"`
}

// KcCourseEdges holds the relations/edges for other nodes in the graph.
type KcCourseEdges struct {
	// Major holds the value of the major edge.
	Major []*Major `json:"major,omitempty"`
	// Item holds the value of the item edge.
	Item *ItemCategory `json:"item,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Admin holds the value of the admin edge.
	Admin *Admin `json:"admin,omitempty"`
	// QuestionBank holds the value of the question_bank edge.
	QuestionBank *TkQuestionBank `json:"question_bank,omitempty"`
	// Attachment holds the value of the attachment edge.
	Attachment *Attachment `json:"attachment,omitempty"`
	// CourseTeachers holds the value of the course_teachers edge.
	CourseTeachers []*KcCourseTeacher `json:"course_teachers,omitempty"`
	// Classes holds the value of the classes edge.
	Classes []*KcClass `json:"classes,omitempty"`
	// CourseSmallCategorys holds the value of the course_small_categorys edge.
	CourseSmallCategorys []*KcCourseSmallCategory `json:"course_small_categorys,omitempty"`
	// CourseAppraise holds the value of the course_appraise edge.
	CourseAppraise []*UserCourseAppraise `json:"course_appraise,omitempty"`
	// CourseChapters holds the value of the course_chapters edge.
	CourseChapters []*KcCourseChapter `json:"course_chapters,omitempty"`
	// KcUserCourses holds the value of the kc_user_courses edge.
	KcUserCourses []*KcUserCourse `json:"kc_user_courses,omitempty"`
	// MessageCourses holds the value of the message_courses edge.
	MessageCourses []*Message `json:"message_courses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
}

// MajorOrErr returns the Major value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseEdges) MajorOrErr() ([]*Major, error) {
	if e.loadedTypes[0] {
		return e.Major, nil
	}
	return nil, &NotLoadedError{edge: "major"}
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseEdges) ItemOrErr() (*ItemCategory, error) {
	if e.loadedTypes[1] {
		if e.Item == nil {
			// The edge item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: itemcategory.Label}
		}
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[2] {
		if e.City == nil {
			// The edge city was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseEdges) AdminOrErr() (*Admin, error) {
	if e.loadedTypes[3] {
		if e.Admin == nil {
			// The edge admin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// QuestionBankOrErr returns the QuestionBank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseEdges) QuestionBankOrErr() (*TkQuestionBank, error) {
	if e.loadedTypes[4] {
		if e.QuestionBank == nil {
			// The edge question_bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestionbank.Label}
		}
		return e.QuestionBank, nil
	}
	return nil, &NotLoadedError{edge: "question_bank"}
}

// AttachmentOrErr returns the Attachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseEdges) AttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[5] {
		if e.Attachment == nil {
			// The edge attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.Attachment, nil
	}
	return nil, &NotLoadedError{edge: "attachment"}
}

// CourseTeachersOrErr returns the CourseTeachers value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseEdges) CourseTeachersOrErr() ([]*KcCourseTeacher, error) {
	if e.loadedTypes[6] {
		return e.CourseTeachers, nil
	}
	return nil, &NotLoadedError{edge: "course_teachers"}
}

// ClassesOrErr returns the Classes value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseEdges) ClassesOrErr() ([]*KcClass, error) {
	if e.loadedTypes[7] {
		return e.Classes, nil
	}
	return nil, &NotLoadedError{edge: "classes"}
}

// CourseSmallCategorysOrErr returns the CourseSmallCategorys value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseEdges) CourseSmallCategorysOrErr() ([]*KcCourseSmallCategory, error) {
	if e.loadedTypes[8] {
		return e.CourseSmallCategorys, nil
	}
	return nil, &NotLoadedError{edge: "course_small_categorys"}
}

// CourseAppraiseOrErr returns the CourseAppraise value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseEdges) CourseAppraiseOrErr() ([]*UserCourseAppraise, error) {
	if e.loadedTypes[9] {
		return e.CourseAppraise, nil
	}
	return nil, &NotLoadedError{edge: "course_appraise"}
}

// CourseChaptersOrErr returns the CourseChapters value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseEdges) CourseChaptersOrErr() ([]*KcCourseChapter, error) {
	if e.loadedTypes[10] {
		return e.CourseChapters, nil
	}
	return nil, &NotLoadedError{edge: "course_chapters"}
}

// KcUserCoursesOrErr returns the KcUserCourses value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseEdges) KcUserCoursesOrErr() ([]*KcUserCourse, error) {
	if e.loadedTypes[11] {
		return e.KcUserCourses, nil
	}
	return nil, &NotLoadedError{edge: "kc_user_courses"}
}

// MessageCoursesOrErr returns the MessageCourses value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseEdges) MessageCoursesOrErr() ([]*Message, error) {
	if e.loadedTypes[12] {
		return e.MessageCourses, nil
	}
	return nil, &NotLoadedError{edge: "message_courses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KcCourse) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kccourse.FieldCoursePrice:
			values[i] = new(sql.NullFloat64)
		case kccourse.FieldID, kccourse.FieldCourseType, kccourse.FieldPeopleNum, kccourse.FieldPushStatus, kccourse.FieldCateID, kccourse.FieldCityID, kccourse.FieldQuestionBankID, kccourse.FieldCourseCoverImgID, kccourse.FieldCreatedAdminID:
			values[i] = new(sql.NullInt64)
		case kccourse.FieldUUID, kccourse.FieldCourseName, kccourse.FieldCourseDesc:
			values[i] = new(sql.NullString)
		case kccourse.FieldCreatedAt, kccourse.FieldUpdatedAt, kccourse.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KcCourse", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KcCourse fields.
func (kc *KcCourse) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kccourse.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kc.ID = int(value.Int64)
		case kccourse.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				kc.UUID = value.String
			}
		case kccourse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kc.CreatedAt = new(time.Time)
				*kc.CreatedAt = value.Time
			}
		case kccourse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kc.UpdatedAt = new(time.Time)
				*kc.UpdatedAt = value.Time
			}
		case kccourse.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				kc.DeletedAt = new(time.Time)
				*kc.DeletedAt = value.Time
			}
		case kccourse.FieldCourseName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field course_name", values[i])
			} else if value.Valid {
				kc.CourseName = value.String
			}
		case kccourse.FieldCourseType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_type", values[i])
			} else if value.Valid {
				kc.CourseType = uint8(value.Int64)
			}
		case kccourse.FieldPeopleNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field people_num", values[i])
			} else if value.Valid {
				kc.PeopleNum = int(value.Int64)
			}
		case kccourse.FieldCoursePrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field course_price", values[i])
			} else if value.Valid {
				kc.CoursePrice = value.Float64
			}
		case kccourse.FieldCourseDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field course_desc", values[i])
			} else if value.Valid {
				kc.CourseDesc = value.String
			}
		case kccourse.FieldPushStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field push_status", values[i])
			} else if value.Valid {
				kc.PushStatus = uint8(value.Int64)
			}
		case kccourse.FieldCateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cate_id", values[i])
			} else if value.Valid {
				kc.CateID = int(value.Int64)
			}
		case kccourse.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				kc.CityID = int(value.Int64)
			}
		case kccourse.FieldQuestionBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_bank_id", values[i])
			} else if value.Valid {
				kc.QuestionBankID = int(value.Int64)
			}
		case kccourse.FieldCourseCoverImgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_cover_img_id", values[i])
			} else if value.Valid {
				kc.CourseCoverImgID = int(value.Int64)
			}
		case kccourse.FieldCreatedAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_admin_id", values[i])
			} else if value.Valid {
				kc.CreatedAdminID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMajor queries the "major" edge of the KcCourse entity.
func (kc *KcCourse) QueryMajor() *MajorQuery {
	return (&KcCourseClient{config: kc.config}).QueryMajor(kc)
}

// QueryItem queries the "item" edge of the KcCourse entity.
func (kc *KcCourse) QueryItem() *ItemCategoryQuery {
	return (&KcCourseClient{config: kc.config}).QueryItem(kc)
}

// QueryCity queries the "city" edge of the KcCourse entity.
func (kc *KcCourse) QueryCity() *CityQuery {
	return (&KcCourseClient{config: kc.config}).QueryCity(kc)
}

// QueryAdmin queries the "admin" edge of the KcCourse entity.
func (kc *KcCourse) QueryAdmin() *AdminQuery {
	return (&KcCourseClient{config: kc.config}).QueryAdmin(kc)
}

// QueryQuestionBank queries the "question_bank" edge of the KcCourse entity.
func (kc *KcCourse) QueryQuestionBank() *TkQuestionBankQuery {
	return (&KcCourseClient{config: kc.config}).QueryQuestionBank(kc)
}

// QueryAttachment queries the "attachment" edge of the KcCourse entity.
func (kc *KcCourse) QueryAttachment() *AttachmentQuery {
	return (&KcCourseClient{config: kc.config}).QueryAttachment(kc)
}

// QueryCourseTeachers queries the "course_teachers" edge of the KcCourse entity.
func (kc *KcCourse) QueryCourseTeachers() *KcCourseTeacherQuery {
	return (&KcCourseClient{config: kc.config}).QueryCourseTeachers(kc)
}

// QueryClasses queries the "classes" edge of the KcCourse entity.
func (kc *KcCourse) QueryClasses() *KcClassQuery {
	return (&KcCourseClient{config: kc.config}).QueryClasses(kc)
}

// QueryCourseSmallCategorys queries the "course_small_categorys" edge of the KcCourse entity.
func (kc *KcCourse) QueryCourseSmallCategorys() *KcCourseSmallCategoryQuery {
	return (&KcCourseClient{config: kc.config}).QueryCourseSmallCategorys(kc)
}

// QueryCourseAppraise queries the "course_appraise" edge of the KcCourse entity.
func (kc *KcCourse) QueryCourseAppraise() *UserCourseAppraiseQuery {
	return (&KcCourseClient{config: kc.config}).QueryCourseAppraise(kc)
}

// QueryCourseChapters queries the "course_chapters" edge of the KcCourse entity.
func (kc *KcCourse) QueryCourseChapters() *KcCourseChapterQuery {
	return (&KcCourseClient{config: kc.config}).QueryCourseChapters(kc)
}

// QueryKcUserCourses queries the "kc_user_courses" edge of the KcCourse entity.
func (kc *KcCourse) QueryKcUserCourses() *KcUserCourseQuery {
	return (&KcCourseClient{config: kc.config}).QueryKcUserCourses(kc)
}

// QueryMessageCourses queries the "message_courses" edge of the KcCourse entity.
func (kc *KcCourse) QueryMessageCourses() *MessageQuery {
	return (&KcCourseClient{config: kc.config}).QueryMessageCourses(kc)
}

// Update returns a builder for updating this KcCourse.
// Note that you need to call KcCourse.Unwrap() before calling this method if this KcCourse
// was returned from a transaction, and the transaction was committed or rolled back.
func (kc *KcCourse) Update() *KcCourseUpdateOne {
	return (&KcCourseClient{config: kc.config}).UpdateOne(kc)
}

// Unwrap unwraps the KcCourse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kc *KcCourse) Unwrap() *KcCourse {
	tx, ok := kc.config.driver.(*txDriver)
	if !ok {
		panic("ent: KcCourse is not a transactional entity")
	}
	kc.config.driver = tx.drv
	return kc
}

// String implements the fmt.Stringer.
func (kc *KcCourse) String() string {
	var builder strings.Builder
	builder.WriteString("KcCourse(")
	builder.WriteString(fmt.Sprintf("id=%v", kc.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(kc.UUID)
	if v := kc.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := kc.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := kc.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", course_name=")
	builder.WriteString(kc.CourseName)
	builder.WriteString(", course_type=")
	builder.WriteString(fmt.Sprintf("%v", kc.CourseType))
	builder.WriteString(", people_num=")
	builder.WriteString(fmt.Sprintf("%v", kc.PeopleNum))
	builder.WriteString(", course_price=")
	builder.WriteString(fmt.Sprintf("%v", kc.CoursePrice))
	builder.WriteString(", course_desc=")
	builder.WriteString(kc.CourseDesc)
	builder.WriteString(", push_status=")
	builder.WriteString(fmt.Sprintf("%v", kc.PushStatus))
	builder.WriteString(", cate_id=")
	builder.WriteString(fmt.Sprintf("%v", kc.CateID))
	builder.WriteString(", city_id=")
	builder.WriteString(fmt.Sprintf("%v", kc.CityID))
	builder.WriteString(", question_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", kc.QuestionBankID))
	builder.WriteString(", course_cover_img_id=")
	builder.WriteString(fmt.Sprintf("%v", kc.CourseCoverImgID))
	builder.WriteString(", created_admin_id=")
	builder.WriteString(fmt.Sprintf("%v", kc.CreatedAdminID))
	builder.WriteByte(')')
	return builder.String()
}

// KcCourses is a parsable slice of KcCourse.
type KcCourses []*KcCourse

func (kc KcCourses) config(cfg config) {
	for _i := range kc {
		kc[_i].config = cfg
	}
}

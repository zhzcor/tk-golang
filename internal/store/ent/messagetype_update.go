// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/message"
	"gserver/internal/store/ent/messagetype"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageTypeUpdate is the builder for updating MessageType entities.
type MessageTypeUpdate struct {
	config
	hooks    []Hook
	mutation *MessageTypeMutation
}

// Where adds a new predicate for the MessageTypeUpdate builder.
func (mtu *MessageTypeUpdate) Where(ps ...predicate.MessageType) *MessageTypeUpdate {
	mtu.mutation.predicates = append(mtu.mutation.predicates, ps...)
	return mtu
}

// SetUUID sets the "uuid" field.
func (mtu *MessageTypeUpdate) SetUUID(s string) *MessageTypeUpdate {
	mtu.mutation.SetUUID(s)
	return mtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mtu *MessageTypeUpdate) SetUpdatedAt(t time.Time) *MessageTypeUpdate {
	mtu.mutation.SetUpdatedAt(t)
	return mtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mtu *MessageTypeUpdate) ClearUpdatedAt() *MessageTypeUpdate {
	mtu.mutation.ClearUpdatedAt()
	return mtu
}

// SetDeletedAt sets the "deleted_at" field.
func (mtu *MessageTypeUpdate) SetDeletedAt(t time.Time) *MessageTypeUpdate {
	mtu.mutation.SetDeletedAt(t)
	return mtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mtu *MessageTypeUpdate) SetNillableDeletedAt(t *time.Time) *MessageTypeUpdate {
	if t != nil {
		mtu.SetDeletedAt(*t)
	}
	return mtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mtu *MessageTypeUpdate) ClearDeletedAt() *MessageTypeUpdate {
	mtu.mutation.ClearDeletedAt()
	return mtu
}

// SetName sets the "name" field.
func (mtu *MessageTypeUpdate) SetName(s string) *MessageTypeUpdate {
	mtu.mutation.SetName(s)
	return mtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mtu *MessageTypeUpdate) SetNillableName(s *string) *MessageTypeUpdate {
	if s != nil {
		mtu.SetName(*s)
	}
	return mtu
}

// SetStatus sets the "status" field.
func (mtu *MessageTypeUpdate) SetStatus(u uint8) *MessageTypeUpdate {
	mtu.mutation.ResetStatus()
	mtu.mutation.SetStatus(u)
	return mtu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtu *MessageTypeUpdate) SetNillableStatus(u *uint8) *MessageTypeUpdate {
	if u != nil {
		mtu.SetStatus(*u)
	}
	return mtu
}

// AddStatus adds u to the "status" field.
func (mtu *MessageTypeUpdate) AddStatus(u uint8) *MessageTypeUpdate {
	mtu.mutation.AddStatus(u)
	return mtu
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (mtu *MessageTypeUpdate) AddMessageIDs(ids ...int) *MessageTypeUpdate {
	mtu.mutation.AddMessageIDs(ids...)
	return mtu
}

// AddMessages adds the "messages" edges to the Message entity.
func (mtu *MessageTypeUpdate) AddMessages(m ...*Message) *MessageTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.AddMessageIDs(ids...)
}

// Mutation returns the MessageTypeMutation object of the builder.
func (mtu *MessageTypeUpdate) Mutation() *MessageTypeMutation {
	return mtu.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (mtu *MessageTypeUpdate) ClearMessages() *MessageTypeUpdate {
	mtu.mutation.ClearMessages()
	return mtu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (mtu *MessageTypeUpdate) RemoveMessageIDs(ids ...int) *MessageTypeUpdate {
	mtu.mutation.RemoveMessageIDs(ids...)
	return mtu
}

// RemoveMessages removes "messages" edges to Message entities.
func (mtu *MessageTypeUpdate) RemoveMessages(m ...*Message) *MessageTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MessageTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mtu.defaults()
	if len(mtu.hooks) == 0 {
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MessageTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MessageTypeUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MessageTypeUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtu *MessageTypeUpdate) defaults() {
	if _, ok := mtu.mutation.UpdatedAt(); !ok && !mtu.mutation.UpdatedAtCleared() {
		v := messagetype.UpdateDefaultUpdatedAt()
		mtu.mutation.SetUpdatedAt(v)
	}
}

func (mtu *MessageTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagetype.Table,
			Columns: messagetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagetype.FieldID,
			},
		},
	}
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagetype.FieldUUID,
		})
	}
	if mtu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: messagetype.FieldCreatedAt,
		})
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagetype.FieldUpdatedAt,
		})
	}
	if mtu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: messagetype.FieldUpdatedAt,
		})
	}
	if value, ok := mtu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagetype.FieldDeletedAt,
		})
	}
	if mtu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: messagetype.FieldDeletedAt,
		})
	}
	if value, ok := mtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagetype.FieldName,
		})
	}
	if value, ok := mtu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: messagetype.FieldStatus,
		})
	}
	if value, ok := mtu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: messagetype.FieldStatus,
		})
	}
	if mtu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagetype.MessagesTable,
			Columns: []string{messagetype.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !mtu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagetype.MessagesTable,
			Columns: []string{messagetype.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagetype.MessagesTable,
			Columns: []string{messagetype.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MessageTypeUpdateOne is the builder for updating a single MessageType entity.
type MessageTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageTypeMutation
}

// SetUUID sets the "uuid" field.
func (mtuo *MessageTypeUpdateOne) SetUUID(s string) *MessageTypeUpdateOne {
	mtuo.mutation.SetUUID(s)
	return mtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mtuo *MessageTypeUpdateOne) SetUpdatedAt(t time.Time) *MessageTypeUpdateOne {
	mtuo.mutation.SetUpdatedAt(t)
	return mtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mtuo *MessageTypeUpdateOne) ClearUpdatedAt() *MessageTypeUpdateOne {
	mtuo.mutation.ClearUpdatedAt()
	return mtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mtuo *MessageTypeUpdateOne) SetDeletedAt(t time.Time) *MessageTypeUpdateOne {
	mtuo.mutation.SetDeletedAt(t)
	return mtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mtuo *MessageTypeUpdateOne) SetNillableDeletedAt(t *time.Time) *MessageTypeUpdateOne {
	if t != nil {
		mtuo.SetDeletedAt(*t)
	}
	return mtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mtuo *MessageTypeUpdateOne) ClearDeletedAt() *MessageTypeUpdateOne {
	mtuo.mutation.ClearDeletedAt()
	return mtuo
}

// SetName sets the "name" field.
func (mtuo *MessageTypeUpdateOne) SetName(s string) *MessageTypeUpdateOne {
	mtuo.mutation.SetName(s)
	return mtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mtuo *MessageTypeUpdateOne) SetNillableName(s *string) *MessageTypeUpdateOne {
	if s != nil {
		mtuo.SetName(*s)
	}
	return mtuo
}

// SetStatus sets the "status" field.
func (mtuo *MessageTypeUpdateOne) SetStatus(u uint8) *MessageTypeUpdateOne {
	mtuo.mutation.ResetStatus()
	mtuo.mutation.SetStatus(u)
	return mtuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtuo *MessageTypeUpdateOne) SetNillableStatus(u *uint8) *MessageTypeUpdateOne {
	if u != nil {
		mtuo.SetStatus(*u)
	}
	return mtuo
}

// AddStatus adds u to the "status" field.
func (mtuo *MessageTypeUpdateOne) AddStatus(u uint8) *MessageTypeUpdateOne {
	mtuo.mutation.AddStatus(u)
	return mtuo
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (mtuo *MessageTypeUpdateOne) AddMessageIDs(ids ...int) *MessageTypeUpdateOne {
	mtuo.mutation.AddMessageIDs(ids...)
	return mtuo
}

// AddMessages adds the "messages" edges to the Message entity.
func (mtuo *MessageTypeUpdateOne) AddMessages(m ...*Message) *MessageTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.AddMessageIDs(ids...)
}

// Mutation returns the MessageTypeMutation object of the builder.
func (mtuo *MessageTypeUpdateOne) Mutation() *MessageTypeMutation {
	return mtuo.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (mtuo *MessageTypeUpdateOne) ClearMessages() *MessageTypeUpdateOne {
	mtuo.mutation.ClearMessages()
	return mtuo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (mtuo *MessageTypeUpdateOne) RemoveMessageIDs(ids ...int) *MessageTypeUpdateOne {
	mtuo.mutation.RemoveMessageIDs(ids...)
	return mtuo
}

// RemoveMessages removes "messages" edges to Message entities.
func (mtuo *MessageTypeUpdateOne) RemoveMessages(m ...*Message) *MessageTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.RemoveMessageIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MessageTypeUpdateOne) Select(field string, fields ...string) *MessageTypeUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MessageType entity.
func (mtuo *MessageTypeUpdateOne) Save(ctx context.Context) (*MessageType, error) {
	var (
		err  error
		node *MessageType
	)
	mtuo.defaults()
	if len(mtuo.hooks) == 0 {
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			mut = mtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MessageTypeUpdateOne) SaveX(ctx context.Context) *MessageType {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MessageTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MessageTypeUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtuo *MessageTypeUpdateOne) defaults() {
	if _, ok := mtuo.mutation.UpdatedAt(); !ok && !mtuo.mutation.UpdatedAtCleared() {
		v := messagetype.UpdateDefaultUpdatedAt()
		mtuo.mutation.SetUpdatedAt(v)
	}
}

func (mtuo *MessageTypeUpdateOne) sqlSave(ctx context.Context) (_node *MessageType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagetype.Table,
			Columns: messagetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagetype.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MessageType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagetype.FieldID)
		for _, f := range fields {
			if !messagetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagetype.FieldUUID,
		})
	}
	if mtuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: messagetype.FieldCreatedAt,
		})
	}
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagetype.FieldUpdatedAt,
		})
	}
	if mtuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: messagetype.FieldUpdatedAt,
		})
	}
	if value, ok := mtuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagetype.FieldDeletedAt,
		})
	}
	if mtuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: messagetype.FieldDeletedAt,
		})
	}
	if value, ok := mtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagetype.FieldName,
		})
	}
	if value, ok := mtuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: messagetype.FieldStatus,
		})
	}
	if value, ok := mtuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: messagetype.FieldStatus,
		})
	}
	if mtuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagetype.MessagesTable,
			Columns: []string{messagetype.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !mtuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagetype.MessagesTable,
			Columns: []string{messagetype.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagetype.MessagesTable,
			Columns: []string{messagetype.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MessageType{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

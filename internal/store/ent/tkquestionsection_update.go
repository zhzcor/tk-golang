// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionsection"
	"tkserver/internal/store/ent/tksection"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionSectionUpdate is the builder for updating TkQuestionSection entities.
type TkQuestionSectionUpdate struct {
	config
	hooks    []Hook
	mutation *TkQuestionSectionMutation
}

// Where adds a new predicate for the TkQuestionSectionUpdate builder.
func (tqsu *TkQuestionSectionUpdate) Where(ps ...predicate.TkQuestionSection) *TkQuestionSectionUpdate {
	tqsu.mutation.predicates = append(tqsu.mutation.predicates, ps...)
	return tqsu
}

// SetUUID sets the "uuid" field.
func (tqsu *TkQuestionSectionUpdate) SetUUID(s string) *TkQuestionSectionUpdate {
	tqsu.mutation.SetUUID(s)
	return tqsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tqsu *TkQuestionSectionUpdate) SetUpdatedAt(t time.Time) *TkQuestionSectionUpdate {
	tqsu.mutation.SetUpdatedAt(t)
	return tqsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqsu *TkQuestionSectionUpdate) ClearUpdatedAt() *TkQuestionSectionUpdate {
	tqsu.mutation.ClearUpdatedAt()
	return tqsu
}

// SetDeletedAt sets the "deleted_at" field.
func (tqsu *TkQuestionSectionUpdate) SetDeletedAt(t time.Time) *TkQuestionSectionUpdate {
	tqsu.mutation.SetDeletedAt(t)
	return tqsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqsu *TkQuestionSectionUpdate) SetNillableDeletedAt(t *time.Time) *TkQuestionSectionUpdate {
	if t != nil {
		tqsu.SetDeletedAt(*t)
	}
	return tqsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqsu *TkQuestionSectionUpdate) ClearDeletedAt() *TkQuestionSectionUpdate {
	tqsu.mutation.ClearDeletedAt()
	return tqsu
}

// SetSectionID sets the "section_id" field.
func (tqsu *TkQuestionSectionUpdate) SetSectionID(i int) *TkQuestionSectionUpdate {
	tqsu.mutation.ResetSectionID()
	tqsu.mutation.SetSectionID(i)
	return tqsu
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (tqsu *TkQuestionSectionUpdate) SetNillableSectionID(i *int) *TkQuestionSectionUpdate {
	if i != nil {
		tqsu.SetSectionID(*i)
	}
	return tqsu
}

// ClearSectionID clears the value of the "section_id" field.
func (tqsu *TkQuestionSectionUpdate) ClearSectionID() *TkQuestionSectionUpdate {
	tqsu.mutation.ClearSectionID()
	return tqsu
}

// SetQuestionID sets the "question_id" field.
func (tqsu *TkQuestionSectionUpdate) SetQuestionID(i int) *TkQuestionSectionUpdate {
	tqsu.mutation.ResetQuestionID()
	tqsu.mutation.SetQuestionID(i)
	return tqsu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqsu *TkQuestionSectionUpdate) SetNillableQuestionID(i *int) *TkQuestionSectionUpdate {
	if i != nil {
		tqsu.SetQuestionID(*i)
	}
	return tqsu
}

// ClearQuestionID clears the value of the "question_id" field.
func (tqsu *TkQuestionSectionUpdate) ClearQuestionID() *TkQuestionSectionUpdate {
	tqsu.mutation.ClearQuestionID()
	return tqsu
}

// SetQuestionSectionID sets the "question_section" edge to the TkSection entity by ID.
func (tqsu *TkQuestionSectionUpdate) SetQuestionSectionID(id int) *TkQuestionSectionUpdate {
	tqsu.mutation.SetQuestionSectionID(id)
	return tqsu
}

// SetNillableQuestionSectionID sets the "question_section" edge to the TkSection entity by ID if the given value is not nil.
func (tqsu *TkQuestionSectionUpdate) SetNillableQuestionSectionID(id *int) *TkQuestionSectionUpdate {
	if id != nil {
		tqsu = tqsu.SetQuestionSectionID(*id)
	}
	return tqsu
}

// SetQuestionSection sets the "question_section" edge to the TkSection entity.
func (tqsu *TkQuestionSectionUpdate) SetQuestionSection(t *TkSection) *TkQuestionSectionUpdate {
	return tqsu.SetQuestionSectionID(t.ID)
}

// SetSectionQuestionID sets the "section_question" edge to the TkQuestion entity by ID.
func (tqsu *TkQuestionSectionUpdate) SetSectionQuestionID(id int) *TkQuestionSectionUpdate {
	tqsu.mutation.SetSectionQuestionID(id)
	return tqsu
}

// SetNillableSectionQuestionID sets the "section_question" edge to the TkQuestion entity by ID if the given value is not nil.
func (tqsu *TkQuestionSectionUpdate) SetNillableSectionQuestionID(id *int) *TkQuestionSectionUpdate {
	if id != nil {
		tqsu = tqsu.SetSectionQuestionID(*id)
	}
	return tqsu
}

// SetSectionQuestion sets the "section_question" edge to the TkQuestion entity.
func (tqsu *TkQuestionSectionUpdate) SetSectionQuestion(t *TkQuestion) *TkQuestionSectionUpdate {
	return tqsu.SetSectionQuestionID(t.ID)
}

// Mutation returns the TkQuestionSectionMutation object of the builder.
func (tqsu *TkQuestionSectionUpdate) Mutation() *TkQuestionSectionMutation {
	return tqsu.mutation
}

// ClearQuestionSection clears the "question_section" edge to the TkSection entity.
func (tqsu *TkQuestionSectionUpdate) ClearQuestionSection() *TkQuestionSectionUpdate {
	tqsu.mutation.ClearQuestionSection()
	return tqsu
}

// ClearSectionQuestion clears the "section_question" edge to the TkQuestion entity.
func (tqsu *TkQuestionSectionUpdate) ClearSectionQuestion() *TkQuestionSectionUpdate {
	tqsu.mutation.ClearSectionQuestion()
	return tqsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqsu *TkQuestionSectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tqsu.defaults()
	if len(tqsu.hooks) == 0 {
		affected, err = tqsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqsu.mutation = mutation
			affected, err = tqsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tqsu.hooks) - 1; i >= 0; i-- {
			mut = tqsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqsu *TkQuestionSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := tqsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqsu *TkQuestionSectionUpdate) Exec(ctx context.Context) error {
	_, err := tqsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqsu *TkQuestionSectionUpdate) ExecX(ctx context.Context) {
	if err := tqsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqsu *TkQuestionSectionUpdate) defaults() {
	if _, ok := tqsu.mutation.UpdatedAt(); !ok && !tqsu.mutation.UpdatedAtCleared() {
		v := tkquestionsection.UpdateDefaultUpdatedAt()
		tqsu.mutation.SetUpdatedAt(v)
	}
}

func (tqsu *TkQuestionSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionsection.Table,
			Columns: tkquestionsection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionsection.FieldID,
			},
		},
	}
	if ps := tqsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqsu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionsection.FieldUUID,
		})
	}
	if tqsu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionsection.FieldCreatedAt,
		})
	}
	if value, ok := tqsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionsection.FieldUpdatedAt,
		})
	}
	if tqsu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionsection.FieldUpdatedAt,
		})
	}
	if value, ok := tqsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionsection.FieldDeletedAt,
		})
	}
	if tqsu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionsection.FieldDeletedAt,
		})
	}
	if tqsu.mutation.QuestionSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.QuestionSectionTable,
			Columns: []string{tkquestionsection.QuestionSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqsu.mutation.QuestionSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.QuestionSectionTable,
			Columns: []string{tkquestionsection.QuestionSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqsu.mutation.SectionQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.SectionQuestionTable,
			Columns: []string{tkquestionsection.SectionQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqsu.mutation.SectionQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.SectionQuestionTable,
			Columns: []string{tkquestionsection.SectionQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionsection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkQuestionSectionUpdateOne is the builder for updating a single TkQuestionSection entity.
type TkQuestionSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkQuestionSectionMutation
}

// SetUUID sets the "uuid" field.
func (tqsuo *TkQuestionSectionUpdateOne) SetUUID(s string) *TkQuestionSectionUpdateOne {
	tqsuo.mutation.SetUUID(s)
	return tqsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tqsuo *TkQuestionSectionUpdateOne) SetUpdatedAt(t time.Time) *TkQuestionSectionUpdateOne {
	tqsuo.mutation.SetUpdatedAt(t)
	return tqsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqsuo *TkQuestionSectionUpdateOne) ClearUpdatedAt() *TkQuestionSectionUpdateOne {
	tqsuo.mutation.ClearUpdatedAt()
	return tqsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tqsuo *TkQuestionSectionUpdateOne) SetDeletedAt(t time.Time) *TkQuestionSectionUpdateOne {
	tqsuo.mutation.SetDeletedAt(t)
	return tqsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqsuo *TkQuestionSectionUpdateOne) SetNillableDeletedAt(t *time.Time) *TkQuestionSectionUpdateOne {
	if t != nil {
		tqsuo.SetDeletedAt(*t)
	}
	return tqsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqsuo *TkQuestionSectionUpdateOne) ClearDeletedAt() *TkQuestionSectionUpdateOne {
	tqsuo.mutation.ClearDeletedAt()
	return tqsuo
}

// SetSectionID sets the "section_id" field.
func (tqsuo *TkQuestionSectionUpdateOne) SetSectionID(i int) *TkQuestionSectionUpdateOne {
	tqsuo.mutation.ResetSectionID()
	tqsuo.mutation.SetSectionID(i)
	return tqsuo
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (tqsuo *TkQuestionSectionUpdateOne) SetNillableSectionID(i *int) *TkQuestionSectionUpdateOne {
	if i != nil {
		tqsuo.SetSectionID(*i)
	}
	return tqsuo
}

// ClearSectionID clears the value of the "section_id" field.
func (tqsuo *TkQuestionSectionUpdateOne) ClearSectionID() *TkQuestionSectionUpdateOne {
	tqsuo.mutation.ClearSectionID()
	return tqsuo
}

// SetQuestionID sets the "question_id" field.
func (tqsuo *TkQuestionSectionUpdateOne) SetQuestionID(i int) *TkQuestionSectionUpdateOne {
	tqsuo.mutation.ResetQuestionID()
	tqsuo.mutation.SetQuestionID(i)
	return tqsuo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqsuo *TkQuestionSectionUpdateOne) SetNillableQuestionID(i *int) *TkQuestionSectionUpdateOne {
	if i != nil {
		tqsuo.SetQuestionID(*i)
	}
	return tqsuo
}

// ClearQuestionID clears the value of the "question_id" field.
func (tqsuo *TkQuestionSectionUpdateOne) ClearQuestionID() *TkQuestionSectionUpdateOne {
	tqsuo.mutation.ClearQuestionID()
	return tqsuo
}

// SetQuestionSectionID sets the "question_section" edge to the TkSection entity by ID.
func (tqsuo *TkQuestionSectionUpdateOne) SetQuestionSectionID(id int) *TkQuestionSectionUpdateOne {
	tqsuo.mutation.SetQuestionSectionID(id)
	return tqsuo
}

// SetNillableQuestionSectionID sets the "question_section" edge to the TkSection entity by ID if the given value is not nil.
func (tqsuo *TkQuestionSectionUpdateOne) SetNillableQuestionSectionID(id *int) *TkQuestionSectionUpdateOne {
	if id != nil {
		tqsuo = tqsuo.SetQuestionSectionID(*id)
	}
	return tqsuo
}

// SetQuestionSection sets the "question_section" edge to the TkSection entity.
func (tqsuo *TkQuestionSectionUpdateOne) SetQuestionSection(t *TkSection) *TkQuestionSectionUpdateOne {
	return tqsuo.SetQuestionSectionID(t.ID)
}

// SetSectionQuestionID sets the "section_question" edge to the TkQuestion entity by ID.
func (tqsuo *TkQuestionSectionUpdateOne) SetSectionQuestionID(id int) *TkQuestionSectionUpdateOne {
	tqsuo.mutation.SetSectionQuestionID(id)
	return tqsuo
}

// SetNillableSectionQuestionID sets the "section_question" edge to the TkQuestion entity by ID if the given value is not nil.
func (tqsuo *TkQuestionSectionUpdateOne) SetNillableSectionQuestionID(id *int) *TkQuestionSectionUpdateOne {
	if id != nil {
		tqsuo = tqsuo.SetSectionQuestionID(*id)
	}
	return tqsuo
}

// SetSectionQuestion sets the "section_question" edge to the TkQuestion entity.
func (tqsuo *TkQuestionSectionUpdateOne) SetSectionQuestion(t *TkQuestion) *TkQuestionSectionUpdateOne {
	return tqsuo.SetSectionQuestionID(t.ID)
}

// Mutation returns the TkQuestionSectionMutation object of the builder.
func (tqsuo *TkQuestionSectionUpdateOne) Mutation() *TkQuestionSectionMutation {
	return tqsuo.mutation
}

// ClearQuestionSection clears the "question_section" edge to the TkSection entity.
func (tqsuo *TkQuestionSectionUpdateOne) ClearQuestionSection() *TkQuestionSectionUpdateOne {
	tqsuo.mutation.ClearQuestionSection()
	return tqsuo
}

// ClearSectionQuestion clears the "section_question" edge to the TkQuestion entity.
func (tqsuo *TkQuestionSectionUpdateOne) ClearSectionQuestion() *TkQuestionSectionUpdateOne {
	tqsuo.mutation.ClearSectionQuestion()
	return tqsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tqsuo *TkQuestionSectionUpdateOne) Select(field string, fields ...string) *TkQuestionSectionUpdateOne {
	tqsuo.fields = append([]string{field}, fields...)
	return tqsuo
}

// Save executes the query and returns the updated TkQuestionSection entity.
func (tqsuo *TkQuestionSectionUpdateOne) Save(ctx context.Context) (*TkQuestionSection, error) {
	var (
		err  error
		node *TkQuestionSection
	)
	tqsuo.defaults()
	if len(tqsuo.hooks) == 0 {
		node, err = tqsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqsuo.mutation = mutation
			node, err = tqsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tqsuo.hooks) - 1; i >= 0; i-- {
			mut = tqsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqsuo *TkQuestionSectionUpdateOne) SaveX(ctx context.Context) *TkQuestionSection {
	node, err := tqsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tqsuo *TkQuestionSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := tqsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqsuo *TkQuestionSectionUpdateOne) ExecX(ctx context.Context) {
	if err := tqsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqsuo *TkQuestionSectionUpdateOne) defaults() {
	if _, ok := tqsuo.mutation.UpdatedAt(); !ok && !tqsuo.mutation.UpdatedAtCleared() {
		v := tkquestionsection.UpdateDefaultUpdatedAt()
		tqsuo.mutation.SetUpdatedAt(v)
	}
}

func (tqsuo *TkQuestionSectionUpdateOne) sqlSave(ctx context.Context) (_node *TkQuestionSection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionsection.Table,
			Columns: tkquestionsection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionsection.FieldID,
			},
		},
	}
	id, ok := tqsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkQuestionSection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tqsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkquestionsection.FieldID)
		for _, f := range fields {
			if !tkquestionsection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkquestionsection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tqsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqsuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionsection.FieldUUID,
		})
	}
	if tqsuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionsection.FieldCreatedAt,
		})
	}
	if value, ok := tqsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionsection.FieldUpdatedAt,
		})
	}
	if tqsuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionsection.FieldUpdatedAt,
		})
	}
	if value, ok := tqsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionsection.FieldDeletedAt,
		})
	}
	if tqsuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionsection.FieldDeletedAt,
		})
	}
	if tqsuo.mutation.QuestionSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.QuestionSectionTable,
			Columns: []string{tkquestionsection.QuestionSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqsuo.mutation.QuestionSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.QuestionSectionTable,
			Columns: []string{tkquestionsection.QuestionSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqsuo.mutation.SectionQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.SectionQuestionTable,
			Columns: []string{tkquestionsection.SectionQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqsuo.mutation.SectionQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionsection.SectionQuestionTable,
			Columns: []string{tkquestionsection.SectionQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkQuestionSection{config: tqsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tqsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionsection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

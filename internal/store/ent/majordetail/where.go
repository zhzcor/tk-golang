// Code generated by entc, DO NOT EDIT.

package majordetail

import (
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// SubjectCount applies equality check predicate on the "subject_count" field. It's identical to SubjectCountEQ.
func SubjectCount(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectCount), v))
	})
}

// Star applies equality check predicate on the "star" field. It's identical to StarEQ.
func Star(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStar), v))
	})
}

// PassRate applies equality check predicate on the "pass_rate" field. It's identical to PassRateEQ.
func PassRate(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassRate), v))
	})
}

// StudentCount applies equality check predicate on the "student_count" field. It's identical to StudentCountEQ.
func StudentCount(v uint32) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudentCount), v))
	})
}

// StudyDuration applies equality check predicate on the "study_duration" field. It's identical to StudyDurationEQ.
func StudyDuration(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudyDuration), v))
	})
}

// MajorID applies equality check predicate on the "major_id" field. It's identical to MajorIDEQ.
func MajorID(v int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMajorID), v))
	})
}

// CoverImgID applies equality check predicate on the "cover_img_id" field. It's identical to CoverImgIDEQ.
func CoverImgID(v int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoverImgID), v))
	})
}

// SubjectImgID applies equality check predicate on the "subject_img_id" field. It's identical to SubjectImgIDEQ.
func SubjectImgID(v int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectImgID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesc), v))
	})
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDesc), v...))
	})
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDesc), v...))
	})
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesc), v))
	})
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesc), v))
	})
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesc), v))
	})
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesc), v))
	})
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDesc), v))
	})
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDesc), v))
	})
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDesc), v))
	})
}

// DescIsNil applies the IsNil predicate on the "desc" field.
func DescIsNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDesc)))
	})
}

// DescNotNil applies the NotNil predicate on the "desc" field.
func DescNotNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDesc)))
	})
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDesc), v))
	})
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDesc), v))
	})
}

// SubjectCountEQ applies the EQ predicate on the "subject_count" field.
func SubjectCountEQ(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectCount), v))
	})
}

// SubjectCountNEQ applies the NEQ predicate on the "subject_count" field.
func SubjectCountNEQ(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubjectCount), v))
	})
}

// SubjectCountIn applies the In predicate on the "subject_count" field.
func SubjectCountIn(vs ...uint8) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubjectCount), v...))
	})
}

// SubjectCountNotIn applies the NotIn predicate on the "subject_count" field.
func SubjectCountNotIn(vs ...uint8) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubjectCount), v...))
	})
}

// SubjectCountGT applies the GT predicate on the "subject_count" field.
func SubjectCountGT(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubjectCount), v))
	})
}

// SubjectCountGTE applies the GTE predicate on the "subject_count" field.
func SubjectCountGTE(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubjectCount), v))
	})
}

// SubjectCountLT applies the LT predicate on the "subject_count" field.
func SubjectCountLT(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubjectCount), v))
	})
}

// SubjectCountLTE applies the LTE predicate on the "subject_count" field.
func SubjectCountLTE(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubjectCount), v))
	})
}

// StarEQ applies the EQ predicate on the "star" field.
func StarEQ(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStar), v))
	})
}

// StarNEQ applies the NEQ predicate on the "star" field.
func StarNEQ(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStar), v))
	})
}

// StarIn applies the In predicate on the "star" field.
func StarIn(vs ...string) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStar), v...))
	})
}

// StarNotIn applies the NotIn predicate on the "star" field.
func StarNotIn(vs ...string) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStar), v...))
	})
}

// StarGT applies the GT predicate on the "star" field.
func StarGT(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStar), v))
	})
}

// StarGTE applies the GTE predicate on the "star" field.
func StarGTE(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStar), v))
	})
}

// StarLT applies the LT predicate on the "star" field.
func StarLT(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStar), v))
	})
}

// StarLTE applies the LTE predicate on the "star" field.
func StarLTE(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStar), v))
	})
}

// StarContains applies the Contains predicate on the "star" field.
func StarContains(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStar), v))
	})
}

// StarHasPrefix applies the HasPrefix predicate on the "star" field.
func StarHasPrefix(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStar), v))
	})
}

// StarHasSuffix applies the HasSuffix predicate on the "star" field.
func StarHasSuffix(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStar), v))
	})
}

// StarEqualFold applies the EqualFold predicate on the "star" field.
func StarEqualFold(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStar), v))
	})
}

// StarContainsFold applies the ContainsFold predicate on the "star" field.
func StarContainsFold(v string) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStar), v))
	})
}

// PassRateEQ applies the EQ predicate on the "pass_rate" field.
func PassRateEQ(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassRate), v))
	})
}

// PassRateNEQ applies the NEQ predicate on the "pass_rate" field.
func PassRateNEQ(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassRate), v))
	})
}

// PassRateIn applies the In predicate on the "pass_rate" field.
func PassRateIn(vs ...uint8) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassRate), v...))
	})
}

// PassRateNotIn applies the NotIn predicate on the "pass_rate" field.
func PassRateNotIn(vs ...uint8) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassRate), v...))
	})
}

// PassRateGT applies the GT predicate on the "pass_rate" field.
func PassRateGT(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassRate), v))
	})
}

// PassRateGTE applies the GTE predicate on the "pass_rate" field.
func PassRateGTE(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassRate), v))
	})
}

// PassRateLT applies the LT predicate on the "pass_rate" field.
func PassRateLT(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassRate), v))
	})
}

// PassRateLTE applies the LTE predicate on the "pass_rate" field.
func PassRateLTE(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassRate), v))
	})
}

// StudentCountEQ applies the EQ predicate on the "student_count" field.
func StudentCountEQ(v uint32) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudentCount), v))
	})
}

// StudentCountNEQ applies the NEQ predicate on the "student_count" field.
func StudentCountNEQ(v uint32) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStudentCount), v))
	})
}

// StudentCountIn applies the In predicate on the "student_count" field.
func StudentCountIn(vs ...uint32) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStudentCount), v...))
	})
}

// StudentCountNotIn applies the NotIn predicate on the "student_count" field.
func StudentCountNotIn(vs ...uint32) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStudentCount), v...))
	})
}

// StudentCountGT applies the GT predicate on the "student_count" field.
func StudentCountGT(v uint32) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStudentCount), v))
	})
}

// StudentCountGTE applies the GTE predicate on the "student_count" field.
func StudentCountGTE(v uint32) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStudentCount), v))
	})
}

// StudentCountLT applies the LT predicate on the "student_count" field.
func StudentCountLT(v uint32) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStudentCount), v))
	})
}

// StudentCountLTE applies the LTE predicate on the "student_count" field.
func StudentCountLTE(v uint32) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStudentCount), v))
	})
}

// StudyDurationEQ applies the EQ predicate on the "study_duration" field.
func StudyDurationEQ(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudyDuration), v))
	})
}

// StudyDurationNEQ applies the NEQ predicate on the "study_duration" field.
func StudyDurationNEQ(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStudyDuration), v))
	})
}

// StudyDurationIn applies the In predicate on the "study_duration" field.
func StudyDurationIn(vs ...uint8) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStudyDuration), v...))
	})
}

// StudyDurationNotIn applies the NotIn predicate on the "study_duration" field.
func StudyDurationNotIn(vs ...uint8) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStudyDuration), v...))
	})
}

// StudyDurationGT applies the GT predicate on the "study_duration" field.
func StudyDurationGT(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStudyDuration), v))
	})
}

// StudyDurationGTE applies the GTE predicate on the "study_duration" field.
func StudyDurationGTE(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStudyDuration), v))
	})
}

// StudyDurationLT applies the LT predicate on the "study_duration" field.
func StudyDurationLT(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStudyDuration), v))
	})
}

// StudyDurationLTE applies the LTE predicate on the "study_duration" field.
func StudyDurationLTE(v uint8) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStudyDuration), v))
	})
}

// MajorIDEQ applies the EQ predicate on the "major_id" field.
func MajorIDEQ(v int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMajorID), v))
	})
}

// MajorIDNEQ applies the NEQ predicate on the "major_id" field.
func MajorIDNEQ(v int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMajorID), v))
	})
}

// MajorIDIn applies the In predicate on the "major_id" field.
func MajorIDIn(vs ...int) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMajorID), v...))
	})
}

// MajorIDNotIn applies the NotIn predicate on the "major_id" field.
func MajorIDNotIn(vs ...int) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMajorID), v...))
	})
}

// MajorIDIsNil applies the IsNil predicate on the "major_id" field.
func MajorIDIsNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMajorID)))
	})
}

// MajorIDNotNil applies the NotNil predicate on the "major_id" field.
func MajorIDNotNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMajorID)))
	})
}

// CoverImgIDEQ applies the EQ predicate on the "cover_img_id" field.
func CoverImgIDEQ(v int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoverImgID), v))
	})
}

// CoverImgIDNEQ applies the NEQ predicate on the "cover_img_id" field.
func CoverImgIDNEQ(v int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoverImgID), v))
	})
}

// CoverImgIDIn applies the In predicate on the "cover_img_id" field.
func CoverImgIDIn(vs ...int) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoverImgID), v...))
	})
}

// CoverImgIDNotIn applies the NotIn predicate on the "cover_img_id" field.
func CoverImgIDNotIn(vs ...int) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoverImgID), v...))
	})
}

// CoverImgIDIsNil applies the IsNil predicate on the "cover_img_id" field.
func CoverImgIDIsNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoverImgID)))
	})
}

// CoverImgIDNotNil applies the NotNil predicate on the "cover_img_id" field.
func CoverImgIDNotNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoverImgID)))
	})
}

// SubjectImgIDEQ applies the EQ predicate on the "subject_img_id" field.
func SubjectImgIDEQ(v int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectImgID), v))
	})
}

// SubjectImgIDNEQ applies the NEQ predicate on the "subject_img_id" field.
func SubjectImgIDNEQ(v int) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubjectImgID), v))
	})
}

// SubjectImgIDIn applies the In predicate on the "subject_img_id" field.
func SubjectImgIDIn(vs ...int) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubjectImgID), v...))
	})
}

// SubjectImgIDNotIn applies the NotIn predicate on the "subject_img_id" field.
func SubjectImgIDNotIn(vs ...int) predicate.MajorDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MajorDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubjectImgID), v...))
	})
}

// SubjectImgIDIsNil applies the IsNil predicate on the "subject_img_id" field.
func SubjectImgIDIsNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubjectImgID)))
	})
}

// SubjectImgIDNotNil applies the NotNil predicate on the "subject_img_id" field.
func SubjectImgIDNotNil() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubjectImgID)))
	})
}

// HasMajorDetailTags applies the HasEdge predicate on the "major_detail_tags" edge.
func HasMajorDetailTags() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorDetailTagsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MajorDetailTagsTable, MajorDetailTagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMajorDetailTagsWith applies the HasEdge predicate on the "major_detail_tags" edge with a given conditions (other predicates).
func HasMajorDetailTagsWith(preds ...predicate.MajorDetailTag) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorDetailTagsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MajorDetailTagsTable, MajorDetailTagsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCoverAttachment applies the HasEdge predicate on the "cover_attachment" edge.
func HasCoverAttachment() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CoverAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CoverAttachmentTable, CoverAttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoverAttachmentWith applies the HasEdge predicate on the "cover_attachment" edge with a given conditions (other predicates).
func HasCoverAttachmentWith(preds ...predicate.Attachment) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CoverAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CoverAttachmentTable, CoverAttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubjectAttachment applies the HasEdge predicate on the "subject_attachment" edge.
func HasSubjectAttachment() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjectAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubjectAttachmentTable, SubjectAttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectAttachmentWith applies the HasEdge predicate on the "subject_attachment" edge with a given conditions (other predicates).
func HasSubjectAttachmentWith(preds ...predicate.Attachment) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjectAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubjectAttachmentTable, SubjectAttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeacherAttachments applies the HasEdge predicate on the "teacher_attachments" edge.
func HasTeacherAttachments() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TeacherAttachmentsTable, TeacherAttachmentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeacherAttachmentsWith applies the HasEdge predicate on the "teacher_attachments" edge with a given conditions (other predicates).
func HasTeacherAttachmentsWith(preds ...predicate.Attachment) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TeacherAttachmentsTable, TeacherAttachmentsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceAttachments applies the HasEdge predicate on the "service_attachments" edge.
func HasServiceAttachments() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServiceAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ServiceAttachmentsTable, ServiceAttachmentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceAttachmentsWith applies the HasEdge predicate on the "service_attachments" edge with a given conditions (other predicates).
func HasServiceAttachmentsWith(preds ...predicate.Attachment) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServiceAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ServiceAttachmentsTable, ServiceAttachmentsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMajor applies the HasEdge predicate on the "major" edge.
func HasMajor() predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MajorTable, MajorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMajorWith applies the HasEdge predicate on the "major" edge with a given conditions (other predicates).
func HasMajorWith(preds ...predicate.Major) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MajorTable, MajorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MajorDetail) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MajorDetail) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MajorDetail) predicate.MajorDetail {
	return predicate.MajorDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/importtask"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImportTaskCreate is the builder for creating a ImportTask entity.
type ImportTaskCreate struct {
	config
	mutation *ImportTaskMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (itc *ImportTaskCreate) SetUUID(s string) *ImportTaskCreate {
	itc.mutation.SetUUID(s)
	return itc
}

// SetCreatedAt sets the "created_at" field.
func (itc *ImportTaskCreate) SetCreatedAt(t time.Time) *ImportTaskCreate {
	itc.mutation.SetCreatedAt(t)
	return itc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (itc *ImportTaskCreate) SetNillableCreatedAt(t *time.Time) *ImportTaskCreate {
	if t != nil {
		itc.SetCreatedAt(*t)
	}
	return itc
}

// SetUpdatedAt sets the "updated_at" field.
func (itc *ImportTaskCreate) SetUpdatedAt(t time.Time) *ImportTaskCreate {
	itc.mutation.SetUpdatedAt(t)
	return itc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (itc *ImportTaskCreate) SetNillableUpdatedAt(t *time.Time) *ImportTaskCreate {
	if t != nil {
		itc.SetUpdatedAt(*t)
	}
	return itc
}

// SetDeletedAt sets the "deleted_at" field.
func (itc *ImportTaskCreate) SetDeletedAt(t time.Time) *ImportTaskCreate {
	itc.mutation.SetDeletedAt(t)
	return itc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (itc *ImportTaskCreate) SetNillableDeletedAt(t *time.Time) *ImportTaskCreate {
	if t != nil {
		itc.SetDeletedAt(*t)
	}
	return itc
}

// SetImportName sets the "import_name" field.
func (itc *ImportTaskCreate) SetImportName(s string) *ImportTaskCreate {
	itc.mutation.SetImportName(s)
	return itc
}

// SetNillableImportName sets the "import_name" field if the given value is not nil.
func (itc *ImportTaskCreate) SetNillableImportName(s *string) *ImportTaskCreate {
	if s != nil {
		itc.SetImportName(*s)
	}
	return itc
}

// SetStatus sets the "status" field.
func (itc *ImportTaskCreate) SetStatus(u uint8) *ImportTaskCreate {
	itc.mutation.SetStatus(u)
	return itc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (itc *ImportTaskCreate) SetNillableStatus(u *uint8) *ImportTaskCreate {
	if u != nil {
		itc.SetStatus(*u)
	}
	return itc
}

// SetPath sets the "path" field.
func (itc *ImportTaskCreate) SetPath(s string) *ImportTaskCreate {
	itc.mutation.SetPath(s)
	return itc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (itc *ImportTaskCreate) SetNillablePath(s *string) *ImportTaskCreate {
	if s != nil {
		itc.SetPath(*s)
	}
	return itc
}

// SetTotal sets the "total" field.
func (itc *ImportTaskCreate) SetTotal(i int) *ImportTaskCreate {
	itc.mutation.SetTotal(i)
	return itc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (itc *ImportTaskCreate) SetNillableTotal(i *int) *ImportTaskCreate {
	if i != nil {
		itc.SetTotal(*i)
	}
	return itc
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (itc *ImportTaskCreate) SetCreatedAdminID(i int) *ImportTaskCreate {
	itc.mutation.SetCreatedAdminID(i)
	return itc
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (itc *ImportTaskCreate) SetNillableCreatedAdminID(i *int) *ImportTaskCreate {
	if i != nil {
		itc.SetCreatedAdminID(*i)
	}
	return itc
}

// SetRemark sets the "remark" field.
func (itc *ImportTaskCreate) SetRemark(s string) *ImportTaskCreate {
	itc.mutation.SetRemark(s)
	return itc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (itc *ImportTaskCreate) SetNillableRemark(s *string) *ImportTaskCreate {
	if s != nil {
		itc.SetRemark(*s)
	}
	return itc
}

// Mutation returns the ImportTaskMutation object of the builder.
func (itc *ImportTaskCreate) Mutation() *ImportTaskMutation {
	return itc.mutation
}

// Save creates the ImportTask in the database.
func (itc *ImportTaskCreate) Save(ctx context.Context) (*ImportTask, error) {
	var (
		err  error
		node *ImportTask
	)
	itc.defaults()
	if len(itc.hooks) == 0 {
		if err = itc.check(); err != nil {
			return nil, err
		}
		node, err = itc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImportTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = itc.check(); err != nil {
				return nil, err
			}
			itc.mutation = mutation
			node, err = itc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(itc.hooks) - 1; i >= 0; i-- {
			mut = itc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, itc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (itc *ImportTaskCreate) SaveX(ctx context.Context) *ImportTask {
	v, err := itc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (itc *ImportTaskCreate) defaults() {
	if _, ok := itc.mutation.CreatedAt(); !ok {
		v := importtask.DefaultCreatedAt()
		itc.mutation.SetCreatedAt(v)
	}
	if _, ok := itc.mutation.UpdatedAt(); !ok {
		v := importtask.DefaultUpdatedAt()
		itc.mutation.SetUpdatedAt(v)
	}
	if _, ok := itc.mutation.ImportName(); !ok {
		v := importtask.DefaultImportName
		itc.mutation.SetImportName(v)
	}
	if _, ok := itc.mutation.Status(); !ok {
		v := importtask.DefaultStatus
		itc.mutation.SetStatus(v)
	}
	if _, ok := itc.mutation.Path(); !ok {
		v := importtask.DefaultPath
		itc.mutation.SetPath(v)
	}
	if _, ok := itc.mutation.Total(); !ok {
		v := importtask.DefaultTotal
		itc.mutation.SetTotal(v)
	}
	if _, ok := itc.mutation.CreatedAdminID(); !ok {
		v := importtask.DefaultCreatedAdminID
		itc.mutation.SetCreatedAdminID(v)
	}
	if _, ok := itc.mutation.Remark(); !ok {
		v := importtask.DefaultRemark
		itc.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itc *ImportTaskCreate) check() error {
	if _, ok := itc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := itc.mutation.ImportName(); !ok {
		return &ValidationError{Name: "import_name", err: errors.New("ent: missing required field \"import_name\"")}
	}
	if _, ok := itc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := itc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New("ent: missing required field \"path\"")}
	}
	if _, ok := itc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New("ent: missing required field \"total\"")}
	}
	if _, ok := itc.mutation.CreatedAdminID(); !ok {
		return &ValidationError{Name: "created_admin_id", err: errors.New("ent: missing required field \"created_admin_id\"")}
	}
	if _, ok := itc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New("ent: missing required field \"remark\"")}
	}
	return nil
}

func (itc *ImportTaskCreate) sqlSave(ctx context.Context) (*ImportTask, error) {
	_node, _spec := itc.createSpec()
	if err := sqlgraph.CreateNode(ctx, itc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (itc *ImportTaskCreate) createSpec() (*ImportTask, *sqlgraph.CreateSpec) {
	var (
		_node = &ImportTask{config: itc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: importtask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: importtask.FieldID,
			},
		}
	)
	if value, ok := itc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := itc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: importtask.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := itc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: importtask.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := itc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: importtask.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := itc.mutation.ImportName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldImportName,
		})
		_node.ImportName = value
	}
	if value, ok := itc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: importtask.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := itc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := itc.mutation.Total(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldTotal,
		})
		_node.Total = value
	}
	if value, ok := itc.mutation.CreatedAdminID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldCreatedAdminID,
		})
		_node.CreatedAdminID = value
	}
	if value, ok := itc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// ImportTaskCreateBulk is the builder for creating many ImportTask entities in bulk.
type ImportTaskCreateBulk struct {
	config
	builders []*ImportTaskCreate
}

// Save creates the ImportTask entities in the database.
func (itcb *ImportTaskCreateBulk) Save(ctx context.Context) ([]*ImportTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(itcb.builders))
	nodes := make([]*ImportTask, len(itcb.builders))
	mutators := make([]Mutator, len(itcb.builders))
	for i := range itcb.builders {
		func(i int, root context.Context) {
			builder := itcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImportTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itcb *ImportTaskCreateBulk) SaveX(ctx context.Context) []*ImportTask {
	v, err := itcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

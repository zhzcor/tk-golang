// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/city"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkquestionbankcity"

	"entgo.io/ent/dialect/sql"
)

// TkQuestionBankCity is the model entity for the TkQuestionBankCity schema.
type TkQuestionBankCity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// CityID holds the value of the "city_id" field.
	// 地区id
	CityID int `json:"city_id"`
	// QuestionBankID holds the value of the "question_bank_id" field.
	// 题库id
	QuestionBankID int `json:"question_bank_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkQuestionBankCityQuery when eager-loading is set.
	Edges TkQuestionBankCityEdges `json:"edges"`
}

// TkQuestionBankCityEdges holds the relations/edges for other nodes in the graph.
type TkQuestionBankCityEdges struct {
	// TkQuestionBank holds the value of the tk_question_bank edge.
	TkQuestionBank *TkQuestionBank `json:"tk_question_bank,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TkQuestionBankOrErr returns the TkQuestionBank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionBankCityEdges) TkQuestionBankOrErr() (*TkQuestionBank, error) {
	if e.loadedTypes[0] {
		if e.TkQuestionBank == nil {
			// The edge tk_question_bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestionbank.Label}
		}
		return e.TkQuestionBank, nil
	}
	return nil, &NotLoadedError{edge: "tk_question_bank"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkQuestionBankCityEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[1] {
		if e.City == nil {
			// The edge city was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkQuestionBankCity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkquestionbankcity.FieldID, tkquestionbankcity.FieldCityID, tkquestionbankcity.FieldQuestionBankID:
			values[i] = new(sql.NullInt64)
		case tkquestionbankcity.FieldUUID:
			values[i] = new(sql.NullString)
		case tkquestionbankcity.FieldCreatedAt, tkquestionbankcity.FieldUpdatedAt, tkquestionbankcity.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkQuestionBankCity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkQuestionBankCity fields.
func (tqbc *TkQuestionBankCity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkquestionbankcity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tqbc.ID = int(value.Int64)
		case tkquestionbankcity.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tqbc.UUID = value.String
			}
		case tkquestionbankcity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tqbc.CreatedAt = new(time.Time)
				*tqbc.CreatedAt = value.Time
			}
		case tkquestionbankcity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tqbc.UpdatedAt = new(time.Time)
				*tqbc.UpdatedAt = value.Time
			}
		case tkquestionbankcity.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tqbc.DeletedAt = new(time.Time)
				*tqbc.DeletedAt = value.Time
			}
		case tkquestionbankcity.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				tqbc.CityID = int(value.Int64)
			}
		case tkquestionbankcity.FieldQuestionBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_bank_id", values[i])
			} else if value.Valid {
				tqbc.QuestionBankID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTkQuestionBank queries the "tk_question_bank" edge of the TkQuestionBankCity entity.
func (tqbc *TkQuestionBankCity) QueryTkQuestionBank() *TkQuestionBankQuery {
	return (&TkQuestionBankCityClient{config: tqbc.config}).QueryTkQuestionBank(tqbc)
}

// QueryCity queries the "city" edge of the TkQuestionBankCity entity.
func (tqbc *TkQuestionBankCity) QueryCity() *CityQuery {
	return (&TkQuestionBankCityClient{config: tqbc.config}).QueryCity(tqbc)
}

// Update returns a builder for updating this TkQuestionBankCity.
// Note that you need to call TkQuestionBankCity.Unwrap() before calling this method if this TkQuestionBankCity
// was returned from a transaction, and the transaction was committed or rolled back.
func (tqbc *TkQuestionBankCity) Update() *TkQuestionBankCityUpdateOne {
	return (&TkQuestionBankCityClient{config: tqbc.config}).UpdateOne(tqbc)
}

// Unwrap unwraps the TkQuestionBankCity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tqbc *TkQuestionBankCity) Unwrap() *TkQuestionBankCity {
	tx, ok := tqbc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkQuestionBankCity is not a transactional entity")
	}
	tqbc.config.driver = tx.drv
	return tqbc
}

// String implements the fmt.Stringer.
func (tqbc *TkQuestionBankCity) String() string {
	var builder strings.Builder
	builder.WriteString("TkQuestionBankCity(")
	builder.WriteString(fmt.Sprintf("id=%v", tqbc.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tqbc.UUID)
	if v := tqbc.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tqbc.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tqbc.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", city_id=")
	builder.WriteString(fmt.Sprintf("%v", tqbc.CityID))
	builder.WriteString(", question_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", tqbc.QuestionBankID))
	builder.WriteByte(')')
	return builder.String()
}

// TkQuestionBankCities is a parsable slice of TkQuestionBankCity.
type TkQuestionBankCities []*TkQuestionBankCity

func (tqbc TkQuestionBankCities) config(cfg config) {
	for _i := range tqbc {
		tqbc[_i].config = cfg
	}
}

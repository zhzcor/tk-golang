// Code generated by entc, DO NOT EDIT.

package useraskanswer

import (
	"time"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AskDesc applies equality check predicate on the "ask_desc" field. It's identical to AskDescEQ.
func AskDesc(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAskDesc), v))
	})
}

// AnswerStatus applies equality check predicate on the "answer_status" field. It's identical to AnswerStatusEQ.
func AnswerStatus(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerStatus), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// TeacherID applies equality check predicate on the "teacher_id" field. It's identical to TeacherIDEQ.
func TeacherID(v int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherID), v))
	})
}

// ShowStatus applies equality check predicate on the "show_status" field. It's identical to ShowStatusEQ.
func ShowStatus(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowStatus), v))
	})
}

// ReplyShowStatus applies equality check predicate on the "reply_show_status" field. It's identical to ReplyShowStatusEQ.
func ReplyShowStatus(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplyShowStatus), v))
	})
}

// AnswerDesc applies equality check predicate on the "answer_desc" field. It's identical to AnswerDescEQ.
func AnswerDesc(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerDesc), v))
	})
}

// AnswerAt applies equality check predicate on the "answer_at" field. It's identical to AnswerAtEQ.
func AnswerAt(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerAt), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// AskDescEQ applies the EQ predicate on the "ask_desc" field.
func AskDescEQ(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAskDesc), v))
	})
}

// AskDescNEQ applies the NEQ predicate on the "ask_desc" field.
func AskDescNEQ(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAskDesc), v))
	})
}

// AskDescIn applies the In predicate on the "ask_desc" field.
func AskDescIn(vs ...string) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAskDesc), v...))
	})
}

// AskDescNotIn applies the NotIn predicate on the "ask_desc" field.
func AskDescNotIn(vs ...string) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAskDesc), v...))
	})
}

// AskDescGT applies the GT predicate on the "ask_desc" field.
func AskDescGT(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAskDesc), v))
	})
}

// AskDescGTE applies the GTE predicate on the "ask_desc" field.
func AskDescGTE(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAskDesc), v))
	})
}

// AskDescLT applies the LT predicate on the "ask_desc" field.
func AskDescLT(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAskDesc), v))
	})
}

// AskDescLTE applies the LTE predicate on the "ask_desc" field.
func AskDescLTE(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAskDesc), v))
	})
}

// AskDescContains applies the Contains predicate on the "ask_desc" field.
func AskDescContains(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAskDesc), v))
	})
}

// AskDescHasPrefix applies the HasPrefix predicate on the "ask_desc" field.
func AskDescHasPrefix(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAskDesc), v))
	})
}

// AskDescHasSuffix applies the HasSuffix predicate on the "ask_desc" field.
func AskDescHasSuffix(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAskDesc), v))
	})
}

// AskDescEqualFold applies the EqualFold predicate on the "ask_desc" field.
func AskDescEqualFold(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAskDesc), v))
	})
}

// AskDescContainsFold applies the ContainsFold predicate on the "ask_desc" field.
func AskDescContainsFold(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAskDesc), v))
	})
}

// AnswerStatusEQ applies the EQ predicate on the "answer_status" field.
func AnswerStatusEQ(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerStatus), v))
	})
}

// AnswerStatusNEQ applies the NEQ predicate on the "answer_status" field.
func AnswerStatusNEQ(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnswerStatus), v))
	})
}

// AnswerStatusIn applies the In predicate on the "answer_status" field.
func AnswerStatusIn(vs ...uint8) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnswerStatus), v...))
	})
}

// AnswerStatusNotIn applies the NotIn predicate on the "answer_status" field.
func AnswerStatusNotIn(vs ...uint8) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnswerStatus), v...))
	})
}

// AnswerStatusGT applies the GT predicate on the "answer_status" field.
func AnswerStatusGT(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnswerStatus), v))
	})
}

// AnswerStatusGTE applies the GTE predicate on the "answer_status" field.
func AnswerStatusGTE(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnswerStatus), v))
	})
}

// AnswerStatusLT applies the LT predicate on the "answer_status" field.
func AnswerStatusLT(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnswerStatus), v))
	})
}

// AnswerStatusLTE applies the LTE predicate on the "answer_status" field.
func AnswerStatusLTE(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnswerStatus), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// TeacherIDEQ applies the EQ predicate on the "teacher_id" field.
func TeacherIDEQ(v int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherID), v))
	})
}

// TeacherIDNEQ applies the NEQ predicate on the "teacher_id" field.
func TeacherIDNEQ(v int) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeacherID), v))
	})
}

// TeacherIDIn applies the In predicate on the "teacher_id" field.
func TeacherIDIn(vs ...int) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeacherID), v...))
	})
}

// TeacherIDNotIn applies the NotIn predicate on the "teacher_id" field.
func TeacherIDNotIn(vs ...int) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeacherID), v...))
	})
}

// TeacherIDIsNil applies the IsNil predicate on the "teacher_id" field.
func TeacherIDIsNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTeacherID)))
	})
}

// TeacherIDNotNil applies the NotNil predicate on the "teacher_id" field.
func TeacherIDNotNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTeacherID)))
	})
}

// ShowStatusEQ applies the EQ predicate on the "show_status" field.
func ShowStatusEQ(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowStatus), v))
	})
}

// ShowStatusNEQ applies the NEQ predicate on the "show_status" field.
func ShowStatusNEQ(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShowStatus), v))
	})
}

// ShowStatusIn applies the In predicate on the "show_status" field.
func ShowStatusIn(vs ...uint8) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShowStatus), v...))
	})
}

// ShowStatusNotIn applies the NotIn predicate on the "show_status" field.
func ShowStatusNotIn(vs ...uint8) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShowStatus), v...))
	})
}

// ShowStatusGT applies the GT predicate on the "show_status" field.
func ShowStatusGT(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShowStatus), v))
	})
}

// ShowStatusGTE applies the GTE predicate on the "show_status" field.
func ShowStatusGTE(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShowStatus), v))
	})
}

// ShowStatusLT applies the LT predicate on the "show_status" field.
func ShowStatusLT(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShowStatus), v))
	})
}

// ShowStatusLTE applies the LTE predicate on the "show_status" field.
func ShowStatusLTE(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShowStatus), v))
	})
}

// ReplyShowStatusEQ applies the EQ predicate on the "reply_show_status" field.
func ReplyShowStatusEQ(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplyShowStatus), v))
	})
}

// ReplyShowStatusNEQ applies the NEQ predicate on the "reply_show_status" field.
func ReplyShowStatusNEQ(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReplyShowStatus), v))
	})
}

// ReplyShowStatusIn applies the In predicate on the "reply_show_status" field.
func ReplyShowStatusIn(vs ...uint8) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReplyShowStatus), v...))
	})
}

// ReplyShowStatusNotIn applies the NotIn predicate on the "reply_show_status" field.
func ReplyShowStatusNotIn(vs ...uint8) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReplyShowStatus), v...))
	})
}

// ReplyShowStatusGT applies the GT predicate on the "reply_show_status" field.
func ReplyShowStatusGT(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReplyShowStatus), v))
	})
}

// ReplyShowStatusGTE applies the GTE predicate on the "reply_show_status" field.
func ReplyShowStatusGTE(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReplyShowStatus), v))
	})
}

// ReplyShowStatusLT applies the LT predicate on the "reply_show_status" field.
func ReplyShowStatusLT(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReplyShowStatus), v))
	})
}

// ReplyShowStatusLTE applies the LTE predicate on the "reply_show_status" field.
func ReplyShowStatusLTE(v uint8) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReplyShowStatus), v))
	})
}

// AnswerDescEQ applies the EQ predicate on the "answer_desc" field.
func AnswerDescEQ(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescNEQ applies the NEQ predicate on the "answer_desc" field.
func AnswerDescNEQ(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescIn applies the In predicate on the "answer_desc" field.
func AnswerDescIn(vs ...string) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnswerDesc), v...))
	})
}

// AnswerDescNotIn applies the NotIn predicate on the "answer_desc" field.
func AnswerDescNotIn(vs ...string) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnswerDesc), v...))
	})
}

// AnswerDescGT applies the GT predicate on the "answer_desc" field.
func AnswerDescGT(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescGTE applies the GTE predicate on the "answer_desc" field.
func AnswerDescGTE(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescLT applies the LT predicate on the "answer_desc" field.
func AnswerDescLT(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescLTE applies the LTE predicate on the "answer_desc" field.
func AnswerDescLTE(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescContains applies the Contains predicate on the "answer_desc" field.
func AnswerDescContains(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescHasPrefix applies the HasPrefix predicate on the "answer_desc" field.
func AnswerDescHasPrefix(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescHasSuffix applies the HasSuffix predicate on the "answer_desc" field.
func AnswerDescHasSuffix(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescEqualFold applies the EqualFold predicate on the "answer_desc" field.
func AnswerDescEqualFold(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAnswerDesc), v))
	})
}

// AnswerDescContainsFold applies the ContainsFold predicate on the "answer_desc" field.
func AnswerDescContainsFold(v string) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAnswerDesc), v))
	})
}

// AnswerAtEQ applies the EQ predicate on the "answer_at" field.
func AnswerAtEQ(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerAt), v))
	})
}

// AnswerAtNEQ applies the NEQ predicate on the "answer_at" field.
func AnswerAtNEQ(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnswerAt), v))
	})
}

// AnswerAtIn applies the In predicate on the "answer_at" field.
func AnswerAtIn(vs ...time.Time) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnswerAt), v...))
	})
}

// AnswerAtNotIn applies the NotIn predicate on the "answer_at" field.
func AnswerAtNotIn(vs ...time.Time) predicate.UserAskAnswer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnswerAt), v...))
	})
}

// AnswerAtGT applies the GT predicate on the "answer_at" field.
func AnswerAtGT(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnswerAt), v))
	})
}

// AnswerAtGTE applies the GTE predicate on the "answer_at" field.
func AnswerAtGTE(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnswerAt), v))
	})
}

// AnswerAtLT applies the LT predicate on the "answer_at" field.
func AnswerAtLT(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnswerAt), v))
	})
}

// AnswerAtLTE applies the LTE predicate on the "answer_at" field.
func AnswerAtLTE(v time.Time) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnswerAt), v))
	})
}

// AnswerAtIsNil applies the IsNil predicate on the "answer_at" field.
func AnswerAtIsNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAnswerAt)))
	})
}

// AnswerAtNotNil applies the NotNil predicate on the "answer_at" field.
func AnswerAtNotNil() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAnswerAt)))
	})
}

// HasTeacher applies the HasEdge predicate on the "teacher" edge.
func HasTeacher() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeacherWith applies the HasEdge predicate on the "teacher" edge with a given conditions (other predicates).
func HasTeacherWith(preds ...predicate.Teacher) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAskAnswersAttachments applies the HasEdge predicate on the "ask_answers_attachments" edge.
func HasAskAnswersAttachments() predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AskAnswersAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AskAnswersAttachmentsTable, AskAnswersAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAskAnswersAttachmentsWith applies the HasEdge predicate on the "ask_answers_attachments" edge with a given conditions (other predicates).
func HasAskAnswersAttachmentsWith(preds ...predicate.UserAskAnswerAttachment) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AskAnswersAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AskAnswersAttachmentsTable, AskAnswersAttachmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAskAnswer) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAskAnswer) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAskAnswer) predicate.UserAskAnswer {
	return predicate.UserAskAnswer(func(s *sql.Selector) {
		p(s.Not())
	})
}

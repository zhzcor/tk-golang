// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/makeuserquestionrecord"
	"tkserver/internal/store/ent/tkchapter"
	"tkserver/internal/store/ent/tkquestionsection"
	"tkserver/internal/store/ent/tksection"
	"tkserver/internal/store/ent/tkuserexamscorerecord"
	"tkserver/internal/store/ent/tkuserquestionrecord"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkSectionCreate is the builder for creating a TkSection entity.
type TkSectionCreate struct {
	config
	mutation *TkSectionMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tsc *TkSectionCreate) SetUUID(s string) *TkSectionCreate {
	tsc.mutation.SetUUID(s)
	return tsc
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TkSectionCreate) SetCreatedAt(t time.Time) *TkSectionCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TkSectionCreate) SetNillableCreatedAt(t *time.Time) *TkSectionCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsc *TkSectionCreate) SetUpdatedAt(t time.Time) *TkSectionCreate {
	tsc.mutation.SetUpdatedAt(t)
	return tsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsc *TkSectionCreate) SetNillableUpdatedAt(t *time.Time) *TkSectionCreate {
	if t != nil {
		tsc.SetUpdatedAt(*t)
	}
	return tsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tsc *TkSectionCreate) SetDeletedAt(t time.Time) *TkSectionCreate {
	tsc.mutation.SetDeletedAt(t)
	return tsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsc *TkSectionCreate) SetNillableDeletedAt(t *time.Time) *TkSectionCreate {
	if t != nil {
		tsc.SetDeletedAt(*t)
	}
	return tsc
}

// SetName sets the "name" field.
func (tsc *TkSectionCreate) SetName(s string) *TkSectionCreate {
	tsc.mutation.SetName(s)
	return tsc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tsc *TkSectionCreate) SetNillableName(s *string) *TkSectionCreate {
	if s != nil {
		tsc.SetName(*s)
	}
	return tsc
}

// SetChapterID sets the "chapter_id" field.
func (tsc *TkSectionCreate) SetChapterID(i int) *TkSectionCreate {
	tsc.mutation.SetChapterID(i)
	return tsc
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (tsc *TkSectionCreate) SetNillableChapterID(i *int) *TkSectionCreate {
	if i != nil {
		tsc.SetChapterID(*i)
	}
	return tsc
}

// SetQuestionCount sets the "question_count" field.
func (tsc *TkSectionCreate) SetQuestionCount(i int) *TkSectionCreate {
	tsc.mutation.SetQuestionCount(i)
	return tsc
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tsc *TkSectionCreate) SetNillableQuestionCount(i *int) *TkSectionCreate {
	if i != nil {
		tsc.SetQuestionCount(*i)
	}
	return tsc
}

// SetChapter sets the "chapter" edge to the TkChapter entity.
func (tsc *TkSectionCreate) SetChapter(t *TkChapter) *TkSectionCreate {
	return tsc.SetChapterID(t.ID)
}

// AddTkSectionLinkIDs adds the "tk_section_links" edge to the TkQuestionSection entity by IDs.
func (tsc *TkSectionCreate) AddTkSectionLinkIDs(ids ...int) *TkSectionCreate {
	tsc.mutation.AddTkSectionLinkIDs(ids...)
	return tsc
}

// AddTkSectionLinks adds the "tk_section_links" edges to the TkQuestionSection entity.
func (tsc *TkSectionCreate) AddTkSectionLinks(t ...*TkQuestionSection) *TkSectionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsc.AddTkSectionLinkIDs(ids...)
}

// AddSectionRecordIDs adds the "section_records" edge to the TkUserQuestionRecord entity by IDs.
func (tsc *TkSectionCreate) AddSectionRecordIDs(ids ...int) *TkSectionCreate {
	tsc.mutation.AddSectionRecordIDs(ids...)
	return tsc
}

// AddSectionRecords adds the "section_records" edges to the TkUserQuestionRecord entity.
func (tsc *TkSectionCreate) AddSectionRecords(t ...*TkUserQuestionRecord) *TkSectionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsc.AddSectionRecordIDs(ids...)
}

// AddUserSectionExamIDs adds the "user_section_exam" edge to the TkUserExamScoreRecord entity by IDs.
func (tsc *TkSectionCreate) AddUserSectionExamIDs(ids ...int) *TkSectionCreate {
	tsc.mutation.AddUserSectionExamIDs(ids...)
	return tsc
}

// AddUserSectionExam adds the "user_section_exam" edges to the TkUserExamScoreRecord entity.
func (tsc *TkSectionCreate) AddUserSectionExam(t ...*TkUserExamScoreRecord) *TkSectionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsc.AddUserSectionExamIDs(ids...)
}

// AddMakeUserQuestionSecIDs adds the "make_user_question_sec" edge to the MakeUserQuestionRecord entity by IDs.
func (tsc *TkSectionCreate) AddMakeUserQuestionSecIDs(ids ...int) *TkSectionCreate {
	tsc.mutation.AddMakeUserQuestionSecIDs(ids...)
	return tsc
}

// AddMakeUserQuestionSec adds the "make_user_question_sec" edges to the MakeUserQuestionRecord entity.
func (tsc *TkSectionCreate) AddMakeUserQuestionSec(m ...*MakeUserQuestionRecord) *TkSectionCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tsc.AddMakeUserQuestionSecIDs(ids...)
}

// Mutation returns the TkSectionMutation object of the builder.
func (tsc *TkSectionCreate) Mutation() *TkSectionMutation {
	return tsc.mutation
}

// Save creates the TkSection in the database.
func (tsc *TkSectionCreate) Save(ctx context.Context) (*TkSection, error) {
	var (
		err  error
		node *TkSection
	)
	tsc.defaults()
	if len(tsc.hooks) == 0 {
		if err = tsc.check(); err != nil {
			return nil, err
		}
		node, err = tsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsc.check(); err != nil {
				return nil, err
			}
			tsc.mutation = mutation
			node, err = tsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tsc.hooks) - 1; i >= 0; i-- {
			mut = tsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TkSectionCreate) SaveX(ctx context.Context) *TkSection {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tsc *TkSectionCreate) defaults() {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		v := tksection.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		v := tksection.DefaultUpdatedAt()
		tsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tsc.mutation.Name(); !ok {
		v := tksection.DefaultName
		tsc.mutation.SetName(v)
	}
	if _, ok := tsc.mutation.QuestionCount(); !ok {
		v := tksection.DefaultQuestionCount
		tsc.mutation.SetQuestionCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TkSectionCreate) check() error {
	if _, ok := tsc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := tsc.mutation.QuestionCount(); !ok {
		return &ValidationError{Name: "question_count", err: errors.New("ent: missing required field \"question_count\"")}
	}
	return nil
}

func (tsc *TkSectionCreate) sqlSave(ctx context.Context) (*TkSection, error) {
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tsc *TkSectionCreate) createSpec() (*TkSection, *sqlgraph.CreateSpec) {
	var (
		_node = &TkSection{config: tsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tksection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tksection.FieldID,
			},
		}
	)
	if value, ok := tsc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tksection.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tksection.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tksection.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tksection.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tsc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tksection.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tsc.mutation.QuestionCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tksection.FieldQuestionCount,
		})
		_node.QuestionCount = value
	}
	if nodes := tsc.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tksection.ChapterTable,
			Columns: []string{tksection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChapterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.TkSectionLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.TkSectionLinksTable,
			Columns: []string{tksection.TkSectionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionsection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.SectionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.SectionRecordsTable,
			Columns: []string{tksection.SectionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.UserSectionExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.UserSectionExamTable,
			Columns: []string{tksection.UserSectionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.MakeUserQuestionSecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tksection.MakeUserQuestionSecTable,
			Columns: []string{tksection.MakeUserQuestionSecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkSectionCreateBulk is the builder for creating many TkSection entities in bulk.
type TkSectionCreateBulk struct {
	config
	builders []*TkSectionCreate
}

// Save creates the TkSection entities in the database.
func (tscb *TkSectionCreateBulk) Save(ctx context.Context) ([]*TkSection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TkSection, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkSectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TkSectionCreateBulk) SaveX(ctx context.Context) []*TkSection {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

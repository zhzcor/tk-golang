// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkexampaperpartition"
	"gserver/internal/store/ent/tkexampaperpartitionscore"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperPartitionScoreQuery is the builder for querying TkExamPaperPartitionScore entities.
type TkExamPaperPartitionScoreQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TkExamPaperPartitionScore
	// eager-loading edges.
	withExamPaperPartition *TkExamPaperPartitionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TkExamPaperPartitionScoreQuery builder.
func (teppsq *TkExamPaperPartitionScoreQuery) Where(ps ...predicate.TkExamPaperPartitionScore) *TkExamPaperPartitionScoreQuery {
	teppsq.predicates = append(teppsq.predicates, ps...)
	return teppsq
}

// Limit adds a limit step to the query.
func (teppsq *TkExamPaperPartitionScoreQuery) Limit(limit int) *TkExamPaperPartitionScoreQuery {
	teppsq.limit = &limit
	return teppsq
}

// Offset adds an offset step to the query.
func (teppsq *TkExamPaperPartitionScoreQuery) Offset(offset int) *TkExamPaperPartitionScoreQuery {
	teppsq.offset = &offset
	return teppsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (teppsq *TkExamPaperPartitionScoreQuery) Unique(unique bool) *TkExamPaperPartitionScoreQuery {
	teppsq.unique = &unique
	return teppsq
}

// Order adds an order step to the query.
func (teppsq *TkExamPaperPartitionScoreQuery) Order(o ...OrderFunc) *TkExamPaperPartitionScoreQuery {
	teppsq.order = append(teppsq.order, o...)
	return teppsq
}

// QueryExamPaperPartition chains the current query on the "exam_paper_partition" edge.
func (teppsq *TkExamPaperPartitionScoreQuery) QueryExamPaperPartition() *TkExamPaperPartitionQuery {
	query := &TkExamPaperPartitionQuery{config: teppsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := teppsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := teppsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaperpartitionscore.Table, tkexampaperpartitionscore.FieldID, selector),
			sqlgraph.To(tkexampaperpartition.Table, tkexampaperpartition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexampaperpartitionscore.ExamPaperPartitionTable, tkexampaperpartitionscore.ExamPaperPartitionColumn),
		)
		fromU = sqlgraph.SetNeighbors(teppsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TkExamPaperPartitionScore entity from the query.
// Returns a *NotFoundError when no TkExamPaperPartitionScore was found.
func (teppsq *TkExamPaperPartitionScoreQuery) First(ctx context.Context) (*TkExamPaperPartitionScore, error) {
	nodes, err := teppsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tkexampaperpartitionscore.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (teppsq *TkExamPaperPartitionScoreQuery) FirstX(ctx context.Context) *TkExamPaperPartitionScore {
	node, err := teppsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TkExamPaperPartitionScore ID from the query.
// Returns a *NotFoundError when no TkExamPaperPartitionScore ID was found.
func (teppsq *TkExamPaperPartitionScoreQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = teppsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tkexampaperpartitionscore.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (teppsq *TkExamPaperPartitionScoreQuery) FirstIDX(ctx context.Context) int {
	id, err := teppsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TkExamPaperPartitionScore entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TkExamPaperPartitionScore entity is not found.
// Returns a *NotFoundError when no TkExamPaperPartitionScore entities are found.
func (teppsq *TkExamPaperPartitionScoreQuery) Only(ctx context.Context) (*TkExamPaperPartitionScore, error) {
	nodes, err := teppsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		return nil, &NotSingularError{tkexampaperpartitionscore.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (teppsq *TkExamPaperPartitionScoreQuery) OnlyX(ctx context.Context) *TkExamPaperPartitionScore {
	node, err := teppsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TkExamPaperPartitionScore ID in the query.
// Returns a *NotSingularError when exactly one TkExamPaperPartitionScore ID is not found.
// Returns a *NotFoundError when no entities are found.
func (teppsq *TkExamPaperPartitionScoreQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = teppsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		err = &NotSingularError{tkexampaperpartitionscore.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (teppsq *TkExamPaperPartitionScoreQuery) OnlyIDX(ctx context.Context) int {
	id, err := teppsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TkExamPaperPartitionScores.
func (teppsq *TkExamPaperPartitionScoreQuery) All(ctx context.Context) ([]*TkExamPaperPartitionScore, error) {
	if err := teppsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return teppsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (teppsq *TkExamPaperPartitionScoreQuery) AllX(ctx context.Context) []*TkExamPaperPartitionScore {
	nodes, err := teppsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TkExamPaperPartitionScore IDs.
func (teppsq *TkExamPaperPartitionScoreQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := teppsq.Select(tkexampaperpartitionscore.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (teppsq *TkExamPaperPartitionScoreQuery) IDsX(ctx context.Context) []int {
	ids, err := teppsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (teppsq *TkExamPaperPartitionScoreQuery) Count(ctx context.Context) (int, error) {
	if err := teppsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return teppsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (teppsq *TkExamPaperPartitionScoreQuery) CountX(ctx context.Context) int {
	count, err := teppsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (teppsq *TkExamPaperPartitionScoreQuery) Exist(ctx context.Context) (bool, error) {
	if err := teppsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return teppsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (teppsq *TkExamPaperPartitionScoreQuery) ExistX(ctx context.Context) bool {
	exist, err := teppsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TkExamPaperPartitionScoreQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (teppsq *TkExamPaperPartitionScoreQuery) Clone() *TkExamPaperPartitionScoreQuery {
	if teppsq == nil {
		return nil
	}
	return &TkExamPaperPartitionScoreQuery{
		config:                 teppsq.config,
		limit:                  teppsq.limit,
		offset:                 teppsq.offset,
		order:                  append([]OrderFunc{}, teppsq.order...),
		predicates:             append([]predicate.TkExamPaperPartitionScore{}, teppsq.predicates...),
		withExamPaperPartition: teppsq.withExamPaperPartition.Clone(),
		// clone intermediate query.
		sql:  teppsq.sql.Clone(),
		path: teppsq.path,
	}
}

// WithExamPaperPartition tells the query-builder to eager-load the nodes that are connected to
// the "exam_paper_partition" edge. The optional arguments are used to configure the query builder of the edge.
func (teppsq *TkExamPaperPartitionScoreQuery) WithExamPaperPartition(opts ...func(*TkExamPaperPartitionQuery)) *TkExamPaperPartitionScoreQuery {
	query := &TkExamPaperPartitionQuery{config: teppsq.config}
	for _, opt := range opts {
		opt(query)
	}
	teppsq.withExamPaperPartition = query
	return teppsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TkExamPaperPartitionScore.Query().
//		GroupBy(tkexampaperpartitionscore.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (teppsq *TkExamPaperPartitionScoreQuery) GroupBy(field string, fields ...string) *TkExamPaperPartitionScoreGroupBy {
	group := &TkExamPaperPartitionScoreGroupBy{config: teppsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := teppsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return teppsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.TkExamPaperPartitionScore.Query().
//		Select(tkexampaperpartitionscore.FieldUUID).
//		Scan(ctx, &v)
//
func (teppsq *TkExamPaperPartitionScoreQuery) Select(field string, fields ...string) *TkExamPaperPartitionScoreSelect {
	teppsq.fields = append([]string{field}, fields...)
	return &TkExamPaperPartitionScoreSelect{TkExamPaperPartitionScoreQuery: teppsq}
}

func (teppsq *TkExamPaperPartitionScoreQuery) prepareQuery(ctx context.Context) error {
	for _, f := range teppsq.fields {
		if !tkexampaperpartitionscore.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if teppsq.path != nil {
		prev, err := teppsq.path(ctx)
		if err != nil {
			return err
		}
		teppsq.sql = prev
	}
	return nil
}

func (teppsq *TkExamPaperPartitionScoreQuery) sqlAll(ctx context.Context) ([]*TkExamPaperPartitionScore, error) {
	var (
		nodes       = []*TkExamPaperPartitionScore{}
		_spec       = teppsq.querySpec()
		loadedTypes = [1]bool{
			teppsq.withExamPaperPartition != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TkExamPaperPartitionScore{config: teppsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, teppsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := teppsq.withExamPaperPartition; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkExamPaperPartitionScore)
		for i := range nodes {
			fk := nodes[i].ExamPaperPartitionID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tkexampaperpartition.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "exam_paper_partition_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ExamPaperPartition = n
			}
		}
	}

	return nodes, nil
}

func (teppsq *TkExamPaperPartitionScoreQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := teppsq.querySpec()
	return sqlgraph.CountNodes(ctx, teppsq.driver, _spec)
}

func (teppsq *TkExamPaperPartitionScoreQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := teppsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (teppsq *TkExamPaperPartitionScoreQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampaperpartitionscore.Table,
			Columns: tkexampaperpartitionscore.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaperpartitionscore.FieldID,
			},
		},
		From:   teppsq.sql,
		Unique: true,
	}
	if unique := teppsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := teppsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkexampaperpartitionscore.FieldID)
		for i := range fields {
			if fields[i] != tkexampaperpartitionscore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := teppsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := teppsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := teppsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := teppsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (teppsq *TkExamPaperPartitionScoreQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(teppsq.driver.Dialect())
	t1 := builder.Table(tkexampaperpartitionscore.Table)
	selector := builder.Select(t1.Columns(tkexampaperpartitionscore.Columns...)...).From(t1)
	if teppsq.sql != nil {
		selector = teppsq.sql
		selector.Select(selector.Columns(tkexampaperpartitionscore.Columns...)...)
	}
	for _, p := range teppsq.predicates {
		p(selector)
	}
	for _, p := range teppsq.order {
		p(selector)
	}
	if offset := teppsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := teppsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TkExamPaperPartitionScoreGroupBy is the group-by builder for TkExamPaperPartitionScore entities.
type TkExamPaperPartitionScoreGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Aggregate(fns ...AggregateFunc) *TkExamPaperPartitionScoreGroupBy {
	teppsgb.fns = append(teppsgb.fns, fns...)
	return teppsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := teppsgb.path(ctx)
	if err != nil {
		return err
	}
	teppsgb.sql = query
	return teppsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := teppsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(teppsgb.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperPartitionScoreGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := teppsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) StringsX(ctx context.Context) []string {
	v, err := teppsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = teppsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperPartitionScoreGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) StringX(ctx context.Context) string {
	v, err := teppsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(teppsgb.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperPartitionScoreGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := teppsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) IntsX(ctx context.Context) []int {
	v, err := teppsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = teppsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperPartitionScoreGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) IntX(ctx context.Context) int {
	v, err := teppsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(teppsgb.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperPartitionScoreGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := teppsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := teppsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = teppsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperPartitionScoreGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Float64X(ctx context.Context) float64 {
	v, err := teppsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(teppsgb.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperPartitionScoreGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := teppsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := teppsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = teppsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperPartitionScoreGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (teppsgb *TkExamPaperPartitionScoreGroupBy) BoolX(ctx context.Context) bool {
	v, err := teppsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (teppsgb *TkExamPaperPartitionScoreGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range teppsgb.fields {
		if !tkexampaperpartitionscore.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := teppsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := teppsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (teppsgb *TkExamPaperPartitionScoreGroupBy) sqlQuery() *sql.Selector {
	selector := teppsgb.sql
	columns := make([]string, 0, len(teppsgb.fields)+len(teppsgb.fns))
	columns = append(columns, teppsgb.fields...)
	for _, fn := range teppsgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(teppsgb.fields...)
}

// TkExamPaperPartitionScoreSelect is the builder for selecting fields of TkExamPaperPartitionScore entities.
type TkExamPaperPartitionScoreSelect struct {
	*TkExamPaperPartitionScoreQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (teppss *TkExamPaperPartitionScoreSelect) Scan(ctx context.Context, v interface{}) error {
	if err := teppss.prepareQuery(ctx); err != nil {
		return err
	}
	teppss.sql = teppss.TkExamPaperPartitionScoreQuery.sqlQuery(ctx)
	return teppss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (teppss *TkExamPaperPartitionScoreSelect) ScanX(ctx context.Context, v interface{}) {
	if err := teppss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (teppss *TkExamPaperPartitionScoreSelect) Strings(ctx context.Context) ([]string, error) {
	if len(teppss.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperPartitionScoreSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := teppss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (teppss *TkExamPaperPartitionScoreSelect) StringsX(ctx context.Context) []string {
	v, err := teppss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (teppss *TkExamPaperPartitionScoreSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = teppss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperPartitionScoreSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (teppss *TkExamPaperPartitionScoreSelect) StringX(ctx context.Context) string {
	v, err := teppss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (teppss *TkExamPaperPartitionScoreSelect) Ints(ctx context.Context) ([]int, error) {
	if len(teppss.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperPartitionScoreSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := teppss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (teppss *TkExamPaperPartitionScoreSelect) IntsX(ctx context.Context) []int {
	v, err := teppss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (teppss *TkExamPaperPartitionScoreSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = teppss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperPartitionScoreSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (teppss *TkExamPaperPartitionScoreSelect) IntX(ctx context.Context) int {
	v, err := teppss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (teppss *TkExamPaperPartitionScoreSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(teppss.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperPartitionScoreSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := teppss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (teppss *TkExamPaperPartitionScoreSelect) Float64sX(ctx context.Context) []float64 {
	v, err := teppss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (teppss *TkExamPaperPartitionScoreSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = teppss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperPartitionScoreSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (teppss *TkExamPaperPartitionScoreSelect) Float64X(ctx context.Context) float64 {
	v, err := teppss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (teppss *TkExamPaperPartitionScoreSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(teppss.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperPartitionScoreSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := teppss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (teppss *TkExamPaperPartitionScoreSelect) BoolsX(ctx context.Context) []bool {
	v, err := teppss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (teppss *TkExamPaperPartitionScoreSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = teppss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaperpartitionscore.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperPartitionScoreSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (teppss *TkExamPaperPartitionScoreSelect) BoolX(ctx context.Context) bool {
	v, err := teppss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (teppss *TkExamPaperPartitionScoreSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := teppss.sqlQuery().Query()
	if err := teppss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (teppss *TkExamPaperPartitionScoreSelect) sqlQuery() sql.Querier {
	selector := teppss.sql
	selector.Select(selector.Columns(teppss.fields...)...)
	return selector
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/importtask"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImportTaskUpdate is the builder for updating ImportTask entities.
type ImportTaskUpdate struct {
	config
	hooks    []Hook
	mutation *ImportTaskMutation
}

// Where adds a new predicate for the ImportTaskUpdate builder.
func (itu *ImportTaskUpdate) Where(ps ...predicate.ImportTask) *ImportTaskUpdate {
	itu.mutation.predicates = append(itu.mutation.predicates, ps...)
	return itu
}

// SetUUID sets the "uuid" field.
func (itu *ImportTaskUpdate) SetUUID(s string) *ImportTaskUpdate {
	itu.mutation.SetUUID(s)
	return itu
}

// SetUpdatedAt sets the "updated_at" field.
func (itu *ImportTaskUpdate) SetUpdatedAt(t time.Time) *ImportTaskUpdate {
	itu.mutation.SetUpdatedAt(t)
	return itu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (itu *ImportTaskUpdate) ClearUpdatedAt() *ImportTaskUpdate {
	itu.mutation.ClearUpdatedAt()
	return itu
}

// SetDeletedAt sets the "deleted_at" field.
func (itu *ImportTaskUpdate) SetDeletedAt(t time.Time) *ImportTaskUpdate {
	itu.mutation.SetDeletedAt(t)
	return itu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (itu *ImportTaskUpdate) SetNillableDeletedAt(t *time.Time) *ImportTaskUpdate {
	if t != nil {
		itu.SetDeletedAt(*t)
	}
	return itu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (itu *ImportTaskUpdate) ClearDeletedAt() *ImportTaskUpdate {
	itu.mutation.ClearDeletedAt()
	return itu
}

// SetImportName sets the "import_name" field.
func (itu *ImportTaskUpdate) SetImportName(s string) *ImportTaskUpdate {
	itu.mutation.SetImportName(s)
	return itu
}

// SetNillableImportName sets the "import_name" field if the given value is not nil.
func (itu *ImportTaskUpdate) SetNillableImportName(s *string) *ImportTaskUpdate {
	if s != nil {
		itu.SetImportName(*s)
	}
	return itu
}

// SetStatus sets the "status" field.
func (itu *ImportTaskUpdate) SetStatus(u uint8) *ImportTaskUpdate {
	itu.mutation.ResetStatus()
	itu.mutation.SetStatus(u)
	return itu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (itu *ImportTaskUpdate) SetNillableStatus(u *uint8) *ImportTaskUpdate {
	if u != nil {
		itu.SetStatus(*u)
	}
	return itu
}

// AddStatus adds u to the "status" field.
func (itu *ImportTaskUpdate) AddStatus(u uint8) *ImportTaskUpdate {
	itu.mutation.AddStatus(u)
	return itu
}

// SetPath sets the "path" field.
func (itu *ImportTaskUpdate) SetPath(s string) *ImportTaskUpdate {
	itu.mutation.SetPath(s)
	return itu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (itu *ImportTaskUpdate) SetNillablePath(s *string) *ImportTaskUpdate {
	if s != nil {
		itu.SetPath(*s)
	}
	return itu
}

// SetTotal sets the "total" field.
func (itu *ImportTaskUpdate) SetTotal(i int) *ImportTaskUpdate {
	itu.mutation.ResetTotal()
	itu.mutation.SetTotal(i)
	return itu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (itu *ImportTaskUpdate) SetNillableTotal(i *int) *ImportTaskUpdate {
	if i != nil {
		itu.SetTotal(*i)
	}
	return itu
}

// AddTotal adds i to the "total" field.
func (itu *ImportTaskUpdate) AddTotal(i int) *ImportTaskUpdate {
	itu.mutation.AddTotal(i)
	return itu
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (itu *ImportTaskUpdate) SetCreatedAdminID(i int) *ImportTaskUpdate {
	itu.mutation.ResetCreatedAdminID()
	itu.mutation.SetCreatedAdminID(i)
	return itu
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (itu *ImportTaskUpdate) SetNillableCreatedAdminID(i *int) *ImportTaskUpdate {
	if i != nil {
		itu.SetCreatedAdminID(*i)
	}
	return itu
}

// AddCreatedAdminID adds i to the "created_admin_id" field.
func (itu *ImportTaskUpdate) AddCreatedAdminID(i int) *ImportTaskUpdate {
	itu.mutation.AddCreatedAdminID(i)
	return itu
}

// SetRemark sets the "remark" field.
func (itu *ImportTaskUpdate) SetRemark(s string) *ImportTaskUpdate {
	itu.mutation.SetRemark(s)
	return itu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (itu *ImportTaskUpdate) SetNillableRemark(s *string) *ImportTaskUpdate {
	if s != nil {
		itu.SetRemark(*s)
	}
	return itu
}

// Mutation returns the ImportTaskMutation object of the builder.
func (itu *ImportTaskUpdate) Mutation() *ImportTaskMutation {
	return itu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *ImportTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	itu.defaults()
	if len(itu.hooks) == 0 {
		affected, err = itu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImportTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			itu.mutation = mutation
			affected, err = itu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(itu.hooks) - 1; i >= 0; i-- {
			mut = itu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, itu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (itu *ImportTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *ImportTaskUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *ImportTaskUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itu *ImportTaskUpdate) defaults() {
	if _, ok := itu.mutation.UpdatedAt(); !ok && !itu.mutation.UpdatedAtCleared() {
		v := importtask.UpdateDefaultUpdatedAt()
		itu.mutation.SetUpdatedAt(v)
	}
}

func (itu *ImportTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   importtask.Table,
			Columns: importtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: importtask.FieldID,
			},
		},
	}
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldUUID,
		})
	}
	if itu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: importtask.FieldCreatedAt,
		})
	}
	if value, ok := itu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: importtask.FieldUpdatedAt,
		})
	}
	if itu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: importtask.FieldUpdatedAt,
		})
	}
	if value, ok := itu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: importtask.FieldDeletedAt,
		})
	}
	if itu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: importtask.FieldDeletedAt,
		})
	}
	if value, ok := itu.mutation.ImportName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldImportName,
		})
	}
	if value, ok := itu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: importtask.FieldStatus,
		})
	}
	if value, ok := itu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: importtask.FieldStatus,
		})
	}
	if value, ok := itu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldPath,
		})
	}
	if value, ok := itu.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldTotal,
		})
	}
	if value, ok := itu.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldTotal,
		})
	}
	if value, ok := itu.mutation.CreatedAdminID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldCreatedAdminID,
		})
	}
	if value, ok := itu.mutation.AddedCreatedAdminID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldCreatedAdminID,
		})
	}
	if value, ok := itu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldRemark,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{importtask.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ImportTaskUpdateOne is the builder for updating a single ImportTask entity.
type ImportTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImportTaskMutation
}

// SetUUID sets the "uuid" field.
func (ituo *ImportTaskUpdateOne) SetUUID(s string) *ImportTaskUpdateOne {
	ituo.mutation.SetUUID(s)
	return ituo
}

// SetUpdatedAt sets the "updated_at" field.
func (ituo *ImportTaskUpdateOne) SetUpdatedAt(t time.Time) *ImportTaskUpdateOne {
	ituo.mutation.SetUpdatedAt(t)
	return ituo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ituo *ImportTaskUpdateOne) ClearUpdatedAt() *ImportTaskUpdateOne {
	ituo.mutation.ClearUpdatedAt()
	return ituo
}

// SetDeletedAt sets the "deleted_at" field.
func (ituo *ImportTaskUpdateOne) SetDeletedAt(t time.Time) *ImportTaskUpdateOne {
	ituo.mutation.SetDeletedAt(t)
	return ituo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ituo *ImportTaskUpdateOne) SetNillableDeletedAt(t *time.Time) *ImportTaskUpdateOne {
	if t != nil {
		ituo.SetDeletedAt(*t)
	}
	return ituo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ituo *ImportTaskUpdateOne) ClearDeletedAt() *ImportTaskUpdateOne {
	ituo.mutation.ClearDeletedAt()
	return ituo
}

// SetImportName sets the "import_name" field.
func (ituo *ImportTaskUpdateOne) SetImportName(s string) *ImportTaskUpdateOne {
	ituo.mutation.SetImportName(s)
	return ituo
}

// SetNillableImportName sets the "import_name" field if the given value is not nil.
func (ituo *ImportTaskUpdateOne) SetNillableImportName(s *string) *ImportTaskUpdateOne {
	if s != nil {
		ituo.SetImportName(*s)
	}
	return ituo
}

// SetStatus sets the "status" field.
func (ituo *ImportTaskUpdateOne) SetStatus(u uint8) *ImportTaskUpdateOne {
	ituo.mutation.ResetStatus()
	ituo.mutation.SetStatus(u)
	return ituo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ituo *ImportTaskUpdateOne) SetNillableStatus(u *uint8) *ImportTaskUpdateOne {
	if u != nil {
		ituo.SetStatus(*u)
	}
	return ituo
}

// AddStatus adds u to the "status" field.
func (ituo *ImportTaskUpdateOne) AddStatus(u uint8) *ImportTaskUpdateOne {
	ituo.mutation.AddStatus(u)
	return ituo
}

// SetPath sets the "path" field.
func (ituo *ImportTaskUpdateOne) SetPath(s string) *ImportTaskUpdateOne {
	ituo.mutation.SetPath(s)
	return ituo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ituo *ImportTaskUpdateOne) SetNillablePath(s *string) *ImportTaskUpdateOne {
	if s != nil {
		ituo.SetPath(*s)
	}
	return ituo
}

// SetTotal sets the "total" field.
func (ituo *ImportTaskUpdateOne) SetTotal(i int) *ImportTaskUpdateOne {
	ituo.mutation.ResetTotal()
	ituo.mutation.SetTotal(i)
	return ituo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (ituo *ImportTaskUpdateOne) SetNillableTotal(i *int) *ImportTaskUpdateOne {
	if i != nil {
		ituo.SetTotal(*i)
	}
	return ituo
}

// AddTotal adds i to the "total" field.
func (ituo *ImportTaskUpdateOne) AddTotal(i int) *ImportTaskUpdateOne {
	ituo.mutation.AddTotal(i)
	return ituo
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (ituo *ImportTaskUpdateOne) SetCreatedAdminID(i int) *ImportTaskUpdateOne {
	ituo.mutation.ResetCreatedAdminID()
	ituo.mutation.SetCreatedAdminID(i)
	return ituo
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (ituo *ImportTaskUpdateOne) SetNillableCreatedAdminID(i *int) *ImportTaskUpdateOne {
	if i != nil {
		ituo.SetCreatedAdminID(*i)
	}
	return ituo
}

// AddCreatedAdminID adds i to the "created_admin_id" field.
func (ituo *ImportTaskUpdateOne) AddCreatedAdminID(i int) *ImportTaskUpdateOne {
	ituo.mutation.AddCreatedAdminID(i)
	return ituo
}

// SetRemark sets the "remark" field.
func (ituo *ImportTaskUpdateOne) SetRemark(s string) *ImportTaskUpdateOne {
	ituo.mutation.SetRemark(s)
	return ituo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ituo *ImportTaskUpdateOne) SetNillableRemark(s *string) *ImportTaskUpdateOne {
	if s != nil {
		ituo.SetRemark(*s)
	}
	return ituo
}

// Mutation returns the ImportTaskMutation object of the builder.
func (ituo *ImportTaskUpdateOne) Mutation() *ImportTaskMutation {
	return ituo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *ImportTaskUpdateOne) Select(field string, fields ...string) *ImportTaskUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated ImportTask entity.
func (ituo *ImportTaskUpdateOne) Save(ctx context.Context) (*ImportTask, error) {
	var (
		err  error
		node *ImportTask
	)
	ituo.defaults()
	if len(ituo.hooks) == 0 {
		node, err = ituo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImportTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ituo.mutation = mutation
			node, err = ituo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ituo.hooks) - 1; i >= 0; i-- {
			mut = ituo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ituo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *ImportTaskUpdateOne) SaveX(ctx context.Context) *ImportTask {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *ImportTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *ImportTaskUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ituo *ImportTaskUpdateOne) defaults() {
	if _, ok := ituo.mutation.UpdatedAt(); !ok && !ituo.mutation.UpdatedAtCleared() {
		v := importtask.UpdateDefaultUpdatedAt()
		ituo.mutation.SetUpdatedAt(v)
	}
}

func (ituo *ImportTaskUpdateOne) sqlSave(ctx context.Context) (_node *ImportTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   importtask.Table,
			Columns: importtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: importtask.FieldID,
			},
		},
	}
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ImportTask.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, importtask.FieldID)
		for _, f := range fields {
			if !importtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != importtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldUUID,
		})
	}
	if ituo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: importtask.FieldCreatedAt,
		})
	}
	if value, ok := ituo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: importtask.FieldUpdatedAt,
		})
	}
	if ituo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: importtask.FieldUpdatedAt,
		})
	}
	if value, ok := ituo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: importtask.FieldDeletedAt,
		})
	}
	if ituo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: importtask.FieldDeletedAt,
		})
	}
	if value, ok := ituo.mutation.ImportName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldImportName,
		})
	}
	if value, ok := ituo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: importtask.FieldStatus,
		})
	}
	if value, ok := ituo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: importtask.FieldStatus,
		})
	}
	if value, ok := ituo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldPath,
		})
	}
	if value, ok := ituo.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldTotal,
		})
	}
	if value, ok := ituo.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldTotal,
		})
	}
	if value, ok := ituo.mutation.CreatedAdminID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldCreatedAdminID,
		})
	}
	if value, ok := ituo.mutation.AddedCreatedAdminID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: importtask.FieldCreatedAdminID,
		})
	}
	if value, ok := ituo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: importtask.FieldRemark,
		})
	}
	_node = &ImportTask{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{importtask.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/tkquestion"
	"gserver/internal/store/ent/tkuserexamscorerecord"
	"gserver/internal/store/ent/tkusersimulationteachermark"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TkUserSimulationTeacherMark is the model entity for the TkUserSimulationTeacherMark schema.
type TkUserSimulationTeacherMark struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Score holds the value of the "score" field.
	// 主观题分数
	Score uint8 `json:"score"`
	// Desc holds the value of the "desc" field.
	// 老师解析
	Desc string `json:"desc"`
	// QuestionID holds the value of the "question_id" field.
	// 题目id
	QuestionID int `json:"question_id"`
	// UserExamRecordID holds the value of the "user_exam_record_id" field.
	// 考试成绩表id
	UserExamRecordID int `json:"user_exam_record_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkUserSimulationTeacherMarkQuery when eager-loading is set.
	Edges TkUserSimulationTeacherMarkEdges `json:"edges"`
}

// TkUserSimulationTeacherMarkEdges holds the relations/edges for other nodes in the graph.
type TkUserSimulationTeacherMarkEdges struct {
	// Question holds the value of the question edge.
	Question *TkQuestion `json:"question,omitempty"`
	// UserExamRecord holds the value of the user_exam_record edge.
	UserExamRecord *TkUserExamScoreRecord `json:"user_exam_record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserSimulationTeacherMarkEdges) QuestionOrErr() (*TkQuestion, error) {
	if e.loadedTypes[0] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestion.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// UserExamRecordOrErr returns the UserExamRecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserSimulationTeacherMarkEdges) UserExamRecordOrErr() (*TkUserExamScoreRecord, error) {
	if e.loadedTypes[1] {
		if e.UserExamRecord == nil {
			// The edge user_exam_record was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkuserexamscorerecord.Label}
		}
		return e.UserExamRecord, nil
	}
	return nil, &NotLoadedError{edge: "user_exam_record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkUserSimulationTeacherMark) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkusersimulationteachermark.FieldID, tkusersimulationteachermark.FieldScore, tkusersimulationteachermark.FieldQuestionID, tkusersimulationteachermark.FieldUserExamRecordID:
			values[i] = new(sql.NullInt64)
		case tkusersimulationteachermark.FieldUUID, tkusersimulationteachermark.FieldDesc:
			values[i] = new(sql.NullString)
		case tkusersimulationteachermark.FieldCreatedAt, tkusersimulationteachermark.FieldUpdatedAt, tkusersimulationteachermark.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkUserSimulationTeacherMark", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkUserSimulationTeacherMark fields.
func (tustm *TkUserSimulationTeacherMark) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkusersimulationteachermark.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tustm.ID = int(value.Int64)
		case tkusersimulationteachermark.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tustm.UUID = value.String
			}
		case tkusersimulationteachermark.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tustm.CreatedAt = new(time.Time)
				*tustm.CreatedAt = value.Time
			}
		case tkusersimulationteachermark.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tustm.UpdatedAt = new(time.Time)
				*tustm.UpdatedAt = value.Time
			}
		case tkusersimulationteachermark.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tustm.DeletedAt = new(time.Time)
				*tustm.DeletedAt = value.Time
			}
		case tkusersimulationteachermark.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				tustm.Score = uint8(value.Int64)
			}
		case tkusersimulationteachermark.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				tustm.Desc = value.String
			}
		case tkusersimulationteachermark.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				tustm.QuestionID = int(value.Int64)
			}
		case tkusersimulationteachermark.FieldUserExamRecordID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_exam_record_id", values[i])
			} else if value.Valid {
				tustm.UserExamRecordID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestion queries the "question" edge of the TkUserSimulationTeacherMark entity.
func (tustm *TkUserSimulationTeacherMark) QueryQuestion() *TkQuestionQuery {
	return (&TkUserSimulationTeacherMarkClient{config: tustm.config}).QueryQuestion(tustm)
}

// QueryUserExamRecord queries the "user_exam_record" edge of the TkUserSimulationTeacherMark entity.
func (tustm *TkUserSimulationTeacherMark) QueryUserExamRecord() *TkUserExamScoreRecordQuery {
	return (&TkUserSimulationTeacherMarkClient{config: tustm.config}).QueryUserExamRecord(tustm)
}

// Update returns a builder for updating this TkUserSimulationTeacherMark.
// Note that you need to call TkUserSimulationTeacherMark.Unwrap() before calling this method if this TkUserSimulationTeacherMark
// was returned from a transaction, and the transaction was committed or rolled back.
func (tustm *TkUserSimulationTeacherMark) Update() *TkUserSimulationTeacherMarkUpdateOne {
	return (&TkUserSimulationTeacherMarkClient{config: tustm.config}).UpdateOne(tustm)
}

// Unwrap unwraps the TkUserSimulationTeacherMark entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tustm *TkUserSimulationTeacherMark) Unwrap() *TkUserSimulationTeacherMark {
	tx, ok := tustm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkUserSimulationTeacherMark is not a transactional entity")
	}
	tustm.config.driver = tx.drv
	return tustm
}

// String implements the fmt.Stringer.
func (tustm *TkUserSimulationTeacherMark) String() string {
	var builder strings.Builder
	builder.WriteString("TkUserSimulationTeacherMark(")
	builder.WriteString(fmt.Sprintf("id=%v", tustm.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tustm.UUID)
	if v := tustm.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tustm.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tustm.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", score=")
	builder.WriteString(fmt.Sprintf("%v", tustm.Score))
	builder.WriteString(", desc=")
	builder.WriteString(tustm.Desc)
	builder.WriteString(", question_id=")
	builder.WriteString(fmt.Sprintf("%v", tustm.QuestionID))
	builder.WriteString(", user_exam_record_id=")
	builder.WriteString(fmt.Sprintf("%v", tustm.UserExamRecordID))
	builder.WriteByte(')')
	return builder.String()
}

// TkUserSimulationTeacherMarks is a parsable slice of TkUserSimulationTeacherMark.
type TkUserSimulationTeacherMarks []*TkUserSimulationTeacherMark

func (tustm TkUserSimulationTeacherMarks) config(cfg config) {
	for _i := range tustm {
		tustm[_i].config = cfg
	}
}

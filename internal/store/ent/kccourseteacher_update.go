// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccourseteacher"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/teacher"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseTeacherUpdate is the builder for updating KcCourseTeacher entities.
type KcCourseTeacherUpdate struct {
	config
	hooks    []Hook
	mutation *KcCourseTeacherMutation
}

// Where adds a new predicate for the KcCourseTeacherUpdate builder.
func (kctu *KcCourseTeacherUpdate) Where(ps ...predicate.KcCourseTeacher) *KcCourseTeacherUpdate {
	kctu.mutation.predicates = append(kctu.mutation.predicates, ps...)
	return kctu
}

// SetShowStatus sets the "show_status" field.
func (kctu *KcCourseTeacherUpdate) SetShowStatus(u uint8) *KcCourseTeacherUpdate {
	kctu.mutation.ResetShowStatus()
	kctu.mutation.SetShowStatus(u)
	return kctu
}

// SetNillableShowStatus sets the "show_status" field if the given value is not nil.
func (kctu *KcCourseTeacherUpdate) SetNillableShowStatus(u *uint8) *KcCourseTeacherUpdate {
	if u != nil {
		kctu.SetShowStatus(*u)
	}
	return kctu
}

// AddShowStatus adds u to the "show_status" field.
func (kctu *KcCourseTeacherUpdate) AddShowStatus(u uint8) *KcCourseTeacherUpdate {
	kctu.mutation.AddShowStatus(u)
	return kctu
}

// SetSortOrder sets the "sort_order" field.
func (kctu *KcCourseTeacherUpdate) SetSortOrder(i int) *KcCourseTeacherUpdate {
	kctu.mutation.ResetSortOrder()
	kctu.mutation.SetSortOrder(i)
	return kctu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (kctu *KcCourseTeacherUpdate) SetNillableSortOrder(i *int) *KcCourseTeacherUpdate {
	if i != nil {
		kctu.SetSortOrder(*i)
	}
	return kctu
}

// AddSortOrder adds i to the "sort_order" field.
func (kctu *KcCourseTeacherUpdate) AddSortOrder(i int) *KcCourseTeacherUpdate {
	kctu.mutation.AddSortOrder(i)
	return kctu
}

// SetCourseID sets the "course_id" field.
func (kctu *KcCourseTeacherUpdate) SetCourseID(i int) *KcCourseTeacherUpdate {
	kctu.mutation.ResetCourseID()
	kctu.mutation.SetCourseID(i)
	return kctu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kctu *KcCourseTeacherUpdate) SetNillableCourseID(i *int) *KcCourseTeacherUpdate {
	if i != nil {
		kctu.SetCourseID(*i)
	}
	return kctu
}

// ClearCourseID clears the value of the "course_id" field.
func (kctu *KcCourseTeacherUpdate) ClearCourseID() *KcCourseTeacherUpdate {
	kctu.mutation.ClearCourseID()
	return kctu
}

// SetTeacherID sets the "teacher_id" field.
func (kctu *KcCourseTeacherUpdate) SetTeacherID(i int) *KcCourseTeacherUpdate {
	kctu.mutation.ResetTeacherID()
	kctu.mutation.SetTeacherID(i)
	return kctu
}

// SetNillableTeacherID sets the "teacher_id" field if the given value is not nil.
func (kctu *KcCourseTeacherUpdate) SetNillableTeacherID(i *int) *KcCourseTeacherUpdate {
	if i != nil {
		kctu.SetTeacherID(*i)
	}
	return kctu
}

// ClearTeacherID clears the value of the "teacher_id" field.
func (kctu *KcCourseTeacherUpdate) ClearTeacherID() *KcCourseTeacherUpdate {
	kctu.mutation.ClearTeacherID()
	return kctu
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (kctu *KcCourseTeacherUpdate) SetTeacher(t *Teacher) *KcCourseTeacherUpdate {
	return kctu.SetTeacherID(t.ID)
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (kctu *KcCourseTeacherUpdate) SetCourse(k *KcCourse) *KcCourseTeacherUpdate {
	return kctu.SetCourseID(k.ID)
}

// Mutation returns the KcCourseTeacherMutation object of the builder.
func (kctu *KcCourseTeacherUpdate) Mutation() *KcCourseTeacherMutation {
	return kctu.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (kctu *KcCourseTeacherUpdate) ClearTeacher() *KcCourseTeacherUpdate {
	kctu.mutation.ClearTeacher()
	return kctu
}

// ClearCourse clears the "course" edge to the KcCourse entity.
func (kctu *KcCourseTeacherUpdate) ClearCourse() *KcCourseTeacherUpdate {
	kctu.mutation.ClearCourse()
	return kctu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kctu *KcCourseTeacherUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(kctu.hooks) == 0 {
		affected, err = kctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseTeacherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kctu.mutation = mutation
			affected, err = kctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kctu.hooks) - 1; i >= 0; i-- {
			mut = kctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kctu *KcCourseTeacherUpdate) SaveX(ctx context.Context) int {
	affected, err := kctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kctu *KcCourseTeacherUpdate) Exec(ctx context.Context) error {
	_, err := kctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kctu *KcCourseTeacherUpdate) ExecX(ctx context.Context) {
	if err := kctu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kctu *KcCourseTeacherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccourseteacher.Table,
			Columns: kccourseteacher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccourseteacher.FieldID,
			},
		},
	}
	if ps := kctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kctu.mutation.ShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccourseteacher.FieldShowStatus,
		})
	}
	if value, ok := kctu.mutation.AddedShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccourseteacher.FieldShowStatus,
		})
	}
	if value, ok := kctu.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccourseteacher.FieldSortOrder,
		})
	}
	if value, ok := kctu.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccourseteacher.FieldSortOrder,
		})
	}
	if kctu.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccourseteacher.TeacherTable,
			Columns: []string{kccourseteacher.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kctu.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccourseteacher.TeacherTable,
			Columns: []string{kccourseteacher.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kctu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccourseteacher.CourseTable,
			Columns: []string{kccourseteacher.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kctu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccourseteacher.CourseTable,
			Columns: []string{kccourseteacher.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccourseteacher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KcCourseTeacherUpdateOne is the builder for updating a single KcCourseTeacher entity.
type KcCourseTeacherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KcCourseTeacherMutation
}

// SetShowStatus sets the "show_status" field.
func (kctuo *KcCourseTeacherUpdateOne) SetShowStatus(u uint8) *KcCourseTeacherUpdateOne {
	kctuo.mutation.ResetShowStatus()
	kctuo.mutation.SetShowStatus(u)
	return kctuo
}

// SetNillableShowStatus sets the "show_status" field if the given value is not nil.
func (kctuo *KcCourseTeacherUpdateOne) SetNillableShowStatus(u *uint8) *KcCourseTeacherUpdateOne {
	if u != nil {
		kctuo.SetShowStatus(*u)
	}
	return kctuo
}

// AddShowStatus adds u to the "show_status" field.
func (kctuo *KcCourseTeacherUpdateOne) AddShowStatus(u uint8) *KcCourseTeacherUpdateOne {
	kctuo.mutation.AddShowStatus(u)
	return kctuo
}

// SetSortOrder sets the "sort_order" field.
func (kctuo *KcCourseTeacherUpdateOne) SetSortOrder(i int) *KcCourseTeacherUpdateOne {
	kctuo.mutation.ResetSortOrder()
	kctuo.mutation.SetSortOrder(i)
	return kctuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (kctuo *KcCourseTeacherUpdateOne) SetNillableSortOrder(i *int) *KcCourseTeacherUpdateOne {
	if i != nil {
		kctuo.SetSortOrder(*i)
	}
	return kctuo
}

// AddSortOrder adds i to the "sort_order" field.
func (kctuo *KcCourseTeacherUpdateOne) AddSortOrder(i int) *KcCourseTeacherUpdateOne {
	kctuo.mutation.AddSortOrder(i)
	return kctuo
}

// SetCourseID sets the "course_id" field.
func (kctuo *KcCourseTeacherUpdateOne) SetCourseID(i int) *KcCourseTeacherUpdateOne {
	kctuo.mutation.ResetCourseID()
	kctuo.mutation.SetCourseID(i)
	return kctuo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kctuo *KcCourseTeacherUpdateOne) SetNillableCourseID(i *int) *KcCourseTeacherUpdateOne {
	if i != nil {
		kctuo.SetCourseID(*i)
	}
	return kctuo
}

// ClearCourseID clears the value of the "course_id" field.
func (kctuo *KcCourseTeacherUpdateOne) ClearCourseID() *KcCourseTeacherUpdateOne {
	kctuo.mutation.ClearCourseID()
	return kctuo
}

// SetTeacherID sets the "teacher_id" field.
func (kctuo *KcCourseTeacherUpdateOne) SetTeacherID(i int) *KcCourseTeacherUpdateOne {
	kctuo.mutation.ResetTeacherID()
	kctuo.mutation.SetTeacherID(i)
	return kctuo
}

// SetNillableTeacherID sets the "teacher_id" field if the given value is not nil.
func (kctuo *KcCourseTeacherUpdateOne) SetNillableTeacherID(i *int) *KcCourseTeacherUpdateOne {
	if i != nil {
		kctuo.SetTeacherID(*i)
	}
	return kctuo
}

// ClearTeacherID clears the value of the "teacher_id" field.
func (kctuo *KcCourseTeacherUpdateOne) ClearTeacherID() *KcCourseTeacherUpdateOne {
	kctuo.mutation.ClearTeacherID()
	return kctuo
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (kctuo *KcCourseTeacherUpdateOne) SetTeacher(t *Teacher) *KcCourseTeacherUpdateOne {
	return kctuo.SetTeacherID(t.ID)
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (kctuo *KcCourseTeacherUpdateOne) SetCourse(k *KcCourse) *KcCourseTeacherUpdateOne {
	return kctuo.SetCourseID(k.ID)
}

// Mutation returns the KcCourseTeacherMutation object of the builder.
func (kctuo *KcCourseTeacherUpdateOne) Mutation() *KcCourseTeacherMutation {
	return kctuo.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (kctuo *KcCourseTeacherUpdateOne) ClearTeacher() *KcCourseTeacherUpdateOne {
	kctuo.mutation.ClearTeacher()
	return kctuo
}

// ClearCourse clears the "course" edge to the KcCourse entity.
func (kctuo *KcCourseTeacherUpdateOne) ClearCourse() *KcCourseTeacherUpdateOne {
	kctuo.mutation.ClearCourse()
	return kctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kctuo *KcCourseTeacherUpdateOne) Select(field string, fields ...string) *KcCourseTeacherUpdateOne {
	kctuo.fields = append([]string{field}, fields...)
	return kctuo
}

// Save executes the query and returns the updated KcCourseTeacher entity.
func (kctuo *KcCourseTeacherUpdateOne) Save(ctx context.Context) (*KcCourseTeacher, error) {
	var (
		err  error
		node *KcCourseTeacher
	)
	if len(kctuo.hooks) == 0 {
		node, err = kctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseTeacherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kctuo.mutation = mutation
			node, err = kctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kctuo.hooks) - 1; i >= 0; i-- {
			mut = kctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kctuo *KcCourseTeacherUpdateOne) SaveX(ctx context.Context) *KcCourseTeacher {
	node, err := kctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kctuo *KcCourseTeacherUpdateOne) Exec(ctx context.Context) error {
	_, err := kctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kctuo *KcCourseTeacherUpdateOne) ExecX(ctx context.Context) {
	if err := kctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kctuo *KcCourseTeacherUpdateOne) sqlSave(ctx context.Context) (_node *KcCourseTeacher, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccourseteacher.Table,
			Columns: kccourseteacher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccourseteacher.FieldID,
			},
		},
	}
	id, ok := kctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KcCourseTeacher.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kccourseteacher.FieldID)
		for _, f := range fields {
			if !kccourseteacher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kccourseteacher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kctuo.mutation.ShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccourseteacher.FieldShowStatus,
		})
	}
	if value, ok := kctuo.mutation.AddedShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccourseteacher.FieldShowStatus,
		})
	}
	if value, ok := kctuo.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccourseteacher.FieldSortOrder,
		})
	}
	if value, ok := kctuo.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccourseteacher.FieldSortOrder,
		})
	}
	if kctuo.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccourseteacher.TeacherTable,
			Columns: []string{kccourseteacher.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kctuo.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccourseteacher.TeacherTable,
			Columns: []string{kccourseteacher.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kctuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccourseteacher.CourseTable,
			Columns: []string{kccourseteacher.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kctuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccourseteacher.CourseTable,
			Columns: []string{kccourseteacher.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KcCourseTeacher{config: kctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccourseteacher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

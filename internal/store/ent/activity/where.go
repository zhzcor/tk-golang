// Code generated by entc, DO NOT EDIT.

package activity

import (
	"time"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// SubTitle applies equality check predicate on the "sub_title" field. It's identical to SubTitleEQ.
func SubTitle(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubTitle), v))
	})
}

// CoverImgID applies equality check predicate on the "cover_img_id" field. It's identical to CoverImgIDEQ.
func CoverImgID(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoverImgID), v))
	})
}

// Notice applies equality check predicate on the "notice" field. It's identical to NoticeEQ.
func Notice(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotice), v))
	})
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// Place applies equality check predicate on the "place" field. It's identical to PlaceEQ.
func Place(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlace), v))
	})
}

// IsFree applies equality check predicate on the "is_free" field. It's identical to IsFreeEQ.
func IsFree(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFree), v))
	})
}

// IsPublish applies equality check predicate on the "is_publish" field. It's identical to IsPublishEQ.
func IsPublish(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPublish), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// ApplyStartAt applies equality check predicate on the "apply_start_at" field. It's identical to ApplyStartAtEQ.
func ApplyStartAt(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplyStartAt), v))
	})
}

// ApplyEndAt applies equality check predicate on the "apply_end_at" field. It's identical to ApplyEndAtEQ.
func ApplyEndAt(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplyEndAt), v))
	})
}

// IsHot applies equality check predicate on the "is_hot" field. It's identical to IsHotEQ.
func IsHot(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHot), v))
	})
}

// IsAutoPublish applies equality check predicate on the "is_auto_publish" field. It's identical to IsAutoPublishEQ.
func IsAutoPublish(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAutoPublish), v))
	})
}

// ApplyCount applies equality check predicate on the "apply_count" field. It's identical to ApplyCountEQ.
func ApplyCount(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplyCount), v))
	})
}

// JoinCount applies equality check predicate on the "join_count" field. It's identical to JoinCountEQ.
func JoinCount(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinCount), v))
	})
}

// IsLimitJoinCount applies equality check predicate on the "is_limit_join_count" field. It's identical to IsLimitJoinCountEQ.
func IsLimitJoinCount(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLimitJoinCount), v))
	})
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthday), v))
	})
}

// SignRemark applies equality check predicate on the "sign_remark" field. It's identical to SignRemarkEQ.
func SignRemark(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignRemark), v))
	})
}

// ActivityTypeID applies equality check predicate on the "activity_type_id" field. It's identical to ActivityTypeIDEQ.
func ActivityTypeID(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityTypeID), v))
	})
}

// CreatedAdminID applies equality check predicate on the "created_admin_id" field. It's identical to CreatedAdminIDEQ.
func CreatedAdminID(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAdminID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// SubTitleEQ applies the EQ predicate on the "sub_title" field.
func SubTitleEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubTitle), v))
	})
}

// SubTitleNEQ applies the NEQ predicate on the "sub_title" field.
func SubTitleNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubTitle), v))
	})
}

// SubTitleIn applies the In predicate on the "sub_title" field.
func SubTitleIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubTitle), v...))
	})
}

// SubTitleNotIn applies the NotIn predicate on the "sub_title" field.
func SubTitleNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubTitle), v...))
	})
}

// SubTitleGT applies the GT predicate on the "sub_title" field.
func SubTitleGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubTitle), v))
	})
}

// SubTitleGTE applies the GTE predicate on the "sub_title" field.
func SubTitleGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubTitle), v))
	})
}

// SubTitleLT applies the LT predicate on the "sub_title" field.
func SubTitleLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubTitle), v))
	})
}

// SubTitleLTE applies the LTE predicate on the "sub_title" field.
func SubTitleLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubTitle), v))
	})
}

// SubTitleContains applies the Contains predicate on the "sub_title" field.
func SubTitleContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubTitle), v))
	})
}

// SubTitleHasPrefix applies the HasPrefix predicate on the "sub_title" field.
func SubTitleHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubTitle), v))
	})
}

// SubTitleHasSuffix applies the HasSuffix predicate on the "sub_title" field.
func SubTitleHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubTitle), v))
	})
}

// SubTitleEqualFold applies the EqualFold predicate on the "sub_title" field.
func SubTitleEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubTitle), v))
	})
}

// SubTitleContainsFold applies the ContainsFold predicate on the "sub_title" field.
func SubTitleContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubTitle), v))
	})
}

// CoverImgIDEQ applies the EQ predicate on the "cover_img_id" field.
func CoverImgIDEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoverImgID), v))
	})
}

// CoverImgIDNEQ applies the NEQ predicate on the "cover_img_id" field.
func CoverImgIDNEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoverImgID), v))
	})
}

// CoverImgIDIn applies the In predicate on the "cover_img_id" field.
func CoverImgIDIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoverImgID), v...))
	})
}

// CoverImgIDNotIn applies the NotIn predicate on the "cover_img_id" field.
func CoverImgIDNotIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoverImgID), v...))
	})
}

// CoverImgIDGT applies the GT predicate on the "cover_img_id" field.
func CoverImgIDGT(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoverImgID), v))
	})
}

// CoverImgIDGTE applies the GTE predicate on the "cover_img_id" field.
func CoverImgIDGTE(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoverImgID), v))
	})
}

// CoverImgIDLT applies the LT predicate on the "cover_img_id" field.
func CoverImgIDLT(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoverImgID), v))
	})
}

// CoverImgIDLTE applies the LTE predicate on the "cover_img_id" field.
func CoverImgIDLTE(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoverImgID), v))
	})
}

// NoticeEQ applies the EQ predicate on the "notice" field.
func NoticeEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotice), v))
	})
}

// NoticeNEQ applies the NEQ predicate on the "notice" field.
func NoticeNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotice), v))
	})
}

// NoticeIn applies the In predicate on the "notice" field.
func NoticeIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNotice), v...))
	})
}

// NoticeNotIn applies the NotIn predicate on the "notice" field.
func NoticeNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNotice), v...))
	})
}

// NoticeGT applies the GT predicate on the "notice" field.
func NoticeGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotice), v))
	})
}

// NoticeGTE applies the GTE predicate on the "notice" field.
func NoticeGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotice), v))
	})
}

// NoticeLT applies the LT predicate on the "notice" field.
func NoticeLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotice), v))
	})
}

// NoticeLTE applies the LTE predicate on the "notice" field.
func NoticeLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotice), v))
	})
}

// NoticeContains applies the Contains predicate on the "notice" field.
func NoticeContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNotice), v))
	})
}

// NoticeHasPrefix applies the HasPrefix predicate on the "notice" field.
func NoticeHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNotice), v))
	})
}

// NoticeHasSuffix applies the HasSuffix predicate on the "notice" field.
func NoticeHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNotice), v))
	})
}

// NoticeIsNil applies the IsNil predicate on the "notice" field.
func NoticeIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNotice)))
	})
}

// NoticeNotNil applies the NotNil predicate on the "notice" field.
func NoticeNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNotice)))
	})
}

// NoticeEqualFold applies the EqualFold predicate on the "notice" field.
func NoticeEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNotice), v))
	})
}

// NoticeContainsFold applies the ContainsFold predicate on the "notice" field.
func NoticeContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNotice), v))
	})
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetail), v))
	})
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetail), v...))
	})
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetail), v...))
	})
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetail), v))
	})
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetail), v))
	})
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetail), v))
	})
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetail), v))
	})
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetail), v))
	})
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetail), v))
	})
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetail), v))
	})
}

// DetailIsNil applies the IsNil predicate on the "detail" field.
func DetailIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDetail)))
	})
}

// DetailNotNil applies the NotNil predicate on the "detail" field.
func DetailNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDetail)))
	})
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetail), v))
	})
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetail), v))
	})
}

// PlaceEQ applies the EQ predicate on the "place" field.
func PlaceEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlace), v))
	})
}

// PlaceNEQ applies the NEQ predicate on the "place" field.
func PlaceNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlace), v))
	})
}

// PlaceIn applies the In predicate on the "place" field.
func PlaceIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlace), v...))
	})
}

// PlaceNotIn applies the NotIn predicate on the "place" field.
func PlaceNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlace), v...))
	})
}

// PlaceGT applies the GT predicate on the "place" field.
func PlaceGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlace), v))
	})
}

// PlaceGTE applies the GTE predicate on the "place" field.
func PlaceGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlace), v))
	})
}

// PlaceLT applies the LT predicate on the "place" field.
func PlaceLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlace), v))
	})
}

// PlaceLTE applies the LTE predicate on the "place" field.
func PlaceLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlace), v))
	})
}

// PlaceContains applies the Contains predicate on the "place" field.
func PlaceContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlace), v))
	})
}

// PlaceHasPrefix applies the HasPrefix predicate on the "place" field.
func PlaceHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlace), v))
	})
}

// PlaceHasSuffix applies the HasSuffix predicate on the "place" field.
func PlaceHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlace), v))
	})
}

// PlaceEqualFold applies the EqualFold predicate on the "place" field.
func PlaceEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlace), v))
	})
}

// PlaceContainsFold applies the ContainsFold predicate on the "place" field.
func PlaceContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlace), v))
	})
}

// IsFreeEQ applies the EQ predicate on the "is_free" field.
func IsFreeEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFree), v))
	})
}

// IsFreeNEQ applies the NEQ predicate on the "is_free" field.
func IsFreeNEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsFree), v))
	})
}

// IsFreeIn applies the In predicate on the "is_free" field.
func IsFreeIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsFree), v...))
	})
}

// IsFreeNotIn applies the NotIn predicate on the "is_free" field.
func IsFreeNotIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsFree), v...))
	})
}

// IsFreeGT applies the GT predicate on the "is_free" field.
func IsFreeGT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsFree), v))
	})
}

// IsFreeGTE applies the GTE predicate on the "is_free" field.
func IsFreeGTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsFree), v))
	})
}

// IsFreeLT applies the LT predicate on the "is_free" field.
func IsFreeLT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsFree), v))
	})
}

// IsFreeLTE applies the LTE predicate on the "is_free" field.
func IsFreeLTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsFree), v))
	})
}

// IsPublishEQ applies the EQ predicate on the "is_publish" field.
func IsPublishEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPublish), v))
	})
}

// IsPublishNEQ applies the NEQ predicate on the "is_publish" field.
func IsPublishNEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPublish), v))
	})
}

// IsPublishIn applies the In predicate on the "is_publish" field.
func IsPublishIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsPublish), v...))
	})
}

// IsPublishNotIn applies the NotIn predicate on the "is_publish" field.
func IsPublishNotIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsPublish), v...))
	})
}

// IsPublishGT applies the GT predicate on the "is_publish" field.
func IsPublishGT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsPublish), v))
	})
}

// IsPublishGTE applies the GTE predicate on the "is_publish" field.
func IsPublishGTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsPublish), v))
	})
}

// IsPublishLT applies the LT predicate on the "is_publish" field.
func IsPublishLT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsPublish), v))
	})
}

// IsPublishLTE applies the LTE predicate on the "is_publish" field.
func IsPublishLTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsPublish), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAt)))
	})
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAt)))
	})
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndAt), v))
	})
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndAt), v...))
	})
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndAt), v...))
	})
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndAt), v))
	})
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndAt), v))
	})
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndAt), v))
	})
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndAt), v))
	})
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndAt)))
	})
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndAt)))
	})
}

// ApplyStartAtEQ applies the EQ predicate on the "apply_start_at" field.
func ApplyStartAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplyStartAt), v))
	})
}

// ApplyStartAtNEQ applies the NEQ predicate on the "apply_start_at" field.
func ApplyStartAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApplyStartAt), v))
	})
}

// ApplyStartAtIn applies the In predicate on the "apply_start_at" field.
func ApplyStartAtIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApplyStartAt), v...))
	})
}

// ApplyStartAtNotIn applies the NotIn predicate on the "apply_start_at" field.
func ApplyStartAtNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApplyStartAt), v...))
	})
}

// ApplyStartAtGT applies the GT predicate on the "apply_start_at" field.
func ApplyStartAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApplyStartAt), v))
	})
}

// ApplyStartAtGTE applies the GTE predicate on the "apply_start_at" field.
func ApplyStartAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApplyStartAt), v))
	})
}

// ApplyStartAtLT applies the LT predicate on the "apply_start_at" field.
func ApplyStartAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApplyStartAt), v))
	})
}

// ApplyStartAtLTE applies the LTE predicate on the "apply_start_at" field.
func ApplyStartAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApplyStartAt), v))
	})
}

// ApplyStartAtIsNil applies the IsNil predicate on the "apply_start_at" field.
func ApplyStartAtIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldApplyStartAt)))
	})
}

// ApplyStartAtNotNil applies the NotNil predicate on the "apply_start_at" field.
func ApplyStartAtNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldApplyStartAt)))
	})
}

// ApplyEndAtEQ applies the EQ predicate on the "apply_end_at" field.
func ApplyEndAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplyEndAt), v))
	})
}

// ApplyEndAtNEQ applies the NEQ predicate on the "apply_end_at" field.
func ApplyEndAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApplyEndAt), v))
	})
}

// ApplyEndAtIn applies the In predicate on the "apply_end_at" field.
func ApplyEndAtIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApplyEndAt), v...))
	})
}

// ApplyEndAtNotIn applies the NotIn predicate on the "apply_end_at" field.
func ApplyEndAtNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApplyEndAt), v...))
	})
}

// ApplyEndAtGT applies the GT predicate on the "apply_end_at" field.
func ApplyEndAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApplyEndAt), v))
	})
}

// ApplyEndAtGTE applies the GTE predicate on the "apply_end_at" field.
func ApplyEndAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApplyEndAt), v))
	})
}

// ApplyEndAtLT applies the LT predicate on the "apply_end_at" field.
func ApplyEndAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApplyEndAt), v))
	})
}

// ApplyEndAtLTE applies the LTE predicate on the "apply_end_at" field.
func ApplyEndAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApplyEndAt), v))
	})
}

// ApplyEndAtIsNil applies the IsNil predicate on the "apply_end_at" field.
func ApplyEndAtIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldApplyEndAt)))
	})
}

// ApplyEndAtNotNil applies the NotNil predicate on the "apply_end_at" field.
func ApplyEndAtNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldApplyEndAt)))
	})
}

// IsHotEQ applies the EQ predicate on the "is_hot" field.
func IsHotEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHot), v))
	})
}

// IsHotNEQ applies the NEQ predicate on the "is_hot" field.
func IsHotNEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsHot), v))
	})
}

// IsHotIn applies the In predicate on the "is_hot" field.
func IsHotIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsHot), v...))
	})
}

// IsHotNotIn applies the NotIn predicate on the "is_hot" field.
func IsHotNotIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsHot), v...))
	})
}

// IsHotGT applies the GT predicate on the "is_hot" field.
func IsHotGT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsHot), v))
	})
}

// IsHotGTE applies the GTE predicate on the "is_hot" field.
func IsHotGTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsHot), v))
	})
}

// IsHotLT applies the LT predicate on the "is_hot" field.
func IsHotLT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsHot), v))
	})
}

// IsHotLTE applies the LTE predicate on the "is_hot" field.
func IsHotLTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsHot), v))
	})
}

// IsAutoPublishEQ applies the EQ predicate on the "is_auto_publish" field.
func IsAutoPublishEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAutoPublish), v))
	})
}

// IsAutoPublishNEQ applies the NEQ predicate on the "is_auto_publish" field.
func IsAutoPublishNEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsAutoPublish), v))
	})
}

// IsAutoPublishIn applies the In predicate on the "is_auto_publish" field.
func IsAutoPublishIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsAutoPublish), v...))
	})
}

// IsAutoPublishNotIn applies the NotIn predicate on the "is_auto_publish" field.
func IsAutoPublishNotIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsAutoPublish), v...))
	})
}

// IsAutoPublishGT applies the GT predicate on the "is_auto_publish" field.
func IsAutoPublishGT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsAutoPublish), v))
	})
}

// IsAutoPublishGTE applies the GTE predicate on the "is_auto_publish" field.
func IsAutoPublishGTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsAutoPublish), v))
	})
}

// IsAutoPublishLT applies the LT predicate on the "is_auto_publish" field.
func IsAutoPublishLT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsAutoPublish), v))
	})
}

// IsAutoPublishLTE applies the LTE predicate on the "is_auto_publish" field.
func IsAutoPublishLTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsAutoPublish), v))
	})
}

// ApplyCountEQ applies the EQ predicate on the "apply_count" field.
func ApplyCountEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplyCount), v))
	})
}

// ApplyCountNEQ applies the NEQ predicate on the "apply_count" field.
func ApplyCountNEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApplyCount), v))
	})
}

// ApplyCountIn applies the In predicate on the "apply_count" field.
func ApplyCountIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApplyCount), v...))
	})
}

// ApplyCountNotIn applies the NotIn predicate on the "apply_count" field.
func ApplyCountNotIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApplyCount), v...))
	})
}

// ApplyCountGT applies the GT predicate on the "apply_count" field.
func ApplyCountGT(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApplyCount), v))
	})
}

// ApplyCountGTE applies the GTE predicate on the "apply_count" field.
func ApplyCountGTE(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApplyCount), v))
	})
}

// ApplyCountLT applies the LT predicate on the "apply_count" field.
func ApplyCountLT(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApplyCount), v))
	})
}

// ApplyCountLTE applies the LTE predicate on the "apply_count" field.
func ApplyCountLTE(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApplyCount), v))
	})
}

// JoinCountEQ applies the EQ predicate on the "join_count" field.
func JoinCountEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinCount), v))
	})
}

// JoinCountNEQ applies the NEQ predicate on the "join_count" field.
func JoinCountNEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJoinCount), v))
	})
}

// JoinCountIn applies the In predicate on the "join_count" field.
func JoinCountIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJoinCount), v...))
	})
}

// JoinCountNotIn applies the NotIn predicate on the "join_count" field.
func JoinCountNotIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJoinCount), v...))
	})
}

// JoinCountGT applies the GT predicate on the "join_count" field.
func JoinCountGT(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJoinCount), v))
	})
}

// JoinCountGTE applies the GTE predicate on the "join_count" field.
func JoinCountGTE(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJoinCount), v))
	})
}

// JoinCountLT applies the LT predicate on the "join_count" field.
func JoinCountLT(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJoinCount), v))
	})
}

// JoinCountLTE applies the LTE predicate on the "join_count" field.
func JoinCountLTE(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJoinCount), v))
	})
}

// IsLimitJoinCountEQ applies the EQ predicate on the "is_limit_join_count" field.
func IsLimitJoinCountEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLimitJoinCount), v))
	})
}

// IsLimitJoinCountNEQ applies the NEQ predicate on the "is_limit_join_count" field.
func IsLimitJoinCountNEQ(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsLimitJoinCount), v))
	})
}

// IsLimitJoinCountIn applies the In predicate on the "is_limit_join_count" field.
func IsLimitJoinCountIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsLimitJoinCount), v...))
	})
}

// IsLimitJoinCountNotIn applies the NotIn predicate on the "is_limit_join_count" field.
func IsLimitJoinCountNotIn(vs ...uint8) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsLimitJoinCount), v...))
	})
}

// IsLimitJoinCountGT applies the GT predicate on the "is_limit_join_count" field.
func IsLimitJoinCountGT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsLimitJoinCount), v))
	})
}

// IsLimitJoinCountGTE applies the GTE predicate on the "is_limit_join_count" field.
func IsLimitJoinCountGTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsLimitJoinCount), v))
	})
}

// IsLimitJoinCountLT applies the LT predicate on the "is_limit_join_count" field.
func IsLimitJoinCountLT(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsLimitJoinCount), v))
	})
}

// IsLimitJoinCountLTE applies the LTE predicate on the "is_limit_join_count" field.
func IsLimitJoinCountLTE(v uint8) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsLimitJoinCount), v))
	})
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthday), v))
	})
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthday), v))
	})
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthday), v...))
	})
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthday), v...))
	})
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthday), v))
	})
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthday), v))
	})
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthday), v))
	})
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthday), v))
	})
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBirthday)))
	})
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBirthday)))
	})
}

// SignRemarkEQ applies the EQ predicate on the "sign_remark" field.
func SignRemarkEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignRemark), v))
	})
}

// SignRemarkNEQ applies the NEQ predicate on the "sign_remark" field.
func SignRemarkNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSignRemark), v))
	})
}

// SignRemarkIn applies the In predicate on the "sign_remark" field.
func SignRemarkIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSignRemark), v...))
	})
}

// SignRemarkNotIn applies the NotIn predicate on the "sign_remark" field.
func SignRemarkNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSignRemark), v...))
	})
}

// SignRemarkGT applies the GT predicate on the "sign_remark" field.
func SignRemarkGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSignRemark), v))
	})
}

// SignRemarkGTE applies the GTE predicate on the "sign_remark" field.
func SignRemarkGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSignRemark), v))
	})
}

// SignRemarkLT applies the LT predicate on the "sign_remark" field.
func SignRemarkLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSignRemark), v))
	})
}

// SignRemarkLTE applies the LTE predicate on the "sign_remark" field.
func SignRemarkLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSignRemark), v))
	})
}

// SignRemarkContains applies the Contains predicate on the "sign_remark" field.
func SignRemarkContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSignRemark), v))
	})
}

// SignRemarkHasPrefix applies the HasPrefix predicate on the "sign_remark" field.
func SignRemarkHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSignRemark), v))
	})
}

// SignRemarkHasSuffix applies the HasSuffix predicate on the "sign_remark" field.
func SignRemarkHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSignRemark), v))
	})
}

// SignRemarkIsNil applies the IsNil predicate on the "sign_remark" field.
func SignRemarkIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSignRemark)))
	})
}

// SignRemarkNotNil applies the NotNil predicate on the "sign_remark" field.
func SignRemarkNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSignRemark)))
	})
}

// SignRemarkEqualFold applies the EqualFold predicate on the "sign_remark" field.
func SignRemarkEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSignRemark), v))
	})
}

// SignRemarkContainsFold applies the ContainsFold predicate on the "sign_remark" field.
func SignRemarkContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSignRemark), v))
	})
}

// ActivityTypeIDEQ applies the EQ predicate on the "activity_type_id" field.
func ActivityTypeIDEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityTypeID), v))
	})
}

// ActivityTypeIDNEQ applies the NEQ predicate on the "activity_type_id" field.
func ActivityTypeIDNEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivityTypeID), v))
	})
}

// ActivityTypeIDIn applies the In predicate on the "activity_type_id" field.
func ActivityTypeIDIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivityTypeID), v...))
	})
}

// ActivityTypeIDNotIn applies the NotIn predicate on the "activity_type_id" field.
func ActivityTypeIDNotIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivityTypeID), v...))
	})
}

// ActivityTypeIDIsNil applies the IsNil predicate on the "activity_type_id" field.
func ActivityTypeIDIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActivityTypeID)))
	})
}

// ActivityTypeIDNotNil applies the NotNil predicate on the "activity_type_id" field.
func ActivityTypeIDNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActivityTypeID)))
	})
}

// CreatedAdminIDEQ applies the EQ predicate on the "created_admin_id" field.
func CreatedAdminIDEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAdminID), v))
	})
}

// CreatedAdminIDNEQ applies the NEQ predicate on the "created_admin_id" field.
func CreatedAdminIDNEQ(v int) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAdminID), v))
	})
}

// CreatedAdminIDIn applies the In predicate on the "created_admin_id" field.
func CreatedAdminIDIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAdminID), v...))
	})
}

// CreatedAdminIDNotIn applies the NotIn predicate on the "created_admin_id" field.
func CreatedAdminIDNotIn(vs ...int) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAdminID), v...))
	})
}

// CreatedAdminIDIsNil applies the IsNil predicate on the "created_admin_id" field.
func CreatedAdminIDIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAdminID)))
	})
}

// CreatedAdminIDNotNil applies the NotNil predicate on the "created_admin_id" field.
func CreatedAdminIDNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAdminID)))
	})
}

// HasActivityType applies the HasEdge predicate on the "activity_type" edge.
func HasActivityType() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActivityTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActivityTypeTable, ActivityTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivityTypeWith applies the HasEdge predicate on the "activity_type" edge with a given conditions (other predicates).
func HasActivityTypeWith(preds ...predicate.ActivityType) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActivityTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActivityTypeTable, ActivityTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApplyActivities applies the HasEdge predicate on the "apply_activities" edge.
func HasApplyActivities() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplyActivitiesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplyActivitiesTable, ApplyActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplyActivitiesWith applies the HasEdge predicate on the "apply_activities" edge with a given conditions (other predicates).
func HasApplyActivitiesWith(preds ...predicate.ActivityApplyInfo) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplyActivitiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplyActivitiesTable, ApplyActivitiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmin applies the HasEdge predicate on the "admin" edge.
func HasAdmin() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminWith applies the HasEdge predicate on the "admin" edge with a given conditions (other predicates).
func HasAdminWith(preds ...predicate.Admin) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Activity) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Activity) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Activity) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		p(s.Not())
	})
}

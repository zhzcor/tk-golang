// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tksection"
	"tkserver/internal/store/ent/tkuserquestionrecord"
	"tkserver/internal/store/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserQuestionRecordCreate is the builder for creating a TkUserQuestionRecord entity.
type TkUserQuestionRecordCreate struct {
	config
	mutation *TkUserQuestionRecordMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tuqrc *TkUserQuestionRecordCreate) SetUUID(s string) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetUUID(s)
	return tuqrc
}

// SetCreatedAt sets the "created_at" field.
func (tuqrc *TkUserQuestionRecordCreate) SetCreatedAt(t time.Time) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetCreatedAt(t)
	return tuqrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableCreatedAt(t *time.Time) *TkUserQuestionRecordCreate {
	if t != nil {
		tuqrc.SetCreatedAt(*t)
	}
	return tuqrc
}

// SetUpdatedAt sets the "updated_at" field.
func (tuqrc *TkUserQuestionRecordCreate) SetUpdatedAt(t time.Time) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetUpdatedAt(t)
	return tuqrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableUpdatedAt(t *time.Time) *TkUserQuestionRecordCreate {
	if t != nil {
		tuqrc.SetUpdatedAt(*t)
	}
	return tuqrc
}

// SetDeletedAt sets the "deleted_at" field.
func (tuqrc *TkUserQuestionRecordCreate) SetDeletedAt(t time.Time) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetDeletedAt(t)
	return tuqrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableDeletedAt(t *time.Time) *TkUserQuestionRecordCreate {
	if t != nil {
		tuqrc.SetDeletedAt(*t)
	}
	return tuqrc
}

// SetCorrectCount sets the "correct_count" field.
func (tuqrc *TkUserQuestionRecordCreate) SetCorrectCount(i int) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetCorrectCount(i)
	return tuqrc
}

// SetNillableCorrectCount sets the "correct_count" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableCorrectCount(i *int) *TkUserQuestionRecordCreate {
	if i != nil {
		tuqrc.SetCorrectCount(*i)
	}
	return tuqrc
}

// SetAnswerCount sets the "answer_count" field.
func (tuqrc *TkUserQuestionRecordCreate) SetAnswerCount(i int) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetAnswerCount(i)
	return tuqrc
}

// SetNillableAnswerCount sets the "answer_count" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableAnswerCount(i *int) *TkUserQuestionRecordCreate {
	if i != nil {
		tuqrc.SetAnswerCount(*i)
	}
	return tuqrc
}

// SetAnswer sets the "answer" field.
func (tuqrc *TkUserQuestionRecordCreate) SetAnswer(s string) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetAnswer(s)
	return tuqrc
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableAnswer(s *string) *TkUserQuestionRecordCreate {
	if s != nil {
		tuqrc.SetAnswer(*s)
	}
	return tuqrc
}

// SetIsRight sets the "is_right" field.
func (tuqrc *TkUserQuestionRecordCreate) SetIsRight(u uint8) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetIsRight(u)
	return tuqrc
}

// SetNillableIsRight sets the "is_right" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableIsRight(u *uint8) *TkUserQuestionRecordCreate {
	if u != nil {
		tuqrc.SetIsRight(*u)
	}
	return tuqrc
}

// SetExamQuestionType sets the "exam_question_type" field.
func (tuqrc *TkUserQuestionRecordCreate) SetExamQuestionType(u uint8) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetExamQuestionType(u)
	return tuqrc
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableExamQuestionType(u *uint8) *TkUserQuestionRecordCreate {
	if u != nil {
		tuqrc.SetExamQuestionType(*u)
	}
	return tuqrc
}

// SetQuestionType sets the "question_type" field.
func (tuqrc *TkUserQuestionRecordCreate) SetQuestionType(u uint8) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetQuestionType(u)
	return tuqrc
}

// SetNillableQuestionType sets the "question_type" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableQuestionType(u *uint8) *TkUserQuestionRecordCreate {
	if u != nil {
		tuqrc.SetQuestionType(*u)
	}
	return tuqrc
}

// SetUserID sets the "user_id" field.
func (tuqrc *TkUserQuestionRecordCreate) SetUserID(i int) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetUserID(i)
	return tuqrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableUserID(i *int) *TkUserQuestionRecordCreate {
	if i != nil {
		tuqrc.SetUserID(*i)
	}
	return tuqrc
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tuqrc *TkUserQuestionRecordCreate) SetQuestionBankID(i int) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetQuestionBankID(i)
	return tuqrc
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableQuestionBankID(i *int) *TkUserQuestionRecordCreate {
	if i != nil {
		tuqrc.SetQuestionBankID(*i)
	}
	return tuqrc
}

// SetQuestionID sets the "question_id" field.
func (tuqrc *TkUserQuestionRecordCreate) SetQuestionID(i int) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetQuestionID(i)
	return tuqrc
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableQuestionID(i *int) *TkUserQuestionRecordCreate {
	if i != nil {
		tuqrc.SetQuestionID(*i)
	}
	return tuqrc
}

// SetExamPaperID sets the "exam_paper_id" field.
func (tuqrc *TkUserQuestionRecordCreate) SetExamPaperID(i int) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetExamPaperID(i)
	return tuqrc
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableExamPaperID(i *int) *TkUserQuestionRecordCreate {
	if i != nil {
		tuqrc.SetExamPaperID(*i)
	}
	return tuqrc
}

// SetSectionID sets the "section_id" field.
func (tuqrc *TkUserQuestionRecordCreate) SetSectionID(i int) *TkUserQuestionRecordCreate {
	tuqrc.mutation.SetSectionID(i)
	return tuqrc
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (tuqrc *TkUserQuestionRecordCreate) SetNillableSectionID(i *int) *TkUserQuestionRecordCreate {
	if i != nil {
		tuqrc.SetSectionID(*i)
	}
	return tuqrc
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tuqrc *TkUserQuestionRecordCreate) SetQuestionBank(t *TkQuestionBank) *TkUserQuestionRecordCreate {
	return tuqrc.SetQuestionBankID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuqrc *TkUserQuestionRecordCreate) SetUser(u *User) *TkUserQuestionRecordCreate {
	return tuqrc.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tuqrc *TkUserQuestionRecordCreate) SetQuestion(t *TkQuestion) *TkUserQuestionRecordCreate {
	return tuqrc.SetQuestionID(t.ID)
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (tuqrc *TkUserQuestionRecordCreate) SetExamPaper(t *TkExamPaper) *TkUserQuestionRecordCreate {
	return tuqrc.SetExamPaperID(t.ID)
}

// SetSection sets the "section" edge to the TkSection entity.
func (tuqrc *TkUserQuestionRecordCreate) SetSection(t *TkSection) *TkUserQuestionRecordCreate {
	return tuqrc.SetSectionID(t.ID)
}

// Mutation returns the TkUserQuestionRecordMutation object of the builder.
func (tuqrc *TkUserQuestionRecordCreate) Mutation() *TkUserQuestionRecordMutation {
	return tuqrc.mutation
}

// Save creates the TkUserQuestionRecord in the database.
func (tuqrc *TkUserQuestionRecordCreate) Save(ctx context.Context) (*TkUserQuestionRecord, error) {
	var (
		err  error
		node *TkUserQuestionRecord
	)
	tuqrc.defaults()
	if len(tuqrc.hooks) == 0 {
		if err = tuqrc.check(); err != nil {
			return nil, err
		}
		node, err = tuqrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserQuestionRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuqrc.check(); err != nil {
				return nil, err
			}
			tuqrc.mutation = mutation
			node, err = tuqrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuqrc.hooks) - 1; i >= 0; i-- {
			mut = tuqrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuqrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tuqrc *TkUserQuestionRecordCreate) SaveX(ctx context.Context) *TkUserQuestionRecord {
	v, err := tuqrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tuqrc *TkUserQuestionRecordCreate) defaults() {
	if _, ok := tuqrc.mutation.CreatedAt(); !ok {
		v := tkuserquestionrecord.DefaultCreatedAt()
		tuqrc.mutation.SetCreatedAt(v)
	}
	if _, ok := tuqrc.mutation.UpdatedAt(); !ok {
		v := tkuserquestionrecord.DefaultUpdatedAt()
		tuqrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tuqrc.mutation.CorrectCount(); !ok {
		v := tkuserquestionrecord.DefaultCorrectCount
		tuqrc.mutation.SetCorrectCount(v)
	}
	if _, ok := tuqrc.mutation.AnswerCount(); !ok {
		v := tkuserquestionrecord.DefaultAnswerCount
		tuqrc.mutation.SetAnswerCount(v)
	}
	if _, ok := tuqrc.mutation.Answer(); !ok {
		v := tkuserquestionrecord.DefaultAnswer
		tuqrc.mutation.SetAnswer(v)
	}
	if _, ok := tuqrc.mutation.IsRight(); !ok {
		v := tkuserquestionrecord.DefaultIsRight
		tuqrc.mutation.SetIsRight(v)
	}
	if _, ok := tuqrc.mutation.ExamQuestionType(); !ok {
		v := tkuserquestionrecord.DefaultExamQuestionType
		tuqrc.mutation.SetExamQuestionType(v)
	}
	if _, ok := tuqrc.mutation.QuestionType(); !ok {
		v := tkuserquestionrecord.DefaultQuestionType
		tuqrc.mutation.SetQuestionType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuqrc *TkUserQuestionRecordCreate) check() error {
	if _, ok := tuqrc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tuqrc.mutation.CorrectCount(); !ok {
		return &ValidationError{Name: "correct_count", err: errors.New("ent: missing required field \"correct_count\"")}
	}
	if _, ok := tuqrc.mutation.AnswerCount(); !ok {
		return &ValidationError{Name: "answer_count", err: errors.New("ent: missing required field \"answer_count\"")}
	}
	if _, ok := tuqrc.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New("ent: missing required field \"answer\"")}
	}
	if _, ok := tuqrc.mutation.IsRight(); !ok {
		return &ValidationError{Name: "is_right", err: errors.New("ent: missing required field \"is_right\"")}
	}
	if _, ok := tuqrc.mutation.ExamQuestionType(); !ok {
		return &ValidationError{Name: "exam_question_type", err: errors.New("ent: missing required field \"exam_question_type\"")}
	}
	if _, ok := tuqrc.mutation.QuestionType(); !ok {
		return &ValidationError{Name: "question_type", err: errors.New("ent: missing required field \"question_type\"")}
	}
	return nil
}

func (tuqrc *TkUserQuestionRecordCreate) sqlSave(ctx context.Context) (*TkUserQuestionRecord, error) {
	_node, _spec := tuqrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuqrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tuqrc *TkUserQuestionRecordCreate) createSpec() (*TkUserQuestionRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &TkUserQuestionRecord{config: tuqrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkuserquestionrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserquestionrecord.FieldID,
			},
		}
	)
	if value, ok := tuqrc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserquestionrecord.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tuqrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionrecord.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tuqrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionrecord.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tuqrc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionrecord.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tuqrc.mutation.CorrectCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldCorrectCount,
		})
		_node.CorrectCount = value
	}
	if value, ok := tuqrc.mutation.AnswerCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionrecord.FieldAnswerCount,
		})
		_node.AnswerCount = value
	}
	if value, ok := tuqrc.mutation.Answer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserquestionrecord.FieldAnswer,
		})
		_node.Answer = value
	}
	if value, ok := tuqrc.mutation.IsRight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldIsRight,
		})
		_node.IsRight = value
	}
	if value, ok := tuqrc.mutation.ExamQuestionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldExamQuestionType,
		})
		_node.ExamQuestionType = value
	}
	if value, ok := tuqrc.mutation.QuestionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkuserquestionrecord.FieldQuestionType,
		})
		_node.QuestionType = value
	}
	if nodes := tuqrc.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionBankTable,
			Columns: []string{tkuserquestionrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionBankID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuqrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.UserTable,
			Columns: []string{tkuserquestionrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuqrc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.QuestionTable,
			Columns: []string{tkuserquestionrecord.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuqrc.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.ExamPaperTable,
			Columns: []string{tkuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamPaperID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuqrc.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionrecord.SectionTable,
			Columns: []string{tkuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkUserQuestionRecordCreateBulk is the builder for creating many TkUserQuestionRecord entities in bulk.
type TkUserQuestionRecordCreateBulk struct {
	config
	builders []*TkUserQuestionRecordCreate
}

// Save creates the TkUserQuestionRecord entities in the database.
func (tuqrcb *TkUserQuestionRecordCreateBulk) Save(ctx context.Context) ([]*TkUserQuestionRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tuqrcb.builders))
	nodes := make([]*TkUserQuestionRecord, len(tuqrcb.builders))
	mutators := make([]Mutator, len(tuqrcb.builders))
	for i := range tuqrcb.builders {
		func(i int, root context.Context) {
			builder := tuqrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkUserQuestionRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tuqrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tuqrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tuqrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tuqrcb *TkUserQuestionRecordCreateBulk) SaveX(ctx context.Context) []*TkUserQuestionRecord {
	v, err := tuqrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/activity"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/adminloginlog"
	"tkserver/internal/store/ent/adminoperationlog"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/message"
	"tkserver/internal/store/ent/role"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkquestionerrorfeedback"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminCreate is the builder for creating a Admin entity.
type AdminCreate struct {
	config
	mutation *AdminMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (ac *AdminCreate) SetUUID(s string) *AdminCreate {
	ac.mutation.SetUUID(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AdminCreate) SetCreatedAt(t time.Time) *AdminCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AdminCreate) SetNillableCreatedAt(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AdminCreate) SetUpdatedAt(t time.Time) *AdminCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AdminCreate) SetNillableUpdatedAt(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AdminCreate) SetDeletedAt(t time.Time) *AdminCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AdminCreate) SetNillableDeletedAt(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetPassword sets the "password" field.
func (ac *AdminCreate) SetPassword(s string) *AdminCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetSalt sets the "salt" field.
func (ac *AdminCreate) SetSalt(s string) *AdminCreate {
	ac.mutation.SetSalt(s)
	return ac
}

// SetBossAdminID sets the "boss_admin_id" field.
func (ac *AdminCreate) SetBossAdminID(i int) *AdminCreate {
	ac.mutation.SetBossAdminID(i)
	return ac
}

// SetNillableBossAdminID sets the "boss_admin_id" field if the given value is not nil.
func (ac *AdminCreate) SetNillableBossAdminID(i *int) *AdminCreate {
	if i != nil {
		ac.SetBossAdminID(*i)
	}
	return ac
}

// SetRealName sets the "real_name" field.
func (ac *AdminCreate) SetRealName(s string) *AdminCreate {
	ac.mutation.SetRealName(s)
	return ac
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (ac *AdminCreate) SetNillableRealName(s *string) *AdminCreate {
	if s != nil {
		ac.SetRealName(*s)
	}
	return ac
}

// SetEmail sets the "email" field.
func (ac *AdminCreate) SetEmail(s string) *AdminCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ac *AdminCreate) SetNillableEmail(s *string) *AdminCreate {
	if s != nil {
		ac.SetEmail(*s)
	}
	return ac
}

// SetPhone sets the "phone" field.
func (ac *AdminCreate) SetPhone(s string) *AdminCreate {
	ac.mutation.SetPhone(s)
	return ac
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ac *AdminCreate) SetNillablePhone(s *string) *AdminCreate {
	if s != nil {
		ac.SetPhone(*s)
	}
	return ac
}

// SetThirdOpenid sets the "third_openid" field.
func (ac *AdminCreate) SetThirdOpenid(s string) *AdminCreate {
	ac.mutation.SetThirdOpenid(s)
	return ac
}

// SetNillableThirdOpenid sets the "third_openid" field if the given value is not nil.
func (ac *AdminCreate) SetNillableThirdOpenid(s *string) *AdminCreate {
	if s != nil {
		ac.SetThirdOpenid(*s)
	}
	return ac
}

// SetPlatform sets the "platform" field.
func (ac *AdminCreate) SetPlatform(u uint8) *AdminCreate {
	ac.mutation.SetPlatform(u)
	return ac
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (ac *AdminCreate) SetNillablePlatform(u *uint8) *AdminCreate {
	if u != nil {
		ac.SetPlatform(*u)
	}
	return ac
}

// SetIsActive sets the "is_active" field.
func (ac *AdminCreate) SetIsActive(u uint8) *AdminCreate {
	ac.mutation.SetIsActive(u)
	return ac
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ac *AdminCreate) SetNillableIsActive(u *uint8) *AdminCreate {
	if u != nil {
		ac.SetIsActive(*u)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AdminCreate) SetStatus(u uint8) *AdminCreate {
	ac.mutation.SetStatus(u)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AdminCreate) SetNillableStatus(u *uint8) *AdminCreate {
	if u != nil {
		ac.SetStatus(*u)
	}
	return ac
}

// SetAdminAvatarID sets the "admin_avatar_id" field.
func (ac *AdminCreate) SetAdminAvatarID(i int) *AdminCreate {
	ac.mutation.SetAdminAvatarID(i)
	return ac
}

// SetNillableAdminAvatarID sets the "admin_avatar_id" field if the given value is not nil.
func (ac *AdminCreate) SetNillableAdminAvatarID(i *int) *AdminCreate {
	if i != nil {
		ac.SetAdminAvatarID(*i)
	}
	return ac
}

// SetRemark sets the "Remark" field.
func (ac *AdminCreate) SetRemark(s string) *AdminCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "Remark" field if the given value is not nil.
func (ac *AdminCreate) SetNillableRemark(s *string) *AdminCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// AddAdminLoginLogIDs adds the "admin_login_logs" edge to the AdminLoginLog entity by IDs.
func (ac *AdminCreate) AddAdminLoginLogIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminLoginLogIDs(ids...)
	return ac
}

// AddAdminLoginLogs adds the "admin_login_logs" edges to the AdminLoginLog entity.
func (ac *AdminCreate) AddAdminLoginLogs(a ...*AdminLoginLog) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAdminLoginLogIDs(ids...)
}

// AddOperationAdminLogIDs adds the "operation_admin_logs" edge to the AdminOperationLog entity by IDs.
func (ac *AdminCreate) AddOperationAdminLogIDs(ids ...int) *AdminCreate {
	ac.mutation.AddOperationAdminLogIDs(ids...)
	return ac
}

// AddOperationAdminLogs adds the "operation_admin_logs" edges to the AdminOperationLog entity.
func (ac *AdminCreate) AddOperationAdminLogs(a ...*AdminOperationLog) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddOperationAdminLogIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (ac *AdminCreate) AddRoleIDs(ids ...int) *AdminCreate {
	ac.mutation.AddRoleIDs(ids...)
	return ac
}

// AddRoles adds the "roles" edges to the Role entity.
func (ac *AdminCreate) AddRoles(r ...*Role) *AdminCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRoleIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (ac *AdminCreate) AddActivityIDs(ids ...int) *AdminCreate {
	ac.mutation.AddActivityIDs(ids...)
	return ac
}

// AddActivities adds the "activities" edges to the Activity entity.
func (ac *AdminCreate) AddActivities(a ...*Activity) *AdminCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddActivityIDs(ids...)
}

// AddMessageCreatedAdminIDIDs adds the "message_created_admin_id" edge to the Message entity by IDs.
func (ac *AdminCreate) AddMessageCreatedAdminIDIDs(ids ...int) *AdminCreate {
	ac.mutation.AddMessageCreatedAdminIDIDs(ids...)
	return ac
}

// AddMessageCreatedAdminID adds the "message_created_admin_id" edges to the Message entity.
func (ac *AdminCreate) AddMessageCreatedAdminID(m ...*Message) *AdminCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ac.AddMessageCreatedAdminIDIDs(ids...)
}

// AddAdminQuestionBankIDs adds the "admin_question_banks" edge to the TkQuestionBank entity by IDs.
func (ac *AdminCreate) AddAdminQuestionBankIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminQuestionBankIDs(ids...)
	return ac
}

// AddAdminQuestionBanks adds the "admin_question_banks" edges to the TkQuestionBank entity.
func (ac *AdminCreate) AddAdminQuestionBanks(t ...*TkQuestionBank) *AdminCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddAdminQuestionBankIDs(ids...)
}

// AddAdminQuestionIDs adds the "admin_Questions" edge to the TkQuestion entity by IDs.
func (ac *AdminCreate) AddAdminQuestionIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminQuestionIDs(ids...)
	return ac
}

// AddAdminQuestions adds the "admin_Questions" edges to the TkQuestion entity.
func (ac *AdminCreate) AddAdminQuestions(t ...*TkQuestion) *AdminCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddAdminQuestionIDs(ids...)
}

// AddAdminExamPaperIDs adds the "admin_exam_papers" edge to the TkExamPaper entity by IDs.
func (ac *AdminCreate) AddAdminExamPaperIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminExamPaperIDs(ids...)
	return ac
}

// AddAdminExamPapers adds the "admin_exam_papers" edges to the TkExamPaper entity.
func (ac *AdminCreate) AddAdminExamPapers(t ...*TkExamPaper) *AdminCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddAdminExamPaperIDs(ids...)
}

// AddAdminErrorFeedbackIDs adds the "admin_error_feedbacks" edge to the TkQuestionErrorFeedback entity by IDs.
func (ac *AdminCreate) AddAdminErrorFeedbackIDs(ids ...int) *AdminCreate {
	ac.mutation.AddAdminErrorFeedbackIDs(ids...)
	return ac
}

// AddAdminErrorFeedbacks adds the "admin_error_feedbacks" edges to the TkQuestionErrorFeedback entity.
func (ac *AdminCreate) AddAdminErrorFeedbacks(t ...*TkQuestionErrorFeedback) *AdminCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddAdminErrorFeedbackIDs(ids...)
}

// AddCourseIDs adds the "course" edge to the KcCourse entity by IDs.
func (ac *AdminCreate) AddCourseIDs(ids ...int) *AdminCreate {
	ac.mutation.AddCourseIDs(ids...)
	return ac
}

// AddCourse adds the "course" edges to the KcCourse entity.
func (ac *AdminCreate) AddCourse(k ...*KcCourse) *AdminCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ac.AddCourseIDs(ids...)
}

// AddClassAdminIDs adds the "class_admin" edge to the KcClass entity by IDs.
func (ac *AdminCreate) AddClassAdminIDs(ids ...int) *AdminCreate {
	ac.mutation.AddClassAdminIDs(ids...)
	return ac
}

// AddClassAdmin adds the "class_admin" edges to the KcClass entity.
func (ac *AdminCreate) AddClassAdmin(k ...*KcClass) *AdminCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ac.AddClassAdminIDs(ids...)
}

// SetAdminAttachmentsID sets the "admin_attachments" edge to the Attachment entity by ID.
func (ac *AdminCreate) SetAdminAttachmentsID(id int) *AdminCreate {
	ac.mutation.SetAdminAttachmentsID(id)
	return ac
}

// SetNillableAdminAttachmentsID sets the "admin_attachments" edge to the Attachment entity by ID if the given value is not nil.
func (ac *AdminCreate) SetNillableAdminAttachmentsID(id *int) *AdminCreate {
	if id != nil {
		ac = ac.SetAdminAttachmentsID(*id)
	}
	return ac
}

// SetAdminAttachments sets the "admin_attachments" edge to the Attachment entity.
func (ac *AdminCreate) SetAdminAttachments(a *Attachment) *AdminCreate {
	return ac.SetAdminAttachmentsID(a.ID)
}

// Mutation returns the AdminMutation object of the builder.
func (ac *AdminCreate) Mutation() *AdminMutation {
	return ac.mutation
}

// Save creates the Admin in the database.
func (ac *AdminCreate) Save(ctx context.Context) (*Admin, error) {
	var (
		err  error
		node *Admin
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AdminCreate) SaveX(ctx context.Context) *Admin {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *AdminCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := admin.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := admin.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.BossAdminID(); !ok {
		v := admin.DefaultBossAdminID
		ac.mutation.SetBossAdminID(v)
	}
	if _, ok := ac.mutation.RealName(); !ok {
		v := admin.DefaultRealName
		ac.mutation.SetRealName(v)
	}
	if _, ok := ac.mutation.Email(); !ok {
		v := admin.DefaultEmail
		ac.mutation.SetEmail(v)
	}
	if _, ok := ac.mutation.Phone(); !ok {
		v := admin.DefaultPhone
		ac.mutation.SetPhone(v)
	}
	if _, ok := ac.mutation.ThirdOpenid(); !ok {
		v := admin.DefaultThirdOpenid
		ac.mutation.SetThirdOpenid(v)
	}
	if _, ok := ac.mutation.Platform(); !ok {
		v := admin.DefaultPlatform
		ac.mutation.SetPlatform(v)
	}
	if _, ok := ac.mutation.IsActive(); !ok {
		v := admin.DefaultIsActive
		ac.mutation.SetIsActive(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := admin.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.Remark(); !ok {
		v := admin.DefaultRemark
		ac.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AdminCreate) check() error {
	if _, ok := ac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := ac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New("ent: missing required field \"password\"")}
	}
	if _, ok := ac.mutation.Salt(); !ok {
		return &ValidationError{Name: "salt", err: errors.New("ent: missing required field \"salt\"")}
	}
	if _, ok := ac.mutation.BossAdminID(); !ok {
		return &ValidationError{Name: "boss_admin_id", err: errors.New("ent: missing required field \"boss_admin_id\"")}
	}
	if _, ok := ac.mutation.RealName(); !ok {
		return &ValidationError{Name: "real_name", err: errors.New("ent: missing required field \"real_name\"")}
	}
	if _, ok := ac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if _, ok := ac.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New("ent: missing required field \"phone\"")}
	}
	if _, ok := ac.mutation.ThirdOpenid(); !ok {
		return &ValidationError{Name: "third_openid", err: errors.New("ent: missing required field \"third_openid\"")}
	}
	if _, ok := ac.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New("ent: missing required field \"platform\"")}
	}
	if _, ok := ac.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New("ent: missing required field \"is_active\"")}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := ac.mutation.Remark(); !ok {
		return &ValidationError{Name: "Remark", err: errors.New("ent: missing required field \"Remark\"")}
	}
	return nil
}

func (ac *AdminCreate) sqlSave(ctx context.Context) (*Admin, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AdminCreate) createSpec() (*Admin, *sqlgraph.CreateSpec) {
	var (
		_node = &Admin{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: admin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admin.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admin.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admin.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admin.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := ac.mutation.Salt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldSalt,
		})
		_node.Salt = value
	}
	if value, ok := ac.mutation.BossAdminID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldBossAdminID,
		})
		_node.BossAdminID = value
	}
	if value, ok := ac.mutation.RealName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldRealName,
		})
		_node.RealName = value
	}
	if value, ok := ac.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := ac.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := ac.mutation.ThirdOpenid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldThirdOpenid,
		})
		_node.ThirdOpenid = value
	}
	if value, ok := ac.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldPlatform,
		})
		_node.Platform = value
	}
	if value, ok := ac.mutation.IsActive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldIsActive,
		})
		_node.IsActive = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: admin.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldRemark,
		})
		_node.Remark = value
	}
	if nodes := ac.mutation.AdminLoginLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminLoginLogsTable,
			Columns: []string{admin.AdminLoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OperationAdminLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.OperationAdminLogsTable,
			Columns: []string{admin.OperationAdminLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminoperationlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ActivitiesTable,
			Columns: []string{admin.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MessageCreatedAdminIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.MessageCreatedAdminIDTable,
			Columns: []string{admin.MessageCreatedAdminIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionBanksTable,
			Columns: []string{admin.AdminQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminQuestionsTable,
			Columns: []string{admin.AdminQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminExamPapersTable,
			Columns: []string{admin.AdminExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminErrorFeedbacksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.AdminErrorFeedbacksTable,
			Columns: []string{admin.AdminErrorFeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionerrorfeedback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CourseTable,
			Columns: []string{admin.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ClassAdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.ClassAdminTable,
			Columns: []string{admin.ClassAdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AdminAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   admin.AdminAttachmentsTable,
			Columns: []string{admin.AdminAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AdminAvatarID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminCreateBulk is the builder for creating many Admin entities in bulk.
type AdminCreateBulk struct {
	config
	builders []*AdminCreate
}

// Save creates the Admin entities in the database.
func (acb *AdminCreateBulk) Save(ctx context.Context) ([]*Admin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Admin, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AdminCreateBulk) SaveX(ctx context.Context) []*Admin {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

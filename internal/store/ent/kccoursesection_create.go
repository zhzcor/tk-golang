// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/kccoursechapter"
	"gserver/internal/store/ent/kccoursesection"
	"gserver/internal/store/ent/kccoursesmallcategory"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseSectionCreate is the builder for creating a KcCourseSection entity.
type KcCourseSectionCreate struct {
	config
	mutation *KcCourseSectionMutation
	hooks    []Hook
}

// SetCourseChapterID sets the "course_chapter_id" field.
func (kcsc *KcCourseSectionCreate) SetCourseChapterID(i int) *KcCourseSectionCreate {
	kcsc.mutation.SetCourseChapterID(i)
	return kcsc
}

// SetNillableCourseChapterID sets the "course_chapter_id" field if the given value is not nil.
func (kcsc *KcCourseSectionCreate) SetNillableCourseChapterID(i *int) *KcCourseSectionCreate {
	if i != nil {
		kcsc.SetCourseChapterID(*i)
	}
	return kcsc
}

// SetTitle sets the "title" field.
func (kcsc *KcCourseSectionCreate) SetTitle(s string) *KcCourseSectionCreate {
	kcsc.mutation.SetTitle(s)
	return kcsc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kcsc *KcCourseSectionCreate) SetNillableTitle(s *string) *KcCourseSectionCreate {
	if s != nil {
		kcsc.SetTitle(*s)
	}
	return kcsc
}

// SetChapterID sets the "chapter" edge to the KcCourseChapter entity by ID.
func (kcsc *KcCourseSectionCreate) SetChapterID(id int) *KcCourseSectionCreate {
	kcsc.mutation.SetChapterID(id)
	return kcsc
}

// SetNillableChapterID sets the "chapter" edge to the KcCourseChapter entity by ID if the given value is not nil.
func (kcsc *KcCourseSectionCreate) SetNillableChapterID(id *int) *KcCourseSectionCreate {
	if id != nil {
		kcsc = kcsc.SetChapterID(*id)
	}
	return kcsc
}

// SetChapter sets the "chapter" edge to the KcCourseChapter entity.
func (kcsc *KcCourseSectionCreate) SetChapter(k *KcCourseChapter) *KcCourseSectionCreate {
	return kcsc.SetChapterID(k.ID)
}

// AddCourseSmallSectionIDs adds the "course_small_sections" edge to the KcCourseSmallCategory entity by IDs.
func (kcsc *KcCourseSectionCreate) AddCourseSmallSectionIDs(ids ...int) *KcCourseSectionCreate {
	kcsc.mutation.AddCourseSmallSectionIDs(ids...)
	return kcsc
}

// AddCourseSmallSections adds the "course_small_sections" edges to the KcCourseSmallCategory entity.
func (kcsc *KcCourseSectionCreate) AddCourseSmallSections(k ...*KcCourseSmallCategory) *KcCourseSectionCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcsc.AddCourseSmallSectionIDs(ids...)
}

// Mutation returns the KcCourseSectionMutation object of the builder.
func (kcsc *KcCourseSectionCreate) Mutation() *KcCourseSectionMutation {
	return kcsc.mutation
}

// Save creates the KcCourseSection in the database.
func (kcsc *KcCourseSectionCreate) Save(ctx context.Context) (*KcCourseSection, error) {
	var (
		err  error
		node *KcCourseSection
	)
	kcsc.defaults()
	if len(kcsc.hooks) == 0 {
		if err = kcsc.check(); err != nil {
			return nil, err
		}
		node, err = kcsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcsc.check(); err != nil {
				return nil, err
			}
			kcsc.mutation = mutation
			node, err = kcsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcsc.hooks) - 1; i >= 0; i-- {
			mut = kcsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kcsc *KcCourseSectionCreate) SaveX(ctx context.Context) *KcCourseSection {
	v, err := kcsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (kcsc *KcCourseSectionCreate) defaults() {
	if _, ok := kcsc.mutation.Title(); !ok {
		v := kccoursesection.DefaultTitle
		kcsc.mutation.SetTitle(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcsc *KcCourseSectionCreate) check() error {
	if _, ok := kcsc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New("ent: missing required field \"title\"")}
	}
	return nil
}

func (kcsc *KcCourseSectionCreate) sqlSave(ctx context.Context) (*KcCourseSection, error) {
	_node, _spec := kcsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kcsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (kcsc *KcCourseSectionCreate) createSpec() (*KcCourseSection, *sqlgraph.CreateSpec) {
	var (
		_node = &KcCourseSection{config: kcsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kccoursesection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursesection.FieldID,
			},
		}
	)
	if value, ok := kcsc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesection.FieldTitle,
		})
		_node.Title = value
	}
	if nodes := kcsc.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesection.ChapterTable,
			Columns: []string{kccoursesection.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseChapterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kcsc.mutation.CourseSmallSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesection.CourseSmallSectionsTable,
			Columns: []string{kccoursesection.CourseSmallSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KcCourseSectionCreateBulk is the builder for creating many KcCourseSection entities in bulk.
type KcCourseSectionCreateBulk struct {
	config
	builders []*KcCourseSectionCreate
}

// Save creates the KcCourseSection entities in the database.
func (kcscb *KcCourseSectionCreateBulk) Save(ctx context.Context) ([]*KcCourseSection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcscb.builders))
	nodes := make([]*KcCourseSection, len(kcscb.builders))
	mutators := make([]Mutator, len(kcscb.builders))
	for i := range kcscb.builders {
		func(i int, root context.Context) {
			builder := kcscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KcCourseSectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcscb *KcCourseSectionCreateBulk) SaveX(ctx context.Context) []*KcCourseSection {
	v, err := kcscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursechapter"
	"tkserver/internal/store/ent/kccoursesection"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kcsmallcategoryattachment"
	"tkserver/internal/store/ent/kcsmallcategoryexampaper"
	"tkserver/internal/store/ent/kcsmallcategoryquestion"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/usercourseappraise"
	"tkserver/internal/store/ent/videorecord"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseSmallCategoryUpdate is the builder for updating KcCourseSmallCategory entities.
type KcCourseSmallCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *KcCourseSmallCategoryMutation
}

// Where adds a new predicate for the KcCourseSmallCategoryUpdate builder.
func (kcscu *KcCourseSmallCategoryUpdate) Where(ps ...predicate.KcCourseSmallCategory) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.predicates = append(kcscu.mutation.predicates, ps...)
	return kcscu
}

// SetUUID sets the "uuid" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetUUID(s string) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.SetUUID(s)
	return kcscu
}

// SetUpdatedAt sets the "updated_at" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetUpdatedAt(t time.Time) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.SetUpdatedAt(t)
	return kcscu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearUpdatedAt() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearUpdatedAt()
	return kcscu
}

// SetDeletedAt sets the "deleted_at" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetDeletedAt(t time.Time) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.SetDeletedAt(t)
	return kcscu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableDeletedAt(t *time.Time) *KcCourseSmallCategoryUpdate {
	if t != nil {
		kcscu.SetDeletedAt(*t)
	}
	return kcscu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearDeletedAt() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearDeletedAt()
	return kcscu
}

// SetSmallName sets the "small_name" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetSmallName(s string) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.SetSmallName(s)
	return kcscu
}

// SetNillableSmallName sets the "small_name" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableSmallName(s *string) *KcCourseSmallCategoryUpdate {
	if s != nil {
		kcscu.SetSmallName(*s)
	}
	return kcscu
}

// SetViewingTime sets the "viewing_time" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetViewingTime(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetViewingTime()
	kcscu.mutation.SetViewingTime(i)
	return kcscu
}

// SetNillableViewingTime sets the "viewing_time" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableViewingTime(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetViewingTime(*i)
	}
	return kcscu
}

// AddViewingTime adds i to the "viewing_time" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddViewingTime(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddViewingTime(i)
	return kcscu
}

// SetFinishType sets the "finish_type" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetFinishType(u uint8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetFinishType()
	kcscu.mutation.SetFinishType(u)
	return kcscu
}

// SetNillableFinishType sets the "finish_type" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableFinishType(u *uint8) *KcCourseSmallCategoryUpdate {
	if u != nil {
		kcscu.SetFinishType(*u)
	}
	return kcscu
}

// AddFinishType adds u to the "finish_type" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddFinishType(u uint8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddFinishType(u)
	return kcscu
}

// SetTeachType sets the "teach_type" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetTeachType(u uint8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetTeachType()
	kcscu.mutation.SetTeachType(u)
	return kcscu
}

// SetNillableTeachType sets the "teach_type" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableTeachType(u *uint8) *KcCourseSmallCategoryUpdate {
	if u != nil {
		kcscu.SetTeachType(*u)
	}
	return kcscu
}

// AddTeachType adds u to the "teach_type" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddTeachType(u uint8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddTeachType(u)
	return kcscu
}

// SetType sets the "type" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetType(u uint8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetType()
	kcscu.mutation.SetType(u)
	return kcscu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableType(u *uint8) *KcCourseSmallCategoryUpdate {
	if u != nil {
		kcscu.SetType(*u)
	}
	return kcscu
}

// AddType adds u to the "type" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddType(u uint8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddType(u)
	return kcscu
}

// SetLiveSmallStart sets the "live_small_start" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetLiveSmallStart(t time.Time) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.SetLiveSmallStart(t)
	return kcscu
}

// SetNillableLiveSmallStart sets the "live_small_start" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableLiveSmallStart(t *time.Time) *KcCourseSmallCategoryUpdate {
	if t != nil {
		kcscu.SetLiveSmallStart(*t)
	}
	return kcscu
}

// ClearLiveSmallStart clears the value of the "live_small_start" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearLiveSmallStart() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearLiveSmallStart()
	return kcscu
}

// SetLiveSmallStatus sets the "live_small_status" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetLiveSmallStatus(i int8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetLiveSmallStatus()
	kcscu.mutation.SetLiveSmallStatus(i)
	return kcscu
}

// SetNillableLiveSmallStatus sets the "live_small_status" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableLiveSmallStatus(i *int8) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetLiveSmallStatus(*i)
	}
	return kcscu
}

// AddLiveSmallStatus adds i to the "live_small_status" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddLiveSmallStatus(i int8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddLiveSmallStatus(i)
	return kcscu
}

// SetLiveRoomID sets the "live_room_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetLiveRoomID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetLiveRoomID()
	kcscu.mutation.SetLiveRoomID(i)
	return kcscu
}

// SetNillableLiveRoomID sets the "live_room_id" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableLiveRoomID(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetLiveRoomID(*i)
	}
	return kcscu
}

// AddLiveRoomID adds i to the "live_room_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddLiveRoomID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddLiveRoomID(i)
	return kcscu
}

// ClearLiveRoomID clears the value of the "live_room_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearLiveRoomID() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearLiveRoomID()
	return kcscu
}

// SetBackVideoID sets the "back_video_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetBackVideoID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetBackVideoID()
	kcscu.mutation.SetBackVideoID(i)
	return kcscu
}

// SetNillableBackVideoID sets the "back_video_id" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableBackVideoID(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetBackVideoID(*i)
	}
	return kcscu
}

// AddBackVideoID adds i to the "back_video_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddBackVideoID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddBackVideoID(i)
	return kcscu
}

// ClearBackVideoID clears the value of the "back_video_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearBackVideoID() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearBackVideoID()
	return kcscu
}

// SetFalseVideoID sets the "false_video_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetFalseVideoID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetFalseVideoID()
	kcscu.mutation.SetFalseVideoID(i)
	return kcscu
}

// SetNillableFalseVideoID sets the "false_video_id" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableFalseVideoID(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetFalseVideoID(*i)
	}
	return kcscu
}

// AddFalseVideoID adds i to the "false_video_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddFalseVideoID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddFalseVideoID(i)
	return kcscu
}

// ClearFalseVideoID clears the value of the "false_video_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearFalseVideoID() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearFalseVideoID()
	return kcscu
}

// SetOrderVideoID sets the "order_video_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetOrderVideoID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetOrderVideoID()
	kcscu.mutation.SetOrderVideoID(i)
	return kcscu
}

// SetNillableOrderVideoID sets the "order_video_id" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableOrderVideoID(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetOrderVideoID(*i)
	}
	return kcscu
}

// AddOrderVideoID adds i to the "order_video_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddOrderVideoID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddOrderVideoID(i)
	return kcscu
}

// ClearOrderVideoID clears the value of the "order_video_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearOrderVideoID() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearOrderVideoID()
	return kcscu
}

// SetOrderVideoAttachID sets the "order_video_attach_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetOrderVideoAttachID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetOrderVideoAttachID()
	kcscu.mutation.SetOrderVideoAttachID(i)
	return kcscu
}

// SetNillableOrderVideoAttachID sets the "order_video_attach_id" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableOrderVideoAttachID(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetOrderVideoAttachID(*i)
	}
	return kcscu
}

// ClearOrderVideoAttachID clears the value of the "order_video_attach_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearOrderVideoAttachID() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearOrderVideoAttachID()
	return kcscu
}

// SetLiveSmallTime sets the "live_small_time" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetLiveSmallTime(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetLiveSmallTime()
	kcscu.mutation.SetLiveSmallTime(i)
	return kcscu
}

// SetNillableLiveSmallTime sets the "live_small_time" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableLiveSmallTime(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetLiveSmallTime(*i)
	}
	return kcscu
}

// AddLiveSmallTime adds i to the "live_small_time" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddLiveSmallTime(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddLiveSmallTime(i)
	return kcscu
}

// SetPushStatus sets the "push_status" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetPushStatus(u uint8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetPushStatus()
	kcscu.mutation.SetPushStatus(u)
	return kcscu
}

// SetNillablePushStatus sets the "push_status" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillablePushStatus(u *uint8) *KcCourseSmallCategoryUpdate {
	if u != nil {
		kcscu.SetPushStatus(*u)
	}
	return kcscu
}

// AddPushStatus adds u to the "push_status" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddPushStatus(u uint8) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddPushStatus(u)
	return kcscu
}

// SetLiveSmallRemark sets the "live_small_remark" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetLiveSmallRemark(s string) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.SetLiveSmallRemark(s)
	return kcscu
}

// SetNillableLiveSmallRemark sets the "live_small_remark" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableLiveSmallRemark(s *string) *KcCourseSmallCategoryUpdate {
	if s != nil {
		kcscu.SetLiveSmallRemark(*s)
	}
	return kcscu
}

// SetCoursewareAttachID sets the "courseware_attach_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetCoursewareAttachID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetCoursewareAttachID()
	kcscu.mutation.SetCoursewareAttachID(i)
	return kcscu
}

// SetNillableCoursewareAttachID sets the "courseware_attach_id" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableCoursewareAttachID(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetCoursewareAttachID(*i)
	}
	return kcscu
}

// ClearCoursewareAttachID clears the value of the "courseware_attach_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearCoursewareAttachID() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearCoursewareAttachID()
	return kcscu
}

// SetCoursewareName sets the "courseware_name" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetCoursewareName(s string) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.SetCoursewareName(s)
	return kcscu
}

// SetNillableCoursewareName sets the "courseware_name" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableCoursewareName(s *string) *KcCourseSmallCategoryUpdate {
	if s != nil {
		kcscu.SetCoursewareName(*s)
	}
	return kcscu
}

// SetAttachmentCount sets the "attachment_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetAttachmentCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetAttachmentCount()
	kcscu.mutation.SetAttachmentCount(i)
	return kcscu
}

// SetNillableAttachmentCount sets the "attachment_count" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableAttachmentCount(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetAttachmentCount(*i)
	}
	return kcscu
}

// AddAttachmentCount adds i to the "attachment_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddAttachmentCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddAttachmentCount(i)
	return kcscu
}

// SetQuestionCount sets the "question_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetQuestionCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetQuestionCount()
	kcscu.mutation.SetQuestionCount(i)
	return kcscu
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableQuestionCount(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetQuestionCount(*i)
	}
	return kcscu
}

// AddQuestionCount adds i to the "question_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddQuestionCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddQuestionCount(i)
	return kcscu
}

// SetExamCount sets the "exam_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetExamCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetExamCount()
	kcscu.mutation.SetExamCount(i)
	return kcscu
}

// SetNillableExamCount sets the "exam_count" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableExamCount(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetExamCount(*i)
	}
	return kcscu
}

// AddExamCount adds i to the "exam_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddExamCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddExamCount(i)
	return kcscu
}

// SetHomeworkCount sets the "homework_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetHomeworkCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetHomeworkCount()
	kcscu.mutation.SetHomeworkCount(i)
	return kcscu
}

// SetNillableHomeworkCount sets the "homework_count" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableHomeworkCount(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetHomeworkCount(*i)
	}
	return kcscu
}

// AddHomeworkCount adds i to the "homework_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddHomeworkCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddHomeworkCount(i)
	return kcscu
}

// SetStudyCount sets the "study_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetStudyCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetStudyCount()
	kcscu.mutation.SetStudyCount(i)
	return kcscu
}

// SetNillableStudyCount sets the "study_count" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableStudyCount(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetStudyCount(*i)
	}
	return kcscu
}

// AddStudyCount adds i to the "study_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddStudyCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddStudyCount(i)
	return kcscu
}

// SetFinishCount sets the "finish_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetFinishCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetFinishCount()
	kcscu.mutation.SetFinishCount(i)
	return kcscu
}

// SetNillableFinishCount sets the "finish_count" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableFinishCount(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetFinishCount(*i)
	}
	return kcscu
}

// AddFinishCount adds i to the "finish_count" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddFinishCount(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddFinishCount(i)
	return kcscu
}

// SetAverageViewDuration sets the "average_view_duration" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetAverageViewDuration(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetAverageViewDuration()
	kcscu.mutation.SetAverageViewDuration(i)
	return kcscu
}

// SetNillableAverageViewDuration sets the "average_view_duration" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableAverageViewDuration(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetAverageViewDuration(*i)
	}
	return kcscu
}

// AddAverageViewDuration adds i to the "average_view_duration" field.
func (kcscu *KcCourseSmallCategoryUpdate) AddAverageViewDuration(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddAverageViewDuration(i)
	return kcscu
}

// SetCourseID sets the "course_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetCourseID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetCourseID()
	kcscu.mutation.SetCourseID(i)
	return kcscu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableCourseID(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetCourseID(*i)
	}
	return kcscu
}

// ClearCourseID clears the value of the "course_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearCourseID() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearCourseID()
	return kcscu
}

// SetChapterID sets the "chapter_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetChapterID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetChapterID()
	kcscu.mutation.SetChapterID(i)
	return kcscu
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableChapterID(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetChapterID(*i)
	}
	return kcscu
}

// ClearChapterID clears the value of the "chapter_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearChapterID() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearChapterID()
	return kcscu
}

// SetSectionID sets the "section_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) SetSectionID(i int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ResetSectionID()
	kcscu.mutation.SetSectionID(i)
	return kcscu
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableSectionID(i *int) *KcCourseSmallCategoryUpdate {
	if i != nil {
		kcscu.SetSectionID(*i)
	}
	return kcscu
}

// ClearSectionID clears the value of the "section_id" field.
func (kcscu *KcCourseSmallCategoryUpdate) ClearSectionID() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearSectionID()
	return kcscu
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (kcscu *KcCourseSmallCategoryUpdate) SetCourse(k *KcCourse) *KcCourseSmallCategoryUpdate {
	return kcscu.SetCourseID(k.ID)
}

// SetChapter sets the "chapter" edge to the KcCourseChapter entity.
func (kcscu *KcCourseSmallCategoryUpdate) SetChapter(k *KcCourseChapter) *KcCourseSmallCategoryUpdate {
	return kcscu.SetChapterID(k.ID)
}

// SetSection sets the "section" edge to the KcCourseSection entity.
func (kcscu *KcCourseSmallCategoryUpdate) SetSection(k *KcCourseSection) *KcCourseSmallCategoryUpdate {
	return kcscu.SetSectionID(k.ID)
}

// AddCourseSmallCategoryAttachmentIDs adds the "course_small_category_attachments" edge to the KcSmallCategoryAttachment entity by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) AddCourseSmallCategoryAttachmentIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddCourseSmallCategoryAttachmentIDs(ids...)
	return kcscu
}

// AddCourseSmallCategoryAttachments adds the "course_small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (kcscu *KcCourseSmallCategoryUpdate) AddCourseSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscu.AddCourseSmallCategoryAttachmentIDs(ids...)
}

// AddCourseSmallCategoryExampaperIDs adds the "course_small_category_exampapers" edge to the KcSmallCategoryExamPaper entity by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) AddCourseSmallCategoryExampaperIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddCourseSmallCategoryExampaperIDs(ids...)
	return kcscu
}

// AddCourseSmallCategoryExampapers adds the "course_small_category_exampapers" edges to the KcSmallCategoryExamPaper entity.
func (kcscu *KcCourseSmallCategoryUpdate) AddCourseSmallCategoryExampapers(k ...*KcSmallCategoryExamPaper) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscu.AddCourseSmallCategoryExampaperIDs(ids...)
}

// AddCourseSmallCategoryQuestionIDs adds the "course_small_category_questions" edge to the KcSmallCategoryQuestion entity by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) AddCourseSmallCategoryQuestionIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddCourseSmallCategoryQuestionIDs(ids...)
	return kcscu
}

// AddCourseSmallCategoryQuestions adds the "course_small_category_questions" edges to the KcSmallCategoryQuestion entity.
func (kcscu *KcCourseSmallCategoryUpdate) AddCourseSmallCategoryQuestions(k ...*KcSmallCategoryQuestion) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscu.AddCourseSmallCategoryQuestionIDs(ids...)
}

// AddCourseAppraiseSmallIDs adds the "course_appraise_smalls" edge to the UserCourseAppraise entity by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) AddCourseAppraiseSmallIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddCourseAppraiseSmallIDs(ids...)
	return kcscu
}

// AddCourseAppraiseSmalls adds the "course_appraise_smalls" edges to the UserCourseAppraise entity.
func (kcscu *KcCourseSmallCategoryUpdate) AddCourseAppraiseSmalls(u ...*UserCourseAppraise) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return kcscu.AddCourseAppraiseSmallIDs(ids...)
}

// AddVideoRecordSmallIDs adds the "video_record_small" edge to the VideoRecord entity by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) AddVideoRecordSmallIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.AddVideoRecordSmallIDs(ids...)
	return kcscu
}

// AddVideoRecordSmall adds the "video_record_small" edges to the VideoRecord entity.
func (kcscu *KcCourseSmallCategoryUpdate) AddVideoRecordSmall(v ...*VideoRecord) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return kcscu.AddVideoRecordSmallIDs(ids...)
}

// SetCsAttachmentID sets the "cs_attachment" edge to the Attachment entity by ID.
func (kcscu *KcCourseSmallCategoryUpdate) SetCsAttachmentID(id int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.SetCsAttachmentID(id)
	return kcscu
}

// SetNillableCsAttachmentID sets the "cs_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableCsAttachmentID(id *int) *KcCourseSmallCategoryUpdate {
	if id != nil {
		kcscu = kcscu.SetCsAttachmentID(*id)
	}
	return kcscu
}

// SetCsAttachment sets the "cs_attachment" edge to the Attachment entity.
func (kcscu *KcCourseSmallCategoryUpdate) SetCsAttachment(a *Attachment) *KcCourseSmallCategoryUpdate {
	return kcscu.SetCsAttachmentID(a.ID)
}

// SetOdAttachmentID sets the "od_attachment" edge to the Attachment entity by ID.
func (kcscu *KcCourseSmallCategoryUpdate) SetOdAttachmentID(id int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.SetOdAttachmentID(id)
	return kcscu
}

// SetNillableOdAttachmentID sets the "od_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (kcscu *KcCourseSmallCategoryUpdate) SetNillableOdAttachmentID(id *int) *KcCourseSmallCategoryUpdate {
	if id != nil {
		kcscu = kcscu.SetOdAttachmentID(*id)
	}
	return kcscu
}

// SetOdAttachment sets the "od_attachment" edge to the Attachment entity.
func (kcscu *KcCourseSmallCategoryUpdate) SetOdAttachment(a *Attachment) *KcCourseSmallCategoryUpdate {
	return kcscu.SetOdAttachmentID(a.ID)
}

// Mutation returns the KcCourseSmallCategoryMutation object of the builder.
func (kcscu *KcCourseSmallCategoryUpdate) Mutation() *KcCourseSmallCategoryMutation {
	return kcscu.mutation
}

// ClearCourse clears the "course" edge to the KcCourse entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearCourse() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearCourse()
	return kcscu
}

// ClearChapter clears the "chapter" edge to the KcCourseChapter entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearChapter() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearChapter()
	return kcscu
}

// ClearSection clears the "section" edge to the KcCourseSection entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearSection() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearSection()
	return kcscu
}

// ClearCourseSmallCategoryAttachments clears all "course_small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearCourseSmallCategoryAttachments() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearCourseSmallCategoryAttachments()
	return kcscu
}

// RemoveCourseSmallCategoryAttachmentIDs removes the "course_small_category_attachments" edge to KcSmallCategoryAttachment entities by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveCourseSmallCategoryAttachmentIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.RemoveCourseSmallCategoryAttachmentIDs(ids...)
	return kcscu
}

// RemoveCourseSmallCategoryAttachments removes "course_small_category_attachments" edges to KcSmallCategoryAttachment entities.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveCourseSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscu.RemoveCourseSmallCategoryAttachmentIDs(ids...)
}

// ClearCourseSmallCategoryExampapers clears all "course_small_category_exampapers" edges to the KcSmallCategoryExamPaper entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearCourseSmallCategoryExampapers() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearCourseSmallCategoryExampapers()
	return kcscu
}

// RemoveCourseSmallCategoryExampaperIDs removes the "course_small_category_exampapers" edge to KcSmallCategoryExamPaper entities by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveCourseSmallCategoryExampaperIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.RemoveCourseSmallCategoryExampaperIDs(ids...)
	return kcscu
}

// RemoveCourseSmallCategoryExampapers removes "course_small_category_exampapers" edges to KcSmallCategoryExamPaper entities.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveCourseSmallCategoryExampapers(k ...*KcSmallCategoryExamPaper) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscu.RemoveCourseSmallCategoryExampaperIDs(ids...)
}

// ClearCourseSmallCategoryQuestions clears all "course_small_category_questions" edges to the KcSmallCategoryQuestion entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearCourseSmallCategoryQuestions() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearCourseSmallCategoryQuestions()
	return kcscu
}

// RemoveCourseSmallCategoryQuestionIDs removes the "course_small_category_questions" edge to KcSmallCategoryQuestion entities by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveCourseSmallCategoryQuestionIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.RemoveCourseSmallCategoryQuestionIDs(ids...)
	return kcscu
}

// RemoveCourseSmallCategoryQuestions removes "course_small_category_questions" edges to KcSmallCategoryQuestion entities.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveCourseSmallCategoryQuestions(k ...*KcSmallCategoryQuestion) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscu.RemoveCourseSmallCategoryQuestionIDs(ids...)
}

// ClearCourseAppraiseSmalls clears all "course_appraise_smalls" edges to the UserCourseAppraise entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearCourseAppraiseSmalls() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearCourseAppraiseSmalls()
	return kcscu
}

// RemoveCourseAppraiseSmallIDs removes the "course_appraise_smalls" edge to UserCourseAppraise entities by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveCourseAppraiseSmallIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.RemoveCourseAppraiseSmallIDs(ids...)
	return kcscu
}

// RemoveCourseAppraiseSmalls removes "course_appraise_smalls" edges to UserCourseAppraise entities.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveCourseAppraiseSmalls(u ...*UserCourseAppraise) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return kcscu.RemoveCourseAppraiseSmallIDs(ids...)
}

// ClearVideoRecordSmall clears all "video_record_small" edges to the VideoRecord entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearVideoRecordSmall() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearVideoRecordSmall()
	return kcscu
}

// RemoveVideoRecordSmallIDs removes the "video_record_small" edge to VideoRecord entities by IDs.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveVideoRecordSmallIDs(ids ...int) *KcCourseSmallCategoryUpdate {
	kcscu.mutation.RemoveVideoRecordSmallIDs(ids...)
	return kcscu
}

// RemoveVideoRecordSmall removes "video_record_small" edges to VideoRecord entities.
func (kcscu *KcCourseSmallCategoryUpdate) RemoveVideoRecordSmall(v ...*VideoRecord) *KcCourseSmallCategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return kcscu.RemoveVideoRecordSmallIDs(ids...)
}

// ClearCsAttachment clears the "cs_attachment" edge to the Attachment entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearCsAttachment() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearCsAttachment()
	return kcscu
}

// ClearOdAttachment clears the "od_attachment" edge to the Attachment entity.
func (kcscu *KcCourseSmallCategoryUpdate) ClearOdAttachment() *KcCourseSmallCategoryUpdate {
	kcscu.mutation.ClearOdAttachment()
	return kcscu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcscu *KcCourseSmallCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kcscu.defaults()
	if len(kcscu.hooks) == 0 {
		affected, err = kcscu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseSmallCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcscu.mutation = mutation
			affected, err = kcscu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcscu.hooks) - 1; i >= 0; i-- {
			mut = kcscu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcscu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcscu *KcCourseSmallCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := kcscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcscu *KcCourseSmallCategoryUpdate) Exec(ctx context.Context) error {
	_, err := kcscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcscu *KcCourseSmallCategoryUpdate) ExecX(ctx context.Context) {
	if err := kcscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcscu *KcCourseSmallCategoryUpdate) defaults() {
	if _, ok := kcscu.mutation.UpdatedAt(); !ok && !kcscu.mutation.UpdatedAtCleared() {
		v := kccoursesmallcategory.UpdateDefaultUpdatedAt()
		kcscu.mutation.SetUpdatedAt(v)
	}
}

func (kcscu *KcCourseSmallCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursesmallcategory.Table,
			Columns: kccoursesmallcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursesmallcategory.FieldID,
			},
		},
	}
	if ps := kcscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcscu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldUUID,
		})
	}
	if kcscu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kccoursesmallcategory.FieldCreatedAt,
		})
	}
	if value, ok := kcscu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldUpdatedAt,
		})
	}
	if kcscu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kccoursesmallcategory.FieldUpdatedAt,
		})
	}
	if value, ok := kcscu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldDeletedAt,
		})
	}
	if kcscu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kccoursesmallcategory.FieldDeletedAt,
		})
	}
	if value, ok := kcscu.mutation.SmallName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldSmallName,
		})
	}
	if value, ok := kcscu.mutation.ViewingTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldViewingTime,
		})
	}
	if value, ok := kcscu.mutation.AddedViewingTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldViewingTime,
		})
	}
	if value, ok := kcscu.mutation.FinishType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishType,
		})
	}
	if value, ok := kcscu.mutation.AddedFinishType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishType,
		})
	}
	if value, ok := kcscu.mutation.TeachType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldTeachType,
		})
	}
	if value, ok := kcscu.mutation.AddedTeachType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldTeachType,
		})
	}
	if value, ok := kcscu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldType,
		})
	}
	if value, ok := kcscu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldType,
		})
	}
	if value, ok := kcscu.mutation.LiveSmallStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallStart,
		})
	}
	if kcscu.mutation.LiveSmallStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kccoursesmallcategory.FieldLiveSmallStart,
		})
	}
	if value, ok := kcscu.mutation.LiveSmallStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallStatus,
		})
	}
	if value, ok := kcscu.mutation.AddedLiveSmallStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallStatus,
		})
	}
	if value, ok := kcscu.mutation.LiveRoomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveRoomID,
		})
	}
	if value, ok := kcscu.mutation.AddedLiveRoomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveRoomID,
		})
	}
	if kcscu.mutation.LiveRoomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kccoursesmallcategory.FieldLiveRoomID,
		})
	}
	if value, ok := kcscu.mutation.BackVideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldBackVideoID,
		})
	}
	if value, ok := kcscu.mutation.AddedBackVideoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldBackVideoID,
		})
	}
	if kcscu.mutation.BackVideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kccoursesmallcategory.FieldBackVideoID,
		})
	}
	if value, ok := kcscu.mutation.FalseVideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFalseVideoID,
		})
	}
	if value, ok := kcscu.mutation.AddedFalseVideoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFalseVideoID,
		})
	}
	if kcscu.mutation.FalseVideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kccoursesmallcategory.FieldFalseVideoID,
		})
	}
	if value, ok := kcscu.mutation.OrderVideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldOrderVideoID,
		})
	}
	if value, ok := kcscu.mutation.AddedOrderVideoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldOrderVideoID,
		})
	}
	if kcscu.mutation.OrderVideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kccoursesmallcategory.FieldOrderVideoID,
		})
	}
	if value, ok := kcscu.mutation.LiveSmallTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallTime,
		})
	}
	if value, ok := kcscu.mutation.AddedLiveSmallTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallTime,
		})
	}
	if value, ok := kcscu.mutation.PushStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldPushStatus,
		})
	}
	if value, ok := kcscu.mutation.AddedPushStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldPushStatus,
		})
	}
	if value, ok := kcscu.mutation.LiveSmallRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallRemark,
		})
	}
	if value, ok := kcscu.mutation.CoursewareName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldCoursewareName,
		})
	}
	if value, ok := kcscu.mutation.AttachmentCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAttachmentCount,
		})
	}
	if value, ok := kcscu.mutation.AddedAttachmentCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAttachmentCount,
		})
	}
	if value, ok := kcscu.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldQuestionCount,
		})
	}
	if value, ok := kcscu.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldQuestionCount,
		})
	}
	if value, ok := kcscu.mutation.ExamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldExamCount,
		})
	}
	if value, ok := kcscu.mutation.AddedExamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldExamCount,
		})
	}
	if value, ok := kcscu.mutation.HomeworkCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldHomeworkCount,
		})
	}
	if value, ok := kcscu.mutation.AddedHomeworkCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldHomeworkCount,
		})
	}
	if value, ok := kcscu.mutation.StudyCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldStudyCount,
		})
	}
	if value, ok := kcscu.mutation.AddedStudyCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldStudyCount,
		})
	}
	if value, ok := kcscu.mutation.FinishCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishCount,
		})
	}
	if value, ok := kcscu.mutation.AddedFinishCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishCount,
		})
	}
	if value, ok := kcscu.mutation.AverageViewDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAverageViewDuration,
		})
	}
	if value, ok := kcscu.mutation.AddedAverageViewDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAverageViewDuration,
		})
	}
	if kcscu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CourseTable,
			Columns: []string{kccoursesmallcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CourseTable,
			Columns: []string{kccoursesmallcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscu.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.ChapterTable,
			Columns: []string{kccoursesmallcategory.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.ChapterTable,
			Columns: []string{kccoursesmallcategory.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscu.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.SectionTable,
			Columns: []string{kccoursesmallcategory.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.SectionTable,
			Columns: []string{kccoursesmallcategory.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscu.mutation.CourseSmallCategoryAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryAttachmentsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.RemovedCourseSmallCategoryAttachmentsIDs(); len(nodes) > 0 && !kcscu.mutation.CourseSmallCategoryAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryAttachmentsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.CourseSmallCategoryAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryAttachmentsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscu.mutation.CourseSmallCategoryExampapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryExampapersTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryExampapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.RemovedCourseSmallCategoryExampapersIDs(); len(nodes) > 0 && !kcscu.mutation.CourseSmallCategoryExampapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryExampapersTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryExampapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.CourseSmallCategoryExampapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryExampapersTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryExampapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscu.mutation.CourseSmallCategoryQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryQuestionsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.RemovedCourseSmallCategoryQuestionsIDs(); len(nodes) > 0 && !kcscu.mutation.CourseSmallCategoryQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryQuestionsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.CourseSmallCategoryQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryQuestionsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscu.mutation.CourseAppraiseSmallsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseAppraiseSmallsTable,
			Columns: []string{kccoursesmallcategory.CourseAppraiseSmallsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.RemovedCourseAppraiseSmallsIDs(); len(nodes) > 0 && !kcscu.mutation.CourseAppraiseSmallsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseAppraiseSmallsTable,
			Columns: []string{kccoursesmallcategory.CourseAppraiseSmallsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.CourseAppraiseSmallsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseAppraiseSmallsTable,
			Columns: []string{kccoursesmallcategory.CourseAppraiseSmallsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscu.mutation.VideoRecordSmallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.VideoRecordSmallTable,
			Columns: []string{kccoursesmallcategory.VideoRecordSmallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.RemovedVideoRecordSmallIDs(); len(nodes) > 0 && !kcscu.mutation.VideoRecordSmallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.VideoRecordSmallTable,
			Columns: []string{kccoursesmallcategory.VideoRecordSmallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.VideoRecordSmallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.VideoRecordSmallTable,
			Columns: []string{kccoursesmallcategory.VideoRecordSmallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscu.mutation.CsAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CsAttachmentTable,
			Columns: []string{kccoursesmallcategory.CsAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.CsAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CsAttachmentTable,
			Columns: []string{kccoursesmallcategory.CsAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscu.mutation.OdAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.OdAttachmentTable,
			Columns: []string{kccoursesmallcategory.OdAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscu.mutation.OdAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.OdAttachmentTable,
			Columns: []string{kccoursesmallcategory.OdAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccoursesmallcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KcCourseSmallCategoryUpdateOne is the builder for updating a single KcCourseSmallCategory entity.
type KcCourseSmallCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KcCourseSmallCategoryMutation
}

// SetUUID sets the "uuid" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetUUID(s string) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.SetUUID(s)
	return kcscuo
}

// SetUpdatedAt sets the "updated_at" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetUpdatedAt(t time.Time) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.SetUpdatedAt(t)
	return kcscuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearUpdatedAt() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearUpdatedAt()
	return kcscuo
}

// SetDeletedAt sets the "deleted_at" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetDeletedAt(t time.Time) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.SetDeletedAt(t)
	return kcscuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableDeletedAt(t *time.Time) *KcCourseSmallCategoryUpdateOne {
	if t != nil {
		kcscuo.SetDeletedAt(*t)
	}
	return kcscuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearDeletedAt() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearDeletedAt()
	return kcscuo
}

// SetSmallName sets the "small_name" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetSmallName(s string) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.SetSmallName(s)
	return kcscuo
}

// SetNillableSmallName sets the "small_name" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableSmallName(s *string) *KcCourseSmallCategoryUpdateOne {
	if s != nil {
		kcscuo.SetSmallName(*s)
	}
	return kcscuo
}

// SetViewingTime sets the "viewing_time" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetViewingTime(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetViewingTime()
	kcscuo.mutation.SetViewingTime(i)
	return kcscuo
}

// SetNillableViewingTime sets the "viewing_time" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableViewingTime(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetViewingTime(*i)
	}
	return kcscuo
}

// AddViewingTime adds i to the "viewing_time" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddViewingTime(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddViewingTime(i)
	return kcscuo
}

// SetFinishType sets the "finish_type" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetFinishType(u uint8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetFinishType()
	kcscuo.mutation.SetFinishType(u)
	return kcscuo
}

// SetNillableFinishType sets the "finish_type" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableFinishType(u *uint8) *KcCourseSmallCategoryUpdateOne {
	if u != nil {
		kcscuo.SetFinishType(*u)
	}
	return kcscuo
}

// AddFinishType adds u to the "finish_type" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddFinishType(u uint8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddFinishType(u)
	return kcscuo
}

// SetTeachType sets the "teach_type" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetTeachType(u uint8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetTeachType()
	kcscuo.mutation.SetTeachType(u)
	return kcscuo
}

// SetNillableTeachType sets the "teach_type" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableTeachType(u *uint8) *KcCourseSmallCategoryUpdateOne {
	if u != nil {
		kcscuo.SetTeachType(*u)
	}
	return kcscuo
}

// AddTeachType adds u to the "teach_type" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddTeachType(u uint8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddTeachType(u)
	return kcscuo
}

// SetType sets the "type" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetType(u uint8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetType()
	kcscuo.mutation.SetType(u)
	return kcscuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableType(u *uint8) *KcCourseSmallCategoryUpdateOne {
	if u != nil {
		kcscuo.SetType(*u)
	}
	return kcscuo
}

// AddType adds u to the "type" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddType(u uint8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddType(u)
	return kcscuo
}

// SetLiveSmallStart sets the "live_small_start" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetLiveSmallStart(t time.Time) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.SetLiveSmallStart(t)
	return kcscuo
}

// SetNillableLiveSmallStart sets the "live_small_start" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableLiveSmallStart(t *time.Time) *KcCourseSmallCategoryUpdateOne {
	if t != nil {
		kcscuo.SetLiveSmallStart(*t)
	}
	return kcscuo
}

// ClearLiveSmallStart clears the value of the "live_small_start" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearLiveSmallStart() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearLiveSmallStart()
	return kcscuo
}

// SetLiveSmallStatus sets the "live_small_status" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetLiveSmallStatus(i int8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetLiveSmallStatus()
	kcscuo.mutation.SetLiveSmallStatus(i)
	return kcscuo
}

// SetNillableLiveSmallStatus sets the "live_small_status" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableLiveSmallStatus(i *int8) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetLiveSmallStatus(*i)
	}
	return kcscuo
}

// AddLiveSmallStatus adds i to the "live_small_status" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddLiveSmallStatus(i int8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddLiveSmallStatus(i)
	return kcscuo
}

// SetLiveRoomID sets the "live_room_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetLiveRoomID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetLiveRoomID()
	kcscuo.mutation.SetLiveRoomID(i)
	return kcscuo
}

// SetNillableLiveRoomID sets the "live_room_id" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableLiveRoomID(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetLiveRoomID(*i)
	}
	return kcscuo
}

// AddLiveRoomID adds i to the "live_room_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddLiveRoomID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddLiveRoomID(i)
	return kcscuo
}

// ClearLiveRoomID clears the value of the "live_room_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearLiveRoomID() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearLiveRoomID()
	return kcscuo
}

// SetBackVideoID sets the "back_video_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetBackVideoID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetBackVideoID()
	kcscuo.mutation.SetBackVideoID(i)
	return kcscuo
}

// SetNillableBackVideoID sets the "back_video_id" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableBackVideoID(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetBackVideoID(*i)
	}
	return kcscuo
}

// AddBackVideoID adds i to the "back_video_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddBackVideoID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddBackVideoID(i)
	return kcscuo
}

// ClearBackVideoID clears the value of the "back_video_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearBackVideoID() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearBackVideoID()
	return kcscuo
}

// SetFalseVideoID sets the "false_video_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetFalseVideoID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetFalseVideoID()
	kcscuo.mutation.SetFalseVideoID(i)
	return kcscuo
}

// SetNillableFalseVideoID sets the "false_video_id" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableFalseVideoID(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetFalseVideoID(*i)
	}
	return kcscuo
}

// AddFalseVideoID adds i to the "false_video_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddFalseVideoID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddFalseVideoID(i)
	return kcscuo
}

// ClearFalseVideoID clears the value of the "false_video_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearFalseVideoID() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearFalseVideoID()
	return kcscuo
}

// SetOrderVideoID sets the "order_video_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetOrderVideoID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetOrderVideoID()
	kcscuo.mutation.SetOrderVideoID(i)
	return kcscuo
}

// SetNillableOrderVideoID sets the "order_video_id" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableOrderVideoID(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetOrderVideoID(*i)
	}
	return kcscuo
}

// AddOrderVideoID adds i to the "order_video_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddOrderVideoID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddOrderVideoID(i)
	return kcscuo
}

// ClearOrderVideoID clears the value of the "order_video_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearOrderVideoID() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearOrderVideoID()
	return kcscuo
}

// SetOrderVideoAttachID sets the "order_video_attach_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetOrderVideoAttachID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetOrderVideoAttachID()
	kcscuo.mutation.SetOrderVideoAttachID(i)
	return kcscuo
}

// SetNillableOrderVideoAttachID sets the "order_video_attach_id" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableOrderVideoAttachID(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetOrderVideoAttachID(*i)
	}
	return kcscuo
}

// ClearOrderVideoAttachID clears the value of the "order_video_attach_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearOrderVideoAttachID() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearOrderVideoAttachID()
	return kcscuo
}

// SetLiveSmallTime sets the "live_small_time" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetLiveSmallTime(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetLiveSmallTime()
	kcscuo.mutation.SetLiveSmallTime(i)
	return kcscuo
}

// SetNillableLiveSmallTime sets the "live_small_time" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableLiveSmallTime(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetLiveSmallTime(*i)
	}
	return kcscuo
}

// AddLiveSmallTime adds i to the "live_small_time" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddLiveSmallTime(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddLiveSmallTime(i)
	return kcscuo
}

// SetPushStatus sets the "push_status" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetPushStatus(u uint8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetPushStatus()
	kcscuo.mutation.SetPushStatus(u)
	return kcscuo
}

// SetNillablePushStatus sets the "push_status" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillablePushStatus(u *uint8) *KcCourseSmallCategoryUpdateOne {
	if u != nil {
		kcscuo.SetPushStatus(*u)
	}
	return kcscuo
}

// AddPushStatus adds u to the "push_status" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddPushStatus(u uint8) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddPushStatus(u)
	return kcscuo
}

// SetLiveSmallRemark sets the "live_small_remark" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetLiveSmallRemark(s string) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.SetLiveSmallRemark(s)
	return kcscuo
}

// SetNillableLiveSmallRemark sets the "live_small_remark" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableLiveSmallRemark(s *string) *KcCourseSmallCategoryUpdateOne {
	if s != nil {
		kcscuo.SetLiveSmallRemark(*s)
	}
	return kcscuo
}

// SetCoursewareAttachID sets the "courseware_attach_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetCoursewareAttachID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetCoursewareAttachID()
	kcscuo.mutation.SetCoursewareAttachID(i)
	return kcscuo
}

// SetNillableCoursewareAttachID sets the "courseware_attach_id" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableCoursewareAttachID(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetCoursewareAttachID(*i)
	}
	return kcscuo
}

// ClearCoursewareAttachID clears the value of the "courseware_attach_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearCoursewareAttachID() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearCoursewareAttachID()
	return kcscuo
}

// SetCoursewareName sets the "courseware_name" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetCoursewareName(s string) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.SetCoursewareName(s)
	return kcscuo
}

// SetNillableCoursewareName sets the "courseware_name" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableCoursewareName(s *string) *KcCourseSmallCategoryUpdateOne {
	if s != nil {
		kcscuo.SetCoursewareName(*s)
	}
	return kcscuo
}

// SetAttachmentCount sets the "attachment_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetAttachmentCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetAttachmentCount()
	kcscuo.mutation.SetAttachmentCount(i)
	return kcscuo
}

// SetNillableAttachmentCount sets the "attachment_count" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableAttachmentCount(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetAttachmentCount(*i)
	}
	return kcscuo
}

// AddAttachmentCount adds i to the "attachment_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddAttachmentCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddAttachmentCount(i)
	return kcscuo
}

// SetQuestionCount sets the "question_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetQuestionCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetQuestionCount()
	kcscuo.mutation.SetQuestionCount(i)
	return kcscuo
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableQuestionCount(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetQuestionCount(*i)
	}
	return kcscuo
}

// AddQuestionCount adds i to the "question_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddQuestionCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddQuestionCount(i)
	return kcscuo
}

// SetExamCount sets the "exam_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetExamCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetExamCount()
	kcscuo.mutation.SetExamCount(i)
	return kcscuo
}

// SetNillableExamCount sets the "exam_count" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableExamCount(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetExamCount(*i)
	}
	return kcscuo
}

// AddExamCount adds i to the "exam_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddExamCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddExamCount(i)
	return kcscuo
}

// SetHomeworkCount sets the "homework_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetHomeworkCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetHomeworkCount()
	kcscuo.mutation.SetHomeworkCount(i)
	return kcscuo
}

// SetNillableHomeworkCount sets the "homework_count" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableHomeworkCount(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetHomeworkCount(*i)
	}
	return kcscuo
}

// AddHomeworkCount adds i to the "homework_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddHomeworkCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddHomeworkCount(i)
	return kcscuo
}

// SetStudyCount sets the "study_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetStudyCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetStudyCount()
	kcscuo.mutation.SetStudyCount(i)
	return kcscuo
}

// SetNillableStudyCount sets the "study_count" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableStudyCount(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetStudyCount(*i)
	}
	return kcscuo
}

// AddStudyCount adds i to the "study_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddStudyCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddStudyCount(i)
	return kcscuo
}

// SetFinishCount sets the "finish_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetFinishCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetFinishCount()
	kcscuo.mutation.SetFinishCount(i)
	return kcscuo
}

// SetNillableFinishCount sets the "finish_count" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableFinishCount(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetFinishCount(*i)
	}
	return kcscuo
}

// AddFinishCount adds i to the "finish_count" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddFinishCount(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddFinishCount(i)
	return kcscuo
}

// SetAverageViewDuration sets the "average_view_duration" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetAverageViewDuration(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetAverageViewDuration()
	kcscuo.mutation.SetAverageViewDuration(i)
	return kcscuo
}

// SetNillableAverageViewDuration sets the "average_view_duration" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableAverageViewDuration(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetAverageViewDuration(*i)
	}
	return kcscuo
}

// AddAverageViewDuration adds i to the "average_view_duration" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddAverageViewDuration(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddAverageViewDuration(i)
	return kcscuo
}

// SetCourseID sets the "course_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetCourseID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetCourseID()
	kcscuo.mutation.SetCourseID(i)
	return kcscuo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableCourseID(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetCourseID(*i)
	}
	return kcscuo
}

// ClearCourseID clears the value of the "course_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearCourseID() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearCourseID()
	return kcscuo
}

// SetChapterID sets the "chapter_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetChapterID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetChapterID()
	kcscuo.mutation.SetChapterID(i)
	return kcscuo
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableChapterID(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetChapterID(*i)
	}
	return kcscuo
}

// ClearChapterID clears the value of the "chapter_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearChapterID() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearChapterID()
	return kcscuo
}

// SetSectionID sets the "section_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetSectionID(i int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ResetSectionID()
	kcscuo.mutation.SetSectionID(i)
	return kcscuo
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableSectionID(i *int) *KcCourseSmallCategoryUpdateOne {
	if i != nil {
		kcscuo.SetSectionID(*i)
	}
	return kcscuo
}

// ClearSectionID clears the value of the "section_id" field.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearSectionID() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearSectionID()
	return kcscuo
}

// SetCourse sets the "course" edge to the KcCourse entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetCourse(k *KcCourse) *KcCourseSmallCategoryUpdateOne {
	return kcscuo.SetCourseID(k.ID)
}

// SetChapter sets the "chapter" edge to the KcCourseChapter entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetChapter(k *KcCourseChapter) *KcCourseSmallCategoryUpdateOne {
	return kcscuo.SetChapterID(k.ID)
}

// SetSection sets the "section" edge to the KcCourseSection entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetSection(k *KcCourseSection) *KcCourseSmallCategoryUpdateOne {
	return kcscuo.SetSectionID(k.ID)
}

// AddCourseSmallCategoryAttachmentIDs adds the "course_small_category_attachments" edge to the KcSmallCategoryAttachment entity by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddCourseSmallCategoryAttachmentIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddCourseSmallCategoryAttachmentIDs(ids...)
	return kcscuo
}

// AddCourseSmallCategoryAttachments adds the "course_small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddCourseSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscuo.AddCourseSmallCategoryAttachmentIDs(ids...)
}

// AddCourseSmallCategoryExampaperIDs adds the "course_small_category_exampapers" edge to the KcSmallCategoryExamPaper entity by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddCourseSmallCategoryExampaperIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddCourseSmallCategoryExampaperIDs(ids...)
	return kcscuo
}

// AddCourseSmallCategoryExampapers adds the "course_small_category_exampapers" edges to the KcSmallCategoryExamPaper entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddCourseSmallCategoryExampapers(k ...*KcSmallCategoryExamPaper) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscuo.AddCourseSmallCategoryExampaperIDs(ids...)
}

// AddCourseSmallCategoryQuestionIDs adds the "course_small_category_questions" edge to the KcSmallCategoryQuestion entity by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddCourseSmallCategoryQuestionIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddCourseSmallCategoryQuestionIDs(ids...)
	return kcscuo
}

// AddCourseSmallCategoryQuestions adds the "course_small_category_questions" edges to the KcSmallCategoryQuestion entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddCourseSmallCategoryQuestions(k ...*KcSmallCategoryQuestion) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscuo.AddCourseSmallCategoryQuestionIDs(ids...)
}

// AddCourseAppraiseSmallIDs adds the "course_appraise_smalls" edge to the UserCourseAppraise entity by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddCourseAppraiseSmallIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddCourseAppraiseSmallIDs(ids...)
	return kcscuo
}

// AddCourseAppraiseSmalls adds the "course_appraise_smalls" edges to the UserCourseAppraise entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddCourseAppraiseSmalls(u ...*UserCourseAppraise) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return kcscuo.AddCourseAppraiseSmallIDs(ids...)
}

// AddVideoRecordSmallIDs adds the "video_record_small" edge to the VideoRecord entity by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddVideoRecordSmallIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.AddVideoRecordSmallIDs(ids...)
	return kcscuo
}

// AddVideoRecordSmall adds the "video_record_small" edges to the VideoRecord entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) AddVideoRecordSmall(v ...*VideoRecord) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return kcscuo.AddVideoRecordSmallIDs(ids...)
}

// SetCsAttachmentID sets the "cs_attachment" edge to the Attachment entity by ID.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetCsAttachmentID(id int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.SetCsAttachmentID(id)
	return kcscuo
}

// SetNillableCsAttachmentID sets the "cs_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableCsAttachmentID(id *int) *KcCourseSmallCategoryUpdateOne {
	if id != nil {
		kcscuo = kcscuo.SetCsAttachmentID(*id)
	}
	return kcscuo
}

// SetCsAttachment sets the "cs_attachment" edge to the Attachment entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetCsAttachment(a *Attachment) *KcCourseSmallCategoryUpdateOne {
	return kcscuo.SetCsAttachmentID(a.ID)
}

// SetOdAttachmentID sets the "od_attachment" edge to the Attachment entity by ID.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetOdAttachmentID(id int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.SetOdAttachmentID(id)
	return kcscuo
}

// SetNillableOdAttachmentID sets the "od_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetNillableOdAttachmentID(id *int) *KcCourseSmallCategoryUpdateOne {
	if id != nil {
		kcscuo = kcscuo.SetOdAttachmentID(*id)
	}
	return kcscuo
}

// SetOdAttachment sets the "od_attachment" edge to the Attachment entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SetOdAttachment(a *Attachment) *KcCourseSmallCategoryUpdateOne {
	return kcscuo.SetOdAttachmentID(a.ID)
}

// Mutation returns the KcCourseSmallCategoryMutation object of the builder.
func (kcscuo *KcCourseSmallCategoryUpdateOne) Mutation() *KcCourseSmallCategoryMutation {
	return kcscuo.mutation
}

// ClearCourse clears the "course" edge to the KcCourse entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearCourse() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearCourse()
	return kcscuo
}

// ClearChapter clears the "chapter" edge to the KcCourseChapter entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearChapter() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearChapter()
	return kcscuo
}

// ClearSection clears the "section" edge to the KcCourseSection entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearSection() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearSection()
	return kcscuo
}

// ClearCourseSmallCategoryAttachments clears all "course_small_category_attachments" edges to the KcSmallCategoryAttachment entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearCourseSmallCategoryAttachments() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearCourseSmallCategoryAttachments()
	return kcscuo
}

// RemoveCourseSmallCategoryAttachmentIDs removes the "course_small_category_attachments" edge to KcSmallCategoryAttachment entities by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveCourseSmallCategoryAttachmentIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.RemoveCourseSmallCategoryAttachmentIDs(ids...)
	return kcscuo
}

// RemoveCourseSmallCategoryAttachments removes "course_small_category_attachments" edges to KcSmallCategoryAttachment entities.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveCourseSmallCategoryAttachments(k ...*KcSmallCategoryAttachment) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscuo.RemoveCourseSmallCategoryAttachmentIDs(ids...)
}

// ClearCourseSmallCategoryExampapers clears all "course_small_category_exampapers" edges to the KcSmallCategoryExamPaper entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearCourseSmallCategoryExampapers() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearCourseSmallCategoryExampapers()
	return kcscuo
}

// RemoveCourseSmallCategoryExampaperIDs removes the "course_small_category_exampapers" edge to KcSmallCategoryExamPaper entities by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveCourseSmallCategoryExampaperIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.RemoveCourseSmallCategoryExampaperIDs(ids...)
	return kcscuo
}

// RemoveCourseSmallCategoryExampapers removes "course_small_category_exampapers" edges to KcSmallCategoryExamPaper entities.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveCourseSmallCategoryExampapers(k ...*KcSmallCategoryExamPaper) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscuo.RemoveCourseSmallCategoryExampaperIDs(ids...)
}

// ClearCourseSmallCategoryQuestions clears all "course_small_category_questions" edges to the KcSmallCategoryQuestion entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearCourseSmallCategoryQuestions() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearCourseSmallCategoryQuestions()
	return kcscuo
}

// RemoveCourseSmallCategoryQuestionIDs removes the "course_small_category_questions" edge to KcSmallCategoryQuestion entities by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveCourseSmallCategoryQuestionIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.RemoveCourseSmallCategoryQuestionIDs(ids...)
	return kcscuo
}

// RemoveCourseSmallCategoryQuestions removes "course_small_category_questions" edges to KcSmallCategoryQuestion entities.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveCourseSmallCategoryQuestions(k ...*KcSmallCategoryQuestion) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcscuo.RemoveCourseSmallCategoryQuestionIDs(ids...)
}

// ClearCourseAppraiseSmalls clears all "course_appraise_smalls" edges to the UserCourseAppraise entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearCourseAppraiseSmalls() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearCourseAppraiseSmalls()
	return kcscuo
}

// RemoveCourseAppraiseSmallIDs removes the "course_appraise_smalls" edge to UserCourseAppraise entities by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveCourseAppraiseSmallIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.RemoveCourseAppraiseSmallIDs(ids...)
	return kcscuo
}

// RemoveCourseAppraiseSmalls removes "course_appraise_smalls" edges to UserCourseAppraise entities.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveCourseAppraiseSmalls(u ...*UserCourseAppraise) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return kcscuo.RemoveCourseAppraiseSmallIDs(ids...)
}

// ClearVideoRecordSmall clears all "video_record_small" edges to the VideoRecord entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearVideoRecordSmall() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearVideoRecordSmall()
	return kcscuo
}

// RemoveVideoRecordSmallIDs removes the "video_record_small" edge to VideoRecord entities by IDs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveVideoRecordSmallIDs(ids ...int) *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.RemoveVideoRecordSmallIDs(ids...)
	return kcscuo
}

// RemoveVideoRecordSmall removes "video_record_small" edges to VideoRecord entities.
func (kcscuo *KcCourseSmallCategoryUpdateOne) RemoveVideoRecordSmall(v ...*VideoRecord) *KcCourseSmallCategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return kcscuo.RemoveVideoRecordSmallIDs(ids...)
}

// ClearCsAttachment clears the "cs_attachment" edge to the Attachment entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearCsAttachment() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearCsAttachment()
	return kcscuo
}

// ClearOdAttachment clears the "od_attachment" edge to the Attachment entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ClearOdAttachment() *KcCourseSmallCategoryUpdateOne {
	kcscuo.mutation.ClearOdAttachment()
	return kcscuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kcscuo *KcCourseSmallCategoryUpdateOne) Select(field string, fields ...string) *KcCourseSmallCategoryUpdateOne {
	kcscuo.fields = append([]string{field}, fields...)
	return kcscuo
}

// Save executes the query and returns the updated KcCourseSmallCategory entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) Save(ctx context.Context) (*KcCourseSmallCategory, error) {
	var (
		err  error
		node *KcCourseSmallCategory
	)
	kcscuo.defaults()
	if len(kcscuo.hooks) == 0 {
		node, err = kcscuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseSmallCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcscuo.mutation = mutation
			node, err = kcscuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcscuo.hooks) - 1; i >= 0; i-- {
			mut = kcscuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcscuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) SaveX(ctx context.Context) *KcCourseSmallCategory {
	node, err := kcscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcscuo *KcCourseSmallCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := kcscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcscuo *KcCourseSmallCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := kcscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcscuo *KcCourseSmallCategoryUpdateOne) defaults() {
	if _, ok := kcscuo.mutation.UpdatedAt(); !ok && !kcscuo.mutation.UpdatedAtCleared() {
		v := kccoursesmallcategory.UpdateDefaultUpdatedAt()
		kcscuo.mutation.SetUpdatedAt(v)
	}
}

func (kcscuo *KcCourseSmallCategoryUpdateOne) sqlSave(ctx context.Context) (_node *KcCourseSmallCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursesmallcategory.Table,
			Columns: kccoursesmallcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursesmallcategory.FieldID,
			},
		},
	}
	id, ok := kcscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KcCourseSmallCategory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kcscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kccoursesmallcategory.FieldID)
		for _, f := range fields {
			if !kccoursesmallcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kccoursesmallcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kcscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcscuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldUUID,
		})
	}
	if kcscuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kccoursesmallcategory.FieldCreatedAt,
		})
	}
	if value, ok := kcscuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldUpdatedAt,
		})
	}
	if kcscuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kccoursesmallcategory.FieldUpdatedAt,
		})
	}
	if value, ok := kcscuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldDeletedAt,
		})
	}
	if kcscuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kccoursesmallcategory.FieldDeletedAt,
		})
	}
	if value, ok := kcscuo.mutation.SmallName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldSmallName,
		})
	}
	if value, ok := kcscuo.mutation.ViewingTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldViewingTime,
		})
	}
	if value, ok := kcscuo.mutation.AddedViewingTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldViewingTime,
		})
	}
	if value, ok := kcscuo.mutation.FinishType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishType,
		})
	}
	if value, ok := kcscuo.mutation.AddedFinishType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishType,
		})
	}
	if value, ok := kcscuo.mutation.TeachType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldTeachType,
		})
	}
	if value, ok := kcscuo.mutation.AddedTeachType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldTeachType,
		})
	}
	if value, ok := kcscuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldType,
		})
	}
	if value, ok := kcscuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldType,
		})
	}
	if value, ok := kcscuo.mutation.LiveSmallStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallStart,
		})
	}
	if kcscuo.mutation.LiveSmallStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kccoursesmallcategory.FieldLiveSmallStart,
		})
	}
	if value, ok := kcscuo.mutation.LiveSmallStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallStatus,
		})
	}
	if value, ok := kcscuo.mutation.AddedLiveSmallStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallStatus,
		})
	}
	if value, ok := kcscuo.mutation.LiveRoomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveRoomID,
		})
	}
	if value, ok := kcscuo.mutation.AddedLiveRoomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveRoomID,
		})
	}
	if kcscuo.mutation.LiveRoomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kccoursesmallcategory.FieldLiveRoomID,
		})
	}
	if value, ok := kcscuo.mutation.BackVideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldBackVideoID,
		})
	}
	if value, ok := kcscuo.mutation.AddedBackVideoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldBackVideoID,
		})
	}
	if kcscuo.mutation.BackVideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kccoursesmallcategory.FieldBackVideoID,
		})
	}
	if value, ok := kcscuo.mutation.FalseVideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFalseVideoID,
		})
	}
	if value, ok := kcscuo.mutation.AddedFalseVideoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFalseVideoID,
		})
	}
	if kcscuo.mutation.FalseVideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kccoursesmallcategory.FieldFalseVideoID,
		})
	}
	if value, ok := kcscuo.mutation.OrderVideoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldOrderVideoID,
		})
	}
	if value, ok := kcscuo.mutation.AddedOrderVideoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldOrderVideoID,
		})
	}
	if kcscuo.mutation.OrderVideoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: kccoursesmallcategory.FieldOrderVideoID,
		})
	}
	if value, ok := kcscuo.mutation.LiveSmallTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallTime,
		})
	}
	if value, ok := kcscuo.mutation.AddedLiveSmallTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallTime,
		})
	}
	if value, ok := kcscuo.mutation.PushStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldPushStatus,
		})
	}
	if value, ok := kcscuo.mutation.AddedPushStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kccoursesmallcategory.FieldPushStatus,
		})
	}
	if value, ok := kcscuo.mutation.LiveSmallRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldLiveSmallRemark,
		})
	}
	if value, ok := kcscuo.mutation.CoursewareName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursesmallcategory.FieldCoursewareName,
		})
	}
	if value, ok := kcscuo.mutation.AttachmentCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAttachmentCount,
		})
	}
	if value, ok := kcscuo.mutation.AddedAttachmentCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAttachmentCount,
		})
	}
	if value, ok := kcscuo.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldQuestionCount,
		})
	}
	if value, ok := kcscuo.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldQuestionCount,
		})
	}
	if value, ok := kcscuo.mutation.ExamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldExamCount,
		})
	}
	if value, ok := kcscuo.mutation.AddedExamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldExamCount,
		})
	}
	if value, ok := kcscuo.mutation.HomeworkCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldHomeworkCount,
		})
	}
	if value, ok := kcscuo.mutation.AddedHomeworkCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldHomeworkCount,
		})
	}
	if value, ok := kcscuo.mutation.StudyCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldStudyCount,
		})
	}
	if value, ok := kcscuo.mutation.AddedStudyCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldStudyCount,
		})
	}
	if value, ok := kcscuo.mutation.FinishCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishCount,
		})
	}
	if value, ok := kcscuo.mutation.AddedFinishCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldFinishCount,
		})
	}
	if value, ok := kcscuo.mutation.AverageViewDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAverageViewDuration,
		})
	}
	if value, ok := kcscuo.mutation.AddedAverageViewDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kccoursesmallcategory.FieldAverageViewDuration,
		})
	}
	if kcscuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CourseTable,
			Columns: []string{kccoursesmallcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CourseTable,
			Columns: []string{kccoursesmallcategory.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscuo.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.ChapterTable,
			Columns: []string{kccoursesmallcategory.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.ChapterTable,
			Columns: []string{kccoursesmallcategory.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscuo.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.SectionTable,
			Columns: []string{kccoursesmallcategory.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursesmallcategory.SectionTable,
			Columns: []string{kccoursesmallcategory.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscuo.mutation.CourseSmallCategoryAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryAttachmentsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.RemovedCourseSmallCategoryAttachmentsIDs(); len(nodes) > 0 && !kcscuo.mutation.CourseSmallCategoryAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryAttachmentsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.CourseSmallCategoryAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryAttachmentsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscuo.mutation.CourseSmallCategoryExampapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryExampapersTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryExampapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.RemovedCourseSmallCategoryExampapersIDs(); len(nodes) > 0 && !kcscuo.mutation.CourseSmallCategoryExampapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryExampapersTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryExampapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.CourseSmallCategoryExampapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryExampapersTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryExampapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscuo.mutation.CourseSmallCategoryQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryQuestionsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.RemovedCourseSmallCategoryQuestionsIDs(); len(nodes) > 0 && !kcscuo.mutation.CourseSmallCategoryQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryQuestionsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.CourseSmallCategoryQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseSmallCategoryQuestionsTable,
			Columns: []string{kccoursesmallcategory.CourseSmallCategoryQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscuo.mutation.CourseAppraiseSmallsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseAppraiseSmallsTable,
			Columns: []string{kccoursesmallcategory.CourseAppraiseSmallsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.RemovedCourseAppraiseSmallsIDs(); len(nodes) > 0 && !kcscuo.mutation.CourseAppraiseSmallsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseAppraiseSmallsTable,
			Columns: []string{kccoursesmallcategory.CourseAppraiseSmallsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.CourseAppraiseSmallsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.CourseAppraiseSmallsTable,
			Columns: []string{kccoursesmallcategory.CourseAppraiseSmallsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercourseappraise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscuo.mutation.VideoRecordSmallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.VideoRecordSmallTable,
			Columns: []string{kccoursesmallcategory.VideoRecordSmallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.RemovedVideoRecordSmallIDs(); len(nodes) > 0 && !kcscuo.mutation.VideoRecordSmallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.VideoRecordSmallTable,
			Columns: []string{kccoursesmallcategory.VideoRecordSmallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.VideoRecordSmallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursesmallcategory.VideoRecordSmallTable,
			Columns: []string{kccoursesmallcategory.VideoRecordSmallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: videorecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscuo.mutation.CsAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CsAttachmentTable,
			Columns: []string{kccoursesmallcategory.CsAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.CsAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.CsAttachmentTable,
			Columns: []string{kccoursesmallcategory.CsAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcscuo.mutation.OdAttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.OdAttachmentTable,
			Columns: []string{kccoursesmallcategory.OdAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcscuo.mutation.OdAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   kccoursesmallcategory.OdAttachmentTable,
			Columns: []string{kccoursesmallcategory.OdAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KcCourseSmallCategory{config: kcscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kcscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccoursesmallcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

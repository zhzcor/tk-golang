// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/level"

	"entgo.io/ent/dialect/sql"
)

// Level is the model entity for the Level schema.
type Level struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name"`
	// Status holds the value of the "status" field.
	// 状态：1、锁定。2:生效
	Status uint8 `json:"status"`
	// Code holds the value of the "code" field.
	// 编码
	Code string `json:"code"`
	// Desc holds the value of the "desc" field.
	// 描述
	Desc string `json:"desc"`
	// SortOrder holds the value of the "sort_order" field.
	// 排序
	SortOrder int `json:"sort_order"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LevelQuery when eager-loading is set.
	Edges LevelEdges `json:"edges"`
}

// LevelEdges holds the relations/edges for other nodes in the graph.
type LevelEdges struct {
	// LevelQuestionBanks holds the value of the level_question_banks edge.
	LevelQuestionBanks []*TkQuestionBank `json:"level_question_banks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LevelQuestionBanksOrErr returns the LevelQuestionBanks value or an error if the edge
// was not loaded in eager-loading.
func (e LevelEdges) LevelQuestionBanksOrErr() ([]*TkQuestionBank, error) {
	if e.loadedTypes[0] {
		return e.LevelQuestionBanks, nil
	}
	return nil, &NotLoadedError{edge: "level_question_banks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Level) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case level.FieldID, level.FieldStatus, level.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case level.FieldUUID, level.FieldName, level.FieldCode, level.FieldDesc:
			values[i] = new(sql.NullString)
		case level.FieldCreatedAt, level.FieldUpdatedAt, level.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Level", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Level fields.
func (l *Level) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case level.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case level.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				l.UUID = value.String
			}
		case level.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = new(time.Time)
				*l.CreatedAt = value.Time
			}
		case level.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = new(time.Time)
				*l.UpdatedAt = value.Time
			}
		case level.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				l.DeletedAt = new(time.Time)
				*l.DeletedAt = value.Time
			}
		case level.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case level.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				l.Status = uint8(value.Int64)
			}
		case level.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				l.Code = value.String
			}
		case level.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				l.Desc = value.String
			}
		case level.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				l.SortOrder = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryLevelQuestionBanks queries the "level_question_banks" edge of the Level entity.
func (l *Level) QueryLevelQuestionBanks() *TkQuestionBankQuery {
	return (&LevelClient{config: l.config}).QueryLevelQuestionBanks(l)
}

// Update returns a builder for updating this Level.
// Note that you need to call Level.Unwrap() before calling this method if this Level
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Level) Update() *LevelUpdateOne {
	return (&LevelClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Level entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Level) Unwrap() *Level {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Level is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Level) String() string {
	var builder strings.Builder
	builder.WriteString("Level(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(l.UUID)
	if v := l.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := l.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := l.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(l.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", l.Status))
	builder.WriteString(", code=")
	builder.WriteString(l.Code)
	builder.WriteString(", desc=")
	builder.WriteString(l.Desc)
	builder.WriteString(", sort_order=")
	builder.WriteString(fmt.Sprintf("%v", l.SortOrder))
	builder.WriteByte(')')
	return builder.String()
}

// Levels is a parsable slice of Level.
type Levels []*Level

func (l Levels) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}

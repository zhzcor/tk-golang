// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/major"
	"tkserver/internal/store/ent/majordetail"
	"tkserver/internal/store/ent/majordetailtag"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MajorDetailCreate is the builder for creating a MajorDetail entity.
type MajorDetailCreate struct {
	config
	mutation *MajorDetailMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (mdc *MajorDetailCreate) SetUUID(s string) *MajorDetailCreate {
	mdc.mutation.SetUUID(s)
	return mdc
}

// SetCreatedAt sets the "created_at" field.
func (mdc *MajorDetailCreate) SetCreatedAt(t time.Time) *MajorDetailCreate {
	mdc.mutation.SetCreatedAt(t)
	return mdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableCreatedAt(t *time.Time) *MajorDetailCreate {
	if t != nil {
		mdc.SetCreatedAt(*t)
	}
	return mdc
}

// SetUpdatedAt sets the "updated_at" field.
func (mdc *MajorDetailCreate) SetUpdatedAt(t time.Time) *MajorDetailCreate {
	mdc.mutation.SetUpdatedAt(t)
	return mdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableUpdatedAt(t *time.Time) *MajorDetailCreate {
	if t != nil {
		mdc.SetUpdatedAt(*t)
	}
	return mdc
}

// SetDeletedAt sets the "deleted_at" field.
func (mdc *MajorDetailCreate) SetDeletedAt(t time.Time) *MajorDetailCreate {
	mdc.mutation.SetDeletedAt(t)
	return mdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableDeletedAt(t *time.Time) *MajorDetailCreate {
	if t != nil {
		mdc.SetDeletedAt(*t)
	}
	return mdc
}

// SetName sets the "name" field.
func (mdc *MajorDetailCreate) SetName(s string) *MajorDetailCreate {
	mdc.mutation.SetName(s)
	return mdc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableName(s *string) *MajorDetailCreate {
	if s != nil {
		mdc.SetName(*s)
	}
	return mdc
}

// SetDesc sets the "desc" field.
func (mdc *MajorDetailCreate) SetDesc(s string) *MajorDetailCreate {
	mdc.mutation.SetDesc(s)
	return mdc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableDesc(s *string) *MajorDetailCreate {
	if s != nil {
		mdc.SetDesc(*s)
	}
	return mdc
}

// SetSubjectCount sets the "subject_count" field.
func (mdc *MajorDetailCreate) SetSubjectCount(u uint8) *MajorDetailCreate {
	mdc.mutation.SetSubjectCount(u)
	return mdc
}

// SetNillableSubjectCount sets the "subject_count" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableSubjectCount(u *uint8) *MajorDetailCreate {
	if u != nil {
		mdc.SetSubjectCount(*u)
	}
	return mdc
}

// SetStar sets the "star" field.
func (mdc *MajorDetailCreate) SetStar(s string) *MajorDetailCreate {
	mdc.mutation.SetStar(s)
	return mdc
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableStar(s *string) *MajorDetailCreate {
	if s != nil {
		mdc.SetStar(*s)
	}
	return mdc
}

// SetPassRate sets the "pass_rate" field.
func (mdc *MajorDetailCreate) SetPassRate(u uint8) *MajorDetailCreate {
	mdc.mutation.SetPassRate(u)
	return mdc
}

// SetNillablePassRate sets the "pass_rate" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillablePassRate(u *uint8) *MajorDetailCreate {
	if u != nil {
		mdc.SetPassRate(*u)
	}
	return mdc
}

// SetStudentCount sets the "student_count" field.
func (mdc *MajorDetailCreate) SetStudentCount(u uint32) *MajorDetailCreate {
	mdc.mutation.SetStudentCount(u)
	return mdc
}

// SetNillableStudentCount sets the "student_count" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableStudentCount(u *uint32) *MajorDetailCreate {
	if u != nil {
		mdc.SetStudentCount(*u)
	}
	return mdc
}

// SetStudyDuration sets the "study_duration" field.
func (mdc *MajorDetailCreate) SetStudyDuration(u uint8) *MajorDetailCreate {
	mdc.mutation.SetStudyDuration(u)
	return mdc
}

// SetNillableStudyDuration sets the "study_duration" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableStudyDuration(u *uint8) *MajorDetailCreate {
	if u != nil {
		mdc.SetStudyDuration(*u)
	}
	return mdc
}

// SetMajorID sets the "major_id" field.
func (mdc *MajorDetailCreate) SetMajorID(i int) *MajorDetailCreate {
	mdc.mutation.SetMajorID(i)
	return mdc
}

// SetNillableMajorID sets the "major_id" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableMajorID(i *int) *MajorDetailCreate {
	if i != nil {
		mdc.SetMajorID(*i)
	}
	return mdc
}

// SetCoverImgID sets the "cover_img_id" field.
func (mdc *MajorDetailCreate) SetCoverImgID(i int) *MajorDetailCreate {
	mdc.mutation.SetCoverImgID(i)
	return mdc
}

// SetNillableCoverImgID sets the "cover_img_id" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableCoverImgID(i *int) *MajorDetailCreate {
	if i != nil {
		mdc.SetCoverImgID(*i)
	}
	return mdc
}

// SetSubjectImgID sets the "subject_img_id" field.
func (mdc *MajorDetailCreate) SetSubjectImgID(i int) *MajorDetailCreate {
	mdc.mutation.SetSubjectImgID(i)
	return mdc
}

// SetNillableSubjectImgID sets the "subject_img_id" field if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableSubjectImgID(i *int) *MajorDetailCreate {
	if i != nil {
		mdc.SetSubjectImgID(*i)
	}
	return mdc
}

// AddMajorDetailTagIDs adds the "major_detail_tags" edge to the MajorDetailTag entity by IDs.
func (mdc *MajorDetailCreate) AddMajorDetailTagIDs(ids ...int) *MajorDetailCreate {
	mdc.mutation.AddMajorDetailTagIDs(ids...)
	return mdc
}

// AddMajorDetailTags adds the "major_detail_tags" edges to the MajorDetailTag entity.
func (mdc *MajorDetailCreate) AddMajorDetailTags(m ...*MajorDetailTag) *MajorDetailCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mdc.AddMajorDetailTagIDs(ids...)
}

// SetCoverAttachmentID sets the "cover_attachment" edge to the Attachment entity by ID.
func (mdc *MajorDetailCreate) SetCoverAttachmentID(id int) *MajorDetailCreate {
	mdc.mutation.SetCoverAttachmentID(id)
	return mdc
}

// SetNillableCoverAttachmentID sets the "cover_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableCoverAttachmentID(id *int) *MajorDetailCreate {
	if id != nil {
		mdc = mdc.SetCoverAttachmentID(*id)
	}
	return mdc
}

// SetCoverAttachment sets the "cover_attachment" edge to the Attachment entity.
func (mdc *MajorDetailCreate) SetCoverAttachment(a *Attachment) *MajorDetailCreate {
	return mdc.SetCoverAttachmentID(a.ID)
}

// SetSubjectAttachmentID sets the "subject_attachment" edge to the Attachment entity by ID.
func (mdc *MajorDetailCreate) SetSubjectAttachmentID(id int) *MajorDetailCreate {
	mdc.mutation.SetSubjectAttachmentID(id)
	return mdc
}

// SetNillableSubjectAttachmentID sets the "subject_attachment" edge to the Attachment entity by ID if the given value is not nil.
func (mdc *MajorDetailCreate) SetNillableSubjectAttachmentID(id *int) *MajorDetailCreate {
	if id != nil {
		mdc = mdc.SetSubjectAttachmentID(*id)
	}
	return mdc
}

// SetSubjectAttachment sets the "subject_attachment" edge to the Attachment entity.
func (mdc *MajorDetailCreate) SetSubjectAttachment(a *Attachment) *MajorDetailCreate {
	return mdc.SetSubjectAttachmentID(a.ID)
}

// AddTeacherAttachmentIDs adds the "teacher_attachments" edge to the Attachment entity by IDs.
func (mdc *MajorDetailCreate) AddTeacherAttachmentIDs(ids ...int) *MajorDetailCreate {
	mdc.mutation.AddTeacherAttachmentIDs(ids...)
	return mdc
}

// AddTeacherAttachments adds the "teacher_attachments" edges to the Attachment entity.
func (mdc *MajorDetailCreate) AddTeacherAttachments(a ...*Attachment) *MajorDetailCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mdc.AddTeacherAttachmentIDs(ids...)
}

// AddServiceAttachmentIDs adds the "service_attachments" edge to the Attachment entity by IDs.
func (mdc *MajorDetailCreate) AddServiceAttachmentIDs(ids ...int) *MajorDetailCreate {
	mdc.mutation.AddServiceAttachmentIDs(ids...)
	return mdc
}

// AddServiceAttachments adds the "service_attachments" edges to the Attachment entity.
func (mdc *MajorDetailCreate) AddServiceAttachments(a ...*Attachment) *MajorDetailCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mdc.AddServiceAttachmentIDs(ids...)
}

// SetMajor sets the "major" edge to the Major entity.
func (mdc *MajorDetailCreate) SetMajor(m *Major) *MajorDetailCreate {
	return mdc.SetMajorID(m.ID)
}

// Mutation returns the MajorDetailMutation object of the builder.
func (mdc *MajorDetailCreate) Mutation() *MajorDetailMutation {
	return mdc.mutation
}

// Save creates the MajorDetail in the database.
func (mdc *MajorDetailCreate) Save(ctx context.Context) (*MajorDetail, error) {
	var (
		err  error
		node *MajorDetail
	)
	mdc.defaults()
	if len(mdc.hooks) == 0 {
		if err = mdc.check(); err != nil {
			return nil, err
		}
		node, err = mdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MajorDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mdc.check(); err != nil {
				return nil, err
			}
			mdc.mutation = mutation
			node, err = mdc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mdc.hooks) - 1; i >= 0; i-- {
			mut = mdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mdc *MajorDetailCreate) SaveX(ctx context.Context) *MajorDetail {
	v, err := mdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mdc *MajorDetailCreate) defaults() {
	if _, ok := mdc.mutation.CreatedAt(); !ok {
		v := majordetail.DefaultCreatedAt()
		mdc.mutation.SetCreatedAt(v)
	}
	if _, ok := mdc.mutation.UpdatedAt(); !ok {
		v := majordetail.DefaultUpdatedAt()
		mdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mdc.mutation.Name(); !ok {
		v := majordetail.DefaultName
		mdc.mutation.SetName(v)
	}
	if _, ok := mdc.mutation.SubjectCount(); !ok {
		v := majordetail.DefaultSubjectCount
		mdc.mutation.SetSubjectCount(v)
	}
	if _, ok := mdc.mutation.Star(); !ok {
		v := majordetail.DefaultStar
		mdc.mutation.SetStar(v)
	}
	if _, ok := mdc.mutation.PassRate(); !ok {
		v := majordetail.DefaultPassRate
		mdc.mutation.SetPassRate(v)
	}
	if _, ok := mdc.mutation.StudentCount(); !ok {
		v := majordetail.DefaultStudentCount
		mdc.mutation.SetStudentCount(v)
	}
	if _, ok := mdc.mutation.StudyDuration(); !ok {
		v := majordetail.DefaultStudyDuration
		mdc.mutation.SetStudyDuration(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mdc *MajorDetailCreate) check() error {
	if _, ok := mdc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := mdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mdc.mutation.SubjectCount(); !ok {
		return &ValidationError{Name: "subject_count", err: errors.New("ent: missing required field \"subject_count\"")}
	}
	if _, ok := mdc.mutation.Star(); !ok {
		return &ValidationError{Name: "star", err: errors.New("ent: missing required field \"star\"")}
	}
	if _, ok := mdc.mutation.PassRate(); !ok {
		return &ValidationError{Name: "pass_rate", err: errors.New("ent: missing required field \"pass_rate\"")}
	}
	if _, ok := mdc.mutation.StudentCount(); !ok {
		return &ValidationError{Name: "student_count", err: errors.New("ent: missing required field \"student_count\"")}
	}
	if _, ok := mdc.mutation.StudyDuration(); !ok {
		return &ValidationError{Name: "study_duration", err: errors.New("ent: missing required field \"study_duration\"")}
	}
	return nil
}

func (mdc *MajorDetailCreate) sqlSave(ctx context.Context) (*MajorDetail, error) {
	_node, _spec := mdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mdc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mdc *MajorDetailCreate) createSpec() (*MajorDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &MajorDetail{config: mdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: majordetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: majordetail.FieldID,
			},
		}
	)
	if value, ok := mdc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := mdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetail.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := mdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetail.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := mdc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetail.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := mdc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mdc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := mdc.mutation.SubjectCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldSubjectCount,
		})
		_node.SubjectCount = value
	}
	if value, ok := mdc.mutation.Star(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetail.FieldStar,
		})
		_node.Star = value
	}
	if value, ok := mdc.mutation.PassRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldPassRate,
		})
		_node.PassRate = value
	}
	if value, ok := mdc.mutation.StudentCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: majordetail.FieldStudentCount,
		})
		_node.StudentCount = value
	}
	if value, ok := mdc.mutation.StudyDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: majordetail.FieldStudyDuration,
		})
		_node.StudyDuration = value
	}
	if nodes := mdc.mutation.MajorDetailTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   majordetail.MajorDetailTagsTable,
			Columns: []string{majordetail.MajorDetailTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetailtag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mdc.mutation.CoverAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.CoverAttachmentTable,
			Columns: []string{majordetail.CoverAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CoverImgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mdc.mutation.SubjectAttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetail.SubjectAttachmentTable,
			Columns: []string{majordetail.SubjectAttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubjectImgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mdc.mutation.TeacherAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.TeacherAttachmentsTable,
			Columns: majordetail.TeacherAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mdc.mutation.ServiceAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   majordetail.ServiceAttachmentsTable,
			Columns: majordetail.ServiceAttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mdc.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   majordetail.MajorTable,
			Columns: []string{majordetail.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MajorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MajorDetailCreateBulk is the builder for creating many MajorDetail entities in bulk.
type MajorDetailCreateBulk struct {
	config
	builders []*MajorDetailCreate
}

// Save creates the MajorDetail entities in the database.
func (mdcb *MajorDetailCreateBulk) Save(ctx context.Context) ([]*MajorDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mdcb.builders))
	nodes := make([]*MajorDetail, len(mdcb.builders))
	mutators := make([]Mutator, len(mdcb.builders))
	for i := range mdcb.builders {
		func(i int, root context.Context) {
			builder := mdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MajorDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mdcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mdcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mdcb *MajorDetailCreateBulk) SaveX(ctx context.Context) []*MajorDetail {
	v, err := mdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

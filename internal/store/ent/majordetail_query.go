// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/major"
	"gserver/internal/store/ent/majordetail"
	"gserver/internal/store/ent/majordetailtag"
	"gserver/internal/store/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MajorDetailQuery is the builder for querying MajorDetail entities.
type MajorDetailQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MajorDetail
	// eager-loading edges.
	withMajorDetailTags    *MajorDetailTagQuery
	withCoverAttachment    *AttachmentQuery
	withSubjectAttachment  *AttachmentQuery
	withTeacherAttachments *AttachmentQuery
	withServiceAttachments *AttachmentQuery
	withMajor              *MajorQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MajorDetailQuery builder.
func (mdq *MajorDetailQuery) Where(ps ...predicate.MajorDetail) *MajorDetailQuery {
	mdq.predicates = append(mdq.predicates, ps...)
	return mdq
}

// Limit adds a limit step to the query.
func (mdq *MajorDetailQuery) Limit(limit int) *MajorDetailQuery {
	mdq.limit = &limit
	return mdq
}

// Offset adds an offset step to the query.
func (mdq *MajorDetailQuery) Offset(offset int) *MajorDetailQuery {
	mdq.offset = &offset
	return mdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mdq *MajorDetailQuery) Unique(unique bool) *MajorDetailQuery {
	mdq.unique = &unique
	return mdq
}

// Order adds an order step to the query.
func (mdq *MajorDetailQuery) Order(o ...OrderFunc) *MajorDetailQuery {
	mdq.order = append(mdq.order, o...)
	return mdq
}

// QueryMajorDetailTags chains the current query on the "major_detail_tags" edge.
func (mdq *MajorDetailQuery) QueryMajorDetailTags() *MajorDetailTagQuery {
	query := &MajorDetailTagQuery{config: mdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, selector),
			sqlgraph.To(majordetailtag.Table, majordetailtag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, majordetail.MajorDetailTagsTable, majordetail.MajorDetailTagsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCoverAttachment chains the current query on the "cover_attachment" edge.
func (mdq *MajorDetailQuery) QueryCoverAttachment() *AttachmentQuery {
	query := &AttachmentQuery{config: mdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, selector),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, majordetail.CoverAttachmentTable, majordetail.CoverAttachmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(mdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubjectAttachment chains the current query on the "subject_attachment" edge.
func (mdq *MajorDetailQuery) QuerySubjectAttachment() *AttachmentQuery {
	query := &AttachmentQuery{config: mdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, selector),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, majordetail.SubjectAttachmentTable, majordetail.SubjectAttachmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(mdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeacherAttachments chains the current query on the "teacher_attachments" edge.
func (mdq *MajorDetailQuery) QueryTeacherAttachments() *AttachmentQuery {
	query := &AttachmentQuery{config: mdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, selector),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, majordetail.TeacherAttachmentsTable, majordetail.TeacherAttachmentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(mdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServiceAttachments chains the current query on the "service_attachments" edge.
func (mdq *MajorDetailQuery) QueryServiceAttachments() *AttachmentQuery {
	query := &AttachmentQuery{config: mdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, selector),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, majordetail.ServiceAttachmentsTable, majordetail.ServiceAttachmentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(mdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMajor chains the current query on the "major" edge.
func (mdq *MajorDetailQuery) QueryMajor() *MajorQuery {
	query := &MajorQuery{config: mdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(majordetail.Table, majordetail.FieldID, selector),
			sqlgraph.To(major.Table, major.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, majordetail.MajorTable, majordetail.MajorColumn),
		)
		fromU = sqlgraph.SetNeighbors(mdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MajorDetail entity from the query.
// Returns a *NotFoundError when no MajorDetail was found.
func (mdq *MajorDetailQuery) First(ctx context.Context) (*MajorDetail, error) {
	nodes, err := mdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{majordetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mdq *MajorDetailQuery) FirstX(ctx context.Context) *MajorDetail {
	node, err := mdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MajorDetail ID from the query.
// Returns a *NotFoundError when no MajorDetail ID was found.
func (mdq *MajorDetailQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{majordetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mdq *MajorDetailQuery) FirstIDX(ctx context.Context) int {
	id, err := mdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MajorDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one MajorDetail entity is not found.
// Returns a *NotFoundError when no MajorDetail entities are found.
func (mdq *MajorDetailQuery) Only(ctx context.Context) (*MajorDetail, error) {
	nodes, err := mdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{majordetail.Label}
	default:
		return nil, &NotSingularError{majordetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mdq *MajorDetailQuery) OnlyX(ctx context.Context) *MajorDetail {
	node, err := mdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MajorDetail ID in the query.
// Returns a *NotSingularError when exactly one MajorDetail ID is not found.
// Returns a *NotFoundError when no entities are found.
func (mdq *MajorDetailQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{majordetail.Label}
	default:
		err = &NotSingularError{majordetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mdq *MajorDetailQuery) OnlyIDX(ctx context.Context) int {
	id, err := mdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MajorDetails.
func (mdq *MajorDetailQuery) All(ctx context.Context) ([]*MajorDetail, error) {
	if err := mdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mdq *MajorDetailQuery) AllX(ctx context.Context) []*MajorDetail {
	nodes, err := mdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MajorDetail IDs.
func (mdq *MajorDetailQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := mdq.Select(majordetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mdq *MajorDetailQuery) IDsX(ctx context.Context) []int {
	ids, err := mdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mdq *MajorDetailQuery) Count(ctx context.Context) (int, error) {
	if err := mdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mdq *MajorDetailQuery) CountX(ctx context.Context) int {
	count, err := mdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mdq *MajorDetailQuery) Exist(ctx context.Context) (bool, error) {
	if err := mdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mdq *MajorDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := mdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MajorDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mdq *MajorDetailQuery) Clone() *MajorDetailQuery {
	if mdq == nil {
		return nil
	}
	return &MajorDetailQuery{
		config:                 mdq.config,
		limit:                  mdq.limit,
		offset:                 mdq.offset,
		order:                  append([]OrderFunc{}, mdq.order...),
		predicates:             append([]predicate.MajorDetail{}, mdq.predicates...),
		withMajorDetailTags:    mdq.withMajorDetailTags.Clone(),
		withCoverAttachment:    mdq.withCoverAttachment.Clone(),
		withSubjectAttachment:  mdq.withSubjectAttachment.Clone(),
		withTeacherAttachments: mdq.withTeacherAttachments.Clone(),
		withServiceAttachments: mdq.withServiceAttachments.Clone(),
		withMajor:              mdq.withMajor.Clone(),
		// clone intermediate query.
		sql:  mdq.sql.Clone(),
		path: mdq.path,
	}
}

// WithMajorDetailTags tells the query-builder to eager-load the nodes that are connected to
// the "major_detail_tags" edge. The optional arguments are used to configure the query builder of the edge.
func (mdq *MajorDetailQuery) WithMajorDetailTags(opts ...func(*MajorDetailTagQuery)) *MajorDetailQuery {
	query := &MajorDetailTagQuery{config: mdq.config}
	for _, opt := range opts {
		opt(query)
	}
	mdq.withMajorDetailTags = query
	return mdq
}

// WithCoverAttachment tells the query-builder to eager-load the nodes that are connected to
// the "cover_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (mdq *MajorDetailQuery) WithCoverAttachment(opts ...func(*AttachmentQuery)) *MajorDetailQuery {
	query := &AttachmentQuery{config: mdq.config}
	for _, opt := range opts {
		opt(query)
	}
	mdq.withCoverAttachment = query
	return mdq
}

// WithSubjectAttachment tells the query-builder to eager-load the nodes that are connected to
// the "subject_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (mdq *MajorDetailQuery) WithSubjectAttachment(opts ...func(*AttachmentQuery)) *MajorDetailQuery {
	query := &AttachmentQuery{config: mdq.config}
	for _, opt := range opts {
		opt(query)
	}
	mdq.withSubjectAttachment = query
	return mdq
}

// WithTeacherAttachments tells the query-builder to eager-load the nodes that are connected to
// the "teacher_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (mdq *MajorDetailQuery) WithTeacherAttachments(opts ...func(*AttachmentQuery)) *MajorDetailQuery {
	query := &AttachmentQuery{config: mdq.config}
	for _, opt := range opts {
		opt(query)
	}
	mdq.withTeacherAttachments = query
	return mdq
}

// WithServiceAttachments tells the query-builder to eager-load the nodes that are connected to
// the "service_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (mdq *MajorDetailQuery) WithServiceAttachments(opts ...func(*AttachmentQuery)) *MajorDetailQuery {
	query := &AttachmentQuery{config: mdq.config}
	for _, opt := range opts {
		opt(query)
	}
	mdq.withServiceAttachments = query
	return mdq
}

// WithMajor tells the query-builder to eager-load the nodes that are connected to
// the "major" edge. The optional arguments are used to configure the query builder of the edge.
func (mdq *MajorDetailQuery) WithMajor(opts ...func(*MajorQuery)) *MajorDetailQuery {
	query := &MajorQuery{config: mdq.config}
	for _, opt := range opts {
		opt(query)
	}
	mdq.withMajor = query
	return mdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MajorDetail.Query().
//		GroupBy(majordetail.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mdq *MajorDetailQuery) GroupBy(field string, fields ...string) *MajorDetailGroupBy {
	group := &MajorDetailGroupBy{config: mdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mdq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.MajorDetail.Query().
//		Select(majordetail.FieldUUID).
//		Scan(ctx, &v)
//
func (mdq *MajorDetailQuery) Select(field string, fields ...string) *MajorDetailSelect {
	mdq.fields = append([]string{field}, fields...)
	return &MajorDetailSelect{MajorDetailQuery: mdq}
}

func (mdq *MajorDetailQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mdq.fields {
		if !majordetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mdq.path != nil {
		prev, err := mdq.path(ctx)
		if err != nil {
			return err
		}
		mdq.sql = prev
	}
	return nil
}

func (mdq *MajorDetailQuery) sqlAll(ctx context.Context) ([]*MajorDetail, error) {
	var (
		nodes       = []*MajorDetail{}
		_spec       = mdq.querySpec()
		loadedTypes = [6]bool{
			mdq.withMajorDetailTags != nil,
			mdq.withCoverAttachment != nil,
			mdq.withSubjectAttachment != nil,
			mdq.withTeacherAttachments != nil,
			mdq.withServiceAttachments != nil,
			mdq.withMajor != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MajorDetail{config: mdq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, mdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := mdq.withMajorDetailTags; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*MajorDetail)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MajorDetailTags = []*MajorDetailTag{}
		}
		query.Where(predicate.MajorDetailTag(func(s *sql.Selector) {
			s.Where(sql.InValues(majordetail.MajorDetailTagsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.MajorDetailID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "major_detail_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.MajorDetailTags = append(node.Edges.MajorDetailTags, n)
		}
	}

	if query := mdq.withCoverAttachment; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*MajorDetail)
		for i := range nodes {
			fk := nodes[i].CoverImgID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(attachment.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cover_img_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.CoverAttachment = n
			}
		}
	}

	if query := mdq.withSubjectAttachment; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*MajorDetail)
		for i := range nodes {
			fk := nodes[i].SubjectImgID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(attachment.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "subject_img_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SubjectAttachment = n
			}
		}
	}

	if query := mdq.withTeacherAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*MajorDetail, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.TeacherAttachments = []*Attachment{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*MajorDetail)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   majordetail.TeacherAttachmentsTable,
				Columns: majordetail.TeacherAttachmentsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(majordetail.TeacherAttachmentsPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, mdq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "teacher_attachments": %w`, err)
		}
		query.Where(attachment.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "teacher_attachments" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.TeacherAttachments = append(nodes[i].Edges.TeacherAttachments, n)
			}
		}
	}

	if query := mdq.withServiceAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*MajorDetail, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ServiceAttachments = []*Attachment{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*MajorDetail)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   majordetail.ServiceAttachmentsTable,
				Columns: majordetail.ServiceAttachmentsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(majordetail.ServiceAttachmentsPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, mdq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "service_attachments": %w`, err)
		}
		query.Where(attachment.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "service_attachments" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ServiceAttachments = append(nodes[i].Edges.ServiceAttachments, n)
			}
		}
	}

	if query := mdq.withMajor; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*MajorDetail)
		for i := range nodes {
			fk := nodes[i].MajorID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(major.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "major_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Major = n
			}
		}
	}

	return nodes, nil
}

func (mdq *MajorDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mdq.querySpec()
	return sqlgraph.CountNodes(ctx, mdq.driver, _spec)
}

func (mdq *MajorDetailQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mdq *MajorDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   majordetail.Table,
			Columns: majordetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: majordetail.FieldID,
			},
		},
		From:   mdq.sql,
		Unique: true,
	}
	if unique := mdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, majordetail.FieldID)
		for i := range fields {
			if fields[i] != majordetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mdq *MajorDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mdq.driver.Dialect())
	t1 := builder.Table(majordetail.Table)
	selector := builder.Select(t1.Columns(majordetail.Columns...)...).From(t1)
	if mdq.sql != nil {
		selector = mdq.sql
		selector.Select(selector.Columns(majordetail.Columns...)...)
	}
	for _, p := range mdq.predicates {
		p(selector)
	}
	for _, p := range mdq.order {
		p(selector)
	}
	if offset := mdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MajorDetailGroupBy is the group-by builder for MajorDetail entities.
type MajorDetailGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mdgb *MajorDetailGroupBy) Aggregate(fns ...AggregateFunc) *MajorDetailGroupBy {
	mdgb.fns = append(mdgb.fns, fns...)
	return mdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mdgb *MajorDetailGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mdgb.path(ctx)
	if err != nil {
		return err
	}
	mdgb.sql = query
	return mdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mdgb *MajorDetailGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (mdgb *MajorDetailGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mdgb.fields) > 1 {
		return nil, errors.New("ent: MajorDetailGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mdgb *MajorDetailGroupBy) StringsX(ctx context.Context) []string {
	v, err := mdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mdgb *MajorDetailGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{majordetail.Label}
	default:
		err = fmt.Errorf("ent: MajorDetailGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mdgb *MajorDetailGroupBy) StringX(ctx context.Context) string {
	v, err := mdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (mdgb *MajorDetailGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mdgb.fields) > 1 {
		return nil, errors.New("ent: MajorDetailGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mdgb *MajorDetailGroupBy) IntsX(ctx context.Context) []int {
	v, err := mdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mdgb *MajorDetailGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{majordetail.Label}
	default:
		err = fmt.Errorf("ent: MajorDetailGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mdgb *MajorDetailGroupBy) IntX(ctx context.Context) int {
	v, err := mdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (mdgb *MajorDetailGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mdgb.fields) > 1 {
		return nil, errors.New("ent: MajorDetailGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mdgb *MajorDetailGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mdgb *MajorDetailGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{majordetail.Label}
	default:
		err = fmt.Errorf("ent: MajorDetailGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mdgb *MajorDetailGroupBy) Float64X(ctx context.Context) float64 {
	v, err := mdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (mdgb *MajorDetailGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mdgb.fields) > 1 {
		return nil, errors.New("ent: MajorDetailGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mdgb *MajorDetailGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mdgb *MajorDetailGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{majordetail.Label}
	default:
		err = fmt.Errorf("ent: MajorDetailGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mdgb *MajorDetailGroupBy) BoolX(ctx context.Context) bool {
	v, err := mdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mdgb *MajorDetailGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mdgb.fields {
		if !majordetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mdgb *MajorDetailGroupBy) sqlQuery() *sql.Selector {
	selector := mdgb.sql
	columns := make([]string, 0, len(mdgb.fields)+len(mdgb.fns))
	columns = append(columns, mdgb.fields...)
	for _, fn := range mdgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(mdgb.fields...)
}

// MajorDetailSelect is the builder for selecting fields of MajorDetail entities.
type MajorDetailSelect struct {
	*MajorDetailQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (mds *MajorDetailSelect) Scan(ctx context.Context, v interface{}) error {
	if err := mds.prepareQuery(ctx); err != nil {
		return err
	}
	mds.sql = mds.MajorDetailQuery.sqlQuery(ctx)
	return mds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mds *MajorDetailSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (mds *MajorDetailSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mds.fields) > 1 {
		return nil, errors.New("ent: MajorDetailSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mds *MajorDetailSelect) StringsX(ctx context.Context) []string {
	v, err := mds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (mds *MajorDetailSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{majordetail.Label}
	default:
		err = fmt.Errorf("ent: MajorDetailSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mds *MajorDetailSelect) StringX(ctx context.Context) string {
	v, err := mds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (mds *MajorDetailSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mds.fields) > 1 {
		return nil, errors.New("ent: MajorDetailSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mds *MajorDetailSelect) IntsX(ctx context.Context) []int {
	v, err := mds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (mds *MajorDetailSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{majordetail.Label}
	default:
		err = fmt.Errorf("ent: MajorDetailSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mds *MajorDetailSelect) IntX(ctx context.Context) int {
	v, err := mds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (mds *MajorDetailSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mds.fields) > 1 {
		return nil, errors.New("ent: MajorDetailSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mds *MajorDetailSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (mds *MajorDetailSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{majordetail.Label}
	default:
		err = fmt.Errorf("ent: MajorDetailSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mds *MajorDetailSelect) Float64X(ctx context.Context) float64 {
	v, err := mds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (mds *MajorDetailSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mds.fields) > 1 {
		return nil, errors.New("ent: MajorDetailSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mds *MajorDetailSelect) BoolsX(ctx context.Context) []bool {
	v, err := mds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (mds *MajorDetailSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{majordetail.Label}
	default:
		err = fmt.Errorf("ent: MajorDetailSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mds *MajorDetailSelect) BoolX(ctx context.Context) bool {
	v, err := mds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mds *MajorDetailSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mds.sqlQuery().Query()
	if err := mds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mds *MajorDetailSelect) sqlQuery() sql.Querier {
	selector := mds.sql
	selector.Select(selector.Columns(mds.fields...)...)
	return selector
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/useraskanswer"
	"gserver/internal/store/ent/useraskanswerattachment"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAskAnswerAttachmentUpdate is the builder for updating UserAskAnswerAttachment entities.
type UserAskAnswerAttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *UserAskAnswerAttachmentMutation
}

// Where adds a new predicate for the UserAskAnswerAttachmentUpdate builder.
func (uaaau *UserAskAnswerAttachmentUpdate) Where(ps ...predicate.UserAskAnswerAttachment) *UserAskAnswerAttachmentUpdate {
	uaaau.mutation.predicates = append(uaaau.mutation.predicates, ps...)
	return uaaau
}

// SetAttachmentID sets the "attachment_id" field.
func (uaaau *UserAskAnswerAttachmentUpdate) SetAttachmentID(i int) *UserAskAnswerAttachmentUpdate {
	uaaau.mutation.ResetAttachmentID()
	uaaau.mutation.SetAttachmentID(i)
	return uaaau
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (uaaau *UserAskAnswerAttachmentUpdate) SetNillableAttachmentID(i *int) *UserAskAnswerAttachmentUpdate {
	if i != nil {
		uaaau.SetAttachmentID(*i)
	}
	return uaaau
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (uaaau *UserAskAnswerAttachmentUpdate) ClearAttachmentID() *UserAskAnswerAttachmentUpdate {
	uaaau.mutation.ClearAttachmentID()
	return uaaau
}

// SetAskID sets the "ask_id" field.
func (uaaau *UserAskAnswerAttachmentUpdate) SetAskID(i int) *UserAskAnswerAttachmentUpdate {
	uaaau.mutation.ResetAskID()
	uaaau.mutation.SetAskID(i)
	return uaaau
}

// SetNillableAskID sets the "ask_id" field if the given value is not nil.
func (uaaau *UserAskAnswerAttachmentUpdate) SetNillableAskID(i *int) *UserAskAnswerAttachmentUpdate {
	if i != nil {
		uaaau.SetAskID(*i)
	}
	return uaaau
}

// ClearAskID clears the value of the "ask_id" field.
func (uaaau *UserAskAnswerAttachmentUpdate) ClearAskID() *UserAskAnswerAttachmentUpdate {
	uaaau.mutation.ClearAskID()
	return uaaau
}

// SetType sets the "type" field.
func (uaaau *UserAskAnswerAttachmentUpdate) SetType(u uint8) *UserAskAnswerAttachmentUpdate {
	uaaau.mutation.ResetType()
	uaaau.mutation.SetType(u)
	return uaaau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uaaau *UserAskAnswerAttachmentUpdate) SetNillableType(u *uint8) *UserAskAnswerAttachmentUpdate {
	if u != nil {
		uaaau.SetType(*u)
	}
	return uaaau
}

// AddType adds u to the "type" field.
func (uaaau *UserAskAnswerAttachmentUpdate) AddType(u uint8) *UserAskAnswerAttachmentUpdate {
	uaaau.mutation.AddType(u)
	return uaaau
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (uaaau *UserAskAnswerAttachmentUpdate) SetAttachment(a *Attachment) *UserAskAnswerAttachmentUpdate {
	return uaaau.SetAttachmentID(a.ID)
}

// SetAsk sets the "ask" edge to the UserAskAnswer entity.
func (uaaau *UserAskAnswerAttachmentUpdate) SetAsk(u *UserAskAnswer) *UserAskAnswerAttachmentUpdate {
	return uaaau.SetAskID(u.ID)
}

// Mutation returns the UserAskAnswerAttachmentMutation object of the builder.
func (uaaau *UserAskAnswerAttachmentUpdate) Mutation() *UserAskAnswerAttachmentMutation {
	return uaaau.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (uaaau *UserAskAnswerAttachmentUpdate) ClearAttachment() *UserAskAnswerAttachmentUpdate {
	uaaau.mutation.ClearAttachment()
	return uaaau
}

// ClearAsk clears the "ask" edge to the UserAskAnswer entity.
func (uaaau *UserAskAnswerAttachmentUpdate) ClearAsk() *UserAskAnswerAttachmentUpdate {
	uaaau.mutation.ClearAsk()
	return uaaau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uaaau *UserAskAnswerAttachmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uaaau.hooks) == 0 {
		affected, err = uaaau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAskAnswerAttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uaaau.mutation = mutation
			affected, err = uaaau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uaaau.hooks) - 1; i >= 0; i-- {
			mut = uaaau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uaaau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uaaau *UserAskAnswerAttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := uaaau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uaaau *UserAskAnswerAttachmentUpdate) Exec(ctx context.Context) error {
	_, err := uaaau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaaau *UserAskAnswerAttachmentUpdate) ExecX(ctx context.Context) {
	if err := uaaau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uaaau *UserAskAnswerAttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useraskanswerattachment.Table,
			Columns: useraskanswerattachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useraskanswerattachment.FieldID,
			},
		},
	}
	if ps := uaaau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uaaau.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswerattachment.FieldType,
		})
	}
	if value, ok := uaaau.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswerattachment.FieldType,
		})
	}
	if uaaau.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswerattachment.AttachmentTable,
			Columns: []string{useraskanswerattachment.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaaau.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswerattachment.AttachmentTable,
			Columns: []string{useraskanswerattachment.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uaaau.mutation.AskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswerattachment.AskTable,
			Columns: []string{useraskanswerattachment.AskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaaau.mutation.AskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswerattachment.AskTable,
			Columns: []string{useraskanswerattachment.AskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uaaau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraskanswerattachment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserAskAnswerAttachmentUpdateOne is the builder for updating a single UserAskAnswerAttachment entity.
type UserAskAnswerAttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAskAnswerAttachmentMutation
}

// SetAttachmentID sets the "attachment_id" field.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) SetAttachmentID(i int) *UserAskAnswerAttachmentUpdateOne {
	uaaauo.mutation.ResetAttachmentID()
	uaaauo.mutation.SetAttachmentID(i)
	return uaaauo
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) SetNillableAttachmentID(i *int) *UserAskAnswerAttachmentUpdateOne {
	if i != nil {
		uaaauo.SetAttachmentID(*i)
	}
	return uaaauo
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) ClearAttachmentID() *UserAskAnswerAttachmentUpdateOne {
	uaaauo.mutation.ClearAttachmentID()
	return uaaauo
}

// SetAskID sets the "ask_id" field.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) SetAskID(i int) *UserAskAnswerAttachmentUpdateOne {
	uaaauo.mutation.ResetAskID()
	uaaauo.mutation.SetAskID(i)
	return uaaauo
}

// SetNillableAskID sets the "ask_id" field if the given value is not nil.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) SetNillableAskID(i *int) *UserAskAnswerAttachmentUpdateOne {
	if i != nil {
		uaaauo.SetAskID(*i)
	}
	return uaaauo
}

// ClearAskID clears the value of the "ask_id" field.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) ClearAskID() *UserAskAnswerAttachmentUpdateOne {
	uaaauo.mutation.ClearAskID()
	return uaaauo
}

// SetType sets the "type" field.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) SetType(u uint8) *UserAskAnswerAttachmentUpdateOne {
	uaaauo.mutation.ResetType()
	uaaauo.mutation.SetType(u)
	return uaaauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) SetNillableType(u *uint8) *UserAskAnswerAttachmentUpdateOne {
	if u != nil {
		uaaauo.SetType(*u)
	}
	return uaaauo
}

// AddType adds u to the "type" field.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) AddType(u uint8) *UserAskAnswerAttachmentUpdateOne {
	uaaauo.mutation.AddType(u)
	return uaaauo
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) SetAttachment(a *Attachment) *UserAskAnswerAttachmentUpdateOne {
	return uaaauo.SetAttachmentID(a.ID)
}

// SetAsk sets the "ask" edge to the UserAskAnswer entity.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) SetAsk(u *UserAskAnswer) *UserAskAnswerAttachmentUpdateOne {
	return uaaauo.SetAskID(u.ID)
}

// Mutation returns the UserAskAnswerAttachmentMutation object of the builder.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) Mutation() *UserAskAnswerAttachmentMutation {
	return uaaauo.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) ClearAttachment() *UserAskAnswerAttachmentUpdateOne {
	uaaauo.mutation.ClearAttachment()
	return uaaauo
}

// ClearAsk clears the "ask" edge to the UserAskAnswer entity.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) ClearAsk() *UserAskAnswerAttachmentUpdateOne {
	uaaauo.mutation.ClearAsk()
	return uaaauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) Select(field string, fields ...string) *UserAskAnswerAttachmentUpdateOne {
	uaaauo.fields = append([]string{field}, fields...)
	return uaaauo
}

// Save executes the query and returns the updated UserAskAnswerAttachment entity.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) Save(ctx context.Context) (*UserAskAnswerAttachment, error) {
	var (
		err  error
		node *UserAskAnswerAttachment
	)
	if len(uaaauo.hooks) == 0 {
		node, err = uaaauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAskAnswerAttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uaaauo.mutation = mutation
			node, err = uaaauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uaaauo.hooks) - 1; i >= 0; i-- {
			mut = uaaauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uaaauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) SaveX(ctx context.Context) *UserAskAnswerAttachment {
	node, err := uaaauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := uaaauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaaauo *UserAskAnswerAttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := uaaauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uaaauo *UserAskAnswerAttachmentUpdateOne) sqlSave(ctx context.Context) (_node *UserAskAnswerAttachment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useraskanswerattachment.Table,
			Columns: useraskanswerattachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useraskanswerattachment.FieldID,
			},
		},
	}
	id, ok := uaaauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserAskAnswerAttachment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uaaauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useraskanswerattachment.FieldID)
		for _, f := range fields {
			if !useraskanswerattachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useraskanswerattachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uaaauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uaaauo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswerattachment.FieldType,
		})
	}
	if value, ok := uaaauo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswerattachment.FieldType,
		})
	}
	if uaaauo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswerattachment.AttachmentTable,
			Columns: []string{useraskanswerattachment.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaaauo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswerattachment.AttachmentTable,
			Columns: []string{useraskanswerattachment.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uaaauo.mutation.AskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswerattachment.AskTable,
			Columns: []string{useraskanswerattachment.AskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaaauo.mutation.AskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswerattachment.AskTable,
			Columns: []string{useraskanswerattachment.AskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAskAnswerAttachment{config: uaaauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uaaauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraskanswerattachment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/level"
	"tkserver/internal/store/ent/tkquestionbank"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LevelCreate is the builder for creating a Level entity.
type LevelCreate struct {
	config
	mutation *LevelMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (lc *LevelCreate) SetUUID(s string) *LevelCreate {
	lc.mutation.SetUUID(s)
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LevelCreate) SetCreatedAt(t time.Time) *LevelCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LevelCreate) SetNillableCreatedAt(t *time.Time) *LevelCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LevelCreate) SetUpdatedAt(t time.Time) *LevelCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LevelCreate) SetNillableUpdatedAt(t *time.Time) *LevelCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetDeletedAt sets the "deleted_at" field.
func (lc *LevelCreate) SetDeletedAt(t time.Time) *LevelCreate {
	lc.mutation.SetDeletedAt(t)
	return lc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lc *LevelCreate) SetNillableDeletedAt(t *time.Time) *LevelCreate {
	if t != nil {
		lc.SetDeletedAt(*t)
	}
	return lc
}

// SetName sets the "name" field.
func (lc *LevelCreate) SetName(s string) *LevelCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lc *LevelCreate) SetNillableName(s *string) *LevelCreate {
	if s != nil {
		lc.SetName(*s)
	}
	return lc
}

// SetStatus sets the "status" field.
func (lc *LevelCreate) SetStatus(u uint8) *LevelCreate {
	lc.mutation.SetStatus(u)
	return lc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lc *LevelCreate) SetNillableStatus(u *uint8) *LevelCreate {
	if u != nil {
		lc.SetStatus(*u)
	}
	return lc
}

// SetCode sets the "code" field.
func (lc *LevelCreate) SetCode(s string) *LevelCreate {
	lc.mutation.SetCode(s)
	return lc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (lc *LevelCreate) SetNillableCode(s *string) *LevelCreate {
	if s != nil {
		lc.SetCode(*s)
	}
	return lc
}

// SetDesc sets the "desc" field.
func (lc *LevelCreate) SetDesc(s string) *LevelCreate {
	lc.mutation.SetDesc(s)
	return lc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (lc *LevelCreate) SetNillableDesc(s *string) *LevelCreate {
	if s != nil {
		lc.SetDesc(*s)
	}
	return lc
}

// SetSortOrder sets the "sort_order" field.
func (lc *LevelCreate) SetSortOrder(i int) *LevelCreate {
	lc.mutation.SetSortOrder(i)
	return lc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (lc *LevelCreate) SetNillableSortOrder(i *int) *LevelCreate {
	if i != nil {
		lc.SetSortOrder(*i)
	}
	return lc
}

// AddLevelQuestionBankIDs adds the "level_question_banks" edge to the TkQuestionBank entity by IDs.
func (lc *LevelCreate) AddLevelQuestionBankIDs(ids ...int) *LevelCreate {
	lc.mutation.AddLevelQuestionBankIDs(ids...)
	return lc
}

// AddLevelQuestionBanks adds the "level_question_banks" edges to the TkQuestionBank entity.
func (lc *LevelCreate) AddLevelQuestionBanks(t ...*TkQuestionBank) *LevelCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lc.AddLevelQuestionBankIDs(ids...)
}

// Mutation returns the LevelMutation object of the builder.
func (lc *LevelCreate) Mutation() *LevelMutation {
	return lc.mutation
}

// Save creates the Level in the database.
func (lc *LevelCreate) Save(ctx context.Context) (*Level, error) {
	var (
		err  error
		node *Level
	)
	lc.defaults()
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LevelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			node, err = lc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LevelCreate) SaveX(ctx context.Context) *Level {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (lc *LevelCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := level.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := level.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.Name(); !ok {
		v := level.DefaultName
		lc.mutation.SetName(v)
	}
	if _, ok := lc.mutation.Status(); !ok {
		v := level.DefaultStatus
		lc.mutation.SetStatus(v)
	}
	if _, ok := lc.mutation.Code(); !ok {
		v := level.DefaultCode
		lc.mutation.SetCode(v)
	}
	if _, ok := lc.mutation.Desc(); !ok {
		v := level.DefaultDesc
		lc.mutation.SetDesc(v)
	}
	if _, ok := lc.mutation.SortOrder(); !ok {
		v := level.DefaultSortOrder
		lc.mutation.SetSortOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LevelCreate) check() error {
	if _, ok := lc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := lc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := lc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := lc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New("ent: missing required field \"desc\"")}
	}
	if _, ok := lc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New("ent: missing required field \"sort_order\"")}
	}
	return nil
}

func (lc *LevelCreate) sqlSave(ctx context.Context) (*Level, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lc *LevelCreate) createSpec() (*Level, *sqlgraph.CreateSpec) {
	var (
		_node = &Level{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: level.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: level.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: level.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: level.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := lc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: level.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldName,
		})
		_node.Name = value
	}
	if value, ok := lc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: level.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := lc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := lc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := lc.mutation.SortOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: level.FieldSortOrder,
		})
		_node.SortOrder = value
	}
	if nodes := lc.mutation.LevelQuestionBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   level.LevelQuestionBanksTable,
			Columns: []string{level.LevelQuestionBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LevelCreateBulk is the builder for creating many Level entities in bulk.
type LevelCreateBulk struct {
	config
	builders []*LevelCreate
}

// Save creates the Level entities in the database.
func (lcb *LevelCreateBulk) Save(ctx context.Context) ([]*Level, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Level, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LevelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LevelCreateBulk) SaveX(ctx context.Context) []*Level {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

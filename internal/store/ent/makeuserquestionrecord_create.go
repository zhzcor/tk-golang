// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/makeuserquestionrecord"
	"gserver/internal/store/ent/tkexampaper"
	"gserver/internal/store/ent/tksection"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MakeUserQuestionRecordCreate is the builder for creating a MakeUserQuestionRecord entity.
type MakeUserQuestionRecordCreate struct {
	config
	mutation *MakeUserQuestionRecordMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (muqrc *MakeUserQuestionRecordCreate) SetUUID(s string) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetUUID(s)
	return muqrc
}

// SetCreatedAt sets the "created_at" field.
func (muqrc *MakeUserQuestionRecordCreate) SetCreatedAt(t time.Time) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetCreatedAt(t)
	return muqrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableCreatedAt(t *time.Time) *MakeUserQuestionRecordCreate {
	if t != nil {
		muqrc.SetCreatedAt(*t)
	}
	return muqrc
}

// SetUpdatedAt sets the "updated_at" field.
func (muqrc *MakeUserQuestionRecordCreate) SetUpdatedAt(t time.Time) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetUpdatedAt(t)
	return muqrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableUpdatedAt(t *time.Time) *MakeUserQuestionRecordCreate {
	if t != nil {
		muqrc.SetUpdatedAt(*t)
	}
	return muqrc
}

// SetDeletedAt sets the "deleted_at" field.
func (muqrc *MakeUserQuestionRecordCreate) SetDeletedAt(t time.Time) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetDeletedAt(t)
	return muqrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableDeletedAt(t *time.Time) *MakeUserQuestionRecordCreate {
	if t != nil {
		muqrc.SetDeletedAt(*t)
	}
	return muqrc
}

// SetUserID sets the "user_id" field.
func (muqrc *MakeUserQuestionRecordCreate) SetUserID(i int) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetUserID(i)
	return muqrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableUserID(i *int) *MakeUserQuestionRecordCreate {
	if i != nil {
		muqrc.SetUserID(*i)
	}
	return muqrc
}

// SetExamID sets the "exam_id" field.
func (muqrc *MakeUserQuestionRecordCreate) SetExamID(i int) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetExamID(i)
	return muqrc
}

// SetNillableExamID sets the "exam_id" field if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableExamID(i *int) *MakeUserQuestionRecordCreate {
	if i != nil {
		muqrc.SetExamID(*i)
	}
	return muqrc
}

// SetSecID sets the "sec_id" field.
func (muqrc *MakeUserQuestionRecordCreate) SetSecID(i int) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetSecID(i)
	return muqrc
}

// SetNillableSecID sets the "sec_id" field if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableSecID(i *int) *MakeUserQuestionRecordCreate {
	if i != nil {
		muqrc.SetSecID(*i)
	}
	return muqrc
}

// SetQuestionBankID sets the "question_bank_id" field.
func (muqrc *MakeUserQuestionRecordCreate) SetQuestionBankID(i int) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetQuestionBankID(i)
	return muqrc
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableQuestionBankID(i *int) *MakeUserQuestionRecordCreate {
	if i != nil {
		muqrc.SetQuestionBankID(*i)
	}
	return muqrc
}

// SetExamQuestionType sets the "exam_question_type" field.
func (muqrc *MakeUserQuestionRecordCreate) SetExamQuestionType(i int) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetExamQuestionType(i)
	return muqrc
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableExamQuestionType(i *int) *MakeUserQuestionRecordCreate {
	if i != nil {
		muqrc.SetExamQuestionType(*i)
	}
	return muqrc
}

// SetSectionID sets the "section" edge to the TkSection entity by ID.
func (muqrc *MakeUserQuestionRecordCreate) SetSectionID(id int) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetSectionID(id)
	return muqrc
}

// SetNillableSectionID sets the "section" edge to the TkSection entity by ID if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableSectionID(id *int) *MakeUserQuestionRecordCreate {
	if id != nil {
		muqrc = muqrc.SetSectionID(*id)
	}
	return muqrc
}

// SetSection sets the "section" edge to the TkSection entity.
func (muqrc *MakeUserQuestionRecordCreate) SetSection(t *TkSection) *MakeUserQuestionRecordCreate {
	return muqrc.SetSectionID(t.ID)
}

// SetExamPaperID sets the "exam_paper" edge to the TkExamPaper entity by ID.
func (muqrc *MakeUserQuestionRecordCreate) SetExamPaperID(id int) *MakeUserQuestionRecordCreate {
	muqrc.mutation.SetExamPaperID(id)
	return muqrc
}

// SetNillableExamPaperID sets the "exam_paper" edge to the TkExamPaper entity by ID if the given value is not nil.
func (muqrc *MakeUserQuestionRecordCreate) SetNillableExamPaperID(id *int) *MakeUserQuestionRecordCreate {
	if id != nil {
		muqrc = muqrc.SetExamPaperID(*id)
	}
	return muqrc
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (muqrc *MakeUserQuestionRecordCreate) SetExamPaper(t *TkExamPaper) *MakeUserQuestionRecordCreate {
	return muqrc.SetExamPaperID(t.ID)
}

// Mutation returns the MakeUserQuestionRecordMutation object of the builder.
func (muqrc *MakeUserQuestionRecordCreate) Mutation() *MakeUserQuestionRecordMutation {
	return muqrc.mutation
}

// Save creates the MakeUserQuestionRecord in the database.
func (muqrc *MakeUserQuestionRecordCreate) Save(ctx context.Context) (*MakeUserQuestionRecord, error) {
	var (
		err  error
		node *MakeUserQuestionRecord
	)
	muqrc.defaults()
	if len(muqrc.hooks) == 0 {
		if err = muqrc.check(); err != nil {
			return nil, err
		}
		node, err = muqrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MakeUserQuestionRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muqrc.check(); err != nil {
				return nil, err
			}
			muqrc.mutation = mutation
			node, err = muqrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muqrc.hooks) - 1; i >= 0; i-- {
			mut = muqrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muqrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (muqrc *MakeUserQuestionRecordCreate) SaveX(ctx context.Context) *MakeUserQuestionRecord {
	v, err := muqrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (muqrc *MakeUserQuestionRecordCreate) defaults() {
	if _, ok := muqrc.mutation.CreatedAt(); !ok {
		v := makeuserquestionrecord.DefaultCreatedAt()
		muqrc.mutation.SetCreatedAt(v)
	}
	if _, ok := muqrc.mutation.UpdatedAt(); !ok {
		v := makeuserquestionrecord.DefaultUpdatedAt()
		muqrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muqrc *MakeUserQuestionRecordCreate) check() error {
	if _, ok := muqrc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	return nil
}

func (muqrc *MakeUserQuestionRecordCreate) sqlSave(ctx context.Context) (*MakeUserQuestionRecord, error) {
	_node, _spec := muqrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, muqrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (muqrc *MakeUserQuestionRecordCreate) createSpec() (*MakeUserQuestionRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &MakeUserQuestionRecord{config: muqrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: makeuserquestionrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: makeuserquestionrecord.FieldID,
			},
		}
	)
	if value, ok := muqrc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: makeuserquestionrecord.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := muqrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: makeuserquestionrecord.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := muqrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: makeuserquestionrecord.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := muqrc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: makeuserquestionrecord.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := muqrc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := muqrc.mutation.QuestionBankID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldQuestionBankID,
		})
		_node.QuestionBankID = value
	}
	if value, ok := muqrc.mutation.ExamQuestionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldExamQuestionType,
		})
		_node.ExamQuestionType = value
	}
	if nodes := muqrc.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.SectionTable,
			Columns: []string{makeuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SecID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := muqrc.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.ExamPaperTable,
			Columns: []string{makeuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MakeUserQuestionRecordCreateBulk is the builder for creating many MakeUserQuestionRecord entities in bulk.
type MakeUserQuestionRecordCreateBulk struct {
	config
	builders []*MakeUserQuestionRecordCreate
}

// Save creates the MakeUserQuestionRecord entities in the database.
func (muqrcb *MakeUserQuestionRecordCreateBulk) Save(ctx context.Context) ([]*MakeUserQuestionRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(muqrcb.builders))
	nodes := make([]*MakeUserQuestionRecord, len(muqrcb.builders))
	mutators := make([]Mutator, len(muqrcb.builders))
	for i := range muqrcb.builders {
		func(i int, root context.Context) {
			builder := muqrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MakeUserQuestionRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, muqrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, muqrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, muqrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (muqrcb *MakeUserQuestionRecordCreateBulk) SaveX(ctx context.Context) []*MakeUserQuestionRecord {
	v, err := muqrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// ActivityApplyInfo is the client for interacting with the ActivityApplyInfo builders.
	ActivityApplyInfo *ActivityApplyInfoClient
	// ActivityType is the client for interacting with the ActivityType builders.
	ActivityType *ActivityTypeClient
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// AdminLoginLog is the client for interacting with the AdminLoginLog builders.
	AdminLoginLog *AdminLoginLogClient
	// AdminOperationLog is the client for interacting with the AdminOperationLog builders.
	AdminOperationLog *AdminOperationLogClient
	// Advertise is the client for interacting with the Advertise builders.
	Advertise *AdvertiseClient
	// AppAgreement is the client for interacting with the AppAgreement builders.
	AppAgreement *AppAgreementClient
	// AppVersion is the client for interacting with the AppVersion builders.
	AppVersion *AppVersionClient
	// Attachment is the client for interacting with the Attachment builders.
	Attachment *AttachmentClient
	// City is the client for interacting with the City builders.
	City *CityClient
	// Collection is the client for interacting with the Collection builders.
	Collection *CollectionClient
	// GroupCard is the client for interacting with the GroupCard builders.
	GroupCard *GroupCardClient
	// HotSearch is the client for interacting with the HotSearch builders.
	HotSearch *HotSearchClient
	// ImportTask is the client for interacting with the ImportTask builders.
	ImportTask *ImportTaskClient
	// InformationClassify is the client for interacting with the InformationClassify builders.
	InformationClassify *InformationClassifyClient
	// ItemCategory is the client for interacting with the ItemCategory builders.
	ItemCategory *ItemCategoryClient
	// KcClass is the client for interacting with the KcClass builders.
	KcClass *KcClassClient
	// KcClassTeacher is the client for interacting with the KcClassTeacher builders.
	KcClassTeacher *KcClassTeacherClient
	// KcCourse is the client for interacting with the KcCourse builders.
	KcCourse *KcCourseClient
	// KcCourseChapter is the client for interacting with the KcCourseChapter builders.
	KcCourseChapter *KcCourseChapterClient
	// KcCourseSection is the client for interacting with the KcCourseSection builders.
	KcCourseSection *KcCourseSectionClient
	// KcCourseSmallCategory is the client for interacting with the KcCourseSmallCategory builders.
	KcCourseSmallCategory *KcCourseSmallCategoryClient
	// KcCourseTeacher is the client for interacting with the KcCourseTeacher builders.
	KcCourseTeacher *KcCourseTeacherClient
	// KcCourseVideo is the client for interacting with the KcCourseVideo builders.
	KcCourseVideo *KcCourseVideoClient
	// KcSmallCategoryAttachment is the client for interacting with the KcSmallCategoryAttachment builders.
	KcSmallCategoryAttachment *KcSmallCategoryAttachmentClient
	// KcSmallCategoryExamPaper is the client for interacting with the KcSmallCategoryExamPaper builders.
	KcSmallCategoryExamPaper *KcSmallCategoryExamPaperClient
	// KcSmallCategoryQuestion is the client for interacting with the KcSmallCategoryQuestion builders.
	KcSmallCategoryQuestion *KcSmallCategoryQuestionClient
	// KcUserClass is the client for interacting with the KcUserClass builders.
	KcUserClass *KcUserClassClient
	// KcUserCourse is the client for interacting with the KcUserCourse builders.
	KcUserCourse *KcUserCourseClient
	// KcVideoUploadTask is the client for interacting with the KcVideoUploadTask builders.
	KcVideoUploadTask *KcVideoUploadTaskClient
	// Level is the client for interacting with the Level builders.
	Level *LevelClient
	// Major is the client for interacting with the Major builders.
	Major *MajorClient
	// MajorDetail is the client for interacting with the MajorDetail builders.
	MajorDetail *MajorDetailClient
	// MajorDetailTag is the client for interacting with the MajorDetailTag builders.
	MajorDetailTag *MajorDetailTagClient
	// MakeUserQuestionRecord is the client for interacting with the MakeUserQuestionRecord builders.
	MakeUserQuestionRecord *MakeUserQuestionRecordClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// MessageType is the client for interacting with the MessageType builders.
	MessageType *MessageTypeClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// RolePermission is the client for interacting with the RolePermission builders.
	RolePermission *RolePermissionClient
	// SharePoster is the client for interacting with the SharePoster builders.
	SharePoster *SharePosterClient
	// Teacher is the client for interacting with the Teacher builders.
	Teacher *TeacherClient
	// TeacherTag is the client for interacting with the TeacherTag builders.
	TeacherTag *TeacherTagClient
	// TkChapter is the client for interacting with the TkChapter builders.
	TkChapter *TkChapterClient
	// TkExamPaper is the client for interacting with the TkExamPaper builders.
	TkExamPaper *TkExamPaperClient
	// TkExamPaperPartition is the client for interacting with the TkExamPaperPartition builders.
	TkExamPaperPartition *TkExamPaperPartitionClient
	// TkExamPaperPartitionScore is the client for interacting with the TkExamPaperPartitionScore builders.
	TkExamPaperPartitionScore *TkExamPaperPartitionScoreClient
	// TkExamPaperSimulation is the client for interacting with the TkExamPaperSimulation builders.
	TkExamPaperSimulation *TkExamPaperSimulationClient
	// TkExamPartitionQuestionLink is the client for interacting with the TkExamPartitionQuestionLink builders.
	TkExamPartitionQuestionLink *TkExamPartitionQuestionLinkClient
	// TkExamQuestionType is the client for interacting with the TkExamQuestionType builders.
	TkExamQuestionType *TkExamQuestionTypeClient
	// TkKnowledgePoint is the client for interacting with the TkKnowledgePoint builders.
	TkKnowledgePoint *TkKnowledgePointClient
	// TkQuestion is the client for interacting with the TkQuestion builders.
	TkQuestion *TkQuestionClient
	// TkQuestionAnswerOption is the client for interacting with the TkQuestionAnswerOption builders.
	TkQuestionAnswerOption *TkQuestionAnswerOptionClient
	// TkQuestionBank is the client for interacting with the TkQuestionBank builders.
	TkQuestionBank *TkQuestionBankClient
	// TkQuestionBankCity is the client for interacting with the TkQuestionBankCity builders.
	TkQuestionBankCity *TkQuestionBankCityClient
	// TkQuestionBankMajor is the client for interacting with the TkQuestionBankMajor builders.
	TkQuestionBankMajor *TkQuestionBankMajorClient
	// TkQuestionErrorFeedback is the client for interacting with the TkQuestionErrorFeedback builders.
	TkQuestionErrorFeedback *TkQuestionErrorFeedbackClient
	// TkQuestionSection is the client for interacting with the TkQuestionSection builders.
	TkQuestionSection *TkQuestionSectionClient
	// TkSection is the client for interacting with the TkSection builders.
	TkSection *TkSectionClient
	// TkUserExamScoreRecord is the client for interacting with the TkUserExamScoreRecord builders.
	TkUserExamScoreRecord *TkUserExamScoreRecordClient
	// TkUserQuestionBankRecord is the client for interacting with the TkUserQuestionBankRecord builders.
	TkUserQuestionBankRecord *TkUserQuestionBankRecordClient
	// TkUserQuestionRecord is the client for interacting with the TkUserQuestionRecord builders.
	TkUserQuestionRecord *TkUserQuestionRecordClient
	// TkUserRandomExamRecode is the client for interacting with the TkUserRandomExamRecode builders.
	TkUserRandomExamRecode *TkUserRandomExamRecodeClient
	// TkUserSimulationTeacherMark is the client for interacting with the TkUserSimulationTeacherMark builders.
	TkUserSimulationTeacherMark *TkUserSimulationTeacherMarkClient
	// TkUserWrongQuestionRecode is the client for interacting with the TkUserWrongQuestionRecode builders.
	TkUserWrongQuestionRecode *TkUserWrongQuestionRecodeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserAskAnswer is the client for interacting with the UserAskAnswer builders.
	UserAskAnswer *UserAskAnswerClient
	// UserAskAnswerAttachment is the client for interacting with the UserAskAnswerAttachment builders.
	UserAskAnswerAttachment *UserAskAnswerAttachmentClient
	// UserCourseAppraise is the client for interacting with the UserCourseAppraise builders.
	UserCourseAppraise *UserCourseAppraiseClient
	// UserLoginLog is the client for interacting with the UserLoginLog builders.
	UserLoginLog *UserLoginLogClient
	// VideoRecord is the client for interacting with the VideoRecord builders.
	VideoRecord *VideoRecordClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once

	// completion callbacks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook

	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Committer method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	tx.mu.Lock()
	hooks := append([]CommitHook(nil), tx.onCommit...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onCommit = append(tx.onCommit, f)
}

type (
	// Rollbacker is the interface that wraps the Rollbacker method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	tx.mu.Lock()
	hooks := append([]RollbackHook(nil), tx.onRollback...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onRollback = append(tx.onRollback, f)
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.Activity = NewActivityClient(tx.config)
	tx.ActivityApplyInfo = NewActivityApplyInfoClient(tx.config)
	tx.ActivityType = NewActivityTypeClient(tx.config)
	tx.Admin = NewAdminClient(tx.config)
	tx.AdminLoginLog = NewAdminLoginLogClient(tx.config)
	tx.AdminOperationLog = NewAdminOperationLogClient(tx.config)
	tx.Advertise = NewAdvertiseClient(tx.config)
	tx.AppAgreement = NewAppAgreementClient(tx.config)
	tx.AppVersion = NewAppVersionClient(tx.config)
	tx.Attachment = NewAttachmentClient(tx.config)
	tx.City = NewCityClient(tx.config)
	tx.Collection = NewCollectionClient(tx.config)
	tx.GroupCard = NewGroupCardClient(tx.config)
	tx.HotSearch = NewHotSearchClient(tx.config)
	tx.ImportTask = NewImportTaskClient(tx.config)
	tx.InformationClassify = NewInformationClassifyClient(tx.config)
	tx.ItemCategory = NewItemCategoryClient(tx.config)
	tx.KcClass = NewKcClassClient(tx.config)
	tx.KcClassTeacher = NewKcClassTeacherClient(tx.config)
	tx.KcCourse = NewKcCourseClient(tx.config)
	tx.KcCourseChapter = NewKcCourseChapterClient(tx.config)
	tx.KcCourseSection = NewKcCourseSectionClient(tx.config)
	tx.KcCourseSmallCategory = NewKcCourseSmallCategoryClient(tx.config)
	tx.KcCourseTeacher = NewKcCourseTeacherClient(tx.config)
	tx.KcCourseVideo = NewKcCourseVideoClient(tx.config)
	tx.KcSmallCategoryAttachment = NewKcSmallCategoryAttachmentClient(tx.config)
	tx.KcSmallCategoryExamPaper = NewKcSmallCategoryExamPaperClient(tx.config)
	tx.KcSmallCategoryQuestion = NewKcSmallCategoryQuestionClient(tx.config)
	tx.KcUserClass = NewKcUserClassClient(tx.config)
	tx.KcUserCourse = NewKcUserCourseClient(tx.config)
	tx.KcVideoUploadTask = NewKcVideoUploadTaskClient(tx.config)
	tx.Level = NewLevelClient(tx.config)
	tx.Major = NewMajorClient(tx.config)
	tx.MajorDetail = NewMajorDetailClient(tx.config)
	tx.MajorDetailTag = NewMajorDetailTagClient(tx.config)
	tx.MakeUserQuestionRecord = NewMakeUserQuestionRecordClient(tx.config)
	tx.Message = NewMessageClient(tx.config)
	tx.MessageType = NewMessageTypeClient(tx.config)
	tx.Permission = NewPermissionClient(tx.config)
	tx.Role = NewRoleClient(tx.config)
	tx.RolePermission = NewRolePermissionClient(tx.config)
	tx.SharePoster = NewSharePosterClient(tx.config)
	tx.Teacher = NewTeacherClient(tx.config)
	tx.TeacherTag = NewTeacherTagClient(tx.config)
	tx.TkChapter = NewTkChapterClient(tx.config)
	tx.TkExamPaper = NewTkExamPaperClient(tx.config)
	tx.TkExamPaperPartition = NewTkExamPaperPartitionClient(tx.config)
	tx.TkExamPaperPartitionScore = NewTkExamPaperPartitionScoreClient(tx.config)
	tx.TkExamPaperSimulation = NewTkExamPaperSimulationClient(tx.config)
	tx.TkExamPartitionQuestionLink = NewTkExamPartitionQuestionLinkClient(tx.config)
	tx.TkExamQuestionType = NewTkExamQuestionTypeClient(tx.config)
	tx.TkKnowledgePoint = NewTkKnowledgePointClient(tx.config)
	tx.TkQuestion = NewTkQuestionClient(tx.config)
	tx.TkQuestionAnswerOption = NewTkQuestionAnswerOptionClient(tx.config)
	tx.TkQuestionBank = NewTkQuestionBankClient(tx.config)
	tx.TkQuestionBankCity = NewTkQuestionBankCityClient(tx.config)
	tx.TkQuestionBankMajor = NewTkQuestionBankMajorClient(tx.config)
	tx.TkQuestionErrorFeedback = NewTkQuestionErrorFeedbackClient(tx.config)
	tx.TkQuestionSection = NewTkQuestionSectionClient(tx.config)
	tx.TkSection = NewTkSectionClient(tx.config)
	tx.TkUserExamScoreRecord = NewTkUserExamScoreRecordClient(tx.config)
	tx.TkUserQuestionBankRecord = NewTkUserQuestionBankRecordClient(tx.config)
	tx.TkUserQuestionRecord = NewTkUserQuestionRecordClient(tx.config)
	tx.TkUserRandomExamRecode = NewTkUserRandomExamRecodeClient(tx.config)
	tx.TkUserSimulationTeacherMark = NewTkUserSimulationTeacherMarkClient(tx.config)
	tx.TkUserWrongQuestionRecode = NewTkUserWrongQuestionRecodeClient(tx.config)
	tx.User = NewUserClient(tx.config)
	tx.UserAskAnswer = NewUserAskAnswerClient(tx.config)
	tx.UserAskAnswerAttachment = NewUserAskAnswerAttachmentClient(tx.config)
	tx.UserCourseAppraise = NewUserCourseAppraiseClient(tx.config)
	tx.UserLoginLog = NewUserLoginLogClient(tx.config)
	tx.VideoRecord = NewVideoRecordClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: Activity.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)

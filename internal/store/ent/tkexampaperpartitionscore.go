// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/tkexampaperpartition"
	"gserver/internal/store/ent/tkexampaperpartitionscore"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TkExamPaperPartitionScore is the model entity for the TkExamPaperPartitionScore schema.
type TkExamPaperPartitionScore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// SingeSelect holds the value of the "singe_select" field.
	// 单选题分值
	SingeSelect uint8 `json:"singe_select"`
	// JudgeQuestion holds the value of the "judge_question" field.
	// 判断题分值
	JudgeQuestion uint8 `json:"judge_question"`
	// MultiSelect holds the value of the "multi_select" field.
	// 多选题分值
	MultiSelect uint8 `json:"multi_select"`
	// ShorterAnswer holds the value of the "shorter_answer" field.
	// 简答题分值
	ShorterAnswer uint8 `json:"shorter_answer"`
	// MaterialQuestion holds the value of the "material_question" field.
	// 材料题分值
	MaterialQuestion uint8 `json:"material_question"`
	// SingeSelectCount holds the value of the "singe_select_count" field.
	// 单选题数量
	SingeSelectCount uint8 `json:"singe_select_count"`
	// JudgeQuestionCount holds the value of the "judge_question_count" field.
	// 判断题数量
	JudgeQuestionCount uint8 `json:"judge_question_count"`
	// MultiSelectCount holds the value of the "multi_select_count" field.
	// 多选题数量
	MultiSelectCount uint8 `json:"multi_select_count"`
	// ShorterAnswerCount holds the value of the "shorter_answer_count" field.
	// 简答题数量
	ShorterAnswerCount uint8 `json:"shorter_answer_count"`
	// MaterialQuestionCount holds the value of the "material_question_count" field.
	// 材料题数量
	MaterialQuestionCount uint8 `json:"material_question_count"`
	// ExamPaperPartitionID holds the value of the "exam_paper_partition_id" field.
	// 试卷子部分id
	ExamPaperPartitionID int `json:"exam_paper_partition_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkExamPaperPartitionScoreQuery when eager-loading is set.
	Edges TkExamPaperPartitionScoreEdges `json:"edges"`
}

// TkExamPaperPartitionScoreEdges holds the relations/edges for other nodes in the graph.
type TkExamPaperPartitionScoreEdges struct {
	// ExamPaperPartition holds the value of the exam_paper_partition edge.
	ExamPaperPartition *TkExamPaperPartition `json:"exam_paper_partition,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExamPaperPartitionOrErr returns the ExamPaperPartition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkExamPaperPartitionScoreEdges) ExamPaperPartitionOrErr() (*TkExamPaperPartition, error) {
	if e.loadedTypes[0] {
		if e.ExamPaperPartition == nil {
			// The edge exam_paper_partition was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkexampaperpartition.Label}
		}
		return e.ExamPaperPartition, nil
	}
	return nil, &NotLoadedError{edge: "exam_paper_partition"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkExamPaperPartitionScore) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkexampaperpartitionscore.FieldID, tkexampaperpartitionscore.FieldSingeSelect, tkexampaperpartitionscore.FieldJudgeQuestion, tkexampaperpartitionscore.FieldMultiSelect, tkexampaperpartitionscore.FieldShorterAnswer, tkexampaperpartitionscore.FieldMaterialQuestion, tkexampaperpartitionscore.FieldSingeSelectCount, tkexampaperpartitionscore.FieldJudgeQuestionCount, tkexampaperpartitionscore.FieldMultiSelectCount, tkexampaperpartitionscore.FieldShorterAnswerCount, tkexampaperpartitionscore.FieldMaterialQuestionCount, tkexampaperpartitionscore.FieldExamPaperPartitionID:
			values[i] = new(sql.NullInt64)
		case tkexampaperpartitionscore.FieldUUID:
			values[i] = new(sql.NullString)
		case tkexampaperpartitionscore.FieldCreatedAt, tkexampaperpartitionscore.FieldUpdatedAt, tkexampaperpartitionscore.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkExamPaperPartitionScore", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkExamPaperPartitionScore fields.
func (tepps *TkExamPaperPartitionScore) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkexampaperpartitionscore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tepps.ID = int(value.Int64)
		case tkexampaperpartitionscore.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tepps.UUID = value.String
			}
		case tkexampaperpartitionscore.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tepps.CreatedAt = new(time.Time)
				*tepps.CreatedAt = value.Time
			}
		case tkexampaperpartitionscore.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tepps.UpdatedAt = new(time.Time)
				*tepps.UpdatedAt = value.Time
			}
		case tkexampaperpartitionscore.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tepps.DeletedAt = new(time.Time)
				*tepps.DeletedAt = value.Time
			}
		case tkexampaperpartitionscore.FieldSingeSelect:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field singe_select", values[i])
			} else if value.Valid {
				tepps.SingeSelect = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldJudgeQuestion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field judge_question", values[i])
			} else if value.Valid {
				tepps.JudgeQuestion = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldMultiSelect:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field multi_select", values[i])
			} else if value.Valid {
				tepps.MultiSelect = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldShorterAnswer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shorter_answer", values[i])
			} else if value.Valid {
				tepps.ShorterAnswer = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldMaterialQuestion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field material_question", values[i])
			} else if value.Valid {
				tepps.MaterialQuestion = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldSingeSelectCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field singe_select_count", values[i])
			} else if value.Valid {
				tepps.SingeSelectCount = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldJudgeQuestionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field judge_question_count", values[i])
			} else if value.Valid {
				tepps.JudgeQuestionCount = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldMultiSelectCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field multi_select_count", values[i])
			} else if value.Valid {
				tepps.MultiSelectCount = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldShorterAnswerCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shorter_answer_count", values[i])
			} else if value.Valid {
				tepps.ShorterAnswerCount = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldMaterialQuestionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field material_question_count", values[i])
			} else if value.Valid {
				tepps.MaterialQuestionCount = uint8(value.Int64)
			}
		case tkexampaperpartitionscore.FieldExamPaperPartitionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_paper_partition_id", values[i])
			} else if value.Valid {
				tepps.ExamPaperPartitionID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryExamPaperPartition queries the "exam_paper_partition" edge of the TkExamPaperPartitionScore entity.
func (tepps *TkExamPaperPartitionScore) QueryExamPaperPartition() *TkExamPaperPartitionQuery {
	return (&TkExamPaperPartitionScoreClient{config: tepps.config}).QueryExamPaperPartition(tepps)
}

// Update returns a builder for updating this TkExamPaperPartitionScore.
// Note that you need to call TkExamPaperPartitionScore.Unwrap() before calling this method if this TkExamPaperPartitionScore
// was returned from a transaction, and the transaction was committed or rolled back.
func (tepps *TkExamPaperPartitionScore) Update() *TkExamPaperPartitionScoreUpdateOne {
	return (&TkExamPaperPartitionScoreClient{config: tepps.config}).UpdateOne(tepps)
}

// Unwrap unwraps the TkExamPaperPartitionScore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tepps *TkExamPaperPartitionScore) Unwrap() *TkExamPaperPartitionScore {
	tx, ok := tepps.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkExamPaperPartitionScore is not a transactional entity")
	}
	tepps.config.driver = tx.drv
	return tepps
}

// String implements the fmt.Stringer.
func (tepps *TkExamPaperPartitionScore) String() string {
	var builder strings.Builder
	builder.WriteString("TkExamPaperPartitionScore(")
	builder.WriteString(fmt.Sprintf("id=%v", tepps.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tepps.UUID)
	if v := tepps.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tepps.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tepps.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", singe_select=")
	builder.WriteString(fmt.Sprintf("%v", tepps.SingeSelect))
	builder.WriteString(", judge_question=")
	builder.WriteString(fmt.Sprintf("%v", tepps.JudgeQuestion))
	builder.WriteString(", multi_select=")
	builder.WriteString(fmt.Sprintf("%v", tepps.MultiSelect))
	builder.WriteString(", shorter_answer=")
	builder.WriteString(fmt.Sprintf("%v", tepps.ShorterAnswer))
	builder.WriteString(", material_question=")
	builder.WriteString(fmt.Sprintf("%v", tepps.MaterialQuestion))
	builder.WriteString(", singe_select_count=")
	builder.WriteString(fmt.Sprintf("%v", tepps.SingeSelectCount))
	builder.WriteString(", judge_question_count=")
	builder.WriteString(fmt.Sprintf("%v", tepps.JudgeQuestionCount))
	builder.WriteString(", multi_select_count=")
	builder.WriteString(fmt.Sprintf("%v", tepps.MultiSelectCount))
	builder.WriteString(", shorter_answer_count=")
	builder.WriteString(fmt.Sprintf("%v", tepps.ShorterAnswerCount))
	builder.WriteString(", material_question_count=")
	builder.WriteString(fmt.Sprintf("%v", tepps.MaterialQuestionCount))
	builder.WriteString(", exam_paper_partition_id=")
	builder.WriteString(fmt.Sprintf("%v", tepps.ExamPaperPartitionID))
	builder.WriteByte(')')
	return builder.String()
}

// TkExamPaperPartitionScores is a parsable slice of TkExamPaperPartitionScore.
type TkExamPaperPartitionScores []*TkExamPaperPartitionScore

func (tepps TkExamPaperPartitionScores) config(cfg config) {
	for _i := range tepps {
		tepps[_i].config = cfg
	}
}

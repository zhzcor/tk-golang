// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/tkquestion"
	"gserver/internal/store/ent/tkquestionansweroption"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionAnswerOptionCreate is the builder for creating a TkQuestionAnswerOption entity.
type TkQuestionAnswerOptionCreate struct {
	config
	mutation *TkQuestionAnswerOptionMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tqaoc *TkQuestionAnswerOptionCreate) SetUUID(s string) *TkQuestionAnswerOptionCreate {
	tqaoc.mutation.SetUUID(s)
	return tqaoc
}

// SetCreatedAt sets the "created_at" field.
func (tqaoc *TkQuestionAnswerOptionCreate) SetCreatedAt(t time.Time) *TkQuestionAnswerOptionCreate {
	tqaoc.mutation.SetCreatedAt(t)
	return tqaoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqaoc *TkQuestionAnswerOptionCreate) SetNillableCreatedAt(t *time.Time) *TkQuestionAnswerOptionCreate {
	if t != nil {
		tqaoc.SetCreatedAt(*t)
	}
	return tqaoc
}

// SetUpdatedAt sets the "updated_at" field.
func (tqaoc *TkQuestionAnswerOptionCreate) SetUpdatedAt(t time.Time) *TkQuestionAnswerOptionCreate {
	tqaoc.mutation.SetUpdatedAt(t)
	return tqaoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tqaoc *TkQuestionAnswerOptionCreate) SetNillableUpdatedAt(t *time.Time) *TkQuestionAnswerOptionCreate {
	if t != nil {
		tqaoc.SetUpdatedAt(*t)
	}
	return tqaoc
}

// SetDeletedAt sets the "deleted_at" field.
func (tqaoc *TkQuestionAnswerOptionCreate) SetDeletedAt(t time.Time) *TkQuestionAnswerOptionCreate {
	tqaoc.mutation.SetDeletedAt(t)
	return tqaoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqaoc *TkQuestionAnswerOptionCreate) SetNillableDeletedAt(t *time.Time) *TkQuestionAnswerOptionCreate {
	if t != nil {
		tqaoc.SetDeletedAt(*t)
	}
	return tqaoc
}

// SetOptionName sets the "option_name" field.
func (tqaoc *TkQuestionAnswerOptionCreate) SetOptionName(s string) *TkQuestionAnswerOptionCreate {
	tqaoc.mutation.SetOptionName(s)
	return tqaoc
}

// SetNillableOptionName sets the "option_name" field if the given value is not nil.
func (tqaoc *TkQuestionAnswerOptionCreate) SetNillableOptionName(s *string) *TkQuestionAnswerOptionCreate {
	if s != nil {
		tqaoc.SetOptionName(*s)
	}
	return tqaoc
}

// SetContent sets the "content" field.
func (tqaoc *TkQuestionAnswerOptionCreate) SetContent(s string) *TkQuestionAnswerOptionCreate {
	tqaoc.mutation.SetContent(s)
	return tqaoc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tqaoc *TkQuestionAnswerOptionCreate) SetNillableContent(s *string) *TkQuestionAnswerOptionCreate {
	if s != nil {
		tqaoc.SetContent(*s)
	}
	return tqaoc
}

// SetIsRight sets the "is_right" field.
func (tqaoc *TkQuestionAnswerOptionCreate) SetIsRight(u uint8) *TkQuestionAnswerOptionCreate {
	tqaoc.mutation.SetIsRight(u)
	return tqaoc
}

// SetNillableIsRight sets the "is_right" field if the given value is not nil.
func (tqaoc *TkQuestionAnswerOptionCreate) SetNillableIsRight(u *uint8) *TkQuestionAnswerOptionCreate {
	if u != nil {
		tqaoc.SetIsRight(*u)
	}
	return tqaoc
}

// SetQuestionID sets the "question_id" field.
func (tqaoc *TkQuestionAnswerOptionCreate) SetQuestionID(i int) *TkQuestionAnswerOptionCreate {
	tqaoc.mutation.SetQuestionID(i)
	return tqaoc
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqaoc *TkQuestionAnswerOptionCreate) SetNillableQuestionID(i *int) *TkQuestionAnswerOptionCreate {
	if i != nil {
		tqaoc.SetQuestionID(*i)
	}
	return tqaoc
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tqaoc *TkQuestionAnswerOptionCreate) SetQuestion(t *TkQuestion) *TkQuestionAnswerOptionCreate {
	return tqaoc.SetQuestionID(t.ID)
}

// Mutation returns the TkQuestionAnswerOptionMutation object of the builder.
func (tqaoc *TkQuestionAnswerOptionCreate) Mutation() *TkQuestionAnswerOptionMutation {
	return tqaoc.mutation
}

// Save creates the TkQuestionAnswerOption in the database.
func (tqaoc *TkQuestionAnswerOptionCreate) Save(ctx context.Context) (*TkQuestionAnswerOption, error) {
	var (
		err  error
		node *TkQuestionAnswerOption
	)
	tqaoc.defaults()
	if len(tqaoc.hooks) == 0 {
		if err = tqaoc.check(); err != nil {
			return nil, err
		}
		node, err = tqaoc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionAnswerOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tqaoc.check(); err != nil {
				return nil, err
			}
			tqaoc.mutation = mutation
			node, err = tqaoc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tqaoc.hooks) - 1; i >= 0; i-- {
			mut = tqaoc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqaoc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tqaoc *TkQuestionAnswerOptionCreate) SaveX(ctx context.Context) *TkQuestionAnswerOption {
	v, err := tqaoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tqaoc *TkQuestionAnswerOptionCreate) defaults() {
	if _, ok := tqaoc.mutation.CreatedAt(); !ok {
		v := tkquestionansweroption.DefaultCreatedAt()
		tqaoc.mutation.SetCreatedAt(v)
	}
	if _, ok := tqaoc.mutation.UpdatedAt(); !ok {
		v := tkquestionansweroption.DefaultUpdatedAt()
		tqaoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tqaoc.mutation.OptionName(); !ok {
		v := tkquestionansweroption.DefaultOptionName
		tqaoc.mutation.SetOptionName(v)
	}
	if _, ok := tqaoc.mutation.Content(); !ok {
		v := tkquestionansweroption.DefaultContent
		tqaoc.mutation.SetContent(v)
	}
	if _, ok := tqaoc.mutation.IsRight(); !ok {
		v := tkquestionansweroption.DefaultIsRight
		tqaoc.mutation.SetIsRight(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tqaoc *TkQuestionAnswerOptionCreate) check() error {
	if _, ok := tqaoc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tqaoc.mutation.OptionName(); !ok {
		return &ValidationError{Name: "option_name", err: errors.New("ent: missing required field \"option_name\"")}
	}
	if _, ok := tqaoc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New("ent: missing required field \"content\"")}
	}
	if _, ok := tqaoc.mutation.IsRight(); !ok {
		return &ValidationError{Name: "is_right", err: errors.New("ent: missing required field \"is_right\"")}
	}
	return nil
}

func (tqaoc *TkQuestionAnswerOptionCreate) sqlSave(ctx context.Context) (*TkQuestionAnswerOption, error) {
	_node, _spec := tqaoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tqaoc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tqaoc *TkQuestionAnswerOptionCreate) createSpec() (*TkQuestionAnswerOption, *sqlgraph.CreateSpec) {
	var (
		_node = &TkQuestionAnswerOption{config: tqaoc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkquestionansweroption.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionansweroption.FieldID,
			},
		}
	)
	if value, ok := tqaoc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionansweroption.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tqaoc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionansweroption.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tqaoc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionansweroption.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tqaoc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionansweroption.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tqaoc.mutation.OptionName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionansweroption.FieldOptionName,
		})
		_node.OptionName = value
	}
	if value, ok := tqaoc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionansweroption.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := tqaoc.mutation.IsRight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkquestionansweroption.FieldIsRight,
		})
		_node.IsRight = value
	}
	if nodes := tqaoc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionansweroption.QuestionTable,
			Columns: []string{tkquestionansweroption.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkQuestionAnswerOptionCreateBulk is the builder for creating many TkQuestionAnswerOption entities in bulk.
type TkQuestionAnswerOptionCreateBulk struct {
	config
	builders []*TkQuestionAnswerOptionCreate
}

// Save creates the TkQuestionAnswerOption entities in the database.
func (tqaocb *TkQuestionAnswerOptionCreateBulk) Save(ctx context.Context) ([]*TkQuestionAnswerOption, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tqaocb.builders))
	nodes := make([]*TkQuestionAnswerOption, len(tqaocb.builders))
	mutators := make([]Mutator, len(tqaocb.builders))
	for i := range tqaocb.builders {
		func(i int, root context.Context) {
			builder := tqaocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkQuestionAnswerOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tqaocb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tqaocb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tqaocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tqaocb *TkQuestionAnswerOptionCreateBulk) SaveX(ctx context.Context) []*TkQuestionAnswerOption {
	v, err := tqaocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/useraskanswer"
	"gserver/internal/store/ent/useraskanswerattachment"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// UserAskAnswerAttachment is the model entity for the UserAskAnswerAttachment schema.
type UserAskAnswerAttachment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AttachmentID holds the value of the "attachment_id" field.
	// 问答附件id
	AttachmentID int `json:"attachment_id"`
	// AskID holds the value of the "ask_id" field.
	// 问答id
	AskID int `json:"ask_id"`
	// Type holds the value of the "type" field.
	// 图片类型 1：学生提问，2：老师回复
	Type uint8 `json:"type"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAskAnswerAttachmentQuery when eager-loading is set.
	Edges UserAskAnswerAttachmentEdges `json:"edges"`
}

// UserAskAnswerAttachmentEdges holds the relations/edges for other nodes in the graph.
type UserAskAnswerAttachmentEdges struct {
	// Attachment holds the value of the attachment edge.
	Attachment *Attachment `json:"attachment,omitempty"`
	// Ask holds the value of the ask edge.
	Ask *UserAskAnswer `json:"ask,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttachmentOrErr returns the Attachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAskAnswerAttachmentEdges) AttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[0] {
		if e.Attachment == nil {
			// The edge attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.Attachment, nil
	}
	return nil, &NotLoadedError{edge: "attachment"}
}

// AskOrErr returns the Ask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAskAnswerAttachmentEdges) AskOrErr() (*UserAskAnswer, error) {
	if e.loadedTypes[1] {
		if e.Ask == nil {
			// The edge ask was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: useraskanswer.Label}
		}
		return e.Ask, nil
	}
	return nil, &NotLoadedError{edge: "ask"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAskAnswerAttachment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case useraskanswerattachment.FieldID, useraskanswerattachment.FieldAttachmentID, useraskanswerattachment.FieldAskID, useraskanswerattachment.FieldType:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserAskAnswerAttachment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAskAnswerAttachment fields.
func (uaaa *UserAskAnswerAttachment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useraskanswerattachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uaaa.ID = int(value.Int64)
		case useraskanswerattachment.FieldAttachmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_id", values[i])
			} else if value.Valid {
				uaaa.AttachmentID = int(value.Int64)
			}
		case useraskanswerattachment.FieldAskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ask_id", values[i])
			} else if value.Valid {
				uaaa.AskID = int(value.Int64)
			}
		case useraskanswerattachment.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				uaaa.Type = uint8(value.Int64)
			}
		}
	}
	return nil
}

// QueryAttachment queries the "attachment" edge of the UserAskAnswerAttachment entity.
func (uaaa *UserAskAnswerAttachment) QueryAttachment() *AttachmentQuery {
	return (&UserAskAnswerAttachmentClient{config: uaaa.config}).QueryAttachment(uaaa)
}

// QueryAsk queries the "ask" edge of the UserAskAnswerAttachment entity.
func (uaaa *UserAskAnswerAttachment) QueryAsk() *UserAskAnswerQuery {
	return (&UserAskAnswerAttachmentClient{config: uaaa.config}).QueryAsk(uaaa)
}

// Update returns a builder for updating this UserAskAnswerAttachment.
// Note that you need to call UserAskAnswerAttachment.Unwrap() before calling this method if this UserAskAnswerAttachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (uaaa *UserAskAnswerAttachment) Update() *UserAskAnswerAttachmentUpdateOne {
	return (&UserAskAnswerAttachmentClient{config: uaaa.config}).UpdateOne(uaaa)
}

// Unwrap unwraps the UserAskAnswerAttachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uaaa *UserAskAnswerAttachment) Unwrap() *UserAskAnswerAttachment {
	tx, ok := uaaa.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAskAnswerAttachment is not a transactional entity")
	}
	uaaa.config.driver = tx.drv
	return uaaa
}

// String implements the fmt.Stringer.
func (uaaa *UserAskAnswerAttachment) String() string {
	var builder strings.Builder
	builder.WriteString("UserAskAnswerAttachment(")
	builder.WriteString(fmt.Sprintf("id=%v", uaaa.ID))
	builder.WriteString(", attachment_id=")
	builder.WriteString(fmt.Sprintf("%v", uaaa.AttachmentID))
	builder.WriteString(", ask_id=")
	builder.WriteString(fmt.Sprintf("%v", uaaa.AskID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", uaaa.Type))
	builder.WriteByte(')')
	return builder.String()
}

// UserAskAnswerAttachments is a parsable slice of UserAskAnswerAttachment.
type UserAskAnswerAttachments []*UserAskAnswerAttachment

func (uaaa UserAskAnswerAttachments) config(cfg config) {
	for _i := range uaaa {
		uaaa[_i].config = cfg
	}
}

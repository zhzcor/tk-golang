// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/kcsmallcategoryexampaper"
	"tkserver/internal/store/ent/makeuserquestionrecord"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkexampaperpartition"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkuserexamscorerecord"
	"tkserver/internal/store/ent/tkuserquestionrecord"
	"tkserver/internal/store/ent/tkuserrandomexamrecode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperQuery is the builder for querying TkExamPaper entities.
type TkExamPaperQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TkExamPaper
	// eager-loading edges.
	withQuestionBank         *TkQuestionBankQuery
	withAdmin                *AdminQuery
	withExamPartitions       *TkExamPaperPartitionQuery
	withMakeUserQuestionExam *MakeUserQuestionRecordQuery
	withUserExamPapers       *TkUserExamScoreRecordQuery
	withCourseExamPapers     *KcSmallCategoryExamPaperQuery
	withExamPaperRecords     *TkUserQuestionRecordQuery
	withUserRandomExam       *TkUserRandomExamRecodeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TkExamPaperQuery builder.
func (tepq *TkExamPaperQuery) Where(ps ...predicate.TkExamPaper) *TkExamPaperQuery {
	tepq.predicates = append(tepq.predicates, ps...)
	return tepq
}

// Limit adds a limit step to the query.
func (tepq *TkExamPaperQuery) Limit(limit int) *TkExamPaperQuery {
	tepq.limit = &limit
	return tepq
}

// Offset adds an offset step to the query.
func (tepq *TkExamPaperQuery) Offset(offset int) *TkExamPaperQuery {
	tepq.offset = &offset
	return tepq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tepq *TkExamPaperQuery) Unique(unique bool) *TkExamPaperQuery {
	tepq.unique = &unique
	return tepq
}

// Order adds an order step to the query.
func (tepq *TkExamPaperQuery) Order(o ...OrderFunc) *TkExamPaperQuery {
	tepq.order = append(tepq.order, o...)
	return tepq
}

// QueryQuestionBank chains the current query on the "question_bank" edge.
func (tepq *TkExamPaperQuery) QueryQuestionBank() *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: tepq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, selector),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexampaper.QuestionBankTable, tkexampaper.QuestionBankColumn),
		)
		fromU = sqlgraph.SetNeighbors(tepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdmin chains the current query on the "admin" edge.
func (tepq *TkExamPaperQuery) QueryAdmin() *AdminQuery {
	query := &AdminQuery{config: tepq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkexampaper.AdminTable, tkexampaper.AdminColumn),
		)
		fromU = sqlgraph.SetNeighbors(tepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamPartitions chains the current query on the "exam_partitions" edge.
func (tepq *TkExamPaperQuery) QueryExamPartitions() *TkExamPaperPartitionQuery {
	query := &TkExamPaperPartitionQuery{config: tepq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, selector),
			sqlgraph.To(tkexampaperpartition.Table, tkexampaperpartition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.ExamPartitionsTable, tkexampaper.ExamPartitionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMakeUserQuestionExam chains the current query on the "make_user_question_exam" edge.
func (tepq *TkExamPaperQuery) QueryMakeUserQuestionExam() *MakeUserQuestionRecordQuery {
	query := &MakeUserQuestionRecordQuery{config: tepq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, selector),
			sqlgraph.To(makeuserquestionrecord.Table, makeuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.MakeUserQuestionExamTable, tkexampaper.MakeUserQuestionExamColumn),
		)
		fromU = sqlgraph.SetNeighbors(tepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserExamPapers chains the current query on the "user_exam_papers" edge.
func (tepq *TkExamPaperQuery) QueryUserExamPapers() *TkUserExamScoreRecordQuery {
	query := &TkUserExamScoreRecordQuery{config: tepq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, selector),
			sqlgraph.To(tkuserexamscorerecord.Table, tkuserexamscorerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.UserExamPapersTable, tkexampaper.UserExamPapersColumn),
		)
		fromU = sqlgraph.SetNeighbors(tepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourseExamPapers chains the current query on the "course_exam_papers" edge.
func (tepq *TkExamPaperQuery) QueryCourseExamPapers() *KcSmallCategoryExamPaperQuery {
	query := &KcSmallCategoryExamPaperQuery{config: tepq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, selector),
			sqlgraph.To(kcsmallcategoryexampaper.Table, kcsmallcategoryexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.CourseExamPapersTable, tkexampaper.CourseExamPapersColumn),
		)
		fromU = sqlgraph.SetNeighbors(tepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamPaperRecords chains the current query on the "exam_paper_records" edge.
func (tepq *TkExamPaperQuery) QueryExamPaperRecords() *TkUserQuestionRecordQuery {
	query := &TkUserQuestionRecordQuery{config: tepq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, selector),
			sqlgraph.To(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.ExamPaperRecordsTable, tkexampaper.ExamPaperRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserRandomExam chains the current query on the "user_random_exam" edge.
func (tepq *TkExamPaperQuery) QueryUserRandomExam() *TkUserRandomExamRecodeQuery {
	query := &TkUserRandomExamRecodeQuery{config: tepq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkexampaper.Table, tkexampaper.FieldID, selector),
			sqlgraph.To(tkuserrandomexamrecode.Table, tkuserrandomexamrecode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkexampaper.UserRandomExamTable, tkexampaper.UserRandomExamColumn),
		)
		fromU = sqlgraph.SetNeighbors(tepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TkExamPaper entity from the query.
// Returns a *NotFoundError when no TkExamPaper was found.
func (tepq *TkExamPaperQuery) First(ctx context.Context) (*TkExamPaper, error) {
	nodes, err := tepq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tkexampaper.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tepq *TkExamPaperQuery) FirstX(ctx context.Context) *TkExamPaper {
	node, err := tepq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TkExamPaper ID from the query.
// Returns a *NotFoundError when no TkExamPaper ID was found.
func (tepq *TkExamPaperQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tepq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tkexampaper.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tepq *TkExamPaperQuery) FirstIDX(ctx context.Context) int {
	id, err := tepq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TkExamPaper entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TkExamPaper entity is not found.
// Returns a *NotFoundError when no TkExamPaper entities are found.
func (tepq *TkExamPaperQuery) Only(ctx context.Context) (*TkExamPaper, error) {
	nodes, err := tepq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tkexampaper.Label}
	default:
		return nil, &NotSingularError{tkexampaper.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tepq *TkExamPaperQuery) OnlyX(ctx context.Context) *TkExamPaper {
	node, err := tepq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TkExamPaper ID in the query.
// Returns a *NotSingularError when exactly one TkExamPaper ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tepq *TkExamPaperQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tepq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tkexampaper.Label}
	default:
		err = &NotSingularError{tkexampaper.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tepq *TkExamPaperQuery) OnlyIDX(ctx context.Context) int {
	id, err := tepq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TkExamPapers.
func (tepq *TkExamPaperQuery) All(ctx context.Context) ([]*TkExamPaper, error) {
	if err := tepq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tepq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tepq *TkExamPaperQuery) AllX(ctx context.Context) []*TkExamPaper {
	nodes, err := tepq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TkExamPaper IDs.
func (tepq *TkExamPaperQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tepq.Select(tkexampaper.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tepq *TkExamPaperQuery) IDsX(ctx context.Context) []int {
	ids, err := tepq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tepq *TkExamPaperQuery) Count(ctx context.Context) (int, error) {
	if err := tepq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tepq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tepq *TkExamPaperQuery) CountX(ctx context.Context) int {
	count, err := tepq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tepq *TkExamPaperQuery) Exist(ctx context.Context) (bool, error) {
	if err := tepq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tepq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tepq *TkExamPaperQuery) ExistX(ctx context.Context) bool {
	exist, err := tepq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TkExamPaperQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tepq *TkExamPaperQuery) Clone() *TkExamPaperQuery {
	if tepq == nil {
		return nil
	}
	return &TkExamPaperQuery{
		config:                   tepq.config,
		limit:                    tepq.limit,
		offset:                   tepq.offset,
		order:                    append([]OrderFunc{}, tepq.order...),
		predicates:               append([]predicate.TkExamPaper{}, tepq.predicates...),
		withQuestionBank:         tepq.withQuestionBank.Clone(),
		withAdmin:                tepq.withAdmin.Clone(),
		withExamPartitions:       tepq.withExamPartitions.Clone(),
		withMakeUserQuestionExam: tepq.withMakeUserQuestionExam.Clone(),
		withUserExamPapers:       tepq.withUserExamPapers.Clone(),
		withCourseExamPapers:     tepq.withCourseExamPapers.Clone(),
		withExamPaperRecords:     tepq.withExamPaperRecords.Clone(),
		withUserRandomExam:       tepq.withUserRandomExam.Clone(),
		// clone intermediate query.
		sql:  tepq.sql.Clone(),
		path: tepq.path,
	}
}

// WithQuestionBank tells the query-builder to eager-load the nodes that are connected to
// the "question_bank" edge. The optional arguments are used to configure the query builder of the edge.
func (tepq *TkExamPaperQuery) WithQuestionBank(opts ...func(*TkQuestionBankQuery)) *TkExamPaperQuery {
	query := &TkQuestionBankQuery{config: tepq.config}
	for _, opt := range opts {
		opt(query)
	}
	tepq.withQuestionBank = query
	return tepq
}

// WithAdmin tells the query-builder to eager-load the nodes that are connected to
// the "admin" edge. The optional arguments are used to configure the query builder of the edge.
func (tepq *TkExamPaperQuery) WithAdmin(opts ...func(*AdminQuery)) *TkExamPaperQuery {
	query := &AdminQuery{config: tepq.config}
	for _, opt := range opts {
		opt(query)
	}
	tepq.withAdmin = query
	return tepq
}

// WithExamPartitions tells the query-builder to eager-load the nodes that are connected to
// the "exam_partitions" edge. The optional arguments are used to configure the query builder of the edge.
func (tepq *TkExamPaperQuery) WithExamPartitions(opts ...func(*TkExamPaperPartitionQuery)) *TkExamPaperQuery {
	query := &TkExamPaperPartitionQuery{config: tepq.config}
	for _, opt := range opts {
		opt(query)
	}
	tepq.withExamPartitions = query
	return tepq
}

// WithMakeUserQuestionExam tells the query-builder to eager-load the nodes that are connected to
// the "make_user_question_exam" edge. The optional arguments are used to configure the query builder of the edge.
func (tepq *TkExamPaperQuery) WithMakeUserQuestionExam(opts ...func(*MakeUserQuestionRecordQuery)) *TkExamPaperQuery {
	query := &MakeUserQuestionRecordQuery{config: tepq.config}
	for _, opt := range opts {
		opt(query)
	}
	tepq.withMakeUserQuestionExam = query
	return tepq
}

// WithUserExamPapers tells the query-builder to eager-load the nodes that are connected to
// the "user_exam_papers" edge. The optional arguments are used to configure the query builder of the edge.
func (tepq *TkExamPaperQuery) WithUserExamPapers(opts ...func(*TkUserExamScoreRecordQuery)) *TkExamPaperQuery {
	query := &TkUserExamScoreRecordQuery{config: tepq.config}
	for _, opt := range opts {
		opt(query)
	}
	tepq.withUserExamPapers = query
	return tepq
}

// WithCourseExamPapers tells the query-builder to eager-load the nodes that are connected to
// the "course_exam_papers" edge. The optional arguments are used to configure the query builder of the edge.
func (tepq *TkExamPaperQuery) WithCourseExamPapers(opts ...func(*KcSmallCategoryExamPaperQuery)) *TkExamPaperQuery {
	query := &KcSmallCategoryExamPaperQuery{config: tepq.config}
	for _, opt := range opts {
		opt(query)
	}
	tepq.withCourseExamPapers = query
	return tepq
}

// WithExamPaperRecords tells the query-builder to eager-load the nodes that are connected to
// the "exam_paper_records" edge. The optional arguments are used to configure the query builder of the edge.
func (tepq *TkExamPaperQuery) WithExamPaperRecords(opts ...func(*TkUserQuestionRecordQuery)) *TkExamPaperQuery {
	query := &TkUserQuestionRecordQuery{config: tepq.config}
	for _, opt := range opts {
		opt(query)
	}
	tepq.withExamPaperRecords = query
	return tepq
}

// WithUserRandomExam tells the query-builder to eager-load the nodes that are connected to
// the "user_random_exam" edge. The optional arguments are used to configure the query builder of the edge.
func (tepq *TkExamPaperQuery) WithUserRandomExam(opts ...func(*TkUserRandomExamRecodeQuery)) *TkExamPaperQuery {
	query := &TkUserRandomExamRecodeQuery{config: tepq.config}
	for _, opt := range opts {
		opt(query)
	}
	tepq.withUserRandomExam = query
	return tepq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TkExamPaper.Query().
//		GroupBy(tkexampaper.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tepq *TkExamPaperQuery) GroupBy(field string, fields ...string) *TkExamPaperGroupBy {
	group := &TkExamPaperGroupBy{config: tepq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tepq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.TkExamPaper.Query().
//		Select(tkexampaper.FieldUUID).
//		Scan(ctx, &v)
//
func (tepq *TkExamPaperQuery) Select(field string, fields ...string) *TkExamPaperSelect {
	tepq.fields = append([]string{field}, fields...)
	return &TkExamPaperSelect{TkExamPaperQuery: tepq}
}

func (tepq *TkExamPaperQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tepq.fields {
		if !tkexampaper.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tepq.path != nil {
		prev, err := tepq.path(ctx)
		if err != nil {
			return err
		}
		tepq.sql = prev
	}
	return nil
}

func (tepq *TkExamPaperQuery) sqlAll(ctx context.Context) ([]*TkExamPaper, error) {
	var (
		nodes       = []*TkExamPaper{}
		_spec       = tepq.querySpec()
		loadedTypes = [8]bool{
			tepq.withQuestionBank != nil,
			tepq.withAdmin != nil,
			tepq.withExamPartitions != nil,
			tepq.withMakeUserQuestionExam != nil,
			tepq.withUserExamPapers != nil,
			tepq.withCourseExamPapers != nil,
			tepq.withExamPaperRecords != nil,
			tepq.withUserRandomExam != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TkExamPaper{config: tepq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tepq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tepq.withQuestionBank; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkExamPaper)
		for i := range nodes {
			fk := nodes[i].QuestionBankID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tkquestionbank.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.QuestionBank = n
			}
		}
	}

	if query := tepq.withAdmin; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkExamPaper)
		for i := range nodes {
			fk := nodes[i].CreatedAdminID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(admin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "created_admin_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Admin = n
			}
		}
	}

	if query := tepq.withExamPartitions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkExamPaper)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ExamPartitions = []*TkExamPaperPartition{}
		}
		query.Where(predicate.TkExamPaperPartition(func(s *sql.Selector) {
			s.Where(sql.InValues(tkexampaper.ExamPartitionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ExamPaperID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "exam_paper_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ExamPartitions = append(node.Edges.ExamPartitions, n)
		}
	}

	if query := tepq.withMakeUserQuestionExam; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkExamPaper)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MakeUserQuestionExam = []*MakeUserQuestionRecord{}
		}
		query.Where(predicate.MakeUserQuestionRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(tkexampaper.MakeUserQuestionExamColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ExamID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "exam_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.MakeUserQuestionExam = append(node.Edges.MakeUserQuestionExam, n)
		}
	}

	if query := tepq.withUserExamPapers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkExamPaper)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserExamPapers = []*TkUserExamScoreRecord{}
		}
		query.Where(predicate.TkUserExamScoreRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(tkexampaper.UserExamPapersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ExamPaperID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "exam_paper_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserExamPapers = append(node.Edges.UserExamPapers, n)
		}
	}

	if query := tepq.withCourseExamPapers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkExamPaper)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CourseExamPapers = []*KcSmallCategoryExamPaper{}
		}
		query.Where(predicate.KcSmallCategoryExamPaper(func(s *sql.Selector) {
			s.Where(sql.InValues(tkexampaper.CourseExamPapersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ExamPaperID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "exam_paper_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CourseExamPapers = append(node.Edges.CourseExamPapers, n)
		}
	}

	if query := tepq.withExamPaperRecords; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkExamPaper)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ExamPaperRecords = []*TkUserQuestionRecord{}
		}
		query.Where(predicate.TkUserQuestionRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(tkexampaper.ExamPaperRecordsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ExamPaperID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "exam_paper_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ExamPaperRecords = append(node.Edges.ExamPaperRecords, n)
		}
	}

	if query := tepq.withUserRandomExam; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkExamPaper)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserRandomExam = []*TkUserRandomExamRecode{}
		}
		query.Where(predicate.TkUserRandomExamRecode(func(s *sql.Selector) {
			s.Where(sql.InValues(tkexampaper.UserRandomExamColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ExamID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "exam_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserRandomExam = append(node.Edges.UserRandomExam, n)
		}
	}

	return nodes, nil
}

func (tepq *TkExamPaperQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tepq.querySpec()
	return sqlgraph.CountNodes(ctx, tepq.driver, _spec)
}

func (tepq *TkExamPaperQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tepq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tepq *TkExamPaperQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampaper.Table,
			Columns: tkexampaper.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaper.FieldID,
			},
		},
		From:   tepq.sql,
		Unique: true,
	}
	if unique := tepq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tepq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkexampaper.FieldID)
		for i := range fields {
			if fields[i] != tkexampaper.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tepq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tepq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tepq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tepq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tepq *TkExamPaperQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tepq.driver.Dialect())
	t1 := builder.Table(tkexampaper.Table)
	selector := builder.Select(t1.Columns(tkexampaper.Columns...)...).From(t1)
	if tepq.sql != nil {
		selector = tepq.sql
		selector.Select(selector.Columns(tkexampaper.Columns...)...)
	}
	for _, p := range tepq.predicates {
		p(selector)
	}
	for _, p := range tepq.order {
		p(selector)
	}
	if offset := tepq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tepq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TkExamPaperGroupBy is the group-by builder for TkExamPaper entities.
type TkExamPaperGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tepgb *TkExamPaperGroupBy) Aggregate(fns ...AggregateFunc) *TkExamPaperGroupBy {
	tepgb.fns = append(tepgb.fns, fns...)
	return tepgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tepgb *TkExamPaperGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tepgb.path(ctx)
	if err != nil {
		return err
	}
	tepgb.sql = query
	return tepgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tepgb *TkExamPaperGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tepgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tepgb *TkExamPaperGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tepgb.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tepgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tepgb *TkExamPaperGroupBy) StringsX(ctx context.Context) []string {
	v, err := tepgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tepgb *TkExamPaperGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tepgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaper.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tepgb *TkExamPaperGroupBy) StringX(ctx context.Context) string {
	v, err := tepgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tepgb *TkExamPaperGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tepgb.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tepgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tepgb *TkExamPaperGroupBy) IntsX(ctx context.Context) []int {
	v, err := tepgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tepgb *TkExamPaperGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tepgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaper.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tepgb *TkExamPaperGroupBy) IntX(ctx context.Context) int {
	v, err := tepgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tepgb *TkExamPaperGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tepgb.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tepgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tepgb *TkExamPaperGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tepgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tepgb *TkExamPaperGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tepgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaper.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tepgb *TkExamPaperGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tepgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tepgb *TkExamPaperGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tepgb.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tepgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tepgb *TkExamPaperGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tepgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tepgb *TkExamPaperGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tepgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaper.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tepgb *TkExamPaperGroupBy) BoolX(ctx context.Context) bool {
	v, err := tepgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tepgb *TkExamPaperGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tepgb.fields {
		if !tkexampaper.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tepgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tepgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tepgb *TkExamPaperGroupBy) sqlQuery() *sql.Selector {
	selector := tepgb.sql
	columns := make([]string, 0, len(tepgb.fields)+len(tepgb.fns))
	columns = append(columns, tepgb.fields...)
	for _, fn := range tepgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(tepgb.fields...)
}

// TkExamPaperSelect is the builder for selecting fields of TkExamPaper entities.
type TkExamPaperSelect struct {
	*TkExamPaperQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (teps *TkExamPaperSelect) Scan(ctx context.Context, v interface{}) error {
	if err := teps.prepareQuery(ctx); err != nil {
		return err
	}
	teps.sql = teps.TkExamPaperQuery.sqlQuery(ctx)
	return teps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (teps *TkExamPaperSelect) ScanX(ctx context.Context, v interface{}) {
	if err := teps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (teps *TkExamPaperSelect) Strings(ctx context.Context) ([]string, error) {
	if len(teps.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := teps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (teps *TkExamPaperSelect) StringsX(ctx context.Context) []string {
	v, err := teps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (teps *TkExamPaperSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = teps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaper.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (teps *TkExamPaperSelect) StringX(ctx context.Context) string {
	v, err := teps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (teps *TkExamPaperSelect) Ints(ctx context.Context) ([]int, error) {
	if len(teps.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := teps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (teps *TkExamPaperSelect) IntsX(ctx context.Context) []int {
	v, err := teps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (teps *TkExamPaperSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = teps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaper.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (teps *TkExamPaperSelect) IntX(ctx context.Context) int {
	v, err := teps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (teps *TkExamPaperSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(teps.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := teps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (teps *TkExamPaperSelect) Float64sX(ctx context.Context) []float64 {
	v, err := teps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (teps *TkExamPaperSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = teps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaper.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (teps *TkExamPaperSelect) Float64X(ctx context.Context) float64 {
	v, err := teps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (teps *TkExamPaperSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(teps.fields) > 1 {
		return nil, errors.New("ent: TkExamPaperSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := teps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (teps *TkExamPaperSelect) BoolsX(ctx context.Context) []bool {
	v, err := teps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (teps *TkExamPaperSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = teps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkexampaper.Label}
	default:
		err = fmt.Errorf("ent: TkExamPaperSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (teps *TkExamPaperSelect) BoolX(ctx context.Context) bool {
	v, err := teps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (teps *TkExamPaperSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := teps.sqlQuery().Query()
	if err := teps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (teps *TkExamPaperSelect) sqlQuery() sql.Querier {
	selector := teps.sql
	selector.Select(selector.Columns(teps.fields...)...)
	return selector
}

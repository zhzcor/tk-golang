// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kcsmallcategoryquestion"
	"tkserver/internal/store/ent/tkquestion"

	"entgo.io/ent/dialect/sql"
)

// KcSmallCategoryQuestion is the model entity for the KcSmallCategoryQuestion schema.
type KcSmallCategoryQuestion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// QuestionID holds the value of the "question_id" field.
	// 题目id
	QuestionID int `json:"question_id"`
	// SmallCategoryID holds the value of the "small_category_id" field.
	// 课时id
	SmallCategoryID int `json:"small_category_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KcSmallCategoryQuestionQuery when eager-loading is set.
	Edges KcSmallCategoryQuestionEdges `json:"edges"`
}

// KcSmallCategoryQuestionEdges holds the relations/edges for other nodes in the graph.
type KcSmallCategoryQuestionEdges struct {
	// Question holds the value of the question edge.
	Question *TkQuestion `json:"question,omitempty"`
	// CourseSmallCategory holds the value of the course_small_category edge.
	CourseSmallCategory *KcCourseSmallCategory `json:"course_small_category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcSmallCategoryQuestionEdges) QuestionOrErr() (*TkQuestion, error) {
	if e.loadedTypes[0] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestion.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// CourseSmallCategoryOrErr returns the CourseSmallCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcSmallCategoryQuestionEdges) CourseSmallCategoryOrErr() (*KcCourseSmallCategory, error) {
	if e.loadedTypes[1] {
		if e.CourseSmallCategory == nil {
			// The edge course_small_category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccoursesmallcategory.Label}
		}
		return e.CourseSmallCategory, nil
	}
	return nil, &NotLoadedError{edge: "course_small_category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KcSmallCategoryQuestion) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kcsmallcategoryquestion.FieldID, kcsmallcategoryquestion.FieldQuestionID, kcsmallcategoryquestion.FieldSmallCategoryID:
			values[i] = new(sql.NullInt64)
		case kcsmallcategoryquestion.FieldUUID:
			values[i] = new(sql.NullString)
		case kcsmallcategoryquestion.FieldCreatedAt, kcsmallcategoryquestion.FieldUpdatedAt, kcsmallcategoryquestion.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KcSmallCategoryQuestion", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KcSmallCategoryQuestion fields.
func (kscq *KcSmallCategoryQuestion) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kcsmallcategoryquestion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kscq.ID = int(value.Int64)
		case kcsmallcategoryquestion.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				kscq.UUID = value.String
			}
		case kcsmallcategoryquestion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kscq.CreatedAt = new(time.Time)
				*kscq.CreatedAt = value.Time
			}
		case kcsmallcategoryquestion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kscq.UpdatedAt = new(time.Time)
				*kscq.UpdatedAt = value.Time
			}
		case kcsmallcategoryquestion.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				kscq.DeletedAt = new(time.Time)
				*kscq.DeletedAt = value.Time
			}
		case kcsmallcategoryquestion.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				kscq.QuestionID = int(value.Int64)
			}
		case kcsmallcategoryquestion.FieldSmallCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field small_category_id", values[i])
			} else if value.Valid {
				kscq.SmallCategoryID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestion queries the "question" edge of the KcSmallCategoryQuestion entity.
func (kscq *KcSmallCategoryQuestion) QueryQuestion() *TkQuestionQuery {
	return (&KcSmallCategoryQuestionClient{config: kscq.config}).QueryQuestion(kscq)
}

// QueryCourseSmallCategory queries the "course_small_category" edge of the KcSmallCategoryQuestion entity.
func (kscq *KcSmallCategoryQuestion) QueryCourseSmallCategory() *KcCourseSmallCategoryQuery {
	return (&KcSmallCategoryQuestionClient{config: kscq.config}).QueryCourseSmallCategory(kscq)
}

// Update returns a builder for updating this KcSmallCategoryQuestion.
// Note that you need to call KcSmallCategoryQuestion.Unwrap() before calling this method if this KcSmallCategoryQuestion
// was returned from a transaction, and the transaction was committed or rolled back.
func (kscq *KcSmallCategoryQuestion) Update() *KcSmallCategoryQuestionUpdateOne {
	return (&KcSmallCategoryQuestionClient{config: kscq.config}).UpdateOne(kscq)
}

// Unwrap unwraps the KcSmallCategoryQuestion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kscq *KcSmallCategoryQuestion) Unwrap() *KcSmallCategoryQuestion {
	tx, ok := kscq.config.driver.(*txDriver)
	if !ok {
		panic("ent: KcSmallCategoryQuestion is not a transactional entity")
	}
	kscq.config.driver = tx.drv
	return kscq
}

// String implements the fmt.Stringer.
func (kscq *KcSmallCategoryQuestion) String() string {
	var builder strings.Builder
	builder.WriteString("KcSmallCategoryQuestion(")
	builder.WriteString(fmt.Sprintf("id=%v", kscq.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(kscq.UUID)
	if v := kscq.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := kscq.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := kscq.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", question_id=")
	builder.WriteString(fmt.Sprintf("%v", kscq.QuestionID))
	builder.WriteString(", small_category_id=")
	builder.WriteString(fmt.Sprintf("%v", kscq.SmallCategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// KcSmallCategoryQuestions is a parsable slice of KcSmallCategoryQuestion.
type KcSmallCategoryQuestions []*KcSmallCategoryQuestion

func (kscq KcSmallCategoryQuestions) config(cfg config) {
	for _i := range kscq {
		kscq[_i].config = cfg
	}
}

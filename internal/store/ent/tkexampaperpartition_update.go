// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkexampaperpartition"
	"tkserver/internal/store/ent/tkexampaperpartitionscore"
	"tkserver/internal/store/ent/tkexampartitionquestionlink"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperPartitionUpdate is the builder for updating TkExamPaperPartition entities.
type TkExamPaperPartitionUpdate struct {
	config
	hooks    []Hook
	mutation *TkExamPaperPartitionMutation
}

// Where adds a new predicate for the TkExamPaperPartitionUpdate builder.
func (teppu *TkExamPaperPartitionUpdate) Where(ps ...predicate.TkExamPaperPartition) *TkExamPaperPartitionUpdate {
	teppu.mutation.predicates = append(teppu.mutation.predicates, ps...)
	return teppu
}

// SetUUID sets the "uuid" field.
func (teppu *TkExamPaperPartitionUpdate) SetUUID(s string) *TkExamPaperPartitionUpdate {
	teppu.mutation.SetUUID(s)
	return teppu
}

// SetUpdatedAt sets the "updated_at" field.
func (teppu *TkExamPaperPartitionUpdate) SetUpdatedAt(t time.Time) *TkExamPaperPartitionUpdate {
	teppu.mutation.SetUpdatedAt(t)
	return teppu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (teppu *TkExamPaperPartitionUpdate) ClearUpdatedAt() *TkExamPaperPartitionUpdate {
	teppu.mutation.ClearUpdatedAt()
	return teppu
}

// SetDeletedAt sets the "deleted_at" field.
func (teppu *TkExamPaperPartitionUpdate) SetDeletedAt(t time.Time) *TkExamPaperPartitionUpdate {
	teppu.mutation.SetDeletedAt(t)
	return teppu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teppu *TkExamPaperPartitionUpdate) SetNillableDeletedAt(t *time.Time) *TkExamPaperPartitionUpdate {
	if t != nil {
		teppu.SetDeletedAt(*t)
	}
	return teppu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (teppu *TkExamPaperPartitionUpdate) ClearDeletedAt() *TkExamPaperPartitionUpdate {
	teppu.mutation.ClearDeletedAt()
	return teppu
}

// SetName sets the "name" field.
func (teppu *TkExamPaperPartitionUpdate) SetName(s string) *TkExamPaperPartitionUpdate {
	teppu.mutation.SetName(s)
	return teppu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (teppu *TkExamPaperPartitionUpdate) SetNillableName(s *string) *TkExamPaperPartitionUpdate {
	if s != nil {
		teppu.SetName(*s)
	}
	return teppu
}

// SetDesc sets the "desc" field.
func (teppu *TkExamPaperPartitionUpdate) SetDesc(s string) *TkExamPaperPartitionUpdate {
	teppu.mutation.SetDesc(s)
	return teppu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (teppu *TkExamPaperPartitionUpdate) SetNillableDesc(s *string) *TkExamPaperPartitionUpdate {
	if s != nil {
		teppu.SetDesc(*s)
	}
	return teppu
}

// SetDuration sets the "duration" field.
func (teppu *TkExamPaperPartitionUpdate) SetDuration(i int) *TkExamPaperPartitionUpdate {
	teppu.mutation.ResetDuration()
	teppu.mutation.SetDuration(i)
	return teppu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (teppu *TkExamPaperPartitionUpdate) SetNillableDuration(i *int) *TkExamPaperPartitionUpdate {
	if i != nil {
		teppu.SetDuration(*i)
	}
	return teppu
}

// AddDuration adds i to the "duration" field.
func (teppu *TkExamPaperPartitionUpdate) AddDuration(i int) *TkExamPaperPartitionUpdate {
	teppu.mutation.AddDuration(i)
	return teppu
}

// SetType sets the "type" field.
func (teppu *TkExamPaperPartitionUpdate) SetType(i int) *TkExamPaperPartitionUpdate {
	teppu.mutation.ResetType()
	teppu.mutation.SetType(i)
	return teppu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (teppu *TkExamPaperPartitionUpdate) SetNillableType(i *int) *TkExamPaperPartitionUpdate {
	if i != nil {
		teppu.SetType(*i)
	}
	return teppu
}

// AddType adds i to the "type" field.
func (teppu *TkExamPaperPartitionUpdate) AddType(i int) *TkExamPaperPartitionUpdate {
	teppu.mutation.AddType(i)
	return teppu
}

// SetQuestionCount sets the "question_count" field.
func (teppu *TkExamPaperPartitionUpdate) SetQuestionCount(u uint8) *TkExamPaperPartitionUpdate {
	teppu.mutation.ResetQuestionCount()
	teppu.mutation.SetQuestionCount(u)
	return teppu
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (teppu *TkExamPaperPartitionUpdate) SetNillableQuestionCount(u *uint8) *TkExamPaperPartitionUpdate {
	if u != nil {
		teppu.SetQuestionCount(*u)
	}
	return teppu
}

// AddQuestionCount adds u to the "question_count" field.
func (teppu *TkExamPaperPartitionUpdate) AddQuestionCount(u uint8) *TkExamPaperPartitionUpdate {
	teppu.mutation.AddQuestionCount(u)
	return teppu
}

// SetExamPaperID sets the "exam_paper_id" field.
func (teppu *TkExamPaperPartitionUpdate) SetExamPaperID(i int) *TkExamPaperPartitionUpdate {
	teppu.mutation.ResetExamPaperID()
	teppu.mutation.SetExamPaperID(i)
	return teppu
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (teppu *TkExamPaperPartitionUpdate) SetNillableExamPaperID(i *int) *TkExamPaperPartitionUpdate {
	if i != nil {
		teppu.SetExamPaperID(*i)
	}
	return teppu
}

// ClearExamPaperID clears the value of the "exam_paper_id" field.
func (teppu *TkExamPaperPartitionUpdate) ClearExamPaperID() *TkExamPaperPartitionUpdate {
	teppu.mutation.ClearExamPaperID()
	return teppu
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (teppu *TkExamPaperPartitionUpdate) SetExamPaper(t *TkExamPaper) *TkExamPaperPartitionUpdate {
	return teppu.SetExamPaperID(t.ID)
}

// AddExamPartitionLinkIDs adds the "exam_partition_links" edge to the TkExamPartitionQuestionLink entity by IDs.
func (teppu *TkExamPaperPartitionUpdate) AddExamPartitionLinkIDs(ids ...int) *TkExamPaperPartitionUpdate {
	teppu.mutation.AddExamPartitionLinkIDs(ids...)
	return teppu
}

// AddExamPartitionLinks adds the "exam_partition_links" edges to the TkExamPartitionQuestionLink entity.
func (teppu *TkExamPaperPartitionUpdate) AddExamPartitionLinks(t ...*TkExamPartitionQuestionLink) *TkExamPaperPartitionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppu.AddExamPartitionLinkIDs(ids...)
}

// AddExamPartitionScoreIDs adds the "exam_partition_scores" edge to the TkExamPaperPartitionScore entity by IDs.
func (teppu *TkExamPaperPartitionUpdate) AddExamPartitionScoreIDs(ids ...int) *TkExamPaperPartitionUpdate {
	teppu.mutation.AddExamPartitionScoreIDs(ids...)
	return teppu
}

// AddExamPartitionScores adds the "exam_partition_scores" edges to the TkExamPaperPartitionScore entity.
func (teppu *TkExamPaperPartitionUpdate) AddExamPartitionScores(t ...*TkExamPaperPartitionScore) *TkExamPaperPartitionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppu.AddExamPartitionScoreIDs(ids...)
}

// Mutation returns the TkExamPaperPartitionMutation object of the builder.
func (teppu *TkExamPaperPartitionUpdate) Mutation() *TkExamPaperPartitionMutation {
	return teppu.mutation
}

// ClearExamPaper clears the "exam_paper" edge to the TkExamPaper entity.
func (teppu *TkExamPaperPartitionUpdate) ClearExamPaper() *TkExamPaperPartitionUpdate {
	teppu.mutation.ClearExamPaper()
	return teppu
}

// ClearExamPartitionLinks clears all "exam_partition_links" edges to the TkExamPartitionQuestionLink entity.
func (teppu *TkExamPaperPartitionUpdate) ClearExamPartitionLinks() *TkExamPaperPartitionUpdate {
	teppu.mutation.ClearExamPartitionLinks()
	return teppu
}

// RemoveExamPartitionLinkIDs removes the "exam_partition_links" edge to TkExamPartitionQuestionLink entities by IDs.
func (teppu *TkExamPaperPartitionUpdate) RemoveExamPartitionLinkIDs(ids ...int) *TkExamPaperPartitionUpdate {
	teppu.mutation.RemoveExamPartitionLinkIDs(ids...)
	return teppu
}

// RemoveExamPartitionLinks removes "exam_partition_links" edges to TkExamPartitionQuestionLink entities.
func (teppu *TkExamPaperPartitionUpdate) RemoveExamPartitionLinks(t ...*TkExamPartitionQuestionLink) *TkExamPaperPartitionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppu.RemoveExamPartitionLinkIDs(ids...)
}

// ClearExamPartitionScores clears all "exam_partition_scores" edges to the TkExamPaperPartitionScore entity.
func (teppu *TkExamPaperPartitionUpdate) ClearExamPartitionScores() *TkExamPaperPartitionUpdate {
	teppu.mutation.ClearExamPartitionScores()
	return teppu
}

// RemoveExamPartitionScoreIDs removes the "exam_partition_scores" edge to TkExamPaperPartitionScore entities by IDs.
func (teppu *TkExamPaperPartitionUpdate) RemoveExamPartitionScoreIDs(ids ...int) *TkExamPaperPartitionUpdate {
	teppu.mutation.RemoveExamPartitionScoreIDs(ids...)
	return teppu
}

// RemoveExamPartitionScores removes "exam_partition_scores" edges to TkExamPaperPartitionScore entities.
func (teppu *TkExamPaperPartitionUpdate) RemoveExamPartitionScores(t ...*TkExamPaperPartitionScore) *TkExamPaperPartitionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppu.RemoveExamPartitionScoreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teppu *TkExamPaperPartitionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	teppu.defaults()
	if len(teppu.hooks) == 0 {
		affected, err = teppu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperPartitionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teppu.mutation = mutation
			affected, err = teppu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(teppu.hooks) - 1; i >= 0; i-- {
			mut = teppu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teppu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (teppu *TkExamPaperPartitionUpdate) SaveX(ctx context.Context) int {
	affected, err := teppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teppu *TkExamPaperPartitionUpdate) Exec(ctx context.Context) error {
	_, err := teppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teppu *TkExamPaperPartitionUpdate) ExecX(ctx context.Context) {
	if err := teppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teppu *TkExamPaperPartitionUpdate) defaults() {
	if _, ok := teppu.mutation.UpdatedAt(); !ok && !teppu.mutation.UpdatedAtCleared() {
		v := tkexampaperpartition.UpdateDefaultUpdatedAt()
		teppu.mutation.SetUpdatedAt(v)
	}
}

func (teppu *TkExamPaperPartitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampaperpartition.Table,
			Columns: tkexampaperpartition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaperpartition.FieldID,
			},
		},
	}
	if ps := teppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teppu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartition.FieldUUID,
		})
	}
	if teppu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartition.FieldCreatedAt,
		})
	}
	if value, ok := teppu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartition.FieldUpdatedAt,
		})
	}
	if teppu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartition.FieldUpdatedAt,
		})
	}
	if value, ok := teppu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartition.FieldDeletedAt,
		})
	}
	if teppu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartition.FieldDeletedAt,
		})
	}
	if value, ok := teppu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartition.FieldName,
		})
	}
	if value, ok := teppu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartition.FieldDesc,
		})
	}
	if value, ok := teppu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldDuration,
		})
	}
	if value, ok := teppu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldDuration,
		})
	}
	if value, ok := teppu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldType,
		})
	}
	if value, ok := teppu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldType,
		})
	}
	if value, ok := teppu.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartition.FieldQuestionCount,
		})
	}
	if value, ok := teppu.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartition.FieldQuestionCount,
		})
	}
	if teppu.mutation.ExamPaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartition.ExamPaperTable,
			Columns: []string{tkexampaperpartition.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppu.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartition.ExamPaperTable,
			Columns: []string{tkexampaperpartition.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teppu.mutation.ExamPartitionLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionLinksTable,
			Columns: []string{tkexampaperpartition.ExamPartitionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampartitionquestionlink.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppu.mutation.RemovedExamPartitionLinksIDs(); len(nodes) > 0 && !teppu.mutation.ExamPartitionLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionLinksTable,
			Columns: []string{tkexampaperpartition.ExamPartitionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampartitionquestionlink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppu.mutation.ExamPartitionLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionLinksTable,
			Columns: []string{tkexampaperpartition.ExamPartitionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampartitionquestionlink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teppu.mutation.ExamPartitionScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionScoresTable,
			Columns: []string{tkexampaperpartition.ExamPartitionScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartitionscore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppu.mutation.RemovedExamPartitionScoresIDs(); len(nodes) > 0 && !teppu.mutation.ExamPartitionScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionScoresTable,
			Columns: []string{tkexampaperpartition.ExamPartitionScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartitionscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppu.mutation.ExamPartitionScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionScoresTable,
			Columns: []string{tkexampaperpartition.ExamPartitionScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartitionscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampaperpartition.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkExamPaperPartitionUpdateOne is the builder for updating a single TkExamPaperPartition entity.
type TkExamPaperPartitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkExamPaperPartitionMutation
}

// SetUUID sets the "uuid" field.
func (teppuo *TkExamPaperPartitionUpdateOne) SetUUID(s string) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.SetUUID(s)
	return teppuo
}

// SetUpdatedAt sets the "updated_at" field.
func (teppuo *TkExamPaperPartitionUpdateOne) SetUpdatedAt(t time.Time) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.SetUpdatedAt(t)
	return teppuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (teppuo *TkExamPaperPartitionUpdateOne) ClearUpdatedAt() *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ClearUpdatedAt()
	return teppuo
}

// SetDeletedAt sets the "deleted_at" field.
func (teppuo *TkExamPaperPartitionUpdateOne) SetDeletedAt(t time.Time) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.SetDeletedAt(t)
	return teppuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teppuo *TkExamPaperPartitionUpdateOne) SetNillableDeletedAt(t *time.Time) *TkExamPaperPartitionUpdateOne {
	if t != nil {
		teppuo.SetDeletedAt(*t)
	}
	return teppuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (teppuo *TkExamPaperPartitionUpdateOne) ClearDeletedAt() *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ClearDeletedAt()
	return teppuo
}

// SetName sets the "name" field.
func (teppuo *TkExamPaperPartitionUpdateOne) SetName(s string) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.SetName(s)
	return teppuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (teppuo *TkExamPaperPartitionUpdateOne) SetNillableName(s *string) *TkExamPaperPartitionUpdateOne {
	if s != nil {
		teppuo.SetName(*s)
	}
	return teppuo
}

// SetDesc sets the "desc" field.
func (teppuo *TkExamPaperPartitionUpdateOne) SetDesc(s string) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.SetDesc(s)
	return teppuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (teppuo *TkExamPaperPartitionUpdateOne) SetNillableDesc(s *string) *TkExamPaperPartitionUpdateOne {
	if s != nil {
		teppuo.SetDesc(*s)
	}
	return teppuo
}

// SetDuration sets the "duration" field.
func (teppuo *TkExamPaperPartitionUpdateOne) SetDuration(i int) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ResetDuration()
	teppuo.mutation.SetDuration(i)
	return teppuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (teppuo *TkExamPaperPartitionUpdateOne) SetNillableDuration(i *int) *TkExamPaperPartitionUpdateOne {
	if i != nil {
		teppuo.SetDuration(*i)
	}
	return teppuo
}

// AddDuration adds i to the "duration" field.
func (teppuo *TkExamPaperPartitionUpdateOne) AddDuration(i int) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.AddDuration(i)
	return teppuo
}

// SetType sets the "type" field.
func (teppuo *TkExamPaperPartitionUpdateOne) SetType(i int) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ResetType()
	teppuo.mutation.SetType(i)
	return teppuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (teppuo *TkExamPaperPartitionUpdateOne) SetNillableType(i *int) *TkExamPaperPartitionUpdateOne {
	if i != nil {
		teppuo.SetType(*i)
	}
	return teppuo
}

// AddType adds i to the "type" field.
func (teppuo *TkExamPaperPartitionUpdateOne) AddType(i int) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.AddType(i)
	return teppuo
}

// SetQuestionCount sets the "question_count" field.
func (teppuo *TkExamPaperPartitionUpdateOne) SetQuestionCount(u uint8) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ResetQuestionCount()
	teppuo.mutation.SetQuestionCount(u)
	return teppuo
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (teppuo *TkExamPaperPartitionUpdateOne) SetNillableQuestionCount(u *uint8) *TkExamPaperPartitionUpdateOne {
	if u != nil {
		teppuo.SetQuestionCount(*u)
	}
	return teppuo
}

// AddQuestionCount adds u to the "question_count" field.
func (teppuo *TkExamPaperPartitionUpdateOne) AddQuestionCount(u uint8) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.AddQuestionCount(u)
	return teppuo
}

// SetExamPaperID sets the "exam_paper_id" field.
func (teppuo *TkExamPaperPartitionUpdateOne) SetExamPaperID(i int) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ResetExamPaperID()
	teppuo.mutation.SetExamPaperID(i)
	return teppuo
}

// SetNillableExamPaperID sets the "exam_paper_id" field if the given value is not nil.
func (teppuo *TkExamPaperPartitionUpdateOne) SetNillableExamPaperID(i *int) *TkExamPaperPartitionUpdateOne {
	if i != nil {
		teppuo.SetExamPaperID(*i)
	}
	return teppuo
}

// ClearExamPaperID clears the value of the "exam_paper_id" field.
func (teppuo *TkExamPaperPartitionUpdateOne) ClearExamPaperID() *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ClearExamPaperID()
	return teppuo
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (teppuo *TkExamPaperPartitionUpdateOne) SetExamPaper(t *TkExamPaper) *TkExamPaperPartitionUpdateOne {
	return teppuo.SetExamPaperID(t.ID)
}

// AddExamPartitionLinkIDs adds the "exam_partition_links" edge to the TkExamPartitionQuestionLink entity by IDs.
func (teppuo *TkExamPaperPartitionUpdateOne) AddExamPartitionLinkIDs(ids ...int) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.AddExamPartitionLinkIDs(ids...)
	return teppuo
}

// AddExamPartitionLinks adds the "exam_partition_links" edges to the TkExamPartitionQuestionLink entity.
func (teppuo *TkExamPaperPartitionUpdateOne) AddExamPartitionLinks(t ...*TkExamPartitionQuestionLink) *TkExamPaperPartitionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppuo.AddExamPartitionLinkIDs(ids...)
}

// AddExamPartitionScoreIDs adds the "exam_partition_scores" edge to the TkExamPaperPartitionScore entity by IDs.
func (teppuo *TkExamPaperPartitionUpdateOne) AddExamPartitionScoreIDs(ids ...int) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.AddExamPartitionScoreIDs(ids...)
	return teppuo
}

// AddExamPartitionScores adds the "exam_partition_scores" edges to the TkExamPaperPartitionScore entity.
func (teppuo *TkExamPaperPartitionUpdateOne) AddExamPartitionScores(t ...*TkExamPaperPartitionScore) *TkExamPaperPartitionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppuo.AddExamPartitionScoreIDs(ids...)
}

// Mutation returns the TkExamPaperPartitionMutation object of the builder.
func (teppuo *TkExamPaperPartitionUpdateOne) Mutation() *TkExamPaperPartitionMutation {
	return teppuo.mutation
}

// ClearExamPaper clears the "exam_paper" edge to the TkExamPaper entity.
func (teppuo *TkExamPaperPartitionUpdateOne) ClearExamPaper() *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ClearExamPaper()
	return teppuo
}

// ClearExamPartitionLinks clears all "exam_partition_links" edges to the TkExamPartitionQuestionLink entity.
func (teppuo *TkExamPaperPartitionUpdateOne) ClearExamPartitionLinks() *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ClearExamPartitionLinks()
	return teppuo
}

// RemoveExamPartitionLinkIDs removes the "exam_partition_links" edge to TkExamPartitionQuestionLink entities by IDs.
func (teppuo *TkExamPaperPartitionUpdateOne) RemoveExamPartitionLinkIDs(ids ...int) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.RemoveExamPartitionLinkIDs(ids...)
	return teppuo
}

// RemoveExamPartitionLinks removes "exam_partition_links" edges to TkExamPartitionQuestionLink entities.
func (teppuo *TkExamPaperPartitionUpdateOne) RemoveExamPartitionLinks(t ...*TkExamPartitionQuestionLink) *TkExamPaperPartitionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppuo.RemoveExamPartitionLinkIDs(ids...)
}

// ClearExamPartitionScores clears all "exam_partition_scores" edges to the TkExamPaperPartitionScore entity.
func (teppuo *TkExamPaperPartitionUpdateOne) ClearExamPartitionScores() *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.ClearExamPartitionScores()
	return teppuo
}

// RemoveExamPartitionScoreIDs removes the "exam_partition_scores" edge to TkExamPaperPartitionScore entities by IDs.
func (teppuo *TkExamPaperPartitionUpdateOne) RemoveExamPartitionScoreIDs(ids ...int) *TkExamPaperPartitionUpdateOne {
	teppuo.mutation.RemoveExamPartitionScoreIDs(ids...)
	return teppuo
}

// RemoveExamPartitionScores removes "exam_partition_scores" edges to TkExamPaperPartitionScore entities.
func (teppuo *TkExamPaperPartitionUpdateOne) RemoveExamPartitionScores(t ...*TkExamPaperPartitionScore) *TkExamPaperPartitionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teppuo.RemoveExamPartitionScoreIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teppuo *TkExamPaperPartitionUpdateOne) Select(field string, fields ...string) *TkExamPaperPartitionUpdateOne {
	teppuo.fields = append([]string{field}, fields...)
	return teppuo
}

// Save executes the query and returns the updated TkExamPaperPartition entity.
func (teppuo *TkExamPaperPartitionUpdateOne) Save(ctx context.Context) (*TkExamPaperPartition, error) {
	var (
		err  error
		node *TkExamPaperPartition
	)
	teppuo.defaults()
	if len(teppuo.hooks) == 0 {
		node, err = teppuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperPartitionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teppuo.mutation = mutation
			node, err = teppuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teppuo.hooks) - 1; i >= 0; i-- {
			mut = teppuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teppuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (teppuo *TkExamPaperPartitionUpdateOne) SaveX(ctx context.Context) *TkExamPaperPartition {
	node, err := teppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teppuo *TkExamPaperPartitionUpdateOne) Exec(ctx context.Context) error {
	_, err := teppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teppuo *TkExamPaperPartitionUpdateOne) ExecX(ctx context.Context) {
	if err := teppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teppuo *TkExamPaperPartitionUpdateOne) defaults() {
	if _, ok := teppuo.mutation.UpdatedAt(); !ok && !teppuo.mutation.UpdatedAtCleared() {
		v := tkexampaperpartition.UpdateDefaultUpdatedAt()
		teppuo.mutation.SetUpdatedAt(v)
	}
}

func (teppuo *TkExamPaperPartitionUpdateOne) sqlSave(ctx context.Context) (_node *TkExamPaperPartition, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexampaperpartition.Table,
			Columns: tkexampaperpartition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaperpartition.FieldID,
			},
		},
	}
	id, ok := teppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkExamPaperPartition.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := teppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkexampaperpartition.FieldID)
		for _, f := range fields {
			if !tkexampaperpartition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkexampaperpartition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teppuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartition.FieldUUID,
		})
	}
	if teppuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartition.FieldCreatedAt,
		})
	}
	if value, ok := teppuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartition.FieldUpdatedAt,
		})
	}
	if teppuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartition.FieldUpdatedAt,
		})
	}
	if value, ok := teppuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaperpartition.FieldDeletedAt,
		})
	}
	if teppuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexampaperpartition.FieldDeletedAt,
		})
	}
	if value, ok := teppuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartition.FieldName,
		})
	}
	if value, ok := teppuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaperpartition.FieldDesc,
		})
	}
	if value, ok := teppuo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldDuration,
		})
	}
	if value, ok := teppuo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldDuration,
		})
	}
	if value, ok := teppuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldType,
		})
	}
	if value, ok := teppuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaperpartition.FieldType,
		})
	}
	if value, ok := teppuo.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartition.FieldQuestionCount,
		})
	}
	if value, ok := teppuo.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaperpartition.FieldQuestionCount,
		})
	}
	if teppuo.mutation.ExamPaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartition.ExamPaperTable,
			Columns: []string{tkexampaperpartition.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppuo.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaperpartition.ExamPaperTable,
			Columns: []string{tkexampaperpartition.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teppuo.mutation.ExamPartitionLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionLinksTable,
			Columns: []string{tkexampaperpartition.ExamPartitionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampartitionquestionlink.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppuo.mutation.RemovedExamPartitionLinksIDs(); len(nodes) > 0 && !teppuo.mutation.ExamPartitionLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionLinksTable,
			Columns: []string{tkexampaperpartition.ExamPartitionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampartitionquestionlink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppuo.mutation.ExamPartitionLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionLinksTable,
			Columns: []string{tkexampaperpartition.ExamPartitionLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampartitionquestionlink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teppuo.mutation.ExamPartitionScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionScoresTable,
			Columns: []string{tkexampaperpartition.ExamPartitionScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartitionscore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppuo.mutation.RemovedExamPartitionScoresIDs(); len(nodes) > 0 && !teppuo.mutation.ExamPartitionScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionScoresTable,
			Columns: []string{tkexampaperpartition.ExamPartitionScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartitionscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teppuo.mutation.ExamPartitionScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaperpartition.ExamPartitionScoresTable,
			Columns: []string{tkexampaperpartition.ExamPartitionScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartitionscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkExamPaperPartition{config: teppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexampaperpartition.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

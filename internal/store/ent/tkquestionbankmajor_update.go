// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/major"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkquestionbankmajor"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionBankMajorUpdate is the builder for updating TkQuestionBankMajor entities.
type TkQuestionBankMajorUpdate struct {
	config
	hooks    []Hook
	mutation *TkQuestionBankMajorMutation
}

// Where adds a new predicate for the TkQuestionBankMajorUpdate builder.
func (tqbmu *TkQuestionBankMajorUpdate) Where(ps ...predicate.TkQuestionBankMajor) *TkQuestionBankMajorUpdate {
	tqbmu.mutation.predicates = append(tqbmu.mutation.predicates, ps...)
	return tqbmu
}

// SetUUID sets the "uuid" field.
func (tqbmu *TkQuestionBankMajorUpdate) SetUUID(s string) *TkQuestionBankMajorUpdate {
	tqbmu.mutation.SetUUID(s)
	return tqbmu
}

// SetUpdatedAt sets the "updated_at" field.
func (tqbmu *TkQuestionBankMajorUpdate) SetUpdatedAt(t time.Time) *TkQuestionBankMajorUpdate {
	tqbmu.mutation.SetUpdatedAt(t)
	return tqbmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqbmu *TkQuestionBankMajorUpdate) ClearUpdatedAt() *TkQuestionBankMajorUpdate {
	tqbmu.mutation.ClearUpdatedAt()
	return tqbmu
}

// SetDeletedAt sets the "deleted_at" field.
func (tqbmu *TkQuestionBankMajorUpdate) SetDeletedAt(t time.Time) *TkQuestionBankMajorUpdate {
	tqbmu.mutation.SetDeletedAt(t)
	return tqbmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqbmu *TkQuestionBankMajorUpdate) SetNillableDeletedAt(t *time.Time) *TkQuestionBankMajorUpdate {
	if t != nil {
		tqbmu.SetDeletedAt(*t)
	}
	return tqbmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqbmu *TkQuestionBankMajorUpdate) ClearDeletedAt() *TkQuestionBankMajorUpdate {
	tqbmu.mutation.ClearDeletedAt()
	return tqbmu
}

// SetMajorID sets the "major_id" field.
func (tqbmu *TkQuestionBankMajorUpdate) SetMajorID(i int) *TkQuestionBankMajorUpdate {
	tqbmu.mutation.ResetMajorID()
	tqbmu.mutation.SetMajorID(i)
	return tqbmu
}

// SetNillableMajorID sets the "major_id" field if the given value is not nil.
func (tqbmu *TkQuestionBankMajorUpdate) SetNillableMajorID(i *int) *TkQuestionBankMajorUpdate {
	if i != nil {
		tqbmu.SetMajorID(*i)
	}
	return tqbmu
}

// ClearMajorID clears the value of the "major_id" field.
func (tqbmu *TkQuestionBankMajorUpdate) ClearMajorID() *TkQuestionBankMajorUpdate {
	tqbmu.mutation.ClearMajorID()
	return tqbmu
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tqbmu *TkQuestionBankMajorUpdate) SetQuestionBankID(i int) *TkQuestionBankMajorUpdate {
	tqbmu.mutation.ResetQuestionBankID()
	tqbmu.mutation.SetQuestionBankID(i)
	return tqbmu
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tqbmu *TkQuestionBankMajorUpdate) SetNillableQuestionBankID(i *int) *TkQuestionBankMajorUpdate {
	if i != nil {
		tqbmu.SetQuestionBankID(*i)
	}
	return tqbmu
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tqbmu *TkQuestionBankMajorUpdate) ClearQuestionBankID() *TkQuestionBankMajorUpdate {
	tqbmu.mutation.ClearQuestionBankID()
	return tqbmu
}

// SetTkQuestionBankID sets the "tk_question_bank" edge to the TkQuestionBank entity by ID.
func (tqbmu *TkQuestionBankMajorUpdate) SetTkQuestionBankID(id int) *TkQuestionBankMajorUpdate {
	tqbmu.mutation.SetTkQuestionBankID(id)
	return tqbmu
}

// SetNillableTkQuestionBankID sets the "tk_question_bank" edge to the TkQuestionBank entity by ID if the given value is not nil.
func (tqbmu *TkQuestionBankMajorUpdate) SetNillableTkQuestionBankID(id *int) *TkQuestionBankMajorUpdate {
	if id != nil {
		tqbmu = tqbmu.SetTkQuestionBankID(*id)
	}
	return tqbmu
}

// SetTkQuestionBank sets the "tk_question_bank" edge to the TkQuestionBank entity.
func (tqbmu *TkQuestionBankMajorUpdate) SetTkQuestionBank(t *TkQuestionBank) *TkQuestionBankMajorUpdate {
	return tqbmu.SetTkQuestionBankID(t.ID)
}

// SetMajor sets the "major" edge to the Major entity.
func (tqbmu *TkQuestionBankMajorUpdate) SetMajor(m *Major) *TkQuestionBankMajorUpdate {
	return tqbmu.SetMajorID(m.ID)
}

// Mutation returns the TkQuestionBankMajorMutation object of the builder.
func (tqbmu *TkQuestionBankMajorUpdate) Mutation() *TkQuestionBankMajorMutation {
	return tqbmu.mutation
}

// ClearTkQuestionBank clears the "tk_question_bank" edge to the TkQuestionBank entity.
func (tqbmu *TkQuestionBankMajorUpdate) ClearTkQuestionBank() *TkQuestionBankMajorUpdate {
	tqbmu.mutation.ClearTkQuestionBank()
	return tqbmu
}

// ClearMajor clears the "major" edge to the Major entity.
func (tqbmu *TkQuestionBankMajorUpdate) ClearMajor() *TkQuestionBankMajorUpdate {
	tqbmu.mutation.ClearMajor()
	return tqbmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqbmu *TkQuestionBankMajorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tqbmu.defaults()
	if len(tqbmu.hooks) == 0 {
		affected, err = tqbmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionBankMajorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqbmu.mutation = mutation
			affected, err = tqbmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tqbmu.hooks) - 1; i >= 0; i-- {
			mut = tqbmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqbmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqbmu *TkQuestionBankMajorUpdate) SaveX(ctx context.Context) int {
	affected, err := tqbmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqbmu *TkQuestionBankMajorUpdate) Exec(ctx context.Context) error {
	_, err := tqbmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqbmu *TkQuestionBankMajorUpdate) ExecX(ctx context.Context) {
	if err := tqbmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqbmu *TkQuestionBankMajorUpdate) defaults() {
	if _, ok := tqbmu.mutation.UpdatedAt(); !ok && !tqbmu.mutation.UpdatedAtCleared() {
		v := tkquestionbankmajor.UpdateDefaultUpdatedAt()
		tqbmu.mutation.SetUpdatedAt(v)
	}
}

func (tqbmu *TkQuestionBankMajorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionbankmajor.Table,
			Columns: tkquestionbankmajor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionbankmajor.FieldID,
			},
		},
	}
	if ps := tqbmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqbmu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionbankmajor.FieldUUID,
		})
	}
	if tqbmu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbankmajor.FieldCreatedAt,
		})
	}
	if value, ok := tqbmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbankmajor.FieldUpdatedAt,
		})
	}
	if tqbmu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbankmajor.FieldUpdatedAt,
		})
	}
	if value, ok := tqbmu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbankmajor.FieldDeletedAt,
		})
	}
	if tqbmu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbankmajor.FieldDeletedAt,
		})
	}
	if tqbmu.mutation.TkQuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankmajor.TkQuestionBankTable,
			Columns: []string{tkquestionbankmajor.TkQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbmu.mutation.TkQuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankmajor.TkQuestionBankTable,
			Columns: []string{tkquestionbankmajor.TkQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbmu.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankmajor.MajorTable,
			Columns: []string{tkquestionbankmajor.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbmu.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankmajor.MajorTable,
			Columns: []string{tkquestionbankmajor.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqbmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionbankmajor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkQuestionBankMajorUpdateOne is the builder for updating a single TkQuestionBankMajor entity.
type TkQuestionBankMajorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkQuestionBankMajorMutation
}

// SetUUID sets the "uuid" field.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetUUID(s string) *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.SetUUID(s)
	return tqbmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetUpdatedAt(t time.Time) *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.SetUpdatedAt(t)
	return tqbmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqbmuo *TkQuestionBankMajorUpdateOne) ClearUpdatedAt() *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.ClearUpdatedAt()
	return tqbmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetDeletedAt(t time.Time) *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.SetDeletedAt(t)
	return tqbmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetNillableDeletedAt(t *time.Time) *TkQuestionBankMajorUpdateOne {
	if t != nil {
		tqbmuo.SetDeletedAt(*t)
	}
	return tqbmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqbmuo *TkQuestionBankMajorUpdateOne) ClearDeletedAt() *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.ClearDeletedAt()
	return tqbmuo
}

// SetMajorID sets the "major_id" field.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetMajorID(i int) *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.ResetMajorID()
	tqbmuo.mutation.SetMajorID(i)
	return tqbmuo
}

// SetNillableMajorID sets the "major_id" field if the given value is not nil.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetNillableMajorID(i *int) *TkQuestionBankMajorUpdateOne {
	if i != nil {
		tqbmuo.SetMajorID(*i)
	}
	return tqbmuo
}

// ClearMajorID clears the value of the "major_id" field.
func (tqbmuo *TkQuestionBankMajorUpdateOne) ClearMajorID() *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.ClearMajorID()
	return tqbmuo
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetQuestionBankID(i int) *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.ResetQuestionBankID()
	tqbmuo.mutation.SetQuestionBankID(i)
	return tqbmuo
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetNillableQuestionBankID(i *int) *TkQuestionBankMajorUpdateOne {
	if i != nil {
		tqbmuo.SetQuestionBankID(*i)
	}
	return tqbmuo
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tqbmuo *TkQuestionBankMajorUpdateOne) ClearQuestionBankID() *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.ClearQuestionBankID()
	return tqbmuo
}

// SetTkQuestionBankID sets the "tk_question_bank" edge to the TkQuestionBank entity by ID.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetTkQuestionBankID(id int) *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.SetTkQuestionBankID(id)
	return tqbmuo
}

// SetNillableTkQuestionBankID sets the "tk_question_bank" edge to the TkQuestionBank entity by ID if the given value is not nil.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetNillableTkQuestionBankID(id *int) *TkQuestionBankMajorUpdateOne {
	if id != nil {
		tqbmuo = tqbmuo.SetTkQuestionBankID(*id)
	}
	return tqbmuo
}

// SetTkQuestionBank sets the "tk_question_bank" edge to the TkQuestionBank entity.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetTkQuestionBank(t *TkQuestionBank) *TkQuestionBankMajorUpdateOne {
	return tqbmuo.SetTkQuestionBankID(t.ID)
}

// SetMajor sets the "major" edge to the Major entity.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SetMajor(m *Major) *TkQuestionBankMajorUpdateOne {
	return tqbmuo.SetMajorID(m.ID)
}

// Mutation returns the TkQuestionBankMajorMutation object of the builder.
func (tqbmuo *TkQuestionBankMajorUpdateOne) Mutation() *TkQuestionBankMajorMutation {
	return tqbmuo.mutation
}

// ClearTkQuestionBank clears the "tk_question_bank" edge to the TkQuestionBank entity.
func (tqbmuo *TkQuestionBankMajorUpdateOne) ClearTkQuestionBank() *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.ClearTkQuestionBank()
	return tqbmuo
}

// ClearMajor clears the "major" edge to the Major entity.
func (tqbmuo *TkQuestionBankMajorUpdateOne) ClearMajor() *TkQuestionBankMajorUpdateOne {
	tqbmuo.mutation.ClearMajor()
	return tqbmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tqbmuo *TkQuestionBankMajorUpdateOne) Select(field string, fields ...string) *TkQuestionBankMajorUpdateOne {
	tqbmuo.fields = append([]string{field}, fields...)
	return tqbmuo
}

// Save executes the query and returns the updated TkQuestionBankMajor entity.
func (tqbmuo *TkQuestionBankMajorUpdateOne) Save(ctx context.Context) (*TkQuestionBankMajor, error) {
	var (
		err  error
		node *TkQuestionBankMajor
	)
	tqbmuo.defaults()
	if len(tqbmuo.hooks) == 0 {
		node, err = tqbmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkQuestionBankMajorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tqbmuo.mutation = mutation
			node, err = tqbmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tqbmuo.hooks) - 1; i >= 0; i-- {
			mut = tqbmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tqbmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tqbmuo *TkQuestionBankMajorUpdateOne) SaveX(ctx context.Context) *TkQuestionBankMajor {
	node, err := tqbmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tqbmuo *TkQuestionBankMajorUpdateOne) Exec(ctx context.Context) error {
	_, err := tqbmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqbmuo *TkQuestionBankMajorUpdateOne) ExecX(ctx context.Context) {
	if err := tqbmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqbmuo *TkQuestionBankMajorUpdateOne) defaults() {
	if _, ok := tqbmuo.mutation.UpdatedAt(); !ok && !tqbmuo.mutation.UpdatedAtCleared() {
		v := tkquestionbankmajor.UpdateDefaultUpdatedAt()
		tqbmuo.mutation.SetUpdatedAt(v)
	}
}

func (tqbmuo *TkQuestionBankMajorUpdateOne) sqlSave(ctx context.Context) (_node *TkQuestionBankMajor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestionbankmajor.Table,
			Columns: tkquestionbankmajor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestionbankmajor.FieldID,
			},
		},
	}
	id, ok := tqbmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkQuestionBankMajor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tqbmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkquestionbankmajor.FieldID)
		for _, f := range fields {
			if !tkquestionbankmajor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkquestionbankmajor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tqbmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqbmuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkquestionbankmajor.FieldUUID,
		})
	}
	if tqbmuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbankmajor.FieldCreatedAt,
		})
	}
	if value, ok := tqbmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbankmajor.FieldUpdatedAt,
		})
	}
	if tqbmuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbankmajor.FieldUpdatedAt,
		})
	}
	if value, ok := tqbmuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkquestionbankmajor.FieldDeletedAt,
		})
	}
	if tqbmuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkquestionbankmajor.FieldDeletedAt,
		})
	}
	if tqbmuo.mutation.TkQuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankmajor.TkQuestionBankTable,
			Columns: []string{tkquestionbankmajor.TkQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbmuo.mutation.TkQuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankmajor.TkQuestionBankTable,
			Columns: []string{tkquestionbankmajor.TkQuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqbmuo.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankmajor.MajorTable,
			Columns: []string{tkquestionbankmajor.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqbmuo.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkquestionbankmajor.MajorTable,
			Columns: []string{tkquestionbankmajor.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkQuestionBankMajor{config: tqbmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tqbmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkquestionbankmajor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

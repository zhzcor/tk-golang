// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/tkchapter"
	"gserver/internal/store/ent/tkquestionbank"
	"gserver/internal/store/ent/tksection"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkChapterCreate is the builder for creating a TkChapter entity.
type TkChapterCreate struct {
	config
	mutation *TkChapterMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tcc *TkChapterCreate) SetUUID(s string) *TkChapterCreate {
	tcc.mutation.SetUUID(s)
	return tcc
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TkChapterCreate) SetCreatedAt(t time.Time) *TkChapterCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TkChapterCreate) SetNillableCreatedAt(t *time.Time) *TkChapterCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TkChapterCreate) SetUpdatedAt(t time.Time) *TkChapterCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TkChapterCreate) SetNillableUpdatedAt(t *time.Time) *TkChapterCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetDeletedAt sets the "deleted_at" field.
func (tcc *TkChapterCreate) SetDeletedAt(t time.Time) *TkChapterCreate {
	tcc.mutation.SetDeletedAt(t)
	return tcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcc *TkChapterCreate) SetNillableDeletedAt(t *time.Time) *TkChapterCreate {
	if t != nil {
		tcc.SetDeletedAt(*t)
	}
	return tcc
}

// SetName sets the "name" field.
func (tcc *TkChapterCreate) SetName(s string) *TkChapterCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcc *TkChapterCreate) SetNillableName(s *string) *TkChapterCreate {
	if s != nil {
		tcc.SetName(*s)
	}
	return tcc
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tcc *TkChapterCreate) SetQuestionBankID(i int) *TkChapterCreate {
	tcc.mutation.SetQuestionBankID(i)
	return tcc
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tcc *TkChapterCreate) SetNillableQuestionBankID(i *int) *TkChapterCreate {
	if i != nil {
		tcc.SetQuestionBankID(*i)
	}
	return tcc
}

// SetQuestionCount sets the "question_count" field.
func (tcc *TkChapterCreate) SetQuestionCount(i int) *TkChapterCreate {
	tcc.mutation.SetQuestionCount(i)
	return tcc
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tcc *TkChapterCreate) SetNillableQuestionCount(i *int) *TkChapterCreate {
	if i != nil {
		tcc.SetQuestionCount(*i)
	}
	return tcc
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tcc *TkChapterCreate) SetQuestionBank(t *TkQuestionBank) *TkChapterCreate {
	return tcc.SetQuestionBankID(t.ID)
}

// AddSectionIDs adds the "sections" edge to the TkSection entity by IDs.
func (tcc *TkChapterCreate) AddSectionIDs(ids ...int) *TkChapterCreate {
	tcc.mutation.AddSectionIDs(ids...)
	return tcc
}

// AddSections adds the "sections" edges to the TkSection entity.
func (tcc *TkChapterCreate) AddSections(t ...*TkSection) *TkChapterCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddSectionIDs(ids...)
}

// Mutation returns the TkChapterMutation object of the builder.
func (tcc *TkChapterCreate) Mutation() *TkChapterMutation {
	return tcc.mutation
}

// Save creates the TkChapter in the database.
func (tcc *TkChapterCreate) Save(ctx context.Context) (*TkChapter, error) {
	var (
		err  error
		node *TkChapter
	)
	tcc.defaults()
	if len(tcc.hooks) == 0 {
		if err = tcc.check(); err != nil {
			return nil, err
		}
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcc.check(); err != nil {
				return nil, err
			}
			tcc.mutation = mutation
			node, err = tcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			mut = tcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TkChapterCreate) SaveX(ctx context.Context) *TkChapter {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tcc *TkChapterCreate) defaults() {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := tkchapter.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := tkchapter.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.Name(); !ok {
		v := tkchapter.DefaultName
		tcc.mutation.SetName(v)
	}
	if _, ok := tcc.mutation.QuestionCount(); !ok {
		v := tkchapter.DefaultQuestionCount
		tcc.mutation.SetQuestionCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TkChapterCreate) check() error {
	if _, ok := tcc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := tcc.mutation.QuestionCount(); !ok {
		return &ValidationError{Name: "question_count", err: errors.New("ent: missing required field \"question_count\"")}
	}
	return nil
}

func (tcc *TkChapterCreate) sqlSave(ctx context.Context) (*TkChapter, error) {
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tcc *TkChapterCreate) createSpec() (*TkChapter, *sqlgraph.CreateSpec) {
	var (
		_node = &TkChapter{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkchapter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkchapter.FieldID,
			},
		}
	)
	if value, ok := tcc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkchapter.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkchapter.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkchapter.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkchapter.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkchapter.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tcc.mutation.QuestionCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkchapter.FieldQuestionCount,
		})
		_node.QuestionCount = value
	}
	if nodes := tcc.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkchapter.QuestionBankTable,
			Columns: []string{tkchapter.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionBankID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkchapter.SectionsTable,
			Columns: []string{tkchapter.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkChapterCreateBulk is the builder for creating many TkChapter entities in bulk.
type TkChapterCreateBulk struct {
	config
	builders []*TkChapterCreate
}

// Save creates the TkChapter entities in the database.
func (tccb *TkChapterCreateBulk) Save(ctx context.Context) ([]*TkChapter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TkChapter, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkChapterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TkChapterCreateBulk) SaveX(ctx context.Context) []*TkChapter {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

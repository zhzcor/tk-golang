// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kcclass"
	"tkserver/internal/store/ent/kcclassteacher"
	"tkserver/internal/store/ent/kccourseteacher"
	"tkserver/internal/store/ent/major"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/teachertag"
	"tkserver/internal/store/ent/tkuserexamscorerecord"
	"tkserver/internal/store/ent/useraskanswer"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeacherCreate is the builder for creating a Teacher entity.
type TeacherCreate struct {
	config
	mutation *TeacherMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tc *TeacherCreate) SetUUID(s string) *TeacherCreate {
	tc.mutation.SetUUID(s)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TeacherCreate) SetCreatedAt(t time.Time) *TeacherCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableCreatedAt(t *time.Time) *TeacherCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TeacherCreate) SetUpdatedAt(t time.Time) *TeacherCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableUpdatedAt(t *time.Time) *TeacherCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TeacherCreate) SetDeletedAt(t time.Time) *TeacherCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableDeletedAt(t *time.Time) *TeacherCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TeacherCreate) SetName(s string) *TeacherCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableName(s *string) *TeacherCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetSex sets the "sex" field.
func (tc *TeacherCreate) SetSex(u uint8) *TeacherCreate {
	tc.mutation.SetSex(u)
	return tc
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableSex(u *uint8) *TeacherCreate {
	if u != nil {
		tc.SetSex(*u)
	}
	return tc
}

// SetEmail sets the "email" field.
func (tc *TeacherCreate) SetEmail(s string) *TeacherCreate {
	tc.mutation.SetEmail(s)
	return tc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableEmail(s *string) *TeacherCreate {
	if s != nil {
		tc.SetEmail(*s)
	}
	return tc
}

// SetPhone sets the "phone" field.
func (tc *TeacherCreate) SetPhone(s string) *TeacherCreate {
	tc.mutation.SetPhone(s)
	return tc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tc *TeacherCreate) SetNillablePhone(s *string) *TeacherCreate {
	if s != nil {
		tc.SetPhone(*s)
	}
	return tc
}

// SetNickname sets the "nickname" field.
func (tc *TeacherCreate) SetNickname(s string) *TeacherCreate {
	tc.mutation.SetNickname(s)
	return tc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableNickname(s *string) *TeacherCreate {
	if s != nil {
		tc.SetNickname(*s)
	}
	return tc
}

// SetSubTitle sets the "sub_title" field.
func (tc *TeacherCreate) SetSubTitle(s string) *TeacherCreate {
	tc.mutation.SetSubTitle(s)
	return tc
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableSubTitle(s *string) *TeacherCreate {
	if s != nil {
		tc.SetSubTitle(*s)
	}
	return tc
}

// SetDetail sets the "detail" field.
func (tc *TeacherCreate) SetDetail(s string) *TeacherCreate {
	tc.mutation.SetDetail(s)
	return tc
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableDetail(s *string) *TeacherCreate {
	if s != nil {
		tc.SetDetail(*s)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TeacherCreate) SetStatus(u uint8) *TeacherCreate {
	tc.mutation.SetStatus(u)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableStatus(u *uint8) *TeacherCreate {
	if u != nil {
		tc.SetStatus(*u)
	}
	return tc
}

// SetTeachingAge sets the "teaching_age" field.
func (tc *TeacherCreate) SetTeachingAge(u uint8) *TeacherCreate {
	tc.mutation.SetTeachingAge(u)
	return tc
}

// SetNillableTeachingAge sets the "teaching_age" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableTeachingAge(u *uint8) *TeacherCreate {
	if u != nil {
		tc.SetTeachingAge(*u)
	}
	return tc
}

// SetAvatarID sets the "avatar_id" field.
func (tc *TeacherCreate) SetAvatarID(i int) *TeacherCreate {
	tc.mutation.SetAvatarID(i)
	return tc
}

// SetNillableAvatarID sets the "avatar_id" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableAvatarID(i *int) *TeacherCreate {
	if i != nil {
		tc.SetAvatarID(*i)
	}
	return tc
}

// SetSortOrder sets the "sort_order" field.
func (tc *TeacherCreate) SetSortOrder(i int) *TeacherCreate {
	tc.mutation.SetSortOrder(i)
	return tc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableSortOrder(i *int) *TeacherCreate {
	if i != nil {
		tc.SetSortOrder(*i)
	}
	return tc
}

// AddMajorIDs adds the "majors" edge to the Major entity by IDs.
func (tc *TeacherCreate) AddMajorIDs(ids ...int) *TeacherCreate {
	tc.mutation.AddMajorIDs(ids...)
	return tc
}

// AddMajors adds the "majors" edges to the Major entity.
func (tc *TeacherCreate) AddMajors(m ...*Major) *TeacherCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tc.AddMajorIDs(ids...)
}

// AddTeacherTagIDs adds the "teacher_tags" edge to the TeacherTag entity by IDs.
func (tc *TeacherCreate) AddTeacherTagIDs(ids ...int) *TeacherCreate {
	tc.mutation.AddTeacherTagIDs(ids...)
	return tc
}

// AddTeacherTags adds the "teacher_tags" edges to the TeacherTag entity.
func (tc *TeacherCreate) AddTeacherTags(t ...*TeacherTag) *TeacherCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTeacherTagIDs(ids...)
}

// AddTeacherClassIDs adds the "teacher_classes" edge to the KcClassTeacher entity by IDs.
func (tc *TeacherCreate) AddTeacherClassIDs(ids ...int) *TeacherCreate {
	tc.mutation.AddTeacherClassIDs(ids...)
	return tc
}

// AddTeacherClasses adds the "teacher_classes" edges to the KcClassTeacher entity.
func (tc *TeacherCreate) AddTeacherClasses(k ...*KcClassTeacher) *TeacherCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tc.AddTeacherClassIDs(ids...)
}

// AddKcClassMasterIDs adds the "kc_class_masters" edge to the KcClass entity by IDs.
func (tc *TeacherCreate) AddKcClassMasterIDs(ids ...int) *TeacherCreate {
	tc.mutation.AddKcClassMasterIDs(ids...)
	return tc
}

// AddKcClassMasters adds the "kc_class_masters" edges to the KcClass entity.
func (tc *TeacherCreate) AddKcClassMasters(k ...*KcClass) *TeacherCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tc.AddKcClassMasterIDs(ids...)
}

// AddTeacherCourseIDs adds the "teacher_courses" edge to the KcCourseTeacher entity by IDs.
func (tc *TeacherCreate) AddTeacherCourseIDs(ids ...int) *TeacherCreate {
	tc.mutation.AddTeacherCourseIDs(ids...)
	return tc
}

// AddTeacherCourses adds the "teacher_courses" edges to the KcCourseTeacher entity.
func (tc *TeacherCreate) AddTeacherCourses(k ...*KcCourseTeacher) *TeacherCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tc.AddTeacherCourseIDs(ids...)
}

// AddUserExamsTeacherIDs adds the "user_exams_teachers" edge to the TkUserExamScoreRecord entity by IDs.
func (tc *TeacherCreate) AddUserExamsTeacherIDs(ids ...int) *TeacherCreate {
	tc.mutation.AddUserExamsTeacherIDs(ids...)
	return tc
}

// AddUserExamsTeachers adds the "user_exams_teachers" edges to the TkUserExamScoreRecord entity.
func (tc *TeacherCreate) AddUserExamsTeachers(t ...*TkUserExamScoreRecord) *TeacherCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddUserExamsTeacherIDs(ids...)
}

// AddAskTeacherIDs adds the "ask_teachers" edge to the UserAskAnswer entity by IDs.
func (tc *TeacherCreate) AddAskTeacherIDs(ids ...int) *TeacherCreate {
	tc.mutation.AddAskTeacherIDs(ids...)
	return tc
}

// AddAskTeachers adds the "ask_teachers" edges to the UserAskAnswer entity.
func (tc *TeacherCreate) AddAskTeachers(u ...*UserAskAnswer) *TeacherCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddAskTeacherIDs(ids...)
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (tc *TeacherCreate) SetAttachmentID(id int) *TeacherCreate {
	tc.mutation.SetAttachmentID(id)
	return tc
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (tc *TeacherCreate) SetNillableAttachmentID(id *int) *TeacherCreate {
	if id != nil {
		tc = tc.SetAttachmentID(*id)
	}
	return tc
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (tc *TeacherCreate) SetAttachment(a *Attachment) *TeacherCreate {
	return tc.SetAttachmentID(a.ID)
}

// Mutation returns the TeacherMutation object of the builder.
func (tc *TeacherCreate) Mutation() *TeacherMutation {
	return tc.mutation
}

// Save creates the Teacher in the database.
func (tc *TeacherCreate) Save(ctx context.Context) (*Teacher, error) {
	var (
		err  error
		node *Teacher
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeacherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TeacherCreate) SaveX(ctx context.Context) *Teacher {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tc *TeacherCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := teacher.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := teacher.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Name(); !ok {
		v := teacher.DefaultName
		tc.mutation.SetName(v)
	}
	if _, ok := tc.mutation.Sex(); !ok {
		v := teacher.DefaultSex
		tc.mutation.SetSex(v)
	}
	if _, ok := tc.mutation.Email(); !ok {
		v := teacher.DefaultEmail
		tc.mutation.SetEmail(v)
	}
	if _, ok := tc.mutation.Phone(); !ok {
		v := teacher.DefaultPhone
		tc.mutation.SetPhone(v)
	}
	if _, ok := tc.mutation.Nickname(); !ok {
		v := teacher.DefaultNickname
		tc.mutation.SetNickname(v)
	}
	if _, ok := tc.mutation.SubTitle(); !ok {
		v := teacher.DefaultSubTitle
		tc.mutation.SetSubTitle(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := teacher.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.TeachingAge(); !ok {
		v := teacher.DefaultTeachingAge
		tc.mutation.SetTeachingAge(v)
	}
	if _, ok := tc.mutation.SortOrder(); !ok {
		v := teacher.DefaultSortOrder
		tc.mutation.SetSortOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TeacherCreate) check() error {
	if _, ok := tc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := tc.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New("ent: missing required field \"sex\"")}
	}
	if _, ok := tc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if _, ok := tc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New("ent: missing required field \"phone\"")}
	}
	if _, ok := tc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New("ent: missing required field \"nickname\"")}
	}
	if _, ok := tc.mutation.SubTitle(); !ok {
		return &ValidationError{Name: "sub_title", err: errors.New("ent: missing required field \"sub_title\"")}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := tc.mutation.TeachingAge(); !ok {
		return &ValidationError{Name: "teaching_age", err: errors.New("ent: missing required field \"teaching_age\"")}
	}
	if _, ok := tc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New("ent: missing required field \"sort_order\"")}
	}
	return nil
}

func (tc *TeacherCreate) sqlSave(ctx context.Context) (*Teacher, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TeacherCreate) createSpec() (*Teacher, *sqlgraph.CreateSpec) {
	var (
		_node = &Teacher{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teacher.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teacher.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teacher.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teacher.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teacher.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.Sex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldSex,
		})
		_node.Sex = value
	}
	if value, ok := tc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := tc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := tc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := tc.mutation.SubTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldSubTitle,
		})
		_node.SubTitle = value
	}
	if value, ok := tc.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldDetail,
		})
		_node.Detail = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := tc.mutation.TeachingAge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: teacher.FieldTeachingAge,
		})
		_node.TeachingAge = value
	}
	if value, ok := tc.mutation.SortOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: teacher.FieldSortOrder,
		})
		_node.SortOrder = value
	}
	if nodes := tc.mutation.MajorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   teacher.MajorsTable,
			Columns: teacher.MajorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: major.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TeacherTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherTagsTable,
			Columns: []string{teacher.TeacherTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teachertag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TeacherClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherClassesTable,
			Columns: []string{teacher.TeacherClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclassteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.KcClassMastersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.KcClassMastersTable,
			Columns: []string{teacher.KcClassMastersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TeacherCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.TeacherCoursesTable,
			Columns: []string{teacher.TeacherCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourseteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.UserExamsTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.UserExamsTeachersTable,
			Columns: []string{teacher.UserExamsTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AskTeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.AskTeachersTable,
			Columns: []string{teacher.AskTeachersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teacher.AttachmentTable,
			Columns: []string{teacher.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AvatarID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TeacherCreateBulk is the builder for creating many Teacher entities in bulk.
type TeacherCreateBulk struct {
	config
	builders []*TeacherCreate
}

// Save creates the Teacher entities in the database.
func (tcb *TeacherCreateBulk) Save(ctx context.Context) ([]*Teacher, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Teacher, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeacherMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TeacherCreateBulk) SaveX(ctx context.Context) []*Teacher {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

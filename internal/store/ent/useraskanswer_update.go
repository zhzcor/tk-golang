// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/teacher"
	"gserver/internal/store/ent/user"
	"gserver/internal/store/ent/useraskanswer"
	"gserver/internal/store/ent/useraskanswerattachment"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAskAnswerUpdate is the builder for updating UserAskAnswer entities.
type UserAskAnswerUpdate struct {
	config
	hooks    []Hook
	mutation *UserAskAnswerMutation
}

// Where adds a new predicate for the UserAskAnswerUpdate builder.
func (uaau *UserAskAnswerUpdate) Where(ps ...predicate.UserAskAnswer) *UserAskAnswerUpdate {
	uaau.mutation.predicates = append(uaau.mutation.predicates, ps...)
	return uaau
}

// SetUUID sets the "uuid" field.
func (uaau *UserAskAnswerUpdate) SetUUID(s string) *UserAskAnswerUpdate {
	uaau.mutation.SetUUID(s)
	return uaau
}

// SetUpdatedAt sets the "updated_at" field.
func (uaau *UserAskAnswerUpdate) SetUpdatedAt(t time.Time) *UserAskAnswerUpdate {
	uaau.mutation.SetUpdatedAt(t)
	return uaau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uaau *UserAskAnswerUpdate) ClearUpdatedAt() *UserAskAnswerUpdate {
	uaau.mutation.ClearUpdatedAt()
	return uaau
}

// SetDeletedAt sets the "deleted_at" field.
func (uaau *UserAskAnswerUpdate) SetDeletedAt(t time.Time) *UserAskAnswerUpdate {
	uaau.mutation.SetDeletedAt(t)
	return uaau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uaau *UserAskAnswerUpdate) SetNillableDeletedAt(t *time.Time) *UserAskAnswerUpdate {
	if t != nil {
		uaau.SetDeletedAt(*t)
	}
	return uaau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uaau *UserAskAnswerUpdate) ClearDeletedAt() *UserAskAnswerUpdate {
	uaau.mutation.ClearDeletedAt()
	return uaau
}

// SetAskDesc sets the "ask_desc" field.
func (uaau *UserAskAnswerUpdate) SetAskDesc(s string) *UserAskAnswerUpdate {
	uaau.mutation.SetAskDesc(s)
	return uaau
}

// SetNillableAskDesc sets the "ask_desc" field if the given value is not nil.
func (uaau *UserAskAnswerUpdate) SetNillableAskDesc(s *string) *UserAskAnswerUpdate {
	if s != nil {
		uaau.SetAskDesc(*s)
	}
	return uaau
}

// SetAnswerStatus sets the "answer_status" field.
func (uaau *UserAskAnswerUpdate) SetAnswerStatus(u uint8) *UserAskAnswerUpdate {
	uaau.mutation.ResetAnswerStatus()
	uaau.mutation.SetAnswerStatus(u)
	return uaau
}

// SetNillableAnswerStatus sets the "answer_status" field if the given value is not nil.
func (uaau *UserAskAnswerUpdate) SetNillableAnswerStatus(u *uint8) *UserAskAnswerUpdate {
	if u != nil {
		uaau.SetAnswerStatus(*u)
	}
	return uaau
}

// AddAnswerStatus adds u to the "answer_status" field.
func (uaau *UserAskAnswerUpdate) AddAnswerStatus(u uint8) *UserAskAnswerUpdate {
	uaau.mutation.AddAnswerStatus(u)
	return uaau
}

// SetUserID sets the "user_id" field.
func (uaau *UserAskAnswerUpdate) SetUserID(i int) *UserAskAnswerUpdate {
	uaau.mutation.ResetUserID()
	uaau.mutation.SetUserID(i)
	return uaau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uaau *UserAskAnswerUpdate) SetNillableUserID(i *int) *UserAskAnswerUpdate {
	if i != nil {
		uaau.SetUserID(*i)
	}
	return uaau
}

// ClearUserID clears the value of the "user_id" field.
func (uaau *UserAskAnswerUpdate) ClearUserID() *UserAskAnswerUpdate {
	uaau.mutation.ClearUserID()
	return uaau
}

// SetTeacherID sets the "teacher_id" field.
func (uaau *UserAskAnswerUpdate) SetTeacherID(i int) *UserAskAnswerUpdate {
	uaau.mutation.ResetTeacherID()
	uaau.mutation.SetTeacherID(i)
	return uaau
}

// SetNillableTeacherID sets the "teacher_id" field if the given value is not nil.
func (uaau *UserAskAnswerUpdate) SetNillableTeacherID(i *int) *UserAskAnswerUpdate {
	if i != nil {
		uaau.SetTeacherID(*i)
	}
	return uaau
}

// ClearTeacherID clears the value of the "teacher_id" field.
func (uaau *UserAskAnswerUpdate) ClearTeacherID() *UserAskAnswerUpdate {
	uaau.mutation.ClearTeacherID()
	return uaau
}

// SetShowStatus sets the "show_status" field.
func (uaau *UserAskAnswerUpdate) SetShowStatus(u uint8) *UserAskAnswerUpdate {
	uaau.mutation.ResetShowStatus()
	uaau.mutation.SetShowStatus(u)
	return uaau
}

// SetNillableShowStatus sets the "show_status" field if the given value is not nil.
func (uaau *UserAskAnswerUpdate) SetNillableShowStatus(u *uint8) *UserAskAnswerUpdate {
	if u != nil {
		uaau.SetShowStatus(*u)
	}
	return uaau
}

// AddShowStatus adds u to the "show_status" field.
func (uaau *UserAskAnswerUpdate) AddShowStatus(u uint8) *UserAskAnswerUpdate {
	uaau.mutation.AddShowStatus(u)
	return uaau
}

// SetReplyShowStatus sets the "reply_show_status" field.
func (uaau *UserAskAnswerUpdate) SetReplyShowStatus(u uint8) *UserAskAnswerUpdate {
	uaau.mutation.ResetReplyShowStatus()
	uaau.mutation.SetReplyShowStatus(u)
	return uaau
}

// SetNillableReplyShowStatus sets the "reply_show_status" field if the given value is not nil.
func (uaau *UserAskAnswerUpdate) SetNillableReplyShowStatus(u *uint8) *UserAskAnswerUpdate {
	if u != nil {
		uaau.SetReplyShowStatus(*u)
	}
	return uaau
}

// AddReplyShowStatus adds u to the "reply_show_status" field.
func (uaau *UserAskAnswerUpdate) AddReplyShowStatus(u uint8) *UserAskAnswerUpdate {
	uaau.mutation.AddReplyShowStatus(u)
	return uaau
}

// SetAnswerDesc sets the "answer_desc" field.
func (uaau *UserAskAnswerUpdate) SetAnswerDesc(s string) *UserAskAnswerUpdate {
	uaau.mutation.SetAnswerDesc(s)
	return uaau
}

// SetNillableAnswerDesc sets the "answer_desc" field if the given value is not nil.
func (uaau *UserAskAnswerUpdate) SetNillableAnswerDesc(s *string) *UserAskAnswerUpdate {
	if s != nil {
		uaau.SetAnswerDesc(*s)
	}
	return uaau
}

// SetAnswerAt sets the "answer_at" field.
func (uaau *UserAskAnswerUpdate) SetAnswerAt(t time.Time) *UserAskAnswerUpdate {
	uaau.mutation.SetAnswerAt(t)
	return uaau
}

// SetNillableAnswerAt sets the "answer_at" field if the given value is not nil.
func (uaau *UserAskAnswerUpdate) SetNillableAnswerAt(t *time.Time) *UserAskAnswerUpdate {
	if t != nil {
		uaau.SetAnswerAt(*t)
	}
	return uaau
}

// ClearAnswerAt clears the value of the "answer_at" field.
func (uaau *UserAskAnswerUpdate) ClearAnswerAt() *UserAskAnswerUpdate {
	uaau.mutation.ClearAnswerAt()
	return uaau
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (uaau *UserAskAnswerUpdate) SetTeacher(t *Teacher) *UserAskAnswerUpdate {
	return uaau.SetTeacherID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (uaau *UserAskAnswerUpdate) SetUser(u *User) *UserAskAnswerUpdate {
	return uaau.SetUserID(u.ID)
}

// AddAskAnswersAttachmentIDs adds the "ask_answers_attachments" edge to the UserAskAnswerAttachment entity by IDs.
func (uaau *UserAskAnswerUpdate) AddAskAnswersAttachmentIDs(ids ...int) *UserAskAnswerUpdate {
	uaau.mutation.AddAskAnswersAttachmentIDs(ids...)
	return uaau
}

// AddAskAnswersAttachments adds the "ask_answers_attachments" edges to the UserAskAnswerAttachment entity.
func (uaau *UserAskAnswerUpdate) AddAskAnswersAttachments(u ...*UserAskAnswerAttachment) *UserAskAnswerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uaau.AddAskAnswersAttachmentIDs(ids...)
}

// Mutation returns the UserAskAnswerMutation object of the builder.
func (uaau *UserAskAnswerUpdate) Mutation() *UserAskAnswerMutation {
	return uaau.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (uaau *UserAskAnswerUpdate) ClearTeacher() *UserAskAnswerUpdate {
	uaau.mutation.ClearTeacher()
	return uaau
}

// ClearUser clears the "user" edge to the User entity.
func (uaau *UserAskAnswerUpdate) ClearUser() *UserAskAnswerUpdate {
	uaau.mutation.ClearUser()
	return uaau
}

// ClearAskAnswersAttachments clears all "ask_answers_attachments" edges to the UserAskAnswerAttachment entity.
func (uaau *UserAskAnswerUpdate) ClearAskAnswersAttachments() *UserAskAnswerUpdate {
	uaau.mutation.ClearAskAnswersAttachments()
	return uaau
}

// RemoveAskAnswersAttachmentIDs removes the "ask_answers_attachments" edge to UserAskAnswerAttachment entities by IDs.
func (uaau *UserAskAnswerUpdate) RemoveAskAnswersAttachmentIDs(ids ...int) *UserAskAnswerUpdate {
	uaau.mutation.RemoveAskAnswersAttachmentIDs(ids...)
	return uaau
}

// RemoveAskAnswersAttachments removes "ask_answers_attachments" edges to UserAskAnswerAttachment entities.
func (uaau *UserAskAnswerUpdate) RemoveAskAnswersAttachments(u ...*UserAskAnswerAttachment) *UserAskAnswerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uaau.RemoveAskAnswersAttachmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uaau *UserAskAnswerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uaau.defaults()
	if len(uaau.hooks) == 0 {
		affected, err = uaau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAskAnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uaau.mutation = mutation
			affected, err = uaau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uaau.hooks) - 1; i >= 0; i-- {
			mut = uaau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uaau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uaau *UserAskAnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := uaau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uaau *UserAskAnswerUpdate) Exec(ctx context.Context) error {
	_, err := uaau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaau *UserAskAnswerUpdate) ExecX(ctx context.Context) {
	if err := uaau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uaau *UserAskAnswerUpdate) defaults() {
	if _, ok := uaau.mutation.UpdatedAt(); !ok && !uaau.mutation.UpdatedAtCleared() {
		v := useraskanswer.UpdateDefaultUpdatedAt()
		uaau.mutation.SetUpdatedAt(v)
	}
}

func (uaau *UserAskAnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useraskanswer.Table,
			Columns: useraskanswer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useraskanswer.FieldID,
			},
		},
	}
	if ps := uaau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uaau.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraskanswer.FieldUUID,
		})
	}
	if uaau.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraskanswer.FieldCreatedAt,
		})
	}
	if value, ok := uaau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraskanswer.FieldUpdatedAt,
		})
	}
	if uaau.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraskanswer.FieldUpdatedAt,
		})
	}
	if value, ok := uaau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraskanswer.FieldDeletedAt,
		})
	}
	if uaau.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraskanswer.FieldDeletedAt,
		})
	}
	if value, ok := uaau.mutation.AskDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraskanswer.FieldAskDesc,
		})
	}
	if value, ok := uaau.mutation.AnswerStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldAnswerStatus,
		})
	}
	if value, ok := uaau.mutation.AddedAnswerStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldAnswerStatus,
		})
	}
	if value, ok := uaau.mutation.ShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldShowStatus,
		})
	}
	if value, ok := uaau.mutation.AddedShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldShowStatus,
		})
	}
	if value, ok := uaau.mutation.ReplyShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldReplyShowStatus,
		})
	}
	if value, ok := uaau.mutation.AddedReplyShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldReplyShowStatus,
		})
	}
	if value, ok := uaau.mutation.AnswerDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraskanswer.FieldAnswerDesc,
		})
	}
	if value, ok := uaau.mutation.AnswerAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraskanswer.FieldAnswerAt,
		})
	}
	if uaau.mutation.AnswerAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraskanswer.FieldAnswerAt,
		})
	}
	if uaau.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswer.TeacherTable,
			Columns: []string{useraskanswer.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaau.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswer.TeacherTable,
			Columns: []string{useraskanswer.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uaau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswer.UserTable,
			Columns: []string{useraskanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswer.UserTable,
			Columns: []string{useraskanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uaau.mutation.AskAnswersAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraskanswer.AskAnswersAttachmentsTable,
			Columns: []string{useraskanswer.AskAnswersAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaau.mutation.RemovedAskAnswersAttachmentsIDs(); len(nodes) > 0 && !uaau.mutation.AskAnswersAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraskanswer.AskAnswersAttachmentsTable,
			Columns: []string{useraskanswer.AskAnswersAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaau.mutation.AskAnswersAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraskanswer.AskAnswersAttachmentsTable,
			Columns: []string{useraskanswer.AskAnswersAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uaau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraskanswer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserAskAnswerUpdateOne is the builder for updating a single UserAskAnswer entity.
type UserAskAnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAskAnswerMutation
}

// SetUUID sets the "uuid" field.
func (uaauo *UserAskAnswerUpdateOne) SetUUID(s string) *UserAskAnswerUpdateOne {
	uaauo.mutation.SetUUID(s)
	return uaauo
}

// SetUpdatedAt sets the "updated_at" field.
func (uaauo *UserAskAnswerUpdateOne) SetUpdatedAt(t time.Time) *UserAskAnswerUpdateOne {
	uaauo.mutation.SetUpdatedAt(t)
	return uaauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uaauo *UserAskAnswerUpdateOne) ClearUpdatedAt() *UserAskAnswerUpdateOne {
	uaauo.mutation.ClearUpdatedAt()
	return uaauo
}

// SetDeletedAt sets the "deleted_at" field.
func (uaauo *UserAskAnswerUpdateOne) SetDeletedAt(t time.Time) *UserAskAnswerUpdateOne {
	uaauo.mutation.SetDeletedAt(t)
	return uaauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uaauo *UserAskAnswerUpdateOne) SetNillableDeletedAt(t *time.Time) *UserAskAnswerUpdateOne {
	if t != nil {
		uaauo.SetDeletedAt(*t)
	}
	return uaauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uaauo *UserAskAnswerUpdateOne) ClearDeletedAt() *UserAskAnswerUpdateOne {
	uaauo.mutation.ClearDeletedAt()
	return uaauo
}

// SetAskDesc sets the "ask_desc" field.
func (uaauo *UserAskAnswerUpdateOne) SetAskDesc(s string) *UserAskAnswerUpdateOne {
	uaauo.mutation.SetAskDesc(s)
	return uaauo
}

// SetNillableAskDesc sets the "ask_desc" field if the given value is not nil.
func (uaauo *UserAskAnswerUpdateOne) SetNillableAskDesc(s *string) *UserAskAnswerUpdateOne {
	if s != nil {
		uaauo.SetAskDesc(*s)
	}
	return uaauo
}

// SetAnswerStatus sets the "answer_status" field.
func (uaauo *UserAskAnswerUpdateOne) SetAnswerStatus(u uint8) *UserAskAnswerUpdateOne {
	uaauo.mutation.ResetAnswerStatus()
	uaauo.mutation.SetAnswerStatus(u)
	return uaauo
}

// SetNillableAnswerStatus sets the "answer_status" field if the given value is not nil.
func (uaauo *UserAskAnswerUpdateOne) SetNillableAnswerStatus(u *uint8) *UserAskAnswerUpdateOne {
	if u != nil {
		uaauo.SetAnswerStatus(*u)
	}
	return uaauo
}

// AddAnswerStatus adds u to the "answer_status" field.
func (uaauo *UserAskAnswerUpdateOne) AddAnswerStatus(u uint8) *UserAskAnswerUpdateOne {
	uaauo.mutation.AddAnswerStatus(u)
	return uaauo
}

// SetUserID sets the "user_id" field.
func (uaauo *UserAskAnswerUpdateOne) SetUserID(i int) *UserAskAnswerUpdateOne {
	uaauo.mutation.ResetUserID()
	uaauo.mutation.SetUserID(i)
	return uaauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uaauo *UserAskAnswerUpdateOne) SetNillableUserID(i *int) *UserAskAnswerUpdateOne {
	if i != nil {
		uaauo.SetUserID(*i)
	}
	return uaauo
}

// ClearUserID clears the value of the "user_id" field.
func (uaauo *UserAskAnswerUpdateOne) ClearUserID() *UserAskAnswerUpdateOne {
	uaauo.mutation.ClearUserID()
	return uaauo
}

// SetTeacherID sets the "teacher_id" field.
func (uaauo *UserAskAnswerUpdateOne) SetTeacherID(i int) *UserAskAnswerUpdateOne {
	uaauo.mutation.ResetTeacherID()
	uaauo.mutation.SetTeacherID(i)
	return uaauo
}

// SetNillableTeacherID sets the "teacher_id" field if the given value is not nil.
func (uaauo *UserAskAnswerUpdateOne) SetNillableTeacherID(i *int) *UserAskAnswerUpdateOne {
	if i != nil {
		uaauo.SetTeacherID(*i)
	}
	return uaauo
}

// ClearTeacherID clears the value of the "teacher_id" field.
func (uaauo *UserAskAnswerUpdateOne) ClearTeacherID() *UserAskAnswerUpdateOne {
	uaauo.mutation.ClearTeacherID()
	return uaauo
}

// SetShowStatus sets the "show_status" field.
func (uaauo *UserAskAnswerUpdateOne) SetShowStatus(u uint8) *UserAskAnswerUpdateOne {
	uaauo.mutation.ResetShowStatus()
	uaauo.mutation.SetShowStatus(u)
	return uaauo
}

// SetNillableShowStatus sets the "show_status" field if the given value is not nil.
func (uaauo *UserAskAnswerUpdateOne) SetNillableShowStatus(u *uint8) *UserAskAnswerUpdateOne {
	if u != nil {
		uaauo.SetShowStatus(*u)
	}
	return uaauo
}

// AddShowStatus adds u to the "show_status" field.
func (uaauo *UserAskAnswerUpdateOne) AddShowStatus(u uint8) *UserAskAnswerUpdateOne {
	uaauo.mutation.AddShowStatus(u)
	return uaauo
}

// SetReplyShowStatus sets the "reply_show_status" field.
func (uaauo *UserAskAnswerUpdateOne) SetReplyShowStatus(u uint8) *UserAskAnswerUpdateOne {
	uaauo.mutation.ResetReplyShowStatus()
	uaauo.mutation.SetReplyShowStatus(u)
	return uaauo
}

// SetNillableReplyShowStatus sets the "reply_show_status" field if the given value is not nil.
func (uaauo *UserAskAnswerUpdateOne) SetNillableReplyShowStatus(u *uint8) *UserAskAnswerUpdateOne {
	if u != nil {
		uaauo.SetReplyShowStatus(*u)
	}
	return uaauo
}

// AddReplyShowStatus adds u to the "reply_show_status" field.
func (uaauo *UserAskAnswerUpdateOne) AddReplyShowStatus(u uint8) *UserAskAnswerUpdateOne {
	uaauo.mutation.AddReplyShowStatus(u)
	return uaauo
}

// SetAnswerDesc sets the "answer_desc" field.
func (uaauo *UserAskAnswerUpdateOne) SetAnswerDesc(s string) *UserAskAnswerUpdateOne {
	uaauo.mutation.SetAnswerDesc(s)
	return uaauo
}

// SetNillableAnswerDesc sets the "answer_desc" field if the given value is not nil.
func (uaauo *UserAskAnswerUpdateOne) SetNillableAnswerDesc(s *string) *UserAskAnswerUpdateOne {
	if s != nil {
		uaauo.SetAnswerDesc(*s)
	}
	return uaauo
}

// SetAnswerAt sets the "answer_at" field.
func (uaauo *UserAskAnswerUpdateOne) SetAnswerAt(t time.Time) *UserAskAnswerUpdateOne {
	uaauo.mutation.SetAnswerAt(t)
	return uaauo
}

// SetNillableAnswerAt sets the "answer_at" field if the given value is not nil.
func (uaauo *UserAskAnswerUpdateOne) SetNillableAnswerAt(t *time.Time) *UserAskAnswerUpdateOne {
	if t != nil {
		uaauo.SetAnswerAt(*t)
	}
	return uaauo
}

// ClearAnswerAt clears the value of the "answer_at" field.
func (uaauo *UserAskAnswerUpdateOne) ClearAnswerAt() *UserAskAnswerUpdateOne {
	uaauo.mutation.ClearAnswerAt()
	return uaauo
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (uaauo *UserAskAnswerUpdateOne) SetTeacher(t *Teacher) *UserAskAnswerUpdateOne {
	return uaauo.SetTeacherID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (uaauo *UserAskAnswerUpdateOne) SetUser(u *User) *UserAskAnswerUpdateOne {
	return uaauo.SetUserID(u.ID)
}

// AddAskAnswersAttachmentIDs adds the "ask_answers_attachments" edge to the UserAskAnswerAttachment entity by IDs.
func (uaauo *UserAskAnswerUpdateOne) AddAskAnswersAttachmentIDs(ids ...int) *UserAskAnswerUpdateOne {
	uaauo.mutation.AddAskAnswersAttachmentIDs(ids...)
	return uaauo
}

// AddAskAnswersAttachments adds the "ask_answers_attachments" edges to the UserAskAnswerAttachment entity.
func (uaauo *UserAskAnswerUpdateOne) AddAskAnswersAttachments(u ...*UserAskAnswerAttachment) *UserAskAnswerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uaauo.AddAskAnswersAttachmentIDs(ids...)
}

// Mutation returns the UserAskAnswerMutation object of the builder.
func (uaauo *UserAskAnswerUpdateOne) Mutation() *UserAskAnswerMutation {
	return uaauo.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (uaauo *UserAskAnswerUpdateOne) ClearTeacher() *UserAskAnswerUpdateOne {
	uaauo.mutation.ClearTeacher()
	return uaauo
}

// ClearUser clears the "user" edge to the User entity.
func (uaauo *UserAskAnswerUpdateOne) ClearUser() *UserAskAnswerUpdateOne {
	uaauo.mutation.ClearUser()
	return uaauo
}

// ClearAskAnswersAttachments clears all "ask_answers_attachments" edges to the UserAskAnswerAttachment entity.
func (uaauo *UserAskAnswerUpdateOne) ClearAskAnswersAttachments() *UserAskAnswerUpdateOne {
	uaauo.mutation.ClearAskAnswersAttachments()
	return uaauo
}

// RemoveAskAnswersAttachmentIDs removes the "ask_answers_attachments" edge to UserAskAnswerAttachment entities by IDs.
func (uaauo *UserAskAnswerUpdateOne) RemoveAskAnswersAttachmentIDs(ids ...int) *UserAskAnswerUpdateOne {
	uaauo.mutation.RemoveAskAnswersAttachmentIDs(ids...)
	return uaauo
}

// RemoveAskAnswersAttachments removes "ask_answers_attachments" edges to UserAskAnswerAttachment entities.
func (uaauo *UserAskAnswerUpdateOne) RemoveAskAnswersAttachments(u ...*UserAskAnswerAttachment) *UserAskAnswerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uaauo.RemoveAskAnswersAttachmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uaauo *UserAskAnswerUpdateOne) Select(field string, fields ...string) *UserAskAnswerUpdateOne {
	uaauo.fields = append([]string{field}, fields...)
	return uaauo
}

// Save executes the query and returns the updated UserAskAnswer entity.
func (uaauo *UserAskAnswerUpdateOne) Save(ctx context.Context) (*UserAskAnswer, error) {
	var (
		err  error
		node *UserAskAnswer
	)
	uaauo.defaults()
	if len(uaauo.hooks) == 0 {
		node, err = uaauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAskAnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uaauo.mutation = mutation
			node, err = uaauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uaauo.hooks) - 1; i >= 0; i-- {
			mut = uaauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uaauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uaauo *UserAskAnswerUpdateOne) SaveX(ctx context.Context) *UserAskAnswer {
	node, err := uaauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uaauo *UserAskAnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := uaauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaauo *UserAskAnswerUpdateOne) ExecX(ctx context.Context) {
	if err := uaauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uaauo *UserAskAnswerUpdateOne) defaults() {
	if _, ok := uaauo.mutation.UpdatedAt(); !ok && !uaauo.mutation.UpdatedAtCleared() {
		v := useraskanswer.UpdateDefaultUpdatedAt()
		uaauo.mutation.SetUpdatedAt(v)
	}
}

func (uaauo *UserAskAnswerUpdateOne) sqlSave(ctx context.Context) (_node *UserAskAnswer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useraskanswer.Table,
			Columns: useraskanswer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useraskanswer.FieldID,
			},
		},
	}
	id, ok := uaauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserAskAnswer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uaauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useraskanswer.FieldID)
		for _, f := range fields {
			if !useraskanswer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useraskanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uaauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uaauo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraskanswer.FieldUUID,
		})
	}
	if uaauo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraskanswer.FieldCreatedAt,
		})
	}
	if value, ok := uaauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraskanswer.FieldUpdatedAt,
		})
	}
	if uaauo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraskanswer.FieldUpdatedAt,
		})
	}
	if value, ok := uaauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraskanswer.FieldDeletedAt,
		})
	}
	if uaauo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraskanswer.FieldDeletedAt,
		})
	}
	if value, ok := uaauo.mutation.AskDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraskanswer.FieldAskDesc,
		})
	}
	if value, ok := uaauo.mutation.AnswerStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldAnswerStatus,
		})
	}
	if value, ok := uaauo.mutation.AddedAnswerStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldAnswerStatus,
		})
	}
	if value, ok := uaauo.mutation.ShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldShowStatus,
		})
	}
	if value, ok := uaauo.mutation.AddedShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldShowStatus,
		})
	}
	if value, ok := uaauo.mutation.ReplyShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldReplyShowStatus,
		})
	}
	if value, ok := uaauo.mutation.AddedReplyShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: useraskanswer.FieldReplyShowStatus,
		})
	}
	if value, ok := uaauo.mutation.AnswerDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraskanswer.FieldAnswerDesc,
		})
	}
	if value, ok := uaauo.mutation.AnswerAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraskanswer.FieldAnswerAt,
		})
	}
	if uaauo.mutation.AnswerAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraskanswer.FieldAnswerAt,
		})
	}
	if uaauo.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswer.TeacherTable,
			Columns: []string{useraskanswer.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaauo.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswer.TeacherTable,
			Columns: []string{useraskanswer.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uaauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswer.UserTable,
			Columns: []string{useraskanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraskanswer.UserTable,
			Columns: []string{useraskanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uaauo.mutation.AskAnswersAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraskanswer.AskAnswersAttachmentsTable,
			Columns: []string{useraskanswer.AskAnswersAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaauo.mutation.RemovedAskAnswersAttachmentsIDs(); len(nodes) > 0 && !uaauo.mutation.AskAnswersAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraskanswer.AskAnswersAttachmentsTable,
			Columns: []string{useraskanswer.AskAnswersAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaauo.mutation.AskAnswersAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraskanswer.AskAnswersAttachmentsTable,
			Columns: []string{useraskanswer.AskAnswersAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraskanswerattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAskAnswer{config: uaauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uaauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraskanswer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

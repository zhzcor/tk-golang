// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/tkquestionbank"
	"gserver/internal/store/ent/tkuserquestionbankrecord"
	"gserver/internal/store/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserQuestionBankRecordCreate is the builder for creating a TkUserQuestionBankRecord entity.
type TkUserQuestionBankRecordCreate struct {
	config
	mutation *TkUserQuestionBankRecordMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetUUID(s string) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetUUID(s)
	return tuqbrc
}

// SetCreatedAt sets the "created_at" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetCreatedAt(t time.Time) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetCreatedAt(t)
	return tuqbrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableCreatedAt(t *time.Time) *TkUserQuestionBankRecordCreate {
	if t != nil {
		tuqbrc.SetCreatedAt(*t)
	}
	return tuqbrc
}

// SetUpdatedAt sets the "updated_at" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetUpdatedAt(t time.Time) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetUpdatedAt(t)
	return tuqbrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableUpdatedAt(t *time.Time) *TkUserQuestionBankRecordCreate {
	if t != nil {
		tuqbrc.SetUpdatedAt(*t)
	}
	return tuqbrc
}

// SetDeletedAt sets the "deleted_at" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetDeletedAt(t time.Time) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetDeletedAt(t)
	return tuqbrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableDeletedAt(t *time.Time) *TkUserQuestionBankRecordCreate {
	if t != nil {
		tuqbrc.SetDeletedAt(*t)
	}
	return tuqbrc
}

// SetRecordCount sets the "record_count" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetRecordCount(i int) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetRecordCount(i)
	return tuqbrc
}

// SetNillableRecordCount sets the "record_count" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableRecordCount(i *int) *TkUserQuestionBankRecordCreate {
	if i != nil {
		tuqbrc.SetRecordCount(*i)
	}
	return tuqbrc
}

// SetCorrectCount sets the "correct_count" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetCorrectCount(i int) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetCorrectCount(i)
	return tuqbrc
}

// SetNillableCorrectCount sets the "correct_count" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableCorrectCount(i *int) *TkUserQuestionBankRecordCreate {
	if i != nil {
		tuqbrc.SetCorrectCount(*i)
	}
	return tuqbrc
}

// SetWrongCount sets the "wrong_count" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetWrongCount(i int) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetWrongCount(i)
	return tuqbrc
}

// SetNillableWrongCount sets the "wrong_count" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableWrongCount(i *int) *TkUserQuestionBankRecordCreate {
	if i != nil {
		tuqbrc.SetWrongCount(*i)
	}
	return tuqbrc
}

// SetCorrectRate sets the "correct_rate" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetCorrectRate(f float64) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetCorrectRate(f)
	return tuqbrc
}

// SetNillableCorrectRate sets the "correct_rate" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableCorrectRate(f *float64) *TkUserQuestionBankRecordCreate {
	if f != nil {
		tuqbrc.SetCorrectRate(*f)
	}
	return tuqbrc
}

// SetFinishRate sets the "finish_rate" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetFinishRate(f float64) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetFinishRate(f)
	return tuqbrc
}

// SetNillableFinishRate sets the "finish_rate" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableFinishRate(f *float64) *TkUserQuestionBankRecordCreate {
	if f != nil {
		tuqbrc.SetFinishRate(*f)
	}
	return tuqbrc
}

// SetUserID sets the "user_id" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetUserID(i int) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetUserID(i)
	return tuqbrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableUserID(i *int) *TkUserQuestionBankRecordCreate {
	if i != nil {
		tuqbrc.SetUserID(*i)
	}
	return tuqbrc
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetQuestionBankID(i int) *TkUserQuestionBankRecordCreate {
	tuqbrc.mutation.SetQuestionBankID(i)
	return tuqbrc
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetNillableQuestionBankID(i *int) *TkUserQuestionBankRecordCreate {
	if i != nil {
		tuqbrc.SetQuestionBankID(*i)
	}
	return tuqbrc
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetQuestionBank(t *TkQuestionBank) *TkUserQuestionBankRecordCreate {
	return tuqbrc.SetQuestionBankID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuqbrc *TkUserQuestionBankRecordCreate) SetUser(u *User) *TkUserQuestionBankRecordCreate {
	return tuqbrc.SetUserID(u.ID)
}

// Mutation returns the TkUserQuestionBankRecordMutation object of the builder.
func (tuqbrc *TkUserQuestionBankRecordCreate) Mutation() *TkUserQuestionBankRecordMutation {
	return tuqbrc.mutation
}

// Save creates the TkUserQuestionBankRecord in the database.
func (tuqbrc *TkUserQuestionBankRecordCreate) Save(ctx context.Context) (*TkUserQuestionBankRecord, error) {
	var (
		err  error
		node *TkUserQuestionBankRecord
	)
	tuqbrc.defaults()
	if len(tuqbrc.hooks) == 0 {
		if err = tuqbrc.check(); err != nil {
			return nil, err
		}
		node, err = tuqbrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserQuestionBankRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuqbrc.check(); err != nil {
				return nil, err
			}
			tuqbrc.mutation = mutation
			node, err = tuqbrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuqbrc.hooks) - 1; i >= 0; i-- {
			mut = tuqbrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuqbrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tuqbrc *TkUserQuestionBankRecordCreate) SaveX(ctx context.Context) *TkUserQuestionBankRecord {
	v, err := tuqbrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tuqbrc *TkUserQuestionBankRecordCreate) defaults() {
	if _, ok := tuqbrc.mutation.CreatedAt(); !ok {
		v := tkuserquestionbankrecord.DefaultCreatedAt()
		tuqbrc.mutation.SetCreatedAt(v)
	}
	if _, ok := tuqbrc.mutation.UpdatedAt(); !ok {
		v := tkuserquestionbankrecord.DefaultUpdatedAt()
		tuqbrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tuqbrc.mutation.RecordCount(); !ok {
		v := tkuserquestionbankrecord.DefaultRecordCount
		tuqbrc.mutation.SetRecordCount(v)
	}
	if _, ok := tuqbrc.mutation.CorrectCount(); !ok {
		v := tkuserquestionbankrecord.DefaultCorrectCount
		tuqbrc.mutation.SetCorrectCount(v)
	}
	if _, ok := tuqbrc.mutation.WrongCount(); !ok {
		v := tkuserquestionbankrecord.DefaultWrongCount
		tuqbrc.mutation.SetWrongCount(v)
	}
	if _, ok := tuqbrc.mutation.CorrectRate(); !ok {
		v := tkuserquestionbankrecord.DefaultCorrectRate
		tuqbrc.mutation.SetCorrectRate(v)
	}
	if _, ok := tuqbrc.mutation.FinishRate(); !ok {
		v := tkuserquestionbankrecord.DefaultFinishRate
		tuqbrc.mutation.SetFinishRate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuqbrc *TkUserQuestionBankRecordCreate) check() error {
	if _, ok := tuqbrc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tuqbrc.mutation.RecordCount(); !ok {
		return &ValidationError{Name: "record_count", err: errors.New("ent: missing required field \"record_count\"")}
	}
	if _, ok := tuqbrc.mutation.CorrectCount(); !ok {
		return &ValidationError{Name: "correct_count", err: errors.New("ent: missing required field \"correct_count\"")}
	}
	if _, ok := tuqbrc.mutation.WrongCount(); !ok {
		return &ValidationError{Name: "wrong_count", err: errors.New("ent: missing required field \"wrong_count\"")}
	}
	if _, ok := tuqbrc.mutation.CorrectRate(); !ok {
		return &ValidationError{Name: "correct_rate", err: errors.New("ent: missing required field \"correct_rate\"")}
	}
	if _, ok := tuqbrc.mutation.FinishRate(); !ok {
		return &ValidationError{Name: "finish_rate", err: errors.New("ent: missing required field \"finish_rate\"")}
	}
	return nil
}

func (tuqbrc *TkUserQuestionBankRecordCreate) sqlSave(ctx context.Context) (*TkUserQuestionBankRecord, error) {
	_node, _spec := tuqbrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuqbrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tuqbrc *TkUserQuestionBankRecordCreate) createSpec() (*TkUserQuestionBankRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &TkUserQuestionBankRecord{config: tuqbrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkuserquestionbankrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserquestionbankrecord.FieldID,
			},
		}
	)
	if value, ok := tuqbrc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tuqbrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tuqbrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tuqbrc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tuqbrc.mutation.RecordCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldRecordCount,
		})
		_node.RecordCount = value
	}
	if value, ok := tuqbrc.mutation.CorrectCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectCount,
		})
		_node.CorrectCount = value
	}
	if value, ok := tuqbrc.mutation.WrongCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldWrongCount,
		})
		_node.WrongCount = value
	}
	if value, ok := tuqbrc.mutation.CorrectRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectRate,
		})
		_node.CorrectRate = value
	}
	if value, ok := tuqbrc.mutation.FinishRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldFinishRate,
		})
		_node.FinishRate = value
	}
	if nodes := tuqbrc.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.QuestionBankTable,
			Columns: []string{tkuserquestionbankrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionBankID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuqbrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.UserTable,
			Columns: []string{tkuserquestionbankrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkUserQuestionBankRecordCreateBulk is the builder for creating many TkUserQuestionBankRecord entities in bulk.
type TkUserQuestionBankRecordCreateBulk struct {
	config
	builders []*TkUserQuestionBankRecordCreate
}

// Save creates the TkUserQuestionBankRecord entities in the database.
func (tuqbrcb *TkUserQuestionBankRecordCreateBulk) Save(ctx context.Context) ([]*TkUserQuestionBankRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tuqbrcb.builders))
	nodes := make([]*TkUserQuestionBankRecord, len(tuqbrcb.builders))
	mutators := make([]Mutator, len(tuqbrcb.builders))
	for i := range tuqbrcb.builders {
		func(i int, root context.Context) {
			builder := tuqbrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkUserQuestionBankRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tuqbrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tuqbrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tuqbrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tuqbrcb *TkUserQuestionBankRecordCreateBulk) SaveX(ctx context.Context) []*TkUserQuestionBankRecord {
	v, err := tuqbrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

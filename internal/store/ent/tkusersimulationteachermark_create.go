// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkuserexamscorerecord"
	"tkserver/internal/store/ent/tkusersimulationteachermark"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserSimulationTeacherMarkCreate is the builder for creating a TkUserSimulationTeacherMark entity.
type TkUserSimulationTeacherMarkCreate struct {
	config
	mutation *TkUserSimulationTeacherMarkMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetUUID(s string) *TkUserSimulationTeacherMarkCreate {
	tustmc.mutation.SetUUID(s)
	return tustmc
}

// SetCreatedAt sets the "created_at" field.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetCreatedAt(t time.Time) *TkUserSimulationTeacherMarkCreate {
	tustmc.mutation.SetCreatedAt(t)
	return tustmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetNillableCreatedAt(t *time.Time) *TkUserSimulationTeacherMarkCreate {
	if t != nil {
		tustmc.SetCreatedAt(*t)
	}
	return tustmc
}

// SetUpdatedAt sets the "updated_at" field.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetUpdatedAt(t time.Time) *TkUserSimulationTeacherMarkCreate {
	tustmc.mutation.SetUpdatedAt(t)
	return tustmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetNillableUpdatedAt(t *time.Time) *TkUserSimulationTeacherMarkCreate {
	if t != nil {
		tustmc.SetUpdatedAt(*t)
	}
	return tustmc
}

// SetDeletedAt sets the "deleted_at" field.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetDeletedAt(t time.Time) *TkUserSimulationTeacherMarkCreate {
	tustmc.mutation.SetDeletedAt(t)
	return tustmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetNillableDeletedAt(t *time.Time) *TkUserSimulationTeacherMarkCreate {
	if t != nil {
		tustmc.SetDeletedAt(*t)
	}
	return tustmc
}

// SetScore sets the "score" field.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetScore(u uint8) *TkUserSimulationTeacherMarkCreate {
	tustmc.mutation.SetScore(u)
	return tustmc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetNillableScore(u *uint8) *TkUserSimulationTeacherMarkCreate {
	if u != nil {
		tustmc.SetScore(*u)
	}
	return tustmc
}

// SetDesc sets the "desc" field.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetDesc(s string) *TkUserSimulationTeacherMarkCreate {
	tustmc.mutation.SetDesc(s)
	return tustmc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetNillableDesc(s *string) *TkUserSimulationTeacherMarkCreate {
	if s != nil {
		tustmc.SetDesc(*s)
	}
	return tustmc
}

// SetQuestionID sets the "question_id" field.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetQuestionID(i int) *TkUserSimulationTeacherMarkCreate {
	tustmc.mutation.SetQuestionID(i)
	return tustmc
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetNillableQuestionID(i *int) *TkUserSimulationTeacherMarkCreate {
	if i != nil {
		tustmc.SetQuestionID(*i)
	}
	return tustmc
}

// SetUserExamRecordID sets the "user_exam_record_id" field.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetUserExamRecordID(i int) *TkUserSimulationTeacherMarkCreate {
	tustmc.mutation.SetUserExamRecordID(i)
	return tustmc
}

// SetNillableUserExamRecordID sets the "user_exam_record_id" field if the given value is not nil.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetNillableUserExamRecordID(i *int) *TkUserSimulationTeacherMarkCreate {
	if i != nil {
		tustmc.SetUserExamRecordID(*i)
	}
	return tustmc
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetQuestion(t *TkQuestion) *TkUserSimulationTeacherMarkCreate {
	return tustmc.SetQuestionID(t.ID)
}

// SetUserExamRecord sets the "user_exam_record" edge to the TkUserExamScoreRecord entity.
func (tustmc *TkUserSimulationTeacherMarkCreate) SetUserExamRecord(t *TkUserExamScoreRecord) *TkUserSimulationTeacherMarkCreate {
	return tustmc.SetUserExamRecordID(t.ID)
}

// Mutation returns the TkUserSimulationTeacherMarkMutation object of the builder.
func (tustmc *TkUserSimulationTeacherMarkCreate) Mutation() *TkUserSimulationTeacherMarkMutation {
	return tustmc.mutation
}

// Save creates the TkUserSimulationTeacherMark in the database.
func (tustmc *TkUserSimulationTeacherMarkCreate) Save(ctx context.Context) (*TkUserSimulationTeacherMark, error) {
	var (
		err  error
		node *TkUserSimulationTeacherMark
	)
	tustmc.defaults()
	if len(tustmc.hooks) == 0 {
		if err = tustmc.check(); err != nil {
			return nil, err
		}
		node, err = tustmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserSimulationTeacherMarkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tustmc.check(); err != nil {
				return nil, err
			}
			tustmc.mutation = mutation
			node, err = tustmc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tustmc.hooks) - 1; i >= 0; i-- {
			mut = tustmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tustmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tustmc *TkUserSimulationTeacherMarkCreate) SaveX(ctx context.Context) *TkUserSimulationTeacherMark {
	v, err := tustmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tustmc *TkUserSimulationTeacherMarkCreate) defaults() {
	if _, ok := tustmc.mutation.CreatedAt(); !ok {
		v := tkusersimulationteachermark.DefaultCreatedAt()
		tustmc.mutation.SetCreatedAt(v)
	}
	if _, ok := tustmc.mutation.UpdatedAt(); !ok {
		v := tkusersimulationteachermark.DefaultUpdatedAt()
		tustmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tustmc.mutation.Score(); !ok {
		v := tkusersimulationteachermark.DefaultScore
		tustmc.mutation.SetScore(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tustmc *TkUserSimulationTeacherMarkCreate) check() error {
	if _, ok := tustmc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tustmc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New("ent: missing required field \"score\"")}
	}
	return nil
}

func (tustmc *TkUserSimulationTeacherMarkCreate) sqlSave(ctx context.Context) (*TkUserSimulationTeacherMark, error) {
	_node, _spec := tustmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tustmc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tustmc *TkUserSimulationTeacherMarkCreate) createSpec() (*TkUserSimulationTeacherMark, *sqlgraph.CreateSpec) {
	var (
		_node = &TkUserSimulationTeacherMark{config: tustmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkusersimulationteachermark.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkusersimulationteachermark.FieldID,
			},
		}
	)
	if value, ok := tustmc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkusersimulationteachermark.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tustmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkusersimulationteachermark.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tustmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkusersimulationteachermark.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tustmc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkusersimulationteachermark.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tustmc.mutation.Score(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkusersimulationteachermark.FieldScore,
		})
		_node.Score = value
	}
	if value, ok := tustmc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkusersimulationteachermark.FieldDesc,
		})
		_node.Desc = value
	}
	if nodes := tustmc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.QuestionTable,
			Columns: []string{tkusersimulationteachermark.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tustmc.mutation.UserExamRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkusersimulationteachermark.UserExamRecordTable,
			Columns: []string{tkusersimulationteachermark.UserExamRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserExamRecordID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkUserSimulationTeacherMarkCreateBulk is the builder for creating many TkUserSimulationTeacherMark entities in bulk.
type TkUserSimulationTeacherMarkCreateBulk struct {
	config
	builders []*TkUserSimulationTeacherMarkCreate
}

// Save creates the TkUserSimulationTeacherMark entities in the database.
func (tustmcb *TkUserSimulationTeacherMarkCreateBulk) Save(ctx context.Context) ([]*TkUserSimulationTeacherMark, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tustmcb.builders))
	nodes := make([]*TkUserSimulationTeacherMark, len(tustmcb.builders))
	mutators := make([]Mutator, len(tustmcb.builders))
	for i := range tustmcb.builders {
		func(i int, root context.Context) {
			builder := tustmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkUserSimulationTeacherMarkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tustmcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tustmcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tustmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tustmcb *TkUserSimulationTeacherMarkCreateBulk) SaveX(ctx context.Context) []*TkUserSimulationTeacherMark {
	v, err := tustmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/teacher"
	"gserver/internal/store/ent/user"
	"gserver/internal/store/ent/useraskanswer"
	"gserver/internal/store/ent/useraskanswerattachment"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAskAnswerQuery is the builder for querying UserAskAnswer entities.
type UserAskAnswerQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.UserAskAnswer
	// eager-loading edges.
	withTeacher               *TeacherQuery
	withUser                  *UserQuery
	withAskAnswersAttachments *UserAskAnswerAttachmentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserAskAnswerQuery builder.
func (uaaq *UserAskAnswerQuery) Where(ps ...predicate.UserAskAnswer) *UserAskAnswerQuery {
	uaaq.predicates = append(uaaq.predicates, ps...)
	return uaaq
}

// Limit adds a limit step to the query.
func (uaaq *UserAskAnswerQuery) Limit(limit int) *UserAskAnswerQuery {
	uaaq.limit = &limit
	return uaaq
}

// Offset adds an offset step to the query.
func (uaaq *UserAskAnswerQuery) Offset(offset int) *UserAskAnswerQuery {
	uaaq.offset = &offset
	return uaaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uaaq *UserAskAnswerQuery) Unique(unique bool) *UserAskAnswerQuery {
	uaaq.unique = &unique
	return uaaq
}

// Order adds an order step to the query.
func (uaaq *UserAskAnswerQuery) Order(o ...OrderFunc) *UserAskAnswerQuery {
	uaaq.order = append(uaaq.order, o...)
	return uaaq
}

// QueryTeacher chains the current query on the "teacher" edge.
func (uaaq *UserAskAnswerQuery) QueryTeacher() *TeacherQuery {
	query := &TeacherQuery{config: uaaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uaaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uaaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(useraskanswer.Table, useraskanswer.FieldID, selector),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useraskanswer.TeacherTable, useraskanswer.TeacherColumn),
		)
		fromU = sqlgraph.SetNeighbors(uaaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (uaaq *UserAskAnswerQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: uaaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uaaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uaaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(useraskanswer.Table, useraskanswer.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useraskanswer.UserTable, useraskanswer.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(uaaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAskAnswersAttachments chains the current query on the "ask_answers_attachments" edge.
func (uaaq *UserAskAnswerQuery) QueryAskAnswersAttachments() *UserAskAnswerAttachmentQuery {
	query := &UserAskAnswerAttachmentQuery{config: uaaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uaaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uaaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(useraskanswer.Table, useraskanswer.FieldID, selector),
			sqlgraph.To(useraskanswerattachment.Table, useraskanswerattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, useraskanswer.AskAnswersAttachmentsTable, useraskanswer.AskAnswersAttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uaaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserAskAnswer entity from the query.
// Returns a *NotFoundError when no UserAskAnswer was found.
func (uaaq *UserAskAnswerQuery) First(ctx context.Context) (*UserAskAnswer, error) {
	nodes, err := uaaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{useraskanswer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uaaq *UserAskAnswerQuery) FirstX(ctx context.Context) *UserAskAnswer {
	node, err := uaaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserAskAnswer ID from the query.
// Returns a *NotFoundError when no UserAskAnswer ID was found.
func (uaaq *UserAskAnswerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uaaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{useraskanswer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uaaq *UserAskAnswerQuery) FirstIDX(ctx context.Context) int {
	id, err := uaaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserAskAnswer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one UserAskAnswer entity is not found.
// Returns a *NotFoundError when no UserAskAnswer entities are found.
func (uaaq *UserAskAnswerQuery) Only(ctx context.Context) (*UserAskAnswer, error) {
	nodes, err := uaaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{useraskanswer.Label}
	default:
		return nil, &NotSingularError{useraskanswer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uaaq *UserAskAnswerQuery) OnlyX(ctx context.Context) *UserAskAnswer {
	node, err := uaaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserAskAnswer ID in the query.
// Returns a *NotSingularError when exactly one UserAskAnswer ID is not found.
// Returns a *NotFoundError when no entities are found.
func (uaaq *UserAskAnswerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uaaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{useraskanswer.Label}
	default:
		err = &NotSingularError{useraskanswer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uaaq *UserAskAnswerQuery) OnlyIDX(ctx context.Context) int {
	id, err := uaaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserAskAnswers.
func (uaaq *UserAskAnswerQuery) All(ctx context.Context) ([]*UserAskAnswer, error) {
	if err := uaaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return uaaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (uaaq *UserAskAnswerQuery) AllX(ctx context.Context) []*UserAskAnswer {
	nodes, err := uaaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserAskAnswer IDs.
func (uaaq *UserAskAnswerQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := uaaq.Select(useraskanswer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uaaq *UserAskAnswerQuery) IDsX(ctx context.Context) []int {
	ids, err := uaaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uaaq *UserAskAnswerQuery) Count(ctx context.Context) (int, error) {
	if err := uaaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return uaaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (uaaq *UserAskAnswerQuery) CountX(ctx context.Context) int {
	count, err := uaaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uaaq *UserAskAnswerQuery) Exist(ctx context.Context) (bool, error) {
	if err := uaaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return uaaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (uaaq *UserAskAnswerQuery) ExistX(ctx context.Context) bool {
	exist, err := uaaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserAskAnswerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uaaq *UserAskAnswerQuery) Clone() *UserAskAnswerQuery {
	if uaaq == nil {
		return nil
	}
	return &UserAskAnswerQuery{
		config:                    uaaq.config,
		limit:                     uaaq.limit,
		offset:                    uaaq.offset,
		order:                     append([]OrderFunc{}, uaaq.order...),
		predicates:                append([]predicate.UserAskAnswer{}, uaaq.predicates...),
		withTeacher:               uaaq.withTeacher.Clone(),
		withUser:                  uaaq.withUser.Clone(),
		withAskAnswersAttachments: uaaq.withAskAnswersAttachments.Clone(),
		// clone intermediate query.
		sql:  uaaq.sql.Clone(),
		path: uaaq.path,
	}
}

// WithTeacher tells the query-builder to eager-load the nodes that are connected to
// the "teacher" edge. The optional arguments are used to configure the query builder of the edge.
func (uaaq *UserAskAnswerQuery) WithTeacher(opts ...func(*TeacherQuery)) *UserAskAnswerQuery {
	query := &TeacherQuery{config: uaaq.config}
	for _, opt := range opts {
		opt(query)
	}
	uaaq.withTeacher = query
	return uaaq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (uaaq *UserAskAnswerQuery) WithUser(opts ...func(*UserQuery)) *UserAskAnswerQuery {
	query := &UserQuery{config: uaaq.config}
	for _, opt := range opts {
		opt(query)
	}
	uaaq.withUser = query
	return uaaq
}

// WithAskAnswersAttachments tells the query-builder to eager-load the nodes that are connected to
// the "ask_answers_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (uaaq *UserAskAnswerQuery) WithAskAnswersAttachments(opts ...func(*UserAskAnswerAttachmentQuery)) *UserAskAnswerQuery {
	query := &UserAskAnswerAttachmentQuery{config: uaaq.config}
	for _, opt := range opts {
		opt(query)
	}
	uaaq.withAskAnswersAttachments = query
	return uaaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserAskAnswer.Query().
//		GroupBy(useraskanswer.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (uaaq *UserAskAnswerQuery) GroupBy(field string, fields ...string) *UserAskAnswerGroupBy {
	group := &UserAskAnswerGroupBy{config: uaaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uaaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uaaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.UserAskAnswer.Query().
//		Select(useraskanswer.FieldUUID).
//		Scan(ctx, &v)
//
func (uaaq *UserAskAnswerQuery) Select(field string, fields ...string) *UserAskAnswerSelect {
	uaaq.fields = append([]string{field}, fields...)
	return &UserAskAnswerSelect{UserAskAnswerQuery: uaaq}
}

func (uaaq *UserAskAnswerQuery) prepareQuery(ctx context.Context) error {
	for _, f := range uaaq.fields {
		if !useraskanswer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uaaq.path != nil {
		prev, err := uaaq.path(ctx)
		if err != nil {
			return err
		}
		uaaq.sql = prev
	}
	return nil
}

func (uaaq *UserAskAnswerQuery) sqlAll(ctx context.Context) ([]*UserAskAnswer, error) {
	var (
		nodes       = []*UserAskAnswer{}
		_spec       = uaaq.querySpec()
		loadedTypes = [3]bool{
			uaaq.withTeacher != nil,
			uaaq.withUser != nil,
			uaaq.withAskAnswersAttachments != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &UserAskAnswer{config: uaaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, uaaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := uaaq.withTeacher; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserAskAnswer)
		for i := range nodes {
			fk := nodes[i].TeacherID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(teacher.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teacher_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Teacher = n
			}
		}
	}

	if query := uaaq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserAskAnswer)
		for i := range nodes {
			fk := nodes[i].UserID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	if query := uaaq.withAskAnswersAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UserAskAnswer)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AskAnswersAttachments = []*UserAskAnswerAttachment{}
		}
		query.Where(predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
			s.Where(sql.InValues(useraskanswer.AskAnswersAttachmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "ask_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AskAnswersAttachments = append(node.Edges.AskAnswersAttachments, n)
		}
	}

	return nodes, nil
}

func (uaaq *UserAskAnswerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uaaq.querySpec()
	return sqlgraph.CountNodes(ctx, uaaq.driver, _spec)
}

func (uaaq *UserAskAnswerQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := uaaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (uaaq *UserAskAnswerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useraskanswer.Table,
			Columns: useraskanswer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useraskanswer.FieldID,
			},
		},
		From:   uaaq.sql,
		Unique: true,
	}
	if unique := uaaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := uaaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useraskanswer.FieldID)
		for i := range fields {
			if fields[i] != useraskanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uaaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uaaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uaaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uaaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uaaq *UserAskAnswerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uaaq.driver.Dialect())
	t1 := builder.Table(useraskanswer.Table)
	selector := builder.Select(t1.Columns(useraskanswer.Columns...)...).From(t1)
	if uaaq.sql != nil {
		selector = uaaq.sql
		selector.Select(selector.Columns(useraskanswer.Columns...)...)
	}
	for _, p := range uaaq.predicates {
		p(selector)
	}
	for _, p := range uaaq.order {
		p(selector)
	}
	if offset := uaaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uaaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserAskAnswerGroupBy is the group-by builder for UserAskAnswer entities.
type UserAskAnswerGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uaagb *UserAskAnswerGroupBy) Aggregate(fns ...AggregateFunc) *UserAskAnswerGroupBy {
	uaagb.fns = append(uaagb.fns, fns...)
	return uaagb
}

// Scan applies the group-by query and scans the result into the given value.
func (uaagb *UserAskAnswerGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := uaagb.path(ctx)
	if err != nil {
		return err
	}
	uaagb.sql = query
	return uaagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uaagb *UserAskAnswerGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := uaagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (uaagb *UserAskAnswerGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(uaagb.fields) > 1 {
		return nil, errors.New("ent: UserAskAnswerGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := uaagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uaagb *UserAskAnswerGroupBy) StringsX(ctx context.Context) []string {
	v, err := uaagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (uaagb *UserAskAnswerGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = uaagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraskanswer.Label}
	default:
		err = fmt.Errorf("ent: UserAskAnswerGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (uaagb *UserAskAnswerGroupBy) StringX(ctx context.Context) string {
	v, err := uaagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (uaagb *UserAskAnswerGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(uaagb.fields) > 1 {
		return nil, errors.New("ent: UserAskAnswerGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := uaagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uaagb *UserAskAnswerGroupBy) IntsX(ctx context.Context) []int {
	v, err := uaagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (uaagb *UserAskAnswerGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = uaagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraskanswer.Label}
	default:
		err = fmt.Errorf("ent: UserAskAnswerGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (uaagb *UserAskAnswerGroupBy) IntX(ctx context.Context) int {
	v, err := uaagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (uaagb *UserAskAnswerGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(uaagb.fields) > 1 {
		return nil, errors.New("ent: UserAskAnswerGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := uaagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uaagb *UserAskAnswerGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := uaagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (uaagb *UserAskAnswerGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = uaagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraskanswer.Label}
	default:
		err = fmt.Errorf("ent: UserAskAnswerGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (uaagb *UserAskAnswerGroupBy) Float64X(ctx context.Context) float64 {
	v, err := uaagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (uaagb *UserAskAnswerGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(uaagb.fields) > 1 {
		return nil, errors.New("ent: UserAskAnswerGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := uaagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uaagb *UserAskAnswerGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := uaagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (uaagb *UserAskAnswerGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = uaagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraskanswer.Label}
	default:
		err = fmt.Errorf("ent: UserAskAnswerGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (uaagb *UserAskAnswerGroupBy) BoolX(ctx context.Context) bool {
	v, err := uaagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uaagb *UserAskAnswerGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range uaagb.fields {
		if !useraskanswer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := uaagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uaagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uaagb *UserAskAnswerGroupBy) sqlQuery() *sql.Selector {
	selector := uaagb.sql
	columns := make([]string, 0, len(uaagb.fields)+len(uaagb.fns))
	columns = append(columns, uaagb.fields...)
	for _, fn := range uaagb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(uaagb.fields...)
}

// UserAskAnswerSelect is the builder for selecting fields of UserAskAnswer entities.
type UserAskAnswerSelect struct {
	*UserAskAnswerQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (uaas *UserAskAnswerSelect) Scan(ctx context.Context, v interface{}) error {
	if err := uaas.prepareQuery(ctx); err != nil {
		return err
	}
	uaas.sql = uaas.UserAskAnswerQuery.sqlQuery(ctx)
	return uaas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uaas *UserAskAnswerSelect) ScanX(ctx context.Context, v interface{}) {
	if err := uaas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (uaas *UserAskAnswerSelect) Strings(ctx context.Context) ([]string, error) {
	if len(uaas.fields) > 1 {
		return nil, errors.New("ent: UserAskAnswerSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := uaas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uaas *UserAskAnswerSelect) StringsX(ctx context.Context) []string {
	v, err := uaas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (uaas *UserAskAnswerSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = uaas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraskanswer.Label}
	default:
		err = fmt.Errorf("ent: UserAskAnswerSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (uaas *UserAskAnswerSelect) StringX(ctx context.Context) string {
	v, err := uaas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (uaas *UserAskAnswerSelect) Ints(ctx context.Context) ([]int, error) {
	if len(uaas.fields) > 1 {
		return nil, errors.New("ent: UserAskAnswerSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := uaas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uaas *UserAskAnswerSelect) IntsX(ctx context.Context) []int {
	v, err := uaas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (uaas *UserAskAnswerSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = uaas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraskanswer.Label}
	default:
		err = fmt.Errorf("ent: UserAskAnswerSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (uaas *UserAskAnswerSelect) IntX(ctx context.Context) int {
	v, err := uaas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (uaas *UserAskAnswerSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(uaas.fields) > 1 {
		return nil, errors.New("ent: UserAskAnswerSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := uaas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uaas *UserAskAnswerSelect) Float64sX(ctx context.Context) []float64 {
	v, err := uaas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (uaas *UserAskAnswerSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = uaas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraskanswer.Label}
	default:
		err = fmt.Errorf("ent: UserAskAnswerSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (uaas *UserAskAnswerSelect) Float64X(ctx context.Context) float64 {
	v, err := uaas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (uaas *UserAskAnswerSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(uaas.fields) > 1 {
		return nil, errors.New("ent: UserAskAnswerSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := uaas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uaas *UserAskAnswerSelect) BoolsX(ctx context.Context) []bool {
	v, err := uaas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (uaas *UserAskAnswerSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = uaas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraskanswer.Label}
	default:
		err = fmt.Errorf("ent: UserAskAnswerSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (uaas *UserAskAnswerSelect) BoolX(ctx context.Context) bool {
	v, err := uaas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uaas *UserAskAnswerSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := uaas.sqlQuery().Query()
	if err := uaas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uaas *UserAskAnswerSelect) sqlQuery() sql.Querier {
	selector := uaas.sql
	selector.Select(selector.Columns(uaas.fields...)...)
	return selector
}

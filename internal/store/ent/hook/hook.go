// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"gserver/internal/store/ent"
)

// The ActivityFunc type is an adapter to allow the use of ordinary
// function as Activity mutator.
type ActivityFunc func(context.Context, *ent.ActivityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ActivityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityMutation", m)
	}
	return f(ctx, mv)
}

// The ActivityApplyInfoFunc type is an adapter to allow the use of ordinary
// function as ActivityApplyInfo mutator.
type ActivityApplyInfoFunc func(context.Context, *ent.ActivityApplyInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityApplyInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ActivityApplyInfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityApplyInfoMutation", m)
	}
	return f(ctx, mv)
}

// The ActivityTypeFunc type is an adapter to allow the use of ordinary
// function as ActivityType mutator.
type ActivityTypeFunc func(context.Context, *ent.ActivityTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ActivityTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityTypeMutation", m)
	}
	return f(ctx, mv)
}

// The AdminFunc type is an adapter to allow the use of ordinary
// function as Admin mutator.
type AdminFunc func(context.Context, *ent.AdminMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AdminFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AdminMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AdminMutation", m)
	}
	return f(ctx, mv)
}

// The AdminLoginLogFunc type is an adapter to allow the use of ordinary
// function as AdminLoginLog mutator.
type AdminLoginLogFunc func(context.Context, *ent.AdminLoginLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AdminLoginLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AdminLoginLogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AdminLoginLogMutation", m)
	}
	return f(ctx, mv)
}

// The AdminOperationLogFunc type is an adapter to allow the use of ordinary
// function as AdminOperationLog mutator.
type AdminOperationLogFunc func(context.Context, *ent.AdminOperationLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AdminOperationLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AdminOperationLogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AdminOperationLogMutation", m)
	}
	return f(ctx, mv)
}

// The AdvertiseFunc type is an adapter to allow the use of ordinary
// function as Advertise mutator.
type AdvertiseFunc func(context.Context, *ent.AdvertiseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AdvertiseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AdvertiseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AdvertiseMutation", m)
	}
	return f(ctx, mv)
}

// The AppAgreementFunc type is an adapter to allow the use of ordinary
// function as AppAgreement mutator.
type AppAgreementFunc func(context.Context, *ent.AppAgreementMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AppAgreementFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AppAgreementMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AppAgreementMutation", m)
	}
	return f(ctx, mv)
}

// The AppVersionFunc type is an adapter to allow the use of ordinary
// function as AppVersion mutator.
type AppVersionFunc func(context.Context, *ent.AppVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AppVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AppVersionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AppVersionMutation", m)
	}
	return f(ctx, mv)
}

// The AttachmentFunc type is an adapter to allow the use of ordinary
// function as Attachment mutator.
type AttachmentFunc func(context.Context, *ent.AttachmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AttachmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AttachmentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AttachmentMutation", m)
	}
	return f(ctx, mv)
}

// The CityFunc type is an adapter to allow the use of ordinary
// function as City mutator.
type CityFunc func(context.Context, *ent.CityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CityMutation", m)
	}
	return f(ctx, mv)
}

// The CollectionFunc type is an adapter to allow the use of ordinary
// function as Collection mutator.
type CollectionFunc func(context.Context, *ent.CollectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CollectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CollectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CollectionMutation", m)
	}
	return f(ctx, mv)
}

// The HotSearchFunc type is an adapter to allow the use of ordinary
// function as HotSearch mutator.
type HotSearchFunc func(context.Context, *ent.HotSearchMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HotSearchFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.HotSearchMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HotSearchMutation", m)
	}
	return f(ctx, mv)
}

// The ImportTaskFunc type is an adapter to allow the use of ordinary
// function as ImportTask mutator.
type ImportTaskFunc func(context.Context, *ent.ImportTaskMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ImportTaskFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ImportTaskMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ImportTaskMutation", m)
	}
	return f(ctx, mv)
}

// The InformationClassifyFunc type is an adapter to allow the use of ordinary
// function as InformationClassify mutator.
type InformationClassifyFunc func(context.Context, *ent.InformationClassifyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InformationClassifyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.InformationClassifyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InformationClassifyMutation", m)
	}
	return f(ctx, mv)
}

// The ItemCategoryFunc type is an adapter to allow the use of ordinary
// function as ItemCategory mutator.
type ItemCategoryFunc func(context.Context, *ent.ItemCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ItemCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ItemCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ItemCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The KcClassFunc type is an adapter to allow the use of ordinary
// function as KcClass mutator.
type KcClassFunc func(context.Context, *ent.KcClassMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcClassFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcClassMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcClassMutation", m)
	}
	return f(ctx, mv)
}

// The KcClassTeacherFunc type is an adapter to allow the use of ordinary
// function as KcClassTeacher mutator.
type KcClassTeacherFunc func(context.Context, *ent.KcClassTeacherMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcClassTeacherFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcClassTeacherMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcClassTeacherMutation", m)
	}
	return f(ctx, mv)
}

// The KcCourseFunc type is an adapter to allow the use of ordinary
// function as KcCourse mutator.
type KcCourseFunc func(context.Context, *ent.KcCourseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcCourseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcCourseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcCourseMutation", m)
	}
	return f(ctx, mv)
}

// The KcCourseChapterFunc type is an adapter to allow the use of ordinary
// function as KcCourseChapter mutator.
type KcCourseChapterFunc func(context.Context, *ent.KcCourseChapterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcCourseChapterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcCourseChapterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcCourseChapterMutation", m)
	}
	return f(ctx, mv)
}

// The KcCourseSectionFunc type is an adapter to allow the use of ordinary
// function as KcCourseSection mutator.
type KcCourseSectionFunc func(context.Context, *ent.KcCourseSectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcCourseSectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcCourseSectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcCourseSectionMutation", m)
	}
	return f(ctx, mv)
}

// The KcCourseSmallCategoryFunc type is an adapter to allow the use of ordinary
// function as KcCourseSmallCategory mutator.
type KcCourseSmallCategoryFunc func(context.Context, *ent.KcCourseSmallCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcCourseSmallCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcCourseSmallCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcCourseSmallCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The KcCourseTeacherFunc type is an adapter to allow the use of ordinary
// function as KcCourseTeacher mutator.
type KcCourseTeacherFunc func(context.Context, *ent.KcCourseTeacherMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcCourseTeacherFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcCourseTeacherMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcCourseTeacherMutation", m)
	}
	return f(ctx, mv)
}

// The KcCourseVideoFunc type is an adapter to allow the use of ordinary
// function as KcCourseVideo mutator.
type KcCourseVideoFunc func(context.Context, *ent.KcCourseVideoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcCourseVideoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcCourseVideoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcCourseVideoMutation", m)
	}
	return f(ctx, mv)
}

// The KcSmallCategoryAttachmentFunc type is an adapter to allow the use of ordinary
// function as KcSmallCategoryAttachment mutator.
type KcSmallCategoryAttachmentFunc func(context.Context, *ent.KcSmallCategoryAttachmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcSmallCategoryAttachmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcSmallCategoryAttachmentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcSmallCategoryAttachmentMutation", m)
	}
	return f(ctx, mv)
}

// The KcSmallCategoryExamPaperFunc type is an adapter to allow the use of ordinary
// function as KcSmallCategoryExamPaper mutator.
type KcSmallCategoryExamPaperFunc func(context.Context, *ent.KcSmallCategoryExamPaperMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcSmallCategoryExamPaperFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcSmallCategoryExamPaperMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcSmallCategoryExamPaperMutation", m)
	}
	return f(ctx, mv)
}

// The KcSmallCategoryQuestionFunc type is an adapter to allow the use of ordinary
// function as KcSmallCategoryQuestion mutator.
type KcSmallCategoryQuestionFunc func(context.Context, *ent.KcSmallCategoryQuestionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcSmallCategoryQuestionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcSmallCategoryQuestionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcSmallCategoryQuestionMutation", m)
	}
	return f(ctx, mv)
}

// The KcUserClassFunc type is an adapter to allow the use of ordinary
// function as KcUserClass mutator.
type KcUserClassFunc func(context.Context, *ent.KcUserClassMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcUserClassFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcUserClassMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcUserClassMutation", m)
	}
	return f(ctx, mv)
}

// The KcUserCourseFunc type is an adapter to allow the use of ordinary
// function as KcUserCourse mutator.
type KcUserCourseFunc func(context.Context, *ent.KcUserCourseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcUserCourseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcUserCourseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcUserCourseMutation", m)
	}
	return f(ctx, mv)
}

// The KcVideoUploadTaskFunc type is an adapter to allow the use of ordinary
// function as KcVideoUploadTask mutator.
type KcVideoUploadTaskFunc func(context.Context, *ent.KcVideoUploadTaskMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KcVideoUploadTaskFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KcVideoUploadTaskMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KcVideoUploadTaskMutation", m)
	}
	return f(ctx, mv)
}

// The MajorFunc type is an adapter to allow the use of ordinary
// function as Major mutator.
type MajorFunc func(context.Context, *ent.MajorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MajorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MajorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MajorMutation", m)
	}
	return f(ctx, mv)
}

// The MajorDetailFunc type is an adapter to allow the use of ordinary
// function as MajorDetail mutator.
type MajorDetailFunc func(context.Context, *ent.MajorDetailMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MajorDetailFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MajorDetailMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MajorDetailMutation", m)
	}
	return f(ctx, mv)
}

// The MajorDetailTagFunc type is an adapter to allow the use of ordinary
// function as MajorDetailTag mutator.
type MajorDetailTagFunc func(context.Context, *ent.MajorDetailTagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MajorDetailTagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MajorDetailTagMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MajorDetailTagMutation", m)
	}
	return f(ctx, mv)
}

// The MakeUserQuestionRecordFunc type is an adapter to allow the use of ordinary
// function as MakeUserQuestionRecord mutator.
type MakeUserQuestionRecordFunc func(context.Context, *ent.MakeUserQuestionRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MakeUserQuestionRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MakeUserQuestionRecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MakeUserQuestionRecordMutation", m)
	}
	return f(ctx, mv)
}

// The MessageFunc type is an adapter to allow the use of ordinary
// function as Message mutator.
type MessageFunc func(context.Context, *ent.MessageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MessageMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageMutation", m)
	}
	return f(ctx, mv)
}

// The MessageTypeFunc type is an adapter to allow the use of ordinary
// function as MessageType mutator.
type MessageTypeFunc func(context.Context, *ent.MessageTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MessageTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageTypeMutation", m)
	}
	return f(ctx, mv)
}

// The PermissionFunc type is an adapter to allow the use of ordinary
// function as Permission mutator.
type PermissionFunc func(context.Context, *ent.PermissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PermissionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PermissionMutation", m)
	}
	return f(ctx, mv)
}

// The RoleFunc type is an adapter to allow the use of ordinary
// function as Role mutator.
type RoleFunc func(context.Context, *ent.RoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RoleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoleMutation", m)
	}
	return f(ctx, mv)
}

// The RolePermissionFunc type is an adapter to allow the use of ordinary
// function as RolePermission mutator.
type RolePermissionFunc func(context.Context, *ent.RolePermissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RolePermissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RolePermissionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RolePermissionMutation", m)
	}
	return f(ctx, mv)
}

// The SharePosterFunc type is an adapter to allow the use of ordinary
// function as SharePoster mutator.
type SharePosterFunc func(context.Context, *ent.SharePosterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SharePosterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SharePosterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SharePosterMutation", m)
	}
	return f(ctx, mv)
}

// The TeacherFunc type is an adapter to allow the use of ordinary
// function as Teacher mutator.
type TeacherFunc func(context.Context, *ent.TeacherMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TeacherFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TeacherMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TeacherMutation", m)
	}
	return f(ctx, mv)
}

// The TeacherTagFunc type is an adapter to allow the use of ordinary
// function as TeacherTag mutator.
type TeacherTagFunc func(context.Context, *ent.TeacherTagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TeacherTagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TeacherTagMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TeacherTagMutation", m)
	}
	return f(ctx, mv)
}

// The TkChapterFunc type is an adapter to allow the use of ordinary
// function as TkChapter mutator.
type TkChapterFunc func(context.Context, *ent.TkChapterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkChapterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkChapterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkChapterMutation", m)
	}
	return f(ctx, mv)
}

// The TkExamPaperFunc type is an adapter to allow the use of ordinary
// function as TkExamPaper mutator.
type TkExamPaperFunc func(context.Context, *ent.TkExamPaperMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkExamPaperFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkExamPaperMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkExamPaperMutation", m)
	}
	return f(ctx, mv)
}

// The TkExamPaperPartitionFunc type is an adapter to allow the use of ordinary
// function as TkExamPaperPartition mutator.
type TkExamPaperPartitionFunc func(context.Context, *ent.TkExamPaperPartitionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkExamPaperPartitionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkExamPaperPartitionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkExamPaperPartitionMutation", m)
	}
	return f(ctx, mv)
}

// The TkExamPaperPartitionScoreFunc type is an adapter to allow the use of ordinary
// function as TkExamPaperPartitionScore mutator.
type TkExamPaperPartitionScoreFunc func(context.Context, *ent.TkExamPaperPartitionScoreMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkExamPaperPartitionScoreFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkExamPaperPartitionScoreMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkExamPaperPartitionScoreMutation", m)
	}
	return f(ctx, mv)
}

// The TkExamPaperSimulationFunc type is an adapter to allow the use of ordinary
// function as TkExamPaperSimulation mutator.
type TkExamPaperSimulationFunc func(context.Context, *ent.TkExamPaperSimulationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkExamPaperSimulationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkExamPaperSimulationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkExamPaperSimulationMutation", m)
	}
	return f(ctx, mv)
}

// The TkExamPartitionQuestionLinkFunc type is an adapter to allow the use of ordinary
// function as TkExamPartitionQuestionLink mutator.
type TkExamPartitionQuestionLinkFunc func(context.Context, *ent.TkExamPartitionQuestionLinkMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkExamPartitionQuestionLinkFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkExamPartitionQuestionLinkMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkExamPartitionQuestionLinkMutation", m)
	}
	return f(ctx, mv)
}

// The TkExamQuestionTypeFunc type is an adapter to allow the use of ordinary
// function as TkExamQuestionType mutator.
type TkExamQuestionTypeFunc func(context.Context, *ent.TkExamQuestionTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkExamQuestionTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkExamQuestionTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkExamQuestionTypeMutation", m)
	}
	return f(ctx, mv)
}

// The TkKnowledgePointFunc type is an adapter to allow the use of ordinary
// function as TkKnowledgePoint mutator.
type TkKnowledgePointFunc func(context.Context, *ent.TkKnowledgePointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkKnowledgePointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkKnowledgePointMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkKnowledgePointMutation", m)
	}
	return f(ctx, mv)
}

// The TkQuestionFunc type is an adapter to allow the use of ordinary
// function as TkQuestion mutator.
type TkQuestionFunc func(context.Context, *ent.TkQuestionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkQuestionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkQuestionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkQuestionMutation", m)
	}
	return f(ctx, mv)
}

// The TkQuestionAnswerOptionFunc type is an adapter to allow the use of ordinary
// function as TkQuestionAnswerOption mutator.
type TkQuestionAnswerOptionFunc func(context.Context, *ent.TkQuestionAnswerOptionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkQuestionAnswerOptionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkQuestionAnswerOptionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkQuestionAnswerOptionMutation", m)
	}
	return f(ctx, mv)
}

// The TkQuestionBankFunc type is an adapter to allow the use of ordinary
// function as TkQuestionBank mutator.
type TkQuestionBankFunc func(context.Context, *ent.TkQuestionBankMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkQuestionBankFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkQuestionBankMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkQuestionBankMutation", m)
	}
	return f(ctx, mv)
}

// The TkQuestionErrorFeedbackFunc type is an adapter to allow the use of ordinary
// function as TkQuestionErrorFeedback mutator.
type TkQuestionErrorFeedbackFunc func(context.Context, *ent.TkQuestionErrorFeedbackMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkQuestionErrorFeedbackFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkQuestionErrorFeedbackMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkQuestionErrorFeedbackMutation", m)
	}
	return f(ctx, mv)
}

// The TkQuestionSectionFunc type is an adapter to allow the use of ordinary
// function as TkQuestionSection mutator.
type TkQuestionSectionFunc func(context.Context, *ent.TkQuestionSectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkQuestionSectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkQuestionSectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkQuestionSectionMutation", m)
	}
	return f(ctx, mv)
}

// The TkSectionFunc type is an adapter to allow the use of ordinary
// function as TkSection mutator.
type TkSectionFunc func(context.Context, *ent.TkSectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkSectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkSectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkSectionMutation", m)
	}
	return f(ctx, mv)
}

// The TkUserExamScoreRecordFunc type is an adapter to allow the use of ordinary
// function as TkUserExamScoreRecord mutator.
type TkUserExamScoreRecordFunc func(context.Context, *ent.TkUserExamScoreRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkUserExamScoreRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkUserExamScoreRecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkUserExamScoreRecordMutation", m)
	}
	return f(ctx, mv)
}

// The TkUserQuestionBankRecordFunc type is an adapter to allow the use of ordinary
// function as TkUserQuestionBankRecord mutator.
type TkUserQuestionBankRecordFunc func(context.Context, *ent.TkUserQuestionBankRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkUserQuestionBankRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkUserQuestionBankRecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkUserQuestionBankRecordMutation", m)
	}
	return f(ctx, mv)
}

// The TkUserQuestionRecordFunc type is an adapter to allow the use of ordinary
// function as TkUserQuestionRecord mutator.
type TkUserQuestionRecordFunc func(context.Context, *ent.TkUserQuestionRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkUserQuestionRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkUserQuestionRecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkUserQuestionRecordMutation", m)
	}
	return f(ctx, mv)
}

// The TkUserRandomExamRecodeFunc type is an adapter to allow the use of ordinary
// function as TkUserRandomExamRecode mutator.
type TkUserRandomExamRecodeFunc func(context.Context, *ent.TkUserRandomExamRecodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkUserRandomExamRecodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkUserRandomExamRecodeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkUserRandomExamRecodeMutation", m)
	}
	return f(ctx, mv)
}

// The TkUserSimulationTeacherMarkFunc type is an adapter to allow the use of ordinary
// function as TkUserSimulationTeacherMark mutator.
type TkUserSimulationTeacherMarkFunc func(context.Context, *ent.TkUserSimulationTeacherMarkMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkUserSimulationTeacherMarkFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkUserSimulationTeacherMarkMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkUserSimulationTeacherMarkMutation", m)
	}
	return f(ctx, mv)
}

// The TkUserWrongQuestionRecodeFunc type is an adapter to allow the use of ordinary
// function as TkUserWrongQuestionRecode mutator.
type TkUserWrongQuestionRecodeFunc func(context.Context, *ent.TkUserWrongQuestionRecodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TkUserWrongQuestionRecodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TkUserWrongQuestionRecodeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TkUserWrongQuestionRecodeMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// The UserAskAnswerFunc type is an adapter to allow the use of ordinary
// function as UserAskAnswer mutator.
type UserAskAnswerFunc func(context.Context, *ent.UserAskAnswerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserAskAnswerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserAskAnswerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserAskAnswerMutation", m)
	}
	return f(ctx, mv)
}

// The UserAskAnswerAttachmentFunc type is an adapter to allow the use of ordinary
// function as UserAskAnswerAttachment mutator.
type UserAskAnswerAttachmentFunc func(context.Context, *ent.UserAskAnswerAttachmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserAskAnswerAttachmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserAskAnswerAttachmentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserAskAnswerAttachmentMutation", m)
	}
	return f(ctx, mv)
}

// The UserCourseAppraiseFunc type is an adapter to allow the use of ordinary
// function as UserCourseAppraise mutator.
type UserCourseAppraiseFunc func(context.Context, *ent.UserCourseAppraiseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserCourseAppraiseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserCourseAppraiseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserCourseAppraiseMutation", m)
	}
	return f(ctx, mv)
}

// The UserLoginLogFunc type is an adapter to allow the use of ordinary
// function as UserLoginLog mutator.
type UserLoginLogFunc func(context.Context, *ent.UserLoginLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserLoginLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserLoginLogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserLoginLogMutation", m)
	}
	return f(ctx, mv)
}

// The VideoRecordFunc type is an adapter to allow the use of ordinary
// function as VideoRecord mutator.
type VideoRecordFunc func(context.Context, *ent.VideoRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VideoRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VideoRecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VideoRecordMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}

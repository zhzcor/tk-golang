// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kcsmallcategoryquestion"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkquestion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcSmallCategoryQuestionUpdate is the builder for updating KcSmallCategoryQuestion entities.
type KcSmallCategoryQuestionUpdate struct {
	config
	hooks    []Hook
	mutation *KcSmallCategoryQuestionMutation
}

// Where adds a new predicate for the KcSmallCategoryQuestionUpdate builder.
func (kscqu *KcSmallCategoryQuestionUpdate) Where(ps ...predicate.KcSmallCategoryQuestion) *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.predicates = append(kscqu.mutation.predicates, ps...)
	return kscqu
}

// SetUUID sets the "uuid" field.
func (kscqu *KcSmallCategoryQuestionUpdate) SetUUID(s string) *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.SetUUID(s)
	return kscqu
}

// SetUpdatedAt sets the "updated_at" field.
func (kscqu *KcSmallCategoryQuestionUpdate) SetUpdatedAt(t time.Time) *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.SetUpdatedAt(t)
	return kscqu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kscqu *KcSmallCategoryQuestionUpdate) ClearUpdatedAt() *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.ClearUpdatedAt()
	return kscqu
}

// SetDeletedAt sets the "deleted_at" field.
func (kscqu *KcSmallCategoryQuestionUpdate) SetDeletedAt(t time.Time) *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.SetDeletedAt(t)
	return kscqu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kscqu *KcSmallCategoryQuestionUpdate) SetNillableDeletedAt(t *time.Time) *KcSmallCategoryQuestionUpdate {
	if t != nil {
		kscqu.SetDeletedAt(*t)
	}
	return kscqu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (kscqu *KcSmallCategoryQuestionUpdate) ClearDeletedAt() *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.ClearDeletedAt()
	return kscqu
}

// SetQuestionID sets the "question_id" field.
func (kscqu *KcSmallCategoryQuestionUpdate) SetQuestionID(i int) *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.ResetQuestionID()
	kscqu.mutation.SetQuestionID(i)
	return kscqu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (kscqu *KcSmallCategoryQuestionUpdate) SetNillableQuestionID(i *int) *KcSmallCategoryQuestionUpdate {
	if i != nil {
		kscqu.SetQuestionID(*i)
	}
	return kscqu
}

// ClearQuestionID clears the value of the "question_id" field.
func (kscqu *KcSmallCategoryQuestionUpdate) ClearQuestionID() *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.ClearQuestionID()
	return kscqu
}

// SetSmallCategoryID sets the "small_category_id" field.
func (kscqu *KcSmallCategoryQuestionUpdate) SetSmallCategoryID(i int) *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.ResetSmallCategoryID()
	kscqu.mutation.SetSmallCategoryID(i)
	return kscqu
}

// SetNillableSmallCategoryID sets the "small_category_id" field if the given value is not nil.
func (kscqu *KcSmallCategoryQuestionUpdate) SetNillableSmallCategoryID(i *int) *KcSmallCategoryQuestionUpdate {
	if i != nil {
		kscqu.SetSmallCategoryID(*i)
	}
	return kscqu
}

// ClearSmallCategoryID clears the value of the "small_category_id" field.
func (kscqu *KcSmallCategoryQuestionUpdate) ClearSmallCategoryID() *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.ClearSmallCategoryID()
	return kscqu
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (kscqu *KcSmallCategoryQuestionUpdate) SetQuestion(t *TkQuestion) *KcSmallCategoryQuestionUpdate {
	return kscqu.SetQuestionID(t.ID)
}

// SetCourseSmallCategoryID sets the "course_small_category" edge to the KcCourseSmallCategory entity by ID.
func (kscqu *KcSmallCategoryQuestionUpdate) SetCourseSmallCategoryID(id int) *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.SetCourseSmallCategoryID(id)
	return kscqu
}

// SetNillableCourseSmallCategoryID sets the "course_small_category" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (kscqu *KcSmallCategoryQuestionUpdate) SetNillableCourseSmallCategoryID(id *int) *KcSmallCategoryQuestionUpdate {
	if id != nil {
		kscqu = kscqu.SetCourseSmallCategoryID(*id)
	}
	return kscqu
}

// SetCourseSmallCategory sets the "course_small_category" edge to the KcCourseSmallCategory entity.
func (kscqu *KcSmallCategoryQuestionUpdate) SetCourseSmallCategory(k *KcCourseSmallCategory) *KcSmallCategoryQuestionUpdate {
	return kscqu.SetCourseSmallCategoryID(k.ID)
}

// Mutation returns the KcSmallCategoryQuestionMutation object of the builder.
func (kscqu *KcSmallCategoryQuestionUpdate) Mutation() *KcSmallCategoryQuestionMutation {
	return kscqu.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (kscqu *KcSmallCategoryQuestionUpdate) ClearQuestion() *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.ClearQuestion()
	return kscqu
}

// ClearCourseSmallCategory clears the "course_small_category" edge to the KcCourseSmallCategory entity.
func (kscqu *KcSmallCategoryQuestionUpdate) ClearCourseSmallCategory() *KcSmallCategoryQuestionUpdate {
	kscqu.mutation.ClearCourseSmallCategory()
	return kscqu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kscqu *KcSmallCategoryQuestionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kscqu.defaults()
	if len(kscqu.hooks) == 0 {
		affected, err = kscqu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcSmallCategoryQuestionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kscqu.mutation = mutation
			affected, err = kscqu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kscqu.hooks) - 1; i >= 0; i-- {
			mut = kscqu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kscqu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kscqu *KcSmallCategoryQuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := kscqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kscqu *KcSmallCategoryQuestionUpdate) Exec(ctx context.Context) error {
	_, err := kscqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kscqu *KcSmallCategoryQuestionUpdate) ExecX(ctx context.Context) {
	if err := kscqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kscqu *KcSmallCategoryQuestionUpdate) defaults() {
	if _, ok := kscqu.mutation.UpdatedAt(); !ok && !kscqu.mutation.UpdatedAtCleared() {
		v := kcsmallcategoryquestion.UpdateDefaultUpdatedAt()
		kscqu.mutation.SetUpdatedAt(v)
	}
}

func (kscqu *KcSmallCategoryQuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kcsmallcategoryquestion.Table,
			Columns: kcsmallcategoryquestion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcsmallcategoryquestion.FieldID,
			},
		},
	}
	if ps := kscqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kscqu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcsmallcategoryquestion.FieldUUID,
		})
	}
	if kscqu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcsmallcategoryquestion.FieldCreatedAt,
		})
	}
	if value, ok := kscqu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcsmallcategoryquestion.FieldUpdatedAt,
		})
	}
	if kscqu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcsmallcategoryquestion.FieldUpdatedAt,
		})
	}
	if value, ok := kscqu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcsmallcategoryquestion.FieldDeletedAt,
		})
	}
	if kscqu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcsmallcategoryquestion.FieldDeletedAt,
		})
	}
	if kscqu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcsmallcategoryquestion.QuestionTable,
			Columns: []string{kcsmallcategoryquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kscqu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcsmallcategoryquestion.QuestionTable,
			Columns: []string{kcsmallcategoryquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kscqu.mutation.CourseSmallCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcsmallcategoryquestion.CourseSmallCategoryTable,
			Columns: []string{kcsmallcategoryquestion.CourseSmallCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kscqu.mutation.CourseSmallCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcsmallcategoryquestion.CourseSmallCategoryTable,
			Columns: []string{kcsmallcategoryquestion.CourseSmallCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kscqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kcsmallcategoryquestion.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KcSmallCategoryQuestionUpdateOne is the builder for updating a single KcSmallCategoryQuestion entity.
type KcSmallCategoryQuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KcSmallCategoryQuestionMutation
}

// SetUUID sets the "uuid" field.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetUUID(s string) *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.SetUUID(s)
	return kscquo
}

// SetUpdatedAt sets the "updated_at" field.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetUpdatedAt(t time.Time) *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.SetUpdatedAt(t)
	return kscquo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kscquo *KcSmallCategoryQuestionUpdateOne) ClearUpdatedAt() *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.ClearUpdatedAt()
	return kscquo
}

// SetDeletedAt sets the "deleted_at" field.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetDeletedAt(t time.Time) *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.SetDeletedAt(t)
	return kscquo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetNillableDeletedAt(t *time.Time) *KcSmallCategoryQuestionUpdateOne {
	if t != nil {
		kscquo.SetDeletedAt(*t)
	}
	return kscquo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (kscquo *KcSmallCategoryQuestionUpdateOne) ClearDeletedAt() *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.ClearDeletedAt()
	return kscquo
}

// SetQuestionID sets the "question_id" field.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetQuestionID(i int) *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.ResetQuestionID()
	kscquo.mutation.SetQuestionID(i)
	return kscquo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetNillableQuestionID(i *int) *KcSmallCategoryQuestionUpdateOne {
	if i != nil {
		kscquo.SetQuestionID(*i)
	}
	return kscquo
}

// ClearQuestionID clears the value of the "question_id" field.
func (kscquo *KcSmallCategoryQuestionUpdateOne) ClearQuestionID() *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.ClearQuestionID()
	return kscquo
}

// SetSmallCategoryID sets the "small_category_id" field.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetSmallCategoryID(i int) *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.ResetSmallCategoryID()
	kscquo.mutation.SetSmallCategoryID(i)
	return kscquo
}

// SetNillableSmallCategoryID sets the "small_category_id" field if the given value is not nil.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetNillableSmallCategoryID(i *int) *KcSmallCategoryQuestionUpdateOne {
	if i != nil {
		kscquo.SetSmallCategoryID(*i)
	}
	return kscquo
}

// ClearSmallCategoryID clears the value of the "small_category_id" field.
func (kscquo *KcSmallCategoryQuestionUpdateOne) ClearSmallCategoryID() *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.ClearSmallCategoryID()
	return kscquo
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetQuestion(t *TkQuestion) *KcSmallCategoryQuestionUpdateOne {
	return kscquo.SetQuestionID(t.ID)
}

// SetCourseSmallCategoryID sets the "course_small_category" edge to the KcCourseSmallCategory entity by ID.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetCourseSmallCategoryID(id int) *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.SetCourseSmallCategoryID(id)
	return kscquo
}

// SetNillableCourseSmallCategoryID sets the "course_small_category" edge to the KcCourseSmallCategory entity by ID if the given value is not nil.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetNillableCourseSmallCategoryID(id *int) *KcSmallCategoryQuestionUpdateOne {
	if id != nil {
		kscquo = kscquo.SetCourseSmallCategoryID(*id)
	}
	return kscquo
}

// SetCourseSmallCategory sets the "course_small_category" edge to the KcCourseSmallCategory entity.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SetCourseSmallCategory(k *KcCourseSmallCategory) *KcSmallCategoryQuestionUpdateOne {
	return kscquo.SetCourseSmallCategoryID(k.ID)
}

// Mutation returns the KcSmallCategoryQuestionMutation object of the builder.
func (kscquo *KcSmallCategoryQuestionUpdateOne) Mutation() *KcSmallCategoryQuestionMutation {
	return kscquo.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (kscquo *KcSmallCategoryQuestionUpdateOne) ClearQuestion() *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.ClearQuestion()
	return kscquo
}

// ClearCourseSmallCategory clears the "course_small_category" edge to the KcCourseSmallCategory entity.
func (kscquo *KcSmallCategoryQuestionUpdateOne) ClearCourseSmallCategory() *KcSmallCategoryQuestionUpdateOne {
	kscquo.mutation.ClearCourseSmallCategory()
	return kscquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kscquo *KcSmallCategoryQuestionUpdateOne) Select(field string, fields ...string) *KcSmallCategoryQuestionUpdateOne {
	kscquo.fields = append([]string{field}, fields...)
	return kscquo
}

// Save executes the query and returns the updated KcSmallCategoryQuestion entity.
func (kscquo *KcSmallCategoryQuestionUpdateOne) Save(ctx context.Context) (*KcSmallCategoryQuestion, error) {
	var (
		err  error
		node *KcSmallCategoryQuestion
	)
	kscquo.defaults()
	if len(kscquo.hooks) == 0 {
		node, err = kscquo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcSmallCategoryQuestionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kscquo.mutation = mutation
			node, err = kscquo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kscquo.hooks) - 1; i >= 0; i-- {
			mut = kscquo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kscquo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kscquo *KcSmallCategoryQuestionUpdateOne) SaveX(ctx context.Context) *KcSmallCategoryQuestion {
	node, err := kscquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kscquo *KcSmallCategoryQuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := kscquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kscquo *KcSmallCategoryQuestionUpdateOne) ExecX(ctx context.Context) {
	if err := kscquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kscquo *KcSmallCategoryQuestionUpdateOne) defaults() {
	if _, ok := kscquo.mutation.UpdatedAt(); !ok && !kscquo.mutation.UpdatedAtCleared() {
		v := kcsmallcategoryquestion.UpdateDefaultUpdatedAt()
		kscquo.mutation.SetUpdatedAt(v)
	}
}

func (kscquo *KcSmallCategoryQuestionUpdateOne) sqlSave(ctx context.Context) (_node *KcSmallCategoryQuestion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kcsmallcategoryquestion.Table,
			Columns: kcsmallcategoryquestion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcsmallcategoryquestion.FieldID,
			},
		},
	}
	id, ok := kscquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KcSmallCategoryQuestion.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kscquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kcsmallcategoryquestion.FieldID)
		for _, f := range fields {
			if !kcsmallcategoryquestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kcsmallcategoryquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kscquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kscquo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kcsmallcategoryquestion.FieldUUID,
		})
	}
	if kscquo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcsmallcategoryquestion.FieldCreatedAt,
		})
	}
	if value, ok := kscquo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcsmallcategoryquestion.FieldUpdatedAt,
		})
	}
	if kscquo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcsmallcategoryquestion.FieldUpdatedAt,
		})
	}
	if value, ok := kscquo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kcsmallcategoryquestion.FieldDeletedAt,
		})
	}
	if kscquo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: kcsmallcategoryquestion.FieldDeletedAt,
		})
	}
	if kscquo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcsmallcategoryquestion.QuestionTable,
			Columns: []string{kcsmallcategoryquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kscquo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcsmallcategoryquestion.QuestionTable,
			Columns: []string{kcsmallcategoryquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kscquo.mutation.CourseSmallCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcsmallcategoryquestion.CourseSmallCategoryTable,
			Columns: []string{kcsmallcategoryquestion.CourseSmallCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kscquo.mutation.CourseSmallCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcsmallcategoryquestion.CourseSmallCategoryTable,
			Columns: []string{kcsmallcategoryquestion.CourseSmallCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KcSmallCategoryQuestion{config: kscquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kscquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kcsmallcategoryquestion.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkquestionbank"
	"gserver/internal/store/ent/tkuserquestionbankrecord"
	"gserver/internal/store/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserQuestionBankRecordUpdate is the builder for updating TkUserQuestionBankRecord entities.
type TkUserQuestionBankRecordUpdate struct {
	config
	hooks    []Hook
	mutation *TkUserQuestionBankRecordMutation
}

// Where adds a new predicate for the TkUserQuestionBankRecordUpdate builder.
func (tuqbru *TkUserQuestionBankRecordUpdate) Where(ps ...predicate.TkUserQuestionBankRecord) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.predicates = append(tuqbru.mutation.predicates, ps...)
	return tuqbru
}

// SetUUID sets the "uuid" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetUUID(s string) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.SetUUID(s)
	return tuqbru
}

// SetUpdatedAt sets the "updated_at" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetUpdatedAt(t time.Time) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.SetUpdatedAt(t)
	return tuqbru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) ClearUpdatedAt() *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ClearUpdatedAt()
	return tuqbru
}

// SetDeletedAt sets the "deleted_at" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetDeletedAt(t time.Time) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.SetDeletedAt(t)
	return tuqbru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetNillableDeletedAt(t *time.Time) *TkUserQuestionBankRecordUpdate {
	if t != nil {
		tuqbru.SetDeletedAt(*t)
	}
	return tuqbru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) ClearDeletedAt() *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ClearDeletedAt()
	return tuqbru
}

// SetRecordCount sets the "record_count" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetRecordCount(i int) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ResetRecordCount()
	tuqbru.mutation.SetRecordCount(i)
	return tuqbru
}

// SetNillableRecordCount sets the "record_count" field if the given value is not nil.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetNillableRecordCount(i *int) *TkUserQuestionBankRecordUpdate {
	if i != nil {
		tuqbru.SetRecordCount(*i)
	}
	return tuqbru
}

// AddRecordCount adds i to the "record_count" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) AddRecordCount(i int) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.AddRecordCount(i)
	return tuqbru
}

// SetCorrectCount sets the "correct_count" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetCorrectCount(i int) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ResetCorrectCount()
	tuqbru.mutation.SetCorrectCount(i)
	return tuqbru
}

// SetNillableCorrectCount sets the "correct_count" field if the given value is not nil.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetNillableCorrectCount(i *int) *TkUserQuestionBankRecordUpdate {
	if i != nil {
		tuqbru.SetCorrectCount(*i)
	}
	return tuqbru
}

// AddCorrectCount adds i to the "correct_count" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) AddCorrectCount(i int) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.AddCorrectCount(i)
	return tuqbru
}

// SetWrongCount sets the "wrong_count" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetWrongCount(i int) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ResetWrongCount()
	tuqbru.mutation.SetWrongCount(i)
	return tuqbru
}

// SetNillableWrongCount sets the "wrong_count" field if the given value is not nil.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetNillableWrongCount(i *int) *TkUserQuestionBankRecordUpdate {
	if i != nil {
		tuqbru.SetWrongCount(*i)
	}
	return tuqbru
}

// AddWrongCount adds i to the "wrong_count" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) AddWrongCount(i int) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.AddWrongCount(i)
	return tuqbru
}

// SetCorrectRate sets the "correct_rate" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetCorrectRate(f float64) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ResetCorrectRate()
	tuqbru.mutation.SetCorrectRate(f)
	return tuqbru
}

// SetNillableCorrectRate sets the "correct_rate" field if the given value is not nil.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetNillableCorrectRate(f *float64) *TkUserQuestionBankRecordUpdate {
	if f != nil {
		tuqbru.SetCorrectRate(*f)
	}
	return tuqbru
}

// AddCorrectRate adds f to the "correct_rate" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) AddCorrectRate(f float64) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.AddCorrectRate(f)
	return tuqbru
}

// SetFinishRate sets the "finish_rate" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetFinishRate(f float64) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ResetFinishRate()
	tuqbru.mutation.SetFinishRate(f)
	return tuqbru
}

// SetNillableFinishRate sets the "finish_rate" field if the given value is not nil.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetNillableFinishRate(f *float64) *TkUserQuestionBankRecordUpdate {
	if f != nil {
		tuqbru.SetFinishRate(*f)
	}
	return tuqbru
}

// AddFinishRate adds f to the "finish_rate" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) AddFinishRate(f float64) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.AddFinishRate(f)
	return tuqbru
}

// SetUserID sets the "user_id" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetUserID(i int) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ResetUserID()
	tuqbru.mutation.SetUserID(i)
	return tuqbru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetNillableUserID(i *int) *TkUserQuestionBankRecordUpdate {
	if i != nil {
		tuqbru.SetUserID(*i)
	}
	return tuqbru
}

// ClearUserID clears the value of the "user_id" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) ClearUserID() *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ClearUserID()
	return tuqbru
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetQuestionBankID(i int) *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ResetQuestionBankID()
	tuqbru.mutation.SetQuestionBankID(i)
	return tuqbru
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetNillableQuestionBankID(i *int) *TkUserQuestionBankRecordUpdate {
	if i != nil {
		tuqbru.SetQuestionBankID(*i)
	}
	return tuqbru
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tuqbru *TkUserQuestionBankRecordUpdate) ClearQuestionBankID() *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ClearQuestionBankID()
	return tuqbru
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetQuestionBank(t *TkQuestionBank) *TkUserQuestionBankRecordUpdate {
	return tuqbru.SetQuestionBankID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuqbru *TkUserQuestionBankRecordUpdate) SetUser(u *User) *TkUserQuestionBankRecordUpdate {
	return tuqbru.SetUserID(u.ID)
}

// Mutation returns the TkUserQuestionBankRecordMutation object of the builder.
func (tuqbru *TkUserQuestionBankRecordUpdate) Mutation() *TkUserQuestionBankRecordMutation {
	return tuqbru.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (tuqbru *TkUserQuestionBankRecordUpdate) ClearQuestionBank() *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ClearQuestionBank()
	return tuqbru
}

// ClearUser clears the "user" edge to the User entity.
func (tuqbru *TkUserQuestionBankRecordUpdate) ClearUser() *TkUserQuestionBankRecordUpdate {
	tuqbru.mutation.ClearUser()
	return tuqbru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuqbru *TkUserQuestionBankRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tuqbru.defaults()
	if len(tuqbru.hooks) == 0 {
		affected, err = tuqbru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserQuestionBankRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuqbru.mutation = mutation
			affected, err = tuqbru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tuqbru.hooks) - 1; i >= 0; i-- {
			mut = tuqbru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuqbru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuqbru *TkUserQuestionBankRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := tuqbru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuqbru *TkUserQuestionBankRecordUpdate) Exec(ctx context.Context) error {
	_, err := tuqbru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuqbru *TkUserQuestionBankRecordUpdate) ExecX(ctx context.Context) {
	if err := tuqbru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuqbru *TkUserQuestionBankRecordUpdate) defaults() {
	if _, ok := tuqbru.mutation.UpdatedAt(); !ok && !tuqbru.mutation.UpdatedAtCleared() {
		v := tkuserquestionbankrecord.UpdateDefaultUpdatedAt()
		tuqbru.mutation.SetUpdatedAt(v)
	}
}

func (tuqbru *TkUserQuestionBankRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserquestionbankrecord.Table,
			Columns: tkuserquestionbankrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserquestionbankrecord.FieldID,
			},
		},
	}
	if ps := tuqbru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuqbru.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldUUID,
		})
	}
	if tuqbru.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionbankrecord.FieldCreatedAt,
		})
	}
	if value, ok := tuqbru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldUpdatedAt,
		})
	}
	if tuqbru.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionbankrecord.FieldUpdatedAt,
		})
	}
	if value, ok := tuqbru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldDeletedAt,
		})
	}
	if tuqbru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionbankrecord.FieldDeletedAt,
		})
	}
	if value, ok := tuqbru.mutation.RecordCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldRecordCount,
		})
	}
	if value, ok := tuqbru.mutation.AddedRecordCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldRecordCount,
		})
	}
	if value, ok := tuqbru.mutation.CorrectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectCount,
		})
	}
	if value, ok := tuqbru.mutation.AddedCorrectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectCount,
		})
	}
	if value, ok := tuqbru.mutation.WrongCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldWrongCount,
		})
	}
	if value, ok := tuqbru.mutation.AddedWrongCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldWrongCount,
		})
	}
	if value, ok := tuqbru.mutation.CorrectRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectRate,
		})
	}
	if value, ok := tuqbru.mutation.AddedCorrectRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectRate,
		})
	}
	if value, ok := tuqbru.mutation.FinishRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldFinishRate,
		})
	}
	if value, ok := tuqbru.mutation.AddedFinishRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldFinishRate,
		})
	}
	if tuqbru.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.QuestionBankTable,
			Columns: []string{tkuserquestionbankrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqbru.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.QuestionBankTable,
			Columns: []string{tkuserquestionbankrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqbru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.UserTable,
			Columns: []string{tkuserquestionbankrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqbru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.UserTable,
			Columns: []string{tkuserquestionbankrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tuqbru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserquestionbankrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkUserQuestionBankRecordUpdateOne is the builder for updating a single TkUserQuestionBankRecord entity.
type TkUserQuestionBankRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkUserQuestionBankRecordMutation
}

// SetUUID sets the "uuid" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetUUID(s string) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.SetUUID(s)
	return tuqbruo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetUpdatedAt(t time.Time) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.SetUpdatedAt(t)
	return tuqbruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) ClearUpdatedAt() *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ClearUpdatedAt()
	return tuqbruo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetDeletedAt(t time.Time) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.SetDeletedAt(t)
	return tuqbruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *TkUserQuestionBankRecordUpdateOne {
	if t != nil {
		tuqbruo.SetDeletedAt(*t)
	}
	return tuqbruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) ClearDeletedAt() *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ClearDeletedAt()
	return tuqbruo
}

// SetRecordCount sets the "record_count" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetRecordCount(i int) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ResetRecordCount()
	tuqbruo.mutation.SetRecordCount(i)
	return tuqbruo
}

// SetNillableRecordCount sets the "record_count" field if the given value is not nil.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetNillableRecordCount(i *int) *TkUserQuestionBankRecordUpdateOne {
	if i != nil {
		tuqbruo.SetRecordCount(*i)
	}
	return tuqbruo
}

// AddRecordCount adds i to the "record_count" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) AddRecordCount(i int) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.AddRecordCount(i)
	return tuqbruo
}

// SetCorrectCount sets the "correct_count" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetCorrectCount(i int) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ResetCorrectCount()
	tuqbruo.mutation.SetCorrectCount(i)
	return tuqbruo
}

// SetNillableCorrectCount sets the "correct_count" field if the given value is not nil.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetNillableCorrectCount(i *int) *TkUserQuestionBankRecordUpdateOne {
	if i != nil {
		tuqbruo.SetCorrectCount(*i)
	}
	return tuqbruo
}

// AddCorrectCount adds i to the "correct_count" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) AddCorrectCount(i int) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.AddCorrectCount(i)
	return tuqbruo
}

// SetWrongCount sets the "wrong_count" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetWrongCount(i int) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ResetWrongCount()
	tuqbruo.mutation.SetWrongCount(i)
	return tuqbruo
}

// SetNillableWrongCount sets the "wrong_count" field if the given value is not nil.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetNillableWrongCount(i *int) *TkUserQuestionBankRecordUpdateOne {
	if i != nil {
		tuqbruo.SetWrongCount(*i)
	}
	return tuqbruo
}

// AddWrongCount adds i to the "wrong_count" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) AddWrongCount(i int) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.AddWrongCount(i)
	return tuqbruo
}

// SetCorrectRate sets the "correct_rate" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetCorrectRate(f float64) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ResetCorrectRate()
	tuqbruo.mutation.SetCorrectRate(f)
	return tuqbruo
}

// SetNillableCorrectRate sets the "correct_rate" field if the given value is not nil.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetNillableCorrectRate(f *float64) *TkUserQuestionBankRecordUpdateOne {
	if f != nil {
		tuqbruo.SetCorrectRate(*f)
	}
	return tuqbruo
}

// AddCorrectRate adds f to the "correct_rate" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) AddCorrectRate(f float64) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.AddCorrectRate(f)
	return tuqbruo
}

// SetFinishRate sets the "finish_rate" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetFinishRate(f float64) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ResetFinishRate()
	tuqbruo.mutation.SetFinishRate(f)
	return tuqbruo
}

// SetNillableFinishRate sets the "finish_rate" field if the given value is not nil.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetNillableFinishRate(f *float64) *TkUserQuestionBankRecordUpdateOne {
	if f != nil {
		tuqbruo.SetFinishRate(*f)
	}
	return tuqbruo
}

// AddFinishRate adds f to the "finish_rate" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) AddFinishRate(f float64) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.AddFinishRate(f)
	return tuqbruo
}

// SetUserID sets the "user_id" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetUserID(i int) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ResetUserID()
	tuqbruo.mutation.SetUserID(i)
	return tuqbruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetNillableUserID(i *int) *TkUserQuestionBankRecordUpdateOne {
	if i != nil {
		tuqbruo.SetUserID(*i)
	}
	return tuqbruo
}

// ClearUserID clears the value of the "user_id" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) ClearUserID() *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ClearUserID()
	return tuqbruo
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetQuestionBankID(i int) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ResetQuestionBankID()
	tuqbruo.mutation.SetQuestionBankID(i)
	return tuqbruo
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetNillableQuestionBankID(i *int) *TkUserQuestionBankRecordUpdateOne {
	if i != nil {
		tuqbruo.SetQuestionBankID(*i)
	}
	return tuqbruo
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) ClearQuestionBankID() *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ClearQuestionBankID()
	return tuqbruo
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetQuestionBank(t *TkQuestionBank) *TkUserQuestionBankRecordUpdateOne {
	return tuqbruo.SetQuestionBankID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SetUser(u *User) *TkUserQuestionBankRecordUpdateOne {
	return tuqbruo.SetUserID(u.ID)
}

// Mutation returns the TkUserQuestionBankRecordMutation object of the builder.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) Mutation() *TkUserQuestionBankRecordMutation {
	return tuqbruo.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) ClearQuestionBank() *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ClearQuestionBank()
	return tuqbruo
}

// ClearUser clears the "user" edge to the User entity.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) ClearUser() *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.mutation.ClearUser()
	return tuqbruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) Select(field string, fields ...string) *TkUserQuestionBankRecordUpdateOne {
	tuqbruo.fields = append([]string{field}, fields...)
	return tuqbruo
}

// Save executes the query and returns the updated TkUserQuestionBankRecord entity.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) Save(ctx context.Context) (*TkUserQuestionBankRecord, error) {
	var (
		err  error
		node *TkUserQuestionBankRecord
	)
	tuqbruo.defaults()
	if len(tuqbruo.hooks) == 0 {
		node, err = tuqbruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserQuestionBankRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuqbruo.mutation = mutation
			node, err = tuqbruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuqbruo.hooks) - 1; i >= 0; i-- {
			mut = tuqbruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuqbruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) SaveX(ctx context.Context) *TkUserQuestionBankRecord {
	node, err := tuqbruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := tuqbruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) ExecX(ctx context.Context) {
	if err := tuqbruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuqbruo *TkUserQuestionBankRecordUpdateOne) defaults() {
	if _, ok := tuqbruo.mutation.UpdatedAt(); !ok && !tuqbruo.mutation.UpdatedAtCleared() {
		v := tkuserquestionbankrecord.UpdateDefaultUpdatedAt()
		tuqbruo.mutation.SetUpdatedAt(v)
	}
}

func (tuqbruo *TkUserQuestionBankRecordUpdateOne) sqlSave(ctx context.Context) (_node *TkUserQuestionBankRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserquestionbankrecord.Table,
			Columns: tkuserquestionbankrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserquestionbankrecord.FieldID,
			},
		},
	}
	id, ok := tuqbruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkUserQuestionBankRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuqbruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkuserquestionbankrecord.FieldID)
		for _, f := range fields {
			if !tkuserquestionbankrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkuserquestionbankrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuqbruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuqbruo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldUUID,
		})
	}
	if tuqbruo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionbankrecord.FieldCreatedAt,
		})
	}
	if value, ok := tuqbruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldUpdatedAt,
		})
	}
	if tuqbruo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionbankrecord.FieldUpdatedAt,
		})
	}
	if value, ok := tuqbruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldDeletedAt,
		})
	}
	if tuqbruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserquestionbankrecord.FieldDeletedAt,
		})
	}
	if value, ok := tuqbruo.mutation.RecordCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldRecordCount,
		})
	}
	if value, ok := tuqbruo.mutation.AddedRecordCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldRecordCount,
		})
	}
	if value, ok := tuqbruo.mutation.CorrectCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectCount,
		})
	}
	if value, ok := tuqbruo.mutation.AddedCorrectCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectCount,
		})
	}
	if value, ok := tuqbruo.mutation.WrongCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldWrongCount,
		})
	}
	if value, ok := tuqbruo.mutation.AddedWrongCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldWrongCount,
		})
	}
	if value, ok := tuqbruo.mutation.CorrectRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectRate,
		})
	}
	if value, ok := tuqbruo.mutation.AddedCorrectRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldCorrectRate,
		})
	}
	if value, ok := tuqbruo.mutation.FinishRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldFinishRate,
		})
	}
	if value, ok := tuqbruo.mutation.AddedFinishRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tkuserquestionbankrecord.FieldFinishRate,
		})
	}
	if tuqbruo.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.QuestionBankTable,
			Columns: []string{tkuserquestionbankrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqbruo.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.QuestionBankTable,
			Columns: []string{tkuserquestionbankrecord.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuqbruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.UserTable,
			Columns: []string{tkuserquestionbankrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuqbruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserquestionbankrecord.UserTable,
			Columns: []string{tkuserquestionbankrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkUserQuestionBankRecord{config: tuqbruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuqbruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserquestionbankrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

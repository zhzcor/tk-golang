// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/attachment"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursechapter"
	"tkserver/internal/store/ent/kccoursesection"
	"tkserver/internal/store/ent/kccoursesmallcategory"
	"tkserver/internal/store/ent/kcsmallcategoryattachment"
	"tkserver/internal/store/ent/kcsmallcategoryexampaper"
	"tkserver/internal/store/ent/kcsmallcategoryquestion"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/usercourseappraise"
	"tkserver/internal/store/ent/videorecord"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseSmallCategoryQuery is the builder for querying KcCourseSmallCategory entities.
type KcCourseSmallCategoryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.KcCourseSmallCategory
	// eager-loading edges.
	withCourse                         *KcCourseQuery
	withChapter                        *KcCourseChapterQuery
	withSection                        *KcCourseSectionQuery
	withCourseSmallCategoryAttachments *KcSmallCategoryAttachmentQuery
	withCourseSmallCategoryExampapers  *KcSmallCategoryExamPaperQuery
	withCourseSmallCategoryQuestions   *KcSmallCategoryQuestionQuery
	withCourseAppraiseSmalls           *UserCourseAppraiseQuery
	withVideoRecordSmall               *VideoRecordQuery
	withCsAttachment                   *AttachmentQuery
	withOdAttachment                   *AttachmentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KcCourseSmallCategoryQuery builder.
func (kcscq *KcCourseSmallCategoryQuery) Where(ps ...predicate.KcCourseSmallCategory) *KcCourseSmallCategoryQuery {
	kcscq.predicates = append(kcscq.predicates, ps...)
	return kcscq
}

// Limit adds a limit step to the query.
func (kcscq *KcCourseSmallCategoryQuery) Limit(limit int) *KcCourseSmallCategoryQuery {
	kcscq.limit = &limit
	return kcscq
}

// Offset adds an offset step to the query.
func (kcscq *KcCourseSmallCategoryQuery) Offset(offset int) *KcCourseSmallCategoryQuery {
	kcscq.offset = &offset
	return kcscq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kcscq *KcCourseSmallCategoryQuery) Unique(unique bool) *KcCourseSmallCategoryQuery {
	kcscq.unique = &unique
	return kcscq
}

// Order adds an order step to the query.
func (kcscq *KcCourseSmallCategoryQuery) Order(o ...OrderFunc) *KcCourseSmallCategoryQuery {
	kcscq.order = append(kcscq.order, o...)
	return kcscq
}

// QueryCourse chains the current query on the "course" edge.
func (kcscq *KcCourseSmallCategoryQuery) QueryCourse() *KcCourseQuery {
	query := &KcCourseQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(kccourse.Table, kccourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursesmallcategory.CourseTable, kccoursesmallcategory.CourseColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChapter chains the current query on the "chapter" edge.
func (kcscq *KcCourseSmallCategoryQuery) QueryChapter() *KcCourseChapterQuery {
	query := &KcCourseChapterQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(kccoursechapter.Table, kccoursechapter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursesmallcategory.ChapterTable, kccoursesmallcategory.ChapterColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySection chains the current query on the "section" edge.
func (kcscq *KcCourseSmallCategoryQuery) QuerySection() *KcCourseSectionQuery {
	query := &KcCourseSectionQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(kccoursesection.Table, kccoursesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kccoursesmallcategory.SectionTable, kccoursesmallcategory.SectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourseSmallCategoryAttachments chains the current query on the "course_small_category_attachments" edge.
func (kcscq *KcCourseSmallCategoryQuery) QueryCourseSmallCategoryAttachments() *KcSmallCategoryAttachmentQuery {
	query := &KcSmallCategoryAttachmentQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(kcsmallcategoryattachment.Table, kcsmallcategoryattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.CourseSmallCategoryAttachmentsTable, kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourseSmallCategoryExampapers chains the current query on the "course_small_category_exampapers" edge.
func (kcscq *KcCourseSmallCategoryQuery) QueryCourseSmallCategoryExampapers() *KcSmallCategoryExamPaperQuery {
	query := &KcSmallCategoryExamPaperQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(kcsmallcategoryexampaper.Table, kcsmallcategoryexampaper.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.CourseSmallCategoryExampapersTable, kccoursesmallcategory.CourseSmallCategoryExampapersColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourseSmallCategoryQuestions chains the current query on the "course_small_category_questions" edge.
func (kcscq *KcCourseSmallCategoryQuery) QueryCourseSmallCategoryQuestions() *KcSmallCategoryQuestionQuery {
	query := &KcSmallCategoryQuestionQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(kcsmallcategoryquestion.Table, kcsmallcategoryquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.CourseSmallCategoryQuestionsTable, kccoursesmallcategory.CourseSmallCategoryQuestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourseAppraiseSmalls chains the current query on the "course_appraise_smalls" edge.
func (kcscq *KcCourseSmallCategoryQuery) QueryCourseAppraiseSmalls() *UserCourseAppraiseQuery {
	query := &UserCourseAppraiseQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(usercourseappraise.Table, usercourseappraise.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.CourseAppraiseSmallsTable, kccoursesmallcategory.CourseAppraiseSmallsColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVideoRecordSmall chains the current query on the "video_record_small" edge.
func (kcscq *KcCourseSmallCategoryQuery) QueryVideoRecordSmall() *VideoRecordQuery {
	query := &VideoRecordQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(videorecord.Table, videorecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kccoursesmallcategory.VideoRecordSmallTable, kccoursesmallcategory.VideoRecordSmallColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCsAttachment chains the current query on the "cs_attachment" edge.
func (kcscq *KcCourseSmallCategoryQuery) QueryCsAttachment() *AttachmentQuery {
	query := &AttachmentQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, kccoursesmallcategory.CsAttachmentTable, kccoursesmallcategory.CsAttachmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOdAttachment chains the current query on the "od_attachment" edge.
func (kcscq *KcCourseSmallCategoryQuery) QueryOdAttachment() *AttachmentQuery {
	query := &AttachmentQuery{config: kcscq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kcscq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kccoursesmallcategory.Table, kccoursesmallcategory.FieldID, selector),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, kccoursesmallcategory.OdAttachmentTable, kccoursesmallcategory.OdAttachmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(kcscq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KcCourseSmallCategory entity from the query.
// Returns a *NotFoundError when no KcCourseSmallCategory was found.
func (kcscq *KcCourseSmallCategoryQuery) First(ctx context.Context) (*KcCourseSmallCategory, error) {
	nodes, err := kcscq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kccoursesmallcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kcscq *KcCourseSmallCategoryQuery) FirstX(ctx context.Context) *KcCourseSmallCategory {
	node, err := kcscq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KcCourseSmallCategory ID from the query.
// Returns a *NotFoundError when no KcCourseSmallCategory ID was found.
func (kcscq *KcCourseSmallCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kcscq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kccoursesmallcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kcscq *KcCourseSmallCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := kcscq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KcCourseSmallCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one KcCourseSmallCategory entity is not found.
// Returns a *NotFoundError when no KcCourseSmallCategory entities are found.
func (kcscq *KcCourseSmallCategoryQuery) Only(ctx context.Context) (*KcCourseSmallCategory, error) {
	nodes, err := kcscq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kccoursesmallcategory.Label}
	default:
		return nil, &NotSingularError{kccoursesmallcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kcscq *KcCourseSmallCategoryQuery) OnlyX(ctx context.Context) *KcCourseSmallCategory {
	node, err := kcscq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KcCourseSmallCategory ID in the query.
// Returns a *NotSingularError when exactly one KcCourseSmallCategory ID is not found.
// Returns a *NotFoundError when no entities are found.
func (kcscq *KcCourseSmallCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kcscq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kccoursesmallcategory.Label}
	default:
		err = &NotSingularError{kccoursesmallcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kcscq *KcCourseSmallCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := kcscq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KcCourseSmallCategories.
func (kcscq *KcCourseSmallCategoryQuery) All(ctx context.Context) ([]*KcCourseSmallCategory, error) {
	if err := kcscq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return kcscq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (kcscq *KcCourseSmallCategoryQuery) AllX(ctx context.Context) []*KcCourseSmallCategory {
	nodes, err := kcscq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KcCourseSmallCategory IDs.
func (kcscq *KcCourseSmallCategoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := kcscq.Select(kccoursesmallcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kcscq *KcCourseSmallCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := kcscq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kcscq *KcCourseSmallCategoryQuery) Count(ctx context.Context) (int, error) {
	if err := kcscq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return kcscq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (kcscq *KcCourseSmallCategoryQuery) CountX(ctx context.Context) int {
	count, err := kcscq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kcscq *KcCourseSmallCategoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := kcscq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return kcscq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (kcscq *KcCourseSmallCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := kcscq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KcCourseSmallCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kcscq *KcCourseSmallCategoryQuery) Clone() *KcCourseSmallCategoryQuery {
	if kcscq == nil {
		return nil
	}
	return &KcCourseSmallCategoryQuery{
		config:                             kcscq.config,
		limit:                              kcscq.limit,
		offset:                             kcscq.offset,
		order:                              append([]OrderFunc{}, kcscq.order...),
		predicates:                         append([]predicate.KcCourseSmallCategory{}, kcscq.predicates...),
		withCourse:                         kcscq.withCourse.Clone(),
		withChapter:                        kcscq.withChapter.Clone(),
		withSection:                        kcscq.withSection.Clone(),
		withCourseSmallCategoryAttachments: kcscq.withCourseSmallCategoryAttachments.Clone(),
		withCourseSmallCategoryExampapers:  kcscq.withCourseSmallCategoryExampapers.Clone(),
		withCourseSmallCategoryQuestions:   kcscq.withCourseSmallCategoryQuestions.Clone(),
		withCourseAppraiseSmalls:           kcscq.withCourseAppraiseSmalls.Clone(),
		withVideoRecordSmall:               kcscq.withVideoRecordSmall.Clone(),
		withCsAttachment:                   kcscq.withCsAttachment.Clone(),
		withOdAttachment:                   kcscq.withOdAttachment.Clone(),
		// clone intermediate query.
		sql:  kcscq.sql.Clone(),
		path: kcscq.path,
	}
}

// WithCourse tells the query-builder to eager-load the nodes that are connected to
// the "course" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithCourse(opts ...func(*KcCourseQuery)) *KcCourseSmallCategoryQuery {
	query := &KcCourseQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withCourse = query
	return kcscq
}

// WithChapter tells the query-builder to eager-load the nodes that are connected to
// the "chapter" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithChapter(opts ...func(*KcCourseChapterQuery)) *KcCourseSmallCategoryQuery {
	query := &KcCourseChapterQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withChapter = query
	return kcscq
}

// WithSection tells the query-builder to eager-load the nodes that are connected to
// the "section" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithSection(opts ...func(*KcCourseSectionQuery)) *KcCourseSmallCategoryQuery {
	query := &KcCourseSectionQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withSection = query
	return kcscq
}

// WithCourseSmallCategoryAttachments tells the query-builder to eager-load the nodes that are connected to
// the "course_small_category_attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithCourseSmallCategoryAttachments(opts ...func(*KcSmallCategoryAttachmentQuery)) *KcCourseSmallCategoryQuery {
	query := &KcSmallCategoryAttachmentQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withCourseSmallCategoryAttachments = query
	return kcscq
}

// WithCourseSmallCategoryExampapers tells the query-builder to eager-load the nodes that are connected to
// the "course_small_category_exampapers" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithCourseSmallCategoryExampapers(opts ...func(*KcSmallCategoryExamPaperQuery)) *KcCourseSmallCategoryQuery {
	query := &KcSmallCategoryExamPaperQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withCourseSmallCategoryExampapers = query
	return kcscq
}

// WithCourseSmallCategoryQuestions tells the query-builder to eager-load the nodes that are connected to
// the "course_small_category_questions" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithCourseSmallCategoryQuestions(opts ...func(*KcSmallCategoryQuestionQuery)) *KcCourseSmallCategoryQuery {
	query := &KcSmallCategoryQuestionQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withCourseSmallCategoryQuestions = query
	return kcscq
}

// WithCourseAppraiseSmalls tells the query-builder to eager-load the nodes that are connected to
// the "course_appraise_smalls" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithCourseAppraiseSmalls(opts ...func(*UserCourseAppraiseQuery)) *KcCourseSmallCategoryQuery {
	query := &UserCourseAppraiseQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withCourseAppraiseSmalls = query
	return kcscq
}

// WithVideoRecordSmall tells the query-builder to eager-load the nodes that are connected to
// the "video_record_small" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithVideoRecordSmall(opts ...func(*VideoRecordQuery)) *KcCourseSmallCategoryQuery {
	query := &VideoRecordQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withVideoRecordSmall = query
	return kcscq
}

// WithCsAttachment tells the query-builder to eager-load the nodes that are connected to
// the "cs_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithCsAttachment(opts ...func(*AttachmentQuery)) *KcCourseSmallCategoryQuery {
	query := &AttachmentQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withCsAttachment = query
	return kcscq
}

// WithOdAttachment tells the query-builder to eager-load the nodes that are connected to
// the "od_attachment" edge. The optional arguments are used to configure the query builder of the edge.
func (kcscq *KcCourseSmallCategoryQuery) WithOdAttachment(opts ...func(*AttachmentQuery)) *KcCourseSmallCategoryQuery {
	query := &AttachmentQuery{config: kcscq.config}
	for _, opt := range opts {
		opt(query)
	}
	kcscq.withOdAttachment = query
	return kcscq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KcCourseSmallCategory.Query().
//		GroupBy(kccoursesmallcategory.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (kcscq *KcCourseSmallCategoryQuery) GroupBy(field string, fields ...string) *KcCourseSmallCategoryGroupBy {
	group := &KcCourseSmallCategoryGroupBy{config: kcscq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kcscq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kcscq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.KcCourseSmallCategory.Query().
//		Select(kccoursesmallcategory.FieldUUID).
//		Scan(ctx, &v)
//
func (kcscq *KcCourseSmallCategoryQuery) Select(field string, fields ...string) *KcCourseSmallCategorySelect {
	kcscq.fields = append([]string{field}, fields...)
	return &KcCourseSmallCategorySelect{KcCourseSmallCategoryQuery: kcscq}
}

func (kcscq *KcCourseSmallCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range kcscq.fields {
		if !kccoursesmallcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kcscq.path != nil {
		prev, err := kcscq.path(ctx)
		if err != nil {
			return err
		}
		kcscq.sql = prev
	}
	return nil
}

func (kcscq *KcCourseSmallCategoryQuery) sqlAll(ctx context.Context) ([]*KcCourseSmallCategory, error) {
	var (
		nodes       = []*KcCourseSmallCategory{}
		_spec       = kcscq.querySpec()
		loadedTypes = [10]bool{
			kcscq.withCourse != nil,
			kcscq.withChapter != nil,
			kcscq.withSection != nil,
			kcscq.withCourseSmallCategoryAttachments != nil,
			kcscq.withCourseSmallCategoryExampapers != nil,
			kcscq.withCourseSmallCategoryQuestions != nil,
			kcscq.withCourseAppraiseSmalls != nil,
			kcscq.withVideoRecordSmall != nil,
			kcscq.withCsAttachment != nil,
			kcscq.withOdAttachment != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &KcCourseSmallCategory{config: kcscq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, kcscq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := kcscq.withCourse; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcCourseSmallCategory)
		for i := range nodes {
			fk := nodes[i].CourseID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(kccourse.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "course_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Course = n
			}
		}
	}

	if query := kcscq.withChapter; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcCourseSmallCategory)
		for i := range nodes {
			fk := nodes[i].ChapterID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(kccoursechapter.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "chapter_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Chapter = n
			}
		}
	}

	if query := kcscq.withSection; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcCourseSmallCategory)
		for i := range nodes {
			fk := nodes[i].SectionID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(kccoursesection.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "section_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Section = n
			}
		}
	}

	if query := kcscq.withCourseSmallCategoryAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcCourseSmallCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CourseSmallCategoryAttachments = []*KcSmallCategoryAttachment{}
		}
		query.Where(predicate.KcSmallCategoryAttachment(func(s *sql.Selector) {
			s.Where(sql.InValues(kccoursesmallcategory.CourseSmallCategoryAttachmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SmallCategoryID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "small_category_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CourseSmallCategoryAttachments = append(node.Edges.CourseSmallCategoryAttachments, n)
		}
	}

	if query := kcscq.withCourseSmallCategoryExampapers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcCourseSmallCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CourseSmallCategoryExampapers = []*KcSmallCategoryExamPaper{}
		}
		query.Where(predicate.KcSmallCategoryExamPaper(func(s *sql.Selector) {
			s.Where(sql.InValues(kccoursesmallcategory.CourseSmallCategoryExampapersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SmallCategoryID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "small_category_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CourseSmallCategoryExampapers = append(node.Edges.CourseSmallCategoryExampapers, n)
		}
	}

	if query := kcscq.withCourseSmallCategoryQuestions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcCourseSmallCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CourseSmallCategoryQuestions = []*KcSmallCategoryQuestion{}
		}
		query.Where(predicate.KcSmallCategoryQuestion(func(s *sql.Selector) {
			s.Where(sql.InValues(kccoursesmallcategory.CourseSmallCategoryQuestionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SmallCategoryID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "small_category_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CourseSmallCategoryQuestions = append(node.Edges.CourseSmallCategoryQuestions, n)
		}
	}

	if query := kcscq.withCourseAppraiseSmalls; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcCourseSmallCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CourseAppraiseSmalls = []*UserCourseAppraise{}
		}
		query.Where(predicate.UserCourseAppraise(func(s *sql.Selector) {
			s.Where(sql.InValues(kccoursesmallcategory.CourseAppraiseSmallsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SmallCateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "small_cate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CourseAppraiseSmalls = append(node.Edges.CourseAppraiseSmalls, n)
		}
	}

	if query := kcscq.withVideoRecordSmall; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*KcCourseSmallCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.VideoRecordSmall = []*VideoRecord{}
		}
		query.Where(predicate.VideoRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(kccoursesmallcategory.VideoRecordSmallColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SmallID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "small_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.VideoRecordSmall = append(node.Edges.VideoRecordSmall, n)
		}
	}

	if query := kcscq.withCsAttachment; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcCourseSmallCategory)
		for i := range nodes {
			fk := nodes[i].CoursewareAttachID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(attachment.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "courseware_attach_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.CsAttachment = n
			}
		}
	}

	if query := kcscq.withOdAttachment; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*KcCourseSmallCategory)
		for i := range nodes {
			fk := nodes[i].OrderVideoAttachID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(attachment.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_video_attach_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OdAttachment = n
			}
		}
	}

	return nodes, nil
}

func (kcscq *KcCourseSmallCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kcscq.querySpec()
	return sqlgraph.CountNodes(ctx, kcscq.driver, _spec)
}

func (kcscq *KcCourseSmallCategoryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := kcscq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (kcscq *KcCourseSmallCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursesmallcategory.Table,
			Columns: kccoursesmallcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursesmallcategory.FieldID,
			},
		},
		From:   kcscq.sql,
		Unique: true,
	}
	if unique := kcscq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := kcscq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kccoursesmallcategory.FieldID)
		for i := range fields {
			if fields[i] != kccoursesmallcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kcscq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kcscq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kcscq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kcscq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kcscq *KcCourseSmallCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kcscq.driver.Dialect())
	t1 := builder.Table(kccoursesmallcategory.Table)
	selector := builder.Select(t1.Columns(kccoursesmallcategory.Columns...)...).From(t1)
	if kcscq.sql != nil {
		selector = kcscq.sql
		selector.Select(selector.Columns(kccoursesmallcategory.Columns...)...)
	}
	for _, p := range kcscq.predicates {
		p(selector)
	}
	for _, p := range kcscq.order {
		p(selector)
	}
	if offset := kcscq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kcscq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KcCourseSmallCategoryGroupBy is the group-by builder for KcCourseSmallCategory entities.
type KcCourseSmallCategoryGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kcscgb *KcCourseSmallCategoryGroupBy) Aggregate(fns ...AggregateFunc) *KcCourseSmallCategoryGroupBy {
	kcscgb.fns = append(kcscgb.fns, fns...)
	return kcscgb
}

// Scan applies the group-by query and scans the result into the given value.
func (kcscgb *KcCourseSmallCategoryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := kcscgb.path(ctx)
	if err != nil {
		return err
	}
	kcscgb.sql = query
	return kcscgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kcscgb *KcCourseSmallCategoryGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := kcscgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcscgb *KcCourseSmallCategoryGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(kcscgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseSmallCategoryGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := kcscgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kcscgb *KcCourseSmallCategoryGroupBy) StringsX(ctx context.Context) []string {
	v, err := kcscgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcscgb *KcCourseSmallCategoryGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kcscgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesmallcategory.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSmallCategoryGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kcscgb *KcCourseSmallCategoryGroupBy) StringX(ctx context.Context) string {
	v, err := kcscgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcscgb *KcCourseSmallCategoryGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(kcscgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseSmallCategoryGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := kcscgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kcscgb *KcCourseSmallCategoryGroupBy) IntsX(ctx context.Context) []int {
	v, err := kcscgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcscgb *KcCourseSmallCategoryGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kcscgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesmallcategory.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSmallCategoryGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kcscgb *KcCourseSmallCategoryGroupBy) IntX(ctx context.Context) int {
	v, err := kcscgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcscgb *KcCourseSmallCategoryGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(kcscgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseSmallCategoryGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := kcscgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kcscgb *KcCourseSmallCategoryGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := kcscgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcscgb *KcCourseSmallCategoryGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kcscgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesmallcategory.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSmallCategoryGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kcscgb *KcCourseSmallCategoryGroupBy) Float64X(ctx context.Context) float64 {
	v, err := kcscgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (kcscgb *KcCourseSmallCategoryGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(kcscgb.fields) > 1 {
		return nil, errors.New("ent: KcCourseSmallCategoryGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := kcscgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kcscgb *KcCourseSmallCategoryGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := kcscgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kcscgb *KcCourseSmallCategoryGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kcscgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesmallcategory.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSmallCategoryGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kcscgb *KcCourseSmallCategoryGroupBy) BoolX(ctx context.Context) bool {
	v, err := kcscgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kcscgb *KcCourseSmallCategoryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range kcscgb.fields {
		if !kccoursesmallcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kcscgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kcscgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kcscgb *KcCourseSmallCategoryGroupBy) sqlQuery() *sql.Selector {
	selector := kcscgb.sql
	columns := make([]string, 0, len(kcscgb.fields)+len(kcscgb.fns))
	columns = append(columns, kcscgb.fields...)
	for _, fn := range kcscgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(kcscgb.fields...)
}

// KcCourseSmallCategorySelect is the builder for selecting fields of KcCourseSmallCategory entities.
type KcCourseSmallCategorySelect struct {
	*KcCourseSmallCategoryQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (kcscs *KcCourseSmallCategorySelect) Scan(ctx context.Context, v interface{}) error {
	if err := kcscs.prepareQuery(ctx); err != nil {
		return err
	}
	kcscs.sql = kcscs.KcCourseSmallCategoryQuery.sqlQuery(ctx)
	return kcscs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kcscs *KcCourseSmallCategorySelect) ScanX(ctx context.Context, v interface{}) {
	if err := kcscs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (kcscs *KcCourseSmallCategorySelect) Strings(ctx context.Context) ([]string, error) {
	if len(kcscs.fields) > 1 {
		return nil, errors.New("ent: KcCourseSmallCategorySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := kcscs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kcscs *KcCourseSmallCategorySelect) StringsX(ctx context.Context) []string {
	v, err := kcscs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (kcscs *KcCourseSmallCategorySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kcscs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesmallcategory.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSmallCategorySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kcscs *KcCourseSmallCategorySelect) StringX(ctx context.Context) string {
	v, err := kcscs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (kcscs *KcCourseSmallCategorySelect) Ints(ctx context.Context) ([]int, error) {
	if len(kcscs.fields) > 1 {
		return nil, errors.New("ent: KcCourseSmallCategorySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := kcscs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kcscs *KcCourseSmallCategorySelect) IntsX(ctx context.Context) []int {
	v, err := kcscs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (kcscs *KcCourseSmallCategorySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kcscs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesmallcategory.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSmallCategorySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kcscs *KcCourseSmallCategorySelect) IntX(ctx context.Context) int {
	v, err := kcscs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (kcscs *KcCourseSmallCategorySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(kcscs.fields) > 1 {
		return nil, errors.New("ent: KcCourseSmallCategorySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := kcscs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kcscs *KcCourseSmallCategorySelect) Float64sX(ctx context.Context) []float64 {
	v, err := kcscs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (kcscs *KcCourseSmallCategorySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kcscs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesmallcategory.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSmallCategorySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kcscs *KcCourseSmallCategorySelect) Float64X(ctx context.Context) float64 {
	v, err := kcscs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (kcscs *KcCourseSmallCategorySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(kcscs.fields) > 1 {
		return nil, errors.New("ent: KcCourseSmallCategorySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := kcscs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kcscs *KcCourseSmallCategorySelect) BoolsX(ctx context.Context) []bool {
	v, err := kcscs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (kcscs *KcCourseSmallCategorySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kcscs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kccoursesmallcategory.Label}
	default:
		err = fmt.Errorf("ent: KcCourseSmallCategorySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kcscs *KcCourseSmallCategorySelect) BoolX(ctx context.Context) bool {
	v, err := kcscs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kcscs *KcCourseSmallCategorySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := kcscs.sqlQuery().Query()
	if err := kcscs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kcscs *KcCourseSmallCategorySelect) sqlQuery() sql.Querier {
	selector := kcscs.sql
	selector.Select(selector.Columns(kcscs.fields...)...)
	return selector
}

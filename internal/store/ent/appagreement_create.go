// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/appagreement"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppAgreementCreate is the builder for creating a AppAgreement entity.
type AppAgreementCreate struct {
	config
	mutation *AppAgreementMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (aac *AppAgreementCreate) SetUUID(s string) *AppAgreementCreate {
	aac.mutation.SetUUID(s)
	return aac
}

// SetCreatedAt sets the "created_at" field.
func (aac *AppAgreementCreate) SetCreatedAt(t time.Time) *AppAgreementCreate {
	aac.mutation.SetCreatedAt(t)
	return aac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aac *AppAgreementCreate) SetNillableCreatedAt(t *time.Time) *AppAgreementCreate {
	if t != nil {
		aac.SetCreatedAt(*t)
	}
	return aac
}

// SetUpdatedAt sets the "updated_at" field.
func (aac *AppAgreementCreate) SetUpdatedAt(t time.Time) *AppAgreementCreate {
	aac.mutation.SetUpdatedAt(t)
	return aac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aac *AppAgreementCreate) SetNillableUpdatedAt(t *time.Time) *AppAgreementCreate {
	if t != nil {
		aac.SetUpdatedAt(*t)
	}
	return aac
}

// SetDeletedAt sets the "deleted_at" field.
func (aac *AppAgreementCreate) SetDeletedAt(t time.Time) *AppAgreementCreate {
	aac.mutation.SetDeletedAt(t)
	return aac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aac *AppAgreementCreate) SetNillableDeletedAt(t *time.Time) *AppAgreementCreate {
	if t != nil {
		aac.SetDeletedAt(*t)
	}
	return aac
}

// SetName sets the "name" field.
func (aac *AppAgreementCreate) SetName(s string) *AppAgreementCreate {
	aac.mutation.SetName(s)
	return aac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aac *AppAgreementCreate) SetNillableName(s *string) *AppAgreementCreate {
	if s != nil {
		aac.SetName(*s)
	}
	return aac
}

// SetType sets the "type" field.
func (aac *AppAgreementCreate) SetType(u uint8) *AppAgreementCreate {
	aac.mutation.SetType(u)
	return aac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aac *AppAgreementCreate) SetNillableType(u *uint8) *AppAgreementCreate {
	if u != nil {
		aac.SetType(*u)
	}
	return aac
}

// SetDetail sets the "detail" field.
func (aac *AppAgreementCreate) SetDetail(s string) *AppAgreementCreate {
	aac.mutation.SetDetail(s)
	return aac
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (aac *AppAgreementCreate) SetNillableDetail(s *string) *AppAgreementCreate {
	if s != nil {
		aac.SetDetail(*s)
	}
	return aac
}

// Mutation returns the AppAgreementMutation object of the builder.
func (aac *AppAgreementCreate) Mutation() *AppAgreementMutation {
	return aac.mutation
}

// Save creates the AppAgreement in the database.
func (aac *AppAgreementCreate) Save(ctx context.Context) (*AppAgreement, error) {
	var (
		err  error
		node *AppAgreement
	)
	aac.defaults()
	if len(aac.hooks) == 0 {
		if err = aac.check(); err != nil {
			return nil, err
		}
		node, err = aac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppAgreementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aac.check(); err != nil {
				return nil, err
			}
			aac.mutation = mutation
			node, err = aac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aac.hooks) - 1; i >= 0; i-- {
			mut = aac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AppAgreementCreate) SaveX(ctx context.Context) *AppAgreement {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (aac *AppAgreementCreate) defaults() {
	if _, ok := aac.mutation.CreatedAt(); !ok {
		v := appagreement.DefaultCreatedAt()
		aac.mutation.SetCreatedAt(v)
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		v := appagreement.DefaultUpdatedAt()
		aac.mutation.SetUpdatedAt(v)
	}
	if _, ok := aac.mutation.Name(); !ok {
		v := appagreement.DefaultName
		aac.mutation.SetName(v)
	}
	if _, ok := aac.mutation.GetType(); !ok {
		v := appagreement.DefaultType
		aac.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *AppAgreementCreate) check() error {
	if _, ok := aac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := aac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := aac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	return nil
}

func (aac *AppAgreementCreate) sqlSave(ctx context.Context) (*AppAgreement, error) {
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (aac *AppAgreementCreate) createSpec() (*AppAgreement, *sqlgraph.CreateSpec) {
	var (
		_node = &AppAgreement{config: aac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appagreement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appagreement.FieldID,
			},
		}
	)
	if value, ok := aac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appagreement.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := aac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appagreement.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := aac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appagreement.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := aac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appagreement.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := aac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appagreement.FieldName,
		})
		_node.Name = value
	}
	if value, ok := aac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appagreement.FieldType,
		})
		_node.Type = value
	}
	if value, ok := aac.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appagreement.FieldDetail,
		})
		_node.Detail = value
	}
	return _node, _spec
}

// AppAgreementCreateBulk is the builder for creating many AppAgreement entities in bulk.
type AppAgreementCreateBulk struct {
	config
	builders []*AppAgreementCreate
}

// Save creates the AppAgreement entities in the database.
func (aacb *AppAgreementCreateBulk) Save(ctx context.Context) ([]*AppAgreement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AppAgreement, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppAgreementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AppAgreementCreateBulk) SaveX(ctx context.Context) []*AppAgreement {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkuserwrongquestionrecode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserWrongQuestionRecodeDelete is the builder for deleting a TkUserWrongQuestionRecode entity.
type TkUserWrongQuestionRecodeDelete struct {
	config
	hooks    []Hook
	mutation *TkUserWrongQuestionRecodeMutation
}

// Where adds a new predicate to the TkUserWrongQuestionRecodeDelete builder.
func (tuwqrd *TkUserWrongQuestionRecodeDelete) Where(ps ...predicate.TkUserWrongQuestionRecode) *TkUserWrongQuestionRecodeDelete {
	tuwqrd.mutation.predicates = append(tuwqrd.mutation.predicates, ps...)
	return tuwqrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tuwqrd *TkUserWrongQuestionRecodeDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tuwqrd.hooks) == 0 {
		affected, err = tuwqrd.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserWrongQuestionRecodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuwqrd.mutation = mutation
			affected, err = tuwqrd.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tuwqrd.hooks) - 1; i >= 0; i-- {
			mut = tuwqrd.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuwqrd.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuwqrd *TkUserWrongQuestionRecodeDelete) ExecX(ctx context.Context) int {
	n, err := tuwqrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tuwqrd *TkUserWrongQuestionRecodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: tkuserwrongquestionrecode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserwrongquestionrecode.FieldID,
			},
		},
	}
	if ps := tuwqrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, tuwqrd.driver, _spec)
}

// TkUserWrongQuestionRecodeDeleteOne is the builder for deleting a single TkUserWrongQuestionRecode entity.
type TkUserWrongQuestionRecodeDeleteOne struct {
	tuwqrd *TkUserWrongQuestionRecodeDelete
}

// Exec executes the deletion query.
func (tuwqrdo *TkUserWrongQuestionRecodeDeleteOne) Exec(ctx context.Context) error {
	n, err := tuwqrdo.tuwqrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tkuserwrongquestionrecode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tuwqrdo *TkUserWrongQuestionRecodeDeleteOne) ExecX(ctx context.Context) {
	tuwqrdo.tuwqrd.ExecX(ctx)
}

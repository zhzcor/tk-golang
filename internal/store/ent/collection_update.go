// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/collection"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkquestion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectionUpdate is the builder for updating Collection entities.
type CollectionUpdate struct {
	config
	hooks    []Hook
	mutation *CollectionMutation
}

// Where adds a new predicate for the CollectionUpdate builder.
func (cu *CollectionUpdate) Where(ps ...predicate.Collection) *CollectionUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetUUID sets the "uuid" field.
func (cu *CollectionUpdate) SetUUID(s string) *CollectionUpdate {
	cu.mutation.SetUUID(s)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CollectionUpdate) SetUpdatedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CollectionUpdate) ClearUpdatedAt() *CollectionUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CollectionUpdate) SetDeletedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDeletedAt(t *time.Time) *CollectionUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CollectionUpdate) ClearDeletedAt() *CollectionUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetType sets the "type" field.
func (cu *CollectionUpdate) SetType(i int) *CollectionUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(i)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableType(i *int) *CollectionUpdate {
	if i != nil {
		cu.SetType(*i)
	}
	return cu
}

// AddType adds i to the "type" field.
func (cu *CollectionUpdate) AddType(i int) *CollectionUpdate {
	cu.mutation.AddType(i)
	return cu
}

// ClearType clears the value of the "type" field.
func (cu *CollectionUpdate) ClearType() *CollectionUpdate {
	cu.mutation.ClearType()
	return cu
}

// SetValueID sets the "value_id" field.
func (cu *CollectionUpdate) SetValueID(i int) *CollectionUpdate {
	cu.mutation.ResetValueID()
	cu.mutation.SetValueID(i)
	return cu
}

// SetNillableValueID sets the "value_id" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableValueID(i *int) *CollectionUpdate {
	if i != nil {
		cu.SetValueID(*i)
	}
	return cu
}

// ClearValueID clears the value of the "value_id" field.
func (cu *CollectionUpdate) ClearValueID() *CollectionUpdate {
	cu.mutation.ClearValueID()
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CollectionUpdate) SetUserID(i int) *CollectionUpdate {
	cu.mutation.ResetUserID()
	cu.mutation.SetUserID(i)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableUserID(i *int) *CollectionUpdate {
	if i != nil {
		cu.SetUserID(*i)
	}
	return cu
}

// AddUserID adds i to the "user_id" field.
func (cu *CollectionUpdate) AddUserID(i int) *CollectionUpdate {
	cu.mutation.AddUserID(i)
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *CollectionUpdate) ClearUserID() *CollectionUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetExamID sets the "exam_id" field.
func (cu *CollectionUpdate) SetExamID(i int) *CollectionUpdate {
	cu.mutation.ResetExamID()
	cu.mutation.SetExamID(i)
	return cu
}

// SetNillableExamID sets the "exam_id" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableExamID(i *int) *CollectionUpdate {
	if i != nil {
		cu.SetExamID(*i)
	}
	return cu
}

// AddExamID adds i to the "exam_id" field.
func (cu *CollectionUpdate) AddExamID(i int) *CollectionUpdate {
	cu.mutation.AddExamID(i)
	return cu
}

// ClearExamID clears the value of the "exam_id" field.
func (cu *CollectionUpdate) ClearExamID() *CollectionUpdate {
	cu.mutation.ClearExamID()
	return cu
}

// SetSecID sets the "sec_id" field.
func (cu *CollectionUpdate) SetSecID(i int) *CollectionUpdate {
	cu.mutation.ResetSecID()
	cu.mutation.SetSecID(i)
	return cu
}

// SetNillableSecID sets the "sec_id" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableSecID(i *int) *CollectionUpdate {
	if i != nil {
		cu.SetSecID(*i)
	}
	return cu
}

// AddSecID adds i to the "sec_id" field.
func (cu *CollectionUpdate) AddSecID(i int) *CollectionUpdate {
	cu.mutation.AddSecID(i)
	return cu
}

// ClearSecID clears the value of the "sec_id" field.
func (cu *CollectionUpdate) ClearSecID() *CollectionUpdate {
	cu.mutation.ClearSecID()
	return cu
}

// SetQuestionBankID sets the "question_bank_id" field.
func (cu *CollectionUpdate) SetQuestionBankID(i int) *CollectionUpdate {
	cu.mutation.ResetQuestionBankID()
	cu.mutation.SetQuestionBankID(i)
	return cu
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableQuestionBankID(i *int) *CollectionUpdate {
	if i != nil {
		cu.SetQuestionBankID(*i)
	}
	return cu
}

// AddQuestionBankID adds i to the "question_bank_id" field.
func (cu *CollectionUpdate) AddQuestionBankID(i int) *CollectionUpdate {
	cu.mutation.AddQuestionBankID(i)
	return cu
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (cu *CollectionUpdate) ClearQuestionBankID() *CollectionUpdate {
	cu.mutation.ClearQuestionBankID()
	return cu
}

// SetExamQuestionType sets the "exam_question_type" field.
func (cu *CollectionUpdate) SetExamQuestionType(i int) *CollectionUpdate {
	cu.mutation.ResetExamQuestionType()
	cu.mutation.SetExamQuestionType(i)
	return cu
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableExamQuestionType(i *int) *CollectionUpdate {
	if i != nil {
		cu.SetExamQuestionType(*i)
	}
	return cu
}

// AddExamQuestionType adds i to the "exam_question_type" field.
func (cu *CollectionUpdate) AddExamQuestionType(i int) *CollectionUpdate {
	cu.mutation.AddExamQuestionType(i)
	return cu
}

// ClearExamQuestionType clears the value of the "exam_question_type" field.
func (cu *CollectionUpdate) ClearExamQuestionType() *CollectionUpdate {
	cu.mutation.ClearExamQuestionType()
	return cu
}

// SetQuestionID sets the "question" edge to the TkQuestion entity by ID.
func (cu *CollectionUpdate) SetQuestionID(id int) *CollectionUpdate {
	cu.mutation.SetQuestionID(id)
	return cu
}

// SetNillableQuestionID sets the "question" edge to the TkQuestion entity by ID if the given value is not nil.
func (cu *CollectionUpdate) SetNillableQuestionID(id *int) *CollectionUpdate {
	if id != nil {
		cu = cu.SetQuestionID(*id)
	}
	return cu
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (cu *CollectionUpdate) SetQuestion(t *TkQuestion) *CollectionUpdate {
	return cu.SetQuestionID(t.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cu *CollectionUpdate) Mutation() *CollectionMutation {
	return cu.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (cu *CollectionUpdate) ClearQuestion() *CollectionUpdate {
	cu.mutation.ClearQuestion()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CollectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CollectionUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := collection.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   collection.Table,
			Columns: collection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: collection.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collection.FieldUUID,
		})
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: collection.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collection.FieldUpdatedAt,
		})
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: collection.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collection.FieldDeletedAt,
		})
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: collection.FieldDeletedAt,
		})
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldType,
		})
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldType,
		})
	}
	if cu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldType,
		})
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldUserID,
		})
	}
	if value, ok := cu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldUserID,
		})
	}
	if cu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldUserID,
		})
	}
	if value, ok := cu.mutation.ExamID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamID,
		})
	}
	if value, ok := cu.mutation.AddedExamID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamID,
		})
	}
	if cu.mutation.ExamIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldExamID,
		})
	}
	if value, ok := cu.mutation.SecID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldSecID,
		})
	}
	if value, ok := cu.mutation.AddedSecID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldSecID,
		})
	}
	if cu.mutation.SecIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldSecID,
		})
	}
	if value, ok := cu.mutation.QuestionBankID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldQuestionBankID,
		})
	}
	if value, ok := cu.mutation.AddedQuestionBankID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldQuestionBankID,
		})
	}
	if cu.mutation.QuestionBankIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldQuestionBankID,
		})
	}
	if value, ok := cu.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamQuestionType,
		})
	}
	if value, ok := cu.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamQuestionType,
		})
	}
	if cu.mutation.ExamQuestionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldExamQuestionType,
		})
	}
	if cu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.QuestionTable,
			Columns: []string{collection.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.QuestionTable,
			Columns: []string{collection.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CollectionUpdateOne is the builder for updating a single Collection entity.
type CollectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectionMutation
}

// SetUUID sets the "uuid" field.
func (cuo *CollectionUpdateOne) SetUUID(s string) *CollectionUpdateOne {
	cuo.mutation.SetUUID(s)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CollectionUpdateOne) SetUpdatedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CollectionUpdateOne) ClearUpdatedAt() *CollectionUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CollectionUpdateOne) SetDeletedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDeletedAt(t *time.Time) *CollectionUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CollectionUpdateOne) ClearDeletedAt() *CollectionUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetType sets the "type" field.
func (cuo *CollectionUpdateOne) SetType(i int) *CollectionUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(i)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableType(i *int) *CollectionUpdateOne {
	if i != nil {
		cuo.SetType(*i)
	}
	return cuo
}

// AddType adds i to the "type" field.
func (cuo *CollectionUpdateOne) AddType(i int) *CollectionUpdateOne {
	cuo.mutation.AddType(i)
	return cuo
}

// ClearType clears the value of the "type" field.
func (cuo *CollectionUpdateOne) ClearType() *CollectionUpdateOne {
	cuo.mutation.ClearType()
	return cuo
}

// SetValueID sets the "value_id" field.
func (cuo *CollectionUpdateOne) SetValueID(i int) *CollectionUpdateOne {
	cuo.mutation.ResetValueID()
	cuo.mutation.SetValueID(i)
	return cuo
}

// SetNillableValueID sets the "value_id" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableValueID(i *int) *CollectionUpdateOne {
	if i != nil {
		cuo.SetValueID(*i)
	}
	return cuo
}

// ClearValueID clears the value of the "value_id" field.
func (cuo *CollectionUpdateOne) ClearValueID() *CollectionUpdateOne {
	cuo.mutation.ClearValueID()
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CollectionUpdateOne) SetUserID(i int) *CollectionUpdateOne {
	cuo.mutation.ResetUserID()
	cuo.mutation.SetUserID(i)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableUserID(i *int) *CollectionUpdateOne {
	if i != nil {
		cuo.SetUserID(*i)
	}
	return cuo
}

// AddUserID adds i to the "user_id" field.
func (cuo *CollectionUpdateOne) AddUserID(i int) *CollectionUpdateOne {
	cuo.mutation.AddUserID(i)
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *CollectionUpdateOne) ClearUserID() *CollectionUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetExamID sets the "exam_id" field.
func (cuo *CollectionUpdateOne) SetExamID(i int) *CollectionUpdateOne {
	cuo.mutation.ResetExamID()
	cuo.mutation.SetExamID(i)
	return cuo
}

// SetNillableExamID sets the "exam_id" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableExamID(i *int) *CollectionUpdateOne {
	if i != nil {
		cuo.SetExamID(*i)
	}
	return cuo
}

// AddExamID adds i to the "exam_id" field.
func (cuo *CollectionUpdateOne) AddExamID(i int) *CollectionUpdateOne {
	cuo.mutation.AddExamID(i)
	return cuo
}

// ClearExamID clears the value of the "exam_id" field.
func (cuo *CollectionUpdateOne) ClearExamID() *CollectionUpdateOne {
	cuo.mutation.ClearExamID()
	return cuo
}

// SetSecID sets the "sec_id" field.
func (cuo *CollectionUpdateOne) SetSecID(i int) *CollectionUpdateOne {
	cuo.mutation.ResetSecID()
	cuo.mutation.SetSecID(i)
	return cuo
}

// SetNillableSecID sets the "sec_id" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableSecID(i *int) *CollectionUpdateOne {
	if i != nil {
		cuo.SetSecID(*i)
	}
	return cuo
}

// AddSecID adds i to the "sec_id" field.
func (cuo *CollectionUpdateOne) AddSecID(i int) *CollectionUpdateOne {
	cuo.mutation.AddSecID(i)
	return cuo
}

// ClearSecID clears the value of the "sec_id" field.
func (cuo *CollectionUpdateOne) ClearSecID() *CollectionUpdateOne {
	cuo.mutation.ClearSecID()
	return cuo
}

// SetQuestionBankID sets the "question_bank_id" field.
func (cuo *CollectionUpdateOne) SetQuestionBankID(i int) *CollectionUpdateOne {
	cuo.mutation.ResetQuestionBankID()
	cuo.mutation.SetQuestionBankID(i)
	return cuo
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableQuestionBankID(i *int) *CollectionUpdateOne {
	if i != nil {
		cuo.SetQuestionBankID(*i)
	}
	return cuo
}

// AddQuestionBankID adds i to the "question_bank_id" field.
func (cuo *CollectionUpdateOne) AddQuestionBankID(i int) *CollectionUpdateOne {
	cuo.mutation.AddQuestionBankID(i)
	return cuo
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (cuo *CollectionUpdateOne) ClearQuestionBankID() *CollectionUpdateOne {
	cuo.mutation.ClearQuestionBankID()
	return cuo
}

// SetExamQuestionType sets the "exam_question_type" field.
func (cuo *CollectionUpdateOne) SetExamQuestionType(i int) *CollectionUpdateOne {
	cuo.mutation.ResetExamQuestionType()
	cuo.mutation.SetExamQuestionType(i)
	return cuo
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableExamQuestionType(i *int) *CollectionUpdateOne {
	if i != nil {
		cuo.SetExamQuestionType(*i)
	}
	return cuo
}

// AddExamQuestionType adds i to the "exam_question_type" field.
func (cuo *CollectionUpdateOne) AddExamQuestionType(i int) *CollectionUpdateOne {
	cuo.mutation.AddExamQuestionType(i)
	return cuo
}

// ClearExamQuestionType clears the value of the "exam_question_type" field.
func (cuo *CollectionUpdateOne) ClearExamQuestionType() *CollectionUpdateOne {
	cuo.mutation.ClearExamQuestionType()
	return cuo
}

// SetQuestionID sets the "question" edge to the TkQuestion entity by ID.
func (cuo *CollectionUpdateOne) SetQuestionID(id int) *CollectionUpdateOne {
	cuo.mutation.SetQuestionID(id)
	return cuo
}

// SetNillableQuestionID sets the "question" edge to the TkQuestion entity by ID if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableQuestionID(id *int) *CollectionUpdateOne {
	if id != nil {
		cuo = cuo.SetQuestionID(*id)
	}
	return cuo
}

// SetQuestion sets the "question" edge to the TkQuestion entity.
func (cuo *CollectionUpdateOne) SetQuestion(t *TkQuestion) *CollectionUpdateOne {
	return cuo.SetQuestionID(t.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cuo *CollectionUpdateOne) Mutation() *CollectionMutation {
	return cuo.mutation
}

// ClearQuestion clears the "question" edge to the TkQuestion entity.
func (cuo *CollectionUpdateOne) ClearQuestion() *CollectionUpdateOne {
	cuo.mutation.ClearQuestion()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollectionUpdateOne) Select(field string, fields ...string) *CollectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collection entity.
func (cuo *CollectionUpdateOne) Save(ctx context.Context) (*Collection, error) {
	var (
		err  error
		node *Collection
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CollectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollectionUpdateOne) SaveX(ctx context.Context) *Collection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CollectionUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := collection.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CollectionUpdateOne) sqlSave(ctx context.Context) (_node *Collection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   collection.Table,
			Columns: collection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: collection.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Collection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collection.FieldID)
		for _, f := range fields {
			if !collection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collection.FieldUUID,
		})
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: collection.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collection.FieldUpdatedAt,
		})
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: collection.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collection.FieldDeletedAt,
		})
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: collection.FieldDeletedAt,
		})
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldType,
		})
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldType,
		})
	}
	if cuo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldType,
		})
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldUserID,
		})
	}
	if value, ok := cuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldUserID,
		})
	}
	if cuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldUserID,
		})
	}
	if value, ok := cuo.mutation.ExamID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamID,
		})
	}
	if value, ok := cuo.mutation.AddedExamID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamID,
		})
	}
	if cuo.mutation.ExamIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldExamID,
		})
	}
	if value, ok := cuo.mutation.SecID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldSecID,
		})
	}
	if value, ok := cuo.mutation.AddedSecID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldSecID,
		})
	}
	if cuo.mutation.SecIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldSecID,
		})
	}
	if value, ok := cuo.mutation.QuestionBankID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldQuestionBankID,
		})
	}
	if value, ok := cuo.mutation.AddedQuestionBankID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldQuestionBankID,
		})
	}
	if cuo.mutation.QuestionBankIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldQuestionBankID,
		})
	}
	if value, ok := cuo.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamQuestionType,
		})
	}
	if value, ok := cuo.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: collection.FieldExamQuestionType,
		})
	}
	if cuo.mutation.ExamQuestionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: collection.FieldExamQuestionType,
		})
	}
	if cuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.QuestionTable,
			Columns: []string{collection.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.QuestionTable,
			Columns: []string{collection.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Collection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

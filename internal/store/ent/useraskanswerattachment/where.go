// Code generated by entc, DO NOT EDIT.

package useraskanswerattachment

import (
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AttachmentID applies equality check predicate on the "attachment_id" field. It's identical to AttachmentIDEQ.
func AttachmentID(v int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttachmentID), v))
	})
}

// AskID applies equality check predicate on the "ask_id" field. It's identical to AskIDEQ.
func AskID(v int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAskID), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// AttachmentIDEQ applies the EQ predicate on the "attachment_id" field.
func AttachmentIDEQ(v int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDNEQ applies the NEQ predicate on the "attachment_id" field.
func AttachmentIDNEQ(v int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDIn applies the In predicate on the "attachment_id" field.
func AttachmentIDIn(vs ...int) predicate.UserAskAnswerAttachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAttachmentID), v...))
	})
}

// AttachmentIDNotIn applies the NotIn predicate on the "attachment_id" field.
func AttachmentIDNotIn(vs ...int) predicate.UserAskAnswerAttachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAttachmentID), v...))
	})
}

// AttachmentIDIsNil applies the IsNil predicate on the "attachment_id" field.
func AttachmentIDIsNil() predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAttachmentID)))
	})
}

// AttachmentIDNotNil applies the NotNil predicate on the "attachment_id" field.
func AttachmentIDNotNil() predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAttachmentID)))
	})
}

// AskIDEQ applies the EQ predicate on the "ask_id" field.
func AskIDEQ(v int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAskID), v))
	})
}

// AskIDNEQ applies the NEQ predicate on the "ask_id" field.
func AskIDNEQ(v int) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAskID), v))
	})
}

// AskIDIn applies the In predicate on the "ask_id" field.
func AskIDIn(vs ...int) predicate.UserAskAnswerAttachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAskID), v...))
	})
}

// AskIDNotIn applies the NotIn predicate on the "ask_id" field.
func AskIDNotIn(vs ...int) predicate.UserAskAnswerAttachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAskID), v...))
	})
}

// AskIDIsNil applies the IsNil predicate on the "ask_id" field.
func AskIDIsNil() predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAskID)))
	})
}

// AskIDNotNil applies the NotNil predicate on the "ask_id" field.
func AskIDNotNil() predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAskID)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.UserAskAnswerAttachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.UserAskAnswerAttachment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// HasAttachment applies the HasEdge predicate on the "attachment" edge.
func HasAttachment() predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttachmentTable, AttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentWith applies the HasEdge predicate on the "attachment" edge with a given conditions (other predicates).
func HasAttachmentWith(preds ...predicate.Attachment) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttachmentTable, AttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAsk applies the HasEdge predicate on the "ask" edge.
func HasAsk() predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AskTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AskTable, AskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAskWith applies the HasEdge predicate on the "ask" edge with a given conditions (other predicates).
func HasAskWith(preds ...predicate.UserAskAnswer) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AskInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AskTable, AskColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAskAnswerAttachment) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAskAnswerAttachment) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAskAnswerAttachment) predicate.UserAskAnswerAttachment {
	return predicate.UserAskAnswerAttachment(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package useraskanswerattachment

const (
	// Label holds the string label denoting the useraskanswerattachment type in the database.
	Label = "user_ask_answer_attachment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAttachmentID holds the string denoting the attachment_id field in the database.
	FieldAttachmentID = "attachment_id"
	// FieldAskID holds the string denoting the ask_id field in the database.
	FieldAskID = "ask_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeAttachment holds the string denoting the attachment edge name in mutations.
	EdgeAttachment = "attachment"
	// EdgeAsk holds the string denoting the ask edge name in mutations.
	EdgeAsk = "ask"
	// Table holds the table name of the useraskanswerattachment in the database.
	Table = "user_ask_answer_attachments"
	// AttachmentTable is the table the holds the attachment relation/edge.
	AttachmentTable = "user_ask_answer_attachments"
	// AttachmentInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AttachmentInverseTable = "attachments"
	// AttachmentColumn is the table column denoting the attachment relation/edge.
	AttachmentColumn = "attachment_id"
	// AskTable is the table the holds the ask relation/edge.
	AskTable = "user_ask_answer_attachments"
	// AskInverseTable is the table name for the UserAskAnswer entity.
	// It exists in this package in order to avoid circular dependency with the "useraskanswer" package.
	AskInverseTable = "user_ask_answers"
	// AskColumn is the table column denoting the ask relation/edge.
	AskColumn = "ask_id"
)

// Columns holds all SQL columns for useraskanswerattachment fields.
var Columns = []string{
	FieldID,
	FieldAttachmentID,
	FieldAskID,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType uint8
)

// Code generated by entc, DO NOT EDIT.

package tkuserquestionrecord

import (
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CorrectCount applies equality check predicate on the "correct_count" field. It's identical to CorrectCountEQ.
func CorrectCount(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorrectCount), v))
	})
}

// AnswerCount applies equality check predicate on the "answer_count" field. It's identical to AnswerCountEQ.
func AnswerCount(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerCount), v))
	})
}

// Answer applies equality check predicate on the "answer" field. It's identical to AnswerEQ.
func Answer(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswer), v))
	})
}

// IsRight applies equality check predicate on the "is_right" field. It's identical to IsRightEQ.
func IsRight(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRight), v))
	})
}

// ExamQuestionType applies equality check predicate on the "exam_question_type" field. It's identical to ExamQuestionTypeEQ.
func ExamQuestionType(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamQuestionType), v))
	})
}

// QuestionType applies equality check predicate on the "question_type" field. It's identical to QuestionTypeEQ.
func QuestionType(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionType), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// QuestionBankID applies equality check predicate on the "question_bank_id" field. It's identical to QuestionBankIDEQ.
func QuestionBankID(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionBankID), v))
	})
}

// QuestionID applies equality check predicate on the "question_id" field. It's identical to QuestionIDEQ.
func QuestionID(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionID), v))
	})
}

// ExamPaperID applies equality check predicate on the "exam_paper_id" field. It's identical to ExamPaperIDEQ.
func ExamPaperID(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamPaperID), v))
	})
}

// SectionID applies equality check predicate on the "section_id" field. It's identical to SectionIDEQ.
func SectionID(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSectionID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CorrectCountEQ applies the EQ predicate on the "correct_count" field.
func CorrectCountEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorrectCount), v))
	})
}

// CorrectCountNEQ applies the NEQ predicate on the "correct_count" field.
func CorrectCountNEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCorrectCount), v))
	})
}

// CorrectCountIn applies the In predicate on the "correct_count" field.
func CorrectCountIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCorrectCount), v...))
	})
}

// CorrectCountNotIn applies the NotIn predicate on the "correct_count" field.
func CorrectCountNotIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCorrectCount), v...))
	})
}

// CorrectCountGT applies the GT predicate on the "correct_count" field.
func CorrectCountGT(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCorrectCount), v))
	})
}

// CorrectCountGTE applies the GTE predicate on the "correct_count" field.
func CorrectCountGTE(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCorrectCount), v))
	})
}

// CorrectCountLT applies the LT predicate on the "correct_count" field.
func CorrectCountLT(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCorrectCount), v))
	})
}

// CorrectCountLTE applies the LTE predicate on the "correct_count" field.
func CorrectCountLTE(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCorrectCount), v))
	})
}

// AnswerCountEQ applies the EQ predicate on the "answer_count" field.
func AnswerCountEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountNEQ applies the NEQ predicate on the "answer_count" field.
func AnswerCountNEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountIn applies the In predicate on the "answer_count" field.
func AnswerCountIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnswerCount), v...))
	})
}

// AnswerCountNotIn applies the NotIn predicate on the "answer_count" field.
func AnswerCountNotIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnswerCount), v...))
	})
}

// AnswerCountGT applies the GT predicate on the "answer_count" field.
func AnswerCountGT(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountGTE applies the GTE predicate on the "answer_count" field.
func AnswerCountGTE(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountLT applies the LT predicate on the "answer_count" field.
func AnswerCountLT(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnswerCount), v))
	})
}

// AnswerCountLTE applies the LTE predicate on the "answer_count" field.
func AnswerCountLTE(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnswerCount), v))
	})
}

// AnswerEQ applies the EQ predicate on the "answer" field.
func AnswerEQ(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswer), v))
	})
}

// AnswerNEQ applies the NEQ predicate on the "answer" field.
func AnswerNEQ(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnswer), v))
	})
}

// AnswerIn applies the In predicate on the "answer" field.
func AnswerIn(vs ...string) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnswer), v...))
	})
}

// AnswerNotIn applies the NotIn predicate on the "answer" field.
func AnswerNotIn(vs ...string) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnswer), v...))
	})
}

// AnswerGT applies the GT predicate on the "answer" field.
func AnswerGT(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnswer), v))
	})
}

// AnswerGTE applies the GTE predicate on the "answer" field.
func AnswerGTE(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnswer), v))
	})
}

// AnswerLT applies the LT predicate on the "answer" field.
func AnswerLT(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnswer), v))
	})
}

// AnswerLTE applies the LTE predicate on the "answer" field.
func AnswerLTE(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnswer), v))
	})
}

// AnswerContains applies the Contains predicate on the "answer" field.
func AnswerContains(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAnswer), v))
	})
}

// AnswerHasPrefix applies the HasPrefix predicate on the "answer" field.
func AnswerHasPrefix(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAnswer), v))
	})
}

// AnswerHasSuffix applies the HasSuffix predicate on the "answer" field.
func AnswerHasSuffix(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAnswer), v))
	})
}

// AnswerEqualFold applies the EqualFold predicate on the "answer" field.
func AnswerEqualFold(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAnswer), v))
	})
}

// AnswerContainsFold applies the ContainsFold predicate on the "answer" field.
func AnswerContainsFold(v string) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAnswer), v))
	})
}

// IsRightEQ applies the EQ predicate on the "is_right" field.
func IsRightEQ(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRight), v))
	})
}

// IsRightNEQ applies the NEQ predicate on the "is_right" field.
func IsRightNEQ(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsRight), v))
	})
}

// IsRightIn applies the In predicate on the "is_right" field.
func IsRightIn(vs ...uint8) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsRight), v...))
	})
}

// IsRightNotIn applies the NotIn predicate on the "is_right" field.
func IsRightNotIn(vs ...uint8) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsRight), v...))
	})
}

// IsRightGT applies the GT predicate on the "is_right" field.
func IsRightGT(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsRight), v))
	})
}

// IsRightGTE applies the GTE predicate on the "is_right" field.
func IsRightGTE(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsRight), v))
	})
}

// IsRightLT applies the LT predicate on the "is_right" field.
func IsRightLT(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsRight), v))
	})
}

// IsRightLTE applies the LTE predicate on the "is_right" field.
func IsRightLTE(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsRight), v))
	})
}

// ExamQuestionTypeEQ applies the EQ predicate on the "exam_question_type" field.
func ExamQuestionTypeEQ(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeNEQ applies the NEQ predicate on the "exam_question_type" field.
func ExamQuestionTypeNEQ(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeIn applies the In predicate on the "exam_question_type" field.
func ExamQuestionTypeIn(vs ...uint8) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExamQuestionType), v...))
	})
}

// ExamQuestionTypeNotIn applies the NotIn predicate on the "exam_question_type" field.
func ExamQuestionTypeNotIn(vs ...uint8) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExamQuestionType), v...))
	})
}

// ExamQuestionTypeGT applies the GT predicate on the "exam_question_type" field.
func ExamQuestionTypeGT(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeGTE applies the GTE predicate on the "exam_question_type" field.
func ExamQuestionTypeGTE(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeLT applies the LT predicate on the "exam_question_type" field.
func ExamQuestionTypeLT(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeLTE applies the LTE predicate on the "exam_question_type" field.
func ExamQuestionTypeLTE(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExamQuestionType), v))
	})
}

// QuestionTypeEQ applies the EQ predicate on the "question_type" field.
func QuestionTypeEQ(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionType), v))
	})
}

// QuestionTypeNEQ applies the NEQ predicate on the "question_type" field.
func QuestionTypeNEQ(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionType), v))
	})
}

// QuestionTypeIn applies the In predicate on the "question_type" field.
func QuestionTypeIn(vs ...uint8) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionType), v...))
	})
}

// QuestionTypeNotIn applies the NotIn predicate on the "question_type" field.
func QuestionTypeNotIn(vs ...uint8) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionType), v...))
	})
}

// QuestionTypeGT applies the GT predicate on the "question_type" field.
func QuestionTypeGT(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuestionType), v))
	})
}

// QuestionTypeGTE applies the GTE predicate on the "question_type" field.
func QuestionTypeGTE(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuestionType), v))
	})
}

// QuestionTypeLT applies the LT predicate on the "question_type" field.
func QuestionTypeLT(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuestionType), v))
	})
}

// QuestionTypeLTE applies the LTE predicate on the "question_type" field.
func QuestionTypeLTE(v uint8) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuestionType), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// QuestionBankIDEQ applies the EQ predicate on the "question_bank_id" field.
func QuestionBankIDEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionBankID), v))
	})
}

// QuestionBankIDNEQ applies the NEQ predicate on the "question_bank_id" field.
func QuestionBankIDNEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionBankID), v))
	})
}

// QuestionBankIDIn applies the In predicate on the "question_bank_id" field.
func QuestionBankIDIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionBankID), v...))
	})
}

// QuestionBankIDNotIn applies the NotIn predicate on the "question_bank_id" field.
func QuestionBankIDNotIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionBankID), v...))
	})
}

// QuestionBankIDIsNil applies the IsNil predicate on the "question_bank_id" field.
func QuestionBankIDIsNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuestionBankID)))
	})
}

// QuestionBankIDNotNil applies the NotNil predicate on the "question_bank_id" field.
func QuestionBankIDNotNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuestionBankID)))
	})
}

// QuestionIDEQ applies the EQ predicate on the "question_id" field.
func QuestionIDEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionID), v))
	})
}

// QuestionIDNEQ applies the NEQ predicate on the "question_id" field.
func QuestionIDNEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionID), v))
	})
}

// QuestionIDIn applies the In predicate on the "question_id" field.
func QuestionIDIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionID), v...))
	})
}

// QuestionIDNotIn applies the NotIn predicate on the "question_id" field.
func QuestionIDNotIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionID), v...))
	})
}

// QuestionIDIsNil applies the IsNil predicate on the "question_id" field.
func QuestionIDIsNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuestionID)))
	})
}

// QuestionIDNotNil applies the NotNil predicate on the "question_id" field.
func QuestionIDNotNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuestionID)))
	})
}

// ExamPaperIDEQ applies the EQ predicate on the "exam_paper_id" field.
func ExamPaperIDEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamPaperID), v))
	})
}

// ExamPaperIDNEQ applies the NEQ predicate on the "exam_paper_id" field.
func ExamPaperIDNEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExamPaperID), v))
	})
}

// ExamPaperIDIn applies the In predicate on the "exam_paper_id" field.
func ExamPaperIDIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExamPaperID), v...))
	})
}

// ExamPaperIDNotIn applies the NotIn predicate on the "exam_paper_id" field.
func ExamPaperIDNotIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExamPaperID), v...))
	})
}

// ExamPaperIDIsNil applies the IsNil predicate on the "exam_paper_id" field.
func ExamPaperIDIsNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExamPaperID)))
	})
}

// ExamPaperIDNotNil applies the NotNil predicate on the "exam_paper_id" field.
func ExamPaperIDNotNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExamPaperID)))
	})
}

// SectionIDEQ applies the EQ predicate on the "section_id" field.
func SectionIDEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSectionID), v))
	})
}

// SectionIDNEQ applies the NEQ predicate on the "section_id" field.
func SectionIDNEQ(v int) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSectionID), v))
	})
}

// SectionIDIn applies the In predicate on the "section_id" field.
func SectionIDIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSectionID), v...))
	})
}

// SectionIDNotIn applies the NotIn predicate on the "section_id" field.
func SectionIDNotIn(vs ...int) predicate.TkUserQuestionRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSectionID), v...))
	})
}

// SectionIDIsNil applies the IsNil predicate on the "section_id" field.
func SectionIDIsNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSectionID)))
	})
}

// SectionIDNotNil applies the NotNil predicate on the "section_id" field.
func SectionIDNotNil() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSectionID)))
	})
}

// HasQuestionBank applies the HasEdge predicate on the "question_bank" edge.
func HasQuestionBank() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionBankTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionBankTable, QuestionBankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionBankWith applies the HasEdge predicate on the "question_bank" edge with a given conditions (other predicates).
func HasQuestionBankWith(preds ...predicate.TkQuestionBank) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionBankInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionBankTable, QuestionBankColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.TkQuestion) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamPaper applies the HasEdge predicate on the "exam_paper" edge.
func HasExamPaper() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPaperTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamPaperTable, ExamPaperColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamPaperWith applies the HasEdge predicate on the "exam_paper" edge with a given conditions (other predicates).
func HasExamPaperWith(preds ...predicate.TkExamPaper) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPaperInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamPaperTable, ExamPaperColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSection applies the HasEdge predicate on the "section" edge.
func HasSection() predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SectionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SectionTable, SectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSectionWith applies the HasEdge predicate on the "section" edge with a given conditions (other predicates).
func HasSectionWith(preds ...predicate.TkSection) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SectionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SectionTable, SectionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TkUserQuestionRecord) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TkUserQuestionRecord) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TkUserQuestionRecord) predicate.TkUserQuestionRecord {
	return predicate.TkUserQuestionRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}

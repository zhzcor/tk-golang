// Code generated by entc, DO NOT EDIT.

package tkuserquestionrecord

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the tkuserquestionrecord type in the database.
	Label = "tk_user_question_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCorrectCount holds the string denoting the correct_count field in the database.
	FieldCorrectCount = "correct_count"
	// FieldAnswerCount holds the string denoting the answer_count field in the database.
	FieldAnswerCount = "answer_count"
	// FieldAnswer holds the string denoting the answer field in the database.
	FieldAnswer = "answer"
	// FieldIsRight holds the string denoting the is_right field in the database.
	FieldIsRight = "is_right"
	// FieldExamQuestionType holds the string denoting the exam_question_type field in the database.
	FieldExamQuestionType = "exam_question_type"
	// FieldQuestionType holds the string denoting the question_type field in the database.
	FieldQuestionType = "question_type"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldQuestionBankID holds the string denoting the question_bank_id field in the database.
	FieldQuestionBankID = "question_bank_id"
	// FieldQuestionID holds the string denoting the question_id field in the database.
	FieldQuestionID = "question_id"
	// FieldExamPaperID holds the string denoting the exam_paper_id field in the database.
	FieldExamPaperID = "exam_paper_id"
	// FieldSectionID holds the string denoting the section_id field in the database.
	FieldSectionID = "section_id"
	// EdgeQuestionBank holds the string denoting the question_bank edge name in mutations.
	EdgeQuestionBank = "question_bank"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// EdgeExamPaper holds the string denoting the exam_paper edge name in mutations.
	EdgeExamPaper = "exam_paper"
	// EdgeSection holds the string denoting the section edge name in mutations.
	EdgeSection = "section"
	// Table holds the table name of the tkuserquestionrecord in the database.
	Table = "tk_user_question_records"
	// QuestionBankTable is the table the holds the question_bank relation/edge.
	QuestionBankTable = "tk_user_question_records"
	// QuestionBankInverseTable is the table name for the TkQuestionBank entity.
	// It exists in this package in order to avoid circular dependency with the "tkquestionbank" package.
	QuestionBankInverseTable = "tk_question_banks"
	// QuestionBankColumn is the table column denoting the question_bank relation/edge.
	QuestionBankColumn = "question_bank_id"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "tk_user_question_records"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// QuestionTable is the table the holds the question relation/edge.
	QuestionTable = "tk_user_question_records"
	// QuestionInverseTable is the table name for the TkQuestion entity.
	// It exists in this package in order to avoid circular dependency with the "tkquestion" package.
	QuestionInverseTable = "tk_questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_id"
	// ExamPaperTable is the table the holds the exam_paper relation/edge.
	ExamPaperTable = "tk_user_question_records"
	// ExamPaperInverseTable is the table name for the TkExamPaper entity.
	// It exists in this package in order to avoid circular dependency with the "tkexampaper" package.
	ExamPaperInverseTable = "tk_exam_papers"
	// ExamPaperColumn is the table column denoting the exam_paper relation/edge.
	ExamPaperColumn = "exam_paper_id"
	// SectionTable is the table the holds the section relation/edge.
	SectionTable = "tk_user_question_records"
	// SectionInverseTable is the table name for the TkSection entity.
	// It exists in this package in order to avoid circular dependency with the "tksection" package.
	SectionInverseTable = "tk_sections"
	// SectionColumn is the table column denoting the section relation/edge.
	SectionColumn = "section_id"
)

// Columns holds all SQL columns for tkuserquestionrecord fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCorrectCount,
	FieldAnswerCount,
	FieldAnswer,
	FieldIsRight,
	FieldExamQuestionType,
	FieldQuestionType,
	FieldUserID,
	FieldQuestionBankID,
	FieldQuestionID,
	FieldExamPaperID,
	FieldSectionID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "tkserver/internal/store/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCorrectCount holds the default value on creation for the "correct_count" field.
	DefaultCorrectCount int
	// DefaultAnswerCount holds the default value on creation for the "answer_count" field.
	DefaultAnswerCount int
	// DefaultAnswer holds the default value on creation for the "answer" field.
	DefaultAnswer string
	// DefaultIsRight holds the default value on creation for the "is_right" field.
	DefaultIsRight uint8
	// DefaultExamQuestionType holds the default value on creation for the "exam_question_type" field.
	DefaultExamQuestionType uint8
	// DefaultQuestionType holds the default value on creation for the "question_type" field.
	DefaultQuestionType uint8
)

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/role"
	"gserver/internal/store/ent/rolepermission"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RolePermissionCreate is the builder for creating a RolePermission entity.
type RolePermissionCreate struct {
	config
	mutation *RolePermissionMutation
	hooks    []Hook
}

// SetRoleID sets the "role_id" field.
func (rpc *RolePermissionCreate) SetRoleID(i int) *RolePermissionCreate {
	rpc.mutation.SetRoleID(i)
	return rpc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (rpc *RolePermissionCreate) SetNillableRoleID(i *int) *RolePermissionCreate {
	if i != nil {
		rpc.SetRoleID(*i)
	}
	return rpc
}

// SetPermissionID sets the "permission_id" field.
func (rpc *RolePermissionCreate) SetPermissionID(s string) *RolePermissionCreate {
	rpc.mutation.SetPermissionID(s)
	return rpc
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rpc *RolePermissionCreate) SetNillablePermissionID(s *string) *RolePermissionCreate {
	if s != nil {
		rpc.SetPermissionID(*s)
	}
	return rpc
}

// SetRole sets the "role" edge to the Role entity.
func (rpc *RolePermissionCreate) SetRole(r *Role) *RolePermissionCreate {
	return rpc.SetRoleID(r.ID)
}

// Mutation returns the RolePermissionMutation object of the builder.
func (rpc *RolePermissionCreate) Mutation() *RolePermissionMutation {
	return rpc.mutation
}

// Save creates the RolePermission in the database.
func (rpc *RolePermissionCreate) Save(ctx context.Context) (*RolePermission, error) {
	var (
		err  error
		node *RolePermission
	)
	if len(rpc.hooks) == 0 {
		if err = rpc.check(); err != nil {
			return nil, err
		}
		node, err = rpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RolePermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rpc.check(); err != nil {
				return nil, err
			}
			rpc.mutation = mutation
			node, err = rpc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpc.hooks) - 1; i >= 0; i-- {
			mut = rpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *RolePermissionCreate) SaveX(ctx context.Context) *RolePermission {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rpc *RolePermissionCreate) check() error {
	return nil
}

func (rpc *RolePermissionCreate) sqlSave(ctx context.Context) (*RolePermission, error) {
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rpc *RolePermissionCreate) createSpec() (*RolePermission, *sqlgraph.CreateSpec) {
	var (
		_node = &RolePermission{config: rpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rolepermission.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolepermission.FieldID,
			},
		}
	)
	if value, ok := rpc.mutation.PermissionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolepermission.FieldPermissionID,
		})
		_node.PermissionID = value
	}
	if nodes := rpc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RolePermissionCreateBulk is the builder for creating many RolePermission entities in bulk.
type RolePermissionCreateBulk struct {
	config
	builders []*RolePermissionCreate
}

// Save creates the RolePermission entities in the database.
func (rpcb *RolePermissionCreateBulk) Save(ctx context.Context) ([]*RolePermission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*RolePermission, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RolePermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *RolePermissionCreateBulk) SaveX(ctx context.Context) []*RolePermission {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDetail holds the string denoting the detail field in the database.
	FieldDetail = "detail"
	// FieldPublishType holds the string denoting the publish_type field in the database.
	FieldPublishType = "publish_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPublishStatus holds the string denoting the publish_status field in the database.
	FieldPublishStatus = "publish_status"
	// FieldAutoPublishAt holds the string denoting the auto_publish_at field in the database.
	FieldAutoPublishAt = "auto_publish_at"
	// FieldMessageTypeID holds the string denoting the message_type_id field in the database.
	FieldMessageTypeID = "message_type_id"
	// FieldCreatedAdminID holds the string denoting the created_admin_id field in the database.
	FieldCreatedAdminID = "created_admin_id"
	// FieldAttachmentID holds the string denoting the attachment_id field in the database.
	FieldAttachmentID = "attachment_id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldClassID holds the string denoting the class_id field in the database.
	FieldClassID = "class_id"
	// EdgeMessageType holds the string denoting the message_type edge name in mutations.
	EdgeMessageType = "Message_type"
	// EdgeAdmin holds the string denoting the admin edge name in mutations.
	EdgeAdmin = "admin"
	// EdgeAttachment holds the string denoting the attachment edge name in mutations.
	EdgeAttachment = "attachment"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// MessageTypeTable is the table the holds the Message_type relation/edge.
	MessageTypeTable = "messages"
	// MessageTypeInverseTable is the table name for the MessageType entity.
	// It exists in this package in order to avoid circular dependency with the "messagetype" package.
	MessageTypeInverseTable = "message_types"
	// MessageTypeColumn is the table column denoting the Message_type relation/edge.
	MessageTypeColumn = "message_type_id"
	// AdminTable is the table the holds the admin relation/edge.
	AdminTable = "messages"
	// AdminInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	AdminInverseTable = "admins"
	// AdminColumn is the table column denoting the admin relation/edge.
	AdminColumn = "created_admin_id"
	// AttachmentTable is the table the holds the attachment relation/edge.
	AttachmentTable = "messages"
	// AttachmentInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AttachmentInverseTable = "attachments"
	// AttachmentColumn is the table column denoting the attachment relation/edge.
	AttachmentColumn = "attachment_id"
	// CourseTable is the table the holds the course relation/edge.
	CourseTable = "messages"
	// CourseInverseTable is the table name for the KcCourse entity.
	// It exists in this package in order to avoid circular dependency with the "kccourse" package.
	CourseInverseTable = "kc_courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "course_id"
	// ClassTable is the table the holds the class relation/edge.
	ClassTable = "messages"
	// ClassInverseTable is the table name for the KcClass entity.
	// It exists in this package in order to avoid circular dependency with the "kcclass" package.
	ClassInverseTable = "kc_classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "class_id"
	// UsersTable is the table the holds the users relation/edge. The primary key declared below.
	UsersTable = "user_messages"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldDetail,
	FieldPublishType,
	FieldStatus,
	FieldPublishStatus,
	FieldAutoPublishAt,
	FieldMessageTypeID,
	FieldCreatedAdminID,
	FieldAttachmentID,
	FieldCourseID,
	FieldClassID,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "message_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "gserver/internal/store/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultDetail holds the default value on creation for the "detail" field.
	DefaultDetail string
	// DefaultPublishType holds the default value on creation for the "publish_type" field.
	DefaultPublishType uint8
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultPublishStatus holds the default value on creation for the "publish_status" field.
	DefaultPublishStatus uint8
)

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkexamquestiontype"
	"tkserver/internal/store/ent/tkquestionbank"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamQuestionTypeUpdate is the builder for updating TkExamQuestionType entities.
type TkExamQuestionTypeUpdate struct {
	config
	hooks    []Hook
	mutation *TkExamQuestionTypeMutation
}

// Where adds a new predicate for the TkExamQuestionTypeUpdate builder.
func (teqtu *TkExamQuestionTypeUpdate) Where(ps ...predicate.TkExamQuestionType) *TkExamQuestionTypeUpdate {
	teqtu.mutation.predicates = append(teqtu.mutation.predicates, ps...)
	return teqtu
}

// SetUUID sets the "uuid" field.
func (teqtu *TkExamQuestionTypeUpdate) SetUUID(s string) *TkExamQuestionTypeUpdate {
	teqtu.mutation.SetUUID(s)
	return teqtu
}

// SetUpdatedAt sets the "updated_at" field.
func (teqtu *TkExamQuestionTypeUpdate) SetUpdatedAt(t time.Time) *TkExamQuestionTypeUpdate {
	teqtu.mutation.SetUpdatedAt(t)
	return teqtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (teqtu *TkExamQuestionTypeUpdate) ClearUpdatedAt() *TkExamQuestionTypeUpdate {
	teqtu.mutation.ClearUpdatedAt()
	return teqtu
}

// SetDeletedAt sets the "deleted_at" field.
func (teqtu *TkExamQuestionTypeUpdate) SetDeletedAt(t time.Time) *TkExamQuestionTypeUpdate {
	teqtu.mutation.SetDeletedAt(t)
	return teqtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teqtu *TkExamQuestionTypeUpdate) SetNillableDeletedAt(t *time.Time) *TkExamQuestionTypeUpdate {
	if t != nil {
		teqtu.SetDeletedAt(*t)
	}
	return teqtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (teqtu *TkExamQuestionTypeUpdate) ClearDeletedAt() *TkExamQuestionTypeUpdate {
	teqtu.mutation.ClearDeletedAt()
	return teqtu
}

// SetExamQuestionType sets the "exam_question_type" field.
func (teqtu *TkExamQuestionTypeUpdate) SetExamQuestionType(u uint8) *TkExamQuestionTypeUpdate {
	teqtu.mutation.ResetExamQuestionType()
	teqtu.mutation.SetExamQuestionType(u)
	return teqtu
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (teqtu *TkExamQuestionTypeUpdate) SetNillableExamQuestionType(u *uint8) *TkExamQuestionTypeUpdate {
	if u != nil {
		teqtu.SetExamQuestionType(*u)
	}
	return teqtu
}

// AddExamQuestionType adds u to the "exam_question_type" field.
func (teqtu *TkExamQuestionTypeUpdate) AddExamQuestionType(u uint8) *TkExamQuestionTypeUpdate {
	teqtu.mutation.AddExamQuestionType(u)
	return teqtu
}

// SetQuestionCount sets the "question_count" field.
func (teqtu *TkExamQuestionTypeUpdate) SetQuestionCount(i int) *TkExamQuestionTypeUpdate {
	teqtu.mutation.ResetQuestionCount()
	teqtu.mutation.SetQuestionCount(i)
	return teqtu
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (teqtu *TkExamQuestionTypeUpdate) SetNillableQuestionCount(i *int) *TkExamQuestionTypeUpdate {
	if i != nil {
		teqtu.SetQuestionCount(*i)
	}
	return teqtu
}

// AddQuestionCount adds i to the "question_count" field.
func (teqtu *TkExamQuestionTypeUpdate) AddQuestionCount(i int) *TkExamQuestionTypeUpdate {
	teqtu.mutation.AddQuestionCount(i)
	return teqtu
}

// SetAnsweredCount sets the "answered_count" field.
func (teqtu *TkExamQuestionTypeUpdate) SetAnsweredCount(i int) *TkExamQuestionTypeUpdate {
	teqtu.mutation.ResetAnsweredCount()
	teqtu.mutation.SetAnsweredCount(i)
	return teqtu
}

// SetNillableAnsweredCount sets the "answered_count" field if the given value is not nil.
func (teqtu *TkExamQuestionTypeUpdate) SetNillableAnsweredCount(i *int) *TkExamQuestionTypeUpdate {
	if i != nil {
		teqtu.SetAnsweredCount(*i)
	}
	return teqtu
}

// AddAnsweredCount adds i to the "answered_count" field.
func (teqtu *TkExamQuestionTypeUpdate) AddAnsweredCount(i int) *TkExamQuestionTypeUpdate {
	teqtu.mutation.AddAnsweredCount(i)
	return teqtu
}

// SetAnsweredUserCount sets the "answered_user_count" field.
func (teqtu *TkExamQuestionTypeUpdate) SetAnsweredUserCount(i int) *TkExamQuestionTypeUpdate {
	teqtu.mutation.ResetAnsweredUserCount()
	teqtu.mutation.SetAnsweredUserCount(i)
	return teqtu
}

// SetNillableAnsweredUserCount sets the "answered_user_count" field if the given value is not nil.
func (teqtu *TkExamQuestionTypeUpdate) SetNillableAnsweredUserCount(i *int) *TkExamQuestionTypeUpdate {
	if i != nil {
		teqtu.SetAnsweredUserCount(*i)
	}
	return teqtu
}

// AddAnsweredUserCount adds i to the "answered_user_count" field.
func (teqtu *TkExamQuestionTypeUpdate) AddAnsweredUserCount(i int) *TkExamQuestionTypeUpdate {
	teqtu.mutation.AddAnsweredUserCount(i)
	return teqtu
}

// SetQuestionBankID sets the "question_bank_id" field.
func (teqtu *TkExamQuestionTypeUpdate) SetQuestionBankID(i int) *TkExamQuestionTypeUpdate {
	teqtu.mutation.ResetQuestionBankID()
	teqtu.mutation.SetQuestionBankID(i)
	return teqtu
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (teqtu *TkExamQuestionTypeUpdate) SetNillableQuestionBankID(i *int) *TkExamQuestionTypeUpdate {
	if i != nil {
		teqtu.SetQuestionBankID(*i)
	}
	return teqtu
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (teqtu *TkExamQuestionTypeUpdate) ClearQuestionBankID() *TkExamQuestionTypeUpdate {
	teqtu.mutation.ClearQuestionBankID()
	return teqtu
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (teqtu *TkExamQuestionTypeUpdate) SetQuestionBank(t *TkQuestionBank) *TkExamQuestionTypeUpdate {
	return teqtu.SetQuestionBankID(t.ID)
}

// Mutation returns the TkExamQuestionTypeMutation object of the builder.
func (teqtu *TkExamQuestionTypeUpdate) Mutation() *TkExamQuestionTypeMutation {
	return teqtu.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (teqtu *TkExamQuestionTypeUpdate) ClearQuestionBank() *TkExamQuestionTypeUpdate {
	teqtu.mutation.ClearQuestionBank()
	return teqtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teqtu *TkExamQuestionTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	teqtu.defaults()
	if len(teqtu.hooks) == 0 {
		affected, err = teqtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamQuestionTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teqtu.mutation = mutation
			affected, err = teqtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(teqtu.hooks) - 1; i >= 0; i-- {
			mut = teqtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teqtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (teqtu *TkExamQuestionTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := teqtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teqtu *TkExamQuestionTypeUpdate) Exec(ctx context.Context) error {
	_, err := teqtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teqtu *TkExamQuestionTypeUpdate) ExecX(ctx context.Context) {
	if err := teqtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teqtu *TkExamQuestionTypeUpdate) defaults() {
	if _, ok := teqtu.mutation.UpdatedAt(); !ok && !teqtu.mutation.UpdatedAtCleared() {
		v := tkexamquestiontype.UpdateDefaultUpdatedAt()
		teqtu.mutation.SetUpdatedAt(v)
	}
}

func (teqtu *TkExamQuestionTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexamquestiontype.Table,
			Columns: tkexamquestiontype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexamquestiontype.FieldID,
			},
		},
	}
	if ps := teqtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teqtu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexamquestiontype.FieldUUID,
		})
	}
	if teqtu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexamquestiontype.FieldCreatedAt,
		})
	}
	if value, ok := teqtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexamquestiontype.FieldUpdatedAt,
		})
	}
	if teqtu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexamquestiontype.FieldUpdatedAt,
		})
	}
	if value, ok := teqtu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexamquestiontype.FieldDeletedAt,
		})
	}
	if teqtu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexamquestiontype.FieldDeletedAt,
		})
	}
	if value, ok := teqtu.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexamquestiontype.FieldExamQuestionType,
		})
	}
	if value, ok := teqtu.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexamquestiontype.FieldExamQuestionType,
		})
	}
	if value, ok := teqtu.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldQuestionCount,
		})
	}
	if value, ok := teqtu.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldQuestionCount,
		})
	}
	if value, ok := teqtu.mutation.AnsweredCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldAnsweredCount,
		})
	}
	if value, ok := teqtu.mutation.AddedAnsweredCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldAnsweredCount,
		})
	}
	if value, ok := teqtu.mutation.AnsweredUserCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldAnsweredUserCount,
		})
	}
	if value, ok := teqtu.mutation.AddedAnsweredUserCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldAnsweredUserCount,
		})
	}
	if teqtu.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexamquestiontype.QuestionBankTable,
			Columns: []string{tkexamquestiontype.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teqtu.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexamquestiontype.QuestionBankTable,
			Columns: []string{tkexamquestiontype.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teqtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexamquestiontype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkExamQuestionTypeUpdateOne is the builder for updating a single TkExamQuestionType entity.
type TkExamQuestionTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkExamQuestionTypeMutation
}

// SetUUID sets the "uuid" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetUUID(s string) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.SetUUID(s)
	return teqtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetUpdatedAt(t time.Time) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.SetUpdatedAt(t)
	return teqtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) ClearUpdatedAt() *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.ClearUpdatedAt()
	return teqtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetDeletedAt(t time.Time) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.SetDeletedAt(t)
	return teqtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetNillableDeletedAt(t *time.Time) *TkExamQuestionTypeUpdateOne {
	if t != nil {
		teqtuo.SetDeletedAt(*t)
	}
	return teqtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) ClearDeletedAt() *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.ClearDeletedAt()
	return teqtuo
}

// SetExamQuestionType sets the "exam_question_type" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetExamQuestionType(u uint8) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.ResetExamQuestionType()
	teqtuo.mutation.SetExamQuestionType(u)
	return teqtuo
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetNillableExamQuestionType(u *uint8) *TkExamQuestionTypeUpdateOne {
	if u != nil {
		teqtuo.SetExamQuestionType(*u)
	}
	return teqtuo
}

// AddExamQuestionType adds u to the "exam_question_type" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) AddExamQuestionType(u uint8) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.AddExamQuestionType(u)
	return teqtuo
}

// SetQuestionCount sets the "question_count" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetQuestionCount(i int) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.ResetQuestionCount()
	teqtuo.mutation.SetQuestionCount(i)
	return teqtuo
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetNillableQuestionCount(i *int) *TkExamQuestionTypeUpdateOne {
	if i != nil {
		teqtuo.SetQuestionCount(*i)
	}
	return teqtuo
}

// AddQuestionCount adds i to the "question_count" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) AddQuestionCount(i int) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.AddQuestionCount(i)
	return teqtuo
}

// SetAnsweredCount sets the "answered_count" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetAnsweredCount(i int) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.ResetAnsweredCount()
	teqtuo.mutation.SetAnsweredCount(i)
	return teqtuo
}

// SetNillableAnsweredCount sets the "answered_count" field if the given value is not nil.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetNillableAnsweredCount(i *int) *TkExamQuestionTypeUpdateOne {
	if i != nil {
		teqtuo.SetAnsweredCount(*i)
	}
	return teqtuo
}

// AddAnsweredCount adds i to the "answered_count" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) AddAnsweredCount(i int) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.AddAnsweredCount(i)
	return teqtuo
}

// SetAnsweredUserCount sets the "answered_user_count" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetAnsweredUserCount(i int) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.ResetAnsweredUserCount()
	teqtuo.mutation.SetAnsweredUserCount(i)
	return teqtuo
}

// SetNillableAnsweredUserCount sets the "answered_user_count" field if the given value is not nil.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetNillableAnsweredUserCount(i *int) *TkExamQuestionTypeUpdateOne {
	if i != nil {
		teqtuo.SetAnsweredUserCount(*i)
	}
	return teqtuo
}

// AddAnsweredUserCount adds i to the "answered_user_count" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) AddAnsweredUserCount(i int) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.AddAnsweredUserCount(i)
	return teqtuo
}

// SetQuestionBankID sets the "question_bank_id" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetQuestionBankID(i int) *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.ResetQuestionBankID()
	teqtuo.mutation.SetQuestionBankID(i)
	return teqtuo
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetNillableQuestionBankID(i *int) *TkExamQuestionTypeUpdateOne {
	if i != nil {
		teqtuo.SetQuestionBankID(*i)
	}
	return teqtuo
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (teqtuo *TkExamQuestionTypeUpdateOne) ClearQuestionBankID() *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.ClearQuestionBankID()
	return teqtuo
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (teqtuo *TkExamQuestionTypeUpdateOne) SetQuestionBank(t *TkQuestionBank) *TkExamQuestionTypeUpdateOne {
	return teqtuo.SetQuestionBankID(t.ID)
}

// Mutation returns the TkExamQuestionTypeMutation object of the builder.
func (teqtuo *TkExamQuestionTypeUpdateOne) Mutation() *TkExamQuestionTypeMutation {
	return teqtuo.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (teqtuo *TkExamQuestionTypeUpdateOne) ClearQuestionBank() *TkExamQuestionTypeUpdateOne {
	teqtuo.mutation.ClearQuestionBank()
	return teqtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teqtuo *TkExamQuestionTypeUpdateOne) Select(field string, fields ...string) *TkExamQuestionTypeUpdateOne {
	teqtuo.fields = append([]string{field}, fields...)
	return teqtuo
}

// Save executes the query and returns the updated TkExamQuestionType entity.
func (teqtuo *TkExamQuestionTypeUpdateOne) Save(ctx context.Context) (*TkExamQuestionType, error) {
	var (
		err  error
		node *TkExamQuestionType
	)
	teqtuo.defaults()
	if len(teqtuo.hooks) == 0 {
		node, err = teqtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamQuestionTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teqtuo.mutation = mutation
			node, err = teqtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teqtuo.hooks) - 1; i >= 0; i-- {
			mut = teqtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teqtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (teqtuo *TkExamQuestionTypeUpdateOne) SaveX(ctx context.Context) *TkExamQuestionType {
	node, err := teqtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teqtuo *TkExamQuestionTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := teqtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teqtuo *TkExamQuestionTypeUpdateOne) ExecX(ctx context.Context) {
	if err := teqtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teqtuo *TkExamQuestionTypeUpdateOne) defaults() {
	if _, ok := teqtuo.mutation.UpdatedAt(); !ok && !teqtuo.mutation.UpdatedAtCleared() {
		v := tkexamquestiontype.UpdateDefaultUpdatedAt()
		teqtuo.mutation.SetUpdatedAt(v)
	}
}

func (teqtuo *TkExamQuestionTypeUpdateOne) sqlSave(ctx context.Context) (_node *TkExamQuestionType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkexamquestiontype.Table,
			Columns: tkexamquestiontype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexamquestiontype.FieldID,
			},
		},
	}
	id, ok := teqtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkExamQuestionType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := teqtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkexamquestiontype.FieldID)
		for _, f := range fields {
			if !tkexamquestiontype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkexamquestiontype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teqtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teqtuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexamquestiontype.FieldUUID,
		})
	}
	if teqtuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexamquestiontype.FieldCreatedAt,
		})
	}
	if value, ok := teqtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexamquestiontype.FieldUpdatedAt,
		})
	}
	if teqtuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexamquestiontype.FieldUpdatedAt,
		})
	}
	if value, ok := teqtuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexamquestiontype.FieldDeletedAt,
		})
	}
	if teqtuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkexamquestiontype.FieldDeletedAt,
		})
	}
	if value, ok := teqtuo.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexamquestiontype.FieldExamQuestionType,
		})
	}
	if value, ok := teqtuo.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexamquestiontype.FieldExamQuestionType,
		})
	}
	if value, ok := teqtuo.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldQuestionCount,
		})
	}
	if value, ok := teqtuo.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldQuestionCount,
		})
	}
	if value, ok := teqtuo.mutation.AnsweredCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldAnsweredCount,
		})
	}
	if value, ok := teqtuo.mutation.AddedAnsweredCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldAnsweredCount,
		})
	}
	if value, ok := teqtuo.mutation.AnsweredUserCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldAnsweredUserCount,
		})
	}
	if value, ok := teqtuo.mutation.AddedAnsweredUserCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexamquestiontype.FieldAnsweredUserCount,
		})
	}
	if teqtuo.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexamquestiontype.QuestionBankTable,
			Columns: []string{tkexamquestiontype.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teqtuo.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexamquestiontype.QuestionBankTable,
			Columns: []string{tkexamquestiontype.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkExamQuestionType{config: teqtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teqtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkexamquestiontype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

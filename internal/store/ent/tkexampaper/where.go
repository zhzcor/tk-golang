// Code generated by entc, DO NOT EDIT.

package tkexampaper

import (
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// ExamQuestionType applies equality check predicate on the "exam_question_type" field. It's identical to ExamQuestionTypeEQ.
func ExamQuestionType(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamQuestionType), v))
	})
}

// ExamType applies equality check predicate on the "exam_type" field. It's identical to ExamTypeEQ.
func ExamType(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamType), v))
	})
}

// Difficulty applies equality check predicate on the "difficulty" field. It's identical to DifficultyEQ.
func Difficulty(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDifficulty), v))
	})
}

// QuestionCount applies equality check predicate on the "question_count" field. It's identical to QuestionCountEQ.
func QuestionCount(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionCount), v))
	})
}

// AnsweredUserCount applies equality check predicate on the "answered_user_count" field. It's identical to AnsweredUserCountEQ.
func AnsweredUserCount(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnsweredUserCount), v))
	})
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// PassScore applies equality check predicate on the "pass_score" field. It's identical to PassScoreEQ.
func PassScore(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassScore), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationType applies equality check predicate on the "duration_type" field. It's identical to DurationTypeEQ.
func DurationType(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationType), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// EnableStatus applies equality check predicate on the "enable_status" field. It's identical to EnableStatusEQ.
func EnableStatus(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableStatus), v))
	})
}

// CreatedAdminID applies equality check predicate on the "created_admin_id" field. It's identical to CreatedAdminIDEQ.
func CreatedAdminID(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAdminID), v))
	})
}

// QuestionBankID applies equality check predicate on the "question_bank_id" field. It's identical to QuestionBankIDEQ.
func QuestionBankID(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionBankID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesc), v))
	})
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDesc), v...))
	})
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDesc), v...))
	})
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesc), v))
	})
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesc), v))
	})
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesc), v))
	})
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesc), v))
	})
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDesc), v))
	})
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDesc), v))
	})
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDesc), v))
	})
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDesc), v))
	})
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDesc), v))
	})
}

// ExamQuestionTypeEQ applies the EQ predicate on the "exam_question_type" field.
func ExamQuestionTypeEQ(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeNEQ applies the NEQ predicate on the "exam_question_type" field.
func ExamQuestionTypeNEQ(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeIn applies the In predicate on the "exam_question_type" field.
func ExamQuestionTypeIn(vs ...uint8) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExamQuestionType), v...))
	})
}

// ExamQuestionTypeNotIn applies the NotIn predicate on the "exam_question_type" field.
func ExamQuestionTypeNotIn(vs ...uint8) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExamQuestionType), v...))
	})
}

// ExamQuestionTypeGT applies the GT predicate on the "exam_question_type" field.
func ExamQuestionTypeGT(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeGTE applies the GTE predicate on the "exam_question_type" field.
func ExamQuestionTypeGTE(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeLT applies the LT predicate on the "exam_question_type" field.
func ExamQuestionTypeLT(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExamQuestionType), v))
	})
}

// ExamQuestionTypeLTE applies the LTE predicate on the "exam_question_type" field.
func ExamQuestionTypeLTE(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExamQuestionType), v))
	})
}

// ExamTypeEQ applies the EQ predicate on the "exam_type" field.
func ExamTypeEQ(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamType), v))
	})
}

// ExamTypeNEQ applies the NEQ predicate on the "exam_type" field.
func ExamTypeNEQ(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExamType), v))
	})
}

// ExamTypeIn applies the In predicate on the "exam_type" field.
func ExamTypeIn(vs ...uint8) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExamType), v...))
	})
}

// ExamTypeNotIn applies the NotIn predicate on the "exam_type" field.
func ExamTypeNotIn(vs ...uint8) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExamType), v...))
	})
}

// ExamTypeGT applies the GT predicate on the "exam_type" field.
func ExamTypeGT(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExamType), v))
	})
}

// ExamTypeGTE applies the GTE predicate on the "exam_type" field.
func ExamTypeGTE(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExamType), v))
	})
}

// ExamTypeLT applies the LT predicate on the "exam_type" field.
func ExamTypeLT(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExamType), v))
	})
}

// ExamTypeLTE applies the LTE predicate on the "exam_type" field.
func ExamTypeLTE(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExamType), v))
	})
}

// DifficultyEQ applies the EQ predicate on the "difficulty" field.
func DifficultyEQ(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDifficulty), v))
	})
}

// DifficultyNEQ applies the NEQ predicate on the "difficulty" field.
func DifficultyNEQ(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDifficulty), v))
	})
}

// DifficultyIn applies the In predicate on the "difficulty" field.
func DifficultyIn(vs ...uint8) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDifficulty), v...))
	})
}

// DifficultyNotIn applies the NotIn predicate on the "difficulty" field.
func DifficultyNotIn(vs ...uint8) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDifficulty), v...))
	})
}

// DifficultyGT applies the GT predicate on the "difficulty" field.
func DifficultyGT(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDifficulty), v))
	})
}

// DifficultyGTE applies the GTE predicate on the "difficulty" field.
func DifficultyGTE(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDifficulty), v))
	})
}

// DifficultyLT applies the LT predicate on the "difficulty" field.
func DifficultyLT(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDifficulty), v))
	})
}

// DifficultyLTE applies the LTE predicate on the "difficulty" field.
func DifficultyLTE(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDifficulty), v))
	})
}

// QuestionCountEQ applies the EQ predicate on the "question_count" field.
func QuestionCountEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountNEQ applies the NEQ predicate on the "question_count" field.
func QuestionCountNEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountIn applies the In predicate on the "question_count" field.
func QuestionCountIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionCount), v...))
	})
}

// QuestionCountNotIn applies the NotIn predicate on the "question_count" field.
func QuestionCountNotIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionCount), v...))
	})
}

// QuestionCountGT applies the GT predicate on the "question_count" field.
func QuestionCountGT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountGTE applies the GTE predicate on the "question_count" field.
func QuestionCountGTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountLT applies the LT predicate on the "question_count" field.
func QuestionCountLT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountLTE applies the LTE predicate on the "question_count" field.
func QuestionCountLTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuestionCount), v))
	})
}

// AnsweredUserCountEQ applies the EQ predicate on the "answered_user_count" field.
func AnsweredUserCountEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnsweredUserCount), v))
	})
}

// AnsweredUserCountNEQ applies the NEQ predicate on the "answered_user_count" field.
func AnsweredUserCountNEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnsweredUserCount), v))
	})
}

// AnsweredUserCountIn applies the In predicate on the "answered_user_count" field.
func AnsweredUserCountIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnsweredUserCount), v...))
	})
}

// AnsweredUserCountNotIn applies the NotIn predicate on the "answered_user_count" field.
func AnsweredUserCountNotIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnsweredUserCount), v...))
	})
}

// AnsweredUserCountGT applies the GT predicate on the "answered_user_count" field.
func AnsweredUserCountGT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnsweredUserCount), v))
	})
}

// AnsweredUserCountGTE applies the GTE predicate on the "answered_user_count" field.
func AnsweredUserCountGTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnsweredUserCount), v))
	})
}

// AnsweredUserCountLT applies the LT predicate on the "answered_user_count" field.
func AnsweredUserCountLT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnsweredUserCount), v))
	})
}

// AnsweredUserCountLTE applies the LTE predicate on the "answered_user_count" field.
func AnsweredUserCountLTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnsweredUserCount), v))
	})
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScore), v))
	})
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScore), v...))
	})
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScore), v...))
	})
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScore), v))
	})
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScore), v))
	})
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScore), v))
	})
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScore), v))
	})
}

// PassScoreEQ applies the EQ predicate on the "pass_score" field.
func PassScoreEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassScore), v))
	})
}

// PassScoreNEQ applies the NEQ predicate on the "pass_score" field.
func PassScoreNEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassScore), v))
	})
}

// PassScoreIn applies the In predicate on the "pass_score" field.
func PassScoreIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassScore), v...))
	})
}

// PassScoreNotIn applies the NotIn predicate on the "pass_score" field.
func PassScoreNotIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassScore), v...))
	})
}

// PassScoreGT applies the GT predicate on the "pass_score" field.
func PassScoreGT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassScore), v))
	})
}

// PassScoreGTE applies the GTE predicate on the "pass_score" field.
func PassScoreGTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassScore), v))
	})
}

// PassScoreLT applies the LT predicate on the "pass_score" field.
func PassScoreLT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassScore), v))
	})
}

// PassScoreLTE applies the LTE predicate on the "pass_score" field.
func PassScoreLTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassScore), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// DurationTypeEQ applies the EQ predicate on the "duration_type" field.
func DurationTypeEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationType), v))
	})
}

// DurationTypeNEQ applies the NEQ predicate on the "duration_type" field.
func DurationTypeNEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDurationType), v))
	})
}

// DurationTypeIn applies the In predicate on the "duration_type" field.
func DurationTypeIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDurationType), v...))
	})
}

// DurationTypeNotIn applies the NotIn predicate on the "duration_type" field.
func DurationTypeNotIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDurationType), v...))
	})
}

// DurationTypeGT applies the GT predicate on the "duration_type" field.
func DurationTypeGT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDurationType), v))
	})
}

// DurationTypeGTE applies the GTE predicate on the "duration_type" field.
func DurationTypeGTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDurationType), v))
	})
}

// DurationTypeLT applies the LT predicate on the "duration_type" field.
func DurationTypeLT(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDurationType), v))
	})
}

// DurationTypeLTE applies the LTE predicate on the "duration_type" field.
func DurationTypeLTE(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDurationType), v))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAt)))
	})
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAt)))
	})
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndAt), v))
	})
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndAt), v...))
	})
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndAt), v...))
	})
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndAt), v))
	})
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndAt), v))
	})
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndAt), v))
	})
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndAt), v))
	})
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndAt)))
	})
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndAt)))
	})
}

// EnableStatusEQ applies the EQ predicate on the "enable_status" field.
func EnableStatusEQ(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableStatus), v))
	})
}

// EnableStatusNEQ applies the NEQ predicate on the "enable_status" field.
func EnableStatusNEQ(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableStatus), v))
	})
}

// EnableStatusIn applies the In predicate on the "enable_status" field.
func EnableStatusIn(vs ...uint8) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnableStatus), v...))
	})
}

// EnableStatusNotIn applies the NotIn predicate on the "enable_status" field.
func EnableStatusNotIn(vs ...uint8) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnableStatus), v...))
	})
}

// EnableStatusGT applies the GT predicate on the "enable_status" field.
func EnableStatusGT(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnableStatus), v))
	})
}

// EnableStatusGTE applies the GTE predicate on the "enable_status" field.
func EnableStatusGTE(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnableStatus), v))
	})
}

// EnableStatusLT applies the LT predicate on the "enable_status" field.
func EnableStatusLT(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnableStatus), v))
	})
}

// EnableStatusLTE applies the LTE predicate on the "enable_status" field.
func EnableStatusLTE(v uint8) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnableStatus), v))
	})
}

// CreatedAdminIDEQ applies the EQ predicate on the "created_admin_id" field.
func CreatedAdminIDEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAdminID), v))
	})
}

// CreatedAdminIDNEQ applies the NEQ predicate on the "created_admin_id" field.
func CreatedAdminIDNEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAdminID), v))
	})
}

// CreatedAdminIDIn applies the In predicate on the "created_admin_id" field.
func CreatedAdminIDIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAdminID), v...))
	})
}

// CreatedAdminIDNotIn applies the NotIn predicate on the "created_admin_id" field.
func CreatedAdminIDNotIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAdminID), v...))
	})
}

// CreatedAdminIDIsNil applies the IsNil predicate on the "created_admin_id" field.
func CreatedAdminIDIsNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAdminID)))
	})
}

// CreatedAdminIDNotNil applies the NotNil predicate on the "created_admin_id" field.
func CreatedAdminIDNotNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAdminID)))
	})
}

// QuestionBankIDEQ applies the EQ predicate on the "question_bank_id" field.
func QuestionBankIDEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionBankID), v))
	})
}

// QuestionBankIDNEQ applies the NEQ predicate on the "question_bank_id" field.
func QuestionBankIDNEQ(v int) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionBankID), v))
	})
}

// QuestionBankIDIn applies the In predicate on the "question_bank_id" field.
func QuestionBankIDIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionBankID), v...))
	})
}

// QuestionBankIDNotIn applies the NotIn predicate on the "question_bank_id" field.
func QuestionBankIDNotIn(vs ...int) predicate.TkExamPaper {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkExamPaper(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionBankID), v...))
	})
}

// QuestionBankIDIsNil applies the IsNil predicate on the "question_bank_id" field.
func QuestionBankIDIsNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuestionBankID)))
	})
}

// QuestionBankIDNotNil applies the NotNil predicate on the "question_bank_id" field.
func QuestionBankIDNotNil() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuestionBankID)))
	})
}

// HasQuestionBank applies the HasEdge predicate on the "question_bank" edge.
func HasQuestionBank() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionBankTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionBankTable, QuestionBankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionBankWith applies the HasEdge predicate on the "question_bank" edge with a given conditions (other predicates).
func HasQuestionBankWith(preds ...predicate.TkQuestionBank) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionBankInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionBankTable, QuestionBankColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmin applies the HasEdge predicate on the "admin" edge.
func HasAdmin() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminWith applies the HasEdge predicate on the "admin" edge with a given conditions (other predicates).
func HasAdminWith(preds ...predicate.Admin) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamPartitions applies the HasEdge predicate on the "exam_partitions" edge.
func HasExamPartitions() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPartitionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamPartitionsTable, ExamPartitionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamPartitionsWith applies the HasEdge predicate on the "exam_partitions" edge with a given conditions (other predicates).
func HasExamPartitionsWith(preds ...predicate.TkExamPaperPartition) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPartitionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamPartitionsTable, ExamPartitionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMakeUserQuestionExam applies the HasEdge predicate on the "make_user_question_exam" edge.
func HasMakeUserQuestionExam() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MakeUserQuestionExamTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MakeUserQuestionExamTable, MakeUserQuestionExamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMakeUserQuestionExamWith applies the HasEdge predicate on the "make_user_question_exam" edge with a given conditions (other predicates).
func HasMakeUserQuestionExamWith(preds ...predicate.MakeUserQuestionRecord) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MakeUserQuestionExamInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MakeUserQuestionExamTable, MakeUserQuestionExamColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserExamPapers applies the HasEdge predicate on the "user_exam_papers" edge.
func HasUserExamPapers() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserExamPapersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserExamPapersTable, UserExamPapersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserExamPapersWith applies the HasEdge predicate on the "user_exam_papers" edge with a given conditions (other predicates).
func HasUserExamPapersWith(preds ...predicate.TkUserExamScoreRecord) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserExamPapersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserExamPapersTable, UserExamPapersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourseExamPapers applies the HasEdge predicate on the "course_exam_papers" edge.
func HasCourseExamPapers() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseExamPapersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseExamPapersTable, CourseExamPapersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseExamPapersWith applies the HasEdge predicate on the "course_exam_papers" edge with a given conditions (other predicates).
func HasCourseExamPapersWith(preds ...predicate.KcSmallCategoryExamPaper) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseExamPapersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseExamPapersTable, CourseExamPapersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamPaperRecords applies the HasEdge predicate on the "exam_paper_records" edge.
func HasExamPaperRecords() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPaperRecordsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamPaperRecordsTable, ExamPaperRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamPaperRecordsWith applies the HasEdge predicate on the "exam_paper_records" edge with a given conditions (other predicates).
func HasExamPaperRecordsWith(preds ...predicate.TkUserQuestionRecord) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExamPaperRecordsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamPaperRecordsTable, ExamPaperRecordsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRandomExam applies the HasEdge predicate on the "user_random_exam" edge.
func HasUserRandomExam() predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserRandomExamTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRandomExamTable, UserRandomExamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRandomExamWith applies the HasEdge predicate on the "user_random_exam" edge with a given conditions (other predicates).
func HasUserRandomExamWith(preds ...predicate.TkUserRandomExamRecode) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserRandomExamInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRandomExamTable, UserRandomExamColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TkExamPaper) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TkExamPaper) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TkExamPaper) predicate.TkExamPaper {
	return predicate.TkExamPaper(func(s *sql.Selector) {
		p(s.Not())
	})
}

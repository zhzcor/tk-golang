// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkknowledgepoint"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionbank"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkKnowledgePointQuery is the builder for querying TkKnowledgePoint entities.
type TkKnowledgePointQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TkKnowledgePoint
	// eager-loading edges.
	withQuestionBank *TkQuestionBankQuery
	withQuestions    *TkQuestionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TkKnowledgePointQuery builder.
func (tkpq *TkKnowledgePointQuery) Where(ps ...predicate.TkKnowledgePoint) *TkKnowledgePointQuery {
	tkpq.predicates = append(tkpq.predicates, ps...)
	return tkpq
}

// Limit adds a limit step to the query.
func (tkpq *TkKnowledgePointQuery) Limit(limit int) *TkKnowledgePointQuery {
	tkpq.limit = &limit
	return tkpq
}

// Offset adds an offset step to the query.
func (tkpq *TkKnowledgePointQuery) Offset(offset int) *TkKnowledgePointQuery {
	tkpq.offset = &offset
	return tkpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tkpq *TkKnowledgePointQuery) Unique(unique bool) *TkKnowledgePointQuery {
	tkpq.unique = &unique
	return tkpq
}

// Order adds an order step to the query.
func (tkpq *TkKnowledgePointQuery) Order(o ...OrderFunc) *TkKnowledgePointQuery {
	tkpq.order = append(tkpq.order, o...)
	return tkpq
}

// QueryQuestionBank chains the current query on the "question_bank" edge.
func (tkpq *TkKnowledgePointQuery) QueryQuestionBank() *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: tkpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tkpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tkpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkknowledgepoint.Table, tkknowledgepoint.FieldID, selector),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkknowledgepoint.QuestionBankTable, tkknowledgepoint.QuestionBankColumn),
		)
		fromU = sqlgraph.SetNeighbors(tkpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestions chains the current query on the "questions" edge.
func (tkpq *TkKnowledgePointQuery) QueryQuestions() *TkQuestionQuery {
	query := &TkQuestionQuery{config: tkpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tkpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tkpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkknowledgepoint.Table, tkknowledgepoint.FieldID, selector),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tkknowledgepoint.QuestionsTable, tkknowledgepoint.QuestionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tkpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TkKnowledgePoint entity from the query.
// Returns a *NotFoundError when no TkKnowledgePoint was found.
func (tkpq *TkKnowledgePointQuery) First(ctx context.Context) (*TkKnowledgePoint, error) {
	nodes, err := tkpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tkknowledgepoint.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tkpq *TkKnowledgePointQuery) FirstX(ctx context.Context) *TkKnowledgePoint {
	node, err := tkpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TkKnowledgePoint ID from the query.
// Returns a *NotFoundError when no TkKnowledgePoint ID was found.
func (tkpq *TkKnowledgePointQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tkpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tkknowledgepoint.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tkpq *TkKnowledgePointQuery) FirstIDX(ctx context.Context) int {
	id, err := tkpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TkKnowledgePoint entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TkKnowledgePoint entity is not found.
// Returns a *NotFoundError when no TkKnowledgePoint entities are found.
func (tkpq *TkKnowledgePointQuery) Only(ctx context.Context) (*TkKnowledgePoint, error) {
	nodes, err := tkpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tkknowledgepoint.Label}
	default:
		return nil, &NotSingularError{tkknowledgepoint.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tkpq *TkKnowledgePointQuery) OnlyX(ctx context.Context) *TkKnowledgePoint {
	node, err := tkpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TkKnowledgePoint ID in the query.
// Returns a *NotSingularError when exactly one TkKnowledgePoint ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tkpq *TkKnowledgePointQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tkpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tkknowledgepoint.Label}
	default:
		err = &NotSingularError{tkknowledgepoint.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tkpq *TkKnowledgePointQuery) OnlyIDX(ctx context.Context) int {
	id, err := tkpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TkKnowledgePoints.
func (tkpq *TkKnowledgePointQuery) All(ctx context.Context) ([]*TkKnowledgePoint, error) {
	if err := tkpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tkpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tkpq *TkKnowledgePointQuery) AllX(ctx context.Context) []*TkKnowledgePoint {
	nodes, err := tkpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TkKnowledgePoint IDs.
func (tkpq *TkKnowledgePointQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tkpq.Select(tkknowledgepoint.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tkpq *TkKnowledgePointQuery) IDsX(ctx context.Context) []int {
	ids, err := tkpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tkpq *TkKnowledgePointQuery) Count(ctx context.Context) (int, error) {
	if err := tkpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tkpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tkpq *TkKnowledgePointQuery) CountX(ctx context.Context) int {
	count, err := tkpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tkpq *TkKnowledgePointQuery) Exist(ctx context.Context) (bool, error) {
	if err := tkpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tkpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tkpq *TkKnowledgePointQuery) ExistX(ctx context.Context) bool {
	exist, err := tkpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TkKnowledgePointQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tkpq *TkKnowledgePointQuery) Clone() *TkKnowledgePointQuery {
	if tkpq == nil {
		return nil
	}
	return &TkKnowledgePointQuery{
		config:           tkpq.config,
		limit:            tkpq.limit,
		offset:           tkpq.offset,
		order:            append([]OrderFunc{}, tkpq.order...),
		predicates:       append([]predicate.TkKnowledgePoint{}, tkpq.predicates...),
		withQuestionBank: tkpq.withQuestionBank.Clone(),
		withQuestions:    tkpq.withQuestions.Clone(),
		// clone intermediate query.
		sql:  tkpq.sql.Clone(),
		path: tkpq.path,
	}
}

// WithQuestionBank tells the query-builder to eager-load the nodes that are connected to
// the "question_bank" edge. The optional arguments are used to configure the query builder of the edge.
func (tkpq *TkKnowledgePointQuery) WithQuestionBank(opts ...func(*TkQuestionBankQuery)) *TkKnowledgePointQuery {
	query := &TkQuestionBankQuery{config: tkpq.config}
	for _, opt := range opts {
		opt(query)
	}
	tkpq.withQuestionBank = query
	return tkpq
}

// WithQuestions tells the query-builder to eager-load the nodes that are connected to
// the "questions" edge. The optional arguments are used to configure the query builder of the edge.
func (tkpq *TkKnowledgePointQuery) WithQuestions(opts ...func(*TkQuestionQuery)) *TkKnowledgePointQuery {
	query := &TkQuestionQuery{config: tkpq.config}
	for _, opt := range opts {
		opt(query)
	}
	tkpq.withQuestions = query
	return tkpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TkKnowledgePoint.Query().
//		GroupBy(tkknowledgepoint.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tkpq *TkKnowledgePointQuery) GroupBy(field string, fields ...string) *TkKnowledgePointGroupBy {
	group := &TkKnowledgePointGroupBy{config: tkpq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tkpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tkpq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.TkKnowledgePoint.Query().
//		Select(tkknowledgepoint.FieldUUID).
//		Scan(ctx, &v)
//
func (tkpq *TkKnowledgePointQuery) Select(field string, fields ...string) *TkKnowledgePointSelect {
	tkpq.fields = append([]string{field}, fields...)
	return &TkKnowledgePointSelect{TkKnowledgePointQuery: tkpq}
}

func (tkpq *TkKnowledgePointQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tkpq.fields {
		if !tkknowledgepoint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tkpq.path != nil {
		prev, err := tkpq.path(ctx)
		if err != nil {
			return err
		}
		tkpq.sql = prev
	}
	return nil
}

func (tkpq *TkKnowledgePointQuery) sqlAll(ctx context.Context) ([]*TkKnowledgePoint, error) {
	var (
		nodes       = []*TkKnowledgePoint{}
		_spec       = tkpq.querySpec()
		loadedTypes = [2]bool{
			tkpq.withQuestionBank != nil,
			tkpq.withQuestions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TkKnowledgePoint{config: tkpq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tkpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tkpq.withQuestionBank; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkKnowledgePoint)
		for i := range nodes {
			fk := nodes[i].QuestionBankID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tkquestionbank.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.QuestionBank = n
			}
		}
	}

	if query := tkpq.withQuestions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*TkKnowledgePoint, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Questions = []*TkQuestion{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*TkKnowledgePoint)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   tkknowledgepoint.QuestionsTable,
				Columns: tkknowledgepoint.QuestionsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(tkknowledgepoint.QuestionsPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, tkpq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "questions": %w`, err)
		}
		query.Where(tkquestion.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "questions" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Questions = append(nodes[i].Edges.Questions, n)
			}
		}
	}

	return nodes, nil
}

func (tkpq *TkKnowledgePointQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tkpq.querySpec()
	return sqlgraph.CountNodes(ctx, tkpq.driver, _spec)
}

func (tkpq *TkKnowledgePointQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tkpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tkpq *TkKnowledgePointQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkknowledgepoint.Table,
			Columns: tkknowledgepoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkknowledgepoint.FieldID,
			},
		},
		From:   tkpq.sql,
		Unique: true,
	}
	if unique := tkpq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tkpq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkknowledgepoint.FieldID)
		for i := range fields {
			if fields[i] != tkknowledgepoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tkpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tkpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tkpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tkpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tkpq *TkKnowledgePointQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tkpq.driver.Dialect())
	t1 := builder.Table(tkknowledgepoint.Table)
	selector := builder.Select(t1.Columns(tkknowledgepoint.Columns...)...).From(t1)
	if tkpq.sql != nil {
		selector = tkpq.sql
		selector.Select(selector.Columns(tkknowledgepoint.Columns...)...)
	}
	for _, p := range tkpq.predicates {
		p(selector)
	}
	for _, p := range tkpq.order {
		p(selector)
	}
	if offset := tkpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tkpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TkKnowledgePointGroupBy is the group-by builder for TkKnowledgePoint entities.
type TkKnowledgePointGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tkpgb *TkKnowledgePointGroupBy) Aggregate(fns ...AggregateFunc) *TkKnowledgePointGroupBy {
	tkpgb.fns = append(tkpgb.fns, fns...)
	return tkpgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tkpgb *TkKnowledgePointGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tkpgb.path(ctx)
	if err != nil {
		return err
	}
	tkpgb.sql = query
	return tkpgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tkpgb *TkKnowledgePointGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tkpgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tkpgb *TkKnowledgePointGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tkpgb.fields) > 1 {
		return nil, errors.New("ent: TkKnowledgePointGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tkpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tkpgb *TkKnowledgePointGroupBy) StringsX(ctx context.Context) []string {
	v, err := tkpgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tkpgb *TkKnowledgePointGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tkpgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkknowledgepoint.Label}
	default:
		err = fmt.Errorf("ent: TkKnowledgePointGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tkpgb *TkKnowledgePointGroupBy) StringX(ctx context.Context) string {
	v, err := tkpgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tkpgb *TkKnowledgePointGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tkpgb.fields) > 1 {
		return nil, errors.New("ent: TkKnowledgePointGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tkpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tkpgb *TkKnowledgePointGroupBy) IntsX(ctx context.Context) []int {
	v, err := tkpgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tkpgb *TkKnowledgePointGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tkpgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkknowledgepoint.Label}
	default:
		err = fmt.Errorf("ent: TkKnowledgePointGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tkpgb *TkKnowledgePointGroupBy) IntX(ctx context.Context) int {
	v, err := tkpgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tkpgb *TkKnowledgePointGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tkpgb.fields) > 1 {
		return nil, errors.New("ent: TkKnowledgePointGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tkpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tkpgb *TkKnowledgePointGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tkpgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tkpgb *TkKnowledgePointGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tkpgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkknowledgepoint.Label}
	default:
		err = fmt.Errorf("ent: TkKnowledgePointGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tkpgb *TkKnowledgePointGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tkpgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tkpgb *TkKnowledgePointGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tkpgb.fields) > 1 {
		return nil, errors.New("ent: TkKnowledgePointGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tkpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tkpgb *TkKnowledgePointGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tkpgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tkpgb *TkKnowledgePointGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tkpgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkknowledgepoint.Label}
	default:
		err = fmt.Errorf("ent: TkKnowledgePointGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tkpgb *TkKnowledgePointGroupBy) BoolX(ctx context.Context) bool {
	v, err := tkpgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tkpgb *TkKnowledgePointGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tkpgb.fields {
		if !tkknowledgepoint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tkpgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tkpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tkpgb *TkKnowledgePointGroupBy) sqlQuery() *sql.Selector {
	selector := tkpgb.sql
	columns := make([]string, 0, len(tkpgb.fields)+len(tkpgb.fns))
	columns = append(columns, tkpgb.fields...)
	for _, fn := range tkpgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(tkpgb.fields...)
}

// TkKnowledgePointSelect is the builder for selecting fields of TkKnowledgePoint entities.
type TkKnowledgePointSelect struct {
	*TkKnowledgePointQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tkps *TkKnowledgePointSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tkps.prepareQuery(ctx); err != nil {
		return err
	}
	tkps.sql = tkps.TkKnowledgePointQuery.sqlQuery(ctx)
	return tkps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tkps *TkKnowledgePointSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tkps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tkps *TkKnowledgePointSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tkps.fields) > 1 {
		return nil, errors.New("ent: TkKnowledgePointSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tkps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tkps *TkKnowledgePointSelect) StringsX(ctx context.Context) []string {
	v, err := tkps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tkps *TkKnowledgePointSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tkps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkknowledgepoint.Label}
	default:
		err = fmt.Errorf("ent: TkKnowledgePointSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tkps *TkKnowledgePointSelect) StringX(ctx context.Context) string {
	v, err := tkps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tkps *TkKnowledgePointSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tkps.fields) > 1 {
		return nil, errors.New("ent: TkKnowledgePointSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tkps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tkps *TkKnowledgePointSelect) IntsX(ctx context.Context) []int {
	v, err := tkps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tkps *TkKnowledgePointSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tkps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkknowledgepoint.Label}
	default:
		err = fmt.Errorf("ent: TkKnowledgePointSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tkps *TkKnowledgePointSelect) IntX(ctx context.Context) int {
	v, err := tkps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tkps *TkKnowledgePointSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tkps.fields) > 1 {
		return nil, errors.New("ent: TkKnowledgePointSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tkps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tkps *TkKnowledgePointSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tkps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tkps *TkKnowledgePointSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tkps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkknowledgepoint.Label}
	default:
		err = fmt.Errorf("ent: TkKnowledgePointSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tkps *TkKnowledgePointSelect) Float64X(ctx context.Context) float64 {
	v, err := tkps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tkps *TkKnowledgePointSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tkps.fields) > 1 {
		return nil, errors.New("ent: TkKnowledgePointSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tkps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tkps *TkKnowledgePointSelect) BoolsX(ctx context.Context) []bool {
	v, err := tkps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tkps *TkKnowledgePointSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tkps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkknowledgepoint.Label}
	default:
		err = fmt.Errorf("ent: TkKnowledgePointSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tkps *TkKnowledgePointSelect) BoolX(ctx context.Context) bool {
	v, err := tkps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tkps *TkKnowledgePointSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tkps.sqlQuery().Query()
	if err := tkps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tkps *TkKnowledgePointSelect) sqlQuery() sql.Querier {
	selector := tkps.sql
	selector.Select(selector.Columns(tkps.fields...)...)
	return selector
}

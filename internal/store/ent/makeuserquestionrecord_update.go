// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/makeuserquestionrecord"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/tkexampaper"
	"gserver/internal/store/ent/tksection"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MakeUserQuestionRecordUpdate is the builder for updating MakeUserQuestionRecord entities.
type MakeUserQuestionRecordUpdate struct {
	config
	hooks    []Hook
	mutation *MakeUserQuestionRecordMutation
}

// Where adds a new predicate for the MakeUserQuestionRecordUpdate builder.
func (muqru *MakeUserQuestionRecordUpdate) Where(ps ...predicate.MakeUserQuestionRecord) *MakeUserQuestionRecordUpdate {
	muqru.mutation.predicates = append(muqru.mutation.predicates, ps...)
	return muqru
}

// SetUUID sets the "uuid" field.
func (muqru *MakeUserQuestionRecordUpdate) SetUUID(s string) *MakeUserQuestionRecordUpdate {
	muqru.mutation.SetUUID(s)
	return muqru
}

// SetUpdatedAt sets the "updated_at" field.
func (muqru *MakeUserQuestionRecordUpdate) SetUpdatedAt(t time.Time) *MakeUserQuestionRecordUpdate {
	muqru.mutation.SetUpdatedAt(t)
	return muqru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muqru *MakeUserQuestionRecordUpdate) ClearUpdatedAt() *MakeUserQuestionRecordUpdate {
	muqru.mutation.ClearUpdatedAt()
	return muqru
}

// SetDeletedAt sets the "deleted_at" field.
func (muqru *MakeUserQuestionRecordUpdate) SetDeletedAt(t time.Time) *MakeUserQuestionRecordUpdate {
	muqru.mutation.SetDeletedAt(t)
	return muqru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muqru *MakeUserQuestionRecordUpdate) SetNillableDeletedAt(t *time.Time) *MakeUserQuestionRecordUpdate {
	if t != nil {
		muqru.SetDeletedAt(*t)
	}
	return muqru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muqru *MakeUserQuestionRecordUpdate) ClearDeletedAt() *MakeUserQuestionRecordUpdate {
	muqru.mutation.ClearDeletedAt()
	return muqru
}

// SetUserID sets the "user_id" field.
func (muqru *MakeUserQuestionRecordUpdate) SetUserID(i int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.ResetUserID()
	muqru.mutation.SetUserID(i)
	return muqru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muqru *MakeUserQuestionRecordUpdate) SetNillableUserID(i *int) *MakeUserQuestionRecordUpdate {
	if i != nil {
		muqru.SetUserID(*i)
	}
	return muqru
}

// AddUserID adds i to the "user_id" field.
func (muqru *MakeUserQuestionRecordUpdate) AddUserID(i int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.AddUserID(i)
	return muqru
}

// ClearUserID clears the value of the "user_id" field.
func (muqru *MakeUserQuestionRecordUpdate) ClearUserID() *MakeUserQuestionRecordUpdate {
	muqru.mutation.ClearUserID()
	return muqru
}

// SetExamID sets the "exam_id" field.
func (muqru *MakeUserQuestionRecordUpdate) SetExamID(i int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.ResetExamID()
	muqru.mutation.SetExamID(i)
	return muqru
}

// SetNillableExamID sets the "exam_id" field if the given value is not nil.
func (muqru *MakeUserQuestionRecordUpdate) SetNillableExamID(i *int) *MakeUserQuestionRecordUpdate {
	if i != nil {
		muqru.SetExamID(*i)
	}
	return muqru
}

// ClearExamID clears the value of the "exam_id" field.
func (muqru *MakeUserQuestionRecordUpdate) ClearExamID() *MakeUserQuestionRecordUpdate {
	muqru.mutation.ClearExamID()
	return muqru
}

// SetSecID sets the "sec_id" field.
func (muqru *MakeUserQuestionRecordUpdate) SetSecID(i int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.ResetSecID()
	muqru.mutation.SetSecID(i)
	return muqru
}

// SetNillableSecID sets the "sec_id" field if the given value is not nil.
func (muqru *MakeUserQuestionRecordUpdate) SetNillableSecID(i *int) *MakeUserQuestionRecordUpdate {
	if i != nil {
		muqru.SetSecID(*i)
	}
	return muqru
}

// ClearSecID clears the value of the "sec_id" field.
func (muqru *MakeUserQuestionRecordUpdate) ClearSecID() *MakeUserQuestionRecordUpdate {
	muqru.mutation.ClearSecID()
	return muqru
}

// SetQuestionBankID sets the "question_bank_id" field.
func (muqru *MakeUserQuestionRecordUpdate) SetQuestionBankID(i int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.ResetQuestionBankID()
	muqru.mutation.SetQuestionBankID(i)
	return muqru
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (muqru *MakeUserQuestionRecordUpdate) SetNillableQuestionBankID(i *int) *MakeUserQuestionRecordUpdate {
	if i != nil {
		muqru.SetQuestionBankID(*i)
	}
	return muqru
}

// AddQuestionBankID adds i to the "question_bank_id" field.
func (muqru *MakeUserQuestionRecordUpdate) AddQuestionBankID(i int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.AddQuestionBankID(i)
	return muqru
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (muqru *MakeUserQuestionRecordUpdate) ClearQuestionBankID() *MakeUserQuestionRecordUpdate {
	muqru.mutation.ClearQuestionBankID()
	return muqru
}

// SetExamQuestionType sets the "exam_question_type" field.
func (muqru *MakeUserQuestionRecordUpdate) SetExamQuestionType(i int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.ResetExamQuestionType()
	muqru.mutation.SetExamQuestionType(i)
	return muqru
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (muqru *MakeUserQuestionRecordUpdate) SetNillableExamQuestionType(i *int) *MakeUserQuestionRecordUpdate {
	if i != nil {
		muqru.SetExamQuestionType(*i)
	}
	return muqru
}

// AddExamQuestionType adds i to the "exam_question_type" field.
func (muqru *MakeUserQuestionRecordUpdate) AddExamQuestionType(i int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.AddExamQuestionType(i)
	return muqru
}

// ClearExamQuestionType clears the value of the "exam_question_type" field.
func (muqru *MakeUserQuestionRecordUpdate) ClearExamQuestionType() *MakeUserQuestionRecordUpdate {
	muqru.mutation.ClearExamQuestionType()
	return muqru
}

// SetSectionID sets the "section" edge to the TkSection entity by ID.
func (muqru *MakeUserQuestionRecordUpdate) SetSectionID(id int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.SetSectionID(id)
	return muqru
}

// SetNillableSectionID sets the "section" edge to the TkSection entity by ID if the given value is not nil.
func (muqru *MakeUserQuestionRecordUpdate) SetNillableSectionID(id *int) *MakeUserQuestionRecordUpdate {
	if id != nil {
		muqru = muqru.SetSectionID(*id)
	}
	return muqru
}

// SetSection sets the "section" edge to the TkSection entity.
func (muqru *MakeUserQuestionRecordUpdate) SetSection(t *TkSection) *MakeUserQuestionRecordUpdate {
	return muqru.SetSectionID(t.ID)
}

// SetExamPaperID sets the "exam_paper" edge to the TkExamPaper entity by ID.
func (muqru *MakeUserQuestionRecordUpdate) SetExamPaperID(id int) *MakeUserQuestionRecordUpdate {
	muqru.mutation.SetExamPaperID(id)
	return muqru
}

// SetNillableExamPaperID sets the "exam_paper" edge to the TkExamPaper entity by ID if the given value is not nil.
func (muqru *MakeUserQuestionRecordUpdate) SetNillableExamPaperID(id *int) *MakeUserQuestionRecordUpdate {
	if id != nil {
		muqru = muqru.SetExamPaperID(*id)
	}
	return muqru
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (muqru *MakeUserQuestionRecordUpdate) SetExamPaper(t *TkExamPaper) *MakeUserQuestionRecordUpdate {
	return muqru.SetExamPaperID(t.ID)
}

// Mutation returns the MakeUserQuestionRecordMutation object of the builder.
func (muqru *MakeUserQuestionRecordUpdate) Mutation() *MakeUserQuestionRecordMutation {
	return muqru.mutation
}

// ClearSection clears the "section" edge to the TkSection entity.
func (muqru *MakeUserQuestionRecordUpdate) ClearSection() *MakeUserQuestionRecordUpdate {
	muqru.mutation.ClearSection()
	return muqru
}

// ClearExamPaper clears the "exam_paper" edge to the TkExamPaper entity.
func (muqru *MakeUserQuestionRecordUpdate) ClearExamPaper() *MakeUserQuestionRecordUpdate {
	muqru.mutation.ClearExamPaper()
	return muqru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (muqru *MakeUserQuestionRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	muqru.defaults()
	if len(muqru.hooks) == 0 {
		affected, err = muqru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MakeUserQuestionRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muqru.mutation = mutation
			affected, err = muqru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(muqru.hooks) - 1; i >= 0; i-- {
			mut = muqru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muqru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (muqru *MakeUserQuestionRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := muqru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (muqru *MakeUserQuestionRecordUpdate) Exec(ctx context.Context) error {
	_, err := muqru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muqru *MakeUserQuestionRecordUpdate) ExecX(ctx context.Context) {
	if err := muqru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muqru *MakeUserQuestionRecordUpdate) defaults() {
	if _, ok := muqru.mutation.UpdatedAt(); !ok && !muqru.mutation.UpdatedAtCleared() {
		v := makeuserquestionrecord.UpdateDefaultUpdatedAt()
		muqru.mutation.SetUpdatedAt(v)
	}
}

func (muqru *MakeUserQuestionRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   makeuserquestionrecord.Table,
			Columns: makeuserquestionrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: makeuserquestionrecord.FieldID,
			},
		},
	}
	if ps := muqru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muqru.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: makeuserquestionrecord.FieldUUID,
		})
	}
	if muqru.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: makeuserquestionrecord.FieldCreatedAt,
		})
	}
	if value, ok := muqru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: makeuserquestionrecord.FieldUpdatedAt,
		})
	}
	if muqru.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: makeuserquestionrecord.FieldUpdatedAt,
		})
	}
	if value, ok := muqru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: makeuserquestionrecord.FieldDeletedAt,
		})
	}
	if muqru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: makeuserquestionrecord.FieldDeletedAt,
		})
	}
	if value, ok := muqru.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldUserID,
		})
	}
	if value, ok := muqru.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldUserID,
		})
	}
	if muqru.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: makeuserquestionrecord.FieldUserID,
		})
	}
	if value, ok := muqru.mutation.QuestionBankID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldQuestionBankID,
		})
	}
	if value, ok := muqru.mutation.AddedQuestionBankID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldQuestionBankID,
		})
	}
	if muqru.mutation.QuestionBankIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: makeuserquestionrecord.FieldQuestionBankID,
		})
	}
	if value, ok := muqru.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldExamQuestionType,
		})
	}
	if value, ok := muqru.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldExamQuestionType,
		})
	}
	if muqru.mutation.ExamQuestionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: makeuserquestionrecord.FieldExamQuestionType,
		})
	}
	if muqru.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.SectionTable,
			Columns: []string{makeuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muqru.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.SectionTable,
			Columns: []string{makeuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muqru.mutation.ExamPaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.ExamPaperTable,
			Columns: []string{makeuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muqru.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.ExamPaperTable,
			Columns: []string{makeuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, muqru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{makeuserquestionrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MakeUserQuestionRecordUpdateOne is the builder for updating a single MakeUserQuestionRecord entity.
type MakeUserQuestionRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MakeUserQuestionRecordMutation
}

// SetUUID sets the "uuid" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetUUID(s string) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.SetUUID(s)
	return muqruo
}

// SetUpdatedAt sets the "updated_at" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetUpdatedAt(t time.Time) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.SetUpdatedAt(t)
	return muqruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) ClearUpdatedAt() *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ClearUpdatedAt()
	return muqruo
}

// SetDeletedAt sets the "deleted_at" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetDeletedAt(t time.Time) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.SetDeletedAt(t)
	return muqruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *MakeUserQuestionRecordUpdateOne {
	if t != nil {
		muqruo.SetDeletedAt(*t)
	}
	return muqruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) ClearDeletedAt() *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ClearDeletedAt()
	return muqruo
}

// SetUserID sets the "user_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetUserID(i int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ResetUserID()
	muqruo.mutation.SetUserID(i)
	return muqruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetNillableUserID(i *int) *MakeUserQuestionRecordUpdateOne {
	if i != nil {
		muqruo.SetUserID(*i)
	}
	return muqruo
}

// AddUserID adds i to the "user_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) AddUserID(i int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.AddUserID(i)
	return muqruo
}

// ClearUserID clears the value of the "user_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) ClearUserID() *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ClearUserID()
	return muqruo
}

// SetExamID sets the "exam_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetExamID(i int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ResetExamID()
	muqruo.mutation.SetExamID(i)
	return muqruo
}

// SetNillableExamID sets the "exam_id" field if the given value is not nil.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetNillableExamID(i *int) *MakeUserQuestionRecordUpdateOne {
	if i != nil {
		muqruo.SetExamID(*i)
	}
	return muqruo
}

// ClearExamID clears the value of the "exam_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) ClearExamID() *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ClearExamID()
	return muqruo
}

// SetSecID sets the "sec_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetSecID(i int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ResetSecID()
	muqruo.mutation.SetSecID(i)
	return muqruo
}

// SetNillableSecID sets the "sec_id" field if the given value is not nil.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetNillableSecID(i *int) *MakeUserQuestionRecordUpdateOne {
	if i != nil {
		muqruo.SetSecID(*i)
	}
	return muqruo
}

// ClearSecID clears the value of the "sec_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) ClearSecID() *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ClearSecID()
	return muqruo
}

// SetQuestionBankID sets the "question_bank_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetQuestionBankID(i int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ResetQuestionBankID()
	muqruo.mutation.SetQuestionBankID(i)
	return muqruo
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetNillableQuestionBankID(i *int) *MakeUserQuestionRecordUpdateOne {
	if i != nil {
		muqruo.SetQuestionBankID(*i)
	}
	return muqruo
}

// AddQuestionBankID adds i to the "question_bank_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) AddQuestionBankID(i int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.AddQuestionBankID(i)
	return muqruo
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) ClearQuestionBankID() *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ClearQuestionBankID()
	return muqruo
}

// SetExamQuestionType sets the "exam_question_type" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetExamQuestionType(i int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ResetExamQuestionType()
	muqruo.mutation.SetExamQuestionType(i)
	return muqruo
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetNillableExamQuestionType(i *int) *MakeUserQuestionRecordUpdateOne {
	if i != nil {
		muqruo.SetExamQuestionType(*i)
	}
	return muqruo
}

// AddExamQuestionType adds i to the "exam_question_type" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) AddExamQuestionType(i int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.AddExamQuestionType(i)
	return muqruo
}

// ClearExamQuestionType clears the value of the "exam_question_type" field.
func (muqruo *MakeUserQuestionRecordUpdateOne) ClearExamQuestionType() *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ClearExamQuestionType()
	return muqruo
}

// SetSectionID sets the "section" edge to the TkSection entity by ID.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetSectionID(id int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.SetSectionID(id)
	return muqruo
}

// SetNillableSectionID sets the "section" edge to the TkSection entity by ID if the given value is not nil.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetNillableSectionID(id *int) *MakeUserQuestionRecordUpdateOne {
	if id != nil {
		muqruo = muqruo.SetSectionID(*id)
	}
	return muqruo
}

// SetSection sets the "section" edge to the TkSection entity.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetSection(t *TkSection) *MakeUserQuestionRecordUpdateOne {
	return muqruo.SetSectionID(t.ID)
}

// SetExamPaperID sets the "exam_paper" edge to the TkExamPaper entity by ID.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetExamPaperID(id int) *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.SetExamPaperID(id)
	return muqruo
}

// SetNillableExamPaperID sets the "exam_paper" edge to the TkExamPaper entity by ID if the given value is not nil.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetNillableExamPaperID(id *int) *MakeUserQuestionRecordUpdateOne {
	if id != nil {
		muqruo = muqruo.SetExamPaperID(*id)
	}
	return muqruo
}

// SetExamPaper sets the "exam_paper" edge to the TkExamPaper entity.
func (muqruo *MakeUserQuestionRecordUpdateOne) SetExamPaper(t *TkExamPaper) *MakeUserQuestionRecordUpdateOne {
	return muqruo.SetExamPaperID(t.ID)
}

// Mutation returns the MakeUserQuestionRecordMutation object of the builder.
func (muqruo *MakeUserQuestionRecordUpdateOne) Mutation() *MakeUserQuestionRecordMutation {
	return muqruo.mutation
}

// ClearSection clears the "section" edge to the TkSection entity.
func (muqruo *MakeUserQuestionRecordUpdateOne) ClearSection() *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ClearSection()
	return muqruo
}

// ClearExamPaper clears the "exam_paper" edge to the TkExamPaper entity.
func (muqruo *MakeUserQuestionRecordUpdateOne) ClearExamPaper() *MakeUserQuestionRecordUpdateOne {
	muqruo.mutation.ClearExamPaper()
	return muqruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muqruo *MakeUserQuestionRecordUpdateOne) Select(field string, fields ...string) *MakeUserQuestionRecordUpdateOne {
	muqruo.fields = append([]string{field}, fields...)
	return muqruo
}

// Save executes the query and returns the updated MakeUserQuestionRecord entity.
func (muqruo *MakeUserQuestionRecordUpdateOne) Save(ctx context.Context) (*MakeUserQuestionRecord, error) {
	var (
		err  error
		node *MakeUserQuestionRecord
	)
	muqruo.defaults()
	if len(muqruo.hooks) == 0 {
		node, err = muqruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MakeUserQuestionRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muqruo.mutation = mutation
			node, err = muqruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muqruo.hooks) - 1; i >= 0; i-- {
			mut = muqruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muqruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muqruo *MakeUserQuestionRecordUpdateOne) SaveX(ctx context.Context) *MakeUserQuestionRecord {
	node, err := muqruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muqruo *MakeUserQuestionRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := muqruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muqruo *MakeUserQuestionRecordUpdateOne) ExecX(ctx context.Context) {
	if err := muqruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muqruo *MakeUserQuestionRecordUpdateOne) defaults() {
	if _, ok := muqruo.mutation.UpdatedAt(); !ok && !muqruo.mutation.UpdatedAtCleared() {
		v := makeuserquestionrecord.UpdateDefaultUpdatedAt()
		muqruo.mutation.SetUpdatedAt(v)
	}
}

func (muqruo *MakeUserQuestionRecordUpdateOne) sqlSave(ctx context.Context) (_node *MakeUserQuestionRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   makeuserquestionrecord.Table,
			Columns: makeuserquestionrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: makeuserquestionrecord.FieldID,
			},
		},
	}
	id, ok := muqruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MakeUserQuestionRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := muqruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, makeuserquestionrecord.FieldID)
		for _, f := range fields {
			if !makeuserquestionrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != makeuserquestionrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muqruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muqruo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: makeuserquestionrecord.FieldUUID,
		})
	}
	if muqruo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: makeuserquestionrecord.FieldCreatedAt,
		})
	}
	if value, ok := muqruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: makeuserquestionrecord.FieldUpdatedAt,
		})
	}
	if muqruo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: makeuserquestionrecord.FieldUpdatedAt,
		})
	}
	if value, ok := muqruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: makeuserquestionrecord.FieldDeletedAt,
		})
	}
	if muqruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: makeuserquestionrecord.FieldDeletedAt,
		})
	}
	if value, ok := muqruo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldUserID,
		})
	}
	if value, ok := muqruo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldUserID,
		})
	}
	if muqruo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: makeuserquestionrecord.FieldUserID,
		})
	}
	if value, ok := muqruo.mutation.QuestionBankID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldQuestionBankID,
		})
	}
	if value, ok := muqruo.mutation.AddedQuestionBankID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldQuestionBankID,
		})
	}
	if muqruo.mutation.QuestionBankIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: makeuserquestionrecord.FieldQuestionBankID,
		})
	}
	if value, ok := muqruo.mutation.ExamQuestionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldExamQuestionType,
		})
	}
	if value, ok := muqruo.mutation.AddedExamQuestionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: makeuserquestionrecord.FieldExamQuestionType,
		})
	}
	if muqruo.mutation.ExamQuestionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: makeuserquestionrecord.FieldExamQuestionType,
		})
	}
	if muqruo.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.SectionTable,
			Columns: []string{makeuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muqruo.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.SectionTable,
			Columns: []string{makeuserquestionrecord.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muqruo.mutation.ExamPaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.ExamPaperTable,
			Columns: []string{makeuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muqruo.mutation.ExamPaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   makeuserquestionrecord.ExamPaperTable,
			Columns: []string{makeuserquestionrecord.ExamPaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MakeUserQuestionRecord{config: muqruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muqruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{makeuserquestionrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"tkserver/internal/store/ent/kccoursevideo"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseVideoUpdate is the builder for updating KcCourseVideo entities.
type KcCourseVideoUpdate struct {
	config
	hooks    []Hook
	mutation *KcCourseVideoMutation
}

// Where adds a new predicate for the KcCourseVideoUpdate builder.
func (kcvu *KcCourseVideoUpdate) Where(ps ...predicate.KcCourseVideo) *KcCourseVideoUpdate {
	kcvu.mutation.predicates = append(kcvu.mutation.predicates, ps...)
	return kcvu
}

// SetVideoTitle sets the "video_title" field.
func (kcvu *KcCourseVideoUpdate) SetVideoTitle(s string) *KcCourseVideoUpdate {
	kcvu.mutation.SetVideoTitle(s)
	return kcvu
}

// SetNillableVideoTitle sets the "video_title" field if the given value is not nil.
func (kcvu *KcCourseVideoUpdate) SetNillableVideoTitle(s *string) *KcCourseVideoUpdate {
	if s != nil {
		kcvu.SetVideoTitle(*s)
	}
	return kcvu
}

// SetFileType sets the "file_type" field.
func (kcvu *KcCourseVideoUpdate) SetFileType(i int8) *KcCourseVideoUpdate {
	kcvu.mutation.ResetFileType()
	kcvu.mutation.SetFileType(i)
	return kcvu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (kcvu *KcCourseVideoUpdate) SetNillableFileType(i *int8) *KcCourseVideoUpdate {
	if i != nil {
		kcvu.SetFileType(*i)
	}
	return kcvu
}

// AddFileType adds i to the "file_type" field.
func (kcvu *KcCourseVideoUpdate) AddFileType(i int8) *KcCourseVideoUpdate {
	kcvu.mutation.AddFileType(i)
	return kcvu
}

// SetFilePath sets the "file_path" field.
func (kcvu *KcCourseVideoUpdate) SetFilePath(s string) *KcCourseVideoUpdate {
	kcvu.mutation.SetFilePath(s)
	return kcvu
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (kcvu *KcCourseVideoUpdate) SetNillableFilePath(s *string) *KcCourseVideoUpdate {
	if s != nil {
		kcvu.SetFilePath(*s)
	}
	return kcvu
}

// SetSubtitlePath sets the "subtitle_path" field.
func (kcvu *KcCourseVideoUpdate) SetSubtitlePath(s string) *KcCourseVideoUpdate {
	kcvu.mutation.SetSubtitlePath(s)
	return kcvu
}

// SetNillableSubtitlePath sets the "subtitle_path" field if the given value is not nil.
func (kcvu *KcCourseVideoUpdate) SetNillableSubtitlePath(s *string) *KcCourseVideoUpdate {
	if s != nil {
		kcvu.SetSubtitlePath(*s)
	}
	return kcvu
}

// SetVideoTime sets the "video_time" field.
func (kcvu *KcCourseVideoUpdate) SetVideoTime(s string) *KcCourseVideoUpdate {
	kcvu.mutation.SetVideoTime(s)
	return kcvu
}

// SetNillableVideoTime sets the "video_time" field if the given value is not nil.
func (kcvu *KcCourseVideoUpdate) SetNillableVideoTime(s *string) *KcCourseVideoUpdate {
	if s != nil {
		kcvu.SetVideoTime(*s)
	}
	return kcvu
}

// Mutation returns the KcCourseVideoMutation object of the builder.
func (kcvu *KcCourseVideoUpdate) Mutation() *KcCourseVideoMutation {
	return kcvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcvu *KcCourseVideoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(kcvu.hooks) == 0 {
		affected, err = kcvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseVideoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcvu.mutation = mutation
			affected, err = kcvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcvu.hooks) - 1; i >= 0; i-- {
			mut = kcvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcvu *KcCourseVideoUpdate) SaveX(ctx context.Context) int {
	affected, err := kcvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcvu *KcCourseVideoUpdate) Exec(ctx context.Context) error {
	_, err := kcvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcvu *KcCourseVideoUpdate) ExecX(ctx context.Context) {
	if err := kcvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kcvu *KcCourseVideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursevideo.Table,
			Columns: kccoursevideo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursevideo.FieldID,
			},
		},
	}
	if ps := kcvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcvu.mutation.VideoTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursevideo.FieldVideoTitle,
		})
	}
	if value, ok := kcvu.mutation.FileType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: kccoursevideo.FieldFileType,
		})
	}
	if value, ok := kcvu.mutation.AddedFileType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: kccoursevideo.FieldFileType,
		})
	}
	if value, ok := kcvu.mutation.FilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursevideo.FieldFilePath,
		})
	}
	if value, ok := kcvu.mutation.SubtitlePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursevideo.FieldSubtitlePath,
		})
	}
	if value, ok := kcvu.mutation.VideoTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursevideo.FieldVideoTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccoursevideo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KcCourseVideoUpdateOne is the builder for updating a single KcCourseVideo entity.
type KcCourseVideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KcCourseVideoMutation
}

// SetVideoTitle sets the "video_title" field.
func (kcvuo *KcCourseVideoUpdateOne) SetVideoTitle(s string) *KcCourseVideoUpdateOne {
	kcvuo.mutation.SetVideoTitle(s)
	return kcvuo
}

// SetNillableVideoTitle sets the "video_title" field if the given value is not nil.
func (kcvuo *KcCourseVideoUpdateOne) SetNillableVideoTitle(s *string) *KcCourseVideoUpdateOne {
	if s != nil {
		kcvuo.SetVideoTitle(*s)
	}
	return kcvuo
}

// SetFileType sets the "file_type" field.
func (kcvuo *KcCourseVideoUpdateOne) SetFileType(i int8) *KcCourseVideoUpdateOne {
	kcvuo.mutation.ResetFileType()
	kcvuo.mutation.SetFileType(i)
	return kcvuo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (kcvuo *KcCourseVideoUpdateOne) SetNillableFileType(i *int8) *KcCourseVideoUpdateOne {
	if i != nil {
		kcvuo.SetFileType(*i)
	}
	return kcvuo
}

// AddFileType adds i to the "file_type" field.
func (kcvuo *KcCourseVideoUpdateOne) AddFileType(i int8) *KcCourseVideoUpdateOne {
	kcvuo.mutation.AddFileType(i)
	return kcvuo
}

// SetFilePath sets the "file_path" field.
func (kcvuo *KcCourseVideoUpdateOne) SetFilePath(s string) *KcCourseVideoUpdateOne {
	kcvuo.mutation.SetFilePath(s)
	return kcvuo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (kcvuo *KcCourseVideoUpdateOne) SetNillableFilePath(s *string) *KcCourseVideoUpdateOne {
	if s != nil {
		kcvuo.SetFilePath(*s)
	}
	return kcvuo
}

// SetSubtitlePath sets the "subtitle_path" field.
func (kcvuo *KcCourseVideoUpdateOne) SetSubtitlePath(s string) *KcCourseVideoUpdateOne {
	kcvuo.mutation.SetSubtitlePath(s)
	return kcvuo
}

// SetNillableSubtitlePath sets the "subtitle_path" field if the given value is not nil.
func (kcvuo *KcCourseVideoUpdateOne) SetNillableSubtitlePath(s *string) *KcCourseVideoUpdateOne {
	if s != nil {
		kcvuo.SetSubtitlePath(*s)
	}
	return kcvuo
}

// SetVideoTime sets the "video_time" field.
func (kcvuo *KcCourseVideoUpdateOne) SetVideoTime(s string) *KcCourseVideoUpdateOne {
	kcvuo.mutation.SetVideoTime(s)
	return kcvuo
}

// SetNillableVideoTime sets the "video_time" field if the given value is not nil.
func (kcvuo *KcCourseVideoUpdateOne) SetNillableVideoTime(s *string) *KcCourseVideoUpdateOne {
	if s != nil {
		kcvuo.SetVideoTime(*s)
	}
	return kcvuo
}

// Mutation returns the KcCourseVideoMutation object of the builder.
func (kcvuo *KcCourseVideoUpdateOne) Mutation() *KcCourseVideoMutation {
	return kcvuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kcvuo *KcCourseVideoUpdateOne) Select(field string, fields ...string) *KcCourseVideoUpdateOne {
	kcvuo.fields = append([]string{field}, fields...)
	return kcvuo
}

// Save executes the query and returns the updated KcCourseVideo entity.
func (kcvuo *KcCourseVideoUpdateOne) Save(ctx context.Context) (*KcCourseVideo, error) {
	var (
		err  error
		node *KcCourseVideo
	)
	if len(kcvuo.hooks) == 0 {
		node, err = kcvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseVideoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcvuo.mutation = mutation
			node, err = kcvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcvuo.hooks) - 1; i >= 0; i-- {
			mut = kcvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcvuo *KcCourseVideoUpdateOne) SaveX(ctx context.Context) *KcCourseVideo {
	node, err := kcvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcvuo *KcCourseVideoUpdateOne) Exec(ctx context.Context) error {
	_, err := kcvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcvuo *KcCourseVideoUpdateOne) ExecX(ctx context.Context) {
	if err := kcvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kcvuo *KcCourseVideoUpdateOne) sqlSave(ctx context.Context) (_node *KcCourseVideo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursevideo.Table,
			Columns: kccoursevideo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursevideo.FieldID,
			},
		},
	}
	id, ok := kcvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KcCourseVideo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kcvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kccoursevideo.FieldID)
		for _, f := range fields {
			if !kccoursevideo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kccoursevideo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kcvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcvuo.mutation.VideoTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursevideo.FieldVideoTitle,
		})
	}
	if value, ok := kcvuo.mutation.FileType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: kccoursevideo.FieldFileType,
		})
	}
	if value, ok := kcvuo.mutation.AddedFileType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: kccoursevideo.FieldFileType,
		})
	}
	if value, ok := kcvuo.mutation.FilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursevideo.FieldFilePath,
		})
	}
	if value, ok := kcvuo.mutation.SubtitlePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursevideo.FieldSubtitlePath,
		})
	}
	if value, ok := kcvuo.mutation.VideoTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursevideo.FieldVideoTime,
		})
	}
	_node = &KcCourseVideo{config: kcvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kcvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccoursevideo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

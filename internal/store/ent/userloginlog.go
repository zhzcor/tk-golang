// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/user"
	"gserver/internal/store/ent/userloginlog"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserLoginLog is the model entity for the UserLoginLog schema.
type UserLoginLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Cid holds the value of the "cid" field.
	Cid string `json:"cid"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform"`
	// Device holds the value of the "device" field.
	Device string `json:"device"`
	// Version holds the value of the "version" field.
	Version string `json:"version"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip"`
	// Province holds the value of the "province" field.
	Province string `json:"province"`
	// City holds the value of the "city" field.
	City string `json:"city"`
	// LatestLoginAt holds the value of the "latest_login_at" field.
	// 上次登录日期
	LatestLoginAt time.Time `json:"latest_login_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserLoginLogQuery when eager-loading is set.
	Edges          UserLoginLogEdges `json:"edges"`
	user_login_log *int
}

// UserLoginLogEdges holds the relations/edges for other nodes in the graph.
type UserLoginLogEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLoginLogEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLoginLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userloginlog.FieldID:
			values[i] = new(sql.NullInt64)
		case userloginlog.FieldUUID, userloginlog.FieldCid, userloginlog.FieldPlatform, userloginlog.FieldDevice, userloginlog.FieldVersion, userloginlog.FieldIP, userloginlog.FieldProvince, userloginlog.FieldCity:
			values[i] = new(sql.NullString)
		case userloginlog.FieldCreatedAt, userloginlog.FieldUpdatedAt, userloginlog.FieldDeletedAt, userloginlog.FieldLatestLoginAt:
			values[i] = new(sql.NullTime)
		case userloginlog.ForeignKeys[0]: // user_login_log
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserLoginLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLoginLog fields.
func (ull *UserLoginLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userloginlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ull.ID = int(value.Int64)
		case userloginlog.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				ull.UUID = value.String
			}
		case userloginlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ull.CreatedAt = new(time.Time)
				*ull.CreatedAt = value.Time
			}
		case userloginlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ull.UpdatedAt = new(time.Time)
				*ull.UpdatedAt = value.Time
			}
		case userloginlog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ull.DeletedAt = new(time.Time)
				*ull.DeletedAt = value.Time
			}
		case userloginlog.FieldCid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cid", values[i])
			} else if value.Valid {
				ull.Cid = value.String
			}
		case userloginlog.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				ull.Platform = value.String
			}
		case userloginlog.FieldDevice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device", values[i])
			} else if value.Valid {
				ull.Device = value.String
			}
		case userloginlog.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ull.Version = value.String
			}
		case userloginlog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				ull.IP = value.String
			}
		case userloginlog.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				ull.Province = value.String
			}
		case userloginlog.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ull.City = value.String
			}
		case userloginlog.FieldLatestLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field latest_login_at", values[i])
			} else if value.Valid {
				ull.LatestLoginAt = value.Time
			}
		case userloginlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_login_log", value)
			} else if value.Valid {
				ull.user_login_log = new(int)
				*ull.user_login_log = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserLoginLog entity.
func (ull *UserLoginLog) QueryUser() *UserQuery {
	return (&UserLoginLogClient{config: ull.config}).QueryUser(ull)
}

// Update returns a builder for updating this UserLoginLog.
// Note that you need to call UserLoginLog.Unwrap() before calling this method if this UserLoginLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ull *UserLoginLog) Update() *UserLoginLogUpdateOne {
	return (&UserLoginLogClient{config: ull.config}).UpdateOne(ull)
}

// Unwrap unwraps the UserLoginLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ull *UserLoginLog) Unwrap() *UserLoginLog {
	tx, ok := ull.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserLoginLog is not a transactional entity")
	}
	ull.config.driver = tx.drv
	return ull
}

// String implements the fmt.Stringer.
func (ull *UserLoginLog) String() string {
	var builder strings.Builder
	builder.WriteString("UserLoginLog(")
	builder.WriteString(fmt.Sprintf("id=%v", ull.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(ull.UUID)
	if v := ull.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ull.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ull.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", cid=")
	builder.WriteString(ull.Cid)
	builder.WriteString(", platform=")
	builder.WriteString(ull.Platform)
	builder.WriteString(", device=")
	builder.WriteString(ull.Device)
	builder.WriteString(", version=")
	builder.WriteString(ull.Version)
	builder.WriteString(", ip=")
	builder.WriteString(ull.IP)
	builder.WriteString(", province=")
	builder.WriteString(ull.Province)
	builder.WriteString(", city=")
	builder.WriteString(ull.City)
	builder.WriteString(", latest_login_at=")
	builder.WriteString(ull.LatestLoginAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserLoginLogs is a parsable slice of UserLoginLog.
type UserLoginLogs []*UserLoginLog

func (ull UserLoginLogs) config(cfg config) {
	for _i := range ull {
		ull[_i].config = cfg
	}
}

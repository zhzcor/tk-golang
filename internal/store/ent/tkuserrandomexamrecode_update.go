// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkuserrandomexamrecode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkUserRandomExamRecodeUpdate is the builder for updating TkUserRandomExamRecode entities.
type TkUserRandomExamRecodeUpdate struct {
	config
	hooks    []Hook
	mutation *TkUserRandomExamRecodeMutation
}

// Where adds a new predicate for the TkUserRandomExamRecodeUpdate builder.
func (tureru *TkUserRandomExamRecodeUpdate) Where(ps ...predicate.TkUserRandomExamRecode) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.predicates = append(tureru.mutation.predicates, ps...)
	return tureru
}

// SetUUID sets the "uuid" field.
func (tureru *TkUserRandomExamRecodeUpdate) SetUUID(s string) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.SetUUID(s)
	return tureru
}

// SetUpdatedAt sets the "updated_at" field.
func (tureru *TkUserRandomExamRecodeUpdate) SetUpdatedAt(t time.Time) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.SetUpdatedAt(t)
	return tureru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tureru *TkUserRandomExamRecodeUpdate) ClearUpdatedAt() *TkUserRandomExamRecodeUpdate {
	tureru.mutation.ClearUpdatedAt()
	return tureru
}

// SetDeletedAt sets the "deleted_at" field.
func (tureru *TkUserRandomExamRecodeUpdate) SetDeletedAt(t time.Time) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.SetDeletedAt(t)
	return tureru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tureru *TkUserRandomExamRecodeUpdate) SetNillableDeletedAt(t *time.Time) *TkUserRandomExamRecodeUpdate {
	if t != nil {
		tureru.SetDeletedAt(*t)
	}
	return tureru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tureru *TkUserRandomExamRecodeUpdate) ClearDeletedAt() *TkUserRandomExamRecodeUpdate {
	tureru.mutation.ClearDeletedAt()
	return tureru
}

// SetUserID sets the "user_id" field.
func (tureru *TkUserRandomExamRecodeUpdate) SetUserID(i int) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.ResetUserID()
	tureru.mutation.SetUserID(i)
	return tureru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tureru *TkUserRandomExamRecodeUpdate) SetNillableUserID(i *int) *TkUserRandomExamRecodeUpdate {
	if i != nil {
		tureru.SetUserID(*i)
	}
	return tureru
}

// AddUserID adds i to the "user_id" field.
func (tureru *TkUserRandomExamRecodeUpdate) AddUserID(i int) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.AddUserID(i)
	return tureru
}

// ClearUserID clears the value of the "user_id" field.
func (tureru *TkUserRandomExamRecodeUpdate) ClearUserID() *TkUserRandomExamRecodeUpdate {
	tureru.mutation.ClearUserID()
	return tureru
}

// SetExamID sets the "exam_id" field.
func (tureru *TkUserRandomExamRecodeUpdate) SetExamID(i int) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.ResetExamID()
	tureru.mutation.SetExamID(i)
	return tureru
}

// SetNillableExamID sets the "exam_id" field if the given value is not nil.
func (tureru *TkUserRandomExamRecodeUpdate) SetNillableExamID(i *int) *TkUserRandomExamRecodeUpdate {
	if i != nil {
		tureru.SetExamID(*i)
	}
	return tureru
}

// ClearExamID clears the value of the "exam_id" field.
func (tureru *TkUserRandomExamRecodeUpdate) ClearExamID() *TkUserRandomExamRecodeUpdate {
	tureru.mutation.ClearExamID()
	return tureru
}

// AddRandomExamQuestionIDs adds the "random_exam_question" edge to the TkQuestion entity by IDs.
func (tureru *TkUserRandomExamRecodeUpdate) AddRandomExamQuestionIDs(ids ...int) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.AddRandomExamQuestionIDs(ids...)
	return tureru
}

// AddRandomExamQuestion adds the "random_exam_question" edges to the TkQuestion entity.
func (tureru *TkUserRandomExamRecodeUpdate) AddRandomExamQuestion(t ...*TkQuestion) *TkUserRandomExamRecodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tureru.AddRandomExamQuestionIDs(ids...)
}

// SetExamInfoID sets the "exam_info" edge to the TkExamPaper entity by ID.
func (tureru *TkUserRandomExamRecodeUpdate) SetExamInfoID(id int) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.SetExamInfoID(id)
	return tureru
}

// SetNillableExamInfoID sets the "exam_info" edge to the TkExamPaper entity by ID if the given value is not nil.
func (tureru *TkUserRandomExamRecodeUpdate) SetNillableExamInfoID(id *int) *TkUserRandomExamRecodeUpdate {
	if id != nil {
		tureru = tureru.SetExamInfoID(*id)
	}
	return tureru
}

// SetExamInfo sets the "exam_info" edge to the TkExamPaper entity.
func (tureru *TkUserRandomExamRecodeUpdate) SetExamInfo(t *TkExamPaper) *TkUserRandomExamRecodeUpdate {
	return tureru.SetExamInfoID(t.ID)
}

// Mutation returns the TkUserRandomExamRecodeMutation object of the builder.
func (tureru *TkUserRandomExamRecodeUpdate) Mutation() *TkUserRandomExamRecodeMutation {
	return tureru.mutation
}

// ClearRandomExamQuestion clears all "random_exam_question" edges to the TkQuestion entity.
func (tureru *TkUserRandomExamRecodeUpdate) ClearRandomExamQuestion() *TkUserRandomExamRecodeUpdate {
	tureru.mutation.ClearRandomExamQuestion()
	return tureru
}

// RemoveRandomExamQuestionIDs removes the "random_exam_question" edge to TkQuestion entities by IDs.
func (tureru *TkUserRandomExamRecodeUpdate) RemoveRandomExamQuestionIDs(ids ...int) *TkUserRandomExamRecodeUpdate {
	tureru.mutation.RemoveRandomExamQuestionIDs(ids...)
	return tureru
}

// RemoveRandomExamQuestion removes "random_exam_question" edges to TkQuestion entities.
func (tureru *TkUserRandomExamRecodeUpdate) RemoveRandomExamQuestion(t ...*TkQuestion) *TkUserRandomExamRecodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tureru.RemoveRandomExamQuestionIDs(ids...)
}

// ClearExamInfo clears the "exam_info" edge to the TkExamPaper entity.
func (tureru *TkUserRandomExamRecodeUpdate) ClearExamInfo() *TkUserRandomExamRecodeUpdate {
	tureru.mutation.ClearExamInfo()
	return tureru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tureru *TkUserRandomExamRecodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tureru.defaults()
	if len(tureru.hooks) == 0 {
		affected, err = tureru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserRandomExamRecodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tureru.mutation = mutation
			affected, err = tureru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tureru.hooks) - 1; i >= 0; i-- {
			mut = tureru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tureru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tureru *TkUserRandomExamRecodeUpdate) SaveX(ctx context.Context) int {
	affected, err := tureru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tureru *TkUserRandomExamRecodeUpdate) Exec(ctx context.Context) error {
	_, err := tureru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tureru *TkUserRandomExamRecodeUpdate) ExecX(ctx context.Context) {
	if err := tureru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tureru *TkUserRandomExamRecodeUpdate) defaults() {
	if _, ok := tureru.mutation.UpdatedAt(); !ok && !tureru.mutation.UpdatedAtCleared() {
		v := tkuserrandomexamrecode.UpdateDefaultUpdatedAt()
		tureru.mutation.SetUpdatedAt(v)
	}
}

func (tureru *TkUserRandomExamRecodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserrandomexamrecode.Table,
			Columns: tkuserrandomexamrecode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserrandomexamrecode.FieldID,
			},
		},
	}
	if ps := tureru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tureru.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldUUID,
		})
	}
	if tureru.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserrandomexamrecode.FieldCreatedAt,
		})
	}
	if value, ok := tureru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldUpdatedAt,
		})
	}
	if tureru.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserrandomexamrecode.FieldUpdatedAt,
		})
	}
	if value, ok := tureru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldDeletedAt,
		})
	}
	if tureru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserrandomexamrecode.FieldDeletedAt,
		})
	}
	if value, ok := tureru.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldUserID,
		})
	}
	if value, ok := tureru.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldUserID,
		})
	}
	if tureru.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tkuserrandomexamrecode.FieldUserID,
		})
	}
	if tureru.mutation.RandomExamQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tkuserrandomexamrecode.RandomExamQuestionTable,
			Columns: tkuserrandomexamrecode.RandomExamQuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tureru.mutation.RemovedRandomExamQuestionIDs(); len(nodes) > 0 && !tureru.mutation.RandomExamQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tkuserrandomexamrecode.RandomExamQuestionTable,
			Columns: tkuserrandomexamrecode.RandomExamQuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tureru.mutation.RandomExamQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tkuserrandomexamrecode.RandomExamQuestionTable,
			Columns: tkuserrandomexamrecode.RandomExamQuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tureru.mutation.ExamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserrandomexamrecode.ExamInfoTable,
			Columns: []string{tkuserrandomexamrecode.ExamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tureru.mutation.ExamInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserrandomexamrecode.ExamInfoTable,
			Columns: []string{tkuserrandomexamrecode.ExamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tureru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserrandomexamrecode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkUserRandomExamRecodeUpdateOne is the builder for updating a single TkUserRandomExamRecode entity.
type TkUserRandomExamRecodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkUserRandomExamRecodeMutation
}

// SetUUID sets the "uuid" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetUUID(s string) *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.SetUUID(s)
	return tureruo
}

// SetUpdatedAt sets the "updated_at" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetUpdatedAt(t time.Time) *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.SetUpdatedAt(t)
	return tureruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) ClearUpdatedAt() *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.ClearUpdatedAt()
	return tureruo
}

// SetDeletedAt sets the "deleted_at" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetDeletedAt(t time.Time) *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.SetDeletedAt(t)
	return tureruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetNillableDeletedAt(t *time.Time) *TkUserRandomExamRecodeUpdateOne {
	if t != nil {
		tureruo.SetDeletedAt(*t)
	}
	return tureruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) ClearDeletedAt() *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.ClearDeletedAt()
	return tureruo
}

// SetUserID sets the "user_id" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetUserID(i int) *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.ResetUserID()
	tureruo.mutation.SetUserID(i)
	return tureruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetNillableUserID(i *int) *TkUserRandomExamRecodeUpdateOne {
	if i != nil {
		tureruo.SetUserID(*i)
	}
	return tureruo
}

// AddUserID adds i to the "user_id" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) AddUserID(i int) *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.AddUserID(i)
	return tureruo
}

// ClearUserID clears the value of the "user_id" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) ClearUserID() *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.ClearUserID()
	return tureruo
}

// SetExamID sets the "exam_id" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetExamID(i int) *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.ResetExamID()
	tureruo.mutation.SetExamID(i)
	return tureruo
}

// SetNillableExamID sets the "exam_id" field if the given value is not nil.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetNillableExamID(i *int) *TkUserRandomExamRecodeUpdateOne {
	if i != nil {
		tureruo.SetExamID(*i)
	}
	return tureruo
}

// ClearExamID clears the value of the "exam_id" field.
func (tureruo *TkUserRandomExamRecodeUpdateOne) ClearExamID() *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.ClearExamID()
	return tureruo
}

// AddRandomExamQuestionIDs adds the "random_exam_question" edge to the TkQuestion entity by IDs.
func (tureruo *TkUserRandomExamRecodeUpdateOne) AddRandomExamQuestionIDs(ids ...int) *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.AddRandomExamQuestionIDs(ids...)
	return tureruo
}

// AddRandomExamQuestion adds the "random_exam_question" edges to the TkQuestion entity.
func (tureruo *TkUserRandomExamRecodeUpdateOne) AddRandomExamQuestion(t ...*TkQuestion) *TkUserRandomExamRecodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tureruo.AddRandomExamQuestionIDs(ids...)
}

// SetExamInfoID sets the "exam_info" edge to the TkExamPaper entity by ID.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetExamInfoID(id int) *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.SetExamInfoID(id)
	return tureruo
}

// SetNillableExamInfoID sets the "exam_info" edge to the TkExamPaper entity by ID if the given value is not nil.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetNillableExamInfoID(id *int) *TkUserRandomExamRecodeUpdateOne {
	if id != nil {
		tureruo = tureruo.SetExamInfoID(*id)
	}
	return tureruo
}

// SetExamInfo sets the "exam_info" edge to the TkExamPaper entity.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SetExamInfo(t *TkExamPaper) *TkUserRandomExamRecodeUpdateOne {
	return tureruo.SetExamInfoID(t.ID)
}

// Mutation returns the TkUserRandomExamRecodeMutation object of the builder.
func (tureruo *TkUserRandomExamRecodeUpdateOne) Mutation() *TkUserRandomExamRecodeMutation {
	return tureruo.mutation
}

// ClearRandomExamQuestion clears all "random_exam_question" edges to the TkQuestion entity.
func (tureruo *TkUserRandomExamRecodeUpdateOne) ClearRandomExamQuestion() *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.ClearRandomExamQuestion()
	return tureruo
}

// RemoveRandomExamQuestionIDs removes the "random_exam_question" edge to TkQuestion entities by IDs.
func (tureruo *TkUserRandomExamRecodeUpdateOne) RemoveRandomExamQuestionIDs(ids ...int) *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.RemoveRandomExamQuestionIDs(ids...)
	return tureruo
}

// RemoveRandomExamQuestion removes "random_exam_question" edges to TkQuestion entities.
func (tureruo *TkUserRandomExamRecodeUpdateOne) RemoveRandomExamQuestion(t ...*TkQuestion) *TkUserRandomExamRecodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tureruo.RemoveRandomExamQuestionIDs(ids...)
}

// ClearExamInfo clears the "exam_info" edge to the TkExamPaper entity.
func (tureruo *TkUserRandomExamRecodeUpdateOne) ClearExamInfo() *TkUserRandomExamRecodeUpdateOne {
	tureruo.mutation.ClearExamInfo()
	return tureruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tureruo *TkUserRandomExamRecodeUpdateOne) Select(field string, fields ...string) *TkUserRandomExamRecodeUpdateOne {
	tureruo.fields = append([]string{field}, fields...)
	return tureruo
}

// Save executes the query and returns the updated TkUserRandomExamRecode entity.
func (tureruo *TkUserRandomExamRecodeUpdateOne) Save(ctx context.Context) (*TkUserRandomExamRecode, error) {
	var (
		err  error
		node *TkUserRandomExamRecode
	)
	tureruo.defaults()
	if len(tureruo.hooks) == 0 {
		node, err = tureruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkUserRandomExamRecodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tureruo.mutation = mutation
			node, err = tureruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tureruo.hooks) - 1; i >= 0; i-- {
			mut = tureruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tureruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tureruo *TkUserRandomExamRecodeUpdateOne) SaveX(ctx context.Context) *TkUserRandomExamRecode {
	node, err := tureruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tureruo *TkUserRandomExamRecodeUpdateOne) Exec(ctx context.Context) error {
	_, err := tureruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tureruo *TkUserRandomExamRecodeUpdateOne) ExecX(ctx context.Context) {
	if err := tureruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tureruo *TkUserRandomExamRecodeUpdateOne) defaults() {
	if _, ok := tureruo.mutation.UpdatedAt(); !ok && !tureruo.mutation.UpdatedAtCleared() {
		v := tkuserrandomexamrecode.UpdateDefaultUpdatedAt()
		tureruo.mutation.SetUpdatedAt(v)
	}
}

func (tureruo *TkUserRandomExamRecodeUpdateOne) sqlSave(ctx context.Context) (_node *TkUserRandomExamRecode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkuserrandomexamrecode.Table,
			Columns: tkuserrandomexamrecode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkuserrandomexamrecode.FieldID,
			},
		},
	}
	id, ok := tureruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkUserRandomExamRecode.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tureruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkuserrandomexamrecode.FieldID)
		for _, f := range fields {
			if !tkuserrandomexamrecode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkuserrandomexamrecode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tureruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tureruo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldUUID,
		})
	}
	if tureruo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserrandomexamrecode.FieldCreatedAt,
		})
	}
	if value, ok := tureruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldUpdatedAt,
		})
	}
	if tureruo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserrandomexamrecode.FieldUpdatedAt,
		})
	}
	if value, ok := tureruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldDeletedAt,
		})
	}
	if tureruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkuserrandomexamrecode.FieldDeletedAt,
		})
	}
	if value, ok := tureruo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldUserID,
		})
	}
	if value, ok := tureruo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkuserrandomexamrecode.FieldUserID,
		})
	}
	if tureruo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tkuserrandomexamrecode.FieldUserID,
		})
	}
	if tureruo.mutation.RandomExamQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tkuserrandomexamrecode.RandomExamQuestionTable,
			Columns: tkuserrandomexamrecode.RandomExamQuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tureruo.mutation.RemovedRandomExamQuestionIDs(); len(nodes) > 0 && !tureruo.mutation.RandomExamQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tkuserrandomexamrecode.RandomExamQuestionTable,
			Columns: tkuserrandomexamrecode.RandomExamQuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tureruo.mutation.RandomExamQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tkuserrandomexamrecode.RandomExamQuestionTable,
			Columns: tkuserrandomexamrecode.RandomExamQuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tureruo.mutation.ExamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserrandomexamrecode.ExamInfoTable,
			Columns: []string{tkuserrandomexamrecode.ExamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tureruo.mutation.ExamInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkuserrandomexamrecode.ExamInfoTable,
			Columns: []string{tkuserrandomexamrecode.ExamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkUserRandomExamRecode{config: tureruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tureruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkuserrandomexamrecode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

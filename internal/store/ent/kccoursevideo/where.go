// Code generated by entc, DO NOT EDIT.

package kccoursevideo

import (
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// VideoTitle applies equality check predicate on the "video_title" field. It's identical to VideoTitleEQ.
func VideoTitle(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoTitle), v))
	})
}

// FileType applies equality check predicate on the "file_type" field. It's identical to FileTypeEQ.
func FileType(v int8) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileType), v))
	})
}

// FilePath applies equality check predicate on the "file_path" field. It's identical to FilePathEQ.
func FilePath(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilePath), v))
	})
}

// SubtitlePath applies equality check predicate on the "subtitle_path" field. It's identical to SubtitlePathEQ.
func SubtitlePath(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitlePath), v))
	})
}

// VideoTime applies equality check predicate on the "video_time" field. It's identical to VideoTimeEQ.
func VideoTime(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoTime), v))
	})
}

// VideoTitleEQ applies the EQ predicate on the "video_title" field.
func VideoTitleEQ(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleNEQ applies the NEQ predicate on the "video_title" field.
func VideoTitleNEQ(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleIn applies the In predicate on the "video_title" field.
func VideoTitleIn(vs ...string) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVideoTitle), v...))
	})
}

// VideoTitleNotIn applies the NotIn predicate on the "video_title" field.
func VideoTitleNotIn(vs ...string) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVideoTitle), v...))
	})
}

// VideoTitleGT applies the GT predicate on the "video_title" field.
func VideoTitleGT(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleGTE applies the GTE predicate on the "video_title" field.
func VideoTitleGTE(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleLT applies the LT predicate on the "video_title" field.
func VideoTitleLT(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleLTE applies the LTE predicate on the "video_title" field.
func VideoTitleLTE(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleContains applies the Contains predicate on the "video_title" field.
func VideoTitleContains(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleHasPrefix applies the HasPrefix predicate on the "video_title" field.
func VideoTitleHasPrefix(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleHasSuffix applies the HasSuffix predicate on the "video_title" field.
func VideoTitleHasSuffix(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleEqualFold applies the EqualFold predicate on the "video_title" field.
func VideoTitleEqualFold(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVideoTitle), v))
	})
}

// VideoTitleContainsFold applies the ContainsFold predicate on the "video_title" field.
func VideoTitleContainsFold(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVideoTitle), v))
	})
}

// FileTypeEQ applies the EQ predicate on the "file_type" field.
func FileTypeEQ(v int8) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileType), v))
	})
}

// FileTypeNEQ applies the NEQ predicate on the "file_type" field.
func FileTypeNEQ(v int8) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileType), v))
	})
}

// FileTypeIn applies the In predicate on the "file_type" field.
func FileTypeIn(vs ...int8) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileType), v...))
	})
}

// FileTypeNotIn applies the NotIn predicate on the "file_type" field.
func FileTypeNotIn(vs ...int8) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileType), v...))
	})
}

// FileTypeGT applies the GT predicate on the "file_type" field.
func FileTypeGT(v int8) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileType), v))
	})
}

// FileTypeGTE applies the GTE predicate on the "file_type" field.
func FileTypeGTE(v int8) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileType), v))
	})
}

// FileTypeLT applies the LT predicate on the "file_type" field.
func FileTypeLT(v int8) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileType), v))
	})
}

// FileTypeLTE applies the LTE predicate on the "file_type" field.
func FileTypeLTE(v int8) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileType), v))
	})
}

// FilePathEQ applies the EQ predicate on the "file_path" field.
func FilePathEQ(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilePath), v))
	})
}

// FilePathNEQ applies the NEQ predicate on the "file_path" field.
func FilePathNEQ(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilePath), v))
	})
}

// FilePathIn applies the In predicate on the "file_path" field.
func FilePathIn(vs ...string) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilePath), v...))
	})
}

// FilePathNotIn applies the NotIn predicate on the "file_path" field.
func FilePathNotIn(vs ...string) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilePath), v...))
	})
}

// FilePathGT applies the GT predicate on the "file_path" field.
func FilePathGT(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilePath), v))
	})
}

// FilePathGTE applies the GTE predicate on the "file_path" field.
func FilePathGTE(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilePath), v))
	})
}

// FilePathLT applies the LT predicate on the "file_path" field.
func FilePathLT(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilePath), v))
	})
}

// FilePathLTE applies the LTE predicate on the "file_path" field.
func FilePathLTE(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilePath), v))
	})
}

// FilePathContains applies the Contains predicate on the "file_path" field.
func FilePathContains(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilePath), v))
	})
}

// FilePathHasPrefix applies the HasPrefix predicate on the "file_path" field.
func FilePathHasPrefix(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilePath), v))
	})
}

// FilePathHasSuffix applies the HasSuffix predicate on the "file_path" field.
func FilePathHasSuffix(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilePath), v))
	})
}

// FilePathEqualFold applies the EqualFold predicate on the "file_path" field.
func FilePathEqualFold(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilePath), v))
	})
}

// FilePathContainsFold applies the ContainsFold predicate on the "file_path" field.
func FilePathContainsFold(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilePath), v))
	})
}

// SubtitlePathEQ applies the EQ predicate on the "subtitle_path" field.
func SubtitlePathEQ(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathNEQ applies the NEQ predicate on the "subtitle_path" field.
func SubtitlePathNEQ(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathIn applies the In predicate on the "subtitle_path" field.
func SubtitlePathIn(vs ...string) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubtitlePath), v...))
	})
}

// SubtitlePathNotIn applies the NotIn predicate on the "subtitle_path" field.
func SubtitlePathNotIn(vs ...string) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubtitlePath), v...))
	})
}

// SubtitlePathGT applies the GT predicate on the "subtitle_path" field.
func SubtitlePathGT(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathGTE applies the GTE predicate on the "subtitle_path" field.
func SubtitlePathGTE(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathLT applies the LT predicate on the "subtitle_path" field.
func SubtitlePathLT(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathLTE applies the LTE predicate on the "subtitle_path" field.
func SubtitlePathLTE(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathContains applies the Contains predicate on the "subtitle_path" field.
func SubtitlePathContains(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathHasPrefix applies the HasPrefix predicate on the "subtitle_path" field.
func SubtitlePathHasPrefix(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathHasSuffix applies the HasSuffix predicate on the "subtitle_path" field.
func SubtitlePathHasSuffix(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathEqualFold applies the EqualFold predicate on the "subtitle_path" field.
func SubtitlePathEqualFold(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubtitlePath), v))
	})
}

// SubtitlePathContainsFold applies the ContainsFold predicate on the "subtitle_path" field.
func SubtitlePathContainsFold(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubtitlePath), v))
	})
}

// VideoTimeEQ applies the EQ predicate on the "video_time" field.
func VideoTimeEQ(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoTime), v))
	})
}

// VideoTimeNEQ applies the NEQ predicate on the "video_time" field.
func VideoTimeNEQ(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVideoTime), v))
	})
}

// VideoTimeIn applies the In predicate on the "video_time" field.
func VideoTimeIn(vs ...string) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVideoTime), v...))
	})
}

// VideoTimeNotIn applies the NotIn predicate on the "video_time" field.
func VideoTimeNotIn(vs ...string) predicate.KcCourseVideo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVideoTime), v...))
	})
}

// VideoTimeGT applies the GT predicate on the "video_time" field.
func VideoTimeGT(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVideoTime), v))
	})
}

// VideoTimeGTE applies the GTE predicate on the "video_time" field.
func VideoTimeGTE(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVideoTime), v))
	})
}

// VideoTimeLT applies the LT predicate on the "video_time" field.
func VideoTimeLT(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVideoTime), v))
	})
}

// VideoTimeLTE applies the LTE predicate on the "video_time" field.
func VideoTimeLTE(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVideoTime), v))
	})
}

// VideoTimeContains applies the Contains predicate on the "video_time" field.
func VideoTimeContains(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVideoTime), v))
	})
}

// VideoTimeHasPrefix applies the HasPrefix predicate on the "video_time" field.
func VideoTimeHasPrefix(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVideoTime), v))
	})
}

// VideoTimeHasSuffix applies the HasSuffix predicate on the "video_time" field.
func VideoTimeHasSuffix(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVideoTime), v))
	})
}

// VideoTimeEqualFold applies the EqualFold predicate on the "video_time" field.
func VideoTimeEqualFold(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVideoTime), v))
	})
}

// VideoTimeContainsFold applies the ContainsFold predicate on the "video_time" field.
func VideoTimeContainsFold(v string) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVideoTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KcCourseVideo) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KcCourseVideo) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KcCourseVideo) predicate.KcCourseVideo {
	return predicate.KcCourseVideo(func(s *sql.Selector) {
		p(s.Not())
	})
}

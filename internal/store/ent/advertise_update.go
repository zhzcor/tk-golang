// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/advertise"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdvertiseUpdate is the builder for updating Advertise entities.
type AdvertiseUpdate struct {
	config
	hooks    []Hook
	mutation *AdvertiseMutation
}

// Where adds a new predicate for the AdvertiseUpdate builder.
func (au *AdvertiseUpdate) Where(ps ...predicate.Advertise) *AdvertiseUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetUUID sets the "uuid" field.
func (au *AdvertiseUpdate) SetUUID(s string) *AdvertiseUpdate {
	au.mutation.SetUUID(s)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AdvertiseUpdate) SetUpdatedAt(t time.Time) *AdvertiseUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AdvertiseUpdate) ClearUpdatedAt() *AdvertiseUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AdvertiseUpdate) SetDeletedAt(t time.Time) *AdvertiseUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableDeletedAt(t *time.Time) *AdvertiseUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AdvertiseUpdate) ClearDeletedAt() *AdvertiseUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetName sets the "name" field.
func (au *AdvertiseUpdate) SetName(s string) *AdvertiseUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableName(s *string) *AdvertiseUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetStatus sets the "status" field.
func (au *AdvertiseUpdate) SetStatus(u uint8) *AdvertiseUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(u)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableStatus(u *uint8) *AdvertiseUpdate {
	if u != nil {
		au.SetStatus(*u)
	}
	return au
}

// AddStatus adds u to the "status" field.
func (au *AdvertiseUpdate) AddStatus(u uint8) *AdvertiseUpdate {
	au.mutation.AddStatus(u)
	return au
}

// SetPosition sets the "position" field.
func (au *AdvertiseUpdate) SetPosition(u uint8) *AdvertiseUpdate {
	au.mutation.ResetPosition()
	au.mutation.SetPosition(u)
	return au
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillablePosition(u *uint8) *AdvertiseUpdate {
	if u != nil {
		au.SetPosition(*u)
	}
	return au
}

// AddPosition adds u to the "position" field.
func (au *AdvertiseUpdate) AddPosition(u uint8) *AdvertiseUpdate {
	au.mutation.AddPosition(u)
	return au
}

// SetStartAt sets the "start_at" field.
func (au *AdvertiseUpdate) SetStartAt(t time.Time) *AdvertiseUpdate {
	au.mutation.SetStartAt(t)
	return au
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableStartAt(t *time.Time) *AdvertiseUpdate {
	if t != nil {
		au.SetStartAt(*t)
	}
	return au
}

// ClearStartAt clears the value of the "start_at" field.
func (au *AdvertiseUpdate) ClearStartAt() *AdvertiseUpdate {
	au.mutation.ClearStartAt()
	return au
}

// SetEndAt sets the "end_at" field.
func (au *AdvertiseUpdate) SetEndAt(t time.Time) *AdvertiseUpdate {
	au.mutation.SetEndAt(t)
	return au
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableEndAt(t *time.Time) *AdvertiseUpdate {
	if t != nil {
		au.SetEndAt(*t)
	}
	return au
}

// ClearEndAt clears the value of the "end_at" field.
func (au *AdvertiseUpdate) ClearEndAt() *AdvertiseUpdate {
	au.mutation.ClearEndAt()
	return au
}

// SetClickCount sets the "click_count" field.
func (au *AdvertiseUpdate) SetClickCount(i int) *AdvertiseUpdate {
	au.mutation.ResetClickCount()
	au.mutation.SetClickCount(i)
	return au
}

// SetNillableClickCount sets the "click_count" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableClickCount(i *int) *AdvertiseUpdate {
	if i != nil {
		au.SetClickCount(*i)
	}
	return au
}

// AddClickCount adds i to the "click_count" field.
func (au *AdvertiseUpdate) AddClickCount(i int) *AdvertiseUpdate {
	au.mutation.AddClickCount(i)
	return au
}

// SetAdURL sets the "ad_url" field.
func (au *AdvertiseUpdate) SetAdURL(s string) *AdvertiseUpdate {
	au.mutation.SetAdURL(s)
	return au
}

// SetNillableAdURL sets the "ad_url" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableAdURL(s *string) *AdvertiseUpdate {
	if s != nil {
		au.SetAdURL(*s)
	}
	return au
}

// SetRemark sets the "remark" field.
func (au *AdvertiseUpdate) SetRemark(s string) *AdvertiseUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableRemark(s *string) *AdvertiseUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// SetAttachmentID sets the "attachment_id" field.
func (au *AdvertiseUpdate) SetAttachmentID(i int) *AdvertiseUpdate {
	au.mutation.ResetAttachmentID()
	au.mutation.SetAttachmentID(i)
	return au
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableAttachmentID(i *int) *AdvertiseUpdate {
	if i != nil {
		au.SetAttachmentID(*i)
	}
	return au
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (au *AdvertiseUpdate) ClearAttachmentID() *AdvertiseUpdate {
	au.mutation.ClearAttachmentID()
	return au
}

// SetSortOrder sets the "sort_order" field.
func (au *AdvertiseUpdate) SetSortOrder(i int) *AdvertiseUpdate {
	au.mutation.ResetSortOrder()
	au.mutation.SetSortOrder(i)
	return au
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (au *AdvertiseUpdate) SetNillableSortOrder(i *int) *AdvertiseUpdate {
	if i != nil {
		au.SetSortOrder(*i)
	}
	return au
}

// AddSortOrder adds i to the "sort_order" field.
func (au *AdvertiseUpdate) AddSortOrder(i int) *AdvertiseUpdate {
	au.mutation.AddSortOrder(i)
	return au
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (au *AdvertiseUpdate) SetAttachment(a *Attachment) *AdvertiseUpdate {
	return au.SetAttachmentID(a.ID)
}

// Mutation returns the AdvertiseMutation object of the builder.
func (au *AdvertiseUpdate) Mutation() *AdvertiseMutation {
	return au.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (au *AdvertiseUpdate) ClearAttachment() *AdvertiseUpdate {
	au.mutation.ClearAttachment()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdvertiseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdvertiseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdvertiseUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdvertiseUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdvertiseUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdvertiseUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := advertise.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AdvertiseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   advertise.Table,
			Columns: advertise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: advertise.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertise.FieldUUID,
		})
	}
	if au.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: advertise.FieldUpdatedAt,
		})
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: advertise.FieldDeletedAt,
		})
	}
	if au.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertise.FieldName,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: advertise.FieldStatus,
		})
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: advertise.FieldStatus,
		})
	}
	if value, ok := au.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: advertise.FieldPosition,
		})
	}
	if value, ok := au.mutation.AddedPosition(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: advertise.FieldPosition,
		})
	}
	if value, ok := au.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: advertise.FieldStartAt,
		})
	}
	if au.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldStartAt,
		})
	}
	if value, ok := au.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: advertise.FieldEndAt,
		})
	}
	if au.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldEndAt,
		})
	}
	if value, ok := au.mutation.ClickCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: advertise.FieldClickCount,
		})
	}
	if value, ok := au.mutation.AddedClickCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: advertise.FieldClickCount,
		})
	}
	if value, ok := au.mutation.AdURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertise.FieldAdURL,
		})
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertise.FieldRemark,
		})
	}
	if value, ok := au.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: advertise.FieldSortOrder,
		})
	}
	if value, ok := au.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: advertise.FieldSortOrder,
		})
	}
	if au.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   advertise.AttachmentTable,
			Columns: []string{advertise.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   advertise.AttachmentTable,
			Columns: []string{advertise.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{advertise.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AdvertiseUpdateOne is the builder for updating a single Advertise entity.
type AdvertiseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdvertiseMutation
}

// SetUUID sets the "uuid" field.
func (auo *AdvertiseUpdateOne) SetUUID(s string) *AdvertiseUpdateOne {
	auo.mutation.SetUUID(s)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AdvertiseUpdateOne) SetUpdatedAt(t time.Time) *AdvertiseUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AdvertiseUpdateOne) ClearUpdatedAt() *AdvertiseUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AdvertiseUpdateOne) SetDeletedAt(t time.Time) *AdvertiseUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableDeletedAt(t *time.Time) *AdvertiseUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AdvertiseUpdateOne) ClearDeletedAt() *AdvertiseUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetName sets the "name" field.
func (auo *AdvertiseUpdateOne) SetName(s string) *AdvertiseUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableName(s *string) *AdvertiseUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetStatus sets the "status" field.
func (auo *AdvertiseUpdateOne) SetStatus(u uint8) *AdvertiseUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(u)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableStatus(u *uint8) *AdvertiseUpdateOne {
	if u != nil {
		auo.SetStatus(*u)
	}
	return auo
}

// AddStatus adds u to the "status" field.
func (auo *AdvertiseUpdateOne) AddStatus(u uint8) *AdvertiseUpdateOne {
	auo.mutation.AddStatus(u)
	return auo
}

// SetPosition sets the "position" field.
func (auo *AdvertiseUpdateOne) SetPosition(u uint8) *AdvertiseUpdateOne {
	auo.mutation.ResetPosition()
	auo.mutation.SetPosition(u)
	return auo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillablePosition(u *uint8) *AdvertiseUpdateOne {
	if u != nil {
		auo.SetPosition(*u)
	}
	return auo
}

// AddPosition adds u to the "position" field.
func (auo *AdvertiseUpdateOne) AddPosition(u uint8) *AdvertiseUpdateOne {
	auo.mutation.AddPosition(u)
	return auo
}

// SetStartAt sets the "start_at" field.
func (auo *AdvertiseUpdateOne) SetStartAt(t time.Time) *AdvertiseUpdateOne {
	auo.mutation.SetStartAt(t)
	return auo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableStartAt(t *time.Time) *AdvertiseUpdateOne {
	if t != nil {
		auo.SetStartAt(*t)
	}
	return auo
}

// ClearStartAt clears the value of the "start_at" field.
func (auo *AdvertiseUpdateOne) ClearStartAt() *AdvertiseUpdateOne {
	auo.mutation.ClearStartAt()
	return auo
}

// SetEndAt sets the "end_at" field.
func (auo *AdvertiseUpdateOne) SetEndAt(t time.Time) *AdvertiseUpdateOne {
	auo.mutation.SetEndAt(t)
	return auo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableEndAt(t *time.Time) *AdvertiseUpdateOne {
	if t != nil {
		auo.SetEndAt(*t)
	}
	return auo
}

// ClearEndAt clears the value of the "end_at" field.
func (auo *AdvertiseUpdateOne) ClearEndAt() *AdvertiseUpdateOne {
	auo.mutation.ClearEndAt()
	return auo
}

// SetClickCount sets the "click_count" field.
func (auo *AdvertiseUpdateOne) SetClickCount(i int) *AdvertiseUpdateOne {
	auo.mutation.ResetClickCount()
	auo.mutation.SetClickCount(i)
	return auo
}

// SetNillableClickCount sets the "click_count" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableClickCount(i *int) *AdvertiseUpdateOne {
	if i != nil {
		auo.SetClickCount(*i)
	}
	return auo
}

// AddClickCount adds i to the "click_count" field.
func (auo *AdvertiseUpdateOne) AddClickCount(i int) *AdvertiseUpdateOne {
	auo.mutation.AddClickCount(i)
	return auo
}

// SetAdURL sets the "ad_url" field.
func (auo *AdvertiseUpdateOne) SetAdURL(s string) *AdvertiseUpdateOne {
	auo.mutation.SetAdURL(s)
	return auo
}

// SetNillableAdURL sets the "ad_url" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableAdURL(s *string) *AdvertiseUpdateOne {
	if s != nil {
		auo.SetAdURL(*s)
	}
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AdvertiseUpdateOne) SetRemark(s string) *AdvertiseUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableRemark(s *string) *AdvertiseUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// SetAttachmentID sets the "attachment_id" field.
func (auo *AdvertiseUpdateOne) SetAttachmentID(i int) *AdvertiseUpdateOne {
	auo.mutation.ResetAttachmentID()
	auo.mutation.SetAttachmentID(i)
	return auo
}

// SetNillableAttachmentID sets the "attachment_id" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableAttachmentID(i *int) *AdvertiseUpdateOne {
	if i != nil {
		auo.SetAttachmentID(*i)
	}
	return auo
}

// ClearAttachmentID clears the value of the "attachment_id" field.
func (auo *AdvertiseUpdateOne) ClearAttachmentID() *AdvertiseUpdateOne {
	auo.mutation.ClearAttachmentID()
	return auo
}

// SetSortOrder sets the "sort_order" field.
func (auo *AdvertiseUpdateOne) SetSortOrder(i int) *AdvertiseUpdateOne {
	auo.mutation.ResetSortOrder()
	auo.mutation.SetSortOrder(i)
	return auo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (auo *AdvertiseUpdateOne) SetNillableSortOrder(i *int) *AdvertiseUpdateOne {
	if i != nil {
		auo.SetSortOrder(*i)
	}
	return auo
}

// AddSortOrder adds i to the "sort_order" field.
func (auo *AdvertiseUpdateOne) AddSortOrder(i int) *AdvertiseUpdateOne {
	auo.mutation.AddSortOrder(i)
	return auo
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (auo *AdvertiseUpdateOne) SetAttachment(a *Attachment) *AdvertiseUpdateOne {
	return auo.SetAttachmentID(a.ID)
}

// Mutation returns the AdvertiseMutation object of the builder.
func (auo *AdvertiseUpdateOne) Mutation() *AdvertiseMutation {
	return auo.mutation
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (auo *AdvertiseUpdateOne) ClearAttachment() *AdvertiseUpdateOne {
	auo.mutation.ClearAttachment()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdvertiseUpdateOne) Select(field string, fields ...string) *AdvertiseUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Advertise entity.
func (auo *AdvertiseUpdateOne) Save(ctx context.Context) (*Advertise, error) {
	var (
		err  error
		node *Advertise
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdvertiseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdvertiseUpdateOne) SaveX(ctx context.Context) *Advertise {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdvertiseUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdvertiseUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdvertiseUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := advertise.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AdvertiseUpdateOne) sqlSave(ctx context.Context) (_node *Advertise, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   advertise.Table,
			Columns: advertise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: advertise.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Advertise.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, advertise.FieldID)
		for _, f := range fields {
			if !advertise.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != advertise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertise.FieldUUID,
		})
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: advertise.FieldUpdatedAt,
		})
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: advertise.FieldDeletedAt,
		})
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertise.FieldName,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: advertise.FieldStatus,
		})
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: advertise.FieldStatus,
		})
	}
	if value, ok := auo.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: advertise.FieldPosition,
		})
	}
	if value, ok := auo.mutation.AddedPosition(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: advertise.FieldPosition,
		})
	}
	if value, ok := auo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: advertise.FieldStartAt,
		})
	}
	if auo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldStartAt,
		})
	}
	if value, ok := auo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: advertise.FieldEndAt,
		})
	}
	if auo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: advertise.FieldEndAt,
		})
	}
	if value, ok := auo.mutation.ClickCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: advertise.FieldClickCount,
		})
	}
	if value, ok := auo.mutation.AddedClickCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: advertise.FieldClickCount,
		})
	}
	if value, ok := auo.mutation.AdURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertise.FieldAdURL,
		})
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertise.FieldRemark,
		})
	}
	if value, ok := auo.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: advertise.FieldSortOrder,
		})
	}
	if value, ok := auo.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: advertise.FieldSortOrder,
		})
	}
	if auo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   advertise.AttachmentTable,
			Columns: []string{advertise.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   advertise.AttachmentTable,
			Columns: []string{advertise.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Advertise{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{advertise.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

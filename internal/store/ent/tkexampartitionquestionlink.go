// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/tkexampaperpartition"
	"tkserver/internal/store/ent/tkexampartitionquestionlink"
	"tkserver/internal/store/ent/tkquestion"

	"entgo.io/ent/dialect/sql"
)

// TkExamPartitionQuestionLink is the model entity for the TkExamPartitionQuestionLink schema.
type TkExamPartitionQuestionLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// QuestionScore holds the value of the "question_score" field.
	// 题目分值
	QuestionScore uint8 `json:"question_score"`
	// ExamPaperPartitionID holds the value of the "exam_paper_partition_id" field.
	// 试卷子部分id
	ExamPaperPartitionID int `json:"exam_paper_partition_id"`
	// QuestionID holds the value of the "question_id" field.
	// 题目id
	QuestionID int `json:"question_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkExamPartitionQuestionLinkQuery when eager-loading is set.
	Edges TkExamPartitionQuestionLinkEdges `json:"edges"`
}

// TkExamPartitionQuestionLinkEdges holds the relations/edges for other nodes in the graph.
type TkExamPartitionQuestionLinkEdges struct {
	// ExamPaperPartition holds the value of the exam_paper_partition edge.
	ExamPaperPartition *TkExamPaperPartition `json:"exam_paper_partition,omitempty"`
	// Question holds the value of the question edge.
	Question *TkQuestion `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ExamPaperPartitionOrErr returns the ExamPaperPartition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkExamPartitionQuestionLinkEdges) ExamPaperPartitionOrErr() (*TkExamPaperPartition, error) {
	if e.loadedTypes[0] {
		if e.ExamPaperPartition == nil {
			// The edge exam_paper_partition was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkexampaperpartition.Label}
		}
		return e.ExamPaperPartition, nil
	}
	return nil, &NotLoadedError{edge: "exam_paper_partition"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkExamPartitionQuestionLinkEdges) QuestionOrErr() (*TkQuestion, error) {
	if e.loadedTypes[1] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestion.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkExamPartitionQuestionLink) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkexampartitionquestionlink.FieldID, tkexampartitionquestionlink.FieldQuestionScore, tkexampartitionquestionlink.FieldExamPaperPartitionID, tkexampartitionquestionlink.FieldQuestionID:
			values[i] = new(sql.NullInt64)
		case tkexampartitionquestionlink.FieldUUID:
			values[i] = new(sql.NullString)
		case tkexampartitionquestionlink.FieldCreatedAt, tkexampartitionquestionlink.FieldUpdatedAt, tkexampartitionquestionlink.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkExamPartitionQuestionLink", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkExamPartitionQuestionLink fields.
func (tepql *TkExamPartitionQuestionLink) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkexampartitionquestionlink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tepql.ID = int(value.Int64)
		case tkexampartitionquestionlink.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tepql.UUID = value.String
			}
		case tkexampartitionquestionlink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tepql.CreatedAt = new(time.Time)
				*tepql.CreatedAt = value.Time
			}
		case tkexampartitionquestionlink.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tepql.UpdatedAt = new(time.Time)
				*tepql.UpdatedAt = value.Time
			}
		case tkexampartitionquestionlink.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tepql.DeletedAt = new(time.Time)
				*tepql.DeletedAt = value.Time
			}
		case tkexampartitionquestionlink.FieldQuestionScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_score", values[i])
			} else if value.Valid {
				tepql.QuestionScore = uint8(value.Int64)
			}
		case tkexampartitionquestionlink.FieldExamPaperPartitionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_paper_partition_id", values[i])
			} else if value.Valid {
				tepql.ExamPaperPartitionID = int(value.Int64)
			}
		case tkexampartitionquestionlink.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				tepql.QuestionID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryExamPaperPartition queries the "exam_paper_partition" edge of the TkExamPartitionQuestionLink entity.
func (tepql *TkExamPartitionQuestionLink) QueryExamPaperPartition() *TkExamPaperPartitionQuery {
	return (&TkExamPartitionQuestionLinkClient{config: tepql.config}).QueryExamPaperPartition(tepql)
}

// QueryQuestion queries the "question" edge of the TkExamPartitionQuestionLink entity.
func (tepql *TkExamPartitionQuestionLink) QueryQuestion() *TkQuestionQuery {
	return (&TkExamPartitionQuestionLinkClient{config: tepql.config}).QueryQuestion(tepql)
}

// Update returns a builder for updating this TkExamPartitionQuestionLink.
// Note that you need to call TkExamPartitionQuestionLink.Unwrap() before calling this method if this TkExamPartitionQuestionLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (tepql *TkExamPartitionQuestionLink) Update() *TkExamPartitionQuestionLinkUpdateOne {
	return (&TkExamPartitionQuestionLinkClient{config: tepql.config}).UpdateOne(tepql)
}

// Unwrap unwraps the TkExamPartitionQuestionLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tepql *TkExamPartitionQuestionLink) Unwrap() *TkExamPartitionQuestionLink {
	tx, ok := tepql.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkExamPartitionQuestionLink is not a transactional entity")
	}
	tepql.config.driver = tx.drv
	return tepql
}

// String implements the fmt.Stringer.
func (tepql *TkExamPartitionQuestionLink) String() string {
	var builder strings.Builder
	builder.WriteString("TkExamPartitionQuestionLink(")
	builder.WriteString(fmt.Sprintf("id=%v", tepql.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tepql.UUID)
	if v := tepql.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tepql.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tepql.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", question_score=")
	builder.WriteString(fmt.Sprintf("%v", tepql.QuestionScore))
	builder.WriteString(", exam_paper_partition_id=")
	builder.WriteString(fmt.Sprintf("%v", tepql.ExamPaperPartitionID))
	builder.WriteString(", question_id=")
	builder.WriteString(fmt.Sprintf("%v", tepql.QuestionID))
	builder.WriteByte(')')
	return builder.String()
}

// TkExamPartitionQuestionLinks is a parsable slice of TkExamPartitionQuestionLink.
type TkExamPartitionQuestionLinks []*TkExamPartitionQuestionLink

func (tepql TkExamPartitionQuestionLinks) config(cfg config) {
	for _i := range tepql {
		tepql[_i].config = cfg
	}
}

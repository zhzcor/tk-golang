// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/kccourse"
	"gserver/internal/store/ent/kccoursechapter"
	"gserver/internal/store/ent/kccoursesection"
	"gserver/internal/store/ent/kccoursesmallcategory"
	"gserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseChapterUpdate is the builder for updating KcCourseChapter entities.
type KcCourseChapterUpdate struct {
	config
	hooks    []Hook
	mutation *KcCourseChapterMutation
}

// Where adds a new predicate for the KcCourseChapterUpdate builder.
func (kccu *KcCourseChapterUpdate) Where(ps ...predicate.KcCourseChapter) *KcCourseChapterUpdate {
	kccu.mutation.predicates = append(kccu.mutation.predicates, ps...)
	return kccu
}

// SetCourseID sets the "course_id" field.
func (kccu *KcCourseChapterUpdate) SetCourseID(i int) *KcCourseChapterUpdate {
	kccu.mutation.ResetCourseID()
	kccu.mutation.SetCourseID(i)
	return kccu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kccu *KcCourseChapterUpdate) SetNillableCourseID(i *int) *KcCourseChapterUpdate {
	if i != nil {
		kccu.SetCourseID(*i)
	}
	return kccu
}

// ClearCourseID clears the value of the "course_id" field.
func (kccu *KcCourseChapterUpdate) ClearCourseID() *KcCourseChapterUpdate {
	kccu.mutation.ClearCourseID()
	return kccu
}

// SetTitle sets the "title" field.
func (kccu *KcCourseChapterUpdate) SetTitle(s string) *KcCourseChapterUpdate {
	kccu.mutation.SetTitle(s)
	return kccu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kccu *KcCourseChapterUpdate) SetNillableTitle(s *string) *KcCourseChapterUpdate {
	if s != nil {
		kccu.SetTitle(*s)
	}
	return kccu
}

// SetChapterCourseID sets the "chapter_course" edge to the KcCourse entity by ID.
func (kccu *KcCourseChapterUpdate) SetChapterCourseID(id int) *KcCourseChapterUpdate {
	kccu.mutation.SetChapterCourseID(id)
	return kccu
}

// SetNillableChapterCourseID sets the "chapter_course" edge to the KcCourse entity by ID if the given value is not nil.
func (kccu *KcCourseChapterUpdate) SetNillableChapterCourseID(id *int) *KcCourseChapterUpdate {
	if id != nil {
		kccu = kccu.SetChapterCourseID(*id)
	}
	return kccu
}

// SetChapterCourse sets the "chapter_course" edge to the KcCourse entity.
func (kccu *KcCourseChapterUpdate) SetChapterCourse(k *KcCourse) *KcCourseChapterUpdate {
	return kccu.SetChapterCourseID(k.ID)
}

// AddChapterSectionIDs adds the "chapter_sections" edge to the KcCourseSection entity by IDs.
func (kccu *KcCourseChapterUpdate) AddChapterSectionIDs(ids ...int) *KcCourseChapterUpdate {
	kccu.mutation.AddChapterSectionIDs(ids...)
	return kccu
}

// AddChapterSections adds the "chapter_sections" edges to the KcCourseSection entity.
func (kccu *KcCourseChapterUpdate) AddChapterSections(k ...*KcCourseSection) *KcCourseChapterUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccu.AddChapterSectionIDs(ids...)
}

// AddCourseSmallChapterIDs adds the "course_small_chapters" edge to the KcCourseSmallCategory entity by IDs.
func (kccu *KcCourseChapterUpdate) AddCourseSmallChapterIDs(ids ...int) *KcCourseChapterUpdate {
	kccu.mutation.AddCourseSmallChapterIDs(ids...)
	return kccu
}

// AddCourseSmallChapters adds the "course_small_chapters" edges to the KcCourseSmallCategory entity.
func (kccu *KcCourseChapterUpdate) AddCourseSmallChapters(k ...*KcCourseSmallCategory) *KcCourseChapterUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccu.AddCourseSmallChapterIDs(ids...)
}

// Mutation returns the KcCourseChapterMutation object of the builder.
func (kccu *KcCourseChapterUpdate) Mutation() *KcCourseChapterMutation {
	return kccu.mutation
}

// ClearChapterCourse clears the "chapter_course" edge to the KcCourse entity.
func (kccu *KcCourseChapterUpdate) ClearChapterCourse() *KcCourseChapterUpdate {
	kccu.mutation.ClearChapterCourse()
	return kccu
}

// ClearChapterSections clears all "chapter_sections" edges to the KcCourseSection entity.
func (kccu *KcCourseChapterUpdate) ClearChapterSections() *KcCourseChapterUpdate {
	kccu.mutation.ClearChapterSections()
	return kccu
}

// RemoveChapterSectionIDs removes the "chapter_sections" edge to KcCourseSection entities by IDs.
func (kccu *KcCourseChapterUpdate) RemoveChapterSectionIDs(ids ...int) *KcCourseChapterUpdate {
	kccu.mutation.RemoveChapterSectionIDs(ids...)
	return kccu
}

// RemoveChapterSections removes "chapter_sections" edges to KcCourseSection entities.
func (kccu *KcCourseChapterUpdate) RemoveChapterSections(k ...*KcCourseSection) *KcCourseChapterUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccu.RemoveChapterSectionIDs(ids...)
}

// ClearCourseSmallChapters clears all "course_small_chapters" edges to the KcCourseSmallCategory entity.
func (kccu *KcCourseChapterUpdate) ClearCourseSmallChapters() *KcCourseChapterUpdate {
	kccu.mutation.ClearCourseSmallChapters()
	return kccu
}

// RemoveCourseSmallChapterIDs removes the "course_small_chapters" edge to KcCourseSmallCategory entities by IDs.
func (kccu *KcCourseChapterUpdate) RemoveCourseSmallChapterIDs(ids ...int) *KcCourseChapterUpdate {
	kccu.mutation.RemoveCourseSmallChapterIDs(ids...)
	return kccu
}

// RemoveCourseSmallChapters removes "course_small_chapters" edges to KcCourseSmallCategory entities.
func (kccu *KcCourseChapterUpdate) RemoveCourseSmallChapters(k ...*KcCourseSmallCategory) *KcCourseChapterUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccu.RemoveCourseSmallChapterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kccu *KcCourseChapterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(kccu.hooks) == 0 {
		affected, err = kccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kccu.mutation = mutation
			affected, err = kccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kccu.hooks) - 1; i >= 0; i-- {
			mut = kccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kccu *KcCourseChapterUpdate) SaveX(ctx context.Context) int {
	affected, err := kccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kccu *KcCourseChapterUpdate) Exec(ctx context.Context) error {
	_, err := kccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kccu *KcCourseChapterUpdate) ExecX(ctx context.Context) {
	if err := kccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kccu *KcCourseChapterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursechapter.Table,
			Columns: kccoursechapter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursechapter.FieldID,
			},
		},
	}
	if ps := kccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kccu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursechapter.FieldTitle,
		})
	}
	if kccu.mutation.ChapterCourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursechapter.ChapterCourseTable,
			Columns: []string{kccoursechapter.ChapterCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccu.mutation.ChapterCourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursechapter.ChapterCourseTable,
			Columns: []string{kccoursechapter.ChapterCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kccu.mutation.ChapterSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.ChapterSectionsTable,
			Columns: []string{kccoursechapter.ChapterSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccu.mutation.RemovedChapterSectionsIDs(); len(nodes) > 0 && !kccu.mutation.ChapterSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.ChapterSectionsTable,
			Columns: []string{kccoursechapter.ChapterSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccu.mutation.ChapterSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.ChapterSectionsTable,
			Columns: []string{kccoursechapter.ChapterSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kccu.mutation.CourseSmallChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.CourseSmallChaptersTable,
			Columns: []string{kccoursechapter.CourseSmallChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccu.mutation.RemovedCourseSmallChaptersIDs(); len(nodes) > 0 && !kccu.mutation.CourseSmallChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.CourseSmallChaptersTable,
			Columns: []string{kccoursechapter.CourseSmallChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccu.mutation.CourseSmallChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.CourseSmallChaptersTable,
			Columns: []string{kccoursechapter.CourseSmallChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccoursechapter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KcCourseChapterUpdateOne is the builder for updating a single KcCourseChapter entity.
type KcCourseChapterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KcCourseChapterMutation
}

// SetCourseID sets the "course_id" field.
func (kccuo *KcCourseChapterUpdateOne) SetCourseID(i int) *KcCourseChapterUpdateOne {
	kccuo.mutation.ResetCourseID()
	kccuo.mutation.SetCourseID(i)
	return kccuo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kccuo *KcCourseChapterUpdateOne) SetNillableCourseID(i *int) *KcCourseChapterUpdateOne {
	if i != nil {
		kccuo.SetCourseID(*i)
	}
	return kccuo
}

// ClearCourseID clears the value of the "course_id" field.
func (kccuo *KcCourseChapterUpdateOne) ClearCourseID() *KcCourseChapterUpdateOne {
	kccuo.mutation.ClearCourseID()
	return kccuo
}

// SetTitle sets the "title" field.
func (kccuo *KcCourseChapterUpdateOne) SetTitle(s string) *KcCourseChapterUpdateOne {
	kccuo.mutation.SetTitle(s)
	return kccuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kccuo *KcCourseChapterUpdateOne) SetNillableTitle(s *string) *KcCourseChapterUpdateOne {
	if s != nil {
		kccuo.SetTitle(*s)
	}
	return kccuo
}

// SetChapterCourseID sets the "chapter_course" edge to the KcCourse entity by ID.
func (kccuo *KcCourseChapterUpdateOne) SetChapterCourseID(id int) *KcCourseChapterUpdateOne {
	kccuo.mutation.SetChapterCourseID(id)
	return kccuo
}

// SetNillableChapterCourseID sets the "chapter_course" edge to the KcCourse entity by ID if the given value is not nil.
func (kccuo *KcCourseChapterUpdateOne) SetNillableChapterCourseID(id *int) *KcCourseChapterUpdateOne {
	if id != nil {
		kccuo = kccuo.SetChapterCourseID(*id)
	}
	return kccuo
}

// SetChapterCourse sets the "chapter_course" edge to the KcCourse entity.
func (kccuo *KcCourseChapterUpdateOne) SetChapterCourse(k *KcCourse) *KcCourseChapterUpdateOne {
	return kccuo.SetChapterCourseID(k.ID)
}

// AddChapterSectionIDs adds the "chapter_sections" edge to the KcCourseSection entity by IDs.
func (kccuo *KcCourseChapterUpdateOne) AddChapterSectionIDs(ids ...int) *KcCourseChapterUpdateOne {
	kccuo.mutation.AddChapterSectionIDs(ids...)
	return kccuo
}

// AddChapterSections adds the "chapter_sections" edges to the KcCourseSection entity.
func (kccuo *KcCourseChapterUpdateOne) AddChapterSections(k ...*KcCourseSection) *KcCourseChapterUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccuo.AddChapterSectionIDs(ids...)
}

// AddCourseSmallChapterIDs adds the "course_small_chapters" edge to the KcCourseSmallCategory entity by IDs.
func (kccuo *KcCourseChapterUpdateOne) AddCourseSmallChapterIDs(ids ...int) *KcCourseChapterUpdateOne {
	kccuo.mutation.AddCourseSmallChapterIDs(ids...)
	return kccuo
}

// AddCourseSmallChapters adds the "course_small_chapters" edges to the KcCourseSmallCategory entity.
func (kccuo *KcCourseChapterUpdateOne) AddCourseSmallChapters(k ...*KcCourseSmallCategory) *KcCourseChapterUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccuo.AddCourseSmallChapterIDs(ids...)
}

// Mutation returns the KcCourseChapterMutation object of the builder.
func (kccuo *KcCourseChapterUpdateOne) Mutation() *KcCourseChapterMutation {
	return kccuo.mutation
}

// ClearChapterCourse clears the "chapter_course" edge to the KcCourse entity.
func (kccuo *KcCourseChapterUpdateOne) ClearChapterCourse() *KcCourseChapterUpdateOne {
	kccuo.mutation.ClearChapterCourse()
	return kccuo
}

// ClearChapterSections clears all "chapter_sections" edges to the KcCourseSection entity.
func (kccuo *KcCourseChapterUpdateOne) ClearChapterSections() *KcCourseChapterUpdateOne {
	kccuo.mutation.ClearChapterSections()
	return kccuo
}

// RemoveChapterSectionIDs removes the "chapter_sections" edge to KcCourseSection entities by IDs.
func (kccuo *KcCourseChapterUpdateOne) RemoveChapterSectionIDs(ids ...int) *KcCourseChapterUpdateOne {
	kccuo.mutation.RemoveChapterSectionIDs(ids...)
	return kccuo
}

// RemoveChapterSections removes "chapter_sections" edges to KcCourseSection entities.
func (kccuo *KcCourseChapterUpdateOne) RemoveChapterSections(k ...*KcCourseSection) *KcCourseChapterUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccuo.RemoveChapterSectionIDs(ids...)
}

// ClearCourseSmallChapters clears all "course_small_chapters" edges to the KcCourseSmallCategory entity.
func (kccuo *KcCourseChapterUpdateOne) ClearCourseSmallChapters() *KcCourseChapterUpdateOne {
	kccuo.mutation.ClearCourseSmallChapters()
	return kccuo
}

// RemoveCourseSmallChapterIDs removes the "course_small_chapters" edge to KcCourseSmallCategory entities by IDs.
func (kccuo *KcCourseChapterUpdateOne) RemoveCourseSmallChapterIDs(ids ...int) *KcCourseChapterUpdateOne {
	kccuo.mutation.RemoveCourseSmallChapterIDs(ids...)
	return kccuo
}

// RemoveCourseSmallChapters removes "course_small_chapters" edges to KcCourseSmallCategory entities.
func (kccuo *KcCourseChapterUpdateOne) RemoveCourseSmallChapters(k ...*KcCourseSmallCategory) *KcCourseChapterUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccuo.RemoveCourseSmallChapterIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kccuo *KcCourseChapterUpdateOne) Select(field string, fields ...string) *KcCourseChapterUpdateOne {
	kccuo.fields = append([]string{field}, fields...)
	return kccuo
}

// Save executes the query and returns the updated KcCourseChapter entity.
func (kccuo *KcCourseChapterUpdateOne) Save(ctx context.Context) (*KcCourseChapter, error) {
	var (
		err  error
		node *KcCourseChapter
	)
	if len(kccuo.hooks) == 0 {
		node, err = kccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kccuo.mutation = mutation
			node, err = kccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kccuo.hooks) - 1; i >= 0; i-- {
			mut = kccuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kccuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kccuo *KcCourseChapterUpdateOne) SaveX(ctx context.Context) *KcCourseChapter {
	node, err := kccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kccuo *KcCourseChapterUpdateOne) Exec(ctx context.Context) error {
	_, err := kccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kccuo *KcCourseChapterUpdateOne) ExecX(ctx context.Context) {
	if err := kccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kccuo *KcCourseChapterUpdateOne) sqlSave(ctx context.Context) (_node *KcCourseChapter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kccoursechapter.Table,
			Columns: kccoursechapter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursechapter.FieldID,
			},
		},
	}
	id, ok := kccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KcCourseChapter.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kccoursechapter.FieldID)
		for _, f := range fields {
			if !kccoursechapter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kccoursechapter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kccuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursechapter.FieldTitle,
		})
	}
	if kccuo.mutation.ChapterCourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursechapter.ChapterCourseTable,
			Columns: []string{kccoursechapter.ChapterCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccuo.mutation.ChapterCourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursechapter.ChapterCourseTable,
			Columns: []string{kccoursechapter.ChapterCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kccuo.mutation.ChapterSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.ChapterSectionsTable,
			Columns: []string{kccoursechapter.ChapterSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccuo.mutation.RemovedChapterSectionsIDs(); len(nodes) > 0 && !kccuo.mutation.ChapterSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.ChapterSectionsTable,
			Columns: []string{kccoursechapter.ChapterSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccuo.mutation.ChapterSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.ChapterSectionsTable,
			Columns: []string{kccoursechapter.ChapterSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kccuo.mutation.CourseSmallChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.CourseSmallChaptersTable,
			Columns: []string{kccoursechapter.CourseSmallChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccuo.mutation.RemovedCourseSmallChaptersIDs(); len(nodes) > 0 && !kccuo.mutation.CourseSmallChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.CourseSmallChaptersTable,
			Columns: []string{kccoursechapter.CourseSmallChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kccuo.mutation.CourseSmallChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.CourseSmallChaptersTable,
			Columns: []string{kccoursechapter.CourseSmallChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KcCourseChapter{config: kccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kccoursechapter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

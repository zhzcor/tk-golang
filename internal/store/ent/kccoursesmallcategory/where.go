// Code generated by entc, DO NOT EDIT.

package kccoursesmallcategory

import (
	"time"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// SmallName applies equality check predicate on the "small_name" field. It's identical to SmallNameEQ.
func SmallName(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSmallName), v))
	})
}

// ViewingTime applies equality check predicate on the "viewing_time" field. It's identical to ViewingTimeEQ.
func ViewingTime(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViewingTime), v))
	})
}

// FinishType applies equality check predicate on the "finish_type" field. It's identical to FinishTypeEQ.
func FinishType(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishType), v))
	})
}

// TeachType applies equality check predicate on the "teach_type" field. It's identical to TeachTypeEQ.
func TeachType(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeachType), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// LiveSmallStart applies equality check predicate on the "live_small_start" field. It's identical to LiveSmallStartEQ.
func LiveSmallStart(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveSmallStart), v))
	})
}

// LiveSmallStatus applies equality check predicate on the "live_small_status" field. It's identical to LiveSmallStatusEQ.
func LiveSmallStatus(v int8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveSmallStatus), v))
	})
}

// LiveRoomID applies equality check predicate on the "live_room_id" field. It's identical to LiveRoomIDEQ.
func LiveRoomID(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveRoomID), v))
	})
}

// BackVideoID applies equality check predicate on the "back_video_id" field. It's identical to BackVideoIDEQ.
func BackVideoID(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackVideoID), v))
	})
}

// FalseVideoID applies equality check predicate on the "false_video_id" field. It's identical to FalseVideoIDEQ.
func FalseVideoID(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFalseVideoID), v))
	})
}

// OrderVideoID applies equality check predicate on the "order_video_id" field. It's identical to OrderVideoIDEQ.
func OrderVideoID(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderVideoID), v))
	})
}

// OrderVideoAttachID applies equality check predicate on the "order_video_attach_id" field. It's identical to OrderVideoAttachIDEQ.
func OrderVideoAttachID(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderVideoAttachID), v))
	})
}

// LiveSmallTime applies equality check predicate on the "live_small_time" field. It's identical to LiveSmallTimeEQ.
func LiveSmallTime(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveSmallTime), v))
	})
}

// PushStatus applies equality check predicate on the "push_status" field. It's identical to PushStatusEQ.
func PushStatus(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPushStatus), v))
	})
}

// LiveSmallRemark applies equality check predicate on the "live_small_remark" field. It's identical to LiveSmallRemarkEQ.
func LiveSmallRemark(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveSmallRemark), v))
	})
}

// CoursewareAttachID applies equality check predicate on the "courseware_attach_id" field. It's identical to CoursewareAttachIDEQ.
func CoursewareAttachID(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoursewareAttachID), v))
	})
}

// CoursewareName applies equality check predicate on the "courseware_name" field. It's identical to CoursewareNameEQ.
func CoursewareName(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoursewareName), v))
	})
}

// AttachmentCount applies equality check predicate on the "attachment_count" field. It's identical to AttachmentCountEQ.
func AttachmentCount(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttachmentCount), v))
	})
}

// QuestionCount applies equality check predicate on the "question_count" field. It's identical to QuestionCountEQ.
func QuestionCount(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionCount), v))
	})
}

// ExamCount applies equality check predicate on the "exam_count" field. It's identical to ExamCountEQ.
func ExamCount(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamCount), v))
	})
}

// HomeworkCount applies equality check predicate on the "homework_count" field. It's identical to HomeworkCountEQ.
func HomeworkCount(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHomeworkCount), v))
	})
}

// StudyCount applies equality check predicate on the "study_count" field. It's identical to StudyCountEQ.
func StudyCount(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudyCount), v))
	})
}

// FinishCount applies equality check predicate on the "finish_count" field. It's identical to FinishCountEQ.
func FinishCount(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishCount), v))
	})
}

// AverageViewDuration applies equality check predicate on the "average_view_duration" field. It's identical to AverageViewDurationEQ.
func AverageViewDuration(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAverageViewDuration), v))
	})
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// ChapterID applies equality check predicate on the "chapter_id" field. It's identical to ChapterIDEQ.
func ChapterID(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterID), v))
	})
}

// SectionID applies equality check predicate on the "section_id" field. It's identical to SectionIDEQ.
func SectionID(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSectionID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// SmallNameEQ applies the EQ predicate on the "small_name" field.
func SmallNameEQ(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSmallName), v))
	})
}

// SmallNameNEQ applies the NEQ predicate on the "small_name" field.
func SmallNameNEQ(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSmallName), v))
	})
}

// SmallNameIn applies the In predicate on the "small_name" field.
func SmallNameIn(vs ...string) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSmallName), v...))
	})
}

// SmallNameNotIn applies the NotIn predicate on the "small_name" field.
func SmallNameNotIn(vs ...string) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSmallName), v...))
	})
}

// SmallNameGT applies the GT predicate on the "small_name" field.
func SmallNameGT(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSmallName), v))
	})
}

// SmallNameGTE applies the GTE predicate on the "small_name" field.
func SmallNameGTE(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSmallName), v))
	})
}

// SmallNameLT applies the LT predicate on the "small_name" field.
func SmallNameLT(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSmallName), v))
	})
}

// SmallNameLTE applies the LTE predicate on the "small_name" field.
func SmallNameLTE(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSmallName), v))
	})
}

// SmallNameContains applies the Contains predicate on the "small_name" field.
func SmallNameContains(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSmallName), v))
	})
}

// SmallNameHasPrefix applies the HasPrefix predicate on the "small_name" field.
func SmallNameHasPrefix(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSmallName), v))
	})
}

// SmallNameHasSuffix applies the HasSuffix predicate on the "small_name" field.
func SmallNameHasSuffix(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSmallName), v))
	})
}

// SmallNameEqualFold applies the EqualFold predicate on the "small_name" field.
func SmallNameEqualFold(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSmallName), v))
	})
}

// SmallNameContainsFold applies the ContainsFold predicate on the "small_name" field.
func SmallNameContainsFold(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSmallName), v))
	})
}

// ViewingTimeEQ applies the EQ predicate on the "viewing_time" field.
func ViewingTimeEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViewingTime), v))
	})
}

// ViewingTimeNEQ applies the NEQ predicate on the "viewing_time" field.
func ViewingTimeNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldViewingTime), v))
	})
}

// ViewingTimeIn applies the In predicate on the "viewing_time" field.
func ViewingTimeIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldViewingTime), v...))
	})
}

// ViewingTimeNotIn applies the NotIn predicate on the "viewing_time" field.
func ViewingTimeNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldViewingTime), v...))
	})
}

// ViewingTimeGT applies the GT predicate on the "viewing_time" field.
func ViewingTimeGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldViewingTime), v))
	})
}

// ViewingTimeGTE applies the GTE predicate on the "viewing_time" field.
func ViewingTimeGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldViewingTime), v))
	})
}

// ViewingTimeLT applies the LT predicate on the "viewing_time" field.
func ViewingTimeLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldViewingTime), v))
	})
}

// ViewingTimeLTE applies the LTE predicate on the "viewing_time" field.
func ViewingTimeLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldViewingTime), v))
	})
}

// FinishTypeEQ applies the EQ predicate on the "finish_type" field.
func FinishTypeEQ(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishType), v))
	})
}

// FinishTypeNEQ applies the NEQ predicate on the "finish_type" field.
func FinishTypeNEQ(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinishType), v))
	})
}

// FinishTypeIn applies the In predicate on the "finish_type" field.
func FinishTypeIn(vs ...uint8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinishType), v...))
	})
}

// FinishTypeNotIn applies the NotIn predicate on the "finish_type" field.
func FinishTypeNotIn(vs ...uint8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinishType), v...))
	})
}

// FinishTypeGT applies the GT predicate on the "finish_type" field.
func FinishTypeGT(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinishType), v))
	})
}

// FinishTypeGTE applies the GTE predicate on the "finish_type" field.
func FinishTypeGTE(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinishType), v))
	})
}

// FinishTypeLT applies the LT predicate on the "finish_type" field.
func FinishTypeLT(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinishType), v))
	})
}

// FinishTypeLTE applies the LTE predicate on the "finish_type" field.
func FinishTypeLTE(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinishType), v))
	})
}

// TeachTypeEQ applies the EQ predicate on the "teach_type" field.
func TeachTypeEQ(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeachType), v))
	})
}

// TeachTypeNEQ applies the NEQ predicate on the "teach_type" field.
func TeachTypeNEQ(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeachType), v))
	})
}

// TeachTypeIn applies the In predicate on the "teach_type" field.
func TeachTypeIn(vs ...uint8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeachType), v...))
	})
}

// TeachTypeNotIn applies the NotIn predicate on the "teach_type" field.
func TeachTypeNotIn(vs ...uint8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeachType), v...))
	})
}

// TeachTypeGT applies the GT predicate on the "teach_type" field.
func TeachTypeGT(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeachType), v))
	})
}

// TeachTypeGTE applies the GTE predicate on the "teach_type" field.
func TeachTypeGTE(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeachType), v))
	})
}

// TeachTypeLT applies the LT predicate on the "teach_type" field.
func TeachTypeLT(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeachType), v))
	})
}

// TeachTypeLTE applies the LTE predicate on the "teach_type" field.
func TeachTypeLTE(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeachType), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// LiveSmallStartEQ applies the EQ predicate on the "live_small_start" field.
func LiveSmallStartEQ(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveSmallStart), v))
	})
}

// LiveSmallStartNEQ applies the NEQ predicate on the "live_small_start" field.
func LiveSmallStartNEQ(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiveSmallStart), v))
	})
}

// LiveSmallStartIn applies the In predicate on the "live_small_start" field.
func LiveSmallStartIn(vs ...time.Time) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLiveSmallStart), v...))
	})
}

// LiveSmallStartNotIn applies the NotIn predicate on the "live_small_start" field.
func LiveSmallStartNotIn(vs ...time.Time) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLiveSmallStart), v...))
	})
}

// LiveSmallStartGT applies the GT predicate on the "live_small_start" field.
func LiveSmallStartGT(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiveSmallStart), v))
	})
}

// LiveSmallStartGTE applies the GTE predicate on the "live_small_start" field.
func LiveSmallStartGTE(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiveSmallStart), v))
	})
}

// LiveSmallStartLT applies the LT predicate on the "live_small_start" field.
func LiveSmallStartLT(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiveSmallStart), v))
	})
}

// LiveSmallStartLTE applies the LTE predicate on the "live_small_start" field.
func LiveSmallStartLTE(v time.Time) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiveSmallStart), v))
	})
}

// LiveSmallStartIsNil applies the IsNil predicate on the "live_small_start" field.
func LiveSmallStartIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLiveSmallStart)))
	})
}

// LiveSmallStartNotNil applies the NotNil predicate on the "live_small_start" field.
func LiveSmallStartNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLiveSmallStart)))
	})
}

// LiveSmallStatusEQ applies the EQ predicate on the "live_small_status" field.
func LiveSmallStatusEQ(v int8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveSmallStatus), v))
	})
}

// LiveSmallStatusNEQ applies the NEQ predicate on the "live_small_status" field.
func LiveSmallStatusNEQ(v int8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiveSmallStatus), v))
	})
}

// LiveSmallStatusIn applies the In predicate on the "live_small_status" field.
func LiveSmallStatusIn(vs ...int8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLiveSmallStatus), v...))
	})
}

// LiveSmallStatusNotIn applies the NotIn predicate on the "live_small_status" field.
func LiveSmallStatusNotIn(vs ...int8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLiveSmallStatus), v...))
	})
}

// LiveSmallStatusGT applies the GT predicate on the "live_small_status" field.
func LiveSmallStatusGT(v int8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiveSmallStatus), v))
	})
}

// LiveSmallStatusGTE applies the GTE predicate on the "live_small_status" field.
func LiveSmallStatusGTE(v int8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiveSmallStatus), v))
	})
}

// LiveSmallStatusLT applies the LT predicate on the "live_small_status" field.
func LiveSmallStatusLT(v int8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiveSmallStatus), v))
	})
}

// LiveSmallStatusLTE applies the LTE predicate on the "live_small_status" field.
func LiveSmallStatusLTE(v int8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiveSmallStatus), v))
	})
}

// LiveRoomIDEQ applies the EQ predicate on the "live_room_id" field.
func LiveRoomIDEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveRoomID), v))
	})
}

// LiveRoomIDNEQ applies the NEQ predicate on the "live_room_id" field.
func LiveRoomIDNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiveRoomID), v))
	})
}

// LiveRoomIDIn applies the In predicate on the "live_room_id" field.
func LiveRoomIDIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLiveRoomID), v...))
	})
}

// LiveRoomIDNotIn applies the NotIn predicate on the "live_room_id" field.
func LiveRoomIDNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLiveRoomID), v...))
	})
}

// LiveRoomIDGT applies the GT predicate on the "live_room_id" field.
func LiveRoomIDGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiveRoomID), v))
	})
}

// LiveRoomIDGTE applies the GTE predicate on the "live_room_id" field.
func LiveRoomIDGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiveRoomID), v))
	})
}

// LiveRoomIDLT applies the LT predicate on the "live_room_id" field.
func LiveRoomIDLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiveRoomID), v))
	})
}

// LiveRoomIDLTE applies the LTE predicate on the "live_room_id" field.
func LiveRoomIDLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiveRoomID), v))
	})
}

// LiveRoomIDIsNil applies the IsNil predicate on the "live_room_id" field.
func LiveRoomIDIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLiveRoomID)))
	})
}

// LiveRoomIDNotNil applies the NotNil predicate on the "live_room_id" field.
func LiveRoomIDNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLiveRoomID)))
	})
}

// BackVideoIDEQ applies the EQ predicate on the "back_video_id" field.
func BackVideoIDEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackVideoID), v))
	})
}

// BackVideoIDNEQ applies the NEQ predicate on the "back_video_id" field.
func BackVideoIDNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBackVideoID), v))
	})
}

// BackVideoIDIn applies the In predicate on the "back_video_id" field.
func BackVideoIDIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBackVideoID), v...))
	})
}

// BackVideoIDNotIn applies the NotIn predicate on the "back_video_id" field.
func BackVideoIDNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBackVideoID), v...))
	})
}

// BackVideoIDGT applies the GT predicate on the "back_video_id" field.
func BackVideoIDGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBackVideoID), v))
	})
}

// BackVideoIDGTE applies the GTE predicate on the "back_video_id" field.
func BackVideoIDGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBackVideoID), v))
	})
}

// BackVideoIDLT applies the LT predicate on the "back_video_id" field.
func BackVideoIDLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBackVideoID), v))
	})
}

// BackVideoIDLTE applies the LTE predicate on the "back_video_id" field.
func BackVideoIDLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBackVideoID), v))
	})
}

// BackVideoIDIsNil applies the IsNil predicate on the "back_video_id" field.
func BackVideoIDIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBackVideoID)))
	})
}

// BackVideoIDNotNil applies the NotNil predicate on the "back_video_id" field.
func BackVideoIDNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBackVideoID)))
	})
}

// FalseVideoIDEQ applies the EQ predicate on the "false_video_id" field.
func FalseVideoIDEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFalseVideoID), v))
	})
}

// FalseVideoIDNEQ applies the NEQ predicate on the "false_video_id" field.
func FalseVideoIDNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFalseVideoID), v))
	})
}

// FalseVideoIDIn applies the In predicate on the "false_video_id" field.
func FalseVideoIDIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFalseVideoID), v...))
	})
}

// FalseVideoIDNotIn applies the NotIn predicate on the "false_video_id" field.
func FalseVideoIDNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFalseVideoID), v...))
	})
}

// FalseVideoIDGT applies the GT predicate on the "false_video_id" field.
func FalseVideoIDGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFalseVideoID), v))
	})
}

// FalseVideoIDGTE applies the GTE predicate on the "false_video_id" field.
func FalseVideoIDGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFalseVideoID), v))
	})
}

// FalseVideoIDLT applies the LT predicate on the "false_video_id" field.
func FalseVideoIDLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFalseVideoID), v))
	})
}

// FalseVideoIDLTE applies the LTE predicate on the "false_video_id" field.
func FalseVideoIDLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFalseVideoID), v))
	})
}

// FalseVideoIDIsNil applies the IsNil predicate on the "false_video_id" field.
func FalseVideoIDIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFalseVideoID)))
	})
}

// FalseVideoIDNotNil applies the NotNil predicate on the "false_video_id" field.
func FalseVideoIDNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFalseVideoID)))
	})
}

// OrderVideoIDEQ applies the EQ predicate on the "order_video_id" field.
func OrderVideoIDEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderVideoID), v))
	})
}

// OrderVideoIDNEQ applies the NEQ predicate on the "order_video_id" field.
func OrderVideoIDNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderVideoID), v))
	})
}

// OrderVideoIDIn applies the In predicate on the "order_video_id" field.
func OrderVideoIDIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderVideoID), v...))
	})
}

// OrderVideoIDNotIn applies the NotIn predicate on the "order_video_id" field.
func OrderVideoIDNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderVideoID), v...))
	})
}

// OrderVideoIDGT applies the GT predicate on the "order_video_id" field.
func OrderVideoIDGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderVideoID), v))
	})
}

// OrderVideoIDGTE applies the GTE predicate on the "order_video_id" field.
func OrderVideoIDGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderVideoID), v))
	})
}

// OrderVideoIDLT applies the LT predicate on the "order_video_id" field.
func OrderVideoIDLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderVideoID), v))
	})
}

// OrderVideoIDLTE applies the LTE predicate on the "order_video_id" field.
func OrderVideoIDLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderVideoID), v))
	})
}

// OrderVideoIDIsNil applies the IsNil predicate on the "order_video_id" field.
func OrderVideoIDIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderVideoID)))
	})
}

// OrderVideoIDNotNil applies the NotNil predicate on the "order_video_id" field.
func OrderVideoIDNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderVideoID)))
	})
}

// OrderVideoAttachIDEQ applies the EQ predicate on the "order_video_attach_id" field.
func OrderVideoAttachIDEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderVideoAttachID), v))
	})
}

// OrderVideoAttachIDNEQ applies the NEQ predicate on the "order_video_attach_id" field.
func OrderVideoAttachIDNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderVideoAttachID), v))
	})
}

// OrderVideoAttachIDIn applies the In predicate on the "order_video_attach_id" field.
func OrderVideoAttachIDIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderVideoAttachID), v...))
	})
}

// OrderVideoAttachIDNotIn applies the NotIn predicate on the "order_video_attach_id" field.
func OrderVideoAttachIDNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderVideoAttachID), v...))
	})
}

// OrderVideoAttachIDIsNil applies the IsNil predicate on the "order_video_attach_id" field.
func OrderVideoAttachIDIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderVideoAttachID)))
	})
}

// OrderVideoAttachIDNotNil applies the NotNil predicate on the "order_video_attach_id" field.
func OrderVideoAttachIDNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderVideoAttachID)))
	})
}

// LiveSmallTimeEQ applies the EQ predicate on the "live_small_time" field.
func LiveSmallTimeEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveSmallTime), v))
	})
}

// LiveSmallTimeNEQ applies the NEQ predicate on the "live_small_time" field.
func LiveSmallTimeNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiveSmallTime), v))
	})
}

// LiveSmallTimeIn applies the In predicate on the "live_small_time" field.
func LiveSmallTimeIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLiveSmallTime), v...))
	})
}

// LiveSmallTimeNotIn applies the NotIn predicate on the "live_small_time" field.
func LiveSmallTimeNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLiveSmallTime), v...))
	})
}

// LiveSmallTimeGT applies the GT predicate on the "live_small_time" field.
func LiveSmallTimeGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiveSmallTime), v))
	})
}

// LiveSmallTimeGTE applies the GTE predicate on the "live_small_time" field.
func LiveSmallTimeGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiveSmallTime), v))
	})
}

// LiveSmallTimeLT applies the LT predicate on the "live_small_time" field.
func LiveSmallTimeLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiveSmallTime), v))
	})
}

// LiveSmallTimeLTE applies the LTE predicate on the "live_small_time" field.
func LiveSmallTimeLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiveSmallTime), v))
	})
}

// PushStatusEQ applies the EQ predicate on the "push_status" field.
func PushStatusEQ(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPushStatus), v))
	})
}

// PushStatusNEQ applies the NEQ predicate on the "push_status" field.
func PushStatusNEQ(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPushStatus), v))
	})
}

// PushStatusIn applies the In predicate on the "push_status" field.
func PushStatusIn(vs ...uint8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPushStatus), v...))
	})
}

// PushStatusNotIn applies the NotIn predicate on the "push_status" field.
func PushStatusNotIn(vs ...uint8) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPushStatus), v...))
	})
}

// PushStatusGT applies the GT predicate on the "push_status" field.
func PushStatusGT(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPushStatus), v))
	})
}

// PushStatusGTE applies the GTE predicate on the "push_status" field.
func PushStatusGTE(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPushStatus), v))
	})
}

// PushStatusLT applies the LT predicate on the "push_status" field.
func PushStatusLT(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPushStatus), v))
	})
}

// PushStatusLTE applies the LTE predicate on the "push_status" field.
func PushStatusLTE(v uint8) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPushStatus), v))
	})
}

// LiveSmallRemarkEQ applies the EQ predicate on the "live_small_remark" field.
func LiveSmallRemarkEQ(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkNEQ applies the NEQ predicate on the "live_small_remark" field.
func LiveSmallRemarkNEQ(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkIn applies the In predicate on the "live_small_remark" field.
func LiveSmallRemarkIn(vs ...string) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLiveSmallRemark), v...))
	})
}

// LiveSmallRemarkNotIn applies the NotIn predicate on the "live_small_remark" field.
func LiveSmallRemarkNotIn(vs ...string) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLiveSmallRemark), v...))
	})
}

// LiveSmallRemarkGT applies the GT predicate on the "live_small_remark" field.
func LiveSmallRemarkGT(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkGTE applies the GTE predicate on the "live_small_remark" field.
func LiveSmallRemarkGTE(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkLT applies the LT predicate on the "live_small_remark" field.
func LiveSmallRemarkLT(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkLTE applies the LTE predicate on the "live_small_remark" field.
func LiveSmallRemarkLTE(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkContains applies the Contains predicate on the "live_small_remark" field.
func LiveSmallRemarkContains(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkHasPrefix applies the HasPrefix predicate on the "live_small_remark" field.
func LiveSmallRemarkHasPrefix(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkHasSuffix applies the HasSuffix predicate on the "live_small_remark" field.
func LiveSmallRemarkHasSuffix(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkEqualFold applies the EqualFold predicate on the "live_small_remark" field.
func LiveSmallRemarkEqualFold(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLiveSmallRemark), v))
	})
}

// LiveSmallRemarkContainsFold applies the ContainsFold predicate on the "live_small_remark" field.
func LiveSmallRemarkContainsFold(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLiveSmallRemark), v))
	})
}

// CoursewareAttachIDEQ applies the EQ predicate on the "courseware_attach_id" field.
func CoursewareAttachIDEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoursewareAttachID), v))
	})
}

// CoursewareAttachIDNEQ applies the NEQ predicate on the "courseware_attach_id" field.
func CoursewareAttachIDNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoursewareAttachID), v))
	})
}

// CoursewareAttachIDIn applies the In predicate on the "courseware_attach_id" field.
func CoursewareAttachIDIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoursewareAttachID), v...))
	})
}

// CoursewareAttachIDNotIn applies the NotIn predicate on the "courseware_attach_id" field.
func CoursewareAttachIDNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoursewareAttachID), v...))
	})
}

// CoursewareAttachIDIsNil applies the IsNil predicate on the "courseware_attach_id" field.
func CoursewareAttachIDIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoursewareAttachID)))
	})
}

// CoursewareAttachIDNotNil applies the NotNil predicate on the "courseware_attach_id" field.
func CoursewareAttachIDNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoursewareAttachID)))
	})
}

// CoursewareNameEQ applies the EQ predicate on the "courseware_name" field.
func CoursewareNameEQ(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameNEQ applies the NEQ predicate on the "courseware_name" field.
func CoursewareNameNEQ(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameIn applies the In predicate on the "courseware_name" field.
func CoursewareNameIn(vs ...string) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoursewareName), v...))
	})
}

// CoursewareNameNotIn applies the NotIn predicate on the "courseware_name" field.
func CoursewareNameNotIn(vs ...string) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoursewareName), v...))
	})
}

// CoursewareNameGT applies the GT predicate on the "courseware_name" field.
func CoursewareNameGT(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameGTE applies the GTE predicate on the "courseware_name" field.
func CoursewareNameGTE(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameLT applies the LT predicate on the "courseware_name" field.
func CoursewareNameLT(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameLTE applies the LTE predicate on the "courseware_name" field.
func CoursewareNameLTE(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameContains applies the Contains predicate on the "courseware_name" field.
func CoursewareNameContains(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameHasPrefix applies the HasPrefix predicate on the "courseware_name" field.
func CoursewareNameHasPrefix(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameHasSuffix applies the HasSuffix predicate on the "courseware_name" field.
func CoursewareNameHasSuffix(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameEqualFold applies the EqualFold predicate on the "courseware_name" field.
func CoursewareNameEqualFold(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCoursewareName), v))
	})
}

// CoursewareNameContainsFold applies the ContainsFold predicate on the "courseware_name" field.
func CoursewareNameContainsFold(v string) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCoursewareName), v))
	})
}

// AttachmentCountEQ applies the EQ predicate on the "attachment_count" field.
func AttachmentCountEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttachmentCount), v))
	})
}

// AttachmentCountNEQ applies the NEQ predicate on the "attachment_count" field.
func AttachmentCountNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttachmentCount), v))
	})
}

// AttachmentCountIn applies the In predicate on the "attachment_count" field.
func AttachmentCountIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAttachmentCount), v...))
	})
}

// AttachmentCountNotIn applies the NotIn predicate on the "attachment_count" field.
func AttachmentCountNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAttachmentCount), v...))
	})
}

// AttachmentCountGT applies the GT predicate on the "attachment_count" field.
func AttachmentCountGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAttachmentCount), v))
	})
}

// AttachmentCountGTE applies the GTE predicate on the "attachment_count" field.
func AttachmentCountGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAttachmentCount), v))
	})
}

// AttachmentCountLT applies the LT predicate on the "attachment_count" field.
func AttachmentCountLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAttachmentCount), v))
	})
}

// AttachmentCountLTE applies the LTE predicate on the "attachment_count" field.
func AttachmentCountLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAttachmentCount), v))
	})
}

// QuestionCountEQ applies the EQ predicate on the "question_count" field.
func QuestionCountEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountNEQ applies the NEQ predicate on the "question_count" field.
func QuestionCountNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountIn applies the In predicate on the "question_count" field.
func QuestionCountIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionCount), v...))
	})
}

// QuestionCountNotIn applies the NotIn predicate on the "question_count" field.
func QuestionCountNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionCount), v...))
	})
}

// QuestionCountGT applies the GT predicate on the "question_count" field.
func QuestionCountGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountGTE applies the GTE predicate on the "question_count" field.
func QuestionCountGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountLT applies the LT predicate on the "question_count" field.
func QuestionCountLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuestionCount), v))
	})
}

// QuestionCountLTE applies the LTE predicate on the "question_count" field.
func QuestionCountLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuestionCount), v))
	})
}

// ExamCountEQ applies the EQ predicate on the "exam_count" field.
func ExamCountEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamCount), v))
	})
}

// ExamCountNEQ applies the NEQ predicate on the "exam_count" field.
func ExamCountNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExamCount), v))
	})
}

// ExamCountIn applies the In predicate on the "exam_count" field.
func ExamCountIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExamCount), v...))
	})
}

// ExamCountNotIn applies the NotIn predicate on the "exam_count" field.
func ExamCountNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExamCount), v...))
	})
}

// ExamCountGT applies the GT predicate on the "exam_count" field.
func ExamCountGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExamCount), v))
	})
}

// ExamCountGTE applies the GTE predicate on the "exam_count" field.
func ExamCountGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExamCount), v))
	})
}

// ExamCountLT applies the LT predicate on the "exam_count" field.
func ExamCountLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExamCount), v))
	})
}

// ExamCountLTE applies the LTE predicate on the "exam_count" field.
func ExamCountLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExamCount), v))
	})
}

// HomeworkCountEQ applies the EQ predicate on the "homework_count" field.
func HomeworkCountEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHomeworkCount), v))
	})
}

// HomeworkCountNEQ applies the NEQ predicate on the "homework_count" field.
func HomeworkCountNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHomeworkCount), v))
	})
}

// HomeworkCountIn applies the In predicate on the "homework_count" field.
func HomeworkCountIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHomeworkCount), v...))
	})
}

// HomeworkCountNotIn applies the NotIn predicate on the "homework_count" field.
func HomeworkCountNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHomeworkCount), v...))
	})
}

// HomeworkCountGT applies the GT predicate on the "homework_count" field.
func HomeworkCountGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHomeworkCount), v))
	})
}

// HomeworkCountGTE applies the GTE predicate on the "homework_count" field.
func HomeworkCountGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHomeworkCount), v))
	})
}

// HomeworkCountLT applies the LT predicate on the "homework_count" field.
func HomeworkCountLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHomeworkCount), v))
	})
}

// HomeworkCountLTE applies the LTE predicate on the "homework_count" field.
func HomeworkCountLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHomeworkCount), v))
	})
}

// StudyCountEQ applies the EQ predicate on the "study_count" field.
func StudyCountEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStudyCount), v))
	})
}

// StudyCountNEQ applies the NEQ predicate on the "study_count" field.
func StudyCountNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStudyCount), v))
	})
}

// StudyCountIn applies the In predicate on the "study_count" field.
func StudyCountIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStudyCount), v...))
	})
}

// StudyCountNotIn applies the NotIn predicate on the "study_count" field.
func StudyCountNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStudyCount), v...))
	})
}

// StudyCountGT applies the GT predicate on the "study_count" field.
func StudyCountGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStudyCount), v))
	})
}

// StudyCountGTE applies the GTE predicate on the "study_count" field.
func StudyCountGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStudyCount), v))
	})
}

// StudyCountLT applies the LT predicate on the "study_count" field.
func StudyCountLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStudyCount), v))
	})
}

// StudyCountLTE applies the LTE predicate on the "study_count" field.
func StudyCountLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStudyCount), v))
	})
}

// FinishCountEQ applies the EQ predicate on the "finish_count" field.
func FinishCountEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishCount), v))
	})
}

// FinishCountNEQ applies the NEQ predicate on the "finish_count" field.
func FinishCountNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinishCount), v))
	})
}

// FinishCountIn applies the In predicate on the "finish_count" field.
func FinishCountIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinishCount), v...))
	})
}

// FinishCountNotIn applies the NotIn predicate on the "finish_count" field.
func FinishCountNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinishCount), v...))
	})
}

// FinishCountGT applies the GT predicate on the "finish_count" field.
func FinishCountGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinishCount), v))
	})
}

// FinishCountGTE applies the GTE predicate on the "finish_count" field.
func FinishCountGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinishCount), v))
	})
}

// FinishCountLT applies the LT predicate on the "finish_count" field.
func FinishCountLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinishCount), v))
	})
}

// FinishCountLTE applies the LTE predicate on the "finish_count" field.
func FinishCountLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinishCount), v))
	})
}

// AverageViewDurationEQ applies the EQ predicate on the "average_view_duration" field.
func AverageViewDurationEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAverageViewDuration), v))
	})
}

// AverageViewDurationNEQ applies the NEQ predicate on the "average_view_duration" field.
func AverageViewDurationNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAverageViewDuration), v))
	})
}

// AverageViewDurationIn applies the In predicate on the "average_view_duration" field.
func AverageViewDurationIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAverageViewDuration), v...))
	})
}

// AverageViewDurationNotIn applies the NotIn predicate on the "average_view_duration" field.
func AverageViewDurationNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAverageViewDuration), v...))
	})
}

// AverageViewDurationGT applies the GT predicate on the "average_view_duration" field.
func AverageViewDurationGT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAverageViewDuration), v))
	})
}

// AverageViewDurationGTE applies the GTE predicate on the "average_view_duration" field.
func AverageViewDurationGTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAverageViewDuration), v))
	})
}

// AverageViewDurationLT applies the LT predicate on the "average_view_duration" field.
func AverageViewDurationLT(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAverageViewDuration), v))
	})
}

// AverageViewDurationLTE applies the LTE predicate on the "average_view_duration" field.
func AverageViewDurationLTE(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAverageViewDuration), v))
	})
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseID), v))
	})
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourseID), v...))
	})
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourseID), v...))
	})
}

// CourseIDIsNil applies the IsNil predicate on the "course_id" field.
func CourseIDIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCourseID)))
	})
}

// CourseIDNotNil applies the NotNil predicate on the "course_id" field.
func CourseIDNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCourseID)))
	})
}

// ChapterIDEQ applies the EQ predicate on the "chapter_id" field.
func ChapterIDEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterID), v))
	})
}

// ChapterIDNEQ applies the NEQ predicate on the "chapter_id" field.
func ChapterIDNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterID), v))
	})
}

// ChapterIDIn applies the In predicate on the "chapter_id" field.
func ChapterIDIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterID), v...))
	})
}

// ChapterIDNotIn applies the NotIn predicate on the "chapter_id" field.
func ChapterIDNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterID), v...))
	})
}

// ChapterIDIsNil applies the IsNil predicate on the "chapter_id" field.
func ChapterIDIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterID)))
	})
}

// ChapterIDNotNil applies the NotNil predicate on the "chapter_id" field.
func ChapterIDNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterID)))
	})
}

// SectionIDEQ applies the EQ predicate on the "section_id" field.
func SectionIDEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSectionID), v))
	})
}

// SectionIDNEQ applies the NEQ predicate on the "section_id" field.
func SectionIDNEQ(v int) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSectionID), v))
	})
}

// SectionIDIn applies the In predicate on the "section_id" field.
func SectionIDIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSectionID), v...))
	})
}

// SectionIDNotIn applies the NotIn predicate on the "section_id" field.
func SectionIDNotIn(vs ...int) predicate.KcCourseSmallCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSectionID), v...))
	})
}

// SectionIDIsNil applies the IsNil predicate on the "section_id" field.
func SectionIDIsNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSectionID)))
	})
}

// SectionIDNotNil applies the NotNil predicate on the "section_id" field.
func SectionIDNotNil() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSectionID)))
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.KcCourse) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChapter applies the HasEdge predicate on the "chapter" edge.
func HasChapter() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChapterTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChapterTable, ChapterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChapterWith applies the HasEdge predicate on the "chapter" edge with a given conditions (other predicates).
func HasChapterWith(preds ...predicate.KcCourseChapter) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChapterInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChapterTable, ChapterColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSection applies the HasEdge predicate on the "section" edge.
func HasSection() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SectionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SectionTable, SectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSectionWith applies the HasEdge predicate on the "section" edge with a given conditions (other predicates).
func HasSectionWith(preds ...predicate.KcCourseSection) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SectionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SectionTable, SectionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourseSmallCategoryAttachments applies the HasEdge predicate on the "course_small_category_attachments" edge.
func HasCourseSmallCategoryAttachments() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseSmallCategoryAttachmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseSmallCategoryAttachmentsTable, CourseSmallCategoryAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseSmallCategoryAttachmentsWith applies the HasEdge predicate on the "course_small_category_attachments" edge with a given conditions (other predicates).
func HasCourseSmallCategoryAttachmentsWith(preds ...predicate.KcSmallCategoryAttachment) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseSmallCategoryAttachmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseSmallCategoryAttachmentsTable, CourseSmallCategoryAttachmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourseSmallCategoryExampapers applies the HasEdge predicate on the "course_small_category_exampapers" edge.
func HasCourseSmallCategoryExampapers() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseSmallCategoryExampapersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseSmallCategoryExampapersTable, CourseSmallCategoryExampapersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseSmallCategoryExampapersWith applies the HasEdge predicate on the "course_small_category_exampapers" edge with a given conditions (other predicates).
func HasCourseSmallCategoryExampapersWith(preds ...predicate.KcSmallCategoryExamPaper) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseSmallCategoryExampapersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseSmallCategoryExampapersTable, CourseSmallCategoryExampapersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourseSmallCategoryQuestions applies the HasEdge predicate on the "course_small_category_questions" edge.
func HasCourseSmallCategoryQuestions() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseSmallCategoryQuestionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseSmallCategoryQuestionsTable, CourseSmallCategoryQuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseSmallCategoryQuestionsWith applies the HasEdge predicate on the "course_small_category_questions" edge with a given conditions (other predicates).
func HasCourseSmallCategoryQuestionsWith(preds ...predicate.KcSmallCategoryQuestion) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseSmallCategoryQuestionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseSmallCategoryQuestionsTable, CourseSmallCategoryQuestionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourseAppraiseSmalls applies the HasEdge predicate on the "course_appraise_smalls" edge.
func HasCourseAppraiseSmalls() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseAppraiseSmallsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseAppraiseSmallsTable, CourseAppraiseSmallsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseAppraiseSmallsWith applies the HasEdge predicate on the "course_appraise_smalls" edge with a given conditions (other predicates).
func HasCourseAppraiseSmallsWith(preds ...predicate.UserCourseAppraise) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseAppraiseSmallsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseAppraiseSmallsTable, CourseAppraiseSmallsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVideoRecordSmall applies the HasEdge predicate on the "video_record_small" edge.
func HasVideoRecordSmall() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VideoRecordSmallTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideoRecordSmallTable, VideoRecordSmallColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoRecordSmallWith applies the HasEdge predicate on the "video_record_small" edge with a given conditions (other predicates).
func HasVideoRecordSmallWith(preds ...predicate.VideoRecord) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VideoRecordSmallInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideoRecordSmallTable, VideoRecordSmallColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCsAttachment applies the HasEdge predicate on the "cs_attachment" edge.
func HasCsAttachment() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CsAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CsAttachmentTable, CsAttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCsAttachmentWith applies the HasEdge predicate on the "cs_attachment" edge with a given conditions (other predicates).
func HasCsAttachmentWith(preds ...predicate.Attachment) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CsAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CsAttachmentTable, CsAttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOdAttachment applies the HasEdge predicate on the "od_attachment" edge.
func HasOdAttachment() predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OdAttachmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OdAttachmentTable, OdAttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOdAttachmentWith applies the HasEdge predicate on the "od_attachment" edge with a given conditions (other predicates).
func HasOdAttachmentWith(preds ...predicate.Attachment) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OdAttachmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OdAttachmentTable, OdAttachmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KcCourseSmallCategory) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KcCourseSmallCategory) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KcCourseSmallCategory) predicate.KcCourseSmallCategory {
	return predicate.KcCourseSmallCategory(func(s *sql.Selector) {
		p(s.Not())
	})
}

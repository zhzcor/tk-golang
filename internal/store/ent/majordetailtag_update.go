// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/majordetail"
	"gserver/internal/store/ent/majordetailtag"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MajorDetailTagUpdate is the builder for updating MajorDetailTag entities.
type MajorDetailTagUpdate struct {
	config
	hooks    []Hook
	mutation *MajorDetailTagMutation
}

// Where adds a new predicate for the MajorDetailTagUpdate builder.
func (mdtu *MajorDetailTagUpdate) Where(ps ...predicate.MajorDetailTag) *MajorDetailTagUpdate {
	mdtu.mutation.predicates = append(mdtu.mutation.predicates, ps...)
	return mdtu
}

// SetUUID sets the "uuid" field.
func (mdtu *MajorDetailTagUpdate) SetUUID(s string) *MajorDetailTagUpdate {
	mdtu.mutation.SetUUID(s)
	return mdtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mdtu *MajorDetailTagUpdate) SetUpdatedAt(t time.Time) *MajorDetailTagUpdate {
	mdtu.mutation.SetUpdatedAt(t)
	return mdtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mdtu *MajorDetailTagUpdate) ClearUpdatedAt() *MajorDetailTagUpdate {
	mdtu.mutation.ClearUpdatedAt()
	return mdtu
}

// SetDeletedAt sets the "deleted_at" field.
func (mdtu *MajorDetailTagUpdate) SetDeletedAt(t time.Time) *MajorDetailTagUpdate {
	mdtu.mutation.SetDeletedAt(t)
	return mdtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mdtu *MajorDetailTagUpdate) SetNillableDeletedAt(t *time.Time) *MajorDetailTagUpdate {
	if t != nil {
		mdtu.SetDeletedAt(*t)
	}
	return mdtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mdtu *MajorDetailTagUpdate) ClearDeletedAt() *MajorDetailTagUpdate {
	mdtu.mutation.ClearDeletedAt()
	return mdtu
}

// SetName sets the "name" field.
func (mdtu *MajorDetailTagUpdate) SetName(s string) *MajorDetailTagUpdate {
	mdtu.mutation.SetName(s)
	return mdtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mdtu *MajorDetailTagUpdate) SetNillableName(s *string) *MajorDetailTagUpdate {
	if s != nil {
		mdtu.SetName(*s)
	}
	return mdtu
}

// SetMajorDetailID sets the "major_detail_id" field.
func (mdtu *MajorDetailTagUpdate) SetMajorDetailID(i int) *MajorDetailTagUpdate {
	mdtu.mutation.ResetMajorDetailID()
	mdtu.mutation.SetMajorDetailID(i)
	return mdtu
}

// SetNillableMajorDetailID sets the "major_detail_id" field if the given value is not nil.
func (mdtu *MajorDetailTagUpdate) SetNillableMajorDetailID(i *int) *MajorDetailTagUpdate {
	if i != nil {
		mdtu.SetMajorDetailID(*i)
	}
	return mdtu
}

// ClearMajorDetailID clears the value of the "major_detail_id" field.
func (mdtu *MajorDetailTagUpdate) ClearMajorDetailID() *MajorDetailTagUpdate {
	mdtu.mutation.ClearMajorDetailID()
	return mdtu
}

// SetMajorDetail sets the "major_detail" edge to the MajorDetail entity.
func (mdtu *MajorDetailTagUpdate) SetMajorDetail(m *MajorDetail) *MajorDetailTagUpdate {
	return mdtu.SetMajorDetailID(m.ID)
}

// Mutation returns the MajorDetailTagMutation object of the builder.
func (mdtu *MajorDetailTagUpdate) Mutation() *MajorDetailTagMutation {
	return mdtu.mutation
}

// ClearMajorDetail clears the "major_detail" edge to the MajorDetail entity.
func (mdtu *MajorDetailTagUpdate) ClearMajorDetail() *MajorDetailTagUpdate {
	mdtu.mutation.ClearMajorDetail()
	return mdtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mdtu *MajorDetailTagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mdtu.defaults()
	if len(mdtu.hooks) == 0 {
		affected, err = mdtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MajorDetailTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mdtu.mutation = mutation
			affected, err = mdtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mdtu.hooks) - 1; i >= 0; i-- {
			mut = mdtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mdtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mdtu *MajorDetailTagUpdate) SaveX(ctx context.Context) int {
	affected, err := mdtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdtu *MajorDetailTagUpdate) Exec(ctx context.Context) error {
	_, err := mdtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdtu *MajorDetailTagUpdate) ExecX(ctx context.Context) {
	if err := mdtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mdtu *MajorDetailTagUpdate) defaults() {
	if _, ok := mdtu.mutation.UpdatedAt(); !ok && !mdtu.mutation.UpdatedAtCleared() {
		v := majordetailtag.UpdateDefaultUpdatedAt()
		mdtu.mutation.SetUpdatedAt(v)
	}
}

func (mdtu *MajorDetailTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   majordetailtag.Table,
			Columns: majordetailtag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: majordetailtag.FieldID,
			},
		},
	}
	if ps := mdtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mdtu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetailtag.FieldUUID,
		})
	}
	if mdtu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetailtag.FieldCreatedAt,
		})
	}
	if value, ok := mdtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetailtag.FieldUpdatedAt,
		})
	}
	if mdtu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetailtag.FieldUpdatedAt,
		})
	}
	if value, ok := mdtu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetailtag.FieldDeletedAt,
		})
	}
	if mdtu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetailtag.FieldDeletedAt,
		})
	}
	if value, ok := mdtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetailtag.FieldName,
		})
	}
	if mdtu.mutation.MajorDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetailtag.MajorDetailTable,
			Columns: []string{majordetailtag.MajorDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdtu.mutation.MajorDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetailtag.MajorDetailTable,
			Columns: []string{majordetailtag.MajorDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mdtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{majordetailtag.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MajorDetailTagUpdateOne is the builder for updating a single MajorDetailTag entity.
type MajorDetailTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MajorDetailTagMutation
}

// SetUUID sets the "uuid" field.
func (mdtuo *MajorDetailTagUpdateOne) SetUUID(s string) *MajorDetailTagUpdateOne {
	mdtuo.mutation.SetUUID(s)
	return mdtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mdtuo *MajorDetailTagUpdateOne) SetUpdatedAt(t time.Time) *MajorDetailTagUpdateOne {
	mdtuo.mutation.SetUpdatedAt(t)
	return mdtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mdtuo *MajorDetailTagUpdateOne) ClearUpdatedAt() *MajorDetailTagUpdateOne {
	mdtuo.mutation.ClearUpdatedAt()
	return mdtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mdtuo *MajorDetailTagUpdateOne) SetDeletedAt(t time.Time) *MajorDetailTagUpdateOne {
	mdtuo.mutation.SetDeletedAt(t)
	return mdtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mdtuo *MajorDetailTagUpdateOne) SetNillableDeletedAt(t *time.Time) *MajorDetailTagUpdateOne {
	if t != nil {
		mdtuo.SetDeletedAt(*t)
	}
	return mdtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mdtuo *MajorDetailTagUpdateOne) ClearDeletedAt() *MajorDetailTagUpdateOne {
	mdtuo.mutation.ClearDeletedAt()
	return mdtuo
}

// SetName sets the "name" field.
func (mdtuo *MajorDetailTagUpdateOne) SetName(s string) *MajorDetailTagUpdateOne {
	mdtuo.mutation.SetName(s)
	return mdtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mdtuo *MajorDetailTagUpdateOne) SetNillableName(s *string) *MajorDetailTagUpdateOne {
	if s != nil {
		mdtuo.SetName(*s)
	}
	return mdtuo
}

// SetMajorDetailID sets the "major_detail_id" field.
func (mdtuo *MajorDetailTagUpdateOne) SetMajorDetailID(i int) *MajorDetailTagUpdateOne {
	mdtuo.mutation.ResetMajorDetailID()
	mdtuo.mutation.SetMajorDetailID(i)
	return mdtuo
}

// SetNillableMajorDetailID sets the "major_detail_id" field if the given value is not nil.
func (mdtuo *MajorDetailTagUpdateOne) SetNillableMajorDetailID(i *int) *MajorDetailTagUpdateOne {
	if i != nil {
		mdtuo.SetMajorDetailID(*i)
	}
	return mdtuo
}

// ClearMajorDetailID clears the value of the "major_detail_id" field.
func (mdtuo *MajorDetailTagUpdateOne) ClearMajorDetailID() *MajorDetailTagUpdateOne {
	mdtuo.mutation.ClearMajorDetailID()
	return mdtuo
}

// SetMajorDetail sets the "major_detail" edge to the MajorDetail entity.
func (mdtuo *MajorDetailTagUpdateOne) SetMajorDetail(m *MajorDetail) *MajorDetailTagUpdateOne {
	return mdtuo.SetMajorDetailID(m.ID)
}

// Mutation returns the MajorDetailTagMutation object of the builder.
func (mdtuo *MajorDetailTagUpdateOne) Mutation() *MajorDetailTagMutation {
	return mdtuo.mutation
}

// ClearMajorDetail clears the "major_detail" edge to the MajorDetail entity.
func (mdtuo *MajorDetailTagUpdateOne) ClearMajorDetail() *MajorDetailTagUpdateOne {
	mdtuo.mutation.ClearMajorDetail()
	return mdtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mdtuo *MajorDetailTagUpdateOne) Select(field string, fields ...string) *MajorDetailTagUpdateOne {
	mdtuo.fields = append([]string{field}, fields...)
	return mdtuo
}

// Save executes the query and returns the updated MajorDetailTag entity.
func (mdtuo *MajorDetailTagUpdateOne) Save(ctx context.Context) (*MajorDetailTag, error) {
	var (
		err  error
		node *MajorDetailTag
	)
	mdtuo.defaults()
	if len(mdtuo.hooks) == 0 {
		node, err = mdtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MajorDetailTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mdtuo.mutation = mutation
			node, err = mdtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mdtuo.hooks) - 1; i >= 0; i-- {
			mut = mdtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mdtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mdtuo *MajorDetailTagUpdateOne) SaveX(ctx context.Context) *MajorDetailTag {
	node, err := mdtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mdtuo *MajorDetailTagUpdateOne) Exec(ctx context.Context) error {
	_, err := mdtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdtuo *MajorDetailTagUpdateOne) ExecX(ctx context.Context) {
	if err := mdtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mdtuo *MajorDetailTagUpdateOne) defaults() {
	if _, ok := mdtuo.mutation.UpdatedAt(); !ok && !mdtuo.mutation.UpdatedAtCleared() {
		v := majordetailtag.UpdateDefaultUpdatedAt()
		mdtuo.mutation.SetUpdatedAt(v)
	}
}

func (mdtuo *MajorDetailTagUpdateOne) sqlSave(ctx context.Context) (_node *MajorDetailTag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   majordetailtag.Table,
			Columns: majordetailtag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: majordetailtag.FieldID,
			},
		},
	}
	id, ok := mdtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MajorDetailTag.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mdtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, majordetailtag.FieldID)
		for _, f := range fields {
			if !majordetailtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != majordetailtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mdtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mdtuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetailtag.FieldUUID,
		})
	}
	if mdtuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetailtag.FieldCreatedAt,
		})
	}
	if value, ok := mdtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetailtag.FieldUpdatedAt,
		})
	}
	if mdtuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetailtag.FieldUpdatedAt,
		})
	}
	if value, ok := mdtuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: majordetailtag.FieldDeletedAt,
		})
	}
	if mdtuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: majordetailtag.FieldDeletedAt,
		})
	}
	if value, ok := mdtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: majordetailtag.FieldName,
		})
	}
	if mdtuo.mutation.MajorDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetailtag.MajorDetailTable,
			Columns: []string{majordetailtag.MajorDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdtuo.mutation.MajorDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   majordetailtag.MajorDetailTable,
			Columns: []string{majordetailtag.MajorDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: majordetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MajorDetailTag{config: mdtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mdtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{majordetailtag.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/tkquestion"
	"gserver/internal/store/ent/tkuserwrongquestionrecode"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TkUserWrongQuestionRecode is the model entity for the TkUserWrongQuestionRecode schema.
type TkUserWrongQuestionRecode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int `json:"user_id"`
	// QuestionID holds the value of the "question_id" field.
	// 题目id
	QuestionID int `json:"question_id"`
	// QuestionBankID holds the value of the "question_bank_id" field.
	// 题库id
	QuestionBankID int `json:"question_bank_id"`
	// Answer holds the value of the "answer" field.
	// 答案
	Answer string `json:"answer"`
	// WrongExamType holds the value of the "wrong_exam_type" field.
	// 试卷题目分类，1：模拟考试，2：章节练习，3：历年真题，4：通关必做300题，5：考前密押卷
	WrongExamType int `json:"wrong_exam_type"`
	// WrongQuestionType holds the value of the "wrong_question_type" field.
	// 题目类型，1：单选题，2：多选题，3：判断题，4：简答题，5：材料题
	WrongQuestionType int `json:"wrong_question_type"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkUserWrongQuestionRecodeQuery when eager-loading is set.
	Edges TkUserWrongQuestionRecodeEdges `json:"edges"`
}

// TkUserWrongQuestionRecodeEdges holds the relations/edges for other nodes in the graph.
type TkUserWrongQuestionRecodeEdges struct {
	// QuestionWrong holds the value of the question_wrong edge.
	QuestionWrong *TkQuestion `json:"question_wrong,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionWrongOrErr returns the QuestionWrong value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserWrongQuestionRecodeEdges) QuestionWrongOrErr() (*TkQuestion, error) {
	if e.loadedTypes[0] {
		if e.QuestionWrong == nil {
			// The edge question_wrong was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestion.Label}
		}
		return e.QuestionWrong, nil
	}
	return nil, &NotLoadedError{edge: "question_wrong"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkUserWrongQuestionRecode) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkuserwrongquestionrecode.FieldID, tkuserwrongquestionrecode.FieldUserID, tkuserwrongquestionrecode.FieldQuestionID, tkuserwrongquestionrecode.FieldQuestionBankID, tkuserwrongquestionrecode.FieldWrongExamType, tkuserwrongquestionrecode.FieldWrongQuestionType:
			values[i] = new(sql.NullInt64)
		case tkuserwrongquestionrecode.FieldUUID, tkuserwrongquestionrecode.FieldAnswer:
			values[i] = new(sql.NullString)
		case tkuserwrongquestionrecode.FieldCreatedAt, tkuserwrongquestionrecode.FieldUpdatedAt, tkuserwrongquestionrecode.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkUserWrongQuestionRecode", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkUserWrongQuestionRecode fields.
func (tuwqr *TkUserWrongQuestionRecode) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkuserwrongquestionrecode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tuwqr.ID = int(value.Int64)
		case tkuserwrongquestionrecode.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tuwqr.UUID = value.String
			}
		case tkuserwrongquestionrecode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tuwqr.CreatedAt = new(time.Time)
				*tuwqr.CreatedAt = value.Time
			}
		case tkuserwrongquestionrecode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tuwqr.UpdatedAt = new(time.Time)
				*tuwqr.UpdatedAt = value.Time
			}
		case tkuserwrongquestionrecode.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tuwqr.DeletedAt = new(time.Time)
				*tuwqr.DeletedAt = value.Time
			}
		case tkuserwrongquestionrecode.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tuwqr.UserID = int(value.Int64)
			}
		case tkuserwrongquestionrecode.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				tuwqr.QuestionID = int(value.Int64)
			}
		case tkuserwrongquestionrecode.FieldQuestionBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_bank_id", values[i])
			} else if value.Valid {
				tuwqr.QuestionBankID = int(value.Int64)
			}
		case tkuserwrongquestionrecode.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				tuwqr.Answer = value.String
			}
		case tkuserwrongquestionrecode.FieldWrongExamType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wrong_exam_type", values[i])
			} else if value.Valid {
				tuwqr.WrongExamType = int(value.Int64)
			}
		case tkuserwrongquestionrecode.FieldWrongQuestionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wrong_question_type", values[i])
			} else if value.Valid {
				tuwqr.WrongQuestionType = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestionWrong queries the "question_wrong" edge of the TkUserWrongQuestionRecode entity.
func (tuwqr *TkUserWrongQuestionRecode) QueryQuestionWrong() *TkQuestionQuery {
	return (&TkUserWrongQuestionRecodeClient{config: tuwqr.config}).QueryQuestionWrong(tuwqr)
}

// Update returns a builder for updating this TkUserWrongQuestionRecode.
// Note that you need to call TkUserWrongQuestionRecode.Unwrap() before calling this method if this TkUserWrongQuestionRecode
// was returned from a transaction, and the transaction was committed or rolled back.
func (tuwqr *TkUserWrongQuestionRecode) Update() *TkUserWrongQuestionRecodeUpdateOne {
	return (&TkUserWrongQuestionRecodeClient{config: tuwqr.config}).UpdateOne(tuwqr)
}

// Unwrap unwraps the TkUserWrongQuestionRecode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tuwqr *TkUserWrongQuestionRecode) Unwrap() *TkUserWrongQuestionRecode {
	tx, ok := tuwqr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkUserWrongQuestionRecode is not a transactional entity")
	}
	tuwqr.config.driver = tx.drv
	return tuwqr
}

// String implements the fmt.Stringer.
func (tuwqr *TkUserWrongQuestionRecode) String() string {
	var builder strings.Builder
	builder.WriteString("TkUserWrongQuestionRecode(")
	builder.WriteString(fmt.Sprintf("id=%v", tuwqr.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tuwqr.UUID)
	if v := tuwqr.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tuwqr.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tuwqr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", tuwqr.UserID))
	builder.WriteString(", question_id=")
	builder.WriteString(fmt.Sprintf("%v", tuwqr.QuestionID))
	builder.WriteString(", question_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", tuwqr.QuestionBankID))
	builder.WriteString(", answer=")
	builder.WriteString(tuwqr.Answer)
	builder.WriteString(", wrong_exam_type=")
	builder.WriteString(fmt.Sprintf("%v", tuwqr.WrongExamType))
	builder.WriteString(", wrong_question_type=")
	builder.WriteString(fmt.Sprintf("%v", tuwqr.WrongQuestionType))
	builder.WriteByte(')')
	return builder.String()
}

// TkUserWrongQuestionRecodes is a parsable slice of TkUserWrongQuestionRecode.
type TkUserWrongQuestionRecodes []*TkUserWrongQuestionRecode

func (tuwqr TkUserWrongQuestionRecodes) config(cfg config) {
	for _i := range tuwqr {
		tuwqr[_i].config = cfg
	}
}

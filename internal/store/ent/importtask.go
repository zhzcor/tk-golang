// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/importtask"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ImportTask is the model entity for the ImportTask schema.
type ImportTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// ImportName holds the value of the "import_name" field.
	// 名称
	ImportName string `json:"import_name"`
	// Status holds the value of the "status" field.
	// 状态 1：未开始，2：导入中，3：完成
	Status uint8 `json:"status"`
	// Path holds the value of the "path" field.
	// 路径
	Path string `json:"path"`
	// Total holds the value of the "total" field.
	// 总数
	Total int `json:"total"`
	// CreatedAdminID holds the value of the "created_admin_id" field.
	// 创建人id
	CreatedAdminID int `json:"created_admin_id"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImportTask) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case importtask.FieldID, importtask.FieldStatus, importtask.FieldTotal, importtask.FieldCreatedAdminID:
			values[i] = new(sql.NullInt64)
		case importtask.FieldUUID, importtask.FieldImportName, importtask.FieldPath, importtask.FieldRemark:
			values[i] = new(sql.NullString)
		case importtask.FieldCreatedAt, importtask.FieldUpdatedAt, importtask.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ImportTask", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImportTask fields.
func (it *ImportTask) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case importtask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			it.ID = int(value.Int64)
		case importtask.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				it.UUID = value.String
			}
		case importtask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				it.CreatedAt = new(time.Time)
				*it.CreatedAt = value.Time
			}
		case importtask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				it.UpdatedAt = new(time.Time)
				*it.UpdatedAt = value.Time
			}
		case importtask.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				it.DeletedAt = new(time.Time)
				*it.DeletedAt = value.Time
			}
		case importtask.FieldImportName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field import_name", values[i])
			} else if value.Valid {
				it.ImportName = value.String
			}
		case importtask.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				it.Status = uint8(value.Int64)
			}
		case importtask.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				it.Path = value.String
			}
		case importtask.FieldTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				it.Total = int(value.Int64)
			}
		case importtask.FieldCreatedAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_admin_id", values[i])
			} else if value.Valid {
				it.CreatedAdminID = int(value.Int64)
			}
		case importtask.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				it.Remark = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ImportTask.
// Note that you need to call ImportTask.Unwrap() before calling this method if this ImportTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (it *ImportTask) Update() *ImportTaskUpdateOne {
	return (&ImportTaskClient{config: it.config}).UpdateOne(it)
}

// Unwrap unwraps the ImportTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (it *ImportTask) Unwrap() *ImportTask {
	tx, ok := it.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImportTask is not a transactional entity")
	}
	it.config.driver = tx.drv
	return it
}

// String implements the fmt.Stringer.
func (it *ImportTask) String() string {
	var builder strings.Builder
	builder.WriteString("ImportTask(")
	builder.WriteString(fmt.Sprintf("id=%v", it.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(it.UUID)
	if v := it.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := it.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := it.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", import_name=")
	builder.WriteString(it.ImportName)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", it.Status))
	builder.WriteString(", path=")
	builder.WriteString(it.Path)
	builder.WriteString(", total=")
	builder.WriteString(fmt.Sprintf("%v", it.Total))
	builder.WriteString(", created_admin_id=")
	builder.WriteString(fmt.Sprintf("%v", it.CreatedAdminID))
	builder.WriteString(", remark=")
	builder.WriteString(it.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// ImportTasks is a parsable slice of ImportTask.
type ImportTasks []*ImportTask

func (it ImportTasks) config(cfg config) {
	for _i := range it {
		it[_i].config = cfg
	}
}

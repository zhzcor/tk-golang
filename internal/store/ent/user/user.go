// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldBossUserID holds the string denoting the boss_user_id field in the database.
	FieldBossUserID = "boss_user_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldRegFrom holds the string denoting the reg_from field in the database.
	FieldRegFrom = "reg_from"
	// FieldCardType holds the string denoting the card_type field in the database.
	FieldCardType = "card_type"
	// FieldIDCard holds the string denoting the id_card field in the database.
	FieldIDCard = "id_card"
	// FieldFromCityID holds the string denoting the from_city_id field in the database.
	FieldFromCityID = "from_city_id"
	// FieldFromItemCategoryID holds the string denoting the from_item_category_id field in the database.
	FieldFromItemCategoryID = "from_item_category_id"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldSignRemark holds the string denoting the sign_remark field in the database.
	FieldSignRemark = "sign_remark"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// EdgeLoginLog holds the string denoting the login_log edge name in mutations.
	EdgeLoginLog = "login_log"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// EdgeUserCourses holds the string denoting the user_courses edge name in mutations.
	EdgeUserCourses = "user_courses"
	// EdgeUserClasses holds the string denoting the user_classes edge name in mutations.
	EdgeUserClasses = "user_classes"
	// EdgeUserExamsRecords holds the string denoting the user_exams_records edge name in mutations.
	EdgeUserExamsRecords = "user_exams_records"
	// EdgeUserQuestionBankRecords holds the string denoting the user_question_bank_records edge name in mutations.
	EdgeUserQuestionBankRecords = "user_question_bank_records"
	// EdgeUserQuestionRecords holds the string denoting the user_question_records edge name in mutations.
	EdgeUserQuestionRecords = "user_question_records"
	// EdgeAskUsers holds the string denoting the ask_users edge name in mutations.
	EdgeAskUsers = "ask_users"
	// EdgeCourseAppraiseUsers holds the string denoting the course_appraise_users edge name in mutations.
	EdgeCourseAppraiseUsers = "course_appraise_users"
	// EdgeUserVideoRecord holds the string denoting the user_video_record edge name in mutations.
	EdgeUserVideoRecord = "user_video_record"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeCate holds the string denoting the cate edge name in mutations.
	EdgeCate = "cate"
	// Table holds the table name of the user in the database.
	Table = "users"
	// LoginLogTable is the table the holds the login_log relation/edge.
	LoginLogTable = "user_login_logs"
	// LoginLogInverseTable is the table name for the UserLoginLog entity.
	// It exists in this package in order to avoid circular dependency with the "userloginlog" package.
	LoginLogInverseTable = "user_login_logs"
	// LoginLogColumn is the table column denoting the login_log relation/edge.
	LoginLogColumn = "user_login_log"
	// MessagesTable is the table the holds the messages relation/edge. The primary key declared below.
	MessagesTable = "user_messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// UserCoursesTable is the table the holds the user_courses relation/edge.
	UserCoursesTable = "kc_user_courses"
	// UserCoursesInverseTable is the table name for the KcUserCourse entity.
	// It exists in this package in order to avoid circular dependency with the "kcusercourse" package.
	UserCoursesInverseTable = "kc_user_courses"
	// UserCoursesColumn is the table column denoting the user_courses relation/edge.
	UserCoursesColumn = "user_id"
	// UserClassesTable is the table the holds the user_classes relation/edge.
	UserClassesTable = "kc_user_classes"
	// UserClassesInverseTable is the table name for the KcUserClass entity.
	// It exists in this package in order to avoid circular dependency with the "kcuserclass" package.
	UserClassesInverseTable = "kc_user_classes"
	// UserClassesColumn is the table column denoting the user_classes relation/edge.
	UserClassesColumn = "user_id"
	// UserExamsRecordsTable is the table the holds the user_exams_records relation/edge.
	UserExamsRecordsTable = "tk_user_exam_score_records"
	// UserExamsRecordsInverseTable is the table name for the TkUserExamScoreRecord entity.
	// It exists in this package in order to avoid circular dependency with the "tkuserexamscorerecord" package.
	UserExamsRecordsInverseTable = "tk_user_exam_score_records"
	// UserExamsRecordsColumn is the table column denoting the user_exams_records relation/edge.
	UserExamsRecordsColumn = "user_id"
	// UserQuestionBankRecordsTable is the table the holds the user_question_bank_records relation/edge.
	UserQuestionBankRecordsTable = "tk_user_question_bank_records"
	// UserQuestionBankRecordsInverseTable is the table name for the TkUserQuestionBankRecord entity.
	// It exists in this package in order to avoid circular dependency with the "tkuserquestionbankrecord" package.
	UserQuestionBankRecordsInverseTable = "tk_user_question_bank_records"
	// UserQuestionBankRecordsColumn is the table column denoting the user_question_bank_records relation/edge.
	UserQuestionBankRecordsColumn = "user_id"
	// UserQuestionRecordsTable is the table the holds the user_question_records relation/edge.
	UserQuestionRecordsTable = "tk_user_question_records"
	// UserQuestionRecordsInverseTable is the table name for the TkUserQuestionRecord entity.
	// It exists in this package in order to avoid circular dependency with the "tkuserquestionrecord" package.
	UserQuestionRecordsInverseTable = "tk_user_question_records"
	// UserQuestionRecordsColumn is the table column denoting the user_question_records relation/edge.
	UserQuestionRecordsColumn = "user_id"
	// AskUsersTable is the table the holds the ask_users relation/edge.
	AskUsersTable = "user_ask_answers"
	// AskUsersInverseTable is the table name for the UserAskAnswer entity.
	// It exists in this package in order to avoid circular dependency with the "useraskanswer" package.
	AskUsersInverseTable = "user_ask_answers"
	// AskUsersColumn is the table column denoting the ask_users relation/edge.
	AskUsersColumn = "user_id"
	// CourseAppraiseUsersTable is the table the holds the course_appraise_users relation/edge.
	CourseAppraiseUsersTable = "user_course_appraises"
	// CourseAppraiseUsersInverseTable is the table name for the UserCourseAppraise entity.
	// It exists in this package in order to avoid circular dependency with the "usercourseappraise" package.
	CourseAppraiseUsersInverseTable = "user_course_appraises"
	// CourseAppraiseUsersColumn is the table column denoting the course_appraise_users relation/edge.
	CourseAppraiseUsersColumn = "user_id"
	// UserVideoRecordTable is the table the holds the user_video_record relation/edge.
	UserVideoRecordTable = "video_records"
	// UserVideoRecordInverseTable is the table name for the VideoRecord entity.
	// It exists in this package in order to avoid circular dependency with the "videorecord" package.
	UserVideoRecordInverseTable = "video_records"
	// UserVideoRecordColumn is the table column denoting the user_video_record relation/edge.
	UserVideoRecordColumn = "user_id"
	// CityTable is the table the holds the city relation/edge.
	CityTable = "users"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "cities"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "from_city_id"
	// CateTable is the table the holds the cate relation/edge.
	CateTable = "users"
	// CateInverseTable is the table name for the ItemCategory entity.
	// It exists in this package in order to avoid circular dependency with the "itemcategory" package.
	CateInverseTable = "item_categories"
	// CateColumn is the table column denoting the cate relation/edge.
	CateColumn = "from_item_category_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldPassword,
	FieldSalt,
	FieldBossUserID,
	FieldEmail,
	FieldPhone,
	FieldNickname,
	FieldUsername,
	FieldStatus,
	FieldSex,
	FieldRegFrom,
	FieldCardType,
	FieldIDCard,
	FieldFromCityID,
	FieldFromItemCategoryID,
	FieldBirthday,
	FieldSignRemark,
	FieldAvatar,
}

var (
	// MessagesPrimaryKey and MessagesColumn2 are the table columns denoting the
	// primary key for the messages relation (M2M).
	MessagesPrimaryKey = []string{"user_id", "message_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "gserver/internal/store/ent/runtime"
//
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultBossUserID holds the default value on creation for the "boss_user_id" field.
	DefaultBossUserID int
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// DefaultNickname holds the default value on creation for the "nickname" field.
	DefaultNickname string
	// DefaultUsername holds the default value on creation for the "username" field.
	DefaultUsername string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultSex holds the default value on creation for the "sex" field.
	DefaultSex uint8
	// DefaultRegFrom holds the default value on creation for the "reg_from" field.
	DefaultRegFrom uint8
	// DefaultCardType holds the default value on creation for the "card_type" field.
	DefaultCardType uint8
	// DefaultIDCard holds the default value on creation for the "id_card" field.
	DefaultIDCard string
	// DefaultAvatar holds the default value on creation for the "avatar" field.
	DefaultAvatar string
)

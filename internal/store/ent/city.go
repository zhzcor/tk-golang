// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/city"

	"entgo.io/ent/dialect/sql"
)

// City is the model entity for the City schema.
type City struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name"`
	// Status holds the value of the "status" field.
	// 状态：1、锁定。2:生效
	Status uint8 `json:"status"`
	// Code holds the value of the "code" field.
	// 编码
	Code string `json:"code"`
	// Desc holds the value of the "desc" field.
	// 描述
	Desc string `json:"desc"`
	// SortOrder holds the value of the "sort_order" field.
	// 排序
	SortOrder int `json:"sort_order"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CityQuery when eager-loading is set.
	Edges CityEdges `json:"edges"`
}

// CityEdges holds the relations/edges for other nodes in the graph.
type CityEdges struct {
	// KcClass holds the value of the kc_class edge.
	KcClass []*KcClass `json:"kc_class,omitempty"`
	// Course holds the value of the course edge.
	Course []*KcCourse `json:"course,omitempty"`
	// UserCity holds the value of the user_city edge.
	UserCity []*User `json:"user_city,omitempty"`
	// QuestionBankCities holds the value of the question_bank_cities edge.
	QuestionBankCities []*TkQuestionBankCity `json:"question_bank_cities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// KcClassOrErr returns the KcClass value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) KcClassOrErr() ([]*KcClass, error) {
	if e.loadedTypes[0] {
		return e.KcClass, nil
	}
	return nil, &NotLoadedError{edge: "kc_class"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) CourseOrErr() ([]*KcCourse, error) {
	if e.loadedTypes[1] {
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// UserCityOrErr returns the UserCity value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) UserCityOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.UserCity, nil
	}
	return nil, &NotLoadedError{edge: "user_city"}
}

// QuestionBankCitiesOrErr returns the QuestionBankCities value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) QuestionBankCitiesOrErr() ([]*TkQuestionBankCity, error) {
	if e.loadedTypes[3] {
		return e.QuestionBankCities, nil
	}
	return nil, &NotLoadedError{edge: "question_bank_cities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*City) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case city.FieldID, city.FieldStatus, city.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case city.FieldUUID, city.FieldName, city.FieldCode, city.FieldDesc:
			values[i] = new(sql.NullString)
		case city.FieldCreatedAt, city.FieldUpdatedAt, city.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type City", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the City fields.
func (c *City) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case city.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case city.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				c.UUID = value.String
			}
		case city.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = new(time.Time)
				*c.CreatedAt = value.Time
			}
		case city.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = new(time.Time)
				*c.UpdatedAt = value.Time
			}
		case city.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case city.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case city.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = uint8(value.Int64)
			}
		case city.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case city.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				c.Desc = value.String
			}
		case city.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				c.SortOrder = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryKcClass queries the "kc_class" edge of the City entity.
func (c *City) QueryKcClass() *KcClassQuery {
	return (&CityClient{config: c.config}).QueryKcClass(c)
}

// QueryCourse queries the "course" edge of the City entity.
func (c *City) QueryCourse() *KcCourseQuery {
	return (&CityClient{config: c.config}).QueryCourse(c)
}

// QueryUserCity queries the "user_city" edge of the City entity.
func (c *City) QueryUserCity() *UserQuery {
	return (&CityClient{config: c.config}).QueryUserCity(c)
}

// QueryQuestionBankCities queries the "question_bank_cities" edge of the City entity.
func (c *City) QueryQuestionBankCities() *TkQuestionBankCityQuery {
	return (&CityClient{config: c.config}).QueryQuestionBankCities(c)
}

// Update returns a builder for updating this City.
// Note that you need to call City.Unwrap() before calling this method if this City
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *City) Update() *CityUpdateOne {
	return (&CityClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the City entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *City) Unwrap() *City {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: City is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *City) String() string {
	var builder strings.Builder
	builder.WriteString("City(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(c.UUID)
	if v := c.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := c.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := c.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", code=")
	builder.WriteString(c.Code)
	builder.WriteString(", desc=")
	builder.WriteString(c.Desc)
	builder.WriteString(", sort_order=")
	builder.WriteString(fmt.Sprintf("%v", c.SortOrder))
	builder.WriteByte(')')
	return builder.String()
}

// Cities is a parsable slice of City.
type Cities []*City

func (c Cities) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}

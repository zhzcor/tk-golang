// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursechapter"

	"entgo.io/ent/dialect/sql"
)

// KcCourseChapter is the model entity for the KcCourseChapter schema.
type KcCourseChapter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CourseID holds the value of the "course_id" field.
	// 课程id
	CourseID int `json:"course_id"`
	// Title holds the value of the "title" field.
	// 章节名称
	Title string `json:"title"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KcCourseChapterQuery when eager-loading is set.
	Edges KcCourseChapterEdges `json:"edges"`
}

// KcCourseChapterEdges holds the relations/edges for other nodes in the graph.
type KcCourseChapterEdges struct {
	// ChapterCourse holds the value of the chapter_course edge.
	ChapterCourse *KcCourse `json:"chapter_course,omitempty"`
	// ChapterSections holds the value of the chapter_sections edge.
	ChapterSections []*KcCourseSection `json:"chapter_sections,omitempty"`
	// CourseSmallChapters holds the value of the course_small_chapters edge.
	CourseSmallChapters []*KcCourseSmallCategory `json:"course_small_chapters,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChapterCourseOrErr returns the ChapterCourse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KcCourseChapterEdges) ChapterCourseOrErr() (*KcCourse, error) {
	if e.loadedTypes[0] {
		if e.ChapterCourse == nil {
			// The edge chapter_course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kccourse.Label}
		}
		return e.ChapterCourse, nil
	}
	return nil, &NotLoadedError{edge: "chapter_course"}
}

// ChapterSectionsOrErr returns the ChapterSections value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseChapterEdges) ChapterSectionsOrErr() ([]*KcCourseSection, error) {
	if e.loadedTypes[1] {
		return e.ChapterSections, nil
	}
	return nil, &NotLoadedError{edge: "chapter_sections"}
}

// CourseSmallChaptersOrErr returns the CourseSmallChapters value or an error if the edge
// was not loaded in eager-loading.
func (e KcCourseChapterEdges) CourseSmallChaptersOrErr() ([]*KcCourseSmallCategory, error) {
	if e.loadedTypes[2] {
		return e.CourseSmallChapters, nil
	}
	return nil, &NotLoadedError{edge: "course_small_chapters"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KcCourseChapter) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kccoursechapter.FieldID, kccoursechapter.FieldCourseID:
			values[i] = new(sql.NullInt64)
		case kccoursechapter.FieldTitle:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KcCourseChapter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KcCourseChapter fields.
func (kcc *KcCourseChapter) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kccoursechapter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kcc.ID = int(value.Int64)
		case kccoursechapter.FieldCourseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				kcc.CourseID = int(value.Int64)
			}
		case kccoursechapter.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				kcc.Title = value.String
			}
		}
	}
	return nil
}

// QueryChapterCourse queries the "chapter_course" edge of the KcCourseChapter entity.
func (kcc *KcCourseChapter) QueryChapterCourse() *KcCourseQuery {
	return (&KcCourseChapterClient{config: kcc.config}).QueryChapterCourse(kcc)
}

// QueryChapterSections queries the "chapter_sections" edge of the KcCourseChapter entity.
func (kcc *KcCourseChapter) QueryChapterSections() *KcCourseSectionQuery {
	return (&KcCourseChapterClient{config: kcc.config}).QueryChapterSections(kcc)
}

// QueryCourseSmallChapters queries the "course_small_chapters" edge of the KcCourseChapter entity.
func (kcc *KcCourseChapter) QueryCourseSmallChapters() *KcCourseSmallCategoryQuery {
	return (&KcCourseChapterClient{config: kcc.config}).QueryCourseSmallChapters(kcc)
}

// Update returns a builder for updating this KcCourseChapter.
// Note that you need to call KcCourseChapter.Unwrap() before calling this method if this KcCourseChapter
// was returned from a transaction, and the transaction was committed or rolled back.
func (kcc *KcCourseChapter) Update() *KcCourseChapterUpdateOne {
	return (&KcCourseChapterClient{config: kcc.config}).UpdateOne(kcc)
}

// Unwrap unwraps the KcCourseChapter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kcc *KcCourseChapter) Unwrap() *KcCourseChapter {
	tx, ok := kcc.config.driver.(*txDriver)
	if !ok {
		panic("ent: KcCourseChapter is not a transactional entity")
	}
	kcc.config.driver = tx.drv
	return kcc
}

// String implements the fmt.Stringer.
func (kcc *KcCourseChapter) String() string {
	var builder strings.Builder
	builder.WriteString("KcCourseChapter(")
	builder.WriteString(fmt.Sprintf("id=%v", kcc.ID))
	builder.WriteString(", course_id=")
	builder.WriteString(fmt.Sprintf("%v", kcc.CourseID))
	builder.WriteString(", title=")
	builder.WriteString(kcc.Title)
	builder.WriteByte(')')
	return builder.String()
}

// KcCourseChapters is a parsable slice of KcCourseChapter.
type KcCourseChapters []*KcCourseChapter

func (kcc KcCourseChapters) config(cfg config) {
	for _i := range kcc {
		kcc[_i].config = cfg
	}
}

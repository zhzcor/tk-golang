// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/appagreement"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppAgreementUpdate is the builder for updating AppAgreement entities.
type AppAgreementUpdate struct {
	config
	hooks    []Hook
	mutation *AppAgreementMutation
}

// Where adds a new predicate for the AppAgreementUpdate builder.
func (aau *AppAgreementUpdate) Where(ps ...predicate.AppAgreement) *AppAgreementUpdate {
	aau.mutation.predicates = append(aau.mutation.predicates, ps...)
	return aau
}

// SetUUID sets the "uuid" field.
func (aau *AppAgreementUpdate) SetUUID(s string) *AppAgreementUpdate {
	aau.mutation.SetUUID(s)
	return aau
}

// SetUpdatedAt sets the "updated_at" field.
func (aau *AppAgreementUpdate) SetUpdatedAt(t time.Time) *AppAgreementUpdate {
	aau.mutation.SetUpdatedAt(t)
	return aau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aau *AppAgreementUpdate) ClearUpdatedAt() *AppAgreementUpdate {
	aau.mutation.ClearUpdatedAt()
	return aau
}

// SetDeletedAt sets the "deleted_at" field.
func (aau *AppAgreementUpdate) SetDeletedAt(t time.Time) *AppAgreementUpdate {
	aau.mutation.SetDeletedAt(t)
	return aau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aau *AppAgreementUpdate) SetNillableDeletedAt(t *time.Time) *AppAgreementUpdate {
	if t != nil {
		aau.SetDeletedAt(*t)
	}
	return aau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aau *AppAgreementUpdate) ClearDeletedAt() *AppAgreementUpdate {
	aau.mutation.ClearDeletedAt()
	return aau
}

// SetName sets the "name" field.
func (aau *AppAgreementUpdate) SetName(s string) *AppAgreementUpdate {
	aau.mutation.SetName(s)
	return aau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aau *AppAgreementUpdate) SetNillableName(s *string) *AppAgreementUpdate {
	if s != nil {
		aau.SetName(*s)
	}
	return aau
}

// SetType sets the "type" field.
func (aau *AppAgreementUpdate) SetType(u uint8) *AppAgreementUpdate {
	aau.mutation.ResetType()
	aau.mutation.SetType(u)
	return aau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aau *AppAgreementUpdate) SetNillableType(u *uint8) *AppAgreementUpdate {
	if u != nil {
		aau.SetType(*u)
	}
	return aau
}

// AddType adds u to the "type" field.
func (aau *AppAgreementUpdate) AddType(u uint8) *AppAgreementUpdate {
	aau.mutation.AddType(u)
	return aau
}

// SetDetail sets the "detail" field.
func (aau *AppAgreementUpdate) SetDetail(s string) *AppAgreementUpdate {
	aau.mutation.SetDetail(s)
	return aau
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (aau *AppAgreementUpdate) SetNillableDetail(s *string) *AppAgreementUpdate {
	if s != nil {
		aau.SetDetail(*s)
	}
	return aau
}

// ClearDetail clears the value of the "detail" field.
func (aau *AppAgreementUpdate) ClearDetail() *AppAgreementUpdate {
	aau.mutation.ClearDetail()
	return aau
}

// Mutation returns the AppAgreementMutation object of the builder.
func (aau *AppAgreementUpdate) Mutation() *AppAgreementMutation {
	return aau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AppAgreementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aau.defaults()
	if len(aau.hooks) == 0 {
		affected, err = aau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppAgreementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aau.mutation = mutation
			affected, err = aau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aau.hooks) - 1; i >= 0; i-- {
			mut = aau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AppAgreementUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AppAgreementUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AppAgreementUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aau *AppAgreementUpdate) defaults() {
	if _, ok := aau.mutation.UpdatedAt(); !ok && !aau.mutation.UpdatedAtCleared() {
		v := appagreement.UpdateDefaultUpdatedAt()
		aau.mutation.SetUpdatedAt(v)
	}
}

func (aau *AppAgreementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appagreement.Table,
			Columns: appagreement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appagreement.FieldID,
			},
		},
	}
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appagreement.FieldUUID,
		})
	}
	if aau.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: appagreement.FieldCreatedAt,
		})
	}
	if value, ok := aau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appagreement.FieldUpdatedAt,
		})
	}
	if aau.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: appagreement.FieldUpdatedAt,
		})
	}
	if value, ok := aau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appagreement.FieldDeletedAt,
		})
	}
	if aau.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: appagreement.FieldDeletedAt,
		})
	}
	if value, ok := aau.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appagreement.FieldName,
		})
	}
	if value, ok := aau.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appagreement.FieldType,
		})
	}
	if value, ok := aau.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appagreement.FieldType,
		})
	}
	if value, ok := aau.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appagreement.FieldDetail,
		})
	}
	if aau.mutation.DetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appagreement.FieldDetail,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appagreement.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AppAgreementUpdateOne is the builder for updating a single AppAgreement entity.
type AppAgreementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppAgreementMutation
}

// SetUUID sets the "uuid" field.
func (aauo *AppAgreementUpdateOne) SetUUID(s string) *AppAgreementUpdateOne {
	aauo.mutation.SetUUID(s)
	return aauo
}

// SetUpdatedAt sets the "updated_at" field.
func (aauo *AppAgreementUpdateOne) SetUpdatedAt(t time.Time) *AppAgreementUpdateOne {
	aauo.mutation.SetUpdatedAt(t)
	return aauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aauo *AppAgreementUpdateOne) ClearUpdatedAt() *AppAgreementUpdateOne {
	aauo.mutation.ClearUpdatedAt()
	return aauo
}

// SetDeletedAt sets the "deleted_at" field.
func (aauo *AppAgreementUpdateOne) SetDeletedAt(t time.Time) *AppAgreementUpdateOne {
	aauo.mutation.SetDeletedAt(t)
	return aauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aauo *AppAgreementUpdateOne) SetNillableDeletedAt(t *time.Time) *AppAgreementUpdateOne {
	if t != nil {
		aauo.SetDeletedAt(*t)
	}
	return aauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aauo *AppAgreementUpdateOne) ClearDeletedAt() *AppAgreementUpdateOne {
	aauo.mutation.ClearDeletedAt()
	return aauo
}

// SetName sets the "name" field.
func (aauo *AppAgreementUpdateOne) SetName(s string) *AppAgreementUpdateOne {
	aauo.mutation.SetName(s)
	return aauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aauo *AppAgreementUpdateOne) SetNillableName(s *string) *AppAgreementUpdateOne {
	if s != nil {
		aauo.SetName(*s)
	}
	return aauo
}

// SetType sets the "type" field.
func (aauo *AppAgreementUpdateOne) SetType(u uint8) *AppAgreementUpdateOne {
	aauo.mutation.ResetType()
	aauo.mutation.SetType(u)
	return aauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aauo *AppAgreementUpdateOne) SetNillableType(u *uint8) *AppAgreementUpdateOne {
	if u != nil {
		aauo.SetType(*u)
	}
	return aauo
}

// AddType adds u to the "type" field.
func (aauo *AppAgreementUpdateOne) AddType(u uint8) *AppAgreementUpdateOne {
	aauo.mutation.AddType(u)
	return aauo
}

// SetDetail sets the "detail" field.
func (aauo *AppAgreementUpdateOne) SetDetail(s string) *AppAgreementUpdateOne {
	aauo.mutation.SetDetail(s)
	return aauo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (aauo *AppAgreementUpdateOne) SetNillableDetail(s *string) *AppAgreementUpdateOne {
	if s != nil {
		aauo.SetDetail(*s)
	}
	return aauo
}

// ClearDetail clears the value of the "detail" field.
func (aauo *AppAgreementUpdateOne) ClearDetail() *AppAgreementUpdateOne {
	aauo.mutation.ClearDetail()
	return aauo
}

// Mutation returns the AppAgreementMutation object of the builder.
func (aauo *AppAgreementUpdateOne) Mutation() *AppAgreementMutation {
	return aauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *AppAgreementUpdateOne) Select(field string, fields ...string) *AppAgreementUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated AppAgreement entity.
func (aauo *AppAgreementUpdateOne) Save(ctx context.Context) (*AppAgreement, error) {
	var (
		err  error
		node *AppAgreement
	)
	aauo.defaults()
	if len(aauo.hooks) == 0 {
		node, err = aauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppAgreementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aauo.mutation = mutation
			node, err = aauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aauo.hooks) - 1; i >= 0; i-- {
			mut = aauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AppAgreementUpdateOne) SaveX(ctx context.Context) *AppAgreement {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AppAgreementUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AppAgreementUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aauo *AppAgreementUpdateOne) defaults() {
	if _, ok := aauo.mutation.UpdatedAt(); !ok && !aauo.mutation.UpdatedAtCleared() {
		v := appagreement.UpdateDefaultUpdatedAt()
		aauo.mutation.SetUpdatedAt(v)
	}
}

func (aauo *AppAgreementUpdateOne) sqlSave(ctx context.Context) (_node *AppAgreement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appagreement.Table,
			Columns: appagreement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appagreement.FieldID,
			},
		},
	}
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppAgreement.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appagreement.FieldID)
		for _, f := range fields {
			if !appagreement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appagreement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appagreement.FieldUUID,
		})
	}
	if aauo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: appagreement.FieldCreatedAt,
		})
	}
	if value, ok := aauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appagreement.FieldUpdatedAt,
		})
	}
	if aauo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: appagreement.FieldUpdatedAt,
		})
	}
	if value, ok := aauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appagreement.FieldDeletedAt,
		})
	}
	if aauo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: appagreement.FieldDeletedAt,
		})
	}
	if value, ok := aauo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appagreement.FieldName,
		})
	}
	if value, ok := aauo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appagreement.FieldType,
		})
	}
	if value, ok := aauo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appagreement.FieldType,
		})
	}
	if value, ok := aauo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appagreement.FieldDetail,
		})
	}
	if aauo.mutation.DetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appagreement.FieldDetail,
		})
	}
	_node = &AppAgreement{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appagreement.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

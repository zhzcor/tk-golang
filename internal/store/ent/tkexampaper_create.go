// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/kcsmallcategoryexampaper"
	"gserver/internal/store/ent/makeuserquestionrecord"
	"gserver/internal/store/ent/tkexampaper"
	"gserver/internal/store/ent/tkexampaperpartition"
	"gserver/internal/store/ent/tkquestionbank"
	"gserver/internal/store/ent/tkuserexamscorerecord"
	"gserver/internal/store/ent/tkuserquestionrecord"
	"gserver/internal/store/ent/tkuserrandomexamrecode"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkExamPaperCreate is the builder for creating a TkExamPaper entity.
type TkExamPaperCreate struct {
	config
	mutation *TkExamPaperMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tepc *TkExamPaperCreate) SetUUID(s string) *TkExamPaperCreate {
	tepc.mutation.SetUUID(s)
	return tepc
}

// SetCreatedAt sets the "created_at" field.
func (tepc *TkExamPaperCreate) SetCreatedAt(t time.Time) *TkExamPaperCreate {
	tepc.mutation.SetCreatedAt(t)
	return tepc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableCreatedAt(t *time.Time) *TkExamPaperCreate {
	if t != nil {
		tepc.SetCreatedAt(*t)
	}
	return tepc
}

// SetUpdatedAt sets the "updated_at" field.
func (tepc *TkExamPaperCreate) SetUpdatedAt(t time.Time) *TkExamPaperCreate {
	tepc.mutation.SetUpdatedAt(t)
	return tepc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableUpdatedAt(t *time.Time) *TkExamPaperCreate {
	if t != nil {
		tepc.SetUpdatedAt(*t)
	}
	return tepc
}

// SetDeletedAt sets the "deleted_at" field.
func (tepc *TkExamPaperCreate) SetDeletedAt(t time.Time) *TkExamPaperCreate {
	tepc.mutation.SetDeletedAt(t)
	return tepc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableDeletedAt(t *time.Time) *TkExamPaperCreate {
	if t != nil {
		tepc.SetDeletedAt(*t)
	}
	return tepc
}

// SetName sets the "name" field.
func (tepc *TkExamPaperCreate) SetName(s string) *TkExamPaperCreate {
	tepc.mutation.SetName(s)
	return tepc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableName(s *string) *TkExamPaperCreate {
	if s != nil {
		tepc.SetName(*s)
	}
	return tepc
}

// SetDesc sets the "desc" field.
func (tepc *TkExamPaperCreate) SetDesc(s string) *TkExamPaperCreate {
	tepc.mutation.SetDesc(s)
	return tepc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableDesc(s *string) *TkExamPaperCreate {
	if s != nil {
		tepc.SetDesc(*s)
	}
	return tepc
}

// SetExamQuestionType sets the "exam_question_type" field.
func (tepc *TkExamPaperCreate) SetExamQuestionType(u uint8) *TkExamPaperCreate {
	tepc.mutation.SetExamQuestionType(u)
	return tepc
}

// SetNillableExamQuestionType sets the "exam_question_type" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableExamQuestionType(u *uint8) *TkExamPaperCreate {
	if u != nil {
		tepc.SetExamQuestionType(*u)
	}
	return tepc
}

// SetExamType sets the "exam_type" field.
func (tepc *TkExamPaperCreate) SetExamType(u uint8) *TkExamPaperCreate {
	tepc.mutation.SetExamType(u)
	return tepc
}

// SetNillableExamType sets the "exam_type" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableExamType(u *uint8) *TkExamPaperCreate {
	if u != nil {
		tepc.SetExamType(*u)
	}
	return tepc
}

// SetDifficulty sets the "difficulty" field.
func (tepc *TkExamPaperCreate) SetDifficulty(u uint8) *TkExamPaperCreate {
	tepc.mutation.SetDifficulty(u)
	return tepc
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableDifficulty(u *uint8) *TkExamPaperCreate {
	if u != nil {
		tepc.SetDifficulty(*u)
	}
	return tepc
}

// SetQuestionCount sets the "question_count" field.
func (tepc *TkExamPaperCreate) SetQuestionCount(i int) *TkExamPaperCreate {
	tepc.mutation.SetQuestionCount(i)
	return tepc
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableQuestionCount(i *int) *TkExamPaperCreate {
	if i != nil {
		tepc.SetQuestionCount(*i)
	}
	return tepc
}

// SetAnsweredUserCount sets the "answered_user_count" field.
func (tepc *TkExamPaperCreate) SetAnsweredUserCount(i int) *TkExamPaperCreate {
	tepc.mutation.SetAnsweredUserCount(i)
	return tepc
}

// SetNillableAnsweredUserCount sets the "answered_user_count" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableAnsweredUserCount(i *int) *TkExamPaperCreate {
	if i != nil {
		tepc.SetAnsweredUserCount(*i)
	}
	return tepc
}

// SetScore sets the "score" field.
func (tepc *TkExamPaperCreate) SetScore(i int) *TkExamPaperCreate {
	tepc.mutation.SetScore(i)
	return tepc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableScore(i *int) *TkExamPaperCreate {
	if i != nil {
		tepc.SetScore(*i)
	}
	return tepc
}

// SetPassScore sets the "pass_score" field.
func (tepc *TkExamPaperCreate) SetPassScore(i int) *TkExamPaperCreate {
	tepc.mutation.SetPassScore(i)
	return tepc
}

// SetNillablePassScore sets the "pass_score" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillablePassScore(i *int) *TkExamPaperCreate {
	if i != nil {
		tepc.SetPassScore(*i)
	}
	return tepc
}

// SetDuration sets the "duration" field.
func (tepc *TkExamPaperCreate) SetDuration(i int) *TkExamPaperCreate {
	tepc.mutation.SetDuration(i)
	return tepc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableDuration(i *int) *TkExamPaperCreate {
	if i != nil {
		tepc.SetDuration(*i)
	}
	return tepc
}

// SetDurationType sets the "duration_type" field.
func (tepc *TkExamPaperCreate) SetDurationType(i int) *TkExamPaperCreate {
	tepc.mutation.SetDurationType(i)
	return tepc
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableDurationType(i *int) *TkExamPaperCreate {
	if i != nil {
		tepc.SetDurationType(*i)
	}
	return tepc
}

// SetStartAt sets the "start_at" field.
func (tepc *TkExamPaperCreate) SetStartAt(t time.Time) *TkExamPaperCreate {
	tepc.mutation.SetStartAt(t)
	return tepc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableStartAt(t *time.Time) *TkExamPaperCreate {
	if t != nil {
		tepc.SetStartAt(*t)
	}
	return tepc
}

// SetEndAt sets the "end_at" field.
func (tepc *TkExamPaperCreate) SetEndAt(t time.Time) *TkExamPaperCreate {
	tepc.mutation.SetEndAt(t)
	return tepc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableEndAt(t *time.Time) *TkExamPaperCreate {
	if t != nil {
		tepc.SetEndAt(*t)
	}
	return tepc
}

// SetEnableStatus sets the "enable_status" field.
func (tepc *TkExamPaperCreate) SetEnableStatus(u uint8) *TkExamPaperCreate {
	tepc.mutation.SetEnableStatus(u)
	return tepc
}

// SetNillableEnableStatus sets the "enable_status" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableEnableStatus(u *uint8) *TkExamPaperCreate {
	if u != nil {
		tepc.SetEnableStatus(*u)
	}
	return tepc
}

// SetCreatedAdminID sets the "created_admin_id" field.
func (tepc *TkExamPaperCreate) SetCreatedAdminID(i int) *TkExamPaperCreate {
	tepc.mutation.SetCreatedAdminID(i)
	return tepc
}

// SetNillableCreatedAdminID sets the "created_admin_id" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableCreatedAdminID(i *int) *TkExamPaperCreate {
	if i != nil {
		tepc.SetCreatedAdminID(*i)
	}
	return tepc
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tepc *TkExamPaperCreate) SetQuestionBankID(i int) *TkExamPaperCreate {
	tepc.mutation.SetQuestionBankID(i)
	return tepc
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableQuestionBankID(i *int) *TkExamPaperCreate {
	if i != nil {
		tepc.SetQuestionBankID(*i)
	}
	return tepc
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tepc *TkExamPaperCreate) SetQuestionBank(t *TkQuestionBank) *TkExamPaperCreate {
	return tepc.SetQuestionBankID(t.ID)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (tepc *TkExamPaperCreate) SetAdminID(id int) *TkExamPaperCreate {
	tepc.mutation.SetAdminID(id)
	return tepc
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (tepc *TkExamPaperCreate) SetNillableAdminID(id *int) *TkExamPaperCreate {
	if id != nil {
		tepc = tepc.SetAdminID(*id)
	}
	return tepc
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (tepc *TkExamPaperCreate) SetAdmin(a *Admin) *TkExamPaperCreate {
	return tepc.SetAdminID(a.ID)
}

// AddExamPartitionIDs adds the "exam_partitions" edge to the TkExamPaperPartition entity by IDs.
func (tepc *TkExamPaperCreate) AddExamPartitionIDs(ids ...int) *TkExamPaperCreate {
	tepc.mutation.AddExamPartitionIDs(ids...)
	return tepc
}

// AddExamPartitions adds the "exam_partitions" edges to the TkExamPaperPartition entity.
func (tepc *TkExamPaperCreate) AddExamPartitions(t ...*TkExamPaperPartition) *TkExamPaperCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepc.AddExamPartitionIDs(ids...)
}

// AddMakeUserQuestionExamIDs adds the "make_user_question_exam" edge to the MakeUserQuestionRecord entity by IDs.
func (tepc *TkExamPaperCreate) AddMakeUserQuestionExamIDs(ids ...int) *TkExamPaperCreate {
	tepc.mutation.AddMakeUserQuestionExamIDs(ids...)
	return tepc
}

// AddMakeUserQuestionExam adds the "make_user_question_exam" edges to the MakeUserQuestionRecord entity.
func (tepc *TkExamPaperCreate) AddMakeUserQuestionExam(m ...*MakeUserQuestionRecord) *TkExamPaperCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tepc.AddMakeUserQuestionExamIDs(ids...)
}

// AddUserExamPaperIDs adds the "user_exam_papers" edge to the TkUserExamScoreRecord entity by IDs.
func (tepc *TkExamPaperCreate) AddUserExamPaperIDs(ids ...int) *TkExamPaperCreate {
	tepc.mutation.AddUserExamPaperIDs(ids...)
	return tepc
}

// AddUserExamPapers adds the "user_exam_papers" edges to the TkUserExamScoreRecord entity.
func (tepc *TkExamPaperCreate) AddUserExamPapers(t ...*TkUserExamScoreRecord) *TkExamPaperCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepc.AddUserExamPaperIDs(ids...)
}

// AddCourseExamPaperIDs adds the "course_exam_papers" edge to the KcSmallCategoryExamPaper entity by IDs.
func (tepc *TkExamPaperCreate) AddCourseExamPaperIDs(ids ...int) *TkExamPaperCreate {
	tepc.mutation.AddCourseExamPaperIDs(ids...)
	return tepc
}

// AddCourseExamPapers adds the "course_exam_papers" edges to the KcSmallCategoryExamPaper entity.
func (tepc *TkExamPaperCreate) AddCourseExamPapers(k ...*KcSmallCategoryExamPaper) *TkExamPaperCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tepc.AddCourseExamPaperIDs(ids...)
}

// AddExamPaperRecordIDs adds the "exam_paper_records" edge to the TkUserQuestionRecord entity by IDs.
func (tepc *TkExamPaperCreate) AddExamPaperRecordIDs(ids ...int) *TkExamPaperCreate {
	tepc.mutation.AddExamPaperRecordIDs(ids...)
	return tepc
}

// AddExamPaperRecords adds the "exam_paper_records" edges to the TkUserQuestionRecord entity.
func (tepc *TkExamPaperCreate) AddExamPaperRecords(t ...*TkUserQuestionRecord) *TkExamPaperCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepc.AddExamPaperRecordIDs(ids...)
}

// AddUserRandomExamIDs adds the "user_random_exam" edge to the TkUserRandomExamRecode entity by IDs.
func (tepc *TkExamPaperCreate) AddUserRandomExamIDs(ids ...int) *TkExamPaperCreate {
	tepc.mutation.AddUserRandomExamIDs(ids...)
	return tepc
}

// AddUserRandomExam adds the "user_random_exam" edges to the TkUserRandomExamRecode entity.
func (tepc *TkExamPaperCreate) AddUserRandomExam(t ...*TkUserRandomExamRecode) *TkExamPaperCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tepc.AddUserRandomExamIDs(ids...)
}

// Mutation returns the TkExamPaperMutation object of the builder.
func (tepc *TkExamPaperCreate) Mutation() *TkExamPaperMutation {
	return tepc.mutation
}

// Save creates the TkExamPaper in the database.
func (tepc *TkExamPaperCreate) Save(ctx context.Context) (*TkExamPaper, error) {
	var (
		err  error
		node *TkExamPaper
	)
	tepc.defaults()
	if len(tepc.hooks) == 0 {
		if err = tepc.check(); err != nil {
			return nil, err
		}
		node, err = tepc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkExamPaperMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tepc.check(); err != nil {
				return nil, err
			}
			tepc.mutation = mutation
			node, err = tepc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tepc.hooks) - 1; i >= 0; i-- {
			mut = tepc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tepc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tepc *TkExamPaperCreate) SaveX(ctx context.Context) *TkExamPaper {
	v, err := tepc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tepc *TkExamPaperCreate) defaults() {
	if _, ok := tepc.mutation.CreatedAt(); !ok {
		v := tkexampaper.DefaultCreatedAt()
		tepc.mutation.SetCreatedAt(v)
	}
	if _, ok := tepc.mutation.UpdatedAt(); !ok {
		v := tkexampaper.DefaultUpdatedAt()
		tepc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tepc.mutation.Name(); !ok {
		v := tkexampaper.DefaultName
		tepc.mutation.SetName(v)
	}
	if _, ok := tepc.mutation.Desc(); !ok {
		v := tkexampaper.DefaultDesc
		tepc.mutation.SetDesc(v)
	}
	if _, ok := tepc.mutation.ExamQuestionType(); !ok {
		v := tkexampaper.DefaultExamQuestionType
		tepc.mutation.SetExamQuestionType(v)
	}
	if _, ok := tepc.mutation.ExamType(); !ok {
		v := tkexampaper.DefaultExamType
		tepc.mutation.SetExamType(v)
	}
	if _, ok := tepc.mutation.Difficulty(); !ok {
		v := tkexampaper.DefaultDifficulty
		tepc.mutation.SetDifficulty(v)
	}
	if _, ok := tepc.mutation.QuestionCount(); !ok {
		v := tkexampaper.DefaultQuestionCount
		tepc.mutation.SetQuestionCount(v)
	}
	if _, ok := tepc.mutation.AnsweredUserCount(); !ok {
		v := tkexampaper.DefaultAnsweredUserCount
		tepc.mutation.SetAnsweredUserCount(v)
	}
	if _, ok := tepc.mutation.Score(); !ok {
		v := tkexampaper.DefaultScore
		tepc.mutation.SetScore(v)
	}
	if _, ok := tepc.mutation.PassScore(); !ok {
		v := tkexampaper.DefaultPassScore
		tepc.mutation.SetPassScore(v)
	}
	if _, ok := tepc.mutation.Duration(); !ok {
		v := tkexampaper.DefaultDuration
		tepc.mutation.SetDuration(v)
	}
	if _, ok := tepc.mutation.DurationType(); !ok {
		v := tkexampaper.DefaultDurationType
		tepc.mutation.SetDurationType(v)
	}
	if _, ok := tepc.mutation.EnableStatus(); !ok {
		v := tkexampaper.DefaultEnableStatus
		tepc.mutation.SetEnableStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tepc *TkExamPaperCreate) check() error {
	if _, ok := tepc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tepc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := tepc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New("ent: missing required field \"desc\"")}
	}
	if _, ok := tepc.mutation.ExamQuestionType(); !ok {
		return &ValidationError{Name: "exam_question_type", err: errors.New("ent: missing required field \"exam_question_type\"")}
	}
	if _, ok := tepc.mutation.ExamType(); !ok {
		return &ValidationError{Name: "exam_type", err: errors.New("ent: missing required field \"exam_type\"")}
	}
	if _, ok := tepc.mutation.Difficulty(); !ok {
		return &ValidationError{Name: "difficulty", err: errors.New("ent: missing required field \"difficulty\"")}
	}
	if _, ok := tepc.mutation.QuestionCount(); !ok {
		return &ValidationError{Name: "question_count", err: errors.New("ent: missing required field \"question_count\"")}
	}
	if _, ok := tepc.mutation.AnsweredUserCount(); !ok {
		return &ValidationError{Name: "answered_user_count", err: errors.New("ent: missing required field \"answered_user_count\"")}
	}
	if _, ok := tepc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New("ent: missing required field \"score\"")}
	}
	if _, ok := tepc.mutation.PassScore(); !ok {
		return &ValidationError{Name: "pass_score", err: errors.New("ent: missing required field \"pass_score\"")}
	}
	if _, ok := tepc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New("ent: missing required field \"duration\"")}
	}
	if _, ok := tepc.mutation.DurationType(); !ok {
		return &ValidationError{Name: "duration_type", err: errors.New("ent: missing required field \"duration_type\"")}
	}
	if _, ok := tepc.mutation.EnableStatus(); !ok {
		return &ValidationError{Name: "enable_status", err: errors.New("ent: missing required field \"enable_status\"")}
	}
	return nil
}

func (tepc *TkExamPaperCreate) sqlSave(ctx context.Context) (*TkExamPaper, error) {
	_node, _spec := tepc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tepc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tepc *TkExamPaperCreate) createSpec() (*TkExamPaper, *sqlgraph.CreateSpec) {
	var (
		_node = &TkExamPaper{config: tepc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkexampaper.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkexampaper.FieldID,
			},
		}
	)
	if value, ok := tepc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaper.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tepc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tepc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tepc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tepc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaper.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tepc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkexampaper.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := tepc.mutation.ExamQuestionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamQuestionType,
		})
		_node.ExamQuestionType = value
	}
	if value, ok := tepc.mutation.ExamType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldExamType,
		})
		_node.ExamType = value
	}
	if value, ok := tepc.mutation.Difficulty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldDifficulty,
		})
		_node.Difficulty = value
	}
	if value, ok := tepc.mutation.QuestionCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldQuestionCount,
		})
		_node.QuestionCount = value
	}
	if value, ok := tepc.mutation.AnsweredUserCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldAnsweredUserCount,
		})
		_node.AnsweredUserCount = value
	}
	if value, ok := tepc.mutation.Score(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldScore,
		})
		_node.Score = value
	}
	if value, ok := tepc.mutation.PassScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldPassScore,
		})
		_node.PassScore = value
	}
	if value, ok := tepc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := tepc.mutation.DurationType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkexampaper.FieldDurationType,
		})
		_node.DurationType = value
	}
	if value, ok := tepc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := tepc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkexampaper.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := tepc.mutation.EnableStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: tkexampaper.FieldEnableStatus,
		})
		_node.EnableStatus = value
	}
	if nodes := tepc.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.QuestionBankTable,
			Columns: []string{tkexampaper.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionBankID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tepc.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkexampaper.AdminTable,
			Columns: []string{tkexampaper.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedAdminID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tepc.mutation.ExamPartitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPartitionsTable,
			Columns: []string{tkexampaper.ExamPartitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkexampaperpartition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tepc.mutation.MakeUserQuestionExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.MakeUserQuestionExamTable,
			Columns: []string{tkexampaper.MakeUserQuestionExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: makeuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tepc.mutation.UserExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserExamPapersTable,
			Columns: []string{tkexampaper.UserExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserexamscorerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tepc.mutation.CourseExamPapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.CourseExamPapersTable,
			Columns: []string{tkexampaper.CourseExamPapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcsmallcategoryexampaper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tepc.mutation.ExamPaperRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.ExamPaperRecordsTable,
			Columns: []string{tkexampaper.ExamPaperRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserquestionrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tepc.mutation.UserRandomExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkexampaper.UserRandomExamTable,
			Columns: []string{tkexampaper.UserRandomExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkuserrandomexamrecode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkExamPaperCreateBulk is the builder for creating many TkExamPaper entities in bulk.
type TkExamPaperCreateBulk struct {
	config
	builders []*TkExamPaperCreate
}

// Save creates the TkExamPaper entities in the database.
func (tepcb *TkExamPaperCreateBulk) Save(ctx context.Context) ([]*TkExamPaper, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tepcb.builders))
	nodes := make([]*TkExamPaper, len(tepcb.builders))
	mutators := make([]Mutator, len(tepcb.builders))
	for i := range tepcb.builders {
		func(i int, root context.Context) {
			builder := tepcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkExamPaperMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tepcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tepcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tepcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tepcb *TkExamPaperCreateBulk) SaveX(ctx context.Context) []*TkExamPaper {
	v, err := tepcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/kcclass"
	"gserver/internal/store/ent/kcclassteacher"
	"gserver/internal/store/ent/predicate"
	"gserver/internal/store/ent/teacher"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcClassTeacherUpdate is the builder for updating KcClassTeacher entities.
type KcClassTeacherUpdate struct {
	config
	hooks    []Hook
	mutation *KcClassTeacherMutation
}

// Where adds a new predicate for the KcClassTeacherUpdate builder.
func (kctu *KcClassTeacherUpdate) Where(ps ...predicate.KcClassTeacher) *KcClassTeacherUpdate {
	kctu.mutation.predicates = append(kctu.mutation.predicates, ps...)
	return kctu
}

// SetShowStatus sets the "show_status" field.
func (kctu *KcClassTeacherUpdate) SetShowStatus(u uint8) *KcClassTeacherUpdate {
	kctu.mutation.ResetShowStatus()
	kctu.mutation.SetShowStatus(u)
	return kctu
}

// SetNillableShowStatus sets the "show_status" field if the given value is not nil.
func (kctu *KcClassTeacherUpdate) SetNillableShowStatus(u *uint8) *KcClassTeacherUpdate {
	if u != nil {
		kctu.SetShowStatus(*u)
	}
	return kctu
}

// AddShowStatus adds u to the "show_status" field.
func (kctu *KcClassTeacherUpdate) AddShowStatus(u uint8) *KcClassTeacherUpdate {
	kctu.mutation.AddShowStatus(u)
	return kctu
}

// SetSortOrder sets the "sort_order" field.
func (kctu *KcClassTeacherUpdate) SetSortOrder(i int) *KcClassTeacherUpdate {
	kctu.mutation.ResetSortOrder()
	kctu.mutation.SetSortOrder(i)
	return kctu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (kctu *KcClassTeacherUpdate) SetNillableSortOrder(i *int) *KcClassTeacherUpdate {
	if i != nil {
		kctu.SetSortOrder(*i)
	}
	return kctu
}

// AddSortOrder adds i to the "sort_order" field.
func (kctu *KcClassTeacherUpdate) AddSortOrder(i int) *KcClassTeacherUpdate {
	kctu.mutation.AddSortOrder(i)
	return kctu
}

// SetClassID sets the "class_id" field.
func (kctu *KcClassTeacherUpdate) SetClassID(i int) *KcClassTeacherUpdate {
	kctu.mutation.ResetClassID()
	kctu.mutation.SetClassID(i)
	return kctu
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (kctu *KcClassTeacherUpdate) SetNillableClassID(i *int) *KcClassTeacherUpdate {
	if i != nil {
		kctu.SetClassID(*i)
	}
	return kctu
}

// ClearClassID clears the value of the "class_id" field.
func (kctu *KcClassTeacherUpdate) ClearClassID() *KcClassTeacherUpdate {
	kctu.mutation.ClearClassID()
	return kctu
}

// SetTeacherID sets the "teacher_id" field.
func (kctu *KcClassTeacherUpdate) SetTeacherID(i int) *KcClassTeacherUpdate {
	kctu.mutation.ResetTeacherID()
	kctu.mutation.SetTeacherID(i)
	return kctu
}

// SetNillableTeacherID sets the "teacher_id" field if the given value is not nil.
func (kctu *KcClassTeacherUpdate) SetNillableTeacherID(i *int) *KcClassTeacherUpdate {
	if i != nil {
		kctu.SetTeacherID(*i)
	}
	return kctu
}

// ClearTeacherID clears the value of the "teacher_id" field.
func (kctu *KcClassTeacherUpdate) ClearTeacherID() *KcClassTeacherUpdate {
	kctu.mutation.ClearTeacherID()
	return kctu
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (kctu *KcClassTeacherUpdate) SetTeacher(t *Teacher) *KcClassTeacherUpdate {
	return kctu.SetTeacherID(t.ID)
}

// SetClass sets the "class" edge to the KcClass entity.
func (kctu *KcClassTeacherUpdate) SetClass(k *KcClass) *KcClassTeacherUpdate {
	return kctu.SetClassID(k.ID)
}

// Mutation returns the KcClassTeacherMutation object of the builder.
func (kctu *KcClassTeacherUpdate) Mutation() *KcClassTeacherMutation {
	return kctu.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (kctu *KcClassTeacherUpdate) ClearTeacher() *KcClassTeacherUpdate {
	kctu.mutation.ClearTeacher()
	return kctu
}

// ClearClass clears the "class" edge to the KcClass entity.
func (kctu *KcClassTeacherUpdate) ClearClass() *KcClassTeacherUpdate {
	kctu.mutation.ClearClass()
	return kctu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kctu *KcClassTeacherUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(kctu.hooks) == 0 {
		affected, err = kctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcClassTeacherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kctu.mutation = mutation
			affected, err = kctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kctu.hooks) - 1; i >= 0; i-- {
			mut = kctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kctu *KcClassTeacherUpdate) SaveX(ctx context.Context) int {
	affected, err := kctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kctu *KcClassTeacherUpdate) Exec(ctx context.Context) error {
	_, err := kctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kctu *KcClassTeacherUpdate) ExecX(ctx context.Context) {
	if err := kctu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kctu *KcClassTeacherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kcclassteacher.Table,
			Columns: kcclassteacher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcclassteacher.FieldID,
			},
		},
	}
	if ps := kctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kctu.mutation.ShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclassteacher.FieldShowStatus,
		})
	}
	if value, ok := kctu.mutation.AddedShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclassteacher.FieldShowStatus,
		})
	}
	if value, ok := kctu.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclassteacher.FieldSortOrder,
		})
	}
	if value, ok := kctu.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclassteacher.FieldSortOrder,
		})
	}
	if kctu.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclassteacher.TeacherTable,
			Columns: []string{kcclassteacher.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kctu.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclassteacher.TeacherTable,
			Columns: []string{kcclassteacher.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kctu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclassteacher.ClassTable,
			Columns: []string{kcclassteacher.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kctu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclassteacher.ClassTable,
			Columns: []string{kcclassteacher.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kcclassteacher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KcClassTeacherUpdateOne is the builder for updating a single KcClassTeacher entity.
type KcClassTeacherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KcClassTeacherMutation
}

// SetShowStatus sets the "show_status" field.
func (kctuo *KcClassTeacherUpdateOne) SetShowStatus(u uint8) *KcClassTeacherUpdateOne {
	kctuo.mutation.ResetShowStatus()
	kctuo.mutation.SetShowStatus(u)
	return kctuo
}

// SetNillableShowStatus sets the "show_status" field if the given value is not nil.
func (kctuo *KcClassTeacherUpdateOne) SetNillableShowStatus(u *uint8) *KcClassTeacherUpdateOne {
	if u != nil {
		kctuo.SetShowStatus(*u)
	}
	return kctuo
}

// AddShowStatus adds u to the "show_status" field.
func (kctuo *KcClassTeacherUpdateOne) AddShowStatus(u uint8) *KcClassTeacherUpdateOne {
	kctuo.mutation.AddShowStatus(u)
	return kctuo
}

// SetSortOrder sets the "sort_order" field.
func (kctuo *KcClassTeacherUpdateOne) SetSortOrder(i int) *KcClassTeacherUpdateOne {
	kctuo.mutation.ResetSortOrder()
	kctuo.mutation.SetSortOrder(i)
	return kctuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (kctuo *KcClassTeacherUpdateOne) SetNillableSortOrder(i *int) *KcClassTeacherUpdateOne {
	if i != nil {
		kctuo.SetSortOrder(*i)
	}
	return kctuo
}

// AddSortOrder adds i to the "sort_order" field.
func (kctuo *KcClassTeacherUpdateOne) AddSortOrder(i int) *KcClassTeacherUpdateOne {
	kctuo.mutation.AddSortOrder(i)
	return kctuo
}

// SetClassID sets the "class_id" field.
func (kctuo *KcClassTeacherUpdateOne) SetClassID(i int) *KcClassTeacherUpdateOne {
	kctuo.mutation.ResetClassID()
	kctuo.mutation.SetClassID(i)
	return kctuo
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (kctuo *KcClassTeacherUpdateOne) SetNillableClassID(i *int) *KcClassTeacherUpdateOne {
	if i != nil {
		kctuo.SetClassID(*i)
	}
	return kctuo
}

// ClearClassID clears the value of the "class_id" field.
func (kctuo *KcClassTeacherUpdateOne) ClearClassID() *KcClassTeacherUpdateOne {
	kctuo.mutation.ClearClassID()
	return kctuo
}

// SetTeacherID sets the "teacher_id" field.
func (kctuo *KcClassTeacherUpdateOne) SetTeacherID(i int) *KcClassTeacherUpdateOne {
	kctuo.mutation.ResetTeacherID()
	kctuo.mutation.SetTeacherID(i)
	return kctuo
}

// SetNillableTeacherID sets the "teacher_id" field if the given value is not nil.
func (kctuo *KcClassTeacherUpdateOne) SetNillableTeacherID(i *int) *KcClassTeacherUpdateOne {
	if i != nil {
		kctuo.SetTeacherID(*i)
	}
	return kctuo
}

// ClearTeacherID clears the value of the "teacher_id" field.
func (kctuo *KcClassTeacherUpdateOne) ClearTeacherID() *KcClassTeacherUpdateOne {
	kctuo.mutation.ClearTeacherID()
	return kctuo
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (kctuo *KcClassTeacherUpdateOne) SetTeacher(t *Teacher) *KcClassTeacherUpdateOne {
	return kctuo.SetTeacherID(t.ID)
}

// SetClass sets the "class" edge to the KcClass entity.
func (kctuo *KcClassTeacherUpdateOne) SetClass(k *KcClass) *KcClassTeacherUpdateOne {
	return kctuo.SetClassID(k.ID)
}

// Mutation returns the KcClassTeacherMutation object of the builder.
func (kctuo *KcClassTeacherUpdateOne) Mutation() *KcClassTeacherMutation {
	return kctuo.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (kctuo *KcClassTeacherUpdateOne) ClearTeacher() *KcClassTeacherUpdateOne {
	kctuo.mutation.ClearTeacher()
	return kctuo
}

// ClearClass clears the "class" edge to the KcClass entity.
func (kctuo *KcClassTeacherUpdateOne) ClearClass() *KcClassTeacherUpdateOne {
	kctuo.mutation.ClearClass()
	return kctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kctuo *KcClassTeacherUpdateOne) Select(field string, fields ...string) *KcClassTeacherUpdateOne {
	kctuo.fields = append([]string{field}, fields...)
	return kctuo
}

// Save executes the query and returns the updated KcClassTeacher entity.
func (kctuo *KcClassTeacherUpdateOne) Save(ctx context.Context) (*KcClassTeacher, error) {
	var (
		err  error
		node *KcClassTeacher
	)
	if len(kctuo.hooks) == 0 {
		node, err = kctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcClassTeacherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kctuo.mutation = mutation
			node, err = kctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kctuo.hooks) - 1; i >= 0; i-- {
			mut = kctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kctuo *KcClassTeacherUpdateOne) SaveX(ctx context.Context) *KcClassTeacher {
	node, err := kctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kctuo *KcClassTeacherUpdateOne) Exec(ctx context.Context) error {
	_, err := kctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kctuo *KcClassTeacherUpdateOne) ExecX(ctx context.Context) {
	if err := kctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kctuo *KcClassTeacherUpdateOne) sqlSave(ctx context.Context) (_node *KcClassTeacher, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kcclassteacher.Table,
			Columns: kcclassteacher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kcclassteacher.FieldID,
			},
		},
	}
	id, ok := kctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KcClassTeacher.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kcclassteacher.FieldID)
		for _, f := range fields {
			if !kcclassteacher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kcclassteacher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kctuo.mutation.ShowStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclassteacher.FieldShowStatus,
		})
	}
	if value, ok := kctuo.mutation.AddedShowStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: kcclassteacher.FieldShowStatus,
		})
	}
	if value, ok := kctuo.mutation.SortOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclassteacher.FieldSortOrder,
		})
	}
	if value, ok := kctuo.mutation.AddedSortOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: kcclassteacher.FieldSortOrder,
		})
	}
	if kctuo.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclassteacher.TeacherTable,
			Columns: []string{kcclassteacher.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kctuo.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclassteacher.TeacherTable,
			Columns: []string{kcclassteacher.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kctuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclassteacher.ClassTable,
			Columns: []string{kcclassteacher.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kctuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kcclassteacher.ClassTable,
			Columns: []string{kcclassteacher.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kcclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KcClassTeacher{config: kctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kcclassteacher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

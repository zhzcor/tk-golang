// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/messagetype"

	"entgo.io/ent/dialect/sql"
)

// MessageType is the model entity for the MessageType schema.
type MessageType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name"`
	// Status holds the value of the "status" field.
	// 状态：1、锁定。2:生效
	Status uint8 `json:"status"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageTypeQuery when eager-loading is set.
	Edges MessageTypeEdges `json:"edges"`
}

// MessageTypeEdges holds the relations/edges for other nodes in the graph.
type MessageTypeEdges struct {
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e MessageTypeEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[0] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MessageType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case messagetype.FieldID, messagetype.FieldStatus:
			values[i] = new(sql.NullInt64)
		case messagetype.FieldUUID, messagetype.FieldName:
			values[i] = new(sql.NullString)
		case messagetype.FieldCreatedAt, messagetype.FieldUpdatedAt, messagetype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MessageType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MessageType fields.
func (mt *MessageType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messagetype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mt.ID = int(value.Int64)
		case messagetype.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				mt.UUID = value.String
			}
		case messagetype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mt.CreatedAt = new(time.Time)
				*mt.CreatedAt = value.Time
			}
		case messagetype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mt.UpdatedAt = new(time.Time)
				*mt.UpdatedAt = value.Time
			}
		case messagetype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mt.DeletedAt = new(time.Time)
				*mt.DeletedAt = value.Time
			}
		case messagetype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mt.Name = value.String
			}
		case messagetype.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mt.Status = uint8(value.Int64)
			}
		}
	}
	return nil
}

// QueryMessages queries the "messages" edge of the MessageType entity.
func (mt *MessageType) QueryMessages() *MessageQuery {
	return (&MessageTypeClient{config: mt.config}).QueryMessages(mt)
}

// Update returns a builder for updating this MessageType.
// Note that you need to call MessageType.Unwrap() before calling this method if this MessageType
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MessageType) Update() *MessageTypeUpdateOne {
	return (&MessageTypeClient{config: mt.config}).UpdateOne(mt)
}

// Unwrap unwraps the MessageType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *MessageType) Unwrap() *MessageType {
	tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MessageType is not a transactional entity")
	}
	mt.config.driver = tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MessageType) String() string {
	var builder strings.Builder
	builder.WriteString("MessageType(")
	builder.WriteString(fmt.Sprintf("id=%v", mt.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(mt.UUID)
	if v := mt.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := mt.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := mt.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(mt.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", mt.Status))
	builder.WriteByte(')')
	return builder.String()
}

// MessageTypes is a parsable slice of MessageType.
type MessageTypes []*MessageType

func (mt MessageTypes) config(cfg config) {
	for _i := range mt {
		mt[_i].config = cfg
	}
}

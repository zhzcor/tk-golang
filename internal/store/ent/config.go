// Code generated by entc, DO NOT EDIT.

package ent

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...interface{})
	// hooks to execute on mutations.
	hooks *hooks
}

// hooks per client, for fast access.
type hooks struct {
	Activity                    []ent.Hook
	ActivityApplyInfo           []ent.Hook
	ActivityType                []ent.Hook
	Admin                       []ent.Hook
	AdminLoginLog               []ent.Hook
	AdminOperationLog           []ent.Hook
	Advertise                   []ent.Hook
	AppAgreement                []ent.Hook
	AppVersion                  []ent.Hook
	Attachment                  []ent.Hook
	City                        []ent.Hook
	Collection                  []ent.Hook
	GroupCard                   []ent.Hook
	HotSearch                   []ent.Hook
	ImportTask                  []ent.Hook
	InformationClassify         []ent.Hook
	ItemCategory                []ent.Hook
	KcClass                     []ent.Hook
	KcClassTeacher              []ent.Hook
	KcCourse                    []ent.Hook
	KcCourseChapter             []ent.Hook
	KcCourseSection             []ent.Hook
	KcCourseSmallCategory       []ent.Hook
	KcCourseTeacher             []ent.Hook
	KcCourseVideo               []ent.Hook
	KcSmallCategoryAttachment   []ent.Hook
	KcSmallCategoryExamPaper    []ent.Hook
	KcSmallCategoryQuestion     []ent.Hook
	KcUserClass                 []ent.Hook
	KcUserCourse                []ent.Hook
	KcVideoUploadTask           []ent.Hook
	Level                       []ent.Hook
	Major                       []ent.Hook
	MajorDetail                 []ent.Hook
	MajorDetailTag              []ent.Hook
	MakeUserQuestionRecord      []ent.Hook
	Message                     []ent.Hook
	MessageType                 []ent.Hook
	Permission                  []ent.Hook
	Role                        []ent.Hook
	RolePermission              []ent.Hook
	SharePoster                 []ent.Hook
	Teacher                     []ent.Hook
	TeacherTag                  []ent.Hook
	TkChapter                   []ent.Hook
	TkExamPaper                 []ent.Hook
	TkExamPaperPartition        []ent.Hook
	TkExamPaperPartitionScore   []ent.Hook
	TkExamPaperSimulation       []ent.Hook
	TkExamPartitionQuestionLink []ent.Hook
	TkExamQuestionType          []ent.Hook
	TkKnowledgePoint            []ent.Hook
	TkQuestion                  []ent.Hook
	TkQuestionAnswerOption      []ent.Hook
	TkQuestionBank              []ent.Hook
	TkQuestionBankCity          []ent.Hook
	TkQuestionBankMajor         []ent.Hook
	TkQuestionErrorFeedback     []ent.Hook
	TkQuestionSection           []ent.Hook
	TkSection                   []ent.Hook
	TkUserExamScoreRecord       []ent.Hook
	TkUserQuestionBankRecord    []ent.Hook
	TkUserQuestionRecord        []ent.Hook
	TkUserRandomExamRecode      []ent.Hook
	TkUserSimulationTeacherMark []ent.Hook
	TkUserWrongQuestionRecode   []ent.Hook
	User                        []ent.Hook
	UserAskAnswer               []ent.Hook
	UserAskAnswerAttachment     []ent.Hook
	UserCourseAppraise          []ent.Hook
	UserLoginLog                []ent.Hook
	VideoRecord                 []ent.Hook
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...interface{})) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gserver/internal/store/ent/hotsearch"
	"gserver/internal/store/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HotSearchUpdate is the builder for updating HotSearch entities.
type HotSearchUpdate struct {
	config
	hooks    []Hook
	mutation *HotSearchMutation
}

// Where adds a new predicate for the HotSearchUpdate builder.
func (hsu *HotSearchUpdate) Where(ps ...predicate.HotSearch) *HotSearchUpdate {
	hsu.mutation.predicates = append(hsu.mutation.predicates, ps...)
	return hsu
}

// SetUUID sets the "uuid" field.
func (hsu *HotSearchUpdate) SetUUID(s string) *HotSearchUpdate {
	hsu.mutation.SetUUID(s)
	return hsu
}

// SetUpdatedAt sets the "updated_at" field.
func (hsu *HotSearchUpdate) SetUpdatedAt(t time.Time) *HotSearchUpdate {
	hsu.mutation.SetUpdatedAt(t)
	return hsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hsu *HotSearchUpdate) ClearUpdatedAt() *HotSearchUpdate {
	hsu.mutation.ClearUpdatedAt()
	return hsu
}

// SetDeletedAt sets the "deleted_at" field.
func (hsu *HotSearchUpdate) SetDeletedAt(t time.Time) *HotSearchUpdate {
	hsu.mutation.SetDeletedAt(t)
	return hsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hsu *HotSearchUpdate) SetNillableDeletedAt(t *time.Time) *HotSearchUpdate {
	if t != nil {
		hsu.SetDeletedAt(*t)
	}
	return hsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (hsu *HotSearchUpdate) ClearDeletedAt() *HotSearchUpdate {
	hsu.mutation.ClearDeletedAt()
	return hsu
}

// SetName sets the "name" field.
func (hsu *HotSearchUpdate) SetName(s string) *HotSearchUpdate {
	hsu.mutation.SetName(s)
	return hsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hsu *HotSearchUpdate) SetNillableName(s *string) *HotSearchUpdate {
	if s != nil {
		hsu.SetName(*s)
	}
	return hsu
}

// SetStatus sets the "status" field.
func (hsu *HotSearchUpdate) SetStatus(u uint8) *HotSearchUpdate {
	hsu.mutation.ResetStatus()
	hsu.mutation.SetStatus(u)
	return hsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hsu *HotSearchUpdate) SetNillableStatus(u *uint8) *HotSearchUpdate {
	if u != nil {
		hsu.SetStatus(*u)
	}
	return hsu
}

// AddStatus adds u to the "status" field.
func (hsu *HotSearchUpdate) AddStatus(u uint8) *HotSearchUpdate {
	hsu.mutation.AddStatus(u)
	return hsu
}

// SetSearchCount sets the "search_count" field.
func (hsu *HotSearchUpdate) SetSearchCount(i int) *HotSearchUpdate {
	hsu.mutation.ResetSearchCount()
	hsu.mutation.SetSearchCount(i)
	return hsu
}

// SetNillableSearchCount sets the "search_count" field if the given value is not nil.
func (hsu *HotSearchUpdate) SetNillableSearchCount(i *int) *HotSearchUpdate {
	if i != nil {
		hsu.SetSearchCount(*i)
	}
	return hsu
}

// AddSearchCount adds i to the "search_count" field.
func (hsu *HotSearchUpdate) AddSearchCount(i int) *HotSearchUpdate {
	hsu.mutation.AddSearchCount(i)
	return hsu
}

// Mutation returns the HotSearchMutation object of the builder.
func (hsu *HotSearchUpdate) Mutation() *HotSearchMutation {
	return hsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hsu *HotSearchUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	hsu.defaults()
	if len(hsu.hooks) == 0 {
		affected, err = hsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HotSearchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hsu.mutation = mutation
			affected, err = hsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hsu.hooks) - 1; i >= 0; i-- {
			mut = hsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hsu *HotSearchUpdate) SaveX(ctx context.Context) int {
	affected, err := hsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hsu *HotSearchUpdate) Exec(ctx context.Context) error {
	_, err := hsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsu *HotSearchUpdate) ExecX(ctx context.Context) {
	if err := hsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hsu *HotSearchUpdate) defaults() {
	if _, ok := hsu.mutation.UpdatedAt(); !ok && !hsu.mutation.UpdatedAtCleared() {
		v := hotsearch.UpdateDefaultUpdatedAt()
		hsu.mutation.SetUpdatedAt(v)
	}
}

func (hsu *HotSearchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hotsearch.Table,
			Columns: hotsearch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hotsearch.FieldID,
			},
		},
	}
	if ps := hsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hsu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hotsearch.FieldUUID,
		})
	}
	if hsu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: hotsearch.FieldCreatedAt,
		})
	}
	if value, ok := hsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hotsearch.FieldUpdatedAt,
		})
	}
	if hsu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: hotsearch.FieldUpdatedAt,
		})
	}
	if value, ok := hsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hotsearch.FieldDeletedAt,
		})
	}
	if hsu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: hotsearch.FieldDeletedAt,
		})
	}
	if value, ok := hsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hotsearch.FieldName,
		})
	}
	if value, ok := hsu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: hotsearch.FieldStatus,
		})
	}
	if value, ok := hsu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: hotsearch.FieldStatus,
		})
	}
	if value, ok := hsu.mutation.SearchCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: hotsearch.FieldSearchCount,
		})
	}
	if value, ok := hsu.mutation.AddedSearchCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: hotsearch.FieldSearchCount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hotsearch.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HotSearchUpdateOne is the builder for updating a single HotSearch entity.
type HotSearchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HotSearchMutation
}

// SetUUID sets the "uuid" field.
func (hsuo *HotSearchUpdateOne) SetUUID(s string) *HotSearchUpdateOne {
	hsuo.mutation.SetUUID(s)
	return hsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (hsuo *HotSearchUpdateOne) SetUpdatedAt(t time.Time) *HotSearchUpdateOne {
	hsuo.mutation.SetUpdatedAt(t)
	return hsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hsuo *HotSearchUpdateOne) ClearUpdatedAt() *HotSearchUpdateOne {
	hsuo.mutation.ClearUpdatedAt()
	return hsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (hsuo *HotSearchUpdateOne) SetDeletedAt(t time.Time) *HotSearchUpdateOne {
	hsuo.mutation.SetDeletedAt(t)
	return hsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hsuo *HotSearchUpdateOne) SetNillableDeletedAt(t *time.Time) *HotSearchUpdateOne {
	if t != nil {
		hsuo.SetDeletedAt(*t)
	}
	return hsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (hsuo *HotSearchUpdateOne) ClearDeletedAt() *HotSearchUpdateOne {
	hsuo.mutation.ClearDeletedAt()
	return hsuo
}

// SetName sets the "name" field.
func (hsuo *HotSearchUpdateOne) SetName(s string) *HotSearchUpdateOne {
	hsuo.mutation.SetName(s)
	return hsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hsuo *HotSearchUpdateOne) SetNillableName(s *string) *HotSearchUpdateOne {
	if s != nil {
		hsuo.SetName(*s)
	}
	return hsuo
}

// SetStatus sets the "status" field.
func (hsuo *HotSearchUpdateOne) SetStatus(u uint8) *HotSearchUpdateOne {
	hsuo.mutation.ResetStatus()
	hsuo.mutation.SetStatus(u)
	return hsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hsuo *HotSearchUpdateOne) SetNillableStatus(u *uint8) *HotSearchUpdateOne {
	if u != nil {
		hsuo.SetStatus(*u)
	}
	return hsuo
}

// AddStatus adds u to the "status" field.
func (hsuo *HotSearchUpdateOne) AddStatus(u uint8) *HotSearchUpdateOne {
	hsuo.mutation.AddStatus(u)
	return hsuo
}

// SetSearchCount sets the "search_count" field.
func (hsuo *HotSearchUpdateOne) SetSearchCount(i int) *HotSearchUpdateOne {
	hsuo.mutation.ResetSearchCount()
	hsuo.mutation.SetSearchCount(i)
	return hsuo
}

// SetNillableSearchCount sets the "search_count" field if the given value is not nil.
func (hsuo *HotSearchUpdateOne) SetNillableSearchCount(i *int) *HotSearchUpdateOne {
	if i != nil {
		hsuo.SetSearchCount(*i)
	}
	return hsuo
}

// AddSearchCount adds i to the "search_count" field.
func (hsuo *HotSearchUpdateOne) AddSearchCount(i int) *HotSearchUpdateOne {
	hsuo.mutation.AddSearchCount(i)
	return hsuo
}

// Mutation returns the HotSearchMutation object of the builder.
func (hsuo *HotSearchUpdateOne) Mutation() *HotSearchMutation {
	return hsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hsuo *HotSearchUpdateOne) Select(field string, fields ...string) *HotSearchUpdateOne {
	hsuo.fields = append([]string{field}, fields...)
	return hsuo
}

// Save executes the query and returns the updated HotSearch entity.
func (hsuo *HotSearchUpdateOne) Save(ctx context.Context) (*HotSearch, error) {
	var (
		err  error
		node *HotSearch
	)
	hsuo.defaults()
	if len(hsuo.hooks) == 0 {
		node, err = hsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HotSearchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hsuo.mutation = mutation
			node, err = hsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hsuo.hooks) - 1; i >= 0; i-- {
			mut = hsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hsuo *HotSearchUpdateOne) SaveX(ctx context.Context) *HotSearch {
	node, err := hsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hsuo *HotSearchUpdateOne) Exec(ctx context.Context) error {
	_, err := hsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsuo *HotSearchUpdateOne) ExecX(ctx context.Context) {
	if err := hsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hsuo *HotSearchUpdateOne) defaults() {
	if _, ok := hsuo.mutation.UpdatedAt(); !ok && !hsuo.mutation.UpdatedAtCleared() {
		v := hotsearch.UpdateDefaultUpdatedAt()
		hsuo.mutation.SetUpdatedAt(v)
	}
}

func (hsuo *HotSearchUpdateOne) sqlSave(ctx context.Context) (_node *HotSearch, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hotsearch.Table,
			Columns: hotsearch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hotsearch.FieldID,
			},
		},
	}
	id, ok := hsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing HotSearch.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := hsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hotsearch.FieldID)
		for _, f := range fields {
			if !hotsearch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hotsearch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hsuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hotsearch.FieldUUID,
		})
	}
	if hsuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: hotsearch.FieldCreatedAt,
		})
	}
	if value, ok := hsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hotsearch.FieldUpdatedAt,
		})
	}
	if hsuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: hotsearch.FieldUpdatedAt,
		})
	}
	if value, ok := hsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hotsearch.FieldDeletedAt,
		})
	}
	if hsuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: hotsearch.FieldDeletedAt,
		})
	}
	if value, ok := hsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hotsearch.FieldName,
		})
	}
	if value, ok := hsuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: hotsearch.FieldStatus,
		})
	}
	if value, ok := hsuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: hotsearch.FieldStatus,
		})
	}
	if value, ok := hsuo.mutation.SearchCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: hotsearch.FieldSearchCount,
		})
	}
	if value, ok := hsuo.mutation.AddedSearchCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: hotsearch.FieldSearchCount,
		})
	}
	_node = &HotSearch{config: hsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hotsearch.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

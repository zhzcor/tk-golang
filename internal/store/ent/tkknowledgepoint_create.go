// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tkserver/internal/store/ent/tkknowledgepoint"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionbank"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkKnowledgePointCreate is the builder for creating a TkKnowledgePoint entity.
type TkKnowledgePointCreate struct {
	config
	mutation *TkKnowledgePointMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tkpc *TkKnowledgePointCreate) SetUUID(s string) *TkKnowledgePointCreate {
	tkpc.mutation.SetUUID(s)
	return tkpc
}

// SetCreatedAt sets the "created_at" field.
func (tkpc *TkKnowledgePointCreate) SetCreatedAt(t time.Time) *TkKnowledgePointCreate {
	tkpc.mutation.SetCreatedAt(t)
	return tkpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tkpc *TkKnowledgePointCreate) SetNillableCreatedAt(t *time.Time) *TkKnowledgePointCreate {
	if t != nil {
		tkpc.SetCreatedAt(*t)
	}
	return tkpc
}

// SetUpdatedAt sets the "updated_at" field.
func (tkpc *TkKnowledgePointCreate) SetUpdatedAt(t time.Time) *TkKnowledgePointCreate {
	tkpc.mutation.SetUpdatedAt(t)
	return tkpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tkpc *TkKnowledgePointCreate) SetNillableUpdatedAt(t *time.Time) *TkKnowledgePointCreate {
	if t != nil {
		tkpc.SetUpdatedAt(*t)
	}
	return tkpc
}

// SetDeletedAt sets the "deleted_at" field.
func (tkpc *TkKnowledgePointCreate) SetDeletedAt(t time.Time) *TkKnowledgePointCreate {
	tkpc.mutation.SetDeletedAt(t)
	return tkpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tkpc *TkKnowledgePointCreate) SetNillableDeletedAt(t *time.Time) *TkKnowledgePointCreate {
	if t != nil {
		tkpc.SetDeletedAt(*t)
	}
	return tkpc
}

// SetName sets the "name" field.
func (tkpc *TkKnowledgePointCreate) SetName(s string) *TkKnowledgePointCreate {
	tkpc.mutation.SetName(s)
	return tkpc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tkpc *TkKnowledgePointCreate) SetNillableName(s *string) *TkKnowledgePointCreate {
	if s != nil {
		tkpc.SetName(*s)
	}
	return tkpc
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tkpc *TkKnowledgePointCreate) SetQuestionBankID(i int) *TkKnowledgePointCreate {
	tkpc.mutation.SetQuestionBankID(i)
	return tkpc
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tkpc *TkKnowledgePointCreate) SetNillableQuestionBankID(i *int) *TkKnowledgePointCreate {
	if i != nil {
		tkpc.SetQuestionBankID(*i)
	}
	return tkpc
}

// SetQuestionCount sets the "question_count" field.
func (tkpc *TkKnowledgePointCreate) SetQuestionCount(i int) *TkKnowledgePointCreate {
	tkpc.mutation.SetQuestionCount(i)
	return tkpc
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tkpc *TkKnowledgePointCreate) SetNillableQuestionCount(i *int) *TkKnowledgePointCreate {
	if i != nil {
		tkpc.SetQuestionCount(*i)
	}
	return tkpc
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tkpc *TkKnowledgePointCreate) SetQuestionBank(t *TkQuestionBank) *TkKnowledgePointCreate {
	return tkpc.SetQuestionBankID(t.ID)
}

// AddQuestionIDs adds the "questions" edge to the TkQuestion entity by IDs.
func (tkpc *TkKnowledgePointCreate) AddQuestionIDs(ids ...int) *TkKnowledgePointCreate {
	tkpc.mutation.AddQuestionIDs(ids...)
	return tkpc
}

// AddQuestions adds the "questions" edges to the TkQuestion entity.
func (tkpc *TkKnowledgePointCreate) AddQuestions(t ...*TkQuestion) *TkKnowledgePointCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tkpc.AddQuestionIDs(ids...)
}

// Mutation returns the TkKnowledgePointMutation object of the builder.
func (tkpc *TkKnowledgePointCreate) Mutation() *TkKnowledgePointMutation {
	return tkpc.mutation
}

// Save creates the TkKnowledgePoint in the database.
func (tkpc *TkKnowledgePointCreate) Save(ctx context.Context) (*TkKnowledgePoint, error) {
	var (
		err  error
		node *TkKnowledgePoint
	)
	tkpc.defaults()
	if len(tkpc.hooks) == 0 {
		if err = tkpc.check(); err != nil {
			return nil, err
		}
		node, err = tkpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkKnowledgePointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tkpc.check(); err != nil {
				return nil, err
			}
			tkpc.mutation = mutation
			node, err = tkpc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tkpc.hooks) - 1; i >= 0; i-- {
			mut = tkpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tkpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tkpc *TkKnowledgePointCreate) SaveX(ctx context.Context) *TkKnowledgePoint {
	v, err := tkpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tkpc *TkKnowledgePointCreate) defaults() {
	if _, ok := tkpc.mutation.CreatedAt(); !ok {
		v := tkknowledgepoint.DefaultCreatedAt()
		tkpc.mutation.SetCreatedAt(v)
	}
	if _, ok := tkpc.mutation.UpdatedAt(); !ok {
		v := tkknowledgepoint.DefaultUpdatedAt()
		tkpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tkpc.mutation.Name(); !ok {
		v := tkknowledgepoint.DefaultName
		tkpc.mutation.SetName(v)
	}
	if _, ok := tkpc.mutation.QuestionBankID(); !ok {
		v := tkknowledgepoint.DefaultQuestionBankID
		tkpc.mutation.SetQuestionBankID(v)
	}
	if _, ok := tkpc.mutation.QuestionCount(); !ok {
		v := tkknowledgepoint.DefaultQuestionCount
		tkpc.mutation.SetQuestionCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tkpc *TkKnowledgePointCreate) check() error {
	if _, ok := tkpc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := tkpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := tkpc.mutation.QuestionCount(); !ok {
		return &ValidationError{Name: "question_count", err: errors.New("ent: missing required field \"question_count\"")}
	}
	return nil
}

func (tkpc *TkKnowledgePointCreate) sqlSave(ctx context.Context) (*TkKnowledgePoint, error) {
	_node, _spec := tkpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tkpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tkpc *TkKnowledgePointCreate) createSpec() (*TkKnowledgePoint, *sqlgraph.CreateSpec) {
	var (
		_node = &TkKnowledgePoint{config: tkpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tkknowledgepoint.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkknowledgepoint.FieldID,
			},
		}
	)
	if value, ok := tkpc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkknowledgepoint.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := tkpc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkknowledgepoint.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := tkpc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkknowledgepoint.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := tkpc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkknowledgepoint.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tkpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkknowledgepoint.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tkpc.mutation.QuestionCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkknowledgepoint.FieldQuestionCount,
		})
		_node.QuestionCount = value
	}
	if nodes := tkpc.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkknowledgepoint.QuestionBankTable,
			Columns: []string{tkknowledgepoint.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionBankID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tkpc.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tkknowledgepoint.QuestionsTable,
			Columns: tkknowledgepoint.QuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TkKnowledgePointCreateBulk is the builder for creating many TkKnowledgePoint entities in bulk.
type TkKnowledgePointCreateBulk struct {
	config
	builders []*TkKnowledgePointCreate
}

// Save creates the TkKnowledgePoint entities in the database.
func (tkpcb *TkKnowledgePointCreateBulk) Save(ctx context.Context) ([]*TkKnowledgePoint, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tkpcb.builders))
	nodes := make([]*TkKnowledgePoint, len(tkpcb.builders))
	mutators := make([]Mutator, len(tkpcb.builders))
	for i := range tkpcb.builders {
		func(i int, root context.Context) {
			builder := tkpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TkKnowledgePointMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tkpcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tkpcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tkpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tkpcb *TkKnowledgePointCreateBulk) SaveX(ctx context.Context) []*TkKnowledgePoint {
	v, err := tkpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

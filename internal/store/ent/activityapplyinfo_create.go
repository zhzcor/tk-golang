// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/activity"
	"gserver/internal/store/ent/activityapplyinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityApplyInfoCreate is the builder for creating a ActivityApplyInfo entity.
type ActivityApplyInfoCreate struct {
	config
	mutation *ActivityApplyInfoMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (aaic *ActivityApplyInfoCreate) SetUUID(s string) *ActivityApplyInfoCreate {
	aaic.mutation.SetUUID(s)
	return aaic
}

// SetCreatedAt sets the "created_at" field.
func (aaic *ActivityApplyInfoCreate) SetCreatedAt(t time.Time) *ActivityApplyInfoCreate {
	aaic.mutation.SetCreatedAt(t)
	return aaic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aaic *ActivityApplyInfoCreate) SetNillableCreatedAt(t *time.Time) *ActivityApplyInfoCreate {
	if t != nil {
		aaic.SetCreatedAt(*t)
	}
	return aaic
}

// SetUpdatedAt sets the "updated_at" field.
func (aaic *ActivityApplyInfoCreate) SetUpdatedAt(t time.Time) *ActivityApplyInfoCreate {
	aaic.mutation.SetUpdatedAt(t)
	return aaic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aaic *ActivityApplyInfoCreate) SetNillableUpdatedAt(t *time.Time) *ActivityApplyInfoCreate {
	if t != nil {
		aaic.SetUpdatedAt(*t)
	}
	return aaic
}

// SetDeletedAt sets the "deleted_at" field.
func (aaic *ActivityApplyInfoCreate) SetDeletedAt(t time.Time) *ActivityApplyInfoCreate {
	aaic.mutation.SetDeletedAt(t)
	return aaic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aaic *ActivityApplyInfoCreate) SetNillableDeletedAt(t *time.Time) *ActivityApplyInfoCreate {
	if t != nil {
		aaic.SetDeletedAt(*t)
	}
	return aaic
}

// SetName sets the "name" field.
func (aaic *ActivityApplyInfoCreate) SetName(s string) *ActivityApplyInfoCreate {
	aaic.mutation.SetName(s)
	return aaic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aaic *ActivityApplyInfoCreate) SetNillableName(s *string) *ActivityApplyInfoCreate {
	if s != nil {
		aaic.SetName(*s)
	}
	return aaic
}

// SetPhone sets the "phone" field.
func (aaic *ActivityApplyInfoCreate) SetPhone(s string) *ActivityApplyInfoCreate {
	aaic.mutation.SetPhone(s)
	return aaic
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (aaic *ActivityApplyInfoCreate) SetNillablePhone(s *string) *ActivityApplyInfoCreate {
	if s != nil {
		aaic.SetPhone(*s)
	}
	return aaic
}

// SetRemark sets the "remark" field.
func (aaic *ActivityApplyInfoCreate) SetRemark(s string) *ActivityApplyInfoCreate {
	aaic.mutation.SetRemark(s)
	return aaic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aaic *ActivityApplyInfoCreate) SetNillableRemark(s *string) *ActivityApplyInfoCreate {
	if s != nil {
		aaic.SetRemark(*s)
	}
	return aaic
}

// SetIsOurStudent sets the "is_our_student" field.
func (aaic *ActivityApplyInfoCreate) SetIsOurStudent(u uint8) *ActivityApplyInfoCreate {
	aaic.mutation.SetIsOurStudent(u)
	return aaic
}

// SetNillableIsOurStudent sets the "is_our_student" field if the given value is not nil.
func (aaic *ActivityApplyInfoCreate) SetNillableIsOurStudent(u *uint8) *ActivityApplyInfoCreate {
	if u != nil {
		aaic.SetIsOurStudent(*u)
	}
	return aaic
}

// SetActivityID sets the "activity_id" field.
func (aaic *ActivityApplyInfoCreate) SetActivityID(i int) *ActivityApplyInfoCreate {
	aaic.mutation.SetActivityID(i)
	return aaic
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (aaic *ActivityApplyInfoCreate) SetNillableActivityID(i *int) *ActivityApplyInfoCreate {
	if i != nil {
		aaic.SetActivityID(*i)
	}
	return aaic
}

// SetActivity sets the "activity" edge to the Activity entity.
func (aaic *ActivityApplyInfoCreate) SetActivity(a *Activity) *ActivityApplyInfoCreate {
	return aaic.SetActivityID(a.ID)
}

// Mutation returns the ActivityApplyInfoMutation object of the builder.
func (aaic *ActivityApplyInfoCreate) Mutation() *ActivityApplyInfoMutation {
	return aaic.mutation
}

// Save creates the ActivityApplyInfo in the database.
func (aaic *ActivityApplyInfoCreate) Save(ctx context.Context) (*ActivityApplyInfo, error) {
	var (
		err  error
		node *ActivityApplyInfo
	)
	aaic.defaults()
	if len(aaic.hooks) == 0 {
		if err = aaic.check(); err != nil {
			return nil, err
		}
		node, err = aaic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityApplyInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aaic.check(); err != nil {
				return nil, err
			}
			aaic.mutation = mutation
			node, err = aaic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aaic.hooks) - 1; i >= 0; i-- {
			mut = aaic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aaic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aaic *ActivityApplyInfoCreate) SaveX(ctx context.Context) *ActivityApplyInfo {
	v, err := aaic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (aaic *ActivityApplyInfoCreate) defaults() {
	if _, ok := aaic.mutation.CreatedAt(); !ok {
		v := activityapplyinfo.DefaultCreatedAt()
		aaic.mutation.SetCreatedAt(v)
	}
	if _, ok := aaic.mutation.UpdatedAt(); !ok {
		v := activityapplyinfo.DefaultUpdatedAt()
		aaic.mutation.SetUpdatedAt(v)
	}
	if _, ok := aaic.mutation.Name(); !ok {
		v := activityapplyinfo.DefaultName
		aaic.mutation.SetName(v)
	}
	if _, ok := aaic.mutation.Phone(); !ok {
		v := activityapplyinfo.DefaultPhone
		aaic.mutation.SetPhone(v)
	}
	if _, ok := aaic.mutation.Remark(); !ok {
		v := activityapplyinfo.DefaultRemark
		aaic.mutation.SetRemark(v)
	}
	if _, ok := aaic.mutation.IsOurStudent(); !ok {
		v := activityapplyinfo.DefaultIsOurStudent
		aaic.mutation.SetIsOurStudent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aaic *ActivityApplyInfoCreate) check() error {
	if _, ok := aaic.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := aaic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := aaic.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New("ent: missing required field \"phone\"")}
	}
	if _, ok := aaic.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New("ent: missing required field \"remark\"")}
	}
	if _, ok := aaic.mutation.IsOurStudent(); !ok {
		return &ValidationError{Name: "is_our_student", err: errors.New("ent: missing required field \"is_our_student\"")}
	}
	return nil
}

func (aaic *ActivityApplyInfoCreate) sqlSave(ctx context.Context) (*ActivityApplyInfo, error) {
	_node, _spec := aaic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aaic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (aaic *ActivityApplyInfoCreate) createSpec() (*ActivityApplyInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &ActivityApplyInfo{config: aaic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: activityapplyinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activityapplyinfo.FieldID,
			},
		}
	)
	if value, ok := aaic.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := aaic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activityapplyinfo.FieldCreatedAt,
		})
		_node.CreatedAt = &value
	}
	if value, ok := aaic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activityapplyinfo.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if value, ok := aaic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activityapplyinfo.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := aaic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := aaic.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := aaic.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activityapplyinfo.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := aaic.mutation.IsOurStudent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: activityapplyinfo.FieldIsOurStudent,
		})
		_node.IsOurStudent = value
	}
	if nodes := aaic.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activityapplyinfo.ActivityTable,
			Columns: []string{activityapplyinfo.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ActivityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActivityApplyInfoCreateBulk is the builder for creating many ActivityApplyInfo entities in bulk.
type ActivityApplyInfoCreateBulk struct {
	config
	builders []*ActivityApplyInfoCreate
}

// Save creates the ActivityApplyInfo entities in the database.
func (aaicb *ActivityApplyInfoCreateBulk) Save(ctx context.Context) ([]*ActivityApplyInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aaicb.builders))
	nodes := make([]*ActivityApplyInfo, len(aaicb.builders))
	mutators := make([]Mutator, len(aaicb.builders))
	for i := range aaicb.builders {
		func(i int, root context.Context) {
			builder := aaicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityApplyInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aaicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aaicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aaicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aaicb *ActivityApplyInfoCreateBulk) SaveX(ctx context.Context) []*ActivityApplyInfo {
	v, err := aaicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

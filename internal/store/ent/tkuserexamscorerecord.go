// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/teacher"
	"tkserver/internal/store/ent/tkexampaper"
	"tkserver/internal/store/ent/tksection"
	"tkserver/internal/store/ent/tkuserexamscorerecord"
	"tkserver/internal/store/ent/user"

	"entgo.io/ent/dialect/sql"
)

// TkUserExamScoreRecord is the model entity for the TkUserExamScoreRecord schema.
type TkUserExamScoreRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// SubjectiveQuestionScore holds the value of the "subjective_question_score" field.
	// 主观题分数
	SubjectiveQuestionScore uint8 `json:"subjective_question_score"`
	// ObjectiveQuestionScore holds the value of the "objective_question_score" field.
	// 客观题分数
	ObjectiveQuestionScore uint8 `json:"objective_question_score"`
	// TotalScore holds the value of the "total_score" field.
	// 总分
	TotalScore uint8 `json:"total_score"`
	// Duration holds the value of the "duration" field.
	// 答题时长
	Duration int `json:"duration"`
	// RightCount holds the value of the "right_count" field.
	// 答对题数
	RightCount int `json:"right_count"`
	// WrongCount holds the value of the "wrong_count" field.
	// 答错题数
	WrongCount int `json:"wrong_count"`
	// TotalCount holds the value of the "total_count" field.
	// 总题数
	TotalCount int `json:"total_count"`
	// NoAnswerCount holds the value of the "no_answer_count" field.
	// 未作答题数
	NoAnswerCount int `json:"no_answer_count"`
	// Rank holds the value of the "rank" field.
	// 排名
	Rank int `json:"rank"`
	// Status holds the value of the "status" field.
	// 判卷状态，1：未完成，2：已完成
	Status uint8 `json:"status"`
	// OrderStatus holds the value of the "order_status" field.
	// 用户预约状态，1：未预约，2：已预约
	OrderStatus uint8 `json:"order_status"`
	// ExamPaperID holds the value of the "exam_paper_id" field.
	// 试卷id
	ExamPaperID int `json:"exam_paper_id"`
	// SectionID holds the value of the "section_id" field.
	// 节id
	SectionID int `json:"section_id"`
	// UserID holds the value of the "user_id" field.
	// 学生用户id
	UserID int `json:"user_id"`
	// OperationTeacherID holds the value of the "operation_teacher_id" field.
	// 老师id
	OperationTeacherID int `json:"operation_teacher_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkUserExamScoreRecordQuery when eager-loading is set.
	Edges TkUserExamScoreRecordEdges `json:"edges"`
}

// TkUserExamScoreRecordEdges holds the relations/edges for other nodes in the graph.
type TkUserExamScoreRecordEdges struct {
	// ExamPaper holds the value of the exam_paper edge.
	ExamPaper *TkExamPaper `json:"exam_paper,omitempty"`
	// Section holds the value of the section edge.
	Section *TkSection `json:"section,omitempty"`
	// Teacher holds the value of the teacher edge.
	Teacher *Teacher `json:"teacher,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// UserExamDetails holds the value of the user_exam_details edge.
	UserExamDetails []*TkUserSimulationTeacherMark `json:"user_exam_details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ExamPaperOrErr returns the ExamPaper value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserExamScoreRecordEdges) ExamPaperOrErr() (*TkExamPaper, error) {
	if e.loadedTypes[0] {
		if e.ExamPaper == nil {
			// The edge exam_paper was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkexampaper.Label}
		}
		return e.ExamPaper, nil
	}
	return nil, &NotLoadedError{edge: "exam_paper"}
}

// SectionOrErr returns the Section value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserExamScoreRecordEdges) SectionOrErr() (*TkSection, error) {
	if e.loadedTypes[1] {
		if e.Section == nil {
			// The edge section was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tksection.Label}
		}
		return e.Section, nil
	}
	return nil, &NotLoadedError{edge: "section"}
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserExamScoreRecordEdges) TeacherOrErr() (*Teacher, error) {
	if e.loadedTypes[2] {
		if e.Teacher == nil {
			// The edge teacher was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.Teacher, nil
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkUserExamScoreRecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// UserExamDetailsOrErr returns the UserExamDetails value or an error if the edge
// was not loaded in eager-loading.
func (e TkUserExamScoreRecordEdges) UserExamDetailsOrErr() ([]*TkUserSimulationTeacherMark, error) {
	if e.loadedTypes[4] {
		return e.UserExamDetails, nil
	}
	return nil, &NotLoadedError{edge: "user_exam_details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkUserExamScoreRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkuserexamscorerecord.FieldID, tkuserexamscorerecord.FieldSubjectiveQuestionScore, tkuserexamscorerecord.FieldObjectiveQuestionScore, tkuserexamscorerecord.FieldTotalScore, tkuserexamscorerecord.FieldDuration, tkuserexamscorerecord.FieldRightCount, tkuserexamscorerecord.FieldWrongCount, tkuserexamscorerecord.FieldTotalCount, tkuserexamscorerecord.FieldNoAnswerCount, tkuserexamscorerecord.FieldRank, tkuserexamscorerecord.FieldStatus, tkuserexamscorerecord.FieldOrderStatus, tkuserexamscorerecord.FieldExamPaperID, tkuserexamscorerecord.FieldSectionID, tkuserexamscorerecord.FieldUserID, tkuserexamscorerecord.FieldOperationTeacherID:
			values[i] = new(sql.NullInt64)
		case tkuserexamscorerecord.FieldUUID:
			values[i] = new(sql.NullString)
		case tkuserexamscorerecord.FieldCreatedAt, tkuserexamscorerecord.FieldUpdatedAt, tkuserexamscorerecord.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkUserExamScoreRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkUserExamScoreRecord fields.
func (tuesr *TkUserExamScoreRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkuserexamscorerecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tuesr.ID = int(value.Int64)
		case tkuserexamscorerecord.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tuesr.UUID = value.String
			}
		case tkuserexamscorerecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tuesr.CreatedAt = new(time.Time)
				*tuesr.CreatedAt = value.Time
			}
		case tkuserexamscorerecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tuesr.UpdatedAt = new(time.Time)
				*tuesr.UpdatedAt = value.Time
			}
		case tkuserexamscorerecord.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tuesr.DeletedAt = new(time.Time)
				*tuesr.DeletedAt = value.Time
			}
		case tkuserexamscorerecord.FieldSubjectiveQuestionScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subjective_question_score", values[i])
			} else if value.Valid {
				tuesr.SubjectiveQuestionScore = uint8(value.Int64)
			}
		case tkuserexamscorerecord.FieldObjectiveQuestionScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field objective_question_score", values[i])
			} else if value.Valid {
				tuesr.ObjectiveQuestionScore = uint8(value.Int64)
			}
		case tkuserexamscorerecord.FieldTotalScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_score", values[i])
			} else if value.Valid {
				tuesr.TotalScore = uint8(value.Int64)
			}
		case tkuserexamscorerecord.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				tuesr.Duration = int(value.Int64)
			}
		case tkuserexamscorerecord.FieldRightCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field right_count", values[i])
			} else if value.Valid {
				tuesr.RightCount = int(value.Int64)
			}
		case tkuserexamscorerecord.FieldWrongCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wrong_count", values[i])
			} else if value.Valid {
				tuesr.WrongCount = int(value.Int64)
			}
		case tkuserexamscorerecord.FieldTotalCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_count", values[i])
			} else if value.Valid {
				tuesr.TotalCount = int(value.Int64)
			}
		case tkuserexamscorerecord.FieldNoAnswerCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field no_answer_count", values[i])
			} else if value.Valid {
				tuesr.NoAnswerCount = int(value.Int64)
			}
		case tkuserexamscorerecord.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				tuesr.Rank = int(value.Int64)
			}
		case tkuserexamscorerecord.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tuesr.Status = uint8(value.Int64)
			}
		case tkuserexamscorerecord.FieldOrderStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_status", values[i])
			} else if value.Valid {
				tuesr.OrderStatus = uint8(value.Int64)
			}
		case tkuserexamscorerecord.FieldExamPaperID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exam_paper_id", values[i])
			} else if value.Valid {
				tuesr.ExamPaperID = int(value.Int64)
			}
		case tkuserexamscorerecord.FieldSectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field section_id", values[i])
			} else if value.Valid {
				tuesr.SectionID = int(value.Int64)
			}
		case tkuserexamscorerecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tuesr.UserID = int(value.Int64)
			}
		case tkuserexamscorerecord.FieldOperationTeacherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_teacher_id", values[i])
			} else if value.Valid {
				tuesr.OperationTeacherID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryExamPaper queries the "exam_paper" edge of the TkUserExamScoreRecord entity.
func (tuesr *TkUserExamScoreRecord) QueryExamPaper() *TkExamPaperQuery {
	return (&TkUserExamScoreRecordClient{config: tuesr.config}).QueryExamPaper(tuesr)
}

// QuerySection queries the "section" edge of the TkUserExamScoreRecord entity.
func (tuesr *TkUserExamScoreRecord) QuerySection() *TkSectionQuery {
	return (&TkUserExamScoreRecordClient{config: tuesr.config}).QuerySection(tuesr)
}

// QueryTeacher queries the "teacher" edge of the TkUserExamScoreRecord entity.
func (tuesr *TkUserExamScoreRecord) QueryTeacher() *TeacherQuery {
	return (&TkUserExamScoreRecordClient{config: tuesr.config}).QueryTeacher(tuesr)
}

// QueryUser queries the "user" edge of the TkUserExamScoreRecord entity.
func (tuesr *TkUserExamScoreRecord) QueryUser() *UserQuery {
	return (&TkUserExamScoreRecordClient{config: tuesr.config}).QueryUser(tuesr)
}

// QueryUserExamDetails queries the "user_exam_details" edge of the TkUserExamScoreRecord entity.
func (tuesr *TkUserExamScoreRecord) QueryUserExamDetails() *TkUserSimulationTeacherMarkQuery {
	return (&TkUserExamScoreRecordClient{config: tuesr.config}).QueryUserExamDetails(tuesr)
}

// Update returns a builder for updating this TkUserExamScoreRecord.
// Note that you need to call TkUserExamScoreRecord.Unwrap() before calling this method if this TkUserExamScoreRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (tuesr *TkUserExamScoreRecord) Update() *TkUserExamScoreRecordUpdateOne {
	return (&TkUserExamScoreRecordClient{config: tuesr.config}).UpdateOne(tuesr)
}

// Unwrap unwraps the TkUserExamScoreRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tuesr *TkUserExamScoreRecord) Unwrap() *TkUserExamScoreRecord {
	tx, ok := tuesr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkUserExamScoreRecord is not a transactional entity")
	}
	tuesr.config.driver = tx.drv
	return tuesr
}

// String implements the fmt.Stringer.
func (tuesr *TkUserExamScoreRecord) String() string {
	var builder strings.Builder
	builder.WriteString("TkUserExamScoreRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", tuesr.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tuesr.UUID)
	if v := tuesr.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tuesr.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tuesr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", subjective_question_score=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.SubjectiveQuestionScore))
	builder.WriteString(", objective_question_score=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.ObjectiveQuestionScore))
	builder.WriteString(", total_score=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.TotalScore))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.Duration))
	builder.WriteString(", right_count=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.RightCount))
	builder.WriteString(", wrong_count=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.WrongCount))
	builder.WriteString(", total_count=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.TotalCount))
	builder.WriteString(", no_answer_count=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.NoAnswerCount))
	builder.WriteString(", rank=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.Rank))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.Status))
	builder.WriteString(", order_status=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.OrderStatus))
	builder.WriteString(", exam_paper_id=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.ExamPaperID))
	builder.WriteString(", section_id=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.SectionID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.UserID))
	builder.WriteString(", operation_teacher_id=")
	builder.WriteString(fmt.Sprintf("%v", tuesr.OperationTeacherID))
	builder.WriteByte(')')
	return builder.String()
}

// TkUserExamScoreRecords is a parsable slice of TkUserExamScoreRecord.
type TkUserExamScoreRecords []*TkUserExamScoreRecord

func (tuesr TkUserExamScoreRecords) config(cfg config) {
	for _i := range tuesr {
		tuesr[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"tkserver/internal/store/ent/admin"
	"tkserver/internal/store/ent/collection"
	"tkserver/internal/store/ent/kcsmallcategoryquestion"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkexampartitionquestionlink"
	"tkserver/internal/store/ent/tkknowledgepoint"
	"tkserver/internal/store/ent/tkquestion"
	"tkserver/internal/store/ent/tkquestionansweroption"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tkquestionerrorfeedback"
	"tkserver/internal/store/ent/tkquestionsection"
	"tkserver/internal/store/ent/tkuserquestionrecord"
	"tkserver/internal/store/ent/tkuserrandomexamrecode"
	"tkserver/internal/store/ent/tkusersimulationteachermark"
	"tkserver/internal/store/ent/tkuserwrongquestionrecode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkQuestionQuery is the builder for querying TkQuestion entities.
type TkQuestionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TkQuestion
	// eager-loading edges.
	withQuestionBank           *TkQuestionBankQuery
	withAdmin                  *AdminQuery
	withUserRandDom            *TkUserRandomExamRecodeQuery
	withAnswerOptions          *TkQuestionAnswerOptionQuery
	withKnowledgePoints        *TkKnowledgePointQuery
	withQuestionSectionLinks   *TkQuestionSectionQuery
	withExamPartitionQuestions *TkExamPartitionQuestionLinkQuery
	withQuestionErrorFeedbacks *TkQuestionErrorFeedbackQuery
	withUserRecords            *TkUserQuestionRecordQuery
	withSmallCategoryQuestions *KcSmallCategoryQuestionQuery
	withUserExamQuestions      *TkUserSimulationTeacherMarkQuery
	withUserRecodeWrong        *TkUserWrongQuestionRecodeQuery
	withParent                 *TkQuestionQuery
	withChildren               *TkQuestionQuery
	withCollectionQuestion     *CollectionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TkQuestionQuery builder.
func (tqq *TkQuestionQuery) Where(ps ...predicate.TkQuestion) *TkQuestionQuery {
	tqq.predicates = append(tqq.predicates, ps...)
	return tqq
}

// Limit adds a limit step to the query.
func (tqq *TkQuestionQuery) Limit(limit int) *TkQuestionQuery {
	tqq.limit = &limit
	return tqq
}

// Offset adds an offset step to the query.
func (tqq *TkQuestionQuery) Offset(offset int) *TkQuestionQuery {
	tqq.offset = &offset
	return tqq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tqq *TkQuestionQuery) Unique(unique bool) *TkQuestionQuery {
	tqq.unique = &unique
	return tqq
}

// Order adds an order step to the query.
func (tqq *TkQuestionQuery) Order(o ...OrderFunc) *TkQuestionQuery {
	tqq.order = append(tqq.order, o...)
	return tqq
}

// QueryQuestionBank chains the current query on the "question_bank" edge.
func (tqq *TkQuestionQuery) QueryQuestionBank() *TkQuestionBankQuery {
	query := &TkQuestionBankQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkquestionbank.Table, tkquestionbank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestion.QuestionBankTable, tkquestion.QuestionBankColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdmin chains the current query on the "admin" edge.
func (tqq *TkQuestionQuery) QueryAdmin() *AdminQuery {
	query := &AdminQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestion.AdminTable, tkquestion.AdminColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserRandDom chains the current query on the "user_rand_dom" edge.
func (tqq *TkQuestionQuery) QueryUserRandDom() *TkUserRandomExamRecodeQuery {
	query := &TkUserRandomExamRecodeQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkuserrandomexamrecode.Table, tkuserrandomexamrecode.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tkquestion.UserRandDomTable, tkquestion.UserRandDomPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnswerOptions chains the current query on the "answer_options" edge.
func (tqq *TkQuestionQuery) QueryAnswerOptions() *TkQuestionAnswerOptionQuery {
	query := &TkQuestionAnswerOptionQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkquestionansweroption.Table, tkquestionansweroption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.AnswerOptionsTable, tkquestion.AnswerOptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKnowledgePoints chains the current query on the "knowledge_points" edge.
func (tqq *TkQuestionQuery) QueryKnowledgePoints() *TkKnowledgePointQuery {
	query := &TkKnowledgePointQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkknowledgepoint.Table, tkknowledgepoint.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tkquestion.KnowledgePointsTable, tkquestion.KnowledgePointsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestionSectionLinks chains the current query on the "question_section_links" edge.
func (tqq *TkQuestionQuery) QueryQuestionSectionLinks() *TkQuestionSectionQuery {
	query := &TkQuestionSectionQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkquestionsection.Table, tkquestionsection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.QuestionSectionLinksTable, tkquestion.QuestionSectionLinksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamPartitionQuestions chains the current query on the "exam_partition_questions" edge.
func (tqq *TkQuestionQuery) QueryExamPartitionQuestions() *TkExamPartitionQuestionLinkQuery {
	query := &TkExamPartitionQuestionLinkQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkexampartitionquestionlink.Table, tkexampartitionquestionlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.ExamPartitionQuestionsTable, tkquestion.ExamPartitionQuestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestionErrorFeedbacks chains the current query on the "question_error_feedbacks" edge.
func (tqq *TkQuestionQuery) QueryQuestionErrorFeedbacks() *TkQuestionErrorFeedbackQuery {
	query := &TkQuestionErrorFeedbackQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkquestionerrorfeedback.Table, tkquestionerrorfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.QuestionErrorFeedbacksTable, tkquestion.QuestionErrorFeedbacksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserRecords chains the current query on the "user_records" edge.
func (tqq *TkQuestionQuery) QueryUserRecords() *TkUserQuestionRecordQuery {
	query := &TkUserQuestionRecordQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkuserquestionrecord.Table, tkuserquestionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.UserRecordsTable, tkquestion.UserRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySmallCategoryQuestions chains the current query on the "small_category_questions" edge.
func (tqq *TkQuestionQuery) QuerySmallCategoryQuestions() *KcSmallCategoryQuestionQuery {
	query := &KcSmallCategoryQuestionQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(kcsmallcategoryquestion.Table, kcsmallcategoryquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.SmallCategoryQuestionsTable, tkquestion.SmallCategoryQuestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserExamQuestions chains the current query on the "user_exam_questions" edge.
func (tqq *TkQuestionQuery) QueryUserExamQuestions() *TkUserSimulationTeacherMarkQuery {
	query := &TkUserSimulationTeacherMarkQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkusersimulationteachermark.Table, tkusersimulationteachermark.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.UserExamQuestionsTable, tkquestion.UserExamQuestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserRecodeWrong chains the current query on the "user_recode_wrong" edge.
func (tqq *TkQuestionQuery) QueryUserRecodeWrong() *TkUserWrongQuestionRecodeQuery {
	query := &TkUserWrongQuestionRecodeQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkuserwrongquestionrecode.Table, tkuserwrongquestionrecode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.UserRecodeWrongTable, tkquestion.UserRecodeWrongColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (tqq *TkQuestionQuery) QueryParent() *TkQuestionQuery {
	query := &TkQuestionQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tkquestion.ParentTable, tkquestion.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (tqq *TkQuestionQuery) QueryChildren() *TkQuestionQuery {
	query := &TkQuestionQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(tkquestion.Table, tkquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.ChildrenTable, tkquestion.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCollectionQuestion chains the current query on the "collection_question" edge.
func (tqq *TkQuestionQuery) QueryCollectionQuestion() *CollectionQuery {
	query := &CollectionQuery{config: tqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tkquestion.Table, tkquestion.FieldID, selector),
			sqlgraph.To(collection.Table, collection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tkquestion.CollectionQuestionTable, tkquestion.CollectionQuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TkQuestion entity from the query.
// Returns a *NotFoundError when no TkQuestion was found.
func (tqq *TkQuestionQuery) First(ctx context.Context) (*TkQuestion, error) {
	nodes, err := tqq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tkquestion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tqq *TkQuestionQuery) FirstX(ctx context.Context) *TkQuestion {
	node, err := tqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TkQuestion ID from the query.
// Returns a *NotFoundError when no TkQuestion ID was found.
func (tqq *TkQuestionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tqq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tkquestion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tqq *TkQuestionQuery) FirstIDX(ctx context.Context) int {
	id, err := tqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TkQuestion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TkQuestion entity is not found.
// Returns a *NotFoundError when no TkQuestion entities are found.
func (tqq *TkQuestionQuery) Only(ctx context.Context) (*TkQuestion, error) {
	nodes, err := tqq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tkquestion.Label}
	default:
		return nil, &NotSingularError{tkquestion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tqq *TkQuestionQuery) OnlyX(ctx context.Context) *TkQuestion {
	node, err := tqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TkQuestion ID in the query.
// Returns a *NotSingularError when exactly one TkQuestion ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tqq *TkQuestionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tqq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tkquestion.Label}
	default:
		err = &NotSingularError{tkquestion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tqq *TkQuestionQuery) OnlyIDX(ctx context.Context) int {
	id, err := tqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TkQuestions.
func (tqq *TkQuestionQuery) All(ctx context.Context) ([]*TkQuestion, error) {
	if err := tqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tqq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tqq *TkQuestionQuery) AllX(ctx context.Context) []*TkQuestion {
	nodes, err := tqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TkQuestion IDs.
func (tqq *TkQuestionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tqq.Select(tkquestion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tqq *TkQuestionQuery) IDsX(ctx context.Context) []int {
	ids, err := tqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tqq *TkQuestionQuery) Count(ctx context.Context) (int, error) {
	if err := tqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tqq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tqq *TkQuestionQuery) CountX(ctx context.Context) int {
	count, err := tqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tqq *TkQuestionQuery) Exist(ctx context.Context) (bool, error) {
	if err := tqq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tqq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tqq *TkQuestionQuery) ExistX(ctx context.Context) bool {
	exist, err := tqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TkQuestionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tqq *TkQuestionQuery) Clone() *TkQuestionQuery {
	if tqq == nil {
		return nil
	}
	return &TkQuestionQuery{
		config:                     tqq.config,
		limit:                      tqq.limit,
		offset:                     tqq.offset,
		order:                      append([]OrderFunc{}, tqq.order...),
		predicates:                 append([]predicate.TkQuestion{}, tqq.predicates...),
		withQuestionBank:           tqq.withQuestionBank.Clone(),
		withAdmin:                  tqq.withAdmin.Clone(),
		withUserRandDom:            tqq.withUserRandDom.Clone(),
		withAnswerOptions:          tqq.withAnswerOptions.Clone(),
		withKnowledgePoints:        tqq.withKnowledgePoints.Clone(),
		withQuestionSectionLinks:   tqq.withQuestionSectionLinks.Clone(),
		withExamPartitionQuestions: tqq.withExamPartitionQuestions.Clone(),
		withQuestionErrorFeedbacks: tqq.withQuestionErrorFeedbacks.Clone(),
		withUserRecords:            tqq.withUserRecords.Clone(),
		withSmallCategoryQuestions: tqq.withSmallCategoryQuestions.Clone(),
		withUserExamQuestions:      tqq.withUserExamQuestions.Clone(),
		withUserRecodeWrong:        tqq.withUserRecodeWrong.Clone(),
		withParent:                 tqq.withParent.Clone(),
		withChildren:               tqq.withChildren.Clone(),
		withCollectionQuestion:     tqq.withCollectionQuestion.Clone(),
		// clone intermediate query.
		sql:  tqq.sql.Clone(),
		path: tqq.path,
	}
}

// WithQuestionBank tells the query-builder to eager-load the nodes that are connected to
// the "question_bank" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithQuestionBank(opts ...func(*TkQuestionBankQuery)) *TkQuestionQuery {
	query := &TkQuestionBankQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withQuestionBank = query
	return tqq
}

// WithAdmin tells the query-builder to eager-load the nodes that are connected to
// the "admin" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithAdmin(opts ...func(*AdminQuery)) *TkQuestionQuery {
	query := &AdminQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withAdmin = query
	return tqq
}

// WithUserRandDom tells the query-builder to eager-load the nodes that are connected to
// the "user_rand_dom" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithUserRandDom(opts ...func(*TkUserRandomExamRecodeQuery)) *TkQuestionQuery {
	query := &TkUserRandomExamRecodeQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withUserRandDom = query
	return tqq
}

// WithAnswerOptions tells the query-builder to eager-load the nodes that are connected to
// the "answer_options" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithAnswerOptions(opts ...func(*TkQuestionAnswerOptionQuery)) *TkQuestionQuery {
	query := &TkQuestionAnswerOptionQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withAnswerOptions = query
	return tqq
}

// WithKnowledgePoints tells the query-builder to eager-load the nodes that are connected to
// the "knowledge_points" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithKnowledgePoints(opts ...func(*TkKnowledgePointQuery)) *TkQuestionQuery {
	query := &TkKnowledgePointQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withKnowledgePoints = query
	return tqq
}

// WithQuestionSectionLinks tells the query-builder to eager-load the nodes that are connected to
// the "question_section_links" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithQuestionSectionLinks(opts ...func(*TkQuestionSectionQuery)) *TkQuestionQuery {
	query := &TkQuestionSectionQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withQuestionSectionLinks = query
	return tqq
}

// WithExamPartitionQuestions tells the query-builder to eager-load the nodes that are connected to
// the "exam_partition_questions" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithExamPartitionQuestions(opts ...func(*TkExamPartitionQuestionLinkQuery)) *TkQuestionQuery {
	query := &TkExamPartitionQuestionLinkQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withExamPartitionQuestions = query
	return tqq
}

// WithQuestionErrorFeedbacks tells the query-builder to eager-load the nodes that are connected to
// the "question_error_feedbacks" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithQuestionErrorFeedbacks(opts ...func(*TkQuestionErrorFeedbackQuery)) *TkQuestionQuery {
	query := &TkQuestionErrorFeedbackQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withQuestionErrorFeedbacks = query
	return tqq
}

// WithUserRecords tells the query-builder to eager-load the nodes that are connected to
// the "user_records" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithUserRecords(opts ...func(*TkUserQuestionRecordQuery)) *TkQuestionQuery {
	query := &TkUserQuestionRecordQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withUserRecords = query
	return tqq
}

// WithSmallCategoryQuestions tells the query-builder to eager-load the nodes that are connected to
// the "small_category_questions" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithSmallCategoryQuestions(opts ...func(*KcSmallCategoryQuestionQuery)) *TkQuestionQuery {
	query := &KcSmallCategoryQuestionQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withSmallCategoryQuestions = query
	return tqq
}

// WithUserExamQuestions tells the query-builder to eager-load the nodes that are connected to
// the "user_exam_questions" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithUserExamQuestions(opts ...func(*TkUserSimulationTeacherMarkQuery)) *TkQuestionQuery {
	query := &TkUserSimulationTeacherMarkQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withUserExamQuestions = query
	return tqq
}

// WithUserRecodeWrong tells the query-builder to eager-load the nodes that are connected to
// the "user_recode_wrong" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithUserRecodeWrong(opts ...func(*TkUserWrongQuestionRecodeQuery)) *TkQuestionQuery {
	query := &TkUserWrongQuestionRecodeQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withUserRecodeWrong = query
	return tqq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithParent(opts ...func(*TkQuestionQuery)) *TkQuestionQuery {
	query := &TkQuestionQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withParent = query
	return tqq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithChildren(opts ...func(*TkQuestionQuery)) *TkQuestionQuery {
	query := &TkQuestionQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withChildren = query
	return tqq
}

// WithCollectionQuestion tells the query-builder to eager-load the nodes that are connected to
// the "collection_question" edge. The optional arguments are used to configure the query builder of the edge.
func (tqq *TkQuestionQuery) WithCollectionQuestion(opts ...func(*CollectionQuery)) *TkQuestionQuery {
	query := &CollectionQuery{config: tqq.config}
	for _, opt := range opts {
		opt(query)
	}
	tqq.withCollectionQuestion = query
	return tqq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TkQuestion.Query().
//		GroupBy(tkquestion.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tqq *TkQuestionQuery) GroupBy(field string, fields ...string) *TkQuestionGroupBy {
	group := &TkQuestionGroupBy{config: tqq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tqq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.TkQuestion.Query().
//		Select(tkquestion.FieldUUID).
//		Scan(ctx, &v)
//
func (tqq *TkQuestionQuery) Select(field string, fields ...string) *TkQuestionSelect {
	tqq.fields = append([]string{field}, fields...)
	return &TkQuestionSelect{TkQuestionQuery: tqq}
}

func (tqq *TkQuestionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tqq.fields {
		if !tkquestion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tqq.path != nil {
		prev, err := tqq.path(ctx)
		if err != nil {
			return err
		}
		tqq.sql = prev
	}
	return nil
}

func (tqq *TkQuestionQuery) sqlAll(ctx context.Context) ([]*TkQuestion, error) {
	var (
		nodes       = []*TkQuestion{}
		_spec       = tqq.querySpec()
		loadedTypes = [15]bool{
			tqq.withQuestionBank != nil,
			tqq.withAdmin != nil,
			tqq.withUserRandDom != nil,
			tqq.withAnswerOptions != nil,
			tqq.withKnowledgePoints != nil,
			tqq.withQuestionSectionLinks != nil,
			tqq.withExamPartitionQuestions != nil,
			tqq.withQuestionErrorFeedbacks != nil,
			tqq.withUserRecords != nil,
			tqq.withSmallCategoryQuestions != nil,
			tqq.withUserExamQuestions != nil,
			tqq.withUserRecodeWrong != nil,
			tqq.withParent != nil,
			tqq.withChildren != nil,
			tqq.withCollectionQuestion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TkQuestion{config: tqq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tqq.withQuestionBank; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkQuestion)
		for i := range nodes {
			fk := nodes[i].QuestionBankID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tkquestionbank.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_bank_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.QuestionBank = n
			}
		}
	}

	if query := tqq.withAdmin; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkQuestion)
		for i := range nodes {
			fk := nodes[i].CreatedAdminID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(admin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "created_admin_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Admin = n
			}
		}
	}

	if query := tqq.withUserRandDom; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*TkQuestion, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.UserRandDom = []*TkUserRandomExamRecode{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*TkQuestion)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   tkquestion.UserRandDomTable,
				Columns: tkquestion.UserRandDomPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(tkquestion.UserRandDomPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, tqq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "user_rand_dom": %w`, err)
		}
		query.Where(tkuserrandomexamrecode.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "user_rand_dom" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UserRandDom = append(nodes[i].Edges.UserRandDom, n)
			}
		}
	}

	if query := tqq.withAnswerOptions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AnswerOptions = []*TkQuestionAnswerOption{}
		}
		query.Where(predicate.TkQuestionAnswerOption(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.AnswerOptionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AnswerOptions = append(node.Edges.AnswerOptions, n)
		}
	}

	if query := tqq.withKnowledgePoints; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*TkQuestion, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.KnowledgePoints = []*TkKnowledgePoint{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*TkQuestion)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   tkquestion.KnowledgePointsTable,
				Columns: tkquestion.KnowledgePointsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(tkquestion.KnowledgePointsPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, tqq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "knowledge_points": %w`, err)
		}
		query.Where(tkknowledgepoint.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "knowledge_points" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.KnowledgePoints = append(nodes[i].Edges.KnowledgePoints, n)
			}
		}
	}

	if query := tqq.withQuestionSectionLinks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.QuestionSectionLinks = []*TkQuestionSection{}
		}
		query.Where(predicate.TkQuestionSection(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.QuestionSectionLinksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.QuestionSectionLinks = append(node.Edges.QuestionSectionLinks, n)
		}
	}

	if query := tqq.withExamPartitionQuestions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ExamPartitionQuestions = []*TkExamPartitionQuestionLink{}
		}
		query.Where(predicate.TkExamPartitionQuestionLink(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.ExamPartitionQuestionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ExamPartitionQuestions = append(node.Edges.ExamPartitionQuestions, n)
		}
	}

	if query := tqq.withQuestionErrorFeedbacks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.QuestionErrorFeedbacks = []*TkQuestionErrorFeedback{}
		}
		query.Where(predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.QuestionErrorFeedbacksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.QuestionErrorFeedbacks = append(node.Edges.QuestionErrorFeedbacks, n)
		}
	}

	if query := tqq.withUserRecords; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserRecords = []*TkUserQuestionRecord{}
		}
		query.Where(predicate.TkUserQuestionRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.UserRecordsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserRecords = append(node.Edges.UserRecords, n)
		}
	}

	if query := tqq.withSmallCategoryQuestions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SmallCategoryQuestions = []*KcSmallCategoryQuestion{}
		}
		query.Where(predicate.KcSmallCategoryQuestion(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.SmallCategoryQuestionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.SmallCategoryQuestions = append(node.Edges.SmallCategoryQuestions, n)
		}
	}

	if query := tqq.withUserExamQuestions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserExamQuestions = []*TkUserSimulationTeacherMark{}
		}
		query.Where(predicate.TkUserSimulationTeacherMark(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.UserExamQuestionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserExamQuestions = append(node.Edges.UserExamQuestions, n)
		}
	}

	if query := tqq.withUserRecodeWrong; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserRecodeWrong = []*TkUserWrongQuestionRecode{}
		}
		query.Where(predicate.TkUserWrongQuestionRecode(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.UserRecodeWrongColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.QuestionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserRecodeWrong = append(node.Edges.UserRecodeWrong, n)
		}
	}

	if query := tqq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TkQuestion)
		for i := range nodes {
			fk := nodes[i].Pid
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(tkquestion.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pid" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := tqq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*TkQuestion{}
		}
		query.Where(predicate.TkQuestion(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.Pid
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pid" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	if query := tqq.withCollectionQuestion; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TkQuestion)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CollectionQuestion = []*Collection{}
		}
		query.Where(predicate.Collection(func(s *sql.Selector) {
			s.Where(sql.InValues(tkquestion.CollectionQuestionColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ValueID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "value_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.CollectionQuestion = append(node.Edges.CollectionQuestion, n)
		}
	}

	return nodes, nil
}

func (tqq *TkQuestionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tqq.querySpec()
	return sqlgraph.CountNodes(ctx, tqq.driver, _spec)
}

func (tqq *TkQuestionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tqq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tqq *TkQuestionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkquestion.Table,
			Columns: tkquestion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkquestion.FieldID,
			},
		},
		From:   tqq.sql,
		Unique: true,
	}
	if unique := tqq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tqq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkquestion.FieldID)
		for i := range fields {
			if fields[i] != tkquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tqq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tqq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tqq *TkQuestionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tqq.driver.Dialect())
	t1 := builder.Table(tkquestion.Table)
	selector := builder.Select(t1.Columns(tkquestion.Columns...)...).From(t1)
	if tqq.sql != nil {
		selector = tqq.sql
		selector.Select(selector.Columns(tkquestion.Columns...)...)
	}
	for _, p := range tqq.predicates {
		p(selector)
	}
	for _, p := range tqq.order {
		p(selector)
	}
	if offset := tqq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tqq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TkQuestionGroupBy is the group-by builder for TkQuestion entities.
type TkQuestionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tqgb *TkQuestionGroupBy) Aggregate(fns ...AggregateFunc) *TkQuestionGroupBy {
	tqgb.fns = append(tqgb.fns, fns...)
	return tqgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tqgb *TkQuestionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tqgb.path(ctx)
	if err != nil {
		return err
	}
	tqgb.sql = query
	return tqgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tqgb *TkQuestionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tqgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tqgb *TkQuestionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tqgb.fields) > 1 {
		return nil, errors.New("ent: TkQuestionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tqgb *TkQuestionGroupBy) StringsX(ctx context.Context) []string {
	v, err := tqgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tqgb *TkQuestionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tqgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestion.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tqgb *TkQuestionGroupBy) StringX(ctx context.Context) string {
	v, err := tqgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tqgb *TkQuestionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tqgb.fields) > 1 {
		return nil, errors.New("ent: TkQuestionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tqgb *TkQuestionGroupBy) IntsX(ctx context.Context) []int {
	v, err := tqgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tqgb *TkQuestionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tqgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestion.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tqgb *TkQuestionGroupBy) IntX(ctx context.Context) int {
	v, err := tqgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tqgb *TkQuestionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tqgb.fields) > 1 {
		return nil, errors.New("ent: TkQuestionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tqgb *TkQuestionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tqgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tqgb *TkQuestionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tqgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestion.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tqgb *TkQuestionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tqgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tqgb *TkQuestionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tqgb.fields) > 1 {
		return nil, errors.New("ent: TkQuestionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tqgb *TkQuestionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tqgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tqgb *TkQuestionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tqgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestion.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tqgb *TkQuestionGroupBy) BoolX(ctx context.Context) bool {
	v, err := tqgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tqgb *TkQuestionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tqgb.fields {
		if !tkquestion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tqgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tqgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tqgb *TkQuestionGroupBy) sqlQuery() *sql.Selector {
	selector := tqgb.sql
	columns := make([]string, 0, len(tqgb.fields)+len(tqgb.fns))
	columns = append(columns, tqgb.fields...)
	for _, fn := range tqgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(tqgb.fields...)
}

// TkQuestionSelect is the builder for selecting fields of TkQuestion entities.
type TkQuestionSelect struct {
	*TkQuestionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tqs *TkQuestionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tqs.prepareQuery(ctx); err != nil {
		return err
	}
	tqs.sql = tqs.TkQuestionQuery.sqlQuery(ctx)
	return tqs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tqs *TkQuestionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tqs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tqs *TkQuestionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tqs.fields) > 1 {
		return nil, errors.New("ent: TkQuestionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tqs *TkQuestionSelect) StringsX(ctx context.Context) []string {
	v, err := tqs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tqs *TkQuestionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tqs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestion.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tqs *TkQuestionSelect) StringX(ctx context.Context) string {
	v, err := tqs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tqs *TkQuestionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tqs.fields) > 1 {
		return nil, errors.New("ent: TkQuestionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tqs *TkQuestionSelect) IntsX(ctx context.Context) []int {
	v, err := tqs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tqs *TkQuestionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tqs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestion.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tqs *TkQuestionSelect) IntX(ctx context.Context) int {
	v, err := tqs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tqs *TkQuestionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tqs.fields) > 1 {
		return nil, errors.New("ent: TkQuestionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tqs *TkQuestionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tqs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tqs *TkQuestionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tqs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestion.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tqs *TkQuestionSelect) Float64X(ctx context.Context) float64 {
	v, err := tqs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tqs *TkQuestionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tqs.fields) > 1 {
		return nil, errors.New("ent: TkQuestionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tqs *TkQuestionSelect) BoolsX(ctx context.Context) []bool {
	v, err := tqs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tqs *TkQuestionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tqs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tkquestion.Label}
	default:
		err = fmt.Errorf("ent: TkQuestionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tqs *TkQuestionSelect) BoolX(ctx context.Context) bool {
	v, err := tqs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tqs *TkQuestionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tqs.sqlQuery().Query()
	if err := tqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tqs *TkQuestionSelect) sqlQuery() sql.Querier {
	selector := tqs.sql
	selector.Select(selector.Columns(tqs.fields...)...)
	return selector
}

// Code generated by entc, DO NOT EDIT.

package kccourseteacher

import (
	"gserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ShowStatus applies equality check predicate on the "show_status" field. It's identical to ShowStatusEQ.
func ShowStatus(v uint8) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowStatus), v))
	})
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortOrder), v))
	})
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// TeacherID applies equality check predicate on the "teacher_id" field. It's identical to TeacherIDEQ.
func TeacherID(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherID), v))
	})
}

// ShowStatusEQ applies the EQ predicate on the "show_status" field.
func ShowStatusEQ(v uint8) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowStatus), v))
	})
}

// ShowStatusNEQ applies the NEQ predicate on the "show_status" field.
func ShowStatusNEQ(v uint8) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShowStatus), v))
	})
}

// ShowStatusIn applies the In predicate on the "show_status" field.
func ShowStatusIn(vs ...uint8) predicate.KcCourseTeacher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShowStatus), v...))
	})
}

// ShowStatusNotIn applies the NotIn predicate on the "show_status" field.
func ShowStatusNotIn(vs ...uint8) predicate.KcCourseTeacher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShowStatus), v...))
	})
}

// ShowStatusGT applies the GT predicate on the "show_status" field.
func ShowStatusGT(v uint8) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShowStatus), v))
	})
}

// ShowStatusGTE applies the GTE predicate on the "show_status" field.
func ShowStatusGTE(v uint8) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShowStatus), v))
	})
}

// ShowStatusLT applies the LT predicate on the "show_status" field.
func ShowStatusLT(v uint8) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShowStatus), v))
	})
}

// ShowStatusLTE applies the LTE predicate on the "show_status" field.
func ShowStatusLTE(v uint8) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShowStatus), v))
	})
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortOrder), v))
	})
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSortOrder), v))
	})
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.KcCourseTeacher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSortOrder), v...))
	})
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.KcCourseTeacher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSortOrder), v...))
	})
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSortOrder), v))
	})
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSortOrder), v))
	})
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSortOrder), v))
	})
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSortOrder), v))
	})
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseID), v))
	})
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.KcCourseTeacher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourseID), v...))
	})
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.KcCourseTeacher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourseID), v...))
	})
}

// CourseIDIsNil applies the IsNil predicate on the "course_id" field.
func CourseIDIsNil() predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCourseID)))
	})
}

// CourseIDNotNil applies the NotNil predicate on the "course_id" field.
func CourseIDNotNil() predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCourseID)))
	})
}

// TeacherIDEQ applies the EQ predicate on the "teacher_id" field.
func TeacherIDEQ(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherID), v))
	})
}

// TeacherIDNEQ applies the NEQ predicate on the "teacher_id" field.
func TeacherIDNEQ(v int) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeacherID), v))
	})
}

// TeacherIDIn applies the In predicate on the "teacher_id" field.
func TeacherIDIn(vs ...int) predicate.KcCourseTeacher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeacherID), v...))
	})
}

// TeacherIDNotIn applies the NotIn predicate on the "teacher_id" field.
func TeacherIDNotIn(vs ...int) predicate.KcCourseTeacher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeacherID), v...))
	})
}

// TeacherIDIsNil applies the IsNil predicate on the "teacher_id" field.
func TeacherIDIsNil() predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTeacherID)))
	})
}

// TeacherIDNotNil applies the NotNil predicate on the "teacher_id" field.
func TeacherIDNotNil() predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTeacherID)))
	})
}

// HasTeacher applies the HasEdge predicate on the "teacher" edge.
func HasTeacher() predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeacherWith applies the HasEdge predicate on the "teacher" edge with a given conditions (other predicates).
func HasTeacherWith(preds ...predicate.Teacher) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeacherInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.KcCourse) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KcCourseTeacher) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KcCourseTeacher) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KcCourseTeacher) predicate.KcCourseTeacher {
	return predicate.KcCourseTeacher(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/admin"
	"gserver/internal/store/ent/attachment"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Admin is the model entity for the Admin schema.
type Admin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Password holds the value of the "password" field.
	Password string `json:"password"`
	// Salt holds the value of the "salt" field.
	Salt string `json:"salt"`
	// BossAdminID holds the value of the "boss_admin_id" field.
	// 工作台管理员id
	BossAdminID int `json:"boss_admin_id"`
	// RealName holds the value of the "real_name" field.
	// 管理员姓名
	RealName string `json:"real_name"`
	// Email holds the value of the "email" field.
	// 绑定的邮箱地址
	Email string `json:"email"`
	// Phone holds the value of the "phone" field.
	// 活动须知
	Phone string `json:"phone"`
	// ThirdOpenid holds the value of the "third_openid" field.
	// 第三方id
	ThirdOpenid string `json:"third_openid"`
	// Platform holds the value of the "platform" field.
	// 首次注册的平台，0.后台，1.钉钉，2.企业微信
	Platform uint8 `json:"platform"`
	// IsActive holds the value of the "is_active" field.
	// 管理员是否在职  0：在职，1：离职
	IsActive uint8 `json:"is_active"`
	// Status holds the value of the "status" field.
	// 状态  1：启用，2：未启用
	Status uint8 `json:"status"`
	// AdminAvatarID holds the value of the "admin_avatar_id" field.
	// 头像id
	AdminAvatarID int `json:"admin_avatar_id"`
	// Remark holds the value of the "Remark" field.
	// 备注
	Remark string `json:"Remark"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminQuery when eager-loading is set.
	Edges AdminEdges `json:"edges"`
}

// AdminEdges holds the relations/edges for other nodes in the graph.
type AdminEdges struct {
	// AdminLoginLogs holds the value of the admin_login_logs edge.
	AdminLoginLogs []*AdminLoginLog `json:"admin_login_logs,omitempty"`
	// OperationAdminLogs holds the value of the operation_admin_logs edge.
	OperationAdminLogs []*AdminOperationLog `json:"operation_admin_logs,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// Activities holds the value of the activities edge.
	Activities []*Activity `json:"activities,omitempty"`
	// MessageCreatedAdminID holds the value of the message_created_admin_id edge.
	MessageCreatedAdminID []*Message `json:"message_created_admin_id,omitempty"`
	// AdminQuestionBanks holds the value of the admin_question_banks edge.
	AdminQuestionBanks []*TkQuestionBank `json:"admin_question_banks,omitempty"`
	// AdminQuestions holds the value of the admin_Questions edge.
	AdminQuestions []*TkQuestion `json:"admin_Questions,omitempty"`
	// AdminExamPapers holds the value of the admin_exam_papers edge.
	AdminExamPapers []*TkExamPaper `json:"admin_exam_papers,omitempty"`
	// AdminErrorFeedbacks holds the value of the admin_error_feedbacks edge.
	AdminErrorFeedbacks []*TkQuestionErrorFeedback `json:"admin_error_feedbacks,omitempty"`
	// Course holds the value of the course edge.
	Course []*KcCourse `json:"course,omitempty"`
	// ClassAdmin holds the value of the class_admin edge.
	ClassAdmin []*KcClass `json:"class_admin,omitempty"`
	// AdminAttachments holds the value of the admin_attachments edge.
	AdminAttachments *Attachment `json:"admin_attachments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
}

// AdminLoginLogsOrErr returns the AdminLoginLogs value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminLoginLogsOrErr() ([]*AdminLoginLog, error) {
	if e.loadedTypes[0] {
		return e.AdminLoginLogs, nil
	}
	return nil, &NotLoadedError{edge: "admin_login_logs"}
}

// OperationAdminLogsOrErr returns the OperationAdminLogs value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) OperationAdminLogsOrErr() ([]*AdminOperationLog, error) {
	if e.loadedTypes[1] {
		return e.OperationAdminLogs, nil
	}
	return nil, &NotLoadedError{edge: "operation_admin_logs"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[2] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) ActivitiesOrErr() ([]*Activity, error) {
	if e.loadedTypes[3] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// MessageCreatedAdminIDOrErr returns the MessageCreatedAdminID value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) MessageCreatedAdminIDOrErr() ([]*Message, error) {
	if e.loadedTypes[4] {
		return e.MessageCreatedAdminID, nil
	}
	return nil, &NotLoadedError{edge: "message_created_admin_id"}
}

// AdminQuestionBanksOrErr returns the AdminQuestionBanks value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminQuestionBanksOrErr() ([]*TkQuestionBank, error) {
	if e.loadedTypes[5] {
		return e.AdminQuestionBanks, nil
	}
	return nil, &NotLoadedError{edge: "admin_question_banks"}
}

// AdminQuestionsOrErr returns the AdminQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminQuestionsOrErr() ([]*TkQuestion, error) {
	if e.loadedTypes[6] {
		return e.AdminQuestions, nil
	}
	return nil, &NotLoadedError{edge: "admin_Questions"}
}

// AdminExamPapersOrErr returns the AdminExamPapers value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminExamPapersOrErr() ([]*TkExamPaper, error) {
	if e.loadedTypes[7] {
		return e.AdminExamPapers, nil
	}
	return nil, &NotLoadedError{edge: "admin_exam_papers"}
}

// AdminErrorFeedbacksOrErr returns the AdminErrorFeedbacks value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) AdminErrorFeedbacksOrErr() ([]*TkQuestionErrorFeedback, error) {
	if e.loadedTypes[8] {
		return e.AdminErrorFeedbacks, nil
	}
	return nil, &NotLoadedError{edge: "admin_error_feedbacks"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) CourseOrErr() ([]*KcCourse, error) {
	if e.loadedTypes[9] {
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// ClassAdminOrErr returns the ClassAdmin value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) ClassAdminOrErr() ([]*KcClass, error) {
	if e.loadedTypes[10] {
		return e.ClassAdmin, nil
	}
	return nil, &NotLoadedError{edge: "class_admin"}
}

// AdminAttachmentsOrErr returns the AdminAttachments value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminEdges) AdminAttachmentsOrErr() (*Attachment, error) {
	if e.loadedTypes[11] {
		if e.AdminAttachments == nil {
			// The edge admin_attachments was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.AdminAttachments, nil
	}
	return nil, &NotLoadedError{edge: "admin_attachments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Admin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case admin.FieldID, admin.FieldBossAdminID, admin.FieldPlatform, admin.FieldIsActive, admin.FieldStatus, admin.FieldAdminAvatarID:
			values[i] = new(sql.NullInt64)
		case admin.FieldUUID, admin.FieldPassword, admin.FieldSalt, admin.FieldRealName, admin.FieldEmail, admin.FieldPhone, admin.FieldThirdOpenid, admin.FieldRemark:
			values[i] = new(sql.NullString)
		case admin.FieldCreatedAt, admin.FieldUpdatedAt, admin.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Admin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Admin fields.
func (a *Admin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case admin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case admin.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				a.UUID = value.String
			}
		case admin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = new(time.Time)
				*a.CreatedAt = value.Time
			}
		case admin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = new(time.Time)
				*a.UpdatedAt = value.Time
			}
		case admin.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case admin.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				a.Password = value.String
			}
		case admin.FieldSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value.Valid {
				a.Salt = value.String
			}
		case admin.FieldBossAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field boss_admin_id", values[i])
			} else if value.Valid {
				a.BossAdminID = int(value.Int64)
			}
		case admin.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field real_name", values[i])
			} else if value.Valid {
				a.RealName = value.String
			}
		case admin.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				a.Email = value.String
			}
		case admin.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				a.Phone = value.String
			}
		case admin.FieldThirdOpenid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_openid", values[i])
			} else if value.Valid {
				a.ThirdOpenid = value.String
			}
		case admin.FieldPlatform:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				a.Platform = uint8(value.Int64)
			}
		case admin.FieldIsActive:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				a.IsActive = uint8(value.Int64)
			}
		case admin.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = uint8(value.Int64)
			}
		case admin.FieldAdminAvatarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field admin_avatar_id", values[i])
			} else if value.Valid {
				a.AdminAvatarID = int(value.Int64)
			}
		case admin.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Remark", values[i])
			} else if value.Valid {
				a.Remark = value.String
			}
		}
	}
	return nil
}

// QueryAdminLoginLogs queries the "admin_login_logs" edge of the Admin entity.
func (a *Admin) QueryAdminLoginLogs() *AdminLoginLogQuery {
	return (&AdminClient{config: a.config}).QueryAdminLoginLogs(a)
}

// QueryOperationAdminLogs queries the "operation_admin_logs" edge of the Admin entity.
func (a *Admin) QueryOperationAdminLogs() *AdminOperationLogQuery {
	return (&AdminClient{config: a.config}).QueryOperationAdminLogs(a)
}

// QueryRoles queries the "roles" edge of the Admin entity.
func (a *Admin) QueryRoles() *RoleQuery {
	return (&AdminClient{config: a.config}).QueryRoles(a)
}

// QueryActivities queries the "activities" edge of the Admin entity.
func (a *Admin) QueryActivities() *ActivityQuery {
	return (&AdminClient{config: a.config}).QueryActivities(a)
}

// QueryMessageCreatedAdminID queries the "message_created_admin_id" edge of the Admin entity.
func (a *Admin) QueryMessageCreatedAdminID() *MessageQuery {
	return (&AdminClient{config: a.config}).QueryMessageCreatedAdminID(a)
}

// QueryAdminQuestionBanks queries the "admin_question_banks" edge of the Admin entity.
func (a *Admin) QueryAdminQuestionBanks() *TkQuestionBankQuery {
	return (&AdminClient{config: a.config}).QueryAdminQuestionBanks(a)
}

// QueryAdminQuestions queries the "admin_Questions" edge of the Admin entity.
func (a *Admin) QueryAdminQuestions() *TkQuestionQuery {
	return (&AdminClient{config: a.config}).QueryAdminQuestions(a)
}

// QueryAdminExamPapers queries the "admin_exam_papers" edge of the Admin entity.
func (a *Admin) QueryAdminExamPapers() *TkExamPaperQuery {
	return (&AdminClient{config: a.config}).QueryAdminExamPapers(a)
}

// QueryAdminErrorFeedbacks queries the "admin_error_feedbacks" edge of the Admin entity.
func (a *Admin) QueryAdminErrorFeedbacks() *TkQuestionErrorFeedbackQuery {
	return (&AdminClient{config: a.config}).QueryAdminErrorFeedbacks(a)
}

// QueryCourse queries the "course" edge of the Admin entity.
func (a *Admin) QueryCourse() *KcCourseQuery {
	return (&AdminClient{config: a.config}).QueryCourse(a)
}

// QueryClassAdmin queries the "class_admin" edge of the Admin entity.
func (a *Admin) QueryClassAdmin() *KcClassQuery {
	return (&AdminClient{config: a.config}).QueryClassAdmin(a)
}

// QueryAdminAttachments queries the "admin_attachments" edge of the Admin entity.
func (a *Admin) QueryAdminAttachments() *AttachmentQuery {
	return (&AdminClient{config: a.config}).QueryAdminAttachments(a)
}

// Update returns a builder for updating this Admin.
// Note that you need to call Admin.Unwrap() before calling this method if this Admin
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Admin) Update() *AdminUpdateOne {
	return (&AdminClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Admin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Admin) Unwrap() *Admin {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Admin is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Admin) String() string {
	var builder strings.Builder
	builder.WriteString("Admin(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(a.UUID)
	if v := a.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := a.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := a.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", password=")
	builder.WriteString(a.Password)
	builder.WriteString(", salt=")
	builder.WriteString(a.Salt)
	builder.WriteString(", boss_admin_id=")
	builder.WriteString(fmt.Sprintf("%v", a.BossAdminID))
	builder.WriteString(", real_name=")
	builder.WriteString(a.RealName)
	builder.WriteString(", email=")
	builder.WriteString(a.Email)
	builder.WriteString(", phone=")
	builder.WriteString(a.Phone)
	builder.WriteString(", third_openid=")
	builder.WriteString(a.ThirdOpenid)
	builder.WriteString(", platform=")
	builder.WriteString(fmt.Sprintf("%v", a.Platform))
	builder.WriteString(", is_active=")
	builder.WriteString(fmt.Sprintf("%v", a.IsActive))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", admin_avatar_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AdminAvatarID))
	builder.WriteString(", Remark=")
	builder.WriteString(a.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// Admins is a parsable slice of Admin.
type Admins []*Admin

func (a Admins) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package rolepermission

import (
	"gserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleID), v))
	})
}

// PermissionID applies equality check predicate on the "permission_id" field. It's identical to PermissionIDEQ.
func PermissionID(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissionID), v))
	})
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleID), v))
	})
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v int) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoleID), v))
	})
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...int) predicate.RolePermission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RolePermission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoleID), v...))
	})
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...int) predicate.RolePermission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RolePermission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoleID), v...))
	})
}

// RoleIDIsNil applies the IsNil predicate on the "role_id" field.
func RoleIDIsNil() predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRoleID)))
	})
}

// RoleIDNotNil applies the NotNil predicate on the "role_id" field.
func RoleIDNotNil() predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRoleID)))
	})
}

// PermissionIDEQ applies the EQ predicate on the "permission_id" field.
func PermissionIDEQ(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissionID), v))
	})
}

// PermissionIDNEQ applies the NEQ predicate on the "permission_id" field.
func PermissionIDNEQ(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPermissionID), v))
	})
}

// PermissionIDIn applies the In predicate on the "permission_id" field.
func PermissionIDIn(vs ...string) predicate.RolePermission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RolePermission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPermissionID), v...))
	})
}

// PermissionIDNotIn applies the NotIn predicate on the "permission_id" field.
func PermissionIDNotIn(vs ...string) predicate.RolePermission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RolePermission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPermissionID), v...))
	})
}

// PermissionIDGT applies the GT predicate on the "permission_id" field.
func PermissionIDGT(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPermissionID), v))
	})
}

// PermissionIDGTE applies the GTE predicate on the "permission_id" field.
func PermissionIDGTE(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPermissionID), v))
	})
}

// PermissionIDLT applies the LT predicate on the "permission_id" field.
func PermissionIDLT(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPermissionID), v))
	})
}

// PermissionIDLTE applies the LTE predicate on the "permission_id" field.
func PermissionIDLTE(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPermissionID), v))
	})
}

// PermissionIDContains applies the Contains predicate on the "permission_id" field.
func PermissionIDContains(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPermissionID), v))
	})
}

// PermissionIDHasPrefix applies the HasPrefix predicate on the "permission_id" field.
func PermissionIDHasPrefix(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPermissionID), v))
	})
}

// PermissionIDHasSuffix applies the HasSuffix predicate on the "permission_id" field.
func PermissionIDHasSuffix(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPermissionID), v))
	})
}

// PermissionIDIsNil applies the IsNil predicate on the "permission_id" field.
func PermissionIDIsNil() predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPermissionID)))
	})
}

// PermissionIDNotNil applies the NotNil predicate on the "permission_id" field.
func PermissionIDNotNil() predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPermissionID)))
	})
}

// PermissionIDEqualFold applies the EqualFold predicate on the "permission_id" field.
func PermissionIDEqualFold(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPermissionID), v))
	})
}

// PermissionIDContainsFold applies the ContainsFold predicate on the "permission_id" field.
func PermissionIDContainsFold(v string) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPermissionID), v))
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RolePermission) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RolePermission) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RolePermission) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		p(s.Not())
	})
}

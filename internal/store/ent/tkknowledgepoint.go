// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/tkknowledgepoint"
	"tkserver/internal/store/ent/tkquestionbank"

	"entgo.io/ent/dialect/sql"
)

// TkKnowledgePoint is the model entity for the TkKnowledgePoint schema.
type TkKnowledgePoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 知识点名称
	Name string `json:"name"`
	// QuestionBankID holds the value of the "question_bank_id" field.
	// 题库id
	QuestionBankID int `json:"question_bank_id"`
	// QuestionCount holds the value of the "question_count" field.
	// 知识点题目数量
	QuestionCount int `json:"question_count"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TkKnowledgePointQuery when eager-loading is set.
	Edges TkKnowledgePointEdges `json:"edges"`
}

// TkKnowledgePointEdges holds the relations/edges for other nodes in the graph.
type TkKnowledgePointEdges struct {
	// QuestionBank holds the value of the question_bank edge.
	QuestionBank *TkQuestionBank `json:"question_bank,omitempty"`
	// Questions holds the value of the questions edge.
	Questions []*TkQuestion `json:"questions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionBankOrErr returns the QuestionBank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TkKnowledgePointEdges) QuestionBankOrErr() (*TkQuestionBank, error) {
	if e.loadedTypes[0] {
		if e.QuestionBank == nil {
			// The edge question_bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tkquestionbank.Label}
		}
		return e.QuestionBank, nil
	}
	return nil, &NotLoadedError{edge: "question_bank"}
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e TkKnowledgePointEdges) QuestionsOrErr() ([]*TkQuestion, error) {
	if e.loadedTypes[1] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TkKnowledgePoint) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tkknowledgepoint.FieldID, tkknowledgepoint.FieldQuestionBankID, tkknowledgepoint.FieldQuestionCount:
			values[i] = new(sql.NullInt64)
		case tkknowledgepoint.FieldUUID, tkknowledgepoint.FieldName:
			values[i] = new(sql.NullString)
		case tkknowledgepoint.FieldCreatedAt, tkknowledgepoint.FieldUpdatedAt, tkknowledgepoint.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TkKnowledgePoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TkKnowledgePoint fields.
func (tkp *TkKnowledgePoint) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tkknowledgepoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tkp.ID = int(value.Int64)
		case tkknowledgepoint.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				tkp.UUID = value.String
			}
		case tkknowledgepoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tkp.CreatedAt = new(time.Time)
				*tkp.CreatedAt = value.Time
			}
		case tkknowledgepoint.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tkp.UpdatedAt = new(time.Time)
				*tkp.UpdatedAt = value.Time
			}
		case tkknowledgepoint.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tkp.DeletedAt = new(time.Time)
				*tkp.DeletedAt = value.Time
			}
		case tkknowledgepoint.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tkp.Name = value.String
			}
		case tkknowledgepoint.FieldQuestionBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_bank_id", values[i])
			} else if value.Valid {
				tkp.QuestionBankID = int(value.Int64)
			}
		case tkknowledgepoint.FieldQuestionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_count", values[i])
			} else if value.Valid {
				tkp.QuestionCount = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuestionBank queries the "question_bank" edge of the TkKnowledgePoint entity.
func (tkp *TkKnowledgePoint) QueryQuestionBank() *TkQuestionBankQuery {
	return (&TkKnowledgePointClient{config: tkp.config}).QueryQuestionBank(tkp)
}

// QueryQuestions queries the "questions" edge of the TkKnowledgePoint entity.
func (tkp *TkKnowledgePoint) QueryQuestions() *TkQuestionQuery {
	return (&TkKnowledgePointClient{config: tkp.config}).QueryQuestions(tkp)
}

// Update returns a builder for updating this TkKnowledgePoint.
// Note that you need to call TkKnowledgePoint.Unwrap() before calling this method if this TkKnowledgePoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (tkp *TkKnowledgePoint) Update() *TkKnowledgePointUpdateOne {
	return (&TkKnowledgePointClient{config: tkp.config}).UpdateOne(tkp)
}

// Unwrap unwraps the TkKnowledgePoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tkp *TkKnowledgePoint) Unwrap() *TkKnowledgePoint {
	tx, ok := tkp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TkKnowledgePoint is not a transactional entity")
	}
	tkp.config.driver = tx.drv
	return tkp
}

// String implements the fmt.Stringer.
func (tkp *TkKnowledgePoint) String() string {
	var builder strings.Builder
	builder.WriteString("TkKnowledgePoint(")
	builder.WriteString(fmt.Sprintf("id=%v", tkp.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(tkp.UUID)
	if v := tkp.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tkp.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := tkp.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(tkp.Name)
	builder.WriteString(", question_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", tkp.QuestionBankID))
	builder.WriteString(", question_count=")
	builder.WriteString(fmt.Sprintf("%v", tkp.QuestionCount))
	builder.WriteByte(')')
	return builder.String()
}

// TkKnowledgePoints is a parsable slice of TkKnowledgePoint.
type TkKnowledgePoints []*TkKnowledgePoint

func (tkp TkKnowledgePoints) config(cfg config) {
	for _i := range tkp {
		tkp[_i].config = cfg
	}
}

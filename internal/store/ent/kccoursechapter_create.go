// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tkserver/internal/store/ent/kccourse"
	"tkserver/internal/store/ent/kccoursechapter"
	"tkserver/internal/store/ent/kccoursesection"
	"tkserver/internal/store/ent/kccoursesmallcategory"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KcCourseChapterCreate is the builder for creating a KcCourseChapter entity.
type KcCourseChapterCreate struct {
	config
	mutation *KcCourseChapterMutation
	hooks    []Hook
}

// SetCourseID sets the "course_id" field.
func (kccc *KcCourseChapterCreate) SetCourseID(i int) *KcCourseChapterCreate {
	kccc.mutation.SetCourseID(i)
	return kccc
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (kccc *KcCourseChapterCreate) SetNillableCourseID(i *int) *KcCourseChapterCreate {
	if i != nil {
		kccc.SetCourseID(*i)
	}
	return kccc
}

// SetTitle sets the "title" field.
func (kccc *KcCourseChapterCreate) SetTitle(s string) *KcCourseChapterCreate {
	kccc.mutation.SetTitle(s)
	return kccc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kccc *KcCourseChapterCreate) SetNillableTitle(s *string) *KcCourseChapterCreate {
	if s != nil {
		kccc.SetTitle(*s)
	}
	return kccc
}

// SetChapterCourseID sets the "chapter_course" edge to the KcCourse entity by ID.
func (kccc *KcCourseChapterCreate) SetChapterCourseID(id int) *KcCourseChapterCreate {
	kccc.mutation.SetChapterCourseID(id)
	return kccc
}

// SetNillableChapterCourseID sets the "chapter_course" edge to the KcCourse entity by ID if the given value is not nil.
func (kccc *KcCourseChapterCreate) SetNillableChapterCourseID(id *int) *KcCourseChapterCreate {
	if id != nil {
		kccc = kccc.SetChapterCourseID(*id)
	}
	return kccc
}

// SetChapterCourse sets the "chapter_course" edge to the KcCourse entity.
func (kccc *KcCourseChapterCreate) SetChapterCourse(k *KcCourse) *KcCourseChapterCreate {
	return kccc.SetChapterCourseID(k.ID)
}

// AddChapterSectionIDs adds the "chapter_sections" edge to the KcCourseSection entity by IDs.
func (kccc *KcCourseChapterCreate) AddChapterSectionIDs(ids ...int) *KcCourseChapterCreate {
	kccc.mutation.AddChapterSectionIDs(ids...)
	return kccc
}

// AddChapterSections adds the "chapter_sections" edges to the KcCourseSection entity.
func (kccc *KcCourseChapterCreate) AddChapterSections(k ...*KcCourseSection) *KcCourseChapterCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccc.AddChapterSectionIDs(ids...)
}

// AddCourseSmallChapterIDs adds the "course_small_chapters" edge to the KcCourseSmallCategory entity by IDs.
func (kccc *KcCourseChapterCreate) AddCourseSmallChapterIDs(ids ...int) *KcCourseChapterCreate {
	kccc.mutation.AddCourseSmallChapterIDs(ids...)
	return kccc
}

// AddCourseSmallChapters adds the "course_small_chapters" edges to the KcCourseSmallCategory entity.
func (kccc *KcCourseChapterCreate) AddCourseSmallChapters(k ...*KcCourseSmallCategory) *KcCourseChapterCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kccc.AddCourseSmallChapterIDs(ids...)
}

// Mutation returns the KcCourseChapterMutation object of the builder.
func (kccc *KcCourseChapterCreate) Mutation() *KcCourseChapterMutation {
	return kccc.mutation
}

// Save creates the KcCourseChapter in the database.
func (kccc *KcCourseChapterCreate) Save(ctx context.Context) (*KcCourseChapter, error) {
	var (
		err  error
		node *KcCourseChapter
	)
	kccc.defaults()
	if len(kccc.hooks) == 0 {
		if err = kccc.check(); err != nil {
			return nil, err
		}
		node, err = kccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KcCourseChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kccc.check(); err != nil {
				return nil, err
			}
			kccc.mutation = mutation
			node, err = kccc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kccc.hooks) - 1; i >= 0; i-- {
			mut = kccc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kccc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kccc *KcCourseChapterCreate) SaveX(ctx context.Context) *KcCourseChapter {
	v, err := kccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (kccc *KcCourseChapterCreate) defaults() {
	if _, ok := kccc.mutation.Title(); !ok {
		v := kccoursechapter.DefaultTitle
		kccc.mutation.SetTitle(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kccc *KcCourseChapterCreate) check() error {
	if _, ok := kccc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New("ent: missing required field \"title\"")}
	}
	return nil
}

func (kccc *KcCourseChapterCreate) sqlSave(ctx context.Context) (*KcCourseChapter, error) {
	_node, _spec := kccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kccc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (kccc *KcCourseChapterCreate) createSpec() (*KcCourseChapter, *sqlgraph.CreateSpec) {
	var (
		_node = &KcCourseChapter{config: kccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kccoursechapter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kccoursechapter.FieldID,
			},
		}
	)
	if value, ok := kccc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kccoursechapter.FieldTitle,
		})
		_node.Title = value
	}
	if nodes := kccc.mutation.ChapterCourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kccoursechapter.ChapterCourseTable,
			Columns: []string{kccoursechapter.ChapterCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kccc.mutation.ChapterSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.ChapterSectionsTable,
			Columns: []string{kccoursechapter.ChapterSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kccc.mutation.CourseSmallChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kccoursechapter.CourseSmallChaptersTable,
			Columns: []string{kccoursechapter.CourseSmallChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kccoursesmallcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KcCourseChapterCreateBulk is the builder for creating many KcCourseChapter entities in bulk.
type KcCourseChapterCreateBulk struct {
	config
	builders []*KcCourseChapterCreate
}

// Save creates the KcCourseChapter entities in the database.
func (kcccb *KcCourseChapterCreateBulk) Save(ctx context.Context) ([]*KcCourseChapter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcccb.builders))
	nodes := make([]*KcCourseChapter, len(kcccb.builders))
	mutators := make([]Mutator, len(kcccb.builders))
	for i := range kcccb.builders {
		func(i int, root context.Context) {
			builder := kcccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KcCourseChapterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcccb *KcCourseChapterCreateBulk) SaveX(ctx context.Context) []*KcCourseChapter {
	v, err := kcccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

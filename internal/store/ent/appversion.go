// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/appversion"

	"entgo.io/ent/dialect/sql"
)

// AppVersion is the model entity for the AppVersion schema.
type AppVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// IP holds the value of the "ip" field.
	// 登录ip
	IP uint16 `json:"ip"`
	// Name holds the value of the "name" field.
	// 版本名称
	Name string `json:"name"`
	// Sn holds the value of the "sn" field.
	// 版本编号
	Sn string `json:"sn"`
	// Remark holds the value of the "remark" field.
	// 版本描述
	Remark string `json:"remark"`
	// URL holds the value of the "url" field.
	// 下载地址
	URL string `json:"url"`
	// PhoneType holds the value of the "phone_type" field.
	// 适用机型 1:android 2:ios
	PhoneType uint8 `json:"phone_type"`
	// IsForceUpdate holds the value of the "is_force_update" field.
	// 是否强制更新 1:是,2:否
	IsForceUpdate uint8 `json:"is_force_update"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppVersion) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appversion.FieldID, appversion.FieldIP, appversion.FieldPhoneType, appversion.FieldIsForceUpdate:
			values[i] = new(sql.NullInt64)
		case appversion.FieldUUID, appversion.FieldName, appversion.FieldSn, appversion.FieldRemark, appversion.FieldURL:
			values[i] = new(sql.NullString)
		case appversion.FieldCreatedAt, appversion.FieldUpdatedAt, appversion.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppVersion", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppVersion fields.
func (av *AppVersion) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			av.ID = int(value.Int64)
		case appversion.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				av.UUID = value.String
			}
		case appversion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				av.CreatedAt = new(time.Time)
				*av.CreatedAt = value.Time
			}
		case appversion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				av.UpdatedAt = new(time.Time)
				*av.UpdatedAt = value.Time
			}
		case appversion.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				av.DeletedAt = new(time.Time)
				*av.DeletedAt = value.Time
			}
		case appversion.FieldIP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				av.IP = uint16(value.Int64)
			}
		case appversion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				av.Name = value.String
			}
		case appversion.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				av.Sn = value.String
			}
		case appversion.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				av.Remark = value.String
			}
		case appversion.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				av.URL = value.String
			}
		case appversion.FieldPhoneType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field phone_type", values[i])
			} else if value.Valid {
				av.PhoneType = uint8(value.Int64)
			}
		case appversion.FieldIsForceUpdate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_force_update", values[i])
			} else if value.Valid {
				av.IsForceUpdate = uint8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppVersion.
// Note that you need to call AppVersion.Unwrap() before calling this method if this AppVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (av *AppVersion) Update() *AppVersionUpdateOne {
	return (&AppVersionClient{config: av.config}).UpdateOne(av)
}

// Unwrap unwraps the AppVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (av *AppVersion) Unwrap() *AppVersion {
	tx, ok := av.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppVersion is not a transactional entity")
	}
	av.config.driver = tx.drv
	return av
}

// String implements the fmt.Stringer.
func (av *AppVersion) String() string {
	var builder strings.Builder
	builder.WriteString("AppVersion(")
	builder.WriteString(fmt.Sprintf("id=%v", av.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(av.UUID)
	if v := av.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := av.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := av.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ip=")
	builder.WriteString(fmt.Sprintf("%v", av.IP))
	builder.WriteString(", name=")
	builder.WriteString(av.Name)
	builder.WriteString(", sn=")
	builder.WriteString(av.Sn)
	builder.WriteString(", remark=")
	builder.WriteString(av.Remark)
	builder.WriteString(", url=")
	builder.WriteString(av.URL)
	builder.WriteString(", phone_type=")
	builder.WriteString(fmt.Sprintf("%v", av.PhoneType))
	builder.WriteString(", is_force_update=")
	builder.WriteString(fmt.Sprintf("%v", av.IsForceUpdate))
	builder.WriteByte(')')
	return builder.String()
}

// AppVersions is a parsable slice of AppVersion.
type AppVersions []*AppVersion

func (av AppVersions) config(cfg config) {
	for _i := range av {
		av[_i].config = cfg
	}
}

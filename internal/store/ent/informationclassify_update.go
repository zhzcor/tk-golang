// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/informationclassify"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InformationClassifyUpdate is the builder for updating InformationClassify entities.
type InformationClassifyUpdate struct {
	config
	hooks    []Hook
	mutation *InformationClassifyMutation
}

// Where adds a new predicate for the InformationClassifyUpdate builder.
func (icu *InformationClassifyUpdate) Where(ps ...predicate.InformationClassify) *InformationClassifyUpdate {
	icu.mutation.predicates = append(icu.mutation.predicates, ps...)
	return icu
}

// SetUUID sets the "uuid" field.
func (icu *InformationClassifyUpdate) SetUUID(s string) *InformationClassifyUpdate {
	icu.mutation.SetUUID(s)
	return icu
}

// SetUpdatedAt sets the "updated_at" field.
func (icu *InformationClassifyUpdate) SetUpdatedAt(t time.Time) *InformationClassifyUpdate {
	icu.mutation.SetUpdatedAt(t)
	return icu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (icu *InformationClassifyUpdate) ClearUpdatedAt() *InformationClassifyUpdate {
	icu.mutation.ClearUpdatedAt()
	return icu
}

// SetDeletedAt sets the "deleted_at" field.
func (icu *InformationClassifyUpdate) SetDeletedAt(t time.Time) *InformationClassifyUpdate {
	icu.mutation.SetDeletedAt(t)
	return icu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icu *InformationClassifyUpdate) SetNillableDeletedAt(t *time.Time) *InformationClassifyUpdate {
	if t != nil {
		icu.SetDeletedAt(*t)
	}
	return icu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (icu *InformationClassifyUpdate) ClearDeletedAt() *InformationClassifyUpdate {
	icu.mutation.ClearDeletedAt()
	return icu
}

// SetName sets the "name" field.
func (icu *InformationClassifyUpdate) SetName(s string) *InformationClassifyUpdate {
	icu.mutation.SetName(s)
	return icu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (icu *InformationClassifyUpdate) SetNillableName(s *string) *InformationClassifyUpdate {
	if s != nil {
		icu.SetName(*s)
	}
	return icu
}

// SetStatus sets the "status" field.
func (icu *InformationClassifyUpdate) SetStatus(u uint8) *InformationClassifyUpdate {
	icu.mutation.ResetStatus()
	icu.mutation.SetStatus(u)
	return icu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (icu *InformationClassifyUpdate) SetNillableStatus(u *uint8) *InformationClassifyUpdate {
	if u != nil {
		icu.SetStatus(*u)
	}
	return icu
}

// AddStatus adds u to the "status" field.
func (icu *InformationClassifyUpdate) AddStatus(u uint8) *InformationClassifyUpdate {
	icu.mutation.AddStatus(u)
	return icu
}

// Mutation returns the InformationClassifyMutation object of the builder.
func (icu *InformationClassifyUpdate) Mutation() *InformationClassifyMutation {
	return icu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (icu *InformationClassifyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	icu.defaults()
	if len(icu.hooks) == 0 {
		affected, err = icu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InformationClassifyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			icu.mutation = mutation
			affected, err = icu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(icu.hooks) - 1; i >= 0; i-- {
			mut = icu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (icu *InformationClassifyUpdate) SaveX(ctx context.Context) int {
	affected, err := icu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (icu *InformationClassifyUpdate) Exec(ctx context.Context) error {
	_, err := icu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icu *InformationClassifyUpdate) ExecX(ctx context.Context) {
	if err := icu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icu *InformationClassifyUpdate) defaults() {
	if _, ok := icu.mutation.UpdatedAt(); !ok && !icu.mutation.UpdatedAtCleared() {
		v := informationclassify.UpdateDefaultUpdatedAt()
		icu.mutation.SetUpdatedAt(v)
	}
}

func (icu *InformationClassifyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   informationclassify.Table,
			Columns: informationclassify.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: informationclassify.FieldID,
			},
		},
	}
	if ps := icu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationclassify.FieldUUID,
		})
	}
	if icu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: informationclassify.FieldCreatedAt,
		})
	}
	if value, ok := icu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: informationclassify.FieldUpdatedAt,
		})
	}
	if icu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: informationclassify.FieldUpdatedAt,
		})
	}
	if value, ok := icu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: informationclassify.FieldDeletedAt,
		})
	}
	if icu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: informationclassify.FieldDeletedAt,
		})
	}
	if value, ok := icu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationclassify.FieldName,
		})
	}
	if value, ok := icu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: informationclassify.FieldStatus,
		})
	}
	if value, ok := icu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: informationclassify.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, icu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{informationclassify.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InformationClassifyUpdateOne is the builder for updating a single InformationClassify entity.
type InformationClassifyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InformationClassifyMutation
}

// SetUUID sets the "uuid" field.
func (icuo *InformationClassifyUpdateOne) SetUUID(s string) *InformationClassifyUpdateOne {
	icuo.mutation.SetUUID(s)
	return icuo
}

// SetUpdatedAt sets the "updated_at" field.
func (icuo *InformationClassifyUpdateOne) SetUpdatedAt(t time.Time) *InformationClassifyUpdateOne {
	icuo.mutation.SetUpdatedAt(t)
	return icuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (icuo *InformationClassifyUpdateOne) ClearUpdatedAt() *InformationClassifyUpdateOne {
	icuo.mutation.ClearUpdatedAt()
	return icuo
}

// SetDeletedAt sets the "deleted_at" field.
func (icuo *InformationClassifyUpdateOne) SetDeletedAt(t time.Time) *InformationClassifyUpdateOne {
	icuo.mutation.SetDeletedAt(t)
	return icuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icuo *InformationClassifyUpdateOne) SetNillableDeletedAt(t *time.Time) *InformationClassifyUpdateOne {
	if t != nil {
		icuo.SetDeletedAt(*t)
	}
	return icuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (icuo *InformationClassifyUpdateOne) ClearDeletedAt() *InformationClassifyUpdateOne {
	icuo.mutation.ClearDeletedAt()
	return icuo
}

// SetName sets the "name" field.
func (icuo *InformationClassifyUpdateOne) SetName(s string) *InformationClassifyUpdateOne {
	icuo.mutation.SetName(s)
	return icuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (icuo *InformationClassifyUpdateOne) SetNillableName(s *string) *InformationClassifyUpdateOne {
	if s != nil {
		icuo.SetName(*s)
	}
	return icuo
}

// SetStatus sets the "status" field.
func (icuo *InformationClassifyUpdateOne) SetStatus(u uint8) *InformationClassifyUpdateOne {
	icuo.mutation.ResetStatus()
	icuo.mutation.SetStatus(u)
	return icuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (icuo *InformationClassifyUpdateOne) SetNillableStatus(u *uint8) *InformationClassifyUpdateOne {
	if u != nil {
		icuo.SetStatus(*u)
	}
	return icuo
}

// AddStatus adds u to the "status" field.
func (icuo *InformationClassifyUpdateOne) AddStatus(u uint8) *InformationClassifyUpdateOne {
	icuo.mutation.AddStatus(u)
	return icuo
}

// Mutation returns the InformationClassifyMutation object of the builder.
func (icuo *InformationClassifyUpdateOne) Mutation() *InformationClassifyMutation {
	return icuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (icuo *InformationClassifyUpdateOne) Select(field string, fields ...string) *InformationClassifyUpdateOne {
	icuo.fields = append([]string{field}, fields...)
	return icuo
}

// Save executes the query and returns the updated InformationClassify entity.
func (icuo *InformationClassifyUpdateOne) Save(ctx context.Context) (*InformationClassify, error) {
	var (
		err  error
		node *InformationClassify
	)
	icuo.defaults()
	if len(icuo.hooks) == 0 {
		node, err = icuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InformationClassifyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			icuo.mutation = mutation
			node, err = icuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(icuo.hooks) - 1; i >= 0; i-- {
			mut = icuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (icuo *InformationClassifyUpdateOne) SaveX(ctx context.Context) *InformationClassify {
	node, err := icuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (icuo *InformationClassifyUpdateOne) Exec(ctx context.Context) error {
	_, err := icuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icuo *InformationClassifyUpdateOne) ExecX(ctx context.Context) {
	if err := icuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icuo *InformationClassifyUpdateOne) defaults() {
	if _, ok := icuo.mutation.UpdatedAt(); !ok && !icuo.mutation.UpdatedAtCleared() {
		v := informationclassify.UpdateDefaultUpdatedAt()
		icuo.mutation.SetUpdatedAt(v)
	}
}

func (icuo *InformationClassifyUpdateOne) sqlSave(ctx context.Context) (_node *InformationClassify, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   informationclassify.Table,
			Columns: informationclassify.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: informationclassify.FieldID,
			},
		},
	}
	id, ok := icuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing InformationClassify.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := icuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, informationclassify.FieldID)
		for _, f := range fields {
			if !informationclassify.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != informationclassify.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := icuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationclassify.FieldUUID,
		})
	}
	if icuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: informationclassify.FieldCreatedAt,
		})
	}
	if value, ok := icuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: informationclassify.FieldUpdatedAt,
		})
	}
	if icuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: informationclassify.FieldUpdatedAt,
		})
	}
	if value, ok := icuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: informationclassify.FieldDeletedAt,
		})
	}
	if icuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: informationclassify.FieldDeletedAt,
		})
	}
	if value, ok := icuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationclassify.FieldName,
		})
	}
	if value, ok := icuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: informationclassify.FieldStatus,
		})
	}
	if value, ok := icuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: informationclassify.FieldStatus,
		})
	}
	_node = &InformationClassify{config: icuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, icuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{informationclassify.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

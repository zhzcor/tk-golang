// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/advertise"
	"gserver/internal/store/ent/attachment"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Advertise is the model entity for the Advertise schema.
type Advertise struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name"`
	// Status holds the value of the "status" field.
	// 状态：1、上线。2:下线
	Status uint8 `json:"status"`
	// Position holds the value of the "position" field.
	// 广告位置：1、首页轮播图，2:圈子页面，3：我的页面，4:pc首页轮播图
	Position uint8 `json:"position"`
	// StartAt holds the value of the "start_at" field.
	// 开始时间
	StartAt *time.Time `json:"start_at"`
	// EndAt holds the value of the "end_at" field.
	// 到期时间
	EndAt *time.Time `json:"end_at"`
	// ClickCount holds the value of the "click_count" field.
	// 点击次数
	ClickCount int `json:"click_count"`
	// AdURL holds the value of the "ad_url" field.
	// 广告链接
	AdURL string `json:"ad_url"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark"`
	// AttachmentID holds the value of the "attachment_id" field.
	// 广告图id
	AttachmentID int `json:"attachment_id"`
	// SortOrder holds the value of the "sort_order" field.
	// 排序
	SortOrder int `json:"sort_order"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdvertiseQuery when eager-loading is set.
	Edges AdvertiseEdges `json:"edges"`
}

// AdvertiseEdges holds the relations/edges for other nodes in the graph.
type AdvertiseEdges struct {
	// Attachment holds the value of the attachment edge.
	Attachment *Attachment `json:"attachment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AttachmentOrErr returns the Attachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdvertiseEdges) AttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[0] {
		if e.Attachment == nil {
			// The edge attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.Attachment, nil
	}
	return nil, &NotLoadedError{edge: "attachment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Advertise) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case advertise.FieldID, advertise.FieldStatus, advertise.FieldPosition, advertise.FieldClickCount, advertise.FieldAttachmentID, advertise.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case advertise.FieldUUID, advertise.FieldName, advertise.FieldAdURL, advertise.FieldRemark:
			values[i] = new(sql.NullString)
		case advertise.FieldCreatedAt, advertise.FieldUpdatedAt, advertise.FieldDeletedAt, advertise.FieldStartAt, advertise.FieldEndAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Advertise", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Advertise fields.
func (a *Advertise) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case advertise.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case advertise.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				a.UUID = value.String
			}
		case advertise.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = new(time.Time)
				*a.CreatedAt = value.Time
			}
		case advertise.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = new(time.Time)
				*a.UpdatedAt = value.Time
			}
		case advertise.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case advertise.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case advertise.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = uint8(value.Int64)
			}
		case advertise.FieldPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				a.Position = uint8(value.Int64)
			}
		case advertise.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				a.StartAt = new(time.Time)
				*a.StartAt = value.Time
			}
		case advertise.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				a.EndAt = new(time.Time)
				*a.EndAt = value.Time
			}
		case advertise.FieldClickCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field click_count", values[i])
			} else if value.Valid {
				a.ClickCount = int(value.Int64)
			}
		case advertise.FieldAdURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ad_url", values[i])
			} else if value.Valid {
				a.AdURL = value.String
			}
		case advertise.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				a.Remark = value.String
			}
		case advertise.FieldAttachmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_id", values[i])
			} else if value.Valid {
				a.AttachmentID = int(value.Int64)
			}
		case advertise.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				a.SortOrder = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAttachment queries the "attachment" edge of the Advertise entity.
func (a *Advertise) QueryAttachment() *AttachmentQuery {
	return (&AdvertiseClient{config: a.config}).QueryAttachment(a)
}

// Update returns a builder for updating this Advertise.
// Note that you need to call Advertise.Unwrap() before calling this method if this Advertise
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Advertise) Update() *AdvertiseUpdateOne {
	return (&AdvertiseClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Advertise entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Advertise) Unwrap() *Advertise {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Advertise is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Advertise) String() string {
	var builder strings.Builder
	builder.WriteString("Advertise(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(a.UUID)
	if v := a.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := a.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := a.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", position=")
	builder.WriteString(fmt.Sprintf("%v", a.Position))
	if v := a.StartAt; v != nil {
		builder.WriteString(", start_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := a.EndAt; v != nil {
		builder.WriteString(", end_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", click_count=")
	builder.WriteString(fmt.Sprintf("%v", a.ClickCount))
	builder.WriteString(", ad_url=")
	builder.WriteString(a.AdURL)
	builder.WriteString(", remark=")
	builder.WriteString(a.Remark)
	builder.WriteString(", attachment_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AttachmentID))
	builder.WriteString(", sort_order=")
	builder.WriteString(fmt.Sprintf("%v", a.SortOrder))
	builder.WriteByte(')')
	return builder.String()
}

// Advertises is a parsable slice of Advertise.
type Advertises []*Advertise

func (a Advertises) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

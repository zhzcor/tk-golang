// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gserver/internal/store/ent/appagreement"
	"gserver/internal/store/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppAgreementQuery is the builder for querying AppAgreement entities.
type AppAgreementQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AppAgreement
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppAgreementQuery builder.
func (aaq *AppAgreementQuery) Where(ps ...predicate.AppAgreement) *AppAgreementQuery {
	aaq.predicates = append(aaq.predicates, ps...)
	return aaq
}

// Limit adds a limit step to the query.
func (aaq *AppAgreementQuery) Limit(limit int) *AppAgreementQuery {
	aaq.limit = &limit
	return aaq
}

// Offset adds an offset step to the query.
func (aaq *AppAgreementQuery) Offset(offset int) *AppAgreementQuery {
	aaq.offset = &offset
	return aaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aaq *AppAgreementQuery) Unique(unique bool) *AppAgreementQuery {
	aaq.unique = &unique
	return aaq
}

// Order adds an order step to the query.
func (aaq *AppAgreementQuery) Order(o ...OrderFunc) *AppAgreementQuery {
	aaq.order = append(aaq.order, o...)
	return aaq
}

// First returns the first AppAgreement entity from the query.
// Returns a *NotFoundError when no AppAgreement was found.
func (aaq *AppAgreementQuery) First(ctx context.Context) (*AppAgreement, error) {
	nodes, err := aaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appagreement.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aaq *AppAgreementQuery) FirstX(ctx context.Context) *AppAgreement {
	node, err := aaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppAgreement ID from the query.
// Returns a *NotFoundError when no AppAgreement ID was found.
func (aaq *AppAgreementQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appagreement.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aaq *AppAgreementQuery) FirstIDX(ctx context.Context) int {
	id, err := aaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppAgreement entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AppAgreement entity is not found.
// Returns a *NotFoundError when no AppAgreement entities are found.
func (aaq *AppAgreementQuery) Only(ctx context.Context) (*AppAgreement, error) {
	nodes, err := aaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appagreement.Label}
	default:
		return nil, &NotSingularError{appagreement.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aaq *AppAgreementQuery) OnlyX(ctx context.Context) *AppAgreement {
	node, err := aaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppAgreement ID in the query.
// Returns a *NotSingularError when exactly one AppAgreement ID is not found.
// Returns a *NotFoundError when no entities are found.
func (aaq *AppAgreementQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appagreement.Label}
	default:
		err = &NotSingularError{appagreement.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aaq *AppAgreementQuery) OnlyIDX(ctx context.Context) int {
	id, err := aaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppAgreements.
func (aaq *AppAgreementQuery) All(ctx context.Context) ([]*AppAgreement, error) {
	if err := aaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aaq *AppAgreementQuery) AllX(ctx context.Context) []*AppAgreement {
	nodes, err := aaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppAgreement IDs.
func (aaq *AppAgreementQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aaq.Select(appagreement.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aaq *AppAgreementQuery) IDsX(ctx context.Context) []int {
	ids, err := aaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aaq *AppAgreementQuery) Count(ctx context.Context) (int, error) {
	if err := aaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aaq *AppAgreementQuery) CountX(ctx context.Context) int {
	count, err := aaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aaq *AppAgreementQuery) Exist(ctx context.Context) (bool, error) {
	if err := aaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aaq *AppAgreementQuery) ExistX(ctx context.Context) bool {
	exist, err := aaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppAgreementQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aaq *AppAgreementQuery) Clone() *AppAgreementQuery {
	if aaq == nil {
		return nil
	}
	return &AppAgreementQuery{
		config:     aaq.config,
		limit:      aaq.limit,
		offset:     aaq.offset,
		order:      append([]OrderFunc{}, aaq.order...),
		predicates: append([]predicate.AppAgreement{}, aaq.predicates...),
		// clone intermediate query.
		sql:  aaq.sql.Clone(),
		path: aaq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppAgreement.Query().
//		GroupBy(appagreement.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aaq *AppAgreementQuery) GroupBy(field string, fields ...string) *AppAgreementGroupBy {
	group := &AppAgreementGroupBy{config: aaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid"`
//	}
//
//	client.AppAgreement.Query().
//		Select(appagreement.FieldUUID).
//		Scan(ctx, &v)
//
func (aaq *AppAgreementQuery) Select(field string, fields ...string) *AppAgreementSelect {
	aaq.fields = append([]string{field}, fields...)
	return &AppAgreementSelect{AppAgreementQuery: aaq}
}

func (aaq *AppAgreementQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aaq.fields {
		if !appagreement.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aaq.path != nil {
		prev, err := aaq.path(ctx)
		if err != nil {
			return err
		}
		aaq.sql = prev
	}
	return nil
}

func (aaq *AppAgreementQuery) sqlAll(ctx context.Context) ([]*AppAgreement, error) {
	var (
		nodes = []*AppAgreement{}
		_spec = aaq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AppAgreement{config: aaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, aaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (aaq *AppAgreementQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aaq.querySpec()
	return sqlgraph.CountNodes(ctx, aaq.driver, _spec)
}

func (aaq *AppAgreementQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (aaq *AppAgreementQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appagreement.Table,
			Columns: appagreement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appagreement.FieldID,
			},
		},
		From:   aaq.sql,
		Unique: true,
	}
	if unique := aaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appagreement.FieldID)
		for i := range fields {
			if fields[i] != appagreement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aaq *AppAgreementQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aaq.driver.Dialect())
	t1 := builder.Table(appagreement.Table)
	selector := builder.Select(t1.Columns(appagreement.Columns...)...).From(t1)
	if aaq.sql != nil {
		selector = aaq.sql
		selector.Select(selector.Columns(appagreement.Columns...)...)
	}
	for _, p := range aaq.predicates {
		p(selector)
	}
	for _, p := range aaq.order {
		p(selector)
	}
	if offset := aaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AppAgreementGroupBy is the group-by builder for AppAgreement entities.
type AppAgreementGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aagb *AppAgreementGroupBy) Aggregate(fns ...AggregateFunc) *AppAgreementGroupBy {
	aagb.fns = append(aagb.fns, fns...)
	return aagb
}

// Scan applies the group-by query and scans the result into the given value.
func (aagb *AppAgreementGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := aagb.path(ctx)
	if err != nil {
		return err
	}
	aagb.sql = query
	return aagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aagb *AppAgreementGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := aagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (aagb *AppAgreementGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(aagb.fields) > 1 {
		return nil, errors.New("ent: AppAgreementGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := aagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aagb *AppAgreementGroupBy) StringsX(ctx context.Context) []string {
	v, err := aagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aagb *AppAgreementGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appagreement.Label}
	default:
		err = fmt.Errorf("ent: AppAgreementGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aagb *AppAgreementGroupBy) StringX(ctx context.Context) string {
	v, err := aagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (aagb *AppAgreementGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(aagb.fields) > 1 {
		return nil, errors.New("ent: AppAgreementGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := aagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aagb *AppAgreementGroupBy) IntsX(ctx context.Context) []int {
	v, err := aagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aagb *AppAgreementGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appagreement.Label}
	default:
		err = fmt.Errorf("ent: AppAgreementGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aagb *AppAgreementGroupBy) IntX(ctx context.Context) int {
	v, err := aagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (aagb *AppAgreementGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(aagb.fields) > 1 {
		return nil, errors.New("ent: AppAgreementGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := aagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aagb *AppAgreementGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := aagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aagb *AppAgreementGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appagreement.Label}
	default:
		err = fmt.Errorf("ent: AppAgreementGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aagb *AppAgreementGroupBy) Float64X(ctx context.Context) float64 {
	v, err := aagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (aagb *AppAgreementGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(aagb.fields) > 1 {
		return nil, errors.New("ent: AppAgreementGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := aagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aagb *AppAgreementGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := aagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aagb *AppAgreementGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appagreement.Label}
	default:
		err = fmt.Errorf("ent: AppAgreementGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aagb *AppAgreementGroupBy) BoolX(ctx context.Context) bool {
	v, err := aagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aagb *AppAgreementGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range aagb.fields {
		if !appagreement.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := aagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aagb *AppAgreementGroupBy) sqlQuery() *sql.Selector {
	selector := aagb.sql
	columns := make([]string, 0, len(aagb.fields)+len(aagb.fns))
	columns = append(columns, aagb.fields...)
	for _, fn := range aagb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(aagb.fields...)
}

// AppAgreementSelect is the builder for selecting fields of AppAgreement entities.
type AppAgreementSelect struct {
	*AppAgreementQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aas *AppAgreementSelect) Scan(ctx context.Context, v interface{}) error {
	if err := aas.prepareQuery(ctx); err != nil {
		return err
	}
	aas.sql = aas.AppAgreementQuery.sqlQuery(ctx)
	return aas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aas *AppAgreementSelect) ScanX(ctx context.Context, v interface{}) {
	if err := aas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (aas *AppAgreementSelect) Strings(ctx context.Context) ([]string, error) {
	if len(aas.fields) > 1 {
		return nil, errors.New("ent: AppAgreementSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := aas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aas *AppAgreementSelect) StringsX(ctx context.Context) []string {
	v, err := aas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (aas *AppAgreementSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appagreement.Label}
	default:
		err = fmt.Errorf("ent: AppAgreementSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aas *AppAgreementSelect) StringX(ctx context.Context) string {
	v, err := aas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (aas *AppAgreementSelect) Ints(ctx context.Context) ([]int, error) {
	if len(aas.fields) > 1 {
		return nil, errors.New("ent: AppAgreementSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := aas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aas *AppAgreementSelect) IntsX(ctx context.Context) []int {
	v, err := aas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (aas *AppAgreementSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appagreement.Label}
	default:
		err = fmt.Errorf("ent: AppAgreementSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aas *AppAgreementSelect) IntX(ctx context.Context) int {
	v, err := aas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (aas *AppAgreementSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(aas.fields) > 1 {
		return nil, errors.New("ent: AppAgreementSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := aas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aas *AppAgreementSelect) Float64sX(ctx context.Context) []float64 {
	v, err := aas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (aas *AppAgreementSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appagreement.Label}
	default:
		err = fmt.Errorf("ent: AppAgreementSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aas *AppAgreementSelect) Float64X(ctx context.Context) float64 {
	v, err := aas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (aas *AppAgreementSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(aas.fields) > 1 {
		return nil, errors.New("ent: AppAgreementSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := aas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aas *AppAgreementSelect) BoolsX(ctx context.Context) []bool {
	v, err := aas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (aas *AppAgreementSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appagreement.Label}
	default:
		err = fmt.Errorf("ent: AppAgreementSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aas *AppAgreementSelect) BoolX(ctx context.Context) bool {
	v, err := aas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aas *AppAgreementSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := aas.sqlQuery().Query()
	if err := aas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aas *AppAgreementSelect) sqlQuery() sql.Querier {
	selector := aas.sql
	selector.Select(selector.Columns(aas.fields...)...)
	return selector
}

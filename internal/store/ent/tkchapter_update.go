// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"tkserver/internal/store/ent/predicate"
	"tkserver/internal/store/ent/tkchapter"
	"tkserver/internal/store/ent/tkquestionbank"
	"tkserver/internal/store/ent/tksection"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TkChapterUpdate is the builder for updating TkChapter entities.
type TkChapterUpdate struct {
	config
	hooks    []Hook
	mutation *TkChapterMutation
}

// Where adds a new predicate for the TkChapterUpdate builder.
func (tcu *TkChapterUpdate) Where(ps ...predicate.TkChapter) *TkChapterUpdate {
	tcu.mutation.predicates = append(tcu.mutation.predicates, ps...)
	return tcu
}

// SetUUID sets the "uuid" field.
func (tcu *TkChapterUpdate) SetUUID(s string) *TkChapterUpdate {
	tcu.mutation.SetUUID(s)
	return tcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcu *TkChapterUpdate) SetUpdatedAt(t time.Time) *TkChapterUpdate {
	tcu.mutation.SetUpdatedAt(t)
	return tcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcu *TkChapterUpdate) ClearUpdatedAt() *TkChapterUpdate {
	tcu.mutation.ClearUpdatedAt()
	return tcu
}

// SetDeletedAt sets the "deleted_at" field.
func (tcu *TkChapterUpdate) SetDeletedAt(t time.Time) *TkChapterUpdate {
	tcu.mutation.SetDeletedAt(t)
	return tcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcu *TkChapterUpdate) SetNillableDeletedAt(t *time.Time) *TkChapterUpdate {
	if t != nil {
		tcu.SetDeletedAt(*t)
	}
	return tcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcu *TkChapterUpdate) ClearDeletedAt() *TkChapterUpdate {
	tcu.mutation.ClearDeletedAt()
	return tcu
}

// SetName sets the "name" field.
func (tcu *TkChapterUpdate) SetName(s string) *TkChapterUpdate {
	tcu.mutation.SetName(s)
	return tcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcu *TkChapterUpdate) SetNillableName(s *string) *TkChapterUpdate {
	if s != nil {
		tcu.SetName(*s)
	}
	return tcu
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tcu *TkChapterUpdate) SetQuestionBankID(i int) *TkChapterUpdate {
	tcu.mutation.ResetQuestionBankID()
	tcu.mutation.SetQuestionBankID(i)
	return tcu
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tcu *TkChapterUpdate) SetNillableQuestionBankID(i *int) *TkChapterUpdate {
	if i != nil {
		tcu.SetQuestionBankID(*i)
	}
	return tcu
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tcu *TkChapterUpdate) ClearQuestionBankID() *TkChapterUpdate {
	tcu.mutation.ClearQuestionBankID()
	return tcu
}

// SetQuestionCount sets the "question_count" field.
func (tcu *TkChapterUpdate) SetQuestionCount(i int) *TkChapterUpdate {
	tcu.mutation.ResetQuestionCount()
	tcu.mutation.SetQuestionCount(i)
	return tcu
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tcu *TkChapterUpdate) SetNillableQuestionCount(i *int) *TkChapterUpdate {
	if i != nil {
		tcu.SetQuestionCount(*i)
	}
	return tcu
}

// AddQuestionCount adds i to the "question_count" field.
func (tcu *TkChapterUpdate) AddQuestionCount(i int) *TkChapterUpdate {
	tcu.mutation.AddQuestionCount(i)
	return tcu
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tcu *TkChapterUpdate) SetQuestionBank(t *TkQuestionBank) *TkChapterUpdate {
	return tcu.SetQuestionBankID(t.ID)
}

// AddSectionIDs adds the "sections" edge to the TkSection entity by IDs.
func (tcu *TkChapterUpdate) AddSectionIDs(ids ...int) *TkChapterUpdate {
	tcu.mutation.AddSectionIDs(ids...)
	return tcu
}

// AddSections adds the "sections" edges to the TkSection entity.
func (tcu *TkChapterUpdate) AddSections(t ...*TkSection) *TkChapterUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.AddSectionIDs(ids...)
}

// Mutation returns the TkChapterMutation object of the builder.
func (tcu *TkChapterUpdate) Mutation() *TkChapterMutation {
	return tcu.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (tcu *TkChapterUpdate) ClearQuestionBank() *TkChapterUpdate {
	tcu.mutation.ClearQuestionBank()
	return tcu
}

// ClearSections clears all "sections" edges to the TkSection entity.
func (tcu *TkChapterUpdate) ClearSections() *TkChapterUpdate {
	tcu.mutation.ClearSections()
	return tcu
}

// RemoveSectionIDs removes the "sections" edge to TkSection entities by IDs.
func (tcu *TkChapterUpdate) RemoveSectionIDs(ids ...int) *TkChapterUpdate {
	tcu.mutation.RemoveSectionIDs(ids...)
	return tcu
}

// RemoveSections removes "sections" edges to TkSection entities.
func (tcu *TkChapterUpdate) RemoveSections(t ...*TkSection) *TkChapterUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.RemoveSectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TkChapterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tcu.defaults()
	if len(tcu.hooks) == 0 {
		affected, err = tcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcu.mutation = mutation
			affected, err = tcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tcu.hooks) - 1; i >= 0; i-- {
			mut = tcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TkChapterUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TkChapterUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TkChapterUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *TkChapterUpdate) defaults() {
	if _, ok := tcu.mutation.UpdatedAt(); !ok && !tcu.mutation.UpdatedAtCleared() {
		v := tkchapter.UpdateDefaultUpdatedAt()
		tcu.mutation.SetUpdatedAt(v)
	}
}

func (tcu *TkChapterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkchapter.Table,
			Columns: tkchapter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkchapter.FieldID,
			},
		},
	}
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkchapter.FieldUUID,
		})
	}
	if tcu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkchapter.FieldCreatedAt,
		})
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkchapter.FieldUpdatedAt,
		})
	}
	if tcu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkchapter.FieldUpdatedAt,
		})
	}
	if value, ok := tcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkchapter.FieldDeletedAt,
		})
	}
	if tcu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkchapter.FieldDeletedAt,
		})
	}
	if value, ok := tcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkchapter.FieldName,
		})
	}
	if value, ok := tcu.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkchapter.FieldQuestionCount,
		})
	}
	if value, ok := tcu.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkchapter.FieldQuestionCount,
		})
	}
	if tcu.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkchapter.QuestionBankTable,
			Columns: []string{tkchapter.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkchapter.QuestionBankTable,
			Columns: []string{tkchapter.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkchapter.SectionsTable,
			Columns: []string{tkchapter.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedSectionsIDs(); len(nodes) > 0 && !tcu.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkchapter.SectionsTable,
			Columns: []string{tkchapter.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkchapter.SectionsTable,
			Columns: []string{tkchapter.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkchapter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TkChapterUpdateOne is the builder for updating a single TkChapter entity.
type TkChapterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TkChapterMutation
}

// SetUUID sets the "uuid" field.
func (tcuo *TkChapterUpdateOne) SetUUID(s string) *TkChapterUpdateOne {
	tcuo.mutation.SetUUID(s)
	return tcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tcuo *TkChapterUpdateOne) SetUpdatedAt(t time.Time) *TkChapterUpdateOne {
	tcuo.mutation.SetUpdatedAt(t)
	return tcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcuo *TkChapterUpdateOne) ClearUpdatedAt() *TkChapterUpdateOne {
	tcuo.mutation.ClearUpdatedAt()
	return tcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tcuo *TkChapterUpdateOne) SetDeletedAt(t time.Time) *TkChapterUpdateOne {
	tcuo.mutation.SetDeletedAt(t)
	return tcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcuo *TkChapterUpdateOne) SetNillableDeletedAt(t *time.Time) *TkChapterUpdateOne {
	if t != nil {
		tcuo.SetDeletedAt(*t)
	}
	return tcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcuo *TkChapterUpdateOne) ClearDeletedAt() *TkChapterUpdateOne {
	tcuo.mutation.ClearDeletedAt()
	return tcuo
}

// SetName sets the "name" field.
func (tcuo *TkChapterUpdateOne) SetName(s string) *TkChapterUpdateOne {
	tcuo.mutation.SetName(s)
	return tcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcuo *TkChapterUpdateOne) SetNillableName(s *string) *TkChapterUpdateOne {
	if s != nil {
		tcuo.SetName(*s)
	}
	return tcuo
}

// SetQuestionBankID sets the "question_bank_id" field.
func (tcuo *TkChapterUpdateOne) SetQuestionBankID(i int) *TkChapterUpdateOne {
	tcuo.mutation.ResetQuestionBankID()
	tcuo.mutation.SetQuestionBankID(i)
	return tcuo
}

// SetNillableQuestionBankID sets the "question_bank_id" field if the given value is not nil.
func (tcuo *TkChapterUpdateOne) SetNillableQuestionBankID(i *int) *TkChapterUpdateOne {
	if i != nil {
		tcuo.SetQuestionBankID(*i)
	}
	return tcuo
}

// ClearQuestionBankID clears the value of the "question_bank_id" field.
func (tcuo *TkChapterUpdateOne) ClearQuestionBankID() *TkChapterUpdateOne {
	tcuo.mutation.ClearQuestionBankID()
	return tcuo
}

// SetQuestionCount sets the "question_count" field.
func (tcuo *TkChapterUpdateOne) SetQuestionCount(i int) *TkChapterUpdateOne {
	tcuo.mutation.ResetQuestionCount()
	tcuo.mutation.SetQuestionCount(i)
	return tcuo
}

// SetNillableQuestionCount sets the "question_count" field if the given value is not nil.
func (tcuo *TkChapterUpdateOne) SetNillableQuestionCount(i *int) *TkChapterUpdateOne {
	if i != nil {
		tcuo.SetQuestionCount(*i)
	}
	return tcuo
}

// AddQuestionCount adds i to the "question_count" field.
func (tcuo *TkChapterUpdateOne) AddQuestionCount(i int) *TkChapterUpdateOne {
	tcuo.mutation.AddQuestionCount(i)
	return tcuo
}

// SetQuestionBank sets the "question_bank" edge to the TkQuestionBank entity.
func (tcuo *TkChapterUpdateOne) SetQuestionBank(t *TkQuestionBank) *TkChapterUpdateOne {
	return tcuo.SetQuestionBankID(t.ID)
}

// AddSectionIDs adds the "sections" edge to the TkSection entity by IDs.
func (tcuo *TkChapterUpdateOne) AddSectionIDs(ids ...int) *TkChapterUpdateOne {
	tcuo.mutation.AddSectionIDs(ids...)
	return tcuo
}

// AddSections adds the "sections" edges to the TkSection entity.
func (tcuo *TkChapterUpdateOne) AddSections(t ...*TkSection) *TkChapterUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.AddSectionIDs(ids...)
}

// Mutation returns the TkChapterMutation object of the builder.
func (tcuo *TkChapterUpdateOne) Mutation() *TkChapterMutation {
	return tcuo.mutation
}

// ClearQuestionBank clears the "question_bank" edge to the TkQuestionBank entity.
func (tcuo *TkChapterUpdateOne) ClearQuestionBank() *TkChapterUpdateOne {
	tcuo.mutation.ClearQuestionBank()
	return tcuo
}

// ClearSections clears all "sections" edges to the TkSection entity.
func (tcuo *TkChapterUpdateOne) ClearSections() *TkChapterUpdateOne {
	tcuo.mutation.ClearSections()
	return tcuo
}

// RemoveSectionIDs removes the "sections" edge to TkSection entities by IDs.
func (tcuo *TkChapterUpdateOne) RemoveSectionIDs(ids ...int) *TkChapterUpdateOne {
	tcuo.mutation.RemoveSectionIDs(ids...)
	return tcuo
}

// RemoveSections removes "sections" edges to TkSection entities.
func (tcuo *TkChapterUpdateOne) RemoveSections(t ...*TkSection) *TkChapterUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.RemoveSectionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TkChapterUpdateOne) Select(field string, fields ...string) *TkChapterUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TkChapter entity.
func (tcuo *TkChapterUpdateOne) Save(ctx context.Context) (*TkChapter, error) {
	var (
		err  error
		node *TkChapter
	)
	tcuo.defaults()
	if len(tcuo.hooks) == 0 {
		node, err = tcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TkChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcuo.mutation = mutation
			node, err = tcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tcuo.hooks) - 1; i >= 0; i-- {
			mut = tcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TkChapterUpdateOne) SaveX(ctx context.Context) *TkChapter {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TkChapterUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TkChapterUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *TkChapterUpdateOne) defaults() {
	if _, ok := tcuo.mutation.UpdatedAt(); !ok && !tcuo.mutation.UpdatedAtCleared() {
		v := tkchapter.UpdateDefaultUpdatedAt()
		tcuo.mutation.SetUpdatedAt(v)
	}
}

func (tcuo *TkChapterUpdateOne) sqlSave(ctx context.Context) (_node *TkChapter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tkchapter.Table,
			Columns: tkchapter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tkchapter.FieldID,
			},
		},
	}
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TkChapter.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tkchapter.FieldID)
		for _, f := range fields {
			if !tkchapter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tkchapter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkchapter.FieldUUID,
		})
	}
	if tcuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkchapter.FieldCreatedAt,
		})
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkchapter.FieldUpdatedAt,
		})
	}
	if tcuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkchapter.FieldUpdatedAt,
		})
	}
	if value, ok := tcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tkchapter.FieldDeletedAt,
		})
	}
	if tcuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tkchapter.FieldDeletedAt,
		})
	}
	if value, ok := tcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tkchapter.FieldName,
		})
	}
	if value, ok := tcuo.mutation.QuestionCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkchapter.FieldQuestionCount,
		})
	}
	if value, ok := tcuo.mutation.AddedQuestionCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tkchapter.FieldQuestionCount,
		})
	}
	if tcuo.mutation.QuestionBankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkchapter.QuestionBankTable,
			Columns: []string{tkchapter.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.QuestionBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tkchapter.QuestionBankTable,
			Columns: []string{tkchapter.QuestionBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tkquestionbank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkchapter.SectionsTable,
			Columns: []string{tkchapter.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedSectionsIDs(); len(nodes) > 0 && !tcuo.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkchapter.SectionsTable,
			Columns: []string{tkchapter.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tkchapter.SectionsTable,
			Columns: []string{tkchapter.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TkChapter{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tkchapter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

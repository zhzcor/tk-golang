// Code generated by entc, DO NOT EDIT.

package tkquestionerrorfeedback

import (
	"time"
	"tkserver/internal/store/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// ErrorDesc applies equality check predicate on the "error_desc" field. It's identical to ErrorDescEQ.
func ErrorDesc(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorDesc), v))
	})
}

// ErrorType applies equality check predicate on the "error_type" field. It's identical to ErrorTypeEQ.
func ErrorType(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorType), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// DealRemark applies equality check predicate on the "deal_remark" field. It's identical to DealRemarkEQ.
func DealRemark(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDealRemark), v))
	})
}

// OperatorAdminID applies equality check predicate on the "operator_admin_id" field. It's identical to OperatorAdminIDEQ.
func OperatorAdminID(v int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorAdminID), v))
	})
}

// QuestionID applies equality check predicate on the "question_id" field. It's identical to QuestionIDEQ.
func QuestionID(v int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionID), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// ErrorDescEQ applies the EQ predicate on the "error_desc" field.
func ErrorDescEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescNEQ applies the NEQ predicate on the "error_desc" field.
func ErrorDescNEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescIn applies the In predicate on the "error_desc" field.
func ErrorDescIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldErrorDesc), v...))
	})
}

// ErrorDescNotIn applies the NotIn predicate on the "error_desc" field.
func ErrorDescNotIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldErrorDesc), v...))
	})
}

// ErrorDescGT applies the GT predicate on the "error_desc" field.
func ErrorDescGT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescGTE applies the GTE predicate on the "error_desc" field.
func ErrorDescGTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescLT applies the LT predicate on the "error_desc" field.
func ErrorDescLT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescLTE applies the LTE predicate on the "error_desc" field.
func ErrorDescLTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescContains applies the Contains predicate on the "error_desc" field.
func ErrorDescContains(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescHasPrefix applies the HasPrefix predicate on the "error_desc" field.
func ErrorDescHasPrefix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescHasSuffix applies the HasSuffix predicate on the "error_desc" field.
func ErrorDescHasSuffix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescEqualFold applies the EqualFold predicate on the "error_desc" field.
func ErrorDescEqualFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldErrorDesc), v))
	})
}

// ErrorDescContainsFold applies the ContainsFold predicate on the "error_desc" field.
func ErrorDescContainsFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldErrorDesc), v))
	})
}

// ErrorTypeEQ applies the EQ predicate on the "error_type" field.
func ErrorTypeEQ(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorType), v))
	})
}

// ErrorTypeNEQ applies the NEQ predicate on the "error_type" field.
func ErrorTypeNEQ(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldErrorType), v))
	})
}

// ErrorTypeIn applies the In predicate on the "error_type" field.
func ErrorTypeIn(vs ...uint8) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldErrorType), v...))
	})
}

// ErrorTypeNotIn applies the NotIn predicate on the "error_type" field.
func ErrorTypeNotIn(vs ...uint8) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldErrorType), v...))
	})
}

// ErrorTypeGT applies the GT predicate on the "error_type" field.
func ErrorTypeGT(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldErrorType), v))
	})
}

// ErrorTypeGTE applies the GTE predicate on the "error_type" field.
func ErrorTypeGTE(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldErrorType), v))
	})
}

// ErrorTypeLT applies the LT predicate on the "error_type" field.
func ErrorTypeLT(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldErrorType), v))
	})
}

// ErrorTypeLTE applies the LTE predicate on the "error_type" field.
func ErrorTypeLTE(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldErrorType), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// DealRemarkEQ applies the EQ predicate on the "deal_remark" field.
func DealRemarkEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDealRemark), v))
	})
}

// DealRemarkNEQ applies the NEQ predicate on the "deal_remark" field.
func DealRemarkNEQ(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDealRemark), v))
	})
}

// DealRemarkIn applies the In predicate on the "deal_remark" field.
func DealRemarkIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDealRemark), v...))
	})
}

// DealRemarkNotIn applies the NotIn predicate on the "deal_remark" field.
func DealRemarkNotIn(vs ...string) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDealRemark), v...))
	})
}

// DealRemarkGT applies the GT predicate on the "deal_remark" field.
func DealRemarkGT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDealRemark), v))
	})
}

// DealRemarkGTE applies the GTE predicate on the "deal_remark" field.
func DealRemarkGTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDealRemark), v))
	})
}

// DealRemarkLT applies the LT predicate on the "deal_remark" field.
func DealRemarkLT(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDealRemark), v))
	})
}

// DealRemarkLTE applies the LTE predicate on the "deal_remark" field.
func DealRemarkLTE(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDealRemark), v))
	})
}

// DealRemarkContains applies the Contains predicate on the "deal_remark" field.
func DealRemarkContains(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDealRemark), v))
	})
}

// DealRemarkHasPrefix applies the HasPrefix predicate on the "deal_remark" field.
func DealRemarkHasPrefix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDealRemark), v))
	})
}

// DealRemarkHasSuffix applies the HasSuffix predicate on the "deal_remark" field.
func DealRemarkHasSuffix(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDealRemark), v))
	})
}

// DealRemarkEqualFold applies the EqualFold predicate on the "deal_remark" field.
func DealRemarkEqualFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDealRemark), v))
	})
}

// DealRemarkContainsFold applies the ContainsFold predicate on the "deal_remark" field.
func DealRemarkContainsFold(v string) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDealRemark), v))
	})
}

// OperatorAdminIDEQ applies the EQ predicate on the "operator_admin_id" field.
func OperatorAdminIDEQ(v int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorAdminID), v))
	})
}

// OperatorAdminIDNEQ applies the NEQ predicate on the "operator_admin_id" field.
func OperatorAdminIDNEQ(v int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperatorAdminID), v))
	})
}

// OperatorAdminIDIn applies the In predicate on the "operator_admin_id" field.
func OperatorAdminIDIn(vs ...int) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperatorAdminID), v...))
	})
}

// OperatorAdminIDNotIn applies the NotIn predicate on the "operator_admin_id" field.
func OperatorAdminIDNotIn(vs ...int) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperatorAdminID), v...))
	})
}

// OperatorAdminIDIsNil applies the IsNil predicate on the "operator_admin_id" field.
func OperatorAdminIDIsNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperatorAdminID)))
	})
}

// OperatorAdminIDNotNil applies the NotNil predicate on the "operator_admin_id" field.
func OperatorAdminIDNotNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperatorAdminID)))
	})
}

// QuestionIDEQ applies the EQ predicate on the "question_id" field.
func QuestionIDEQ(v int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionID), v))
	})
}

// QuestionIDNEQ applies the NEQ predicate on the "question_id" field.
func QuestionIDNEQ(v int) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionID), v))
	})
}

// QuestionIDIn applies the In predicate on the "question_id" field.
func QuestionIDIn(vs ...int) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionID), v...))
	})
}

// QuestionIDNotIn applies the NotIn predicate on the "question_id" field.
func QuestionIDNotIn(vs ...int) predicate.TkQuestionErrorFeedback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionID), v...))
	})
}

// QuestionIDIsNil applies the IsNil predicate on the "question_id" field.
func QuestionIDIsNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuestionID)))
	})
}

// QuestionIDNotNil applies the NotNil predicate on the "question_id" field.
func QuestionIDNotNil() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuestionID)))
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.TkQuestion) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmin applies the HasEdge predicate on the "admin" edge.
func HasAdmin() predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminWith applies the HasEdge predicate on the "admin" edge with a given conditions (other predicates).
func HasAdminWith(preds ...predicate.Admin) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TkQuestionErrorFeedback) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TkQuestionErrorFeedback) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TkQuestionErrorFeedback) predicate.TkQuestionErrorFeedback {
	return predicate.TkQuestionErrorFeedback(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gserver/internal/store/ent/attachment"
	"gserver/internal/store/ent/major"
	"gserver/internal/store/ent/majordetail"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// MajorDetail is the model entity for the MajorDetail schema.
type MajorDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name"`
	// Desc holds the value of the "desc" field.
	// 专业简介
	Desc string `json:"desc"`
	// SubjectCount holds the value of the "subject_count" field.
	// 科目数量
	SubjectCount uint8 `json:"subject_count"`
	// Star holds the value of the "star" field.
	// 通关系数，0-5星
	Star string `json:"star"`
	// PassRate holds the value of the "pass_rate" field.
	// 通过率
	PassRate uint8 `json:"pass_rate"`
	// StudentCount holds the value of the "student_count" field.
	// 学习人数
	StudentCount uint32 `json:"student_count"`
	// StudyDuration holds the value of the "study_duration" field.
	// 学习时长
	StudyDuration uint8 `json:"study_duration"`
	// MajorID holds the value of the "major_id" field.
	// 专业id
	MajorID int `json:"major_id"`
	// CoverImgID holds the value of the "cover_img_id" field.
	// 封面图id
	CoverImgID int `json:"cover_img_id"`
	// SubjectImgID holds the value of the "subject_img_id" field.
	// 科目图id
	SubjectImgID int `json:"subject_img_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MajorDetailQuery when eager-loading is set.
	Edges MajorDetailEdges `json:"edges"`
}

// MajorDetailEdges holds the relations/edges for other nodes in the graph.
type MajorDetailEdges struct {
	// MajorDetailTags holds the value of the major_detail_tags edge.
	MajorDetailTags []*MajorDetailTag `json:"major_detail_tags,omitempty"`
	// CoverAttachment holds the value of the cover_attachment edge.
	CoverAttachment *Attachment `json:"cover_attachment,omitempty"`
	// SubjectAttachment holds the value of the subject_attachment edge.
	SubjectAttachment *Attachment `json:"subject_attachment,omitempty"`
	// TeacherAttachments holds the value of the teacher_attachments edge.
	TeacherAttachments []*Attachment `json:"teacher_attachments,omitempty"`
	// ServiceAttachments holds the value of the service_attachments edge.
	ServiceAttachments []*Attachment `json:"service_attachments,omitempty"`
	// Major holds the value of the major edge.
	Major *Major `json:"major,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// MajorDetailTagsOrErr returns the MajorDetailTags value or an error if the edge
// was not loaded in eager-loading.
func (e MajorDetailEdges) MajorDetailTagsOrErr() ([]*MajorDetailTag, error) {
	if e.loadedTypes[0] {
		return e.MajorDetailTags, nil
	}
	return nil, &NotLoadedError{edge: "major_detail_tags"}
}

// CoverAttachmentOrErr returns the CoverAttachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MajorDetailEdges) CoverAttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[1] {
		if e.CoverAttachment == nil {
			// The edge cover_attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.CoverAttachment, nil
	}
	return nil, &NotLoadedError{edge: "cover_attachment"}
}

// SubjectAttachmentOrErr returns the SubjectAttachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MajorDetailEdges) SubjectAttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[2] {
		if e.SubjectAttachment == nil {
			// The edge subject_attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.SubjectAttachment, nil
	}
	return nil, &NotLoadedError{edge: "subject_attachment"}
}

// TeacherAttachmentsOrErr returns the TeacherAttachments value or an error if the edge
// was not loaded in eager-loading.
func (e MajorDetailEdges) TeacherAttachmentsOrErr() ([]*Attachment, error) {
	if e.loadedTypes[3] {
		return e.TeacherAttachments, nil
	}
	return nil, &NotLoadedError{edge: "teacher_attachments"}
}

// ServiceAttachmentsOrErr returns the ServiceAttachments value or an error if the edge
// was not loaded in eager-loading.
func (e MajorDetailEdges) ServiceAttachmentsOrErr() ([]*Attachment, error) {
	if e.loadedTypes[4] {
		return e.ServiceAttachments, nil
	}
	return nil, &NotLoadedError{edge: "service_attachments"}
}

// MajorOrErr returns the Major value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MajorDetailEdges) MajorOrErr() (*Major, error) {
	if e.loadedTypes[5] {
		if e.Major == nil {
			// The edge major was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: major.Label}
		}
		return e.Major, nil
	}
	return nil, &NotLoadedError{edge: "major"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MajorDetail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case majordetail.FieldID, majordetail.FieldSubjectCount, majordetail.FieldPassRate, majordetail.FieldStudentCount, majordetail.FieldStudyDuration, majordetail.FieldMajorID, majordetail.FieldCoverImgID, majordetail.FieldSubjectImgID:
			values[i] = new(sql.NullInt64)
		case majordetail.FieldUUID, majordetail.FieldName, majordetail.FieldDesc, majordetail.FieldStar:
			values[i] = new(sql.NullString)
		case majordetail.FieldCreatedAt, majordetail.FieldUpdatedAt, majordetail.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MajorDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MajorDetail fields.
func (md *MajorDetail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case majordetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			md.ID = int(value.Int64)
		case majordetail.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				md.UUID = value.String
			}
		case majordetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				md.CreatedAt = new(time.Time)
				*md.CreatedAt = value.Time
			}
		case majordetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				md.UpdatedAt = new(time.Time)
				*md.UpdatedAt = value.Time
			}
		case majordetail.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				md.DeletedAt = new(time.Time)
				*md.DeletedAt = value.Time
			}
		case majordetail.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				md.Name = value.String
			}
		case majordetail.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				md.Desc = value.String
			}
		case majordetail.FieldSubjectCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subject_count", values[i])
			} else if value.Valid {
				md.SubjectCount = uint8(value.Int64)
			}
		case majordetail.FieldStar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field star", values[i])
			} else if value.Valid {
				md.Star = value.String
			}
		case majordetail.FieldPassRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pass_rate", values[i])
			} else if value.Valid {
				md.PassRate = uint8(value.Int64)
			}
		case majordetail.FieldStudentCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field student_count", values[i])
			} else if value.Valid {
				md.StudentCount = uint32(value.Int64)
			}
		case majordetail.FieldStudyDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field study_duration", values[i])
			} else if value.Valid {
				md.StudyDuration = uint8(value.Int64)
			}
		case majordetail.FieldMajorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field major_id", values[i])
			} else if value.Valid {
				md.MajorID = int(value.Int64)
			}
		case majordetail.FieldCoverImgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cover_img_id", values[i])
			} else if value.Valid {
				md.CoverImgID = int(value.Int64)
			}
		case majordetail.FieldSubjectImgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subject_img_id", values[i])
			} else if value.Valid {
				md.SubjectImgID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMajorDetailTags queries the "major_detail_tags" edge of the MajorDetail entity.
func (md *MajorDetail) QueryMajorDetailTags() *MajorDetailTagQuery {
	return (&MajorDetailClient{config: md.config}).QueryMajorDetailTags(md)
}

// QueryCoverAttachment queries the "cover_attachment" edge of the MajorDetail entity.
func (md *MajorDetail) QueryCoverAttachment() *AttachmentQuery {
	return (&MajorDetailClient{config: md.config}).QueryCoverAttachment(md)
}

// QuerySubjectAttachment queries the "subject_attachment" edge of the MajorDetail entity.
func (md *MajorDetail) QuerySubjectAttachment() *AttachmentQuery {
	return (&MajorDetailClient{config: md.config}).QuerySubjectAttachment(md)
}

// QueryTeacherAttachments queries the "teacher_attachments" edge of the MajorDetail entity.
func (md *MajorDetail) QueryTeacherAttachments() *AttachmentQuery {
	return (&MajorDetailClient{config: md.config}).QueryTeacherAttachments(md)
}

// QueryServiceAttachments queries the "service_attachments" edge of the MajorDetail entity.
func (md *MajorDetail) QueryServiceAttachments() *AttachmentQuery {
	return (&MajorDetailClient{config: md.config}).QueryServiceAttachments(md)
}

// QueryMajor queries the "major" edge of the MajorDetail entity.
func (md *MajorDetail) QueryMajor() *MajorQuery {
	return (&MajorDetailClient{config: md.config}).QueryMajor(md)
}

// Update returns a builder for updating this MajorDetail.
// Note that you need to call MajorDetail.Unwrap() before calling this method if this MajorDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (md *MajorDetail) Update() *MajorDetailUpdateOne {
	return (&MajorDetailClient{config: md.config}).UpdateOne(md)
}

// Unwrap unwraps the MajorDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (md *MajorDetail) Unwrap() *MajorDetail {
	tx, ok := md.config.driver.(*txDriver)
	if !ok {
		panic("ent: MajorDetail is not a transactional entity")
	}
	md.config.driver = tx.drv
	return md
}

// String implements the fmt.Stringer.
func (md *MajorDetail) String() string {
	var builder strings.Builder
	builder.WriteString("MajorDetail(")
	builder.WriteString(fmt.Sprintf("id=%v", md.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(md.UUID)
	if v := md.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := md.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := md.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(md.Name)
	builder.WriteString(", desc=")
	builder.WriteString(md.Desc)
	builder.WriteString(", subject_count=")
	builder.WriteString(fmt.Sprintf("%v", md.SubjectCount))
	builder.WriteString(", star=")
	builder.WriteString(md.Star)
	builder.WriteString(", pass_rate=")
	builder.WriteString(fmt.Sprintf("%v", md.PassRate))
	builder.WriteString(", student_count=")
	builder.WriteString(fmt.Sprintf("%v", md.StudentCount))
	builder.WriteString(", study_duration=")
	builder.WriteString(fmt.Sprintf("%v", md.StudyDuration))
	builder.WriteString(", major_id=")
	builder.WriteString(fmt.Sprintf("%v", md.MajorID))
	builder.WriteString(", cover_img_id=")
	builder.WriteString(fmt.Sprintf("%v", md.CoverImgID))
	builder.WriteString(", subject_img_id=")
	builder.WriteString(fmt.Sprintf("%v", md.SubjectImgID))
	builder.WriteByte(')')
	return builder.String()
}

// MajorDetails is a parsable slice of MajorDetail.
type MajorDetails []*MajorDetail

func (md MajorDetails) config(cfg config) {
	for _i := range md {
		md[_i].config = cfg
	}
}

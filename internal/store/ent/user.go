// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tkserver/internal/store/ent/city"
	"tkserver/internal/store/ent/itemcategory"
	"tkserver/internal/store/ent/user"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// Password holds the value of the "password" field.
	Password string `json:"password"`
	// Salt holds the value of the "salt" field.
	Salt string `json:"salt"`
	// BossUserID holds the value of the "boss_user_id" field.
	BossUserID int `json:"boss_user_id"`
	// Email holds the value of the "email" field.
	Email string `json:"email"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname"`
	// Username holds the value of the "username" field.
	Username string `json:"username"`
	// Status holds the value of the "status" field.
	// 学员状态：预留
	Status uint8 `json:"status"`
	// Sex holds the value of the "sex" field.
	// 性别，1：男，2：女，3：未知
	Sex uint8 `json:"sex"`
	// RegFrom holds the value of the "reg_from" field.
	// 用户注册的来源，1：系统同步，2:系统注册，3：人工添加，4：用户注册
	RegFrom uint8 `json:"reg_from"`
	// CardType holds the value of the "card_type" field.
	// 证件类型，1：无，2：身份证，3：居住证，4：护照，5：港澳台身份证
	CardType uint8 `json:"card_type"`
	// IDCard holds the value of the "id_card" field.
	IDCard string `json:"id_card"`
	// FromCityID holds the value of the "from_city_id" field.
	FromCityID int `json:"from_city_id"`
	// FromItemCategoryID holds the value of the "from_item_category_id" field.
	FromItemCategoryID int `json:"from_item_category_id"`
	// Birthday holds the value of the "birthday" field.
	Birthday *time.Time `json:"birthday"`
	// SignRemark holds the value of the "sign_remark" field.
	SignRemark string `json:"sign_remark"`
	// Avatar holds the value of the "avatar" field.
	// 用户头像
	Avatar string `json:"avatar"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// LoginLog holds the value of the login_log edge.
	LoginLog []*UserLoginLog `json:"login_log,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// UserCourses holds the value of the user_courses edge.
	UserCourses []*KcUserCourse `json:"user_courses,omitempty"`
	// UserClasses holds the value of the user_classes edge.
	UserClasses []*KcUserClass `json:"user_classes,omitempty"`
	// UserExamsRecords holds the value of the user_exams_records edge.
	UserExamsRecords []*TkUserExamScoreRecord `json:"user_exams_records,omitempty"`
	// UserQuestionBankRecords holds the value of the user_question_bank_records edge.
	UserQuestionBankRecords []*TkUserQuestionBankRecord `json:"user_question_bank_records,omitempty"`
	// UserQuestionRecords holds the value of the user_question_records edge.
	UserQuestionRecords []*TkUserQuestionRecord `json:"user_question_records,omitempty"`
	// AskUsers holds the value of the ask_users edge.
	AskUsers []*UserAskAnswer `json:"ask_users,omitempty"`
	// CourseAppraiseUsers holds the value of the course_appraise_users edge.
	CourseAppraiseUsers []*UserCourseAppraise `json:"course_appraise_users,omitempty"`
	// UserVideoRecord holds the value of the user_video_record edge.
	UserVideoRecord []*VideoRecord `json:"user_video_record,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Cate holds the value of the cate edge.
	Cate *ItemCategory `json:"cate,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
}

// LoginLogOrErr returns the LoginLog value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LoginLogOrErr() ([]*UserLoginLog, error) {
	if e.loadedTypes[0] {
		return e.LoginLog, nil
	}
	return nil, &NotLoadedError{edge: "login_log"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// UserCoursesOrErr returns the UserCourses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserCoursesOrErr() ([]*KcUserCourse, error) {
	if e.loadedTypes[2] {
		return e.UserCourses, nil
	}
	return nil, &NotLoadedError{edge: "user_courses"}
}

// UserClassesOrErr returns the UserClasses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserClassesOrErr() ([]*KcUserClass, error) {
	if e.loadedTypes[3] {
		return e.UserClasses, nil
	}
	return nil, &NotLoadedError{edge: "user_classes"}
}

// UserExamsRecordsOrErr returns the UserExamsRecords value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserExamsRecordsOrErr() ([]*TkUserExamScoreRecord, error) {
	if e.loadedTypes[4] {
		return e.UserExamsRecords, nil
	}
	return nil, &NotLoadedError{edge: "user_exams_records"}
}

// UserQuestionBankRecordsOrErr returns the UserQuestionBankRecords value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserQuestionBankRecordsOrErr() ([]*TkUserQuestionBankRecord, error) {
	if e.loadedTypes[5] {
		return e.UserQuestionBankRecords, nil
	}
	return nil, &NotLoadedError{edge: "user_question_bank_records"}
}

// UserQuestionRecordsOrErr returns the UserQuestionRecords value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserQuestionRecordsOrErr() ([]*TkUserQuestionRecord, error) {
	if e.loadedTypes[6] {
		return e.UserQuestionRecords, nil
	}
	return nil, &NotLoadedError{edge: "user_question_records"}
}

// AskUsersOrErr returns the AskUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AskUsersOrErr() ([]*UserAskAnswer, error) {
	if e.loadedTypes[7] {
		return e.AskUsers, nil
	}
	return nil, &NotLoadedError{edge: "ask_users"}
}

// CourseAppraiseUsersOrErr returns the CourseAppraiseUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CourseAppraiseUsersOrErr() ([]*UserCourseAppraise, error) {
	if e.loadedTypes[8] {
		return e.CourseAppraiseUsers, nil
	}
	return nil, &NotLoadedError{edge: "course_appraise_users"}
}

// UserVideoRecordOrErr returns the UserVideoRecord value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserVideoRecordOrErr() ([]*VideoRecord, error) {
	if e.loadedTypes[9] {
		return e.UserVideoRecord, nil
	}
	return nil, &NotLoadedError{edge: "user_video_record"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[10] {
		if e.City == nil {
			// The edge city was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// CateOrErr returns the Cate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CateOrErr() (*ItemCategory, error) {
	if e.loadedTypes[11] {
		if e.Cate == nil {
			// The edge cate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: itemcategory.Label}
		}
		return e.Cate, nil
	}
	return nil, &NotLoadedError{edge: "cate"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldBossUserID, user.FieldStatus, user.FieldSex, user.FieldRegFrom, user.FieldCardType, user.FieldFromCityID, user.FieldFromItemCategoryID:
			values[i] = new(sql.NullInt64)
		case user.FieldUUID, user.FieldPassword, user.FieldSalt, user.FieldEmail, user.FieldPhone, user.FieldNickname, user.FieldUsername, user.FieldIDCard, user.FieldSignRemark, user.FieldAvatar:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt, user.FieldBirthday:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				u.UUID = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = new(time.Time)
				*u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = new(time.Time)
				*u.UpdatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = new(time.Time)
				*u.DeletedAt = value.Time
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value.Valid {
				u.Salt = value.String
			}
		case user.FieldBossUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field boss_user_id", values[i])
			} else if value.Valid {
				u.BossUserID = int(value.Int64)
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				u.Nickname = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = uint8(value.Int64)
			}
		case user.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				u.Sex = uint8(value.Int64)
			}
		case user.FieldRegFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reg_from", values[i])
			} else if value.Valid {
				u.RegFrom = uint8(value.Int64)
			}
		case user.FieldCardType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field card_type", values[i])
			} else if value.Valid {
				u.CardType = uint8(value.Int64)
			}
		case user.FieldIDCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card", values[i])
			} else if value.Valid {
				u.IDCard = value.String
			}
		case user.FieldFromCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_city_id", values[i])
			} else if value.Valid {
				u.FromCityID = int(value.Int64)
			}
		case user.FieldFromItemCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_item_category_id", values[i])
			} else if value.Valid {
				u.FromItemCategoryID = int(value.Int64)
			}
		case user.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				u.Birthday = new(time.Time)
				*u.Birthday = value.Time
			}
		case user.FieldSignRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sign_remark", values[i])
			} else if value.Valid {
				u.SignRemark = value.String
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		}
	}
	return nil
}

// QueryLoginLog queries the "login_log" edge of the User entity.
func (u *User) QueryLoginLog() *UserLoginLogQuery {
	return (&UserClient{config: u.config}).QueryLoginLog(u)
}

// QueryMessages queries the "messages" edge of the User entity.
func (u *User) QueryMessages() *MessageQuery {
	return (&UserClient{config: u.config}).QueryMessages(u)
}

// QueryUserCourses queries the "user_courses" edge of the User entity.
func (u *User) QueryUserCourses() *KcUserCourseQuery {
	return (&UserClient{config: u.config}).QueryUserCourses(u)
}

// QueryUserClasses queries the "user_classes" edge of the User entity.
func (u *User) QueryUserClasses() *KcUserClassQuery {
	return (&UserClient{config: u.config}).QueryUserClasses(u)
}

// QueryUserExamsRecords queries the "user_exams_records" edge of the User entity.
func (u *User) QueryUserExamsRecords() *TkUserExamScoreRecordQuery {
	return (&UserClient{config: u.config}).QueryUserExamsRecords(u)
}

// QueryUserQuestionBankRecords queries the "user_question_bank_records" edge of the User entity.
func (u *User) QueryUserQuestionBankRecords() *TkUserQuestionBankRecordQuery {
	return (&UserClient{config: u.config}).QueryUserQuestionBankRecords(u)
}

// QueryUserQuestionRecords queries the "user_question_records" edge of the User entity.
func (u *User) QueryUserQuestionRecords() *TkUserQuestionRecordQuery {
	return (&UserClient{config: u.config}).QueryUserQuestionRecords(u)
}

// QueryAskUsers queries the "ask_users" edge of the User entity.
func (u *User) QueryAskUsers() *UserAskAnswerQuery {
	return (&UserClient{config: u.config}).QueryAskUsers(u)
}

// QueryCourseAppraiseUsers queries the "course_appraise_users" edge of the User entity.
func (u *User) QueryCourseAppraiseUsers() *UserCourseAppraiseQuery {
	return (&UserClient{config: u.config}).QueryCourseAppraiseUsers(u)
}

// QueryUserVideoRecord queries the "user_video_record" edge of the User entity.
func (u *User) QueryUserVideoRecord() *VideoRecordQuery {
	return (&UserClient{config: u.config}).QueryUserVideoRecord(u)
}

// QueryCity queries the "city" edge of the User entity.
func (u *User) QueryCity() *CityQuery {
	return (&UserClient{config: u.config}).QueryCity(u)
}

// QueryCate queries the "cate" edge of the User entity.
func (u *User) QueryCate() *ItemCategoryQuery {
	return (&UserClient{config: u.config}).QueryCate(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(u.UUID)
	if v := u.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := u.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := u.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteString(", salt=")
	builder.WriteString(u.Salt)
	builder.WriteString(", boss_user_id=")
	builder.WriteString(fmt.Sprintf("%v", u.BossUserID))
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", nickname=")
	builder.WriteString(u.Nickname)
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", sex=")
	builder.WriteString(fmt.Sprintf("%v", u.Sex))
	builder.WriteString(", reg_from=")
	builder.WriteString(fmt.Sprintf("%v", u.RegFrom))
	builder.WriteString(", card_type=")
	builder.WriteString(fmt.Sprintf("%v", u.CardType))
	builder.WriteString(", id_card=")
	builder.WriteString(u.IDCard)
	builder.WriteString(", from_city_id=")
	builder.WriteString(fmt.Sprintf("%v", u.FromCityID))
	builder.WriteString(", from_item_category_id=")
	builder.WriteString(fmt.Sprintf("%v", u.FromItemCategoryID))
	if v := u.Birthday; v != nil {
		builder.WriteString(", birthday=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", sign_remark=")
	builder.WriteString(u.SignRemark)
	builder.WriteString(", avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

const ForPageDefaultPageSize = 10
const ForPageDefaultPage = 0

func (aq *ActivityQuery) ForPage(page, pageSize *int) *ActivityQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return aq.Offset(o).Limit(l)
}

func (aaiq *ActivityApplyInfoQuery) ForPage(page, pageSize *int) *ActivityApplyInfoQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return aaiq.Offset(o).Limit(l)
}

func (atq *ActivityTypeQuery) ForPage(page, pageSize *int) *ActivityTypeQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return atq.Offset(o).Limit(l)
}

func (aq *AdminQuery) ForPage(page, pageSize *int) *AdminQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return aq.Offset(o).Limit(l)
}

func (allq *AdminLoginLogQuery) ForPage(page, pageSize *int) *AdminLoginLogQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return allq.Offset(o).Limit(l)
}

func (aolq *AdminOperationLogQuery) ForPage(page, pageSize *int) *AdminOperationLogQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return aolq.Offset(o).Limit(l)
}

func (aq *AdvertiseQuery) ForPage(page, pageSize *int) *AdvertiseQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return aq.Offset(o).Limit(l)
}

func (aaq *AppAgreementQuery) ForPage(page, pageSize *int) *AppAgreementQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return aaq.Offset(o).Limit(l)
}

func (avq *AppVersionQuery) ForPage(page, pageSize *int) *AppVersionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return avq.Offset(o).Limit(l)
}

func (aq *AttachmentQuery) ForPage(page, pageSize *int) *AttachmentQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return aq.Offset(o).Limit(l)
}

func (cq *CityQuery) ForPage(page, pageSize *int) *CityQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return cq.Offset(o).Limit(l)
}

func (cq *CollectionQuery) ForPage(page, pageSize *int) *CollectionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return cq.Offset(o).Limit(l)
}

func (hsq *HotSearchQuery) ForPage(page, pageSize *int) *HotSearchQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return hsq.Offset(o).Limit(l)
}

func (itq *ImportTaskQuery) ForPage(page, pageSize *int) *ImportTaskQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return itq.Offset(o).Limit(l)
}

func (icq *InformationClassifyQuery) ForPage(page, pageSize *int) *InformationClassifyQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return icq.Offset(o).Limit(l)
}

func (icq *ItemCategoryQuery) ForPage(page, pageSize *int) *ItemCategoryQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return icq.Offset(o).Limit(l)
}

func (kcq *KcClassQuery) ForPage(page, pageSize *int) *KcClassQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kcq.Offset(o).Limit(l)
}

func (kctq *KcClassTeacherQuery) ForPage(page, pageSize *int) *KcClassTeacherQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kctq.Offset(o).Limit(l)
}

func (kcq *KcCourseQuery) ForPage(page, pageSize *int) *KcCourseQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kcq.Offset(o).Limit(l)
}

func (kccq *KcCourseChapterQuery) ForPage(page, pageSize *int) *KcCourseChapterQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kccq.Offset(o).Limit(l)
}

func (kcsq *KcCourseSectionQuery) ForPage(page, pageSize *int) *KcCourseSectionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kcsq.Offset(o).Limit(l)
}

func (kcscq *KcCourseSmallCategoryQuery) ForPage(page, pageSize *int) *KcCourseSmallCategoryQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kcscq.Offset(o).Limit(l)
}

func (kctq *KcCourseTeacherQuery) ForPage(page, pageSize *int) *KcCourseTeacherQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kctq.Offset(o).Limit(l)
}

func (kcvq *KcCourseVideoQuery) ForPage(page, pageSize *int) *KcCourseVideoQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kcvq.Offset(o).Limit(l)
}

func (kscaq *KcSmallCategoryAttachmentQuery) ForPage(page, pageSize *int) *KcSmallCategoryAttachmentQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kscaq.Offset(o).Limit(l)
}

func (kscepq *KcSmallCategoryExamPaperQuery) ForPage(page, pageSize *int) *KcSmallCategoryExamPaperQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kscepq.Offset(o).Limit(l)
}

func (kscqq *KcSmallCategoryQuestionQuery) ForPage(page, pageSize *int) *KcSmallCategoryQuestionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kscqq.Offset(o).Limit(l)
}

func (kucq *KcUserClassQuery) ForPage(page, pageSize *int) *KcUserClassQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kucq.Offset(o).Limit(l)
}

func (kucq *KcUserCourseQuery) ForPage(page, pageSize *int) *KcUserCourseQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kucq.Offset(o).Limit(l)
}

func (kvutq *KcVideoUploadTaskQuery) ForPage(page, pageSize *int) *KcVideoUploadTaskQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return kvutq.Offset(o).Limit(l)
}

func (mq *MajorQuery) ForPage(page, pageSize *int) *MajorQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return mq.Offset(o).Limit(l)
}

func (mdq *MajorDetailQuery) ForPage(page, pageSize *int) *MajorDetailQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return mdq.Offset(o).Limit(l)
}

func (mdtq *MajorDetailTagQuery) ForPage(page, pageSize *int) *MajorDetailTagQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return mdtq.Offset(o).Limit(l)
}

func (muqrq *MakeUserQuestionRecordQuery) ForPage(page, pageSize *int) *MakeUserQuestionRecordQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return muqrq.Offset(o).Limit(l)
}

func (mq *MessageQuery) ForPage(page, pageSize *int) *MessageQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return mq.Offset(o).Limit(l)
}

func (mtq *MessageTypeQuery) ForPage(page, pageSize *int) *MessageTypeQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return mtq.Offset(o).Limit(l)
}

func (pq *PermissionQuery) ForPage(page, pageSize *int) *PermissionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return pq.Offset(o).Limit(l)
}

func (rq *RoleQuery) ForPage(page, pageSize *int) *RoleQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return rq.Offset(o).Limit(l)
}

func (rpq *RolePermissionQuery) ForPage(page, pageSize *int) *RolePermissionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return rpq.Offset(o).Limit(l)
}

func (spq *SharePosterQuery) ForPage(page, pageSize *int) *SharePosterQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return spq.Offset(o).Limit(l)
}

func (tq *TeacherQuery) ForPage(page, pageSize *int) *TeacherQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tq.Offset(o).Limit(l)
}

func (ttq *TeacherTagQuery) ForPage(page, pageSize *int) *TeacherTagQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return ttq.Offset(o).Limit(l)
}

func (tcq *TkChapterQuery) ForPage(page, pageSize *int) *TkChapterQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tcq.Offset(o).Limit(l)
}

func (tepq *TkExamPaperQuery) ForPage(page, pageSize *int) *TkExamPaperQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tepq.Offset(o).Limit(l)
}

func (teppq *TkExamPaperPartitionQuery) ForPage(page, pageSize *int) *TkExamPaperPartitionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return teppq.Offset(o).Limit(l)
}

func (teppsq *TkExamPaperPartitionScoreQuery) ForPage(page, pageSize *int) *TkExamPaperPartitionScoreQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return teppsq.Offset(o).Limit(l)
}

func (tepsq *TkExamPaperSimulationQuery) ForPage(page, pageSize *int) *TkExamPaperSimulationQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tepsq.Offset(o).Limit(l)
}

func (tepqlq *TkExamPartitionQuestionLinkQuery) ForPage(page, pageSize *int) *TkExamPartitionQuestionLinkQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tepqlq.Offset(o).Limit(l)
}

func (teqtq *TkExamQuestionTypeQuery) ForPage(page, pageSize *int) *TkExamQuestionTypeQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return teqtq.Offset(o).Limit(l)
}

func (tkpq *TkKnowledgePointQuery) ForPage(page, pageSize *int) *TkKnowledgePointQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tkpq.Offset(o).Limit(l)
}

func (tqq *TkQuestionQuery) ForPage(page, pageSize *int) *TkQuestionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tqq.Offset(o).Limit(l)
}

func (tqaoq *TkQuestionAnswerOptionQuery) ForPage(page, pageSize *int) *TkQuestionAnswerOptionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tqaoq.Offset(o).Limit(l)
}

func (tqbq *TkQuestionBankQuery) ForPage(page, pageSize *int) *TkQuestionBankQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tqbq.Offset(o).Limit(l)
}

func (tqefq *TkQuestionErrorFeedbackQuery) ForPage(page, pageSize *int) *TkQuestionErrorFeedbackQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tqefq.Offset(o).Limit(l)
}

func (tqsq *TkQuestionSectionQuery) ForPage(page, pageSize *int) *TkQuestionSectionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tqsq.Offset(o).Limit(l)
}

func (tsq *TkSectionQuery) ForPage(page, pageSize *int) *TkSectionQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tsq.Offset(o).Limit(l)
}

func (tuesrq *TkUserExamScoreRecordQuery) ForPage(page, pageSize *int) *TkUserExamScoreRecordQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tuesrq.Offset(o).Limit(l)
}

func (tuqbrq *TkUserQuestionBankRecordQuery) ForPage(page, pageSize *int) *TkUserQuestionBankRecordQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tuqbrq.Offset(o).Limit(l)
}

func (tuqrq *TkUserQuestionRecordQuery) ForPage(page, pageSize *int) *TkUserQuestionRecordQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tuqrq.Offset(o).Limit(l)
}

func (turerq *TkUserRandomExamRecodeQuery) ForPage(page, pageSize *int) *TkUserRandomExamRecodeQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return turerq.Offset(o).Limit(l)
}

func (tustmq *TkUserSimulationTeacherMarkQuery) ForPage(page, pageSize *int) *TkUserSimulationTeacherMarkQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tustmq.Offset(o).Limit(l)
}

func (tuwqrq *TkUserWrongQuestionRecodeQuery) ForPage(page, pageSize *int) *TkUserWrongQuestionRecodeQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return tuwqrq.Offset(o).Limit(l)
}

func (uq *UserQuery) ForPage(page, pageSize *int) *UserQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return uq.Offset(o).Limit(l)
}

func (uaaq *UserAskAnswerQuery) ForPage(page, pageSize *int) *UserAskAnswerQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return uaaq.Offset(o).Limit(l)
}

func (uaaaq *UserAskAnswerAttachmentQuery) ForPage(page, pageSize *int) *UserAskAnswerAttachmentQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return uaaaq.Offset(o).Limit(l)
}

func (ucaq *UserCourseAppraiseQuery) ForPage(page, pageSize *int) *UserCourseAppraiseQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return ucaq.Offset(o).Limit(l)
}

func (ullq *UserLoginLogQuery) ForPage(page, pageSize *int) *UserLoginLogQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return ullq.Offset(o).Limit(l)
}

func (vrq *VideoRecordQuery) ForPage(page, pageSize *int) *VideoRecordQuery {
	var p, ps, o, l int
	if page == nil {
		p = ForPageDefaultPage
	} else {
		p = *page
	}
	if pageSize == nil {
		ps = ForPageDefaultPageSize
	} else {
		ps = *pageSize
	}
	if p > 0 {
		o = (p - 1) * ps
	}
	l = ps
	return vrq.Offset(o).Limit(l)
}
